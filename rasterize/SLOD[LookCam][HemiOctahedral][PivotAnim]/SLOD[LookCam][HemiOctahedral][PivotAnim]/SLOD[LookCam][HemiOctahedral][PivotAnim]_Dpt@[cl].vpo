#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;

uint _669;

void main()
{
    uint _65 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    precise float _104 = float(NORMAL.x) + (-127.0);
    precise float _106 = float(NORMAL.y) + (-127.0);
    precise float _107 = float(NORMAL.z) + (-127.0);
    precise float _108 = _104 * 0.0078740157186985015869140625;
    precise float _110 = _106 * 0.0078740157186985015869140625;
    precise float _111 = _107 * 0.0078740157186985015869140625;
    uint _113 = _65 * 13u;
    uvec4 _119 = floatBitsToUint(cbInstanceData._m0[_113 + 7u]);
    uint _122 = min(_119.y, 8u);
    precise float _126 = POSITION.x + 0.0;
    precise float _127 = POSITION.y + 0.0;
    precise float _128 = POSITION.z + 0.0;
    uint _133 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _65;
    uint _146 = (floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_133)).x * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _153 = _146 + 1u;
    uint _160 = _146 + 2u;
    float _170 = inversesqrt(dot(vec3(cbObjMatrix._m0[_146].x, cbObjMatrix._m0[_153].x, cbObjMatrix._m0[_160].x), vec3(cbObjMatrix._m0[_146].x, cbObjMatrix._m0[_153].x, cbObjMatrix._m0[_160].x)));
    precise float _171 = cbObjMatrix._m0[_146].x * _170;
    precise float _172 = cbObjMatrix._m0[_153].x * _170;
    precise float _173 = cbObjMatrix._m0[_160].x * _170;
    float _177 = inversesqrt(dot(vec3(cbObjMatrix._m0[_146].y, cbObjMatrix._m0[_153].y, cbObjMatrix._m0[_160].y), vec3(cbObjMatrix._m0[_146].y, cbObjMatrix._m0[_153].y, cbObjMatrix._m0[_160].y)));
    precise float _178 = cbObjMatrix._m0[_146].y * _177;
    precise float _179 = cbObjMatrix._m0[_153].y * _177;
    precise float _180 = cbObjMatrix._m0[_160].y * _177;
    float _184 = inversesqrt(dot(vec3(cbObjMatrix._m0[_146].z, cbObjMatrix._m0[_153].z, cbObjMatrix._m0[_160].z), vec3(cbObjMatrix._m0[_146].z, cbObjMatrix._m0[_153].z, cbObjMatrix._m0[_160].z)));
    precise float _185 = cbObjMatrix._m0[_146].z * _184;
    precise float _186 = cbObjMatrix._m0[_153].z * _184;
    precise float _187 = cbObjMatrix._m0[_160].z * _184;
    precise float _204 = _171 * cbSceneParam._m0[5u].x;
    precise float _205 = _172 * cbSceneParam._m0[5u].y;
    precise float _206 = _205 + _204;
    precise float _207 = _173 * cbSceneParam._m0[5u].z;
    precise float _208 = _207 + _206;
    precise float _209 = _171 * cbSceneParam._m0[6u].x;
    precise float _210 = _172 * cbSceneParam._m0[6u].y;
    precise float _211 = _210 + _209;
    precise float _212 = _173 * cbSceneParam._m0[6u].z;
    precise float _213 = _212 + _211;
    precise float _214 = _171 * cbSceneParam._m0[7u].x;
    precise float _215 = _172 * cbSceneParam._m0[7u].y;
    precise float _216 = _215 + _214;
    precise float _217 = _173 * cbSceneParam._m0[7u].z;
    precise float _218 = _217 + _216;
    precise float _219 = _178 * cbSceneParam._m0[5u].x;
    precise float _220 = _179 * cbSceneParam._m0[5u].y;
    precise float _221 = _220 + _219;
    precise float _222 = _180 * cbSceneParam._m0[5u].z;
    precise float _223 = _222 + _221;
    precise float _224 = _178 * cbSceneParam._m0[6u].x;
    precise float _225 = _179 * cbSceneParam._m0[6u].y;
    precise float _226 = _225 + _224;
    precise float _227 = _180 * cbSceneParam._m0[6u].z;
    precise float _228 = _227 + _226;
    precise float _229 = _178 * cbSceneParam._m0[7u].x;
    precise float _230 = _179 * cbSceneParam._m0[7u].y;
    precise float _231 = _230 + _229;
    precise float _232 = _180 * cbSceneParam._m0[7u].z;
    precise float _233 = _232 + _231;
    precise float _234 = _185 * cbSceneParam._m0[5u].x;
    precise float _235 = _186 * cbSceneParam._m0[5u].y;
    precise float _236 = _235 + _234;
    precise float _237 = _187 * cbSceneParam._m0[5u].z;
    precise float _238 = _237 + _236;
    precise float _239 = _185 * cbSceneParam._m0[6u].x;
    precise float _240 = _186 * cbSceneParam._m0[6u].y;
    precise float _241 = _240 + _239;
    precise float _242 = _187 * cbSceneParam._m0[6u].z;
    precise float _243 = _242 + _241;
    precise float _244 = _185 * cbSceneParam._m0[7u].x;
    precise float _245 = _186 * cbSceneParam._m0[7u].y;
    precise float _246 = _245 + _244;
    precise float _247 = _187 * cbSceneParam._m0[7u].z;
    precise float _248 = _247 + _246;
    precise float _249 = _110 * 0.0;
    precise float _250 = _249 - _111;
    precise float _251 = _111 * 0.0;
    precise float _252 = _108 * 0.0;
    precise float _253 = _251 - _252;
    precise float _254 = _108 - _249;
    precise float _255 = _111 * _253;
    precise float _256 = _110 * _254;
    precise float _257 = _255 - _256;
    precise float _258 = _108 * _254;
    precise float _259 = _111 * _250;
    precise float _260 = _258 - _259;
    precise float _261 = _110 * _250;
    precise float _262 = _108 * _253;
    precise float _263 = _261 - _262;
    float _267 = inversesqrt(dot(vec3(_250, _253, _254), vec3(_250, _253, _254)));
    precise float _268 = _250 * _267;
    precise float _269 = _253 * _267;
    precise float _270 = _254 * _267;
    float _274 = inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263)));
    precise float _275 = _257 * _274;
    precise float _276 = _260 * _274;
    precise float _277 = _263 * _274;
    precise float _278 = (-0.0) - _108;
    precise float _280 = (-0.0) - _110;
    precise float _281 = (-0.0) - _111;
    float _285 = inversesqrt(dot(vec3(_278, _280, _281), vec3(_278, _280, _281)));
    precise float _286 = _285 * _278;
    precise float _287 = _285 * _280;
    precise float _288 = _285 * _281;
    precise float _289 = _126 - TEXCOORD_1.x;
    precise float _290 = _127 - TEXCOORD_1.y;
    precise float _291 = _128 - TEXCOORD_1.z;
    precise float _292 = _289 * _268;
    precise float _293 = _290 * _269;
    precise float _294 = _293 + _292;
    precise float _295 = _291 * _270;
    precise float _296 = _295 + _294;
    precise float _297 = _289 * _275;
    precise float _298 = _290 * _276;
    precise float _299 = _298 + _297;
    precise float _300 = _291 * _277;
    precise float _301 = _300 + _299;
    precise float _302 = _289 * _286;
    precise float _303 = _290 * _287;
    precise float _304 = _303 + _302;
    precise float _305 = _291 * _288;
    precise float _306 = _305 + _304;
    precise float _307 = _208 * _296;
    precise float _308 = _213 * _301;
    precise float _309 = _308 + _307;
    precise float _310 = _218 * _306;
    precise float _311 = _310 + _309;
    precise float _312 = _223 * _296;
    precise float _313 = _228 * _301;
    precise float _314 = _313 + _312;
    precise float _315 = _233 * _306;
    precise float _316 = _315 + _314;
    precise float _317 = _238 * _296;
    precise float _318 = _243 * _301;
    precise float _319 = _318 + _317;
    precise float _320 = _248 * _306;
    precise float _321 = _320 + _319;
    precise float _322 = TEXCOORD_1.x + _311;
    precise float _323 = TEXCOORD_1.y + _316;
    precise float _324 = TEXCOORD_1.z + _321;
    precise float _325 = cbObjMatrix._m0[_146].x * _322;
    precise float _326 = _323 * cbObjMatrix._m0[_146].y;
    precise float _327 = _326 + _325;
    precise float _328 = _324 * cbObjMatrix._m0[_146].z;
    precise float _329 = _328 + _327;
    precise float _330 = 1.0 * cbObjMatrix._m0[_146].w;
    precise float _332 = _330 + _329;
    precise float _333 = cbObjMatrix._m0[_153].x * _322;
    precise float _334 = _323 * cbObjMatrix._m0[_153].y;
    precise float _335 = _334 + _333;
    precise float _336 = _324 * cbObjMatrix._m0[_153].z;
    precise float _337 = _336 + _335;
    precise float _338 = 1.0 * cbObjMatrix._m0[_153].w;
    precise float _339 = _338 + _337;
    precise float _340 = cbObjMatrix._m0[_160].x * _322;
    precise float _341 = _323 * cbObjMatrix._m0[_160].y;
    precise float _342 = _341 + _340;
    precise float _343 = _324 * cbObjMatrix._m0[_160].z;
    precise float _344 = _343 + _342;
    precise float _345 = 1.0 * cbObjMatrix._m0[_160].w;
    precise float _346 = _345 + _344;
    precise float _352 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _360 = _113 + 1u;
    uint _367 = _113 + 2u;
    precise float _374 = TEXCOORD_1.x * cbInstanceData._m0[_113].x;
    precise float _375 = TEXCOORD_1.y * cbInstanceData._m0[_113].y;
    precise float _376 = _375 + _374;
    precise float _377 = TEXCOORD_1.z * cbInstanceData._m0[_113].z;
    precise float _378 = _377 + _376;
    precise float _379 = 1.0 * cbInstanceData._m0[_113].w;
    precise float _380 = _379 + _378;
    precise float _381 = TEXCOORD_1.x * cbInstanceData._m0[_360].x;
    precise float _382 = TEXCOORD_1.y * cbInstanceData._m0[_360].y;
    precise float _383 = _382 + _381;
    precise float _384 = TEXCOORD_1.z * cbInstanceData._m0[_360].z;
    precise float _385 = _384 + _383;
    precise float _386 = 1.0 * cbInstanceData._m0[_360].w;
    precise float _387 = _386 + _385;
    precise float _388 = TEXCOORD_1.x * cbInstanceData._m0[_367].x;
    precise float _389 = TEXCOORD_1.y * cbInstanceData._m0[_367].y;
    precise float _390 = _389 + _388;
    precise float _391 = TEXCOORD_1.z * cbInstanceData._m0[_367].z;
    precise float _392 = _391 + _390;
    precise float _393 = 1.0 * cbInstanceData._m0[_367].w;
    precise float _394 = _393 + _392;
    precise float _395 = _332 - _380;
    precise float _396 = _339 - _387;
    precise float _397 = _346 - _394;
    precise float _398 = _395 * _395;
    precise float _399 = _396 * _396;
    precise float _400 = _398 + _399;
    precise float _401 = _397 * _397;
    precise float _402 = _400 + _401;
    precise float _404 = cbMtdParam._m0[9u].z * sqrt(_402);
    precise float _405 = _352 + _404;
    precise float _406 = cbPerFrame._m0[22u].x + _405;
    uint _407 = _119.w;
    float _408;
    float _410;
    float _412;
    if (_122 == 0u)
    {
        _408 = 0.0;
        _410 = 0.0;
        _412 = 0.0;
    }
    else
    {
        uint _599 = _119.z;
        precise float _409;
        precise float _411;
        precise float _413;
        float _742;
        float _744;
        float _746;
        float _600 = 0.0;
        float _601 = 0.0;
        float _602 = 0.0;
        uint _603 = _599;
        uint _605 = 0u;
        float _641;
        float _660;
        vec4 _674;
        float _675;
        float _676;
        float _690;
        float _691;
        float _692;
        float _709;
        float _710;
        float _711;
        float _712;
        bool _713;
        bool _714;
        bool _715;
        precise float _716;
        precise float _717;
        precise float _718;
        float _719;
        float _720;
        float _721;
        precise float _722;
        bool _725;
        for (;;)
        {
            uint _607 = _603 & 255u;
            uint _609 = _607 * 24u;
            uvec3 _619 = uvec3(texelFetch(g_forceParam, int(_609)).x, texelFetch(g_forceParam, int(_609 + 1u)).x, texelFetch(g_forceParam, int(_609 + 2u)).x);
            uint _624 = (_607 * 24u) + 4u;
            vec4 _637 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_624)).x, texelFetch(g_forceParam, int(_624 + 1u)).x, texelFetch(g_forceParam, int(_624 + 2u)).x, texelFetch(g_forceParam, int(_624 + 3u)).x));
            _641 = _637.w;
            uint _643 = (_607 * 24u) + 8u;
            vec4 _656 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_643)).x, texelFetch(g_forceParam, int(_643 + 1u)).x, texelFetch(g_forceParam, int(_643 + 2u)).x, texelFetch(g_forceParam, int(_643 + 3u)).x));
            _660 = _656.w;
            uint _663 = (_607 * 24u) + 12u;
            _674 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_663)).x, texelFetch(g_forceParam, int(_663 + 1u)).x, _669, texelFetch(g_forceParam, int(_663 + 3u)).x));
            _675 = _674.x;
            _676 = _674.w;
            uint _679 = (_607 * 24u) + 16u;
            vec3 _689 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_679)).x, texelFetch(g_forceParam, int(_679 + 1u)).x, texelFetch(g_forceParam, int(_679 + 2u)).x));
            _690 = _689.x;
            _691 = _689.y;
            _692 = _689.z;
            uint _695 = (_607 * 24u) + 20u;
            vec4 _708 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_695)).x, texelFetch(g_forceParam, int(_695 + 1u)).x, texelFetch(g_forceParam, int(_695 + 2u)).x, texelFetch(g_forceParam, int(_695 + 3u)).x));
            _709 = _708.x;
            _710 = _708.y;
            _711 = _708.z;
            _712 = _708.w;
            _713 = _619.x == 1u;
            _714 = _619.y == 1u;
            _715 = _619.z == 1u;
            _716 = _380 - _637.x;
            _717 = _387 - _637.y;
            _718 = _394 - _637.z;
            _719 = _713 ? _656.x : _716;
            _720 = _713 ? _656.y : _717;
            _721 = _713 ? _656.z : _718;
            _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
            _725 = _722 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_725)
            {
                precise float _727 = _716 * _716;
                precise float _728 = _717 * _717;
                precise float _729 = _727 + _728;
                precise float _730 = _718 * _718;
                precise float _731 = _730 + _729;
                float _732 = sqrt(_731);
                float _733 = inversesqrt(_722);
                precise float _734 = _719 * _733;
                precise float _735 = _720 * _733;
                precise float _736 = _721 * _733;
                precise float _739 = _732 / (isnan(0.001000000047497451305389404296875) ? _674.y : (isnan(_674.y) ? 0.001000000047497451305389404296875 : max(_674.y, 0.001000000047497451305389404296875)));
                precise float _740 = 1.0 - _739;
                float _903 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
                float _741 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
                float _767;
                if (_715)
                {
                    float _754 = inversesqrt(dot(vec3(_716, _717, _718), vec3(_716, _717, _718)));
                    precise float _755 = _716 * _754;
                    precise float _756 = _717 * _754;
                    precise float _757 = _718 * _754;
                    precise float _761 = dot(vec3(_734, _735, _736), vec3(_755, _756, _757)) * 0.800000011920928955078125;
                    precise float _763 = _761 + 0.20000000298023223876953125;
                    float _914 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
                    precise float _766 = _741 * (isnan(1.0) ? _914 : (isnan(_914) ? 1.0 : min(_914, 1.0)));
                    _767 = _766;
                }
                else
                {
                    _767 = _741;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_767 > 0.0)
                {
                    bool _770 = _713 && (!_715);
                    precise float _772 = _732 * (-4.0);
                    precise float _776 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _675 : (isnan(_675) ? 0.001000000047497451305389404296875 : max(_675, 0.001000000047497451305389404296875)));
                    precise float _778 = dot(vec2(_734, _736), vec2(_716, _718));
                    precise float _782 = _776 * _778;
                    precise float _783 = float(_770) * _782;
                    precise float _784 = _406 * _776;
                    precise float _785 = _784 - _783;
                    precise float _786 = (_770 ? 0.0 : _772) + _785;
                    precise float _788 = _660 * sin(_786);
                    precise float _789 = _735 * 0.0;
                    precise float _790 = _789 - _736;
                    precise float _791 = _736 * 0.0;
                    precise float _792 = _734 * 0.0;
                    precise float _793 = _791 - _792;
                    precise float _794 = _734 - _789;
                    precise float _795 = _676 * _788;
                    float _796 = _713 ? _795 : 0.0;
                    float _838;
                    if (_714)
                    {
                        precise float _799 = _690 * 2.0;
                        precise float _801 = _710 + _711;
                        precise float _802 = _712 + _801;
                        precise float _804 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _690 : (isnan(_690) ? 0.001000000047497451305389404296875 : max(_690, 0.001000000047497451305389404296875)));
                        precise float _805 = _709 * _804;
                        precise float _806 = (-0.0) - _734;
                        precise float _810 = dot(vec2(_736, _806), vec2(_716, _718)) / _799;
                        precise float _811 = (-0.0) - _810;
                        float _814 = fract(abs(_810));
                        precise float _815 = (-0.0) - _814;
                        precise float _817 = _799 * ((_810 >= _811) ? _814 : _815);
                        precise float _818 = _817 * 6.283184051513671875;
                        precise float _819 = _818 / _799;
                        precise float _821 = (isnan(5.0) ? _690 : (isnan(_690) ? 5.0 : min(_690, 5.0))) * sin(_819);
                        precise float _822 = _778 + _821;
                        precise float _823 = _690 * 0.25;
                        precise float _825 = _406 * _709;
                        precise float _826 = _825 - _823;
                        precise float _827 = _826 - _822;
                        precise float _828 = _709 * _802;
                        precise float _830 = _827 / (isnan(0.001000000047497451305389404296875) ? _828 : (isnan(_828) ? 0.001000000047497451305389404296875 : max(_828, 0.001000000047497451305389404296875)));
                        float _831 = fract(_830);
                        precise float _833 = 1.0 - _831;
                        float _834 = (_830 < 0.0) ? _833 : _831;
                        precise float _835 = _801 / _802;
                        precise float _836 = _710 / _802;
                        float _857;
                        if (_834 < _836)
                        {
                            precise float _855 = _834 / _836;
                            _857 = _855;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_834 < _835)
                            {
                                precise float _867 = _834 - _836;
                                precise float _868 = _835 - _836;
                                precise float _869 = _867 / _868;
                                precise float _858 = 1.0 - _869;
                                frontier_phi_14_13_ladder = _858;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _857 = frontier_phi_14_13_ladder;
                        }
                        precise float _859 = _692 * _857;
                        precise float _860 = _804 * _778;
                        precise float _861 = _406 * _805;
                        precise float _862 = _861 - _860;
                        precise float _864 = _691 + sin(_862);
                        precise float _866 = _859 * abs(_864);
                        precise float _839 = _866 + 0.0;
                        _838 = _839;
                    }
                    else
                    {
                        _838 = 0.0;
                    }
                    precise float _840 = _641 + _788;
                    precise float _841 = _840 + _838;
                    precise float _842 = _734 * _841;
                    precise float _843 = _735 * _841;
                    precise float _844 = _736 * _841;
                    precise float _845 = _790 * _796;
                    precise float _846 = _793 * _796;
                    precise float _847 = _794 * _796;
                    precise float _848 = _845 + _842;
                    precise float _849 = _846 + _843;
                    precise float _850 = _847 + _844;
                    precise float _851 = _767 * _848;
                    precise float _852 = _767 * _849;
                    precise float _853 = _767 * _850;
                    precise float _743 = _851 * 0.0500000007450580596923828125;
                    precise float _745 = _852 * 0.0500000007450580596923828125;
                    precise float _747 = _853 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _743;
                    frontier_phi_5_pred_7_ladder_1 = _745;
                    frontier_phi_5_pred_7_ladder_2 = _747;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _742 = frontier_phi_5_pred;
            _744 = frontier_phi_5_pred_1;
            _746 = frontier_phi_5_pred_2;
            _409 = _600 + _742;
            _411 = _601 + _744;
            _413 = _602 + _746;
            uint _606 = _605 + 1u;
            if (_606 == _122)
            {
                break;
            }
            else
            {
                _600 = _409;
                _601 = _411;
                _602 = _413;
                _603 = (_605 != 3u) ? (_603 >> 8u) : _407;
                _605 = _606;
                continue;
            }
        }
        _408 = _409;
        _410 = _411;
        _412 = _413;
    }
    precise float _414 = _408 * _408;
    precise float _415 = _410 * _410;
    precise float _416 = _414 + _415;
    precise float _417 = _412 * _412;
    precise float _418 = _416 + _417;
    float _419 = sqrt(_418);
    bool _420 = _419 < 0.00011000000085914507508277893066406;
    float _425 = inversesqrt(dot(vec3(cbInstanceData._m0[_113].x, cbInstanceData._m0[_360].x, cbInstanceData._m0[_367].x), vec3(cbInstanceData._m0[_113].x, cbInstanceData._m0[_360].x, cbInstanceData._m0[_367].x)));
    precise float _426 = cbInstanceData._m0[_113].x * _425;
    precise float _427 = cbInstanceData._m0[_360].x * _425;
    precise float _428 = cbInstanceData._m0[_367].x * _425;
    float _432 = inversesqrt(dot(vec3(cbInstanceData._m0[_113].y, cbInstanceData._m0[_360].y, cbInstanceData._m0[_367].y), vec3(cbInstanceData._m0[_113].y, cbInstanceData._m0[_360].y, cbInstanceData._m0[_367].y)));
    precise float _433 = cbInstanceData._m0[_113].y * _432;
    precise float _434 = cbInstanceData._m0[_360].y * _432;
    precise float _435 = cbInstanceData._m0[_367].y * _432;
    float _439 = inversesqrt(dot(vec3(cbInstanceData._m0[_113].z, cbInstanceData._m0[_360].z, cbInstanceData._m0[_367].z), vec3(cbInstanceData._m0[_113].z, cbInstanceData._m0[_360].z, cbInstanceData._m0[_367].z)));
    precise float _440 = cbInstanceData._m0[_113].z * _439;
    precise float _441 = cbInstanceData._m0[_360].z * _439;
    precise float _442 = cbInstanceData._m0[_367].z * _439;
    precise float _443 = _426 * 0.0;
    precise float _444 = 1.0 * _433;
    precise float _445 = _444 + _443;
    precise float _446 = 0.0 * _440;
    precise float _447 = _446 + _445;
    precise float _448 = _427 * 0.0;
    precise float _449 = 1.0 * _434;
    precise float _450 = _449 + _448;
    precise float _451 = 0.0 * _441;
    precise float _452 = _451 + _450;
    precise float _453 = _428 * 0.0;
    precise float _454 = 1.0 * _435;
    precise float _455 = _454 + _453;
    precise float _456 = 0.0 * _442;
    precise float _457 = _456 + _455;
    float _461 = inversesqrt(dot(vec3(_408, _410, _412), vec3(_408, _410, _412)));
    precise float _462 = _408 * _461;
    precise float _463 = _410 * _461;
    precise float _464 = _412 * _461;
    precise float _465 = _452 * _464;
    precise float _466 = _457 * _463;
    precise float _467 = _465 - _466;
    precise float _468 = _457 * _462;
    precise float _469 = _447 * _464;
    precise float _470 = _468 - _469;
    precise float _471 = _447 * _463;
    precise float _472 = _452 * _462;
    precise float _473 = _471 - _472;
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    precise float _478 = _477 * _467;
    precise float _479 = _477 * _470;
    precise float _480 = _477 * _473;
    precise float _481 = _419 + 1.0;
    precise float _483 = cbMtdParam._m0[9u].w * log2(_481);
    precise float _484 = dot(vec3(_478, _479, _480), vec3(_395, _396, _397));
    precise float _487 = _478 * _484;
    precise float _488 = _479 * _484;
    precise float _489 = _480 * _484;
    precise float _490 = _380 + _487;
    precise float _491 = _387 + _488;
    precise float _492 = _394 + _489;
    precise float _493 = _332 - _490;
    precise float _494 = _339 - _491;
    precise float _495 = _346 - _492;
    precise float _496 = _479 * _495;
    precise float _497 = _480 * _494;
    precise float _498 = _496 - _497;
    precise float _499 = _480 * _493;
    precise float _500 = _478 * _495;
    precise float _501 = _499 - _500;
    precise float _502 = _478 * _494;
    precise float _503 = _479 * _493;
    precise float _504 = _502 - _503;
    float _505 = sin(_483);
    float _506 = cos(_483);
    precise float _507 = _493 * _506;
    precise float _508 = _494 * _506;
    precise float _509 = _495 * _506;
    precise float _510 = _505 * _498;
    precise float _511 = _505 * _501;
    precise float _512 = _505 * _504;
    precise float _513 = _507 + _510;
    precise float _514 = _508 + _511;
    precise float _515 = _512 + _509;
    precise float _516 = _490 + _513;
    precise float _517 = _491 + _514;
    precise float _518 = _492 + _515;
    precise float _519 = _516 - _332;
    precise float _520 = _517 - _339;
    precise float _521 = _518 - _346;
    precise float _525 = _332 + (_420 ? 0.0 : _519);
    precise float _526 = _339 + (_420 ? 0.0 : _520);
    precise float _527 = _346 + (_420 ? 0.0 : _521);
    precise float _533 = _525 - cbSceneParam._m0[3u].x;
    precise float _534 = _526 - cbSceneParam._m0[3u].y;
    precise float _535 = _527 - cbSceneParam._m0[3u].z;
    precise float _563 = cbSceneParam._m0[24u].x * _533;
    precise float _564 = _534 * cbSceneParam._m0[24u].y;
    precise float _565 = _564 + _563;
    precise float _566 = _535 * cbSceneParam._m0[24u].z;
    precise float _567 = _566 + _565;
    precise float _568 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _569 = _568 + _567;
    precise float _570 = cbSceneParam._m0[25u].x * _533;
    precise float _571 = _534 * cbSceneParam._m0[25u].y;
    precise float _572 = _571 + _570;
    precise float _573 = _535 * cbSceneParam._m0[25u].z;
    precise float _574 = _573 + _572;
    precise float _575 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _576 = _575 + _574;
    precise float _577 = cbSceneParam._m0[26u].x * _533;
    precise float _578 = _534 * cbSceneParam._m0[26u].y;
    precise float _579 = _578 + _577;
    precise float _580 = _535 * cbSceneParam._m0[26u].z;
    precise float _581 = _580 + _579;
    precise float _582 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _583 = _582 + _581;
    precise float _584 = _533 * cbSceneParam._m0[27u].x;
    precise float _585 = _534 * cbSceneParam._m0[27u].y;
    precise float _586 = _585 + _584;
    precise float _587 = _535 * cbSceneParam._m0[27u].z;
    precise float _588 = _587 + _586;
    precise float _589 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _590 = _589 + _588;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_Position.x = _569;
    gl_Position.y = _576;
    gl_Position.z = _583;
    gl_Position.w = _590;
}


