#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_3;

uint _886;

void main()
{
    uint _79 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    precise float _165 = float(NORMAL.x) + (-127.0);
    precise float _167 = float(NORMAL.y) + (-127.0);
    precise float _168 = float(NORMAL.z) + (-127.0);
    precise float _169 = _165 * 0.0078740157186985015869140625;
    precise float _171 = _167 * 0.0078740157186985015869140625;
    precise float _172 = _168 * 0.0078740157186985015869140625;
    uint _177 = _79 * 13u;
    uvec4 _183 = floatBitsToUint(cbInstanceData._m0[_177 + 7u]);
    uint _186 = min(_183.y, 8u);
    precise float _190 = POSITION.x + 0.0;
    precise float _191 = POSITION.y + 0.0;
    precise float _192 = POSITION.z + 0.0;
    uint _197 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _79;
    uvec4 _199 = texelFetch(g_InstanceIndexBuffer, int(_197));
    uint _200 = _199.x;
    uint _202 = _200 * 13u;
    uint _209 = (floatBitsToUint(cbInstanceData._m0[_202 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _216 = _209 + 1u;
    uint _223 = _209 + 2u;
    float _233 = inversesqrt(dot(vec3(cbObjMatrix._m0[_209].x, cbObjMatrix._m0[_216].x, cbObjMatrix._m0[_223].x), vec3(cbObjMatrix._m0[_209].x, cbObjMatrix._m0[_216].x, cbObjMatrix._m0[_223].x)));
    precise float _234 = cbObjMatrix._m0[_209].x * _233;
    precise float _235 = cbObjMatrix._m0[_216].x * _233;
    precise float _236 = cbObjMatrix._m0[_223].x * _233;
    float _240 = inversesqrt(dot(vec3(cbObjMatrix._m0[_209].y, cbObjMatrix._m0[_216].y, cbObjMatrix._m0[_223].y), vec3(cbObjMatrix._m0[_209].y, cbObjMatrix._m0[_216].y, cbObjMatrix._m0[_223].y)));
    precise float _241 = cbObjMatrix._m0[_209].y * _240;
    precise float _242 = cbObjMatrix._m0[_216].y * _240;
    precise float _243 = cbObjMatrix._m0[_223].y * _240;
    float _247 = inversesqrt(dot(vec3(cbObjMatrix._m0[_209].z, cbObjMatrix._m0[_216].z, cbObjMatrix._m0[_223].z), vec3(cbObjMatrix._m0[_209].z, cbObjMatrix._m0[_216].z, cbObjMatrix._m0[_223].z)));
    precise float _248 = cbObjMatrix._m0[_209].z * _247;
    precise float _249 = cbObjMatrix._m0[_216].z * _247;
    precise float _250 = cbObjMatrix._m0[_223].z * _247;
    precise float _267 = _234 * cbSceneParam._m0[5u].x;
    precise float _268 = _235 * cbSceneParam._m0[5u].y;
    precise float _269 = _268 + _267;
    precise float _270 = _236 * cbSceneParam._m0[5u].z;
    precise float _271 = _270 + _269;
    precise float _272 = _234 * cbSceneParam._m0[6u].x;
    precise float _273 = _235 * cbSceneParam._m0[6u].y;
    precise float _274 = _273 + _272;
    precise float _275 = _236 * cbSceneParam._m0[6u].z;
    precise float _276 = _275 + _274;
    precise float _277 = _234 * cbSceneParam._m0[7u].x;
    precise float _278 = _235 * cbSceneParam._m0[7u].y;
    precise float _279 = _278 + _277;
    precise float _280 = _236 * cbSceneParam._m0[7u].z;
    precise float _281 = _280 + _279;
    precise float _282 = _241 * cbSceneParam._m0[5u].x;
    precise float _283 = _242 * cbSceneParam._m0[5u].y;
    precise float _284 = _283 + _282;
    precise float _285 = _243 * cbSceneParam._m0[5u].z;
    precise float _286 = _285 + _284;
    precise float _287 = _241 * cbSceneParam._m0[6u].x;
    precise float _288 = _242 * cbSceneParam._m0[6u].y;
    precise float _289 = _288 + _287;
    precise float _290 = _243 * cbSceneParam._m0[6u].z;
    precise float _291 = _290 + _289;
    precise float _292 = _241 * cbSceneParam._m0[7u].x;
    precise float _293 = _242 * cbSceneParam._m0[7u].y;
    precise float _294 = _293 + _292;
    precise float _295 = _243 * cbSceneParam._m0[7u].z;
    precise float _296 = _295 + _294;
    precise float _297 = _248 * cbSceneParam._m0[5u].x;
    precise float _298 = _249 * cbSceneParam._m0[5u].y;
    precise float _299 = _298 + _297;
    precise float _300 = _250 * cbSceneParam._m0[5u].z;
    precise float _301 = _300 + _299;
    precise float _302 = _248 * cbSceneParam._m0[6u].x;
    precise float _303 = _249 * cbSceneParam._m0[6u].y;
    precise float _304 = _303 + _302;
    precise float _305 = _250 * cbSceneParam._m0[6u].z;
    precise float _306 = _305 + _304;
    precise float _307 = _248 * cbSceneParam._m0[7u].x;
    precise float _308 = _249 * cbSceneParam._m0[7u].y;
    precise float _309 = _308 + _307;
    precise float _310 = _250 * cbSceneParam._m0[7u].z;
    precise float _311 = _310 + _309;
    precise float _312 = _171 * 0.0;
    precise float _313 = _312 - _172;
    precise float _314 = _172 * 0.0;
    precise float _315 = _169 * 0.0;
    precise float _316 = _314 - _315;
    precise float _317 = _169 - _312;
    precise float _318 = _172 * _316;
    precise float _319 = _171 * _317;
    precise float _320 = _318 - _319;
    precise float _321 = _169 * _317;
    precise float _322 = _172 * _313;
    precise float _323 = _321 - _322;
    precise float _324 = _171 * _313;
    precise float _325 = _169 * _316;
    precise float _326 = _324 - _325;
    float _330 = inversesqrt(dot(vec3(_313, _316, _317), vec3(_313, _316, _317)));
    precise float _331 = _313 * _330;
    precise float _332 = _316 * _330;
    precise float _333 = _317 * _330;
    float _337 = inversesqrt(dot(vec3(_320, _323, _326), vec3(_320, _323, _326)));
    precise float _338 = _320 * _337;
    precise float _339 = _323 * _337;
    precise float _340 = _326 * _337;
    precise float _341 = (-0.0) - _169;
    precise float _343 = (-0.0) - _171;
    precise float _344 = (-0.0) - _172;
    float _348 = inversesqrt(dot(vec3(_341, _343, _344), vec3(_341, _343, _344)));
    precise float _349 = _348 * _341;
    precise float _350 = _348 * _343;
    precise float _351 = _348 * _344;
    precise float _352 = _190 - TEXCOORD_1.x;
    precise float _353 = _191 - TEXCOORD_1.y;
    precise float _354 = _192 - TEXCOORD_1.z;
    precise float _355 = _352 * _331;
    precise float _356 = _353 * _332;
    precise float _357 = _356 + _355;
    precise float _358 = _354 * _333;
    precise float _359 = _358 + _357;
    precise float _360 = _352 * _338;
    precise float _361 = _353 * _339;
    precise float _362 = _361 + _360;
    precise float _363 = _354 * _340;
    precise float _364 = _363 + _362;
    precise float _365 = _352 * _349;
    precise float _366 = _353 * _350;
    precise float _367 = _366 + _365;
    precise float _368 = _354 * _351;
    precise float _369 = _368 + _367;
    precise float _370 = _271 * _359;
    precise float _371 = _276 * _364;
    precise float _372 = _371 + _370;
    precise float _373 = _281 * _369;
    precise float _374 = _373 + _372;
    precise float _375 = _286 * _359;
    precise float _376 = _291 * _364;
    precise float _377 = _376 + _375;
    precise float _378 = _296 * _369;
    precise float _379 = _378 + _377;
    precise float _380 = _301 * _359;
    precise float _381 = _306 * _364;
    precise float _382 = _381 + _380;
    precise float _383 = _311 * _369;
    precise float _384 = _383 + _382;
    precise float _385 = TEXCOORD_1.x + _374;
    precise float _386 = TEXCOORD_1.y + _379;
    precise float _387 = TEXCOORD_1.z + _384;
    precise float _388 = cbObjMatrix._m0[_209].x * _385;
    precise float _389 = _386 * cbObjMatrix._m0[_209].y;
    precise float _390 = _389 + _388;
    precise float _391 = _387 * cbObjMatrix._m0[_209].z;
    precise float _392 = _391 + _390;
    precise float _393 = 1.0 * cbObjMatrix._m0[_209].w;
    precise float _395 = _393 + _392;
    precise float _396 = cbObjMatrix._m0[_216].x * _385;
    precise float _397 = _386 * cbObjMatrix._m0[_216].y;
    precise float _398 = _397 + _396;
    precise float _399 = _387 * cbObjMatrix._m0[_216].z;
    precise float _400 = _399 + _398;
    precise float _401 = 1.0 * cbObjMatrix._m0[_216].w;
    precise float _402 = _401 + _400;
    precise float _403 = cbObjMatrix._m0[_223].x * _385;
    precise float _404 = _386 * cbObjMatrix._m0[_223].y;
    precise float _405 = _404 + _403;
    precise float _406 = _387 * cbObjMatrix._m0[_223].z;
    precise float _407 = _406 + _405;
    precise float _408 = 1.0 * cbObjMatrix._m0[_223].w;
    precise float _409 = _408 + _407;
    float _435 = (((-0.0) - cbObjMatrix._m0[_209].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_209].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_209].y, cbObjMatrix._m0[_209].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _236, fma(cbSceneParam._m0[3u].y, _235, cbSceneParam._m0[3u].x * _234));
    float _438 = (((-0.0) - cbObjMatrix._m0[_216].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_216].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_216].y, cbObjMatrix._m0[_216].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _243, fma(cbSceneParam._m0[3u].y, _242, cbSceneParam._m0[3u].x * _241));
    float _441 = (((-0.0) - cbObjMatrix._m0[_223].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_223].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_223].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _250, fma(cbSceneParam._m0[3u].y, _249, cbSceneParam._m0[3u].x * _248));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    float _446 = _445 * _435;
    float _447 = _445 * _438;
    float _448 = _445 * _441;
    float _451 = fma(_448, _333, fma(_447, _332, _446 * _331));
    float _454 = fma(_448, _340, fma(_447, _339, _446 * _338));
    float _457 = fma(_448, _351, fma(_447, _350, _446 * _349));
    float _461 = inversesqrt(dot(vec3(_451, _454, _457), vec3(_451, _454, _457)));
    float _462 = _461 * _451;
    float _463 = _461 * _454;
    float _464 = _461 * _457;
    float _483 = dot(vec3(_462, _463, _464), vec3(float(int(uint(_462 > 0.0) - uint(_462 < 0.0))), float(int(uint(_463 > 0.0) - uint(_463 < 0.0))), float(int(uint(_464 > 0.0) - uint(_464 < 0.0)))));
    float _499 = fma(_172, _333, fma(_171, _332, _331 * _169));
    float _502 = fma(_172, _340, fma(_171, _339, _338 * _169));
    float _505 = fma(_172, _351, fma(_171, _350, _349 * _169));
    float _508 = fma(_281, _505, fma(_276, _502, _499 * _271));
    float _511 = fma(_296, _505, fma(_291, _502, _499 * _286));
    float _514 = fma(_311, _505, fma(_306, _502, _499 * _301));
    float _517 = fma(_514, cbObjMatrix._m0[_209].z, fma(_511, cbObjMatrix._m0[_209].y, _508 * cbObjMatrix._m0[_209].x));
    float _520 = fma(_514, cbObjMatrix._m0[_216].z, fma(_511, cbObjMatrix._m0[_216].y, _508 * cbObjMatrix._m0[_216].x));
    float _523 = fma(_514, cbObjMatrix._m0[_223].z, fma(_511, cbObjMatrix._m0[_223].y, _508 * cbObjMatrix._m0[_223].x));
    float _525 = (-0.0) - _523;
    precise float _537 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _545 = _177 + 1u;
    uint _552 = _177 + 2u;
    precise float _559 = TEXCOORD_1.x * cbInstanceData._m0[_177].x;
    precise float _560 = TEXCOORD_1.y * cbInstanceData._m0[_177].y;
    precise float _561 = _560 + _559;
    precise float _562 = TEXCOORD_1.z * cbInstanceData._m0[_177].z;
    precise float _563 = _562 + _561;
    precise float _564 = 1.0 * cbInstanceData._m0[_177].w;
    precise float _565 = _564 + _563;
    precise float _566 = TEXCOORD_1.x * cbInstanceData._m0[_545].x;
    precise float _567 = TEXCOORD_1.y * cbInstanceData._m0[_545].y;
    precise float _568 = _567 + _566;
    precise float _569 = TEXCOORD_1.z * cbInstanceData._m0[_545].z;
    precise float _570 = _569 + _568;
    precise float _571 = 1.0 * cbInstanceData._m0[_545].w;
    precise float _572 = _571 + _570;
    precise float _573 = TEXCOORD_1.x * cbInstanceData._m0[_552].x;
    precise float _574 = TEXCOORD_1.y * cbInstanceData._m0[_552].y;
    precise float _575 = _574 + _573;
    precise float _576 = TEXCOORD_1.z * cbInstanceData._m0[_552].z;
    precise float _577 = _576 + _575;
    precise float _578 = 1.0 * cbInstanceData._m0[_552].w;
    precise float _579 = _578 + _577;
    precise float _580 = _395 - _565;
    precise float _581 = _402 - _572;
    precise float _582 = _409 - _579;
    precise float _583 = _580 * _580;
    precise float _584 = _581 * _581;
    precise float _585 = _583 + _584;
    precise float _586 = _582 * _582;
    precise float _587 = _585 + _586;
    precise float _589 = cbMtdParam._m0[9u].z * sqrt(_587);
    precise float _590 = _537 + _589;
    precise float _591 = cbPerFrame._m0[22u].x + _590;
    uint _592 = _183.w;
    float _593;
    float _595;
    float _597;
    if (_186 == 0u)
    {
        _593 = 0.0;
        _595 = 0.0;
        _597 = 0.0;
    }
    else
    {
        uint _816 = _183.z;
        precise float _594;
        precise float _596;
        precise float _598;
        float _959;
        float _961;
        float _963;
        float _817 = 0.0;
        float _818 = 0.0;
        float _819 = 0.0;
        uint _820 = _816;
        uint _822 = 0u;
        float _858;
        float _877;
        vec4 _891;
        float _892;
        float _893;
        float _907;
        float _908;
        float _909;
        float _926;
        float _927;
        float _928;
        float _929;
        bool _930;
        bool _931;
        bool _932;
        precise float _933;
        precise float _934;
        precise float _935;
        float _936;
        float _937;
        float _938;
        precise float _939;
        bool _942;
        for (;;)
        {
            uint _824 = _820 & 255u;
            uint _826 = _824 * 24u;
            uvec3 _836 = uvec3(texelFetch(g_forceParam, int(_826)).x, texelFetch(g_forceParam, int(_826 + 1u)).x, texelFetch(g_forceParam, int(_826 + 2u)).x);
            uint _841 = (_824 * 24u) + 4u;
            vec4 _854 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_841)).x, texelFetch(g_forceParam, int(_841 + 1u)).x, texelFetch(g_forceParam, int(_841 + 2u)).x, texelFetch(g_forceParam, int(_841 + 3u)).x));
            _858 = _854.w;
            uint _860 = (_824 * 24u) + 8u;
            vec4 _873 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_860)).x, texelFetch(g_forceParam, int(_860 + 1u)).x, texelFetch(g_forceParam, int(_860 + 2u)).x, texelFetch(g_forceParam, int(_860 + 3u)).x));
            _877 = _873.w;
            uint _880 = (_824 * 24u) + 12u;
            _891 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_880)).x, texelFetch(g_forceParam, int(_880 + 1u)).x, _886, texelFetch(g_forceParam, int(_880 + 3u)).x));
            _892 = _891.x;
            _893 = _891.w;
            uint _896 = (_824 * 24u) + 16u;
            vec3 _906 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_896)).x, texelFetch(g_forceParam, int(_896 + 1u)).x, texelFetch(g_forceParam, int(_896 + 2u)).x));
            _907 = _906.x;
            _908 = _906.y;
            _909 = _906.z;
            uint _912 = (_824 * 24u) + 20u;
            vec4 _925 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_912)).x, texelFetch(g_forceParam, int(_912 + 1u)).x, texelFetch(g_forceParam, int(_912 + 2u)).x, texelFetch(g_forceParam, int(_912 + 3u)).x));
            _926 = _925.x;
            _927 = _925.y;
            _928 = _925.z;
            _929 = _925.w;
            _930 = _836.x == 1u;
            _931 = _836.y == 1u;
            _932 = _836.z == 1u;
            _933 = _565 - _854.x;
            _934 = _572 - _854.y;
            _935 = _579 - _854.z;
            _936 = _930 ? _873.x : _933;
            _937 = _930 ? _873.y : _934;
            _938 = _930 ? _873.z : _935;
            _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
            _942 = _939 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_942)
            {
                precise float _944 = _933 * _933;
                precise float _945 = _934 * _934;
                precise float _946 = _944 + _945;
                precise float _947 = _935 * _935;
                precise float _948 = _947 + _946;
                float _949 = sqrt(_948);
                float _950 = inversesqrt(_939);
                precise float _951 = _936 * _950;
                precise float _952 = _937 * _950;
                precise float _953 = _938 * _950;
                precise float _956 = _949 / (isnan(0.001000000047497451305389404296875) ? _891.y : (isnan(_891.y) ? 0.001000000047497451305389404296875 : max(_891.y, 0.001000000047497451305389404296875)));
                precise float _957 = 1.0 - _956;
                float _1120 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
                float _958 = isnan(1.0) ? _1120 : (isnan(_1120) ? 1.0 : min(_1120, 1.0));
                float _984;
                if (_932)
                {
                    float _971 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
                    precise float _972 = _933 * _971;
                    precise float _973 = _934 * _971;
                    precise float _974 = _935 * _971;
                    precise float _978 = dot(vec3(_951, _952, _953), vec3(_972, _973, _974)) * 0.800000011920928955078125;
                    precise float _980 = _978 + 0.20000000298023223876953125;
                    float _1131 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
                    precise float _983 = _958 * (isnan(1.0) ? _1131 : (isnan(_1131) ? 1.0 : min(_1131, 1.0)));
                    _984 = _983;
                }
                else
                {
                    _984 = _958;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_984 > 0.0)
                {
                    bool _987 = _930 && (!_932);
                    precise float _989 = _949 * (-4.0);
                    precise float _993 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _892 : (isnan(_892) ? 0.001000000047497451305389404296875 : max(_892, 0.001000000047497451305389404296875)));
                    precise float _995 = dot(vec2(_951, _953), vec2(_933, _935));
                    precise float _999 = _993 * _995;
                    precise float _1000 = float(_987) * _999;
                    precise float _1001 = _591 * _993;
                    precise float _1002 = _1001 - _1000;
                    precise float _1003 = (_987 ? 0.0 : _989) + _1002;
                    precise float _1005 = _877 * sin(_1003);
                    precise float _1006 = _952 * 0.0;
                    precise float _1007 = _1006 - _953;
                    precise float _1008 = _953 * 0.0;
                    precise float _1009 = _951 * 0.0;
                    precise float _1010 = _1008 - _1009;
                    precise float _1011 = _951 - _1006;
                    precise float _1012 = _893 * _1005;
                    float _1013 = _930 ? _1012 : 0.0;
                    float _1055;
                    if (_931)
                    {
                        precise float _1016 = _907 * 2.0;
                        precise float _1018 = _927 + _928;
                        precise float _1019 = _929 + _1018;
                        precise float _1021 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _907 : (isnan(_907) ? 0.001000000047497451305389404296875 : max(_907, 0.001000000047497451305389404296875)));
                        precise float _1022 = _926 * _1021;
                        precise float _1023 = (-0.0) - _951;
                        precise float _1027 = dot(vec2(_953, _1023), vec2(_933, _935)) / _1016;
                        precise float _1028 = (-0.0) - _1027;
                        float _1031 = fract(abs(_1027));
                        precise float _1032 = (-0.0) - _1031;
                        precise float _1034 = _1016 * ((_1027 >= _1028) ? _1031 : _1032);
                        precise float _1035 = _1034 * 6.283184051513671875;
                        precise float _1036 = _1035 / _1016;
                        precise float _1038 = (isnan(5.0) ? _907 : (isnan(_907) ? 5.0 : min(_907, 5.0))) * sin(_1036);
                        precise float _1039 = _995 + _1038;
                        precise float _1040 = _907 * 0.25;
                        precise float _1042 = _591 * _926;
                        precise float _1043 = _1042 - _1040;
                        precise float _1044 = _1043 - _1039;
                        precise float _1045 = _926 * _1019;
                        precise float _1047 = _1044 / (isnan(0.001000000047497451305389404296875) ? _1045 : (isnan(_1045) ? 0.001000000047497451305389404296875 : max(_1045, 0.001000000047497451305389404296875)));
                        float _1048 = fract(_1047);
                        precise float _1050 = 1.0 - _1048;
                        float _1051 = (_1047 < 0.0) ? _1050 : _1048;
                        precise float _1052 = _1018 / _1019;
                        precise float _1053 = _927 / _1019;
                        float _1074;
                        if (_1051 < _1053)
                        {
                            precise float _1072 = _1051 / _1053;
                            _1074 = _1072;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_1051 < _1052)
                            {
                                precise float _1084 = _1051 - _1053;
                                precise float _1085 = _1052 - _1053;
                                precise float _1086 = _1084 / _1085;
                                precise float _1075 = 1.0 - _1086;
                                frontier_phi_14_13_ladder = _1075;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1074 = frontier_phi_14_13_ladder;
                        }
                        precise float _1076 = _909 * _1074;
                        precise float _1077 = _1021 * _995;
                        precise float _1078 = _591 * _1022;
                        precise float _1079 = _1078 - _1077;
                        precise float _1081 = _908 + sin(_1079);
                        precise float _1083 = _1076 * abs(_1081);
                        precise float _1056 = _1083 + 0.0;
                        _1055 = _1056;
                    }
                    else
                    {
                        _1055 = 0.0;
                    }
                    precise float _1057 = _858 + _1005;
                    precise float _1058 = _1057 + _1055;
                    precise float _1059 = _951 * _1058;
                    precise float _1060 = _952 * _1058;
                    precise float _1061 = _953 * _1058;
                    precise float _1062 = _1007 * _1013;
                    precise float _1063 = _1010 * _1013;
                    precise float _1064 = _1011 * _1013;
                    precise float _1065 = _1062 + _1059;
                    precise float _1066 = _1063 + _1060;
                    precise float _1067 = _1064 + _1061;
                    precise float _1068 = _984 * _1065;
                    precise float _1069 = _984 * _1066;
                    precise float _1070 = _984 * _1067;
                    precise float _960 = _1068 * 0.0500000007450580596923828125;
                    precise float _962 = _1069 * 0.0500000007450580596923828125;
                    precise float _964 = _1070 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _960;
                    frontier_phi_5_pred_7_ladder_1 = _962;
                    frontier_phi_5_pred_7_ladder_2 = _964;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _959 = frontier_phi_5_pred;
            _961 = frontier_phi_5_pred_1;
            _963 = frontier_phi_5_pred_2;
            _594 = _817 + _959;
            _596 = _818 + _961;
            _598 = _819 + _963;
            uint _823 = _822 + 1u;
            if (_823 == _186)
            {
                break;
            }
            else
            {
                _817 = _594;
                _818 = _596;
                _819 = _598;
                _820 = (_822 != 3u) ? (_820 >> 8u) : _592;
                _822 = _823;
                continue;
            }
        }
        _593 = _594;
        _595 = _596;
        _597 = _598;
    }
    precise float _599 = _593 * _593;
    precise float _600 = _595 * _595;
    precise float _601 = _599 + _600;
    precise float _602 = _597 * _597;
    precise float _603 = _601 + _602;
    float _604 = sqrt(_603);
    bool _605 = _604 < 0.00011000000085914507508277893066406;
    float _610 = inversesqrt(dot(vec3(cbInstanceData._m0[_177].x, cbInstanceData._m0[_545].x, cbInstanceData._m0[_552].x), vec3(cbInstanceData._m0[_177].x, cbInstanceData._m0[_545].x, cbInstanceData._m0[_552].x)));
    precise float _611 = cbInstanceData._m0[_177].x * _610;
    precise float _612 = cbInstanceData._m0[_545].x * _610;
    precise float _613 = cbInstanceData._m0[_552].x * _610;
    float _617 = inversesqrt(dot(vec3(cbInstanceData._m0[_177].y, cbInstanceData._m0[_545].y, cbInstanceData._m0[_552].y), vec3(cbInstanceData._m0[_177].y, cbInstanceData._m0[_545].y, cbInstanceData._m0[_552].y)));
    precise float _618 = cbInstanceData._m0[_177].y * _617;
    precise float _619 = cbInstanceData._m0[_545].y * _617;
    precise float _620 = cbInstanceData._m0[_552].y * _617;
    float _624 = inversesqrt(dot(vec3(cbInstanceData._m0[_177].z, cbInstanceData._m0[_545].z, cbInstanceData._m0[_552].z), vec3(cbInstanceData._m0[_177].z, cbInstanceData._m0[_545].z, cbInstanceData._m0[_552].z)));
    precise float _625 = cbInstanceData._m0[_177].z * _624;
    precise float _626 = cbInstanceData._m0[_545].z * _624;
    precise float _627 = cbInstanceData._m0[_552].z * _624;
    precise float _628 = _611 * 0.0;
    precise float _629 = 1.0 * _618;
    precise float _630 = _629 + _628;
    precise float _631 = 0.0 * _625;
    precise float _632 = _631 + _630;
    precise float _633 = _612 * 0.0;
    precise float _634 = 1.0 * _619;
    precise float _635 = _634 + _633;
    precise float _636 = 0.0 * _626;
    precise float _637 = _636 + _635;
    precise float _638 = _613 * 0.0;
    precise float _639 = 1.0 * _620;
    precise float _640 = _639 + _638;
    precise float _641 = 0.0 * _627;
    precise float _642 = _641 + _640;
    float _646 = inversesqrt(dot(vec3(_593, _595, _597), vec3(_593, _595, _597)));
    precise float _647 = _593 * _646;
    precise float _648 = _595 * _646;
    precise float _649 = _597 * _646;
    precise float _650 = _637 * _649;
    precise float _651 = _642 * _648;
    precise float _652 = _650 - _651;
    precise float _653 = _642 * _647;
    precise float _654 = _632 * _649;
    precise float _655 = _653 - _654;
    precise float _656 = _632 * _648;
    precise float _657 = _637 * _647;
    precise float _658 = _656 - _657;
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    precise float _663 = _662 * _652;
    precise float _664 = _662 * _655;
    precise float _665 = _662 * _658;
    precise float _666 = _604 + 1.0;
    precise float _668 = cbMtdParam._m0[9u].w * log2(_666);
    precise float _669 = dot(vec3(_663, _664, _665), vec3(_580, _581, _582));
    precise float _672 = _663 * _669;
    precise float _673 = _664 * _669;
    precise float _674 = _665 * _669;
    precise float _675 = _565 + _672;
    precise float _676 = _572 + _673;
    precise float _677 = _579 + _674;
    precise float _678 = _395 - _675;
    precise float _679 = _402 - _676;
    precise float _680 = _409 - _677;
    precise float _681 = _664 * _680;
    precise float _682 = _665 * _679;
    precise float _683 = _681 - _682;
    precise float _684 = _665 * _678;
    precise float _685 = _663 * _680;
    precise float _686 = _684 - _685;
    precise float _687 = _663 * _679;
    precise float _688 = _664 * _678;
    precise float _689 = _687 - _688;
    float _690 = sin(_668);
    float _691 = cos(_668);
    precise float _692 = _678 * _691;
    precise float _693 = _679 * _691;
    precise float _694 = _680 * _691;
    precise float _695 = _690 * _683;
    precise float _696 = _690 * _686;
    precise float _697 = _690 * _689;
    precise float _698 = _692 + _695;
    precise float _699 = _693 + _696;
    precise float _700 = _697 + _694;
    precise float _701 = _675 + _698;
    precise float _702 = _676 + _699;
    precise float _703 = _677 + _700;
    precise float _704 = _701 - _395;
    precise float _705 = _702 - _402;
    precise float _706 = _703 - _409;
    precise float _710 = _395 + (_605 ? 0.0 : _704);
    precise float _711 = _402 + (_605 ? 0.0 : _705);
    precise float _712 = _409 + (_605 ? 0.0 : _706);
    precise float _713 = _710 - cbSceneParam._m0[3u].x;
    precise float _714 = _711 - cbSceneParam._m0[3u].y;
    precise float _715 = _712 - cbSceneParam._m0[3u].z;
    precise float _743 = cbSceneParam._m0[24u].x * _713;
    precise float _744 = _714 * cbSceneParam._m0[24u].y;
    precise float _745 = _744 + _743;
    precise float _746 = _715 * cbSceneParam._m0[24u].z;
    precise float _747 = _746 + _745;
    precise float _748 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _749 = _748 + _747;
    precise float _750 = cbSceneParam._m0[25u].x * _713;
    precise float _751 = _714 * cbSceneParam._m0[25u].y;
    precise float _752 = _751 + _750;
    precise float _753 = _715 * cbSceneParam._m0[25u].z;
    precise float _754 = _753 + _752;
    precise float _755 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _756 = _755 + _754;
    precise float _757 = cbSceneParam._m0[26u].x * _713;
    precise float _758 = _714 * cbSceneParam._m0[26u].y;
    precise float _759 = _758 + _757;
    precise float _760 = _715 * cbSceneParam._m0[26u].z;
    precise float _761 = _760 + _759;
    precise float _762 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _763 = _762 + _761;
    precise float _764 = _713 * cbSceneParam._m0[27u].x;
    precise float _765 = _714 * cbSceneParam._m0[27u].y;
    precise float _766 = _765 + _764;
    precise float _767 = _715 * cbSceneParam._m0[27u].z;
    precise float _768 = _767 + _766;
    precise float _769 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _770 = _769 + _768;
    gl_Position.x = _749;
    gl_Position.y = _756;
    gl_Position.z = _763;
    gl_Position.w = _770;
    POSITION_1.x = _749;
    POSITION_1.y = _756;
    POSITION_1.z = _763;
    POSITION_1.w = _770;
    NORMAL_1.x = _517;
    NORMAL_1.y = _520;
    NORMAL_1.z = _523;
    NORMAL_1.w = float(_200);
    TANGENT_1.x = (-0.0) - (_517 * _520);
    TANGENT_1.y = (_517 * _517) - (_523 * _525);
    TANGENT_1.z = _520 * _525;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = (((_461 * (_457 + _451)) / _483) + 1.0) * 0.5;
    TEXCOORD_2.w = (((_461 * (_457 - _451)) / _483) + 1.0) * 0.5;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_749, _756, _763, _770), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_749, _756, _763, _770), vec4(cbInstanceData._m0[_202 + 3u]));
}


