#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_10;
layout(location = 7) out vec4 TEXCOORD_11;
layout(location = 8) out vec3 TEXCOORD_12;

uint _976;

void main()
{
    uint _83 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    TEXCOORD_10.w = 0.0;
    TEXCOORD_11.x = 0.0;
    TEXCOORD_11.y = 0.0;
    TEXCOORD_11.z = 0.0;
    TEXCOORD_11.w = 0.0;
    TEXCOORD_12.x = 0.0;
    TEXCOORD_12.y = 0.0;
    TEXCOORD_12.z = 0.0;
    precise float _179 = float(NORMAL.x) + (-127.0);
    precise float _181 = float(NORMAL.y) + (-127.0);
    precise float _182 = float(NORMAL.z) + (-127.0);
    precise float _183 = _179 * 0.0078740157186985015869140625;
    precise float _185 = _181 * 0.0078740157186985015869140625;
    precise float _186 = _182 * 0.0078740157186985015869140625;
    uint _191 = _83 * 13u;
    uvec4 _197 = floatBitsToUint(cbInstanceData._m0[_191 + 7u]);
    uint _200 = min(_197.y, 8u);
    precise float _204 = POSITION.x + 0.0;
    precise float _205 = POSITION.y + 0.0;
    precise float _206 = POSITION.z + 0.0;
    uint _211 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _83;
    uvec4 _213 = texelFetch(g_InstanceIndexBuffer, int(_211));
    uint _214 = _213.x;
    uint _223 = (floatBitsToUint(cbInstanceData._m0[(_214 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _230 = _223 + 1u;
    uint _237 = _223 + 2u;
    float _247 = inversesqrt(dot(vec3(cbObjMatrix._m0[_223].x, cbObjMatrix._m0[_230].x, cbObjMatrix._m0[_237].x), vec3(cbObjMatrix._m0[_223].x, cbObjMatrix._m0[_230].x, cbObjMatrix._m0[_237].x)));
    precise float _248 = cbObjMatrix._m0[_223].x * _247;
    precise float _249 = cbObjMatrix._m0[_230].x * _247;
    precise float _250 = cbObjMatrix._m0[_237].x * _247;
    float _254 = inversesqrt(dot(vec3(cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_230].y, cbObjMatrix._m0[_237].y), vec3(cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_230].y, cbObjMatrix._m0[_237].y)));
    precise float _255 = cbObjMatrix._m0[_223].y * _254;
    precise float _256 = cbObjMatrix._m0[_230].y * _254;
    precise float _257 = cbObjMatrix._m0[_237].y * _254;
    float _261 = inversesqrt(dot(vec3(cbObjMatrix._m0[_223].z, cbObjMatrix._m0[_230].z, cbObjMatrix._m0[_237].z), vec3(cbObjMatrix._m0[_223].z, cbObjMatrix._m0[_230].z, cbObjMatrix._m0[_237].z)));
    precise float _262 = cbObjMatrix._m0[_223].z * _261;
    precise float _263 = cbObjMatrix._m0[_230].z * _261;
    precise float _264 = cbObjMatrix._m0[_237].z * _261;
    precise float _281 = _248 * cbSceneParam._m0[5u].x;
    precise float _282 = _249 * cbSceneParam._m0[5u].y;
    precise float _283 = _282 + _281;
    precise float _284 = _250 * cbSceneParam._m0[5u].z;
    precise float _285 = _284 + _283;
    precise float _286 = _248 * cbSceneParam._m0[6u].x;
    precise float _287 = _249 * cbSceneParam._m0[6u].y;
    precise float _288 = _287 + _286;
    precise float _289 = _250 * cbSceneParam._m0[6u].z;
    precise float _290 = _289 + _288;
    precise float _291 = _248 * cbSceneParam._m0[7u].x;
    precise float _292 = _249 * cbSceneParam._m0[7u].y;
    precise float _293 = _292 + _291;
    precise float _294 = _250 * cbSceneParam._m0[7u].z;
    precise float _295 = _294 + _293;
    precise float _296 = _255 * cbSceneParam._m0[5u].x;
    precise float _297 = _256 * cbSceneParam._m0[5u].y;
    precise float _298 = _297 + _296;
    precise float _299 = _257 * cbSceneParam._m0[5u].z;
    precise float _300 = _299 + _298;
    precise float _301 = _255 * cbSceneParam._m0[6u].x;
    precise float _302 = _256 * cbSceneParam._m0[6u].y;
    precise float _303 = _302 + _301;
    precise float _304 = _257 * cbSceneParam._m0[6u].z;
    precise float _305 = _304 + _303;
    precise float _306 = _255 * cbSceneParam._m0[7u].x;
    precise float _307 = _256 * cbSceneParam._m0[7u].y;
    precise float _308 = _307 + _306;
    precise float _309 = _257 * cbSceneParam._m0[7u].z;
    precise float _310 = _309 + _308;
    precise float _311 = _262 * cbSceneParam._m0[5u].x;
    precise float _312 = _263 * cbSceneParam._m0[5u].y;
    precise float _313 = _312 + _311;
    precise float _314 = _264 * cbSceneParam._m0[5u].z;
    precise float _315 = _314 + _313;
    precise float _316 = _262 * cbSceneParam._m0[6u].x;
    precise float _317 = _263 * cbSceneParam._m0[6u].y;
    precise float _318 = _317 + _316;
    precise float _319 = _264 * cbSceneParam._m0[6u].z;
    precise float _320 = _319 + _318;
    precise float _321 = _262 * cbSceneParam._m0[7u].x;
    precise float _322 = _263 * cbSceneParam._m0[7u].y;
    precise float _323 = _322 + _321;
    precise float _324 = _264 * cbSceneParam._m0[7u].z;
    precise float _325 = _324 + _323;
    precise float _326 = _185 * 0.0;
    precise float _327 = _326 - _186;
    precise float _328 = _186 * 0.0;
    precise float _329 = _183 * 0.0;
    precise float _330 = _328 - _329;
    precise float _331 = _183 - _326;
    precise float _332 = _186 * _330;
    precise float _333 = _185 * _331;
    precise float _334 = _332 - _333;
    precise float _335 = _183 * _331;
    precise float _336 = _186 * _327;
    precise float _337 = _335 - _336;
    precise float _338 = _185 * _327;
    precise float _339 = _183 * _330;
    precise float _340 = _338 - _339;
    float _344 = inversesqrt(dot(vec3(_327, _330, _331), vec3(_327, _330, _331)));
    precise float _345 = _327 * _344;
    precise float _346 = _330 * _344;
    precise float _347 = _331 * _344;
    float _351 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    precise float _352 = _334 * _351;
    precise float _353 = _337 * _351;
    precise float _354 = _340 * _351;
    precise float _355 = (-0.0) - _183;
    precise float _357 = (-0.0) - _185;
    precise float _358 = (-0.0) - _186;
    float _362 = inversesqrt(dot(vec3(_355, _357, _358), vec3(_355, _357, _358)));
    precise float _363 = _362 * _355;
    precise float _364 = _362 * _357;
    precise float _365 = _362 * _358;
    precise float _366 = _204 - TEXCOORD_1.x;
    precise float _367 = _205 - TEXCOORD_1.y;
    precise float _368 = _206 - TEXCOORD_1.z;
    precise float _369 = _366 * _345;
    precise float _370 = _367 * _346;
    precise float _371 = _370 + _369;
    precise float _372 = _368 * _347;
    precise float _373 = _372 + _371;
    precise float _374 = _366 * _352;
    precise float _375 = _367 * _353;
    precise float _376 = _375 + _374;
    precise float _377 = _368 * _354;
    precise float _378 = _377 + _376;
    precise float _379 = _366 * _363;
    precise float _380 = _367 * _364;
    precise float _381 = _380 + _379;
    precise float _382 = _368 * _365;
    precise float _383 = _382 + _381;
    precise float _384 = _285 * _373;
    precise float _385 = _290 * _378;
    precise float _386 = _385 + _384;
    precise float _387 = _295 * _383;
    precise float _388 = _387 + _386;
    precise float _389 = _300 * _373;
    precise float _390 = _305 * _378;
    precise float _391 = _390 + _389;
    precise float _392 = _310 * _383;
    precise float _393 = _392 + _391;
    precise float _394 = _315 * _373;
    precise float _395 = _320 * _378;
    precise float _396 = _395 + _394;
    precise float _397 = _325 * _383;
    precise float _398 = _397 + _396;
    precise float _399 = TEXCOORD_1.x + _388;
    precise float _400 = TEXCOORD_1.y + _393;
    precise float _401 = TEXCOORD_1.z + _398;
    precise float _402 = cbObjMatrix._m0[_223].x * _399;
    precise float _403 = _400 * cbObjMatrix._m0[_223].y;
    precise float _404 = _403 + _402;
    precise float _405 = _401 * cbObjMatrix._m0[_223].z;
    precise float _406 = _405 + _404;
    precise float _407 = 1.0 * cbObjMatrix._m0[_223].w;
    precise float _409 = _407 + _406;
    precise float _410 = cbObjMatrix._m0[_230].x * _399;
    precise float _411 = _400 * cbObjMatrix._m0[_230].y;
    precise float _412 = _411 + _410;
    precise float _413 = _401 * cbObjMatrix._m0[_230].z;
    precise float _414 = _413 + _412;
    precise float _415 = 1.0 * cbObjMatrix._m0[_230].w;
    precise float _416 = _415 + _414;
    precise float _417 = cbObjMatrix._m0[_237].x * _399;
    precise float _418 = _400 * cbObjMatrix._m0[_237].y;
    precise float _419 = _418 + _417;
    precise float _420 = _401 * cbObjMatrix._m0[_237].z;
    precise float _421 = _420 + _419;
    precise float _422 = 1.0 * cbObjMatrix._m0[_237].w;
    precise float _423 = _422 + _421;
    float _479 = (((-0.0) - cbObjMatrix._m0[_223].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_223].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_223].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _250, fma(cbSceneParam._m0[3u].y, _249, cbSceneParam._m0[3u].x * _248));
    float _482 = (((-0.0) - cbObjMatrix._m0[_230].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_230].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_230].y, cbObjMatrix._m0[_230].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _257, fma(cbSceneParam._m0[3u].y, _256, cbSceneParam._m0[3u].x * _255));
    float _485 = (((-0.0) - cbObjMatrix._m0[_237].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_237].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_237].y, cbObjMatrix._m0[_237].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _264, fma(cbSceneParam._m0[3u].y, _263, cbSceneParam._m0[3u].x * _262));
    float _489 = inversesqrt(dot(vec3(_479, _482, _485), vec3(_479, _482, _485)));
    float _490 = _489 * _479;
    float _491 = _489 * _482;
    float _492 = _489 * _485;
    float _495 = fma(_492, _347, fma(_491, _346, _490 * _345));
    float _498 = fma(_492, _354, fma(_491, _353, _490 * _352));
    float _501 = fma(_492, _365, fma(_491, _364, _490 * _363));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    float _506 = _505 * _495;
    float _507 = _505 * _498;
    float _508 = _505 * _501;
    float _527 = dot(vec3(_506, _507, _508), vec3(float(int(uint(_506 > 0.0) - uint(_506 < 0.0))), float(int(uint(_507 > 0.0) - uint(_507 < 0.0))), float(int(uint(_508 > 0.0) - uint(_508 < 0.0)))));
    float _543 = fma(_186, _347, fma(_185, _346, _345 * _183));
    float _546 = fma(_186, _354, fma(_185, _353, _352 * _183));
    float _549 = fma(_186, _365, fma(_185, _364, _363 * _183));
    float _552 = fma(_295, _549, fma(_290, _546, _543 * _285));
    float _555 = fma(_310, _549, fma(_305, _546, _543 * _300));
    float _558 = fma(_325, _549, fma(_320, _546, _543 * _315));
    float _561 = fma(_558, cbObjMatrix._m0[_223].z, fma(_555, cbObjMatrix._m0[_223].y, _552 * cbObjMatrix._m0[_223].x));
    float _564 = fma(_558, cbObjMatrix._m0[_230].z, fma(_555, cbObjMatrix._m0[_230].y, _552 * cbObjMatrix._m0[_230].x));
    float _567 = fma(_558, cbObjMatrix._m0[_237].z, fma(_555, cbObjMatrix._m0[_237].y, _552 * cbObjMatrix._m0[_237].x));
    float _569 = (-0.0) - _567;
    precise float _581 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _589 = _191 + 1u;
    uint _596 = _191 + 2u;
    precise float _603 = TEXCOORD_1.x * cbInstanceData._m0[_191].x;
    precise float _604 = TEXCOORD_1.y * cbInstanceData._m0[_191].y;
    precise float _605 = _604 + _603;
    precise float _606 = TEXCOORD_1.z * cbInstanceData._m0[_191].z;
    precise float _607 = _606 + _605;
    precise float _608 = 1.0 * cbInstanceData._m0[_191].w;
    precise float _609 = _608 + _607;
    precise float _610 = TEXCOORD_1.x * cbInstanceData._m0[_589].x;
    precise float _611 = TEXCOORD_1.y * cbInstanceData._m0[_589].y;
    precise float _612 = _611 + _610;
    precise float _613 = TEXCOORD_1.z * cbInstanceData._m0[_589].z;
    precise float _614 = _613 + _612;
    precise float _615 = 1.0 * cbInstanceData._m0[_589].w;
    precise float _616 = _615 + _614;
    precise float _617 = TEXCOORD_1.x * cbInstanceData._m0[_596].x;
    precise float _618 = TEXCOORD_1.y * cbInstanceData._m0[_596].y;
    precise float _619 = _618 + _617;
    precise float _620 = TEXCOORD_1.z * cbInstanceData._m0[_596].z;
    precise float _621 = _620 + _619;
    precise float _622 = 1.0 * cbInstanceData._m0[_596].w;
    precise float _623 = _622 + _621;
    precise float _624 = _409 - _609;
    precise float _625 = _416 - _616;
    precise float _626 = _423 - _623;
    precise float _627 = _624 * _624;
    precise float _628 = _625 * _625;
    precise float _629 = _627 + _628;
    precise float _630 = _626 * _626;
    precise float _631 = _629 + _630;
    precise float _633 = cbMtdParam._m0[9u].z * sqrt(_631);
    precise float _634 = _581 + _633;
    precise float _635 = cbPerFrame._m0[22u].x + _634;
    uint _636 = _197.w;
    float _637;
    float _639;
    float _641;
    if (_200 == 0u)
    {
        _637 = 0.0;
        _639 = 0.0;
        _641 = 0.0;
    }
    else
    {
        uint _906 = _197.z;
        precise float _638;
        precise float _640;
        precise float _642;
        float _1049;
        float _1051;
        float _1053;
        float _907 = 0.0;
        float _908 = 0.0;
        float _909 = 0.0;
        uint _910 = _906;
        uint _912 = 0u;
        float _948;
        float _967;
        vec4 _981;
        float _982;
        float _983;
        float _997;
        float _998;
        float _999;
        float _1016;
        float _1017;
        float _1018;
        float _1019;
        bool _1020;
        bool _1021;
        bool _1022;
        precise float _1023;
        precise float _1024;
        precise float _1025;
        float _1026;
        float _1027;
        float _1028;
        precise float _1029;
        bool _1032;
        for (;;)
        {
            uint _914 = _910 & 255u;
            uint _916 = _914 * 24u;
            uvec3 _926 = uvec3(texelFetch(g_forceParam, int(_916)).x, texelFetch(g_forceParam, int(_916 + 1u)).x, texelFetch(g_forceParam, int(_916 + 2u)).x);
            uint _931 = (_914 * 24u) + 4u;
            vec4 _944 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_931)).x, texelFetch(g_forceParam, int(_931 + 1u)).x, texelFetch(g_forceParam, int(_931 + 2u)).x, texelFetch(g_forceParam, int(_931 + 3u)).x));
            _948 = _944.w;
            uint _950 = (_914 * 24u) + 8u;
            vec4 _963 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_950)).x, texelFetch(g_forceParam, int(_950 + 1u)).x, texelFetch(g_forceParam, int(_950 + 2u)).x, texelFetch(g_forceParam, int(_950 + 3u)).x));
            _967 = _963.w;
            uint _970 = (_914 * 24u) + 12u;
            _981 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_970)).x, texelFetch(g_forceParam, int(_970 + 1u)).x, _976, texelFetch(g_forceParam, int(_970 + 3u)).x));
            _982 = _981.x;
            _983 = _981.w;
            uint _986 = (_914 * 24u) + 16u;
            vec3 _996 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_986)).x, texelFetch(g_forceParam, int(_986 + 1u)).x, texelFetch(g_forceParam, int(_986 + 2u)).x));
            _997 = _996.x;
            _998 = _996.y;
            _999 = _996.z;
            uint _1002 = (_914 * 24u) + 20u;
            vec4 _1015 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1002)).x, texelFetch(g_forceParam, int(_1002 + 1u)).x, texelFetch(g_forceParam, int(_1002 + 2u)).x, texelFetch(g_forceParam, int(_1002 + 3u)).x));
            _1016 = _1015.x;
            _1017 = _1015.y;
            _1018 = _1015.z;
            _1019 = _1015.w;
            _1020 = _926.x == 1u;
            _1021 = _926.y == 1u;
            _1022 = _926.z == 1u;
            _1023 = _609 - _944.x;
            _1024 = _616 - _944.y;
            _1025 = _623 - _944.z;
            _1026 = _1020 ? _963.x : _1023;
            _1027 = _1020 ? _963.y : _1024;
            _1028 = _1020 ? _963.z : _1025;
            _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
            _1032 = _1029 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_1032)
            {
                precise float _1034 = _1023 * _1023;
                precise float _1035 = _1024 * _1024;
                precise float _1036 = _1034 + _1035;
                precise float _1037 = _1025 * _1025;
                precise float _1038 = _1037 + _1036;
                float _1039 = sqrt(_1038);
                float _1040 = inversesqrt(_1029);
                precise float _1041 = _1026 * _1040;
                precise float _1042 = _1027 * _1040;
                precise float _1043 = _1028 * _1040;
                precise float _1046 = _1039 / (isnan(0.001000000047497451305389404296875) ? _981.y : (isnan(_981.y) ? 0.001000000047497451305389404296875 : max(_981.y, 0.001000000047497451305389404296875)));
                precise float _1047 = 1.0 - _1046;
                float _1210 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
                float _1048 = isnan(1.0) ? _1210 : (isnan(_1210) ? 1.0 : min(_1210, 1.0));
                float _1074;
                if (_1022)
                {
                    float _1061 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
                    precise float _1062 = _1023 * _1061;
                    precise float _1063 = _1024 * _1061;
                    precise float _1064 = _1025 * _1061;
                    precise float _1068 = dot(vec3(_1041, _1042, _1043), vec3(_1062, _1063, _1064)) * 0.800000011920928955078125;
                    precise float _1070 = _1068 + 0.20000000298023223876953125;
                    float _1221 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
                    precise float _1073 = _1048 * (isnan(1.0) ? _1221 : (isnan(_1221) ? 1.0 : min(_1221, 1.0)));
                    _1074 = _1073;
                }
                else
                {
                    _1074 = _1048;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_1074 > 0.0)
                {
                    bool _1077 = _1020 && (!_1022);
                    precise float _1079 = _1039 * (-4.0);
                    precise float _1083 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _982 : (isnan(_982) ? 0.001000000047497451305389404296875 : max(_982, 0.001000000047497451305389404296875)));
                    precise float _1085 = dot(vec2(_1041, _1043), vec2(_1023, _1025));
                    precise float _1089 = _1083 * _1085;
                    precise float _1090 = float(_1077) * _1089;
                    precise float _1091 = _635 * _1083;
                    precise float _1092 = _1091 - _1090;
                    precise float _1093 = (_1077 ? 0.0 : _1079) + _1092;
                    precise float _1095 = _967 * sin(_1093);
                    precise float _1096 = _1042 * 0.0;
                    precise float _1097 = _1096 - _1043;
                    precise float _1098 = _1043 * 0.0;
                    precise float _1099 = _1041 * 0.0;
                    precise float _1100 = _1098 - _1099;
                    precise float _1101 = _1041 - _1096;
                    precise float _1102 = _983 * _1095;
                    float _1103 = _1020 ? _1102 : 0.0;
                    float _1145;
                    if (_1021)
                    {
                        precise float _1106 = _997 * 2.0;
                        precise float _1108 = _1017 + _1018;
                        precise float _1109 = _1019 + _1108;
                        precise float _1111 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _997 : (isnan(_997) ? 0.001000000047497451305389404296875 : max(_997, 0.001000000047497451305389404296875)));
                        precise float _1112 = _1016 * _1111;
                        precise float _1113 = (-0.0) - _1041;
                        precise float _1117 = dot(vec2(_1043, _1113), vec2(_1023, _1025)) / _1106;
                        precise float _1118 = (-0.0) - _1117;
                        float _1121 = fract(abs(_1117));
                        precise float _1122 = (-0.0) - _1121;
                        precise float _1124 = _1106 * ((_1117 >= _1118) ? _1121 : _1122);
                        precise float _1125 = _1124 * 6.283184051513671875;
                        precise float _1126 = _1125 / _1106;
                        precise float _1128 = (isnan(5.0) ? _997 : (isnan(_997) ? 5.0 : min(_997, 5.0))) * sin(_1126);
                        precise float _1129 = _1085 + _1128;
                        precise float _1130 = _997 * 0.25;
                        precise float _1132 = _635 * _1016;
                        precise float _1133 = _1132 - _1130;
                        precise float _1134 = _1133 - _1129;
                        precise float _1135 = _1016 * _1109;
                        precise float _1137 = _1134 / (isnan(0.001000000047497451305389404296875) ? _1135 : (isnan(_1135) ? 0.001000000047497451305389404296875 : max(_1135, 0.001000000047497451305389404296875)));
                        float _1138 = fract(_1137);
                        precise float _1140 = 1.0 - _1138;
                        float _1141 = (_1137 < 0.0) ? _1140 : _1138;
                        precise float _1142 = _1108 / _1109;
                        precise float _1143 = _1017 / _1109;
                        float _1164;
                        if (_1141 < _1143)
                        {
                            precise float _1162 = _1141 / _1143;
                            _1164 = _1162;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_1141 < _1142)
                            {
                                precise float _1174 = _1141 - _1143;
                                precise float _1175 = _1142 - _1143;
                                precise float _1176 = _1174 / _1175;
                                precise float _1165 = 1.0 - _1176;
                                frontier_phi_14_13_ladder = _1165;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1164 = frontier_phi_14_13_ladder;
                        }
                        precise float _1166 = _999 * _1164;
                        precise float _1167 = _1111 * _1085;
                        precise float _1168 = _635 * _1112;
                        precise float _1169 = _1168 - _1167;
                        precise float _1171 = _998 + sin(_1169);
                        precise float _1173 = _1166 * abs(_1171);
                        precise float _1146 = _1173 + 0.0;
                        _1145 = _1146;
                    }
                    else
                    {
                        _1145 = 0.0;
                    }
                    precise float _1147 = _948 + _1095;
                    precise float _1148 = _1147 + _1145;
                    precise float _1149 = _1041 * _1148;
                    precise float _1150 = _1042 * _1148;
                    precise float _1151 = _1043 * _1148;
                    precise float _1152 = _1097 * _1103;
                    precise float _1153 = _1100 * _1103;
                    precise float _1154 = _1101 * _1103;
                    precise float _1155 = _1152 + _1149;
                    precise float _1156 = _1153 + _1150;
                    precise float _1157 = _1154 + _1151;
                    precise float _1158 = _1074 * _1155;
                    precise float _1159 = _1074 * _1156;
                    precise float _1160 = _1074 * _1157;
                    precise float _1050 = _1158 * 0.0500000007450580596923828125;
                    precise float _1052 = _1159 * 0.0500000007450580596923828125;
                    precise float _1054 = _1160 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _1050;
                    frontier_phi_5_pred_7_ladder_1 = _1052;
                    frontier_phi_5_pred_7_ladder_2 = _1054;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _1049 = frontier_phi_5_pred;
            _1051 = frontier_phi_5_pred_1;
            _1053 = frontier_phi_5_pred_2;
            _638 = _907 + _1049;
            _640 = _908 + _1051;
            _642 = _909 + _1053;
            uint _913 = _912 + 1u;
            if (_913 == _200)
            {
                break;
            }
            else
            {
                _907 = _638;
                _908 = _640;
                _909 = _642;
                _910 = (_912 != 3u) ? (_910 >> 8u) : _636;
                _912 = _913;
                continue;
            }
        }
        _637 = _638;
        _639 = _640;
        _641 = _642;
    }
    precise float _643 = _637 * _637;
    precise float _644 = _639 * _639;
    precise float _645 = _643 + _644;
    precise float _646 = _641 * _641;
    precise float _647 = _645 + _646;
    float _648 = sqrt(_647);
    bool _649 = _648 < 0.00011000000085914507508277893066406;
    float _654 = inversesqrt(dot(vec3(cbInstanceData._m0[_191].x, cbInstanceData._m0[_589].x, cbInstanceData._m0[_596].x), vec3(cbInstanceData._m0[_191].x, cbInstanceData._m0[_589].x, cbInstanceData._m0[_596].x)));
    precise float _655 = cbInstanceData._m0[_191].x * _654;
    precise float _656 = cbInstanceData._m0[_589].x * _654;
    precise float _657 = cbInstanceData._m0[_596].x * _654;
    float _661 = inversesqrt(dot(vec3(cbInstanceData._m0[_191].y, cbInstanceData._m0[_589].y, cbInstanceData._m0[_596].y), vec3(cbInstanceData._m0[_191].y, cbInstanceData._m0[_589].y, cbInstanceData._m0[_596].y)));
    precise float _662 = cbInstanceData._m0[_191].y * _661;
    precise float _663 = cbInstanceData._m0[_589].y * _661;
    precise float _664 = cbInstanceData._m0[_596].y * _661;
    float _668 = inversesqrt(dot(vec3(cbInstanceData._m0[_191].z, cbInstanceData._m0[_589].z, cbInstanceData._m0[_596].z), vec3(cbInstanceData._m0[_191].z, cbInstanceData._m0[_589].z, cbInstanceData._m0[_596].z)));
    precise float _669 = cbInstanceData._m0[_191].z * _668;
    precise float _670 = cbInstanceData._m0[_589].z * _668;
    precise float _671 = cbInstanceData._m0[_596].z * _668;
    precise float _672 = _655 * 0.0;
    precise float _673 = 1.0 * _662;
    precise float _674 = _673 + _672;
    precise float _675 = 0.0 * _669;
    precise float _676 = _675 + _674;
    precise float _677 = _656 * 0.0;
    precise float _678 = 1.0 * _663;
    precise float _679 = _678 + _677;
    precise float _680 = 0.0 * _670;
    precise float _681 = _680 + _679;
    precise float _682 = _657 * 0.0;
    precise float _683 = 1.0 * _664;
    precise float _684 = _683 + _682;
    precise float _685 = 0.0 * _671;
    precise float _686 = _685 + _684;
    float _690 = inversesqrt(dot(vec3(_637, _639, _641), vec3(_637, _639, _641)));
    precise float _691 = _637 * _690;
    precise float _692 = _639 * _690;
    precise float _693 = _641 * _690;
    precise float _694 = _681 * _693;
    precise float _695 = _686 * _692;
    precise float _696 = _694 - _695;
    precise float _697 = _686 * _691;
    precise float _698 = _676 * _693;
    precise float _699 = _697 - _698;
    precise float _700 = _676 * _692;
    precise float _701 = _681 * _691;
    precise float _702 = _700 - _701;
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    precise float _707 = _706 * _696;
    precise float _708 = _706 * _699;
    precise float _709 = _706 * _702;
    precise float _710 = _648 + 1.0;
    precise float _712 = cbMtdParam._m0[9u].w * log2(_710);
    precise float _713 = dot(vec3(_707, _708, _709), vec3(_624, _625, _626));
    precise float _716 = _707 * _713;
    precise float _717 = _708 * _713;
    precise float _718 = _709 * _713;
    precise float _719 = _609 + _716;
    precise float _720 = _616 + _717;
    precise float _721 = _623 + _718;
    precise float _722 = _409 - _719;
    precise float _723 = _416 - _720;
    precise float _724 = _423 - _721;
    precise float _725 = _708 * _724;
    precise float _726 = _709 * _723;
    precise float _727 = _725 - _726;
    precise float _728 = _709 * _722;
    precise float _729 = _707 * _724;
    precise float _730 = _728 - _729;
    precise float _731 = _707 * _723;
    precise float _732 = _708 * _722;
    precise float _733 = _731 - _732;
    float _734 = sin(_712);
    float _735 = cos(_712);
    precise float _736 = _722 * _735;
    precise float _737 = _723 * _735;
    precise float _738 = _724 * _735;
    precise float _739 = _734 * _727;
    precise float _740 = _734 * _730;
    precise float _741 = _734 * _733;
    precise float _742 = _736 + _739;
    precise float _743 = _737 + _740;
    precise float _744 = _741 + _738;
    precise float _745 = _719 + _742;
    precise float _746 = _720 + _743;
    precise float _747 = _721 + _744;
    precise float _748 = _745 - _409;
    precise float _749 = _746 - _416;
    precise float _750 = _747 - _423;
    float _751 = _649 ? 0.0 : _748;
    float _752 = _649 ? 0.0 : _749;
    float _753 = _649 ? 0.0 : _750;
    precise float _754 = _409 + _751;
    precise float _755 = _416 + _752;
    precise float _756 = _423 + _753;
    float _764 = ((fma(_401, cbPrevObjMatrix._m0[_223].z, fma(_400, cbPrevObjMatrix._m0[_223].y, cbPrevObjMatrix._m0[_223].x * _399)) + cbPrevObjMatrix._m0[_223].w) - cbSceneParam._m0[28u].x) + _751;
    float _766 = ((fma(_401, cbPrevObjMatrix._m0[_230].z, fma(_400, cbPrevObjMatrix._m0[_230].y, cbPrevObjMatrix._m0[_230].x * _399)) + cbPrevObjMatrix._m0[_230].w) - cbSceneParam._m0[28u].y) + _752;
    float _768 = ((fma(_401, cbPrevObjMatrix._m0[_237].z, fma(_400, cbPrevObjMatrix._m0[_237].y, cbPrevObjMatrix._m0[_237].x * _399)) + cbPrevObjMatrix._m0[_237].w) - cbSceneParam._m0[28u].z) + _753;
    precise float _813 = _754 - cbSceneParam._m0[3u].x;
    precise float _814 = _755 - cbSceneParam._m0[3u].y;
    precise float _815 = _756 - cbSceneParam._m0[3u].z;
    precise float _843 = _813 * cbSceneParam._m0[24u].x;
    precise float _844 = _814 * cbSceneParam._m0[24u].y;
    precise float _845 = _844 + _843;
    precise float _846 = _815 * cbSceneParam._m0[24u].z;
    precise float _847 = _846 + _845;
    precise float _848 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _849 = _848 + _847;
    precise float _850 = _813 * cbSceneParam._m0[25u].x;
    precise float _851 = _814 * cbSceneParam._m0[25u].y;
    precise float _852 = _851 + _850;
    precise float _853 = _815 * cbSceneParam._m0[25u].z;
    precise float _854 = _853 + _852;
    precise float _855 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _856 = _855 + _854;
    precise float _857 = _813 * cbSceneParam._m0[26u].x;
    precise float _858 = _814 * cbSceneParam._m0[26u].y;
    precise float _859 = _858 + _857;
    precise float _860 = _815 * cbSceneParam._m0[26u].z;
    precise float _861 = _860 + _859;
    precise float _862 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _863 = _862 + _861;
    precise float _864 = _813 * cbSceneParam._m0[27u].x;
    precise float _865 = _814 * cbSceneParam._m0[27u].y;
    precise float _866 = _865 + _864;
    precise float _867 = _815 * cbSceneParam._m0[27u].z;
    precise float _868 = _867 + _866;
    precise float _869 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _870 = _869 + _868;
    gl_Position.x = _849;
    gl_Position.y = _856;
    gl_Position.z = _863;
    gl_Position.w = _870;
    POSITION_1.x = _849;
    POSITION_1.y = _856;
    POSITION_1.z = _863;
    POSITION_1.w = _870;
    NORMAL_1.x = _561;
    NORMAL_1.y = _564;
    NORMAL_1.z = _567;
    NORMAL_1.w = float(_214);
    TANGENT_1.x = (-0.0) - (_561 * _564);
    TANGENT_1.y = (_561 * _561) - (_567 * _569);
    TANGENT_1.z = _564 * _569;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = (((_505 * (_501 + _495)) / _527) + 1.0) * 0.5;
    TEXCOORD_2.w = (((_505 * (_501 - _495)) / _527) + 1.0) * 0.5;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_10.x = _849;
    TEXCOORD_10.y = _856;
    TEXCOORD_10.z = _863;
    TEXCOORD_10.w = _870;
    TEXCOORD_11.x = fma(_768, cbSceneParam._m0[29u].z, fma(_766, cbSceneParam._m0[29u].y, _764 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_11.y = fma(_768, cbSceneParam._m0[30u].z, fma(_766, cbSceneParam._m0[30u].y, _764 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_11.z = fma(_768, cbSceneParam._m0[31u].z, fma(_766, cbSceneParam._m0[31u].y, _764 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_11.w = fma(_768, cbSceneParam._m0[32u].z, fma(_766, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _764)) + cbSceneParam._m0[32u].w;
    TEXCOORD_12.x = _561;
    TEXCOORD_12.y = _564;
    TEXCOORD_12.z = _567;
}


