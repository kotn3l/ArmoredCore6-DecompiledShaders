#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out float TEXCOORD_13;

uint _887;

void main()
{
    uint _80 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_13 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    precise float _161 = float(NORMAL.x) + (-127.0);
    precise float _163 = float(NORMAL.y) + (-127.0);
    precise float _164 = float(NORMAL.z) + (-127.0);
    precise float _165 = _161 * 0.0078740157186985015869140625;
    precise float _167 = _163 * 0.0078740157186985015869140625;
    precise float _168 = _164 * 0.0078740157186985015869140625;
    uint _173 = _80 * 13u;
    uvec4 _179 = floatBitsToUint(cbInstanceData._m0[_173 + 7u]);
    uint _182 = min(_179.y, 8u);
    precise float _186 = POSITION.x + 0.0;
    precise float _187 = POSITION.y + 0.0;
    precise float _188 = POSITION.z + 0.0;
    uint _193 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _80;
    uvec4 _195 = texelFetch(g_InstanceIndexBuffer, int(_193));
    uint _196 = _195.x;
    uint _198 = _196 * 13u;
    uint _205 = (floatBitsToUint(cbInstanceData._m0[_198 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _212 = _205 + 1u;
    uint _219 = _205 + 2u;
    float _229 = inversesqrt(dot(vec3(cbObjMatrix._m0[_205].x, cbObjMatrix._m0[_212].x, cbObjMatrix._m0[_219].x), vec3(cbObjMatrix._m0[_205].x, cbObjMatrix._m0[_212].x, cbObjMatrix._m0[_219].x)));
    precise float _230 = cbObjMatrix._m0[_205].x * _229;
    precise float _231 = cbObjMatrix._m0[_212].x * _229;
    precise float _232 = cbObjMatrix._m0[_219].x * _229;
    float _236 = inversesqrt(dot(vec3(cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_212].y, cbObjMatrix._m0[_219].y), vec3(cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_212].y, cbObjMatrix._m0[_219].y)));
    precise float _237 = cbObjMatrix._m0[_205].y * _236;
    precise float _238 = cbObjMatrix._m0[_212].y * _236;
    precise float _239 = cbObjMatrix._m0[_219].y * _236;
    float _243 = inversesqrt(dot(vec3(cbObjMatrix._m0[_205].z, cbObjMatrix._m0[_212].z, cbObjMatrix._m0[_219].z), vec3(cbObjMatrix._m0[_205].z, cbObjMatrix._m0[_212].z, cbObjMatrix._m0[_219].z)));
    precise float _244 = cbObjMatrix._m0[_205].z * _243;
    precise float _245 = cbObjMatrix._m0[_212].z * _243;
    precise float _246 = cbObjMatrix._m0[_219].z * _243;
    precise float _263 = _230 * cbSceneParam._m0[5u].x;
    precise float _264 = _231 * cbSceneParam._m0[5u].y;
    precise float _265 = _264 + _263;
    precise float _266 = _232 * cbSceneParam._m0[5u].z;
    precise float _267 = _266 + _265;
    precise float _268 = _230 * cbSceneParam._m0[6u].x;
    precise float _269 = _231 * cbSceneParam._m0[6u].y;
    precise float _270 = _269 + _268;
    precise float _271 = _232 * cbSceneParam._m0[6u].z;
    precise float _272 = _271 + _270;
    precise float _273 = _230 * cbSceneParam._m0[7u].x;
    precise float _274 = _231 * cbSceneParam._m0[7u].y;
    precise float _275 = _274 + _273;
    precise float _276 = _232 * cbSceneParam._m0[7u].z;
    precise float _277 = _276 + _275;
    precise float _278 = _237 * cbSceneParam._m0[5u].x;
    precise float _279 = _238 * cbSceneParam._m0[5u].y;
    precise float _280 = _279 + _278;
    precise float _281 = _239 * cbSceneParam._m0[5u].z;
    precise float _282 = _281 + _280;
    precise float _283 = _237 * cbSceneParam._m0[6u].x;
    precise float _284 = _238 * cbSceneParam._m0[6u].y;
    precise float _285 = _284 + _283;
    precise float _286 = _239 * cbSceneParam._m0[6u].z;
    precise float _287 = _286 + _285;
    precise float _288 = _237 * cbSceneParam._m0[7u].x;
    precise float _289 = _238 * cbSceneParam._m0[7u].y;
    precise float _290 = _289 + _288;
    precise float _291 = _239 * cbSceneParam._m0[7u].z;
    precise float _292 = _291 + _290;
    precise float _293 = _244 * cbSceneParam._m0[5u].x;
    precise float _294 = _245 * cbSceneParam._m0[5u].y;
    precise float _295 = _294 + _293;
    precise float _296 = _246 * cbSceneParam._m0[5u].z;
    precise float _297 = _296 + _295;
    precise float _298 = _244 * cbSceneParam._m0[6u].x;
    precise float _299 = _245 * cbSceneParam._m0[6u].y;
    precise float _300 = _299 + _298;
    precise float _301 = _246 * cbSceneParam._m0[6u].z;
    precise float _302 = _301 + _300;
    precise float _303 = _244 * cbSceneParam._m0[7u].x;
    precise float _304 = _245 * cbSceneParam._m0[7u].y;
    precise float _305 = _304 + _303;
    precise float _306 = _246 * cbSceneParam._m0[7u].z;
    precise float _307 = _306 + _305;
    precise float _308 = _167 * 0.0;
    precise float _309 = _308 - _168;
    precise float _310 = _168 * 0.0;
    precise float _311 = _165 * 0.0;
    precise float _312 = _310 - _311;
    precise float _313 = _165 - _308;
    precise float _314 = _168 * _312;
    precise float _315 = _167 * _313;
    precise float _316 = _314 - _315;
    precise float _317 = _165 * _313;
    precise float _318 = _168 * _309;
    precise float _319 = _317 - _318;
    precise float _320 = _167 * _309;
    precise float _321 = _165 * _312;
    precise float _322 = _320 - _321;
    float _326 = inversesqrt(dot(vec3(_309, _312, _313), vec3(_309, _312, _313)));
    precise float _327 = _309 * _326;
    precise float _328 = _312 * _326;
    precise float _329 = _313 * _326;
    float _333 = inversesqrt(dot(vec3(_316, _319, _322), vec3(_316, _319, _322)));
    precise float _334 = _316 * _333;
    precise float _335 = _319 * _333;
    precise float _336 = _322 * _333;
    precise float _337 = (-0.0) - _165;
    precise float _339 = (-0.0) - _167;
    precise float _340 = (-0.0) - _168;
    float _344 = inversesqrt(dot(vec3(_337, _339, _340), vec3(_337, _339, _340)));
    precise float _345 = _344 * _337;
    precise float _346 = _344 * _339;
    precise float _347 = _344 * _340;
    precise float _348 = _186 - TEXCOORD_1.x;
    precise float _349 = _187 - TEXCOORD_1.y;
    precise float _350 = _188 - TEXCOORD_1.z;
    precise float _351 = _348 * _327;
    precise float _352 = _349 * _328;
    precise float _353 = _352 + _351;
    precise float _354 = _350 * _329;
    precise float _355 = _354 + _353;
    precise float _356 = _348 * _334;
    precise float _357 = _349 * _335;
    precise float _358 = _357 + _356;
    precise float _359 = _350 * _336;
    precise float _360 = _359 + _358;
    precise float _361 = _348 * _345;
    precise float _362 = _349 * _346;
    precise float _363 = _362 + _361;
    precise float _364 = _350 * _347;
    precise float _365 = _364 + _363;
    precise float _366 = _267 * _355;
    precise float _367 = _272 * _360;
    precise float _368 = _367 + _366;
    precise float _369 = _277 * _365;
    precise float _370 = _369 + _368;
    precise float _371 = _282 * _355;
    precise float _372 = _287 * _360;
    precise float _373 = _372 + _371;
    precise float _374 = _292 * _365;
    precise float _375 = _374 + _373;
    precise float _376 = _297 * _355;
    precise float _377 = _302 * _360;
    precise float _378 = _377 + _376;
    precise float _379 = _307 * _365;
    precise float _380 = _379 + _378;
    precise float _381 = TEXCOORD_1.x + _370;
    precise float _382 = TEXCOORD_1.y + _375;
    precise float _383 = TEXCOORD_1.z + _380;
    precise float _384 = cbObjMatrix._m0[_205].x * _381;
    precise float _385 = _382 * cbObjMatrix._m0[_205].y;
    precise float _386 = _385 + _384;
    precise float _387 = _383 * cbObjMatrix._m0[_205].z;
    precise float _388 = _387 + _386;
    precise float _389 = 1.0 * cbObjMatrix._m0[_205].w;
    precise float _391 = _389 + _388;
    precise float _392 = cbObjMatrix._m0[_212].x * _381;
    precise float _393 = _382 * cbObjMatrix._m0[_212].y;
    precise float _394 = _393 + _392;
    precise float _395 = _383 * cbObjMatrix._m0[_212].z;
    precise float _396 = _395 + _394;
    precise float _397 = 1.0 * cbObjMatrix._m0[_212].w;
    precise float _398 = _397 + _396;
    precise float _399 = cbObjMatrix._m0[_219].x * _381;
    precise float _400 = _382 * cbObjMatrix._m0[_219].y;
    precise float _401 = _400 + _399;
    precise float _402 = _383 * cbObjMatrix._m0[_219].z;
    precise float _403 = _402 + _401;
    precise float _404 = 1.0 * cbObjMatrix._m0[_219].w;
    precise float _405 = _404 + _403;
    float _431 = (((-0.0) - cbObjMatrix._m0[_205].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_205].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_205].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _232, fma(cbSceneParam._m0[3u].y, _231, cbSceneParam._m0[3u].x * _230));
    float _434 = (((-0.0) - cbObjMatrix._m0[_212].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_212].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_212].y, cbObjMatrix._m0[_212].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _239, fma(cbSceneParam._m0[3u].y, _238, cbSceneParam._m0[3u].x * _237));
    float _437 = (((-0.0) - cbObjMatrix._m0[_219].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_219].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_219].y, cbObjMatrix._m0[_219].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _246, fma(cbSceneParam._m0[3u].y, _245, cbSceneParam._m0[3u].x * _244));
    float _441 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    float _442 = _441 * _431;
    float _443 = _441 * _434;
    float _444 = _441 * _437;
    float _447 = fma(_444, _329, fma(_443, _328, _442 * _327));
    float _450 = fma(_444, _336, fma(_443, _335, _442 * _334));
    float _453 = fma(_444, _347, fma(_443, _346, _442 * _345));
    float _457 = inversesqrt(dot(vec3(_447, _450, _453), vec3(_447, _450, _453)));
    float _458 = _457 * _447;
    float _459 = _457 * _450;
    float _460 = _457 * _453;
    float _479 = dot(vec3(_458, _459, _460), vec3(float(int(uint(_458 > 0.0) - uint(_458 < 0.0))), float(int(uint(_459 > 0.0) - uint(_459 < 0.0))), float(int(uint(_460 > 0.0) - uint(_460 < 0.0)))));
    float _493 = cbSceneParam._m0[3u].x - _391;
    float _494 = cbSceneParam._m0[3u].y - _398;
    float _495 = cbSceneParam._m0[3u].z - _405;
    float _504 = fma(_168, _329, fma(_167, _328, _327 * _165));
    float _507 = fma(_168, _336, fma(_167, _335, _334 * _165));
    float _510 = fma(_168, _347, fma(_167, _346, _345 * _165));
    float _513 = fma(_277, _510, fma(_272, _507, _504 * _267));
    float _516 = fma(_292, _510, fma(_287, _507, _504 * _282));
    float _519 = fma(_307, _510, fma(_302, _507, _504 * _297));
    float _522 = fma(_519, cbObjMatrix._m0[_205].z, fma(_516, cbObjMatrix._m0[_205].y, _513 * cbObjMatrix._m0[_205].x));
    float _525 = fma(_519, cbObjMatrix._m0[_212].z, fma(_516, cbObjMatrix._m0[_212].y, _513 * cbObjMatrix._m0[_212].x));
    float _528 = fma(_519, cbObjMatrix._m0[_219].z, fma(_516, cbObjMatrix._m0[_219].y, _513 * cbObjMatrix._m0[_219].x));
    float _530 = (-0.0) - _528;
    precise float _542 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _550 = _173 + 1u;
    uint _557 = _173 + 2u;
    precise float _564 = TEXCOORD_1.x * cbInstanceData._m0[_173].x;
    precise float _565 = TEXCOORD_1.y * cbInstanceData._m0[_173].y;
    precise float _566 = _565 + _564;
    precise float _567 = TEXCOORD_1.z * cbInstanceData._m0[_173].z;
    precise float _568 = _567 + _566;
    precise float _569 = 1.0 * cbInstanceData._m0[_173].w;
    precise float _570 = _569 + _568;
    precise float _571 = TEXCOORD_1.x * cbInstanceData._m0[_550].x;
    precise float _572 = TEXCOORD_1.y * cbInstanceData._m0[_550].y;
    precise float _573 = _572 + _571;
    precise float _574 = TEXCOORD_1.z * cbInstanceData._m0[_550].z;
    precise float _575 = _574 + _573;
    precise float _576 = 1.0 * cbInstanceData._m0[_550].w;
    precise float _577 = _576 + _575;
    precise float _578 = TEXCOORD_1.x * cbInstanceData._m0[_557].x;
    precise float _579 = TEXCOORD_1.y * cbInstanceData._m0[_557].y;
    precise float _580 = _579 + _578;
    precise float _581 = TEXCOORD_1.z * cbInstanceData._m0[_557].z;
    precise float _582 = _581 + _580;
    precise float _583 = 1.0 * cbInstanceData._m0[_557].w;
    precise float _584 = _583 + _582;
    precise float _585 = _391 - _570;
    precise float _586 = _398 - _577;
    precise float _587 = _405 - _584;
    precise float _588 = _585 * _585;
    precise float _589 = _586 * _586;
    precise float _590 = _588 + _589;
    precise float _591 = _587 * _587;
    precise float _592 = _590 + _591;
    precise float _594 = cbMtdParam._m0[9u].z * sqrt(_592);
    precise float _595 = _542 + _594;
    precise float _596 = cbPerFrame._m0[22u].x + _595;
    uint _597 = _179.w;
    float _598;
    float _600;
    float _602;
    if (_182 == 0u)
    {
        _598 = 0.0;
        _600 = 0.0;
        _602 = 0.0;
    }
    else
    {
        uint _817 = _179.z;
        precise float _599;
        precise float _601;
        precise float _603;
        float _960;
        float _962;
        float _964;
        float _818 = 0.0;
        float _819 = 0.0;
        float _820 = 0.0;
        uint _821 = _817;
        uint _823 = 0u;
        float _859;
        float _878;
        vec4 _892;
        float _893;
        float _894;
        float _908;
        float _909;
        float _910;
        float _927;
        float _928;
        float _929;
        float _930;
        bool _931;
        bool _932;
        bool _933;
        precise float _934;
        precise float _935;
        precise float _936;
        float _937;
        float _938;
        float _939;
        precise float _940;
        bool _943;
        for (;;)
        {
            uint _825 = _821 & 255u;
            uint _827 = _825 * 24u;
            uvec3 _837 = uvec3(texelFetch(g_forceParam, int(_827)).x, texelFetch(g_forceParam, int(_827 + 1u)).x, texelFetch(g_forceParam, int(_827 + 2u)).x);
            uint _842 = (_825 * 24u) + 4u;
            vec4 _855 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_842)).x, texelFetch(g_forceParam, int(_842 + 1u)).x, texelFetch(g_forceParam, int(_842 + 2u)).x, texelFetch(g_forceParam, int(_842 + 3u)).x));
            _859 = _855.w;
            uint _861 = (_825 * 24u) + 8u;
            vec4 _874 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_861)).x, texelFetch(g_forceParam, int(_861 + 1u)).x, texelFetch(g_forceParam, int(_861 + 2u)).x, texelFetch(g_forceParam, int(_861 + 3u)).x));
            _878 = _874.w;
            uint _881 = (_825 * 24u) + 12u;
            _892 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_881)).x, texelFetch(g_forceParam, int(_881 + 1u)).x, _887, texelFetch(g_forceParam, int(_881 + 3u)).x));
            _893 = _892.x;
            _894 = _892.w;
            uint _897 = (_825 * 24u) + 16u;
            vec3 _907 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_897)).x, texelFetch(g_forceParam, int(_897 + 1u)).x, texelFetch(g_forceParam, int(_897 + 2u)).x));
            _908 = _907.x;
            _909 = _907.y;
            _910 = _907.z;
            uint _913 = (_825 * 24u) + 20u;
            vec4 _926 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_913)).x, texelFetch(g_forceParam, int(_913 + 1u)).x, texelFetch(g_forceParam, int(_913 + 2u)).x, texelFetch(g_forceParam, int(_913 + 3u)).x));
            _927 = _926.x;
            _928 = _926.y;
            _929 = _926.z;
            _930 = _926.w;
            _931 = _837.x == 1u;
            _932 = _837.y == 1u;
            _933 = _837.z == 1u;
            _934 = _570 - _855.x;
            _935 = _577 - _855.y;
            _936 = _584 - _855.z;
            _937 = _931 ? _874.x : _934;
            _938 = _931 ? _874.y : _935;
            _939 = _931 ? _874.z : _936;
            _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
            _943 = _940 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_943)
            {
                precise float _945 = _934 * _934;
                precise float _946 = _935 * _935;
                precise float _947 = _945 + _946;
                precise float _948 = _936 * _936;
                precise float _949 = _948 + _947;
                float _950 = sqrt(_949);
                float _951 = inversesqrt(_940);
                precise float _952 = _937 * _951;
                precise float _953 = _938 * _951;
                precise float _954 = _939 * _951;
                precise float _957 = _950 / (isnan(0.001000000047497451305389404296875) ? _892.y : (isnan(_892.y) ? 0.001000000047497451305389404296875 : max(_892.y, 0.001000000047497451305389404296875)));
                precise float _958 = 1.0 - _957;
                float _1121 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
                float _959 = isnan(1.0) ? _1121 : (isnan(_1121) ? 1.0 : min(_1121, 1.0));
                float _985;
                if (_933)
                {
                    float _972 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
                    precise float _973 = _934 * _972;
                    precise float _974 = _935 * _972;
                    precise float _975 = _936 * _972;
                    precise float _979 = dot(vec3(_952, _953, _954), vec3(_973, _974, _975)) * 0.800000011920928955078125;
                    precise float _981 = _979 + 0.20000000298023223876953125;
                    float _1132 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
                    precise float _984 = _959 * (isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0)));
                    _985 = _984;
                }
                else
                {
                    _985 = _959;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_985 > 0.0)
                {
                    bool _988 = _931 && (!_933);
                    precise float _990 = _950 * (-4.0);
                    precise float _994 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _893 : (isnan(_893) ? 0.001000000047497451305389404296875 : max(_893, 0.001000000047497451305389404296875)));
                    precise float _996 = dot(vec2(_952, _954), vec2(_934, _936));
                    precise float _1000 = _994 * _996;
                    precise float _1001 = float(_988) * _1000;
                    precise float _1002 = _596 * _994;
                    precise float _1003 = _1002 - _1001;
                    precise float _1004 = (_988 ? 0.0 : _990) + _1003;
                    precise float _1006 = _878 * sin(_1004);
                    precise float _1007 = _953 * 0.0;
                    precise float _1008 = _1007 - _954;
                    precise float _1009 = _954 * 0.0;
                    precise float _1010 = _952 * 0.0;
                    precise float _1011 = _1009 - _1010;
                    precise float _1012 = _952 - _1007;
                    precise float _1013 = _894 * _1006;
                    float _1014 = _931 ? _1013 : 0.0;
                    float _1056;
                    if (_932)
                    {
                        precise float _1017 = _908 * 2.0;
                        precise float _1019 = _928 + _929;
                        precise float _1020 = _930 + _1019;
                        precise float _1022 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _908 : (isnan(_908) ? 0.001000000047497451305389404296875 : max(_908, 0.001000000047497451305389404296875)));
                        precise float _1023 = _927 * _1022;
                        precise float _1024 = (-0.0) - _952;
                        precise float _1028 = dot(vec2(_954, _1024), vec2(_934, _936)) / _1017;
                        precise float _1029 = (-0.0) - _1028;
                        float _1032 = fract(abs(_1028));
                        precise float _1033 = (-0.0) - _1032;
                        precise float _1035 = _1017 * ((_1028 >= _1029) ? _1032 : _1033);
                        precise float _1036 = _1035 * 6.283184051513671875;
                        precise float _1037 = _1036 / _1017;
                        precise float _1039 = (isnan(5.0) ? _908 : (isnan(_908) ? 5.0 : min(_908, 5.0))) * sin(_1037);
                        precise float _1040 = _996 + _1039;
                        precise float _1041 = _908 * 0.25;
                        precise float _1043 = _596 * _927;
                        precise float _1044 = _1043 - _1041;
                        precise float _1045 = _1044 - _1040;
                        precise float _1046 = _927 * _1020;
                        precise float _1048 = _1045 / (isnan(0.001000000047497451305389404296875) ? _1046 : (isnan(_1046) ? 0.001000000047497451305389404296875 : max(_1046, 0.001000000047497451305389404296875)));
                        float _1049 = fract(_1048);
                        precise float _1051 = 1.0 - _1049;
                        float _1052 = (_1048 < 0.0) ? _1051 : _1049;
                        precise float _1053 = _1019 / _1020;
                        precise float _1054 = _928 / _1020;
                        float _1075;
                        if (_1052 < _1054)
                        {
                            precise float _1073 = _1052 / _1054;
                            _1075 = _1073;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_1052 < _1053)
                            {
                                precise float _1085 = _1052 - _1054;
                                precise float _1086 = _1053 - _1054;
                                precise float _1087 = _1085 / _1086;
                                precise float _1076 = 1.0 - _1087;
                                frontier_phi_14_13_ladder = _1076;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1075 = frontier_phi_14_13_ladder;
                        }
                        precise float _1077 = _910 * _1075;
                        precise float _1078 = _1022 * _996;
                        precise float _1079 = _596 * _1023;
                        precise float _1080 = _1079 - _1078;
                        precise float _1082 = _909 + sin(_1080);
                        precise float _1084 = _1077 * abs(_1082);
                        precise float _1057 = _1084 + 0.0;
                        _1056 = _1057;
                    }
                    else
                    {
                        _1056 = 0.0;
                    }
                    precise float _1058 = _859 + _1006;
                    precise float _1059 = _1058 + _1056;
                    precise float _1060 = _952 * _1059;
                    precise float _1061 = _953 * _1059;
                    precise float _1062 = _954 * _1059;
                    precise float _1063 = _1008 * _1014;
                    precise float _1064 = _1011 * _1014;
                    precise float _1065 = _1012 * _1014;
                    precise float _1066 = _1063 + _1060;
                    precise float _1067 = _1064 + _1061;
                    precise float _1068 = _1065 + _1062;
                    precise float _1069 = _985 * _1066;
                    precise float _1070 = _985 * _1067;
                    precise float _1071 = _985 * _1068;
                    precise float _961 = _1069 * 0.0500000007450580596923828125;
                    precise float _963 = _1070 * 0.0500000007450580596923828125;
                    precise float _965 = _1071 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _961;
                    frontier_phi_5_pred_7_ladder_1 = _963;
                    frontier_phi_5_pred_7_ladder_2 = _965;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _960 = frontier_phi_5_pred;
            _962 = frontier_phi_5_pred_1;
            _964 = frontier_phi_5_pred_2;
            _599 = _818 + _960;
            _601 = _819 + _962;
            _603 = _820 + _964;
            uint _824 = _823 + 1u;
            if (_824 == _182)
            {
                break;
            }
            else
            {
                _818 = _599;
                _819 = _601;
                _820 = _603;
                _821 = (_823 != 3u) ? (_821 >> 8u) : _597;
                _823 = _824;
                continue;
            }
        }
        _598 = _599;
        _600 = _601;
        _602 = _603;
    }
    precise float _604 = _598 * _598;
    precise float _605 = _600 * _600;
    precise float _606 = _604 + _605;
    precise float _607 = _602 * _602;
    precise float _608 = _606 + _607;
    float _609 = sqrt(_608);
    bool _610 = _609 < 0.00011000000085914507508277893066406;
    float _615 = inversesqrt(dot(vec3(cbInstanceData._m0[_173].x, cbInstanceData._m0[_550].x, cbInstanceData._m0[_557].x), vec3(cbInstanceData._m0[_173].x, cbInstanceData._m0[_550].x, cbInstanceData._m0[_557].x)));
    precise float _616 = cbInstanceData._m0[_173].x * _615;
    precise float _617 = cbInstanceData._m0[_550].x * _615;
    precise float _618 = cbInstanceData._m0[_557].x * _615;
    float _622 = inversesqrt(dot(vec3(cbInstanceData._m0[_173].y, cbInstanceData._m0[_550].y, cbInstanceData._m0[_557].y), vec3(cbInstanceData._m0[_173].y, cbInstanceData._m0[_550].y, cbInstanceData._m0[_557].y)));
    precise float _623 = cbInstanceData._m0[_173].y * _622;
    precise float _624 = cbInstanceData._m0[_550].y * _622;
    precise float _625 = cbInstanceData._m0[_557].y * _622;
    float _629 = inversesqrt(dot(vec3(cbInstanceData._m0[_173].z, cbInstanceData._m0[_550].z, cbInstanceData._m0[_557].z), vec3(cbInstanceData._m0[_173].z, cbInstanceData._m0[_550].z, cbInstanceData._m0[_557].z)));
    precise float _630 = cbInstanceData._m0[_173].z * _629;
    precise float _631 = cbInstanceData._m0[_550].z * _629;
    precise float _632 = cbInstanceData._m0[_557].z * _629;
    precise float _633 = _616 * 0.0;
    precise float _634 = 1.0 * _623;
    precise float _635 = _634 + _633;
    precise float _636 = 0.0 * _630;
    precise float _637 = _636 + _635;
    precise float _638 = _617 * 0.0;
    precise float _639 = 1.0 * _624;
    precise float _640 = _639 + _638;
    precise float _641 = 0.0 * _631;
    precise float _642 = _641 + _640;
    precise float _643 = _618 * 0.0;
    precise float _644 = 1.0 * _625;
    precise float _645 = _644 + _643;
    precise float _646 = 0.0 * _632;
    precise float _647 = _646 + _645;
    float _651 = inversesqrt(dot(vec3(_598, _600, _602), vec3(_598, _600, _602)));
    precise float _652 = _598 * _651;
    precise float _653 = _600 * _651;
    precise float _654 = _602 * _651;
    precise float _655 = _642 * _654;
    precise float _656 = _647 * _653;
    precise float _657 = _655 - _656;
    precise float _658 = _647 * _652;
    precise float _659 = _637 * _654;
    precise float _660 = _658 - _659;
    precise float _661 = _637 * _653;
    precise float _662 = _642 * _652;
    precise float _663 = _661 - _662;
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    precise float _668 = _667 * _657;
    precise float _669 = _667 * _660;
    precise float _670 = _667 * _663;
    precise float _671 = _609 + 1.0;
    precise float _673 = cbMtdParam._m0[9u].w * log2(_671);
    precise float _674 = dot(vec3(_668, _669, _670), vec3(_585, _586, _587));
    precise float _677 = _668 * _674;
    precise float _678 = _669 * _674;
    precise float _679 = _670 * _674;
    precise float _680 = _570 + _677;
    precise float _681 = _577 + _678;
    precise float _682 = _584 + _679;
    precise float _683 = _391 - _680;
    precise float _684 = _398 - _681;
    precise float _685 = _405 - _682;
    precise float _686 = _669 * _685;
    precise float _687 = _670 * _684;
    precise float _688 = _686 - _687;
    precise float _689 = _670 * _683;
    precise float _690 = _668 * _685;
    precise float _691 = _689 - _690;
    precise float _692 = _668 * _684;
    precise float _693 = _669 * _683;
    precise float _694 = _692 - _693;
    float _695 = sin(_673);
    float _696 = cos(_673);
    precise float _697 = _683 * _696;
    precise float _698 = _684 * _696;
    precise float _699 = _685 * _696;
    precise float _700 = _695 * _688;
    precise float _701 = _695 * _691;
    precise float _702 = _695 * _694;
    precise float _703 = _697 + _700;
    precise float _704 = _698 + _701;
    precise float _705 = _702 + _699;
    precise float _706 = _680 + _703;
    precise float _707 = _681 + _704;
    precise float _708 = _682 + _705;
    precise float _709 = _706 - _391;
    precise float _710 = _707 - _398;
    precise float _711 = _708 - _405;
    precise float _715 = _391 + (_610 ? 0.0 : _709);
    precise float _716 = _398 + (_610 ? 0.0 : _710);
    precise float _717 = _405 + (_610 ? 0.0 : _711);
    precise float _718 = _715 - cbSceneParam._m0[3u].x;
    precise float _719 = _716 - cbSceneParam._m0[3u].y;
    precise float _720 = _717 - cbSceneParam._m0[3u].z;
    precise float _748 = cbSceneParam._m0[24u].x * _718;
    precise float _749 = _719 * cbSceneParam._m0[24u].y;
    precise float _750 = _749 + _748;
    precise float _751 = _720 * cbSceneParam._m0[24u].z;
    precise float _752 = _751 + _750;
    precise float _753 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _754 = _753 + _752;
    precise float _755 = cbSceneParam._m0[25u].x * _718;
    precise float _756 = _719 * cbSceneParam._m0[25u].y;
    precise float _757 = _756 + _755;
    precise float _758 = _720 * cbSceneParam._m0[25u].z;
    precise float _759 = _758 + _757;
    precise float _760 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _761 = _760 + _759;
    precise float _762 = cbSceneParam._m0[26u].x * _718;
    precise float _763 = _719 * cbSceneParam._m0[26u].y;
    precise float _764 = _763 + _762;
    precise float _765 = _720 * cbSceneParam._m0[26u].z;
    precise float _766 = _765 + _764;
    precise float _767 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _768 = _767 + _766;
    precise float _769 = _718 * cbSceneParam._m0[27u].x;
    precise float _770 = _719 * cbSceneParam._m0[27u].y;
    precise float _771 = _770 + _769;
    precise float _772 = _720 * cbSceneParam._m0[27u].z;
    precise float _773 = _772 + _771;
    precise float _774 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _775 = _774 + _773;
    gl_Position.x = _754;
    gl_Position.y = _761;
    gl_Position.z = _768;
    gl_Position.w = _775;
    NORMAL_1.x = _522;
    NORMAL_1.y = _525;
    NORMAL_1.z = _528;
    NORMAL_1.w = float(_196);
    TANGENT_1.x = (-0.0) - (_522 * _525);
    TANGENT_1.y = (_522 * _522) - (_528 * _530);
    TANGENT_1.z = _525 * _530;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = (((_457 * (_453 + _447)) / _479) + 1.0) * 0.5;
    TEXCOORD_2.w = (((_457 * (_453 - _447)) / _479) + 1.0) * 0.5;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_13 = sqrt(((_493 * _493) + (_494 * _494)) + (_495 * _495));
    gl_ClipDistance[0u] = dot(vec4(_754, _761, _768, _775), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_754, _761, _768, _775), vec4(cbInstanceData._m0[_198 + 3u]));
}


