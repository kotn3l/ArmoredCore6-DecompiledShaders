#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_3;

uint _860;

void main()
{
    uint _75 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    precise float _160 = float(NORMAL.x) + (-127.0);
    precise float _162 = float(NORMAL.y) + (-127.0);
    precise float _163 = float(NORMAL.z) + (-127.0);
    precise float _164 = _160 * 0.0078740157186985015869140625;
    precise float _166 = _162 * 0.0078740157186985015869140625;
    precise float _167 = _163 * 0.0078740157186985015869140625;
    uint _172 = _75 * 13u;
    uvec4 _178 = floatBitsToUint(cbInstanceData._m0[_172 + 7u]);
    uint _181 = min(_178.y, 8u);
    precise float _185 = POSITION.x + 0.0;
    precise float _186 = POSITION.y + 0.0;
    precise float _187 = POSITION.z + 0.0;
    uint _192 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _75;
    uvec4 _194 = texelFetch(g_InstanceIndexBuffer, int(_192));
    uint _195 = _194.x;
    uint _204 = (floatBitsToUint(cbInstanceData._m0[(_195 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _211 = _204 + 1u;
    uint _218 = _204 + 2u;
    float _228 = inversesqrt(dot(vec3(cbObjMatrix._m0[_204].x, cbObjMatrix._m0[_211].x, cbObjMatrix._m0[_218].x), vec3(cbObjMatrix._m0[_204].x, cbObjMatrix._m0[_211].x, cbObjMatrix._m0[_218].x)));
    precise float _229 = cbObjMatrix._m0[_204].x * _228;
    precise float _230 = cbObjMatrix._m0[_211].x * _228;
    precise float _231 = cbObjMatrix._m0[_218].x * _228;
    float _235 = inversesqrt(dot(vec3(cbObjMatrix._m0[_204].y, cbObjMatrix._m0[_211].y, cbObjMatrix._m0[_218].y), vec3(cbObjMatrix._m0[_204].y, cbObjMatrix._m0[_211].y, cbObjMatrix._m0[_218].y)));
    precise float _236 = cbObjMatrix._m0[_204].y * _235;
    precise float _237 = cbObjMatrix._m0[_211].y * _235;
    precise float _238 = cbObjMatrix._m0[_218].y * _235;
    float _242 = inversesqrt(dot(vec3(cbObjMatrix._m0[_204].z, cbObjMatrix._m0[_211].z, cbObjMatrix._m0[_218].z), vec3(cbObjMatrix._m0[_204].z, cbObjMatrix._m0[_211].z, cbObjMatrix._m0[_218].z)));
    precise float _243 = cbObjMatrix._m0[_204].z * _242;
    precise float _244 = cbObjMatrix._m0[_211].z * _242;
    precise float _245 = cbObjMatrix._m0[_218].z * _242;
    precise float _262 = _229 * cbSceneParam._m0[5u].x;
    precise float _263 = _230 * cbSceneParam._m0[5u].y;
    precise float _264 = _263 + _262;
    precise float _265 = _231 * cbSceneParam._m0[5u].z;
    precise float _266 = _265 + _264;
    precise float _267 = _229 * cbSceneParam._m0[6u].x;
    precise float _268 = _230 * cbSceneParam._m0[6u].y;
    precise float _269 = _268 + _267;
    precise float _270 = _231 * cbSceneParam._m0[6u].z;
    precise float _271 = _270 + _269;
    precise float _272 = _229 * cbSceneParam._m0[7u].x;
    precise float _273 = _230 * cbSceneParam._m0[7u].y;
    precise float _274 = _273 + _272;
    precise float _275 = _231 * cbSceneParam._m0[7u].z;
    precise float _276 = _275 + _274;
    precise float _277 = _236 * cbSceneParam._m0[5u].x;
    precise float _278 = _237 * cbSceneParam._m0[5u].y;
    precise float _279 = _278 + _277;
    precise float _280 = _238 * cbSceneParam._m0[5u].z;
    precise float _281 = _280 + _279;
    precise float _282 = _236 * cbSceneParam._m0[6u].x;
    precise float _283 = _237 * cbSceneParam._m0[6u].y;
    precise float _284 = _283 + _282;
    precise float _285 = _238 * cbSceneParam._m0[6u].z;
    precise float _286 = _285 + _284;
    precise float _287 = _236 * cbSceneParam._m0[7u].x;
    precise float _288 = _237 * cbSceneParam._m0[7u].y;
    precise float _289 = _288 + _287;
    precise float _290 = _238 * cbSceneParam._m0[7u].z;
    precise float _291 = _290 + _289;
    precise float _292 = _243 * cbSceneParam._m0[5u].x;
    precise float _293 = _244 * cbSceneParam._m0[5u].y;
    precise float _294 = _293 + _292;
    precise float _295 = _245 * cbSceneParam._m0[5u].z;
    precise float _296 = _295 + _294;
    precise float _297 = _243 * cbSceneParam._m0[6u].x;
    precise float _298 = _244 * cbSceneParam._m0[6u].y;
    precise float _299 = _298 + _297;
    precise float _300 = _245 * cbSceneParam._m0[6u].z;
    precise float _301 = _300 + _299;
    precise float _302 = _243 * cbSceneParam._m0[7u].x;
    precise float _303 = _244 * cbSceneParam._m0[7u].y;
    precise float _304 = _303 + _302;
    precise float _305 = _245 * cbSceneParam._m0[7u].z;
    precise float _306 = _305 + _304;
    precise float _307 = _166 * 0.0;
    precise float _308 = _307 - _167;
    precise float _309 = _167 * 0.0;
    precise float _310 = _164 * 0.0;
    precise float _311 = _309 - _310;
    precise float _312 = _164 - _307;
    precise float _313 = _167 * _311;
    precise float _314 = _166 * _312;
    precise float _315 = _313 - _314;
    precise float _316 = _164 * _312;
    precise float _317 = _167 * _308;
    precise float _318 = _316 - _317;
    precise float _319 = _166 * _308;
    precise float _320 = _164 * _311;
    precise float _321 = _319 - _320;
    float _325 = inversesqrt(dot(vec3(_308, _311, _312), vec3(_308, _311, _312)));
    precise float _326 = _308 * _325;
    precise float _327 = _311 * _325;
    precise float _328 = _312 * _325;
    float _332 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    precise float _333 = _315 * _332;
    precise float _334 = _318 * _332;
    precise float _335 = _321 * _332;
    precise float _336 = (-0.0) - _164;
    precise float _338 = (-0.0) - _166;
    precise float _339 = (-0.0) - _167;
    float _343 = inversesqrt(dot(vec3(_336, _338, _339), vec3(_336, _338, _339)));
    precise float _344 = _343 * _336;
    precise float _345 = _343 * _338;
    precise float _346 = _343 * _339;
    precise float _347 = _185 - TEXCOORD_1.x;
    precise float _348 = _186 - TEXCOORD_1.y;
    precise float _349 = _187 - TEXCOORD_1.z;
    precise float _350 = _347 * _326;
    precise float _351 = _348 * _327;
    precise float _352 = _351 + _350;
    precise float _353 = _349 * _328;
    precise float _354 = _353 + _352;
    precise float _355 = _347 * _333;
    precise float _356 = _348 * _334;
    precise float _357 = _356 + _355;
    precise float _358 = _349 * _335;
    precise float _359 = _358 + _357;
    precise float _360 = _347 * _344;
    precise float _361 = _348 * _345;
    precise float _362 = _361 + _360;
    precise float _363 = _349 * _346;
    precise float _364 = _363 + _362;
    precise float _365 = _266 * _354;
    precise float _366 = _271 * _359;
    precise float _367 = _366 + _365;
    precise float _368 = _276 * _364;
    precise float _369 = _368 + _367;
    precise float _370 = _281 * _354;
    precise float _371 = _286 * _359;
    precise float _372 = _371 + _370;
    precise float _373 = _291 * _364;
    precise float _374 = _373 + _372;
    precise float _375 = _296 * _354;
    precise float _376 = _301 * _359;
    precise float _377 = _376 + _375;
    precise float _378 = _306 * _364;
    precise float _379 = _378 + _377;
    precise float _380 = TEXCOORD_1.x + _369;
    precise float _381 = TEXCOORD_1.y + _374;
    precise float _382 = TEXCOORD_1.z + _379;
    precise float _383 = cbObjMatrix._m0[_204].x * _380;
    precise float _384 = _381 * cbObjMatrix._m0[_204].y;
    precise float _385 = _384 + _383;
    precise float _386 = _382 * cbObjMatrix._m0[_204].z;
    precise float _387 = _386 + _385;
    precise float _388 = 1.0 * cbObjMatrix._m0[_204].w;
    precise float _390 = _388 + _387;
    precise float _391 = cbObjMatrix._m0[_211].x * _380;
    precise float _392 = _381 * cbObjMatrix._m0[_211].y;
    precise float _393 = _392 + _391;
    precise float _394 = _382 * cbObjMatrix._m0[_211].z;
    precise float _395 = _394 + _393;
    precise float _396 = 1.0 * cbObjMatrix._m0[_211].w;
    precise float _397 = _396 + _395;
    precise float _398 = cbObjMatrix._m0[_218].x * _380;
    precise float _399 = _381 * cbObjMatrix._m0[_218].y;
    precise float _400 = _399 + _398;
    precise float _401 = _382 * cbObjMatrix._m0[_218].z;
    precise float _402 = _401 + _400;
    precise float _403 = 1.0 * cbObjMatrix._m0[_218].w;
    precise float _404 = _403 + _402;
    float _430 = (((-0.0) - cbObjMatrix._m0[_204].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_204].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_204].y, cbObjMatrix._m0[_204].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _231, fma(cbSceneParam._m0[3u].y, _230, cbSceneParam._m0[3u].x * _229));
    float _433 = (((-0.0) - cbObjMatrix._m0[_211].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_211].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_211].y, cbObjMatrix._m0[_211].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _238, fma(cbSceneParam._m0[3u].y, _237, cbSceneParam._m0[3u].x * _236));
    float _436 = (((-0.0) - cbObjMatrix._m0[_218].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_218].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_218].y, cbObjMatrix._m0[_218].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _245, fma(cbSceneParam._m0[3u].y, _244, cbSceneParam._m0[3u].x * _243));
    float _440 = inversesqrt(dot(vec3(_430, _433, _436), vec3(_430, _433, _436)));
    float _441 = _440 * _430;
    float _442 = _440 * _433;
    float _443 = _440 * _436;
    float _446 = fma(_443, _328, fma(_442, _327, _441 * _326));
    float _449 = fma(_443, _335, fma(_442, _334, _441 * _333));
    float _452 = fma(_443, _346, fma(_442, _345, _441 * _344));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _478 = dot(vec3(_457, _458, _459), vec3(float(int(uint(_457 > 0.0) - uint(_457 < 0.0))), float(int(uint(_458 > 0.0) - uint(_458 < 0.0))), float(int(uint(_459 > 0.0) - uint(_459 < 0.0)))));
    float _494 = fma(_167, _328, fma(_166, _327, _326 * _164));
    float _497 = fma(_167, _335, fma(_166, _334, _333 * _164));
    float _500 = fma(_167, _346, fma(_166, _345, _344 * _164));
    float _503 = fma(_276, _500, fma(_271, _497, _494 * _266));
    float _506 = fma(_291, _500, fma(_286, _497, _494 * _281));
    float _509 = fma(_306, _500, fma(_301, _497, _494 * _296));
    float _512 = fma(_509, cbObjMatrix._m0[_204].z, fma(_506, cbObjMatrix._m0[_204].y, _503 * cbObjMatrix._m0[_204].x));
    float _515 = fma(_509, cbObjMatrix._m0[_211].z, fma(_506, cbObjMatrix._m0[_211].y, _503 * cbObjMatrix._m0[_211].x));
    float _518 = fma(_509, cbObjMatrix._m0[_218].z, fma(_506, cbObjMatrix._m0[_218].y, _503 * cbObjMatrix._m0[_218].x));
    float _520 = (-0.0) - _518;
    precise float _532 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _540 = _172 + 1u;
    uint _547 = _172 + 2u;
    precise float _554 = TEXCOORD_1.x * cbInstanceData._m0[_172].x;
    precise float _555 = TEXCOORD_1.y * cbInstanceData._m0[_172].y;
    precise float _556 = _555 + _554;
    precise float _557 = TEXCOORD_1.z * cbInstanceData._m0[_172].z;
    precise float _558 = _557 + _556;
    precise float _559 = 1.0 * cbInstanceData._m0[_172].w;
    precise float _560 = _559 + _558;
    precise float _561 = TEXCOORD_1.x * cbInstanceData._m0[_540].x;
    precise float _562 = TEXCOORD_1.y * cbInstanceData._m0[_540].y;
    precise float _563 = _562 + _561;
    precise float _564 = TEXCOORD_1.z * cbInstanceData._m0[_540].z;
    precise float _565 = _564 + _563;
    precise float _566 = 1.0 * cbInstanceData._m0[_540].w;
    precise float _567 = _566 + _565;
    precise float _568 = TEXCOORD_1.x * cbInstanceData._m0[_547].x;
    precise float _569 = TEXCOORD_1.y * cbInstanceData._m0[_547].y;
    precise float _570 = _569 + _568;
    precise float _571 = TEXCOORD_1.z * cbInstanceData._m0[_547].z;
    precise float _572 = _571 + _570;
    precise float _573 = 1.0 * cbInstanceData._m0[_547].w;
    precise float _574 = _573 + _572;
    precise float _575 = _390 - _560;
    precise float _576 = _397 - _567;
    precise float _577 = _404 - _574;
    precise float _578 = _575 * _575;
    precise float _579 = _576 * _576;
    precise float _580 = _578 + _579;
    precise float _581 = _577 * _577;
    precise float _582 = _580 + _581;
    precise float _584 = cbMtdParam._m0[9u].z * sqrt(_582);
    precise float _585 = _532 + _584;
    precise float _586 = cbPerFrame._m0[22u].x + _585;
    uint _587 = _178.w;
    float _588;
    float _590;
    float _592;
    if (_181 == 0u)
    {
        _588 = 0.0;
        _590 = 0.0;
        _592 = 0.0;
    }
    else
    {
        uint _790 = _178.z;
        precise float _589;
        precise float _591;
        precise float _593;
        float _933;
        float _935;
        float _937;
        float _791 = 0.0;
        float _792 = 0.0;
        float _793 = 0.0;
        uint _794 = _790;
        uint _796 = 0u;
        float _832;
        float _851;
        vec4 _865;
        float _866;
        float _867;
        float _881;
        float _882;
        float _883;
        float _900;
        float _901;
        float _902;
        float _903;
        bool _904;
        bool _905;
        bool _906;
        precise float _907;
        precise float _908;
        precise float _909;
        float _910;
        float _911;
        float _912;
        precise float _913;
        bool _916;
        for (;;)
        {
            uint _798 = _794 & 255u;
            uint _800 = _798 * 24u;
            uvec3 _810 = uvec3(texelFetch(g_forceParam, int(_800)).x, texelFetch(g_forceParam, int(_800 + 1u)).x, texelFetch(g_forceParam, int(_800 + 2u)).x);
            uint _815 = (_798 * 24u) + 4u;
            vec4 _828 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_815)).x, texelFetch(g_forceParam, int(_815 + 1u)).x, texelFetch(g_forceParam, int(_815 + 2u)).x, texelFetch(g_forceParam, int(_815 + 3u)).x));
            _832 = _828.w;
            uint _834 = (_798 * 24u) + 8u;
            vec4 _847 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_834)).x, texelFetch(g_forceParam, int(_834 + 1u)).x, texelFetch(g_forceParam, int(_834 + 2u)).x, texelFetch(g_forceParam, int(_834 + 3u)).x));
            _851 = _847.w;
            uint _854 = (_798 * 24u) + 12u;
            _865 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_854)).x, texelFetch(g_forceParam, int(_854 + 1u)).x, _860, texelFetch(g_forceParam, int(_854 + 3u)).x));
            _866 = _865.x;
            _867 = _865.w;
            uint _870 = (_798 * 24u) + 16u;
            vec3 _880 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_870)).x, texelFetch(g_forceParam, int(_870 + 1u)).x, texelFetch(g_forceParam, int(_870 + 2u)).x));
            _881 = _880.x;
            _882 = _880.y;
            _883 = _880.z;
            uint _886 = (_798 * 24u) + 20u;
            vec4 _899 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_886)).x, texelFetch(g_forceParam, int(_886 + 1u)).x, texelFetch(g_forceParam, int(_886 + 2u)).x, texelFetch(g_forceParam, int(_886 + 3u)).x));
            _900 = _899.x;
            _901 = _899.y;
            _902 = _899.z;
            _903 = _899.w;
            _904 = _810.x == 1u;
            _905 = _810.y == 1u;
            _906 = _810.z == 1u;
            _907 = _560 - _828.x;
            _908 = _567 - _828.y;
            _909 = _574 - _828.z;
            _910 = _904 ? _847.x : _907;
            _911 = _904 ? _847.y : _908;
            _912 = _904 ? _847.z : _909;
            _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
            _916 = _913 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_916)
            {
                precise float _918 = _907 * _907;
                precise float _919 = _908 * _908;
                precise float _920 = _918 + _919;
                precise float _921 = _909 * _909;
                precise float _922 = _921 + _920;
                float _923 = sqrt(_922);
                float _924 = inversesqrt(_913);
                precise float _925 = _910 * _924;
                precise float _926 = _911 * _924;
                precise float _927 = _912 * _924;
                precise float _930 = _923 / (isnan(0.001000000047497451305389404296875) ? _865.y : (isnan(_865.y) ? 0.001000000047497451305389404296875 : max(_865.y, 0.001000000047497451305389404296875)));
                precise float _931 = 1.0 - _930;
                float _1094 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
                float _932 = isnan(1.0) ? _1094 : (isnan(_1094) ? 1.0 : min(_1094, 1.0));
                float _958;
                if (_906)
                {
                    float _945 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
                    precise float _946 = _907 * _945;
                    precise float _947 = _908 * _945;
                    precise float _948 = _909 * _945;
                    precise float _952 = dot(vec3(_925, _926, _927), vec3(_946, _947, _948)) * 0.800000011920928955078125;
                    precise float _954 = _952 + 0.20000000298023223876953125;
                    float _1105 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
                    precise float _957 = _932 * (isnan(1.0) ? _1105 : (isnan(_1105) ? 1.0 : min(_1105, 1.0)));
                    _958 = _957;
                }
                else
                {
                    _958 = _932;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_958 > 0.0)
                {
                    bool _961 = _904 && (!_906);
                    precise float _963 = _923 * (-4.0);
                    precise float _967 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _866 : (isnan(_866) ? 0.001000000047497451305389404296875 : max(_866, 0.001000000047497451305389404296875)));
                    precise float _969 = dot(vec2(_925, _927), vec2(_907, _909));
                    precise float _973 = _967 * _969;
                    precise float _974 = float(_961) * _973;
                    precise float _975 = _586 * _967;
                    precise float _976 = _975 - _974;
                    precise float _977 = (_961 ? 0.0 : _963) + _976;
                    precise float _979 = _851 * sin(_977);
                    precise float _980 = _926 * 0.0;
                    precise float _981 = _980 - _927;
                    precise float _982 = _927 * 0.0;
                    precise float _983 = _925 * 0.0;
                    precise float _984 = _982 - _983;
                    precise float _985 = _925 - _980;
                    precise float _986 = _867 * _979;
                    float _987 = _904 ? _986 : 0.0;
                    float _1029;
                    if (_905)
                    {
                        precise float _990 = _881 * 2.0;
                        precise float _992 = _901 + _902;
                        precise float _993 = _903 + _992;
                        precise float _995 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _881 : (isnan(_881) ? 0.001000000047497451305389404296875 : max(_881, 0.001000000047497451305389404296875)));
                        precise float _996 = _900 * _995;
                        precise float _997 = (-0.0) - _925;
                        precise float _1001 = dot(vec2(_927, _997), vec2(_907, _909)) / _990;
                        precise float _1002 = (-0.0) - _1001;
                        float _1005 = fract(abs(_1001));
                        precise float _1006 = (-0.0) - _1005;
                        precise float _1008 = _990 * ((_1001 >= _1002) ? _1005 : _1006);
                        precise float _1009 = _1008 * 6.283184051513671875;
                        precise float _1010 = _1009 / _990;
                        precise float _1012 = (isnan(5.0) ? _881 : (isnan(_881) ? 5.0 : min(_881, 5.0))) * sin(_1010);
                        precise float _1013 = _969 + _1012;
                        precise float _1014 = _881 * 0.25;
                        precise float _1016 = _586 * _900;
                        precise float _1017 = _1016 - _1014;
                        precise float _1018 = _1017 - _1013;
                        precise float _1019 = _900 * _993;
                        precise float _1021 = _1018 / (isnan(0.001000000047497451305389404296875) ? _1019 : (isnan(_1019) ? 0.001000000047497451305389404296875 : max(_1019, 0.001000000047497451305389404296875)));
                        float _1022 = fract(_1021);
                        precise float _1024 = 1.0 - _1022;
                        float _1025 = (_1021 < 0.0) ? _1024 : _1022;
                        precise float _1026 = _992 / _993;
                        precise float _1027 = _901 / _993;
                        float _1048;
                        if (_1025 < _1027)
                        {
                            precise float _1046 = _1025 / _1027;
                            _1048 = _1046;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_1025 < _1026)
                            {
                                precise float _1058 = _1025 - _1027;
                                precise float _1059 = _1026 - _1027;
                                precise float _1060 = _1058 / _1059;
                                precise float _1049 = 1.0 - _1060;
                                frontier_phi_14_13_ladder = _1049;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1048 = frontier_phi_14_13_ladder;
                        }
                        precise float _1050 = _883 * _1048;
                        precise float _1051 = _995 * _969;
                        precise float _1052 = _586 * _996;
                        precise float _1053 = _1052 - _1051;
                        precise float _1055 = _882 + sin(_1053);
                        precise float _1057 = _1050 * abs(_1055);
                        precise float _1030 = _1057 + 0.0;
                        _1029 = _1030;
                    }
                    else
                    {
                        _1029 = 0.0;
                    }
                    precise float _1031 = _832 + _979;
                    precise float _1032 = _1031 + _1029;
                    precise float _1033 = _925 * _1032;
                    precise float _1034 = _926 * _1032;
                    precise float _1035 = _927 * _1032;
                    precise float _1036 = _981 * _987;
                    precise float _1037 = _984 * _987;
                    precise float _1038 = _985 * _987;
                    precise float _1039 = _1036 + _1033;
                    precise float _1040 = _1037 + _1034;
                    precise float _1041 = _1038 + _1035;
                    precise float _1042 = _958 * _1039;
                    precise float _1043 = _958 * _1040;
                    precise float _1044 = _958 * _1041;
                    precise float _934 = _1042 * 0.0500000007450580596923828125;
                    precise float _936 = _1043 * 0.0500000007450580596923828125;
                    precise float _938 = _1044 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _934;
                    frontier_phi_5_pred_7_ladder_1 = _936;
                    frontier_phi_5_pred_7_ladder_2 = _938;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _933 = frontier_phi_5_pred;
            _935 = frontier_phi_5_pred_1;
            _937 = frontier_phi_5_pred_2;
            _589 = _791 + _933;
            _591 = _792 + _935;
            _593 = _793 + _937;
            uint _797 = _796 + 1u;
            if (_797 == _181)
            {
                break;
            }
            else
            {
                _791 = _589;
                _792 = _591;
                _793 = _593;
                _794 = (_796 != 3u) ? (_794 >> 8u) : _587;
                _796 = _797;
                continue;
            }
        }
        _588 = _589;
        _590 = _591;
        _592 = _593;
    }
    precise float _594 = _588 * _588;
    precise float _595 = _590 * _590;
    precise float _596 = _594 + _595;
    precise float _597 = _592 * _592;
    precise float _598 = _596 + _597;
    float _599 = sqrt(_598);
    bool _600 = _599 < 0.00011000000085914507508277893066406;
    float _605 = inversesqrt(dot(vec3(cbInstanceData._m0[_172].x, cbInstanceData._m0[_540].x, cbInstanceData._m0[_547].x), vec3(cbInstanceData._m0[_172].x, cbInstanceData._m0[_540].x, cbInstanceData._m0[_547].x)));
    precise float _606 = cbInstanceData._m0[_172].x * _605;
    precise float _607 = cbInstanceData._m0[_540].x * _605;
    precise float _608 = cbInstanceData._m0[_547].x * _605;
    float _612 = inversesqrt(dot(vec3(cbInstanceData._m0[_172].y, cbInstanceData._m0[_540].y, cbInstanceData._m0[_547].y), vec3(cbInstanceData._m0[_172].y, cbInstanceData._m0[_540].y, cbInstanceData._m0[_547].y)));
    precise float _613 = cbInstanceData._m0[_172].y * _612;
    precise float _614 = cbInstanceData._m0[_540].y * _612;
    precise float _615 = cbInstanceData._m0[_547].y * _612;
    float _619 = inversesqrt(dot(vec3(cbInstanceData._m0[_172].z, cbInstanceData._m0[_540].z, cbInstanceData._m0[_547].z), vec3(cbInstanceData._m0[_172].z, cbInstanceData._m0[_540].z, cbInstanceData._m0[_547].z)));
    precise float _620 = cbInstanceData._m0[_172].z * _619;
    precise float _621 = cbInstanceData._m0[_540].z * _619;
    precise float _622 = cbInstanceData._m0[_547].z * _619;
    precise float _623 = _606 * 0.0;
    precise float _624 = 1.0 * _613;
    precise float _625 = _624 + _623;
    precise float _626 = 0.0 * _620;
    precise float _627 = _626 + _625;
    precise float _628 = _607 * 0.0;
    precise float _629 = 1.0 * _614;
    precise float _630 = _629 + _628;
    precise float _631 = 0.0 * _621;
    precise float _632 = _631 + _630;
    precise float _633 = _608 * 0.0;
    precise float _634 = 1.0 * _615;
    precise float _635 = _634 + _633;
    precise float _636 = 0.0 * _622;
    precise float _637 = _636 + _635;
    float _641 = inversesqrt(dot(vec3(_588, _590, _592), vec3(_588, _590, _592)));
    precise float _642 = _588 * _641;
    precise float _643 = _590 * _641;
    precise float _644 = _592 * _641;
    precise float _645 = _632 * _644;
    precise float _646 = _637 * _643;
    precise float _647 = _645 - _646;
    precise float _648 = _637 * _642;
    precise float _649 = _627 * _644;
    precise float _650 = _648 - _649;
    precise float _651 = _627 * _643;
    precise float _652 = _632 * _642;
    precise float _653 = _651 - _652;
    float _657 = inversesqrt(dot(vec3(_647, _650, _653), vec3(_647, _650, _653)));
    precise float _658 = _657 * _647;
    precise float _659 = _657 * _650;
    precise float _660 = _657 * _653;
    precise float _661 = _599 + 1.0;
    precise float _663 = cbMtdParam._m0[9u].w * log2(_661);
    precise float _664 = dot(vec3(_658, _659, _660), vec3(_575, _576, _577));
    precise float _667 = _658 * _664;
    precise float _668 = _659 * _664;
    precise float _669 = _660 * _664;
    precise float _670 = _560 + _667;
    precise float _671 = _567 + _668;
    precise float _672 = _574 + _669;
    precise float _673 = _390 - _670;
    precise float _674 = _397 - _671;
    precise float _675 = _404 - _672;
    precise float _676 = _659 * _675;
    precise float _677 = _660 * _674;
    precise float _678 = _676 - _677;
    precise float _679 = _660 * _673;
    precise float _680 = _658 * _675;
    precise float _681 = _679 - _680;
    precise float _682 = _658 * _674;
    precise float _683 = _659 * _673;
    precise float _684 = _682 - _683;
    float _685 = sin(_663);
    float _686 = cos(_663);
    precise float _687 = _673 * _686;
    precise float _688 = _674 * _686;
    precise float _689 = _675 * _686;
    precise float _690 = _685 * _678;
    precise float _691 = _685 * _681;
    precise float _692 = _685 * _684;
    precise float _693 = _687 + _690;
    precise float _694 = _688 + _691;
    precise float _695 = _692 + _689;
    precise float _696 = _670 + _693;
    precise float _697 = _671 + _694;
    precise float _698 = _672 + _695;
    precise float _699 = _696 - _390;
    precise float _700 = _697 - _397;
    precise float _701 = _698 - _404;
    precise float _705 = _390 + (_600 ? 0.0 : _699);
    precise float _706 = _397 + (_600 ? 0.0 : _700);
    precise float _707 = _404 + (_600 ? 0.0 : _701);
    precise float _708 = _705 - cbSceneParam._m0[3u].x;
    precise float _709 = _706 - cbSceneParam._m0[3u].y;
    precise float _710 = _707 - cbSceneParam._m0[3u].z;
    precise float _738 = cbSceneParam._m0[24u].x * _708;
    precise float _739 = _709 * cbSceneParam._m0[24u].y;
    precise float _740 = _739 + _738;
    precise float _741 = _710 * cbSceneParam._m0[24u].z;
    precise float _742 = _741 + _740;
    precise float _743 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _744 = _743 + _742;
    precise float _745 = cbSceneParam._m0[25u].x * _708;
    precise float _746 = _709 * cbSceneParam._m0[25u].y;
    precise float _747 = _746 + _745;
    precise float _748 = _710 * cbSceneParam._m0[25u].z;
    precise float _749 = _748 + _747;
    precise float _750 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _751 = _750 + _749;
    precise float _752 = cbSceneParam._m0[26u].x * _708;
    precise float _753 = _709 * cbSceneParam._m0[26u].y;
    precise float _754 = _753 + _752;
    precise float _755 = _710 * cbSceneParam._m0[26u].z;
    precise float _756 = _755 + _754;
    precise float _757 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _758 = _757 + _756;
    precise float _759 = _708 * cbSceneParam._m0[27u].x;
    precise float _760 = _709 * cbSceneParam._m0[27u].y;
    precise float _761 = _760 + _759;
    precise float _762 = _710 * cbSceneParam._m0[27u].z;
    precise float _763 = _762 + _761;
    precise float _764 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _765 = _764 + _763;
    gl_Position.x = _744;
    gl_Position.y = _751;
    gl_Position.z = _758;
    gl_Position.w = _765;
    POSITION_1.x = _744;
    POSITION_1.y = _751;
    POSITION_1.z = _758;
    POSITION_1.w = _765;
    NORMAL_1.x = _512;
    NORMAL_1.y = _515;
    NORMAL_1.z = _518;
    NORMAL_1.w = float(_195);
    TANGENT_1.x = (-0.0) - (_512 * _515);
    TANGENT_1.y = (_512 * _512) - (_518 * _520);
    TANGENT_1.z = _515 * _520;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = (((_456 * (_452 + _446)) / _478) + 1.0) * 0.5;
    TEXCOORD_2.w = (((_456 * (_452 - _446)) / _478) + 1.0) * 0.5;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
}


