#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out float TEXCOORD_13;

uint _861;

void main()
{
    uint _76 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_13 = 0.0;
    precise float _156 = float(NORMAL.x) + (-127.0);
    precise float _158 = float(NORMAL.y) + (-127.0);
    precise float _159 = float(NORMAL.z) + (-127.0);
    precise float _160 = _156 * 0.0078740157186985015869140625;
    precise float _162 = _158 * 0.0078740157186985015869140625;
    precise float _163 = _159 * 0.0078740157186985015869140625;
    uint _168 = _76 * 13u;
    uvec4 _174 = floatBitsToUint(cbInstanceData._m0[_168 + 7u]);
    uint _177 = min(_174.y, 8u);
    precise float _181 = POSITION.x + 0.0;
    precise float _182 = POSITION.y + 0.0;
    precise float _183 = POSITION.z + 0.0;
    uint _188 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _76;
    uvec4 _190 = texelFetch(g_InstanceIndexBuffer, int(_188));
    uint _191 = _190.x;
    uint _200 = (floatBitsToUint(cbInstanceData._m0[(_191 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _207 = _200 + 1u;
    uint _214 = _200 + 2u;
    float _224 = inversesqrt(dot(vec3(cbObjMatrix._m0[_200].x, cbObjMatrix._m0[_207].x, cbObjMatrix._m0[_214].x), vec3(cbObjMatrix._m0[_200].x, cbObjMatrix._m0[_207].x, cbObjMatrix._m0[_214].x)));
    precise float _225 = cbObjMatrix._m0[_200].x * _224;
    precise float _226 = cbObjMatrix._m0[_207].x * _224;
    precise float _227 = cbObjMatrix._m0[_214].x * _224;
    float _231 = inversesqrt(dot(vec3(cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_207].y, cbObjMatrix._m0[_214].y), vec3(cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_207].y, cbObjMatrix._m0[_214].y)));
    precise float _232 = cbObjMatrix._m0[_200].y * _231;
    precise float _233 = cbObjMatrix._m0[_207].y * _231;
    precise float _234 = cbObjMatrix._m0[_214].y * _231;
    float _238 = inversesqrt(dot(vec3(cbObjMatrix._m0[_200].z, cbObjMatrix._m0[_207].z, cbObjMatrix._m0[_214].z), vec3(cbObjMatrix._m0[_200].z, cbObjMatrix._m0[_207].z, cbObjMatrix._m0[_214].z)));
    precise float _239 = cbObjMatrix._m0[_200].z * _238;
    precise float _240 = cbObjMatrix._m0[_207].z * _238;
    precise float _241 = cbObjMatrix._m0[_214].z * _238;
    precise float _258 = _225 * cbSceneParam._m0[5u].x;
    precise float _259 = _226 * cbSceneParam._m0[5u].y;
    precise float _260 = _259 + _258;
    precise float _261 = _227 * cbSceneParam._m0[5u].z;
    precise float _262 = _261 + _260;
    precise float _263 = _225 * cbSceneParam._m0[6u].x;
    precise float _264 = _226 * cbSceneParam._m0[6u].y;
    precise float _265 = _264 + _263;
    precise float _266 = _227 * cbSceneParam._m0[6u].z;
    precise float _267 = _266 + _265;
    precise float _268 = _225 * cbSceneParam._m0[7u].x;
    precise float _269 = _226 * cbSceneParam._m0[7u].y;
    precise float _270 = _269 + _268;
    precise float _271 = _227 * cbSceneParam._m0[7u].z;
    precise float _272 = _271 + _270;
    precise float _273 = _232 * cbSceneParam._m0[5u].x;
    precise float _274 = _233 * cbSceneParam._m0[5u].y;
    precise float _275 = _274 + _273;
    precise float _276 = _234 * cbSceneParam._m0[5u].z;
    precise float _277 = _276 + _275;
    precise float _278 = _232 * cbSceneParam._m0[6u].x;
    precise float _279 = _233 * cbSceneParam._m0[6u].y;
    precise float _280 = _279 + _278;
    precise float _281 = _234 * cbSceneParam._m0[6u].z;
    precise float _282 = _281 + _280;
    precise float _283 = _232 * cbSceneParam._m0[7u].x;
    precise float _284 = _233 * cbSceneParam._m0[7u].y;
    precise float _285 = _284 + _283;
    precise float _286 = _234 * cbSceneParam._m0[7u].z;
    precise float _287 = _286 + _285;
    precise float _288 = _239 * cbSceneParam._m0[5u].x;
    precise float _289 = _240 * cbSceneParam._m0[5u].y;
    precise float _290 = _289 + _288;
    precise float _291 = _241 * cbSceneParam._m0[5u].z;
    precise float _292 = _291 + _290;
    precise float _293 = _239 * cbSceneParam._m0[6u].x;
    precise float _294 = _240 * cbSceneParam._m0[6u].y;
    precise float _295 = _294 + _293;
    precise float _296 = _241 * cbSceneParam._m0[6u].z;
    precise float _297 = _296 + _295;
    precise float _298 = _239 * cbSceneParam._m0[7u].x;
    precise float _299 = _240 * cbSceneParam._m0[7u].y;
    precise float _300 = _299 + _298;
    precise float _301 = _241 * cbSceneParam._m0[7u].z;
    precise float _302 = _301 + _300;
    precise float _303 = _162 * 0.0;
    precise float _304 = _303 - _163;
    precise float _305 = _163 * 0.0;
    precise float _306 = _160 * 0.0;
    precise float _307 = _305 - _306;
    precise float _308 = _160 - _303;
    precise float _309 = _163 * _307;
    precise float _310 = _162 * _308;
    precise float _311 = _309 - _310;
    precise float _312 = _160 * _308;
    precise float _313 = _163 * _304;
    precise float _314 = _312 - _313;
    precise float _315 = _162 * _304;
    precise float _316 = _160 * _307;
    precise float _317 = _315 - _316;
    float _321 = inversesqrt(dot(vec3(_304, _307, _308), vec3(_304, _307, _308)));
    precise float _322 = _304 * _321;
    precise float _323 = _307 * _321;
    precise float _324 = _308 * _321;
    float _328 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    precise float _329 = _311 * _328;
    precise float _330 = _314 * _328;
    precise float _331 = _317 * _328;
    precise float _332 = (-0.0) - _160;
    precise float _334 = (-0.0) - _162;
    precise float _335 = (-0.0) - _163;
    float _339 = inversesqrt(dot(vec3(_332, _334, _335), vec3(_332, _334, _335)));
    precise float _340 = _339 * _332;
    precise float _341 = _339 * _334;
    precise float _342 = _339 * _335;
    precise float _343 = _181 - TEXCOORD_1.x;
    precise float _344 = _182 - TEXCOORD_1.y;
    precise float _345 = _183 - TEXCOORD_1.z;
    precise float _346 = _343 * _322;
    precise float _347 = _344 * _323;
    precise float _348 = _347 + _346;
    precise float _349 = _345 * _324;
    precise float _350 = _349 + _348;
    precise float _351 = _343 * _329;
    precise float _352 = _344 * _330;
    precise float _353 = _352 + _351;
    precise float _354 = _345 * _331;
    precise float _355 = _354 + _353;
    precise float _356 = _343 * _340;
    precise float _357 = _344 * _341;
    precise float _358 = _357 + _356;
    precise float _359 = _345 * _342;
    precise float _360 = _359 + _358;
    precise float _361 = _262 * _350;
    precise float _362 = _267 * _355;
    precise float _363 = _362 + _361;
    precise float _364 = _272 * _360;
    precise float _365 = _364 + _363;
    precise float _366 = _277 * _350;
    precise float _367 = _282 * _355;
    precise float _368 = _367 + _366;
    precise float _369 = _287 * _360;
    precise float _370 = _369 + _368;
    precise float _371 = _292 * _350;
    precise float _372 = _297 * _355;
    precise float _373 = _372 + _371;
    precise float _374 = _302 * _360;
    precise float _375 = _374 + _373;
    precise float _376 = TEXCOORD_1.x + _365;
    precise float _377 = TEXCOORD_1.y + _370;
    precise float _378 = TEXCOORD_1.z + _375;
    precise float _379 = cbObjMatrix._m0[_200].x * _376;
    precise float _380 = _377 * cbObjMatrix._m0[_200].y;
    precise float _381 = _380 + _379;
    precise float _382 = _378 * cbObjMatrix._m0[_200].z;
    precise float _383 = _382 + _381;
    precise float _384 = 1.0 * cbObjMatrix._m0[_200].w;
    precise float _386 = _384 + _383;
    precise float _387 = cbObjMatrix._m0[_207].x * _376;
    precise float _388 = _377 * cbObjMatrix._m0[_207].y;
    precise float _389 = _388 + _387;
    precise float _390 = _378 * cbObjMatrix._m0[_207].z;
    precise float _391 = _390 + _389;
    precise float _392 = 1.0 * cbObjMatrix._m0[_207].w;
    precise float _393 = _392 + _391;
    precise float _394 = cbObjMatrix._m0[_214].x * _376;
    precise float _395 = _377 * cbObjMatrix._m0[_214].y;
    precise float _396 = _395 + _394;
    precise float _397 = _378 * cbObjMatrix._m0[_214].z;
    precise float _398 = _397 + _396;
    precise float _399 = 1.0 * cbObjMatrix._m0[_214].w;
    precise float _400 = _399 + _398;
    float _426 = (((-0.0) - cbObjMatrix._m0[_200].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_200].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_200].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _227, fma(cbSceneParam._m0[3u].y, _226, cbSceneParam._m0[3u].x * _225));
    float _429 = (((-0.0) - cbObjMatrix._m0[_207].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_207].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_207].y, cbObjMatrix._m0[_207].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _234, fma(cbSceneParam._m0[3u].y, _233, cbSceneParam._m0[3u].x * _232));
    float _432 = (((-0.0) - cbObjMatrix._m0[_214].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_214].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_214].y, cbObjMatrix._m0[_214].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _241, fma(cbSceneParam._m0[3u].y, _240, cbSceneParam._m0[3u].x * _239));
    float _436 = inversesqrt(dot(vec3(_426, _429, _432), vec3(_426, _429, _432)));
    float _437 = _436 * _426;
    float _438 = _436 * _429;
    float _439 = _436 * _432;
    float _442 = fma(_439, _324, fma(_438, _323, _437 * _322));
    float _445 = fma(_439, _331, fma(_438, _330, _437 * _329));
    float _448 = fma(_439, _342, fma(_438, _341, _437 * _340));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _474 = dot(vec3(_453, _454, _455), vec3(float(int(uint(_453 > 0.0) - uint(_453 < 0.0))), float(int(uint(_454 > 0.0) - uint(_454 < 0.0))), float(int(uint(_455 > 0.0) - uint(_455 < 0.0)))));
    float _488 = cbSceneParam._m0[3u].x - _386;
    float _489 = cbSceneParam._m0[3u].y - _393;
    float _490 = cbSceneParam._m0[3u].z - _400;
    float _499 = fma(_163, _324, fma(_162, _323, _322 * _160));
    float _502 = fma(_163, _331, fma(_162, _330, _329 * _160));
    float _505 = fma(_163, _342, fma(_162, _341, _340 * _160));
    float _508 = fma(_272, _505, fma(_267, _502, _499 * _262));
    float _511 = fma(_287, _505, fma(_282, _502, _499 * _277));
    float _514 = fma(_302, _505, fma(_297, _502, _499 * _292));
    float _517 = fma(_514, cbObjMatrix._m0[_200].z, fma(_511, cbObjMatrix._m0[_200].y, _508 * cbObjMatrix._m0[_200].x));
    float _520 = fma(_514, cbObjMatrix._m0[_207].z, fma(_511, cbObjMatrix._m0[_207].y, _508 * cbObjMatrix._m0[_207].x));
    float _523 = fma(_514, cbObjMatrix._m0[_214].z, fma(_511, cbObjMatrix._m0[_214].y, _508 * cbObjMatrix._m0[_214].x));
    float _525 = (-0.0) - _523;
    precise float _537 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _545 = _168 + 1u;
    uint _552 = _168 + 2u;
    precise float _559 = TEXCOORD_1.x * cbInstanceData._m0[_168].x;
    precise float _560 = TEXCOORD_1.y * cbInstanceData._m0[_168].y;
    precise float _561 = _560 + _559;
    precise float _562 = TEXCOORD_1.z * cbInstanceData._m0[_168].z;
    precise float _563 = _562 + _561;
    precise float _564 = 1.0 * cbInstanceData._m0[_168].w;
    precise float _565 = _564 + _563;
    precise float _566 = TEXCOORD_1.x * cbInstanceData._m0[_545].x;
    precise float _567 = TEXCOORD_1.y * cbInstanceData._m0[_545].y;
    precise float _568 = _567 + _566;
    precise float _569 = TEXCOORD_1.z * cbInstanceData._m0[_545].z;
    precise float _570 = _569 + _568;
    precise float _571 = 1.0 * cbInstanceData._m0[_545].w;
    precise float _572 = _571 + _570;
    precise float _573 = TEXCOORD_1.x * cbInstanceData._m0[_552].x;
    precise float _574 = TEXCOORD_1.y * cbInstanceData._m0[_552].y;
    precise float _575 = _574 + _573;
    precise float _576 = TEXCOORD_1.z * cbInstanceData._m0[_552].z;
    precise float _577 = _576 + _575;
    precise float _578 = 1.0 * cbInstanceData._m0[_552].w;
    precise float _579 = _578 + _577;
    precise float _580 = _386 - _565;
    precise float _581 = _393 - _572;
    precise float _582 = _400 - _579;
    precise float _583 = _580 * _580;
    precise float _584 = _581 * _581;
    precise float _585 = _583 + _584;
    precise float _586 = _582 * _582;
    precise float _587 = _585 + _586;
    precise float _589 = cbMtdParam._m0[9u].z * sqrt(_587);
    precise float _590 = _537 + _589;
    precise float _591 = cbPerFrame._m0[22u].x + _590;
    uint _592 = _174.w;
    float _593;
    float _595;
    float _597;
    if (_177 == 0u)
    {
        _593 = 0.0;
        _595 = 0.0;
        _597 = 0.0;
    }
    else
    {
        uint _791 = _174.z;
        precise float _594;
        precise float _596;
        precise float _598;
        float _934;
        float _936;
        float _938;
        float _792 = 0.0;
        float _793 = 0.0;
        float _794 = 0.0;
        uint _795 = _791;
        uint _797 = 0u;
        float _833;
        float _852;
        vec4 _866;
        float _867;
        float _868;
        float _882;
        float _883;
        float _884;
        float _901;
        float _902;
        float _903;
        float _904;
        bool _905;
        bool _906;
        bool _907;
        precise float _908;
        precise float _909;
        precise float _910;
        float _911;
        float _912;
        float _913;
        precise float _914;
        bool _917;
        for (;;)
        {
            uint _799 = _795 & 255u;
            uint _801 = _799 * 24u;
            uvec3 _811 = uvec3(texelFetch(g_forceParam, int(_801)).x, texelFetch(g_forceParam, int(_801 + 1u)).x, texelFetch(g_forceParam, int(_801 + 2u)).x);
            uint _816 = (_799 * 24u) + 4u;
            vec4 _829 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_816)).x, texelFetch(g_forceParam, int(_816 + 1u)).x, texelFetch(g_forceParam, int(_816 + 2u)).x, texelFetch(g_forceParam, int(_816 + 3u)).x));
            _833 = _829.w;
            uint _835 = (_799 * 24u) + 8u;
            vec4 _848 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_835)).x, texelFetch(g_forceParam, int(_835 + 1u)).x, texelFetch(g_forceParam, int(_835 + 2u)).x, texelFetch(g_forceParam, int(_835 + 3u)).x));
            _852 = _848.w;
            uint _855 = (_799 * 24u) + 12u;
            _866 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_855)).x, texelFetch(g_forceParam, int(_855 + 1u)).x, _861, texelFetch(g_forceParam, int(_855 + 3u)).x));
            _867 = _866.x;
            _868 = _866.w;
            uint _871 = (_799 * 24u) + 16u;
            vec3 _881 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_871)).x, texelFetch(g_forceParam, int(_871 + 1u)).x, texelFetch(g_forceParam, int(_871 + 2u)).x));
            _882 = _881.x;
            _883 = _881.y;
            _884 = _881.z;
            uint _887 = (_799 * 24u) + 20u;
            vec4 _900 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_887)).x, texelFetch(g_forceParam, int(_887 + 1u)).x, texelFetch(g_forceParam, int(_887 + 2u)).x, texelFetch(g_forceParam, int(_887 + 3u)).x));
            _901 = _900.x;
            _902 = _900.y;
            _903 = _900.z;
            _904 = _900.w;
            _905 = _811.x == 1u;
            _906 = _811.y == 1u;
            _907 = _811.z == 1u;
            _908 = _565 - _829.x;
            _909 = _572 - _829.y;
            _910 = _579 - _829.z;
            _911 = _905 ? _848.x : _908;
            _912 = _905 ? _848.y : _909;
            _913 = _905 ? _848.z : _910;
            _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
            _917 = _914 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_917)
            {
                precise float _919 = _908 * _908;
                precise float _920 = _909 * _909;
                precise float _921 = _919 + _920;
                precise float _922 = _910 * _910;
                precise float _923 = _922 + _921;
                float _924 = sqrt(_923);
                float _925 = inversesqrt(_914);
                precise float _926 = _911 * _925;
                precise float _927 = _912 * _925;
                precise float _928 = _913 * _925;
                precise float _931 = _924 / (isnan(0.001000000047497451305389404296875) ? _866.y : (isnan(_866.y) ? 0.001000000047497451305389404296875 : max(_866.y, 0.001000000047497451305389404296875)));
                precise float _932 = 1.0 - _931;
                float _1095 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
                float _933 = isnan(1.0) ? _1095 : (isnan(_1095) ? 1.0 : min(_1095, 1.0));
                float _959;
                if (_907)
                {
                    float _946 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
                    precise float _947 = _908 * _946;
                    precise float _948 = _909 * _946;
                    precise float _949 = _910 * _946;
                    precise float _953 = dot(vec3(_926, _927, _928), vec3(_947, _948, _949)) * 0.800000011920928955078125;
                    precise float _955 = _953 + 0.20000000298023223876953125;
                    float _1106 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
                    precise float _958 = _933 * (isnan(1.0) ? _1106 : (isnan(_1106) ? 1.0 : min(_1106, 1.0)));
                    _959 = _958;
                }
                else
                {
                    _959 = _933;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_959 > 0.0)
                {
                    bool _962 = _905 && (!_907);
                    precise float _964 = _924 * (-4.0);
                    precise float _968 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _867 : (isnan(_867) ? 0.001000000047497451305389404296875 : max(_867, 0.001000000047497451305389404296875)));
                    precise float _970 = dot(vec2(_926, _928), vec2(_908, _910));
                    precise float _974 = _968 * _970;
                    precise float _975 = float(_962) * _974;
                    precise float _976 = _591 * _968;
                    precise float _977 = _976 - _975;
                    precise float _978 = (_962 ? 0.0 : _964) + _977;
                    precise float _980 = _852 * sin(_978);
                    precise float _981 = _927 * 0.0;
                    precise float _982 = _981 - _928;
                    precise float _983 = _928 * 0.0;
                    precise float _984 = _926 * 0.0;
                    precise float _985 = _983 - _984;
                    precise float _986 = _926 - _981;
                    precise float _987 = _868 * _980;
                    float _988 = _905 ? _987 : 0.0;
                    float _1030;
                    if (_906)
                    {
                        precise float _991 = _882 * 2.0;
                        precise float _993 = _902 + _903;
                        precise float _994 = _904 + _993;
                        precise float _996 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _882 : (isnan(_882) ? 0.001000000047497451305389404296875 : max(_882, 0.001000000047497451305389404296875)));
                        precise float _997 = _901 * _996;
                        precise float _998 = (-0.0) - _926;
                        precise float _1002 = dot(vec2(_928, _998), vec2(_908, _910)) / _991;
                        precise float _1003 = (-0.0) - _1002;
                        float _1006 = fract(abs(_1002));
                        precise float _1007 = (-0.0) - _1006;
                        precise float _1009 = _991 * ((_1002 >= _1003) ? _1006 : _1007);
                        precise float _1010 = _1009 * 6.283184051513671875;
                        precise float _1011 = _1010 / _991;
                        precise float _1013 = (isnan(5.0) ? _882 : (isnan(_882) ? 5.0 : min(_882, 5.0))) * sin(_1011);
                        precise float _1014 = _970 + _1013;
                        precise float _1015 = _882 * 0.25;
                        precise float _1017 = _591 * _901;
                        precise float _1018 = _1017 - _1015;
                        precise float _1019 = _1018 - _1014;
                        precise float _1020 = _901 * _994;
                        precise float _1022 = _1019 / (isnan(0.001000000047497451305389404296875) ? _1020 : (isnan(_1020) ? 0.001000000047497451305389404296875 : max(_1020, 0.001000000047497451305389404296875)));
                        float _1023 = fract(_1022);
                        precise float _1025 = 1.0 - _1023;
                        float _1026 = (_1022 < 0.0) ? _1025 : _1023;
                        precise float _1027 = _993 / _994;
                        precise float _1028 = _902 / _994;
                        float _1049;
                        if (_1026 < _1028)
                        {
                            precise float _1047 = _1026 / _1028;
                            _1049 = _1047;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_1026 < _1027)
                            {
                                precise float _1059 = _1026 - _1028;
                                precise float _1060 = _1027 - _1028;
                                precise float _1061 = _1059 / _1060;
                                precise float _1050 = 1.0 - _1061;
                                frontier_phi_14_13_ladder = _1050;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1049 = frontier_phi_14_13_ladder;
                        }
                        precise float _1051 = _884 * _1049;
                        precise float _1052 = _996 * _970;
                        precise float _1053 = _591 * _997;
                        precise float _1054 = _1053 - _1052;
                        precise float _1056 = _883 + sin(_1054);
                        precise float _1058 = _1051 * abs(_1056);
                        precise float _1031 = _1058 + 0.0;
                        _1030 = _1031;
                    }
                    else
                    {
                        _1030 = 0.0;
                    }
                    precise float _1032 = _833 + _980;
                    precise float _1033 = _1032 + _1030;
                    precise float _1034 = _926 * _1033;
                    precise float _1035 = _927 * _1033;
                    precise float _1036 = _928 * _1033;
                    precise float _1037 = _982 * _988;
                    precise float _1038 = _985 * _988;
                    precise float _1039 = _986 * _988;
                    precise float _1040 = _1037 + _1034;
                    precise float _1041 = _1038 + _1035;
                    precise float _1042 = _1039 + _1036;
                    precise float _1043 = _959 * _1040;
                    precise float _1044 = _959 * _1041;
                    precise float _1045 = _959 * _1042;
                    precise float _935 = _1043 * 0.0500000007450580596923828125;
                    precise float _937 = _1044 * 0.0500000007450580596923828125;
                    precise float _939 = _1045 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _935;
                    frontier_phi_5_pred_7_ladder_1 = _937;
                    frontier_phi_5_pred_7_ladder_2 = _939;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _934 = frontier_phi_5_pred;
            _936 = frontier_phi_5_pred_1;
            _938 = frontier_phi_5_pred_2;
            _594 = _792 + _934;
            _596 = _793 + _936;
            _598 = _794 + _938;
            uint _798 = _797 + 1u;
            if (_798 == _177)
            {
                break;
            }
            else
            {
                _792 = _594;
                _793 = _596;
                _794 = _598;
                _795 = (_797 != 3u) ? (_795 >> 8u) : _592;
                _797 = _798;
                continue;
            }
        }
        _593 = _594;
        _595 = _596;
        _597 = _598;
    }
    precise float _599 = _593 * _593;
    precise float _600 = _595 * _595;
    precise float _601 = _599 + _600;
    precise float _602 = _597 * _597;
    precise float _603 = _601 + _602;
    float _604 = sqrt(_603);
    bool _605 = _604 < 0.00011000000085914507508277893066406;
    float _610 = inversesqrt(dot(vec3(cbInstanceData._m0[_168].x, cbInstanceData._m0[_545].x, cbInstanceData._m0[_552].x), vec3(cbInstanceData._m0[_168].x, cbInstanceData._m0[_545].x, cbInstanceData._m0[_552].x)));
    precise float _611 = cbInstanceData._m0[_168].x * _610;
    precise float _612 = cbInstanceData._m0[_545].x * _610;
    precise float _613 = cbInstanceData._m0[_552].x * _610;
    float _617 = inversesqrt(dot(vec3(cbInstanceData._m0[_168].y, cbInstanceData._m0[_545].y, cbInstanceData._m0[_552].y), vec3(cbInstanceData._m0[_168].y, cbInstanceData._m0[_545].y, cbInstanceData._m0[_552].y)));
    precise float _618 = cbInstanceData._m0[_168].y * _617;
    precise float _619 = cbInstanceData._m0[_545].y * _617;
    precise float _620 = cbInstanceData._m0[_552].y * _617;
    float _624 = inversesqrt(dot(vec3(cbInstanceData._m0[_168].z, cbInstanceData._m0[_545].z, cbInstanceData._m0[_552].z), vec3(cbInstanceData._m0[_168].z, cbInstanceData._m0[_545].z, cbInstanceData._m0[_552].z)));
    precise float _625 = cbInstanceData._m0[_168].z * _624;
    precise float _626 = cbInstanceData._m0[_545].z * _624;
    precise float _627 = cbInstanceData._m0[_552].z * _624;
    precise float _628 = _611 * 0.0;
    precise float _629 = 1.0 * _618;
    precise float _630 = _629 + _628;
    precise float _631 = 0.0 * _625;
    precise float _632 = _631 + _630;
    precise float _633 = _612 * 0.0;
    precise float _634 = 1.0 * _619;
    precise float _635 = _634 + _633;
    precise float _636 = 0.0 * _626;
    precise float _637 = _636 + _635;
    precise float _638 = _613 * 0.0;
    precise float _639 = 1.0 * _620;
    precise float _640 = _639 + _638;
    precise float _641 = 0.0 * _627;
    precise float _642 = _641 + _640;
    float _646 = inversesqrt(dot(vec3(_593, _595, _597), vec3(_593, _595, _597)));
    precise float _647 = _593 * _646;
    precise float _648 = _595 * _646;
    precise float _649 = _597 * _646;
    precise float _650 = _637 * _649;
    precise float _651 = _642 * _648;
    precise float _652 = _650 - _651;
    precise float _653 = _642 * _647;
    precise float _654 = _632 * _649;
    precise float _655 = _653 - _654;
    precise float _656 = _632 * _648;
    precise float _657 = _637 * _647;
    precise float _658 = _656 - _657;
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    precise float _663 = _662 * _652;
    precise float _664 = _662 * _655;
    precise float _665 = _662 * _658;
    precise float _666 = _604 + 1.0;
    precise float _668 = cbMtdParam._m0[9u].w * log2(_666);
    precise float _669 = dot(vec3(_663, _664, _665), vec3(_580, _581, _582));
    precise float _672 = _663 * _669;
    precise float _673 = _664 * _669;
    precise float _674 = _665 * _669;
    precise float _675 = _565 + _672;
    precise float _676 = _572 + _673;
    precise float _677 = _579 + _674;
    precise float _678 = _386 - _675;
    precise float _679 = _393 - _676;
    precise float _680 = _400 - _677;
    precise float _681 = _664 * _680;
    precise float _682 = _665 * _679;
    precise float _683 = _681 - _682;
    precise float _684 = _665 * _678;
    precise float _685 = _663 * _680;
    precise float _686 = _684 - _685;
    precise float _687 = _663 * _679;
    precise float _688 = _664 * _678;
    precise float _689 = _687 - _688;
    float _690 = sin(_668);
    float _691 = cos(_668);
    precise float _692 = _678 * _691;
    precise float _693 = _679 * _691;
    precise float _694 = _680 * _691;
    precise float _695 = _690 * _683;
    precise float _696 = _690 * _686;
    precise float _697 = _690 * _689;
    precise float _698 = _692 + _695;
    precise float _699 = _693 + _696;
    precise float _700 = _697 + _694;
    precise float _701 = _675 + _698;
    precise float _702 = _676 + _699;
    precise float _703 = _677 + _700;
    precise float _704 = _701 - _386;
    precise float _705 = _702 - _393;
    precise float _706 = _703 - _400;
    precise float _710 = _386 + (_605 ? 0.0 : _704);
    precise float _711 = _393 + (_605 ? 0.0 : _705);
    precise float _712 = _400 + (_605 ? 0.0 : _706);
    precise float _713 = _710 - cbSceneParam._m0[3u].x;
    precise float _714 = _711 - cbSceneParam._m0[3u].y;
    precise float _715 = _712 - cbSceneParam._m0[3u].z;
    precise float _743 = cbSceneParam._m0[24u].x * _713;
    precise float _744 = _714 * cbSceneParam._m0[24u].y;
    precise float _745 = _744 + _743;
    precise float _746 = _715 * cbSceneParam._m0[24u].z;
    precise float _747 = _746 + _745;
    precise float _748 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _749 = _748 + _747;
    precise float _750 = cbSceneParam._m0[25u].x * _713;
    precise float _751 = _714 * cbSceneParam._m0[25u].y;
    precise float _752 = _751 + _750;
    precise float _753 = _715 * cbSceneParam._m0[25u].z;
    precise float _754 = _753 + _752;
    precise float _755 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _756 = _755 + _754;
    precise float _757 = cbSceneParam._m0[26u].x * _713;
    precise float _758 = _714 * cbSceneParam._m0[26u].y;
    precise float _759 = _758 + _757;
    precise float _760 = _715 * cbSceneParam._m0[26u].z;
    precise float _761 = _760 + _759;
    precise float _762 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _763 = _762 + _761;
    precise float _764 = _713 * cbSceneParam._m0[27u].x;
    precise float _765 = _714 * cbSceneParam._m0[27u].y;
    precise float _766 = _765 + _764;
    precise float _767 = _715 * cbSceneParam._m0[27u].z;
    precise float _768 = _767 + _766;
    precise float _769 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _770 = _769 + _768;
    gl_Position.x = _749;
    gl_Position.y = _756;
    gl_Position.z = _763;
    gl_Position.w = _770;
    NORMAL_1.x = _517;
    NORMAL_1.y = _520;
    NORMAL_1.z = _523;
    NORMAL_1.w = float(_191);
    TANGENT_1.x = (-0.0) - (_517 * _520);
    TANGENT_1.y = (_517 * _517) - (_523 * _525);
    TANGENT_1.z = _520 * _525;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = (((_452 * (_448 + _442)) / _474) + 1.0) * 0.5;
    TEXCOORD_2.w = (((_452 * (_448 - _442)) / _474) + 1.0) * 0.5;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_13 = sqrt(((_488 * _488) + (_489 * _489)) + (_490 * _490));
}


