#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_10;
layout(location = 7) out vec4 TEXCOORD_11;
layout(location = 8) out vec3 TEXCOORD_12;

uint _1002;

void main()
{
    uint _87 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    TEXCOORD_10.w = 0.0;
    TEXCOORD_11.x = 0.0;
    TEXCOORD_11.y = 0.0;
    TEXCOORD_11.z = 0.0;
    TEXCOORD_11.w = 0.0;
    TEXCOORD_12.x = 0.0;
    TEXCOORD_12.y = 0.0;
    TEXCOORD_12.z = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    precise float _184 = float(NORMAL.x) + (-127.0);
    precise float _186 = float(NORMAL.y) + (-127.0);
    precise float _187 = float(NORMAL.z) + (-127.0);
    precise float _188 = _184 * 0.0078740157186985015869140625;
    precise float _190 = _186 * 0.0078740157186985015869140625;
    precise float _191 = _187 * 0.0078740157186985015869140625;
    uint _196 = _87 * 13u;
    uvec4 _202 = floatBitsToUint(cbInstanceData._m0[_196 + 7u]);
    uint _205 = min(_202.y, 8u);
    precise float _209 = POSITION.x + 0.0;
    precise float _210 = POSITION.y + 0.0;
    precise float _211 = POSITION.z + 0.0;
    uint _216 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _87;
    uvec4 _218 = texelFetch(g_InstanceIndexBuffer, int(_216));
    uint _219 = _218.x;
    uint _221 = _219 * 13u;
    uint _228 = (floatBitsToUint(cbInstanceData._m0[_221 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _235 = _228 + 1u;
    uint _242 = _228 + 2u;
    float _252 = inversesqrt(dot(vec3(cbObjMatrix._m0[_228].x, cbObjMatrix._m0[_235].x, cbObjMatrix._m0[_242].x), vec3(cbObjMatrix._m0[_228].x, cbObjMatrix._m0[_235].x, cbObjMatrix._m0[_242].x)));
    precise float _253 = cbObjMatrix._m0[_228].x * _252;
    precise float _254 = cbObjMatrix._m0[_235].x * _252;
    precise float _255 = cbObjMatrix._m0[_242].x * _252;
    float _259 = inversesqrt(dot(vec3(cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_242].y), vec3(cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_242].y)));
    precise float _260 = cbObjMatrix._m0[_228].y * _259;
    precise float _261 = cbObjMatrix._m0[_235].y * _259;
    precise float _262 = cbObjMatrix._m0[_242].y * _259;
    float _266 = inversesqrt(dot(vec3(cbObjMatrix._m0[_228].z, cbObjMatrix._m0[_235].z, cbObjMatrix._m0[_242].z), vec3(cbObjMatrix._m0[_228].z, cbObjMatrix._m0[_235].z, cbObjMatrix._m0[_242].z)));
    precise float _267 = cbObjMatrix._m0[_228].z * _266;
    precise float _268 = cbObjMatrix._m0[_235].z * _266;
    precise float _269 = cbObjMatrix._m0[_242].z * _266;
    precise float _286 = _253 * cbSceneParam._m0[5u].x;
    precise float _287 = _254 * cbSceneParam._m0[5u].y;
    precise float _288 = _287 + _286;
    precise float _289 = _255 * cbSceneParam._m0[5u].z;
    precise float _290 = _289 + _288;
    precise float _291 = _253 * cbSceneParam._m0[6u].x;
    precise float _292 = _254 * cbSceneParam._m0[6u].y;
    precise float _293 = _292 + _291;
    precise float _294 = _255 * cbSceneParam._m0[6u].z;
    precise float _295 = _294 + _293;
    precise float _296 = _253 * cbSceneParam._m0[7u].x;
    precise float _297 = _254 * cbSceneParam._m0[7u].y;
    precise float _298 = _297 + _296;
    precise float _299 = _255 * cbSceneParam._m0[7u].z;
    precise float _300 = _299 + _298;
    precise float _301 = _260 * cbSceneParam._m0[5u].x;
    precise float _302 = _261 * cbSceneParam._m0[5u].y;
    precise float _303 = _302 + _301;
    precise float _304 = _262 * cbSceneParam._m0[5u].z;
    precise float _305 = _304 + _303;
    precise float _306 = _260 * cbSceneParam._m0[6u].x;
    precise float _307 = _261 * cbSceneParam._m0[6u].y;
    precise float _308 = _307 + _306;
    precise float _309 = _262 * cbSceneParam._m0[6u].z;
    precise float _310 = _309 + _308;
    precise float _311 = _260 * cbSceneParam._m0[7u].x;
    precise float _312 = _261 * cbSceneParam._m0[7u].y;
    precise float _313 = _312 + _311;
    precise float _314 = _262 * cbSceneParam._m0[7u].z;
    precise float _315 = _314 + _313;
    precise float _316 = _267 * cbSceneParam._m0[5u].x;
    precise float _317 = _268 * cbSceneParam._m0[5u].y;
    precise float _318 = _317 + _316;
    precise float _319 = _269 * cbSceneParam._m0[5u].z;
    precise float _320 = _319 + _318;
    precise float _321 = _267 * cbSceneParam._m0[6u].x;
    precise float _322 = _268 * cbSceneParam._m0[6u].y;
    precise float _323 = _322 + _321;
    precise float _324 = _269 * cbSceneParam._m0[6u].z;
    precise float _325 = _324 + _323;
    precise float _326 = _267 * cbSceneParam._m0[7u].x;
    precise float _327 = _268 * cbSceneParam._m0[7u].y;
    precise float _328 = _327 + _326;
    precise float _329 = _269 * cbSceneParam._m0[7u].z;
    precise float _330 = _329 + _328;
    precise float _331 = _190 * 0.0;
    precise float _332 = _331 - _191;
    precise float _333 = _191 * 0.0;
    precise float _334 = _188 * 0.0;
    precise float _335 = _333 - _334;
    precise float _336 = _188 - _331;
    precise float _337 = _191 * _335;
    precise float _338 = _190 * _336;
    precise float _339 = _337 - _338;
    precise float _340 = _188 * _336;
    precise float _341 = _191 * _332;
    precise float _342 = _340 - _341;
    precise float _343 = _190 * _332;
    precise float _344 = _188 * _335;
    precise float _345 = _343 - _344;
    float _349 = inversesqrt(dot(vec3(_332, _335, _336), vec3(_332, _335, _336)));
    precise float _350 = _332 * _349;
    precise float _351 = _335 * _349;
    precise float _352 = _336 * _349;
    float _356 = inversesqrt(dot(vec3(_339, _342, _345), vec3(_339, _342, _345)));
    precise float _357 = _339 * _356;
    precise float _358 = _342 * _356;
    precise float _359 = _345 * _356;
    precise float _360 = (-0.0) - _188;
    precise float _362 = (-0.0) - _190;
    precise float _363 = (-0.0) - _191;
    float _367 = inversesqrt(dot(vec3(_360, _362, _363), vec3(_360, _362, _363)));
    precise float _368 = _367 * _360;
    precise float _369 = _367 * _362;
    precise float _370 = _367 * _363;
    precise float _371 = _209 - TEXCOORD_1.x;
    precise float _372 = _210 - TEXCOORD_1.y;
    precise float _373 = _211 - TEXCOORD_1.z;
    precise float _374 = _371 * _350;
    precise float _375 = _372 * _351;
    precise float _376 = _375 + _374;
    precise float _377 = _373 * _352;
    precise float _378 = _377 + _376;
    precise float _379 = _371 * _357;
    precise float _380 = _372 * _358;
    precise float _381 = _380 + _379;
    precise float _382 = _373 * _359;
    precise float _383 = _382 + _381;
    precise float _384 = _371 * _368;
    precise float _385 = _372 * _369;
    precise float _386 = _385 + _384;
    precise float _387 = _373 * _370;
    precise float _388 = _387 + _386;
    precise float _389 = _290 * _378;
    precise float _390 = _295 * _383;
    precise float _391 = _390 + _389;
    precise float _392 = _300 * _388;
    precise float _393 = _392 + _391;
    precise float _394 = _305 * _378;
    precise float _395 = _310 * _383;
    precise float _396 = _395 + _394;
    precise float _397 = _315 * _388;
    precise float _398 = _397 + _396;
    precise float _399 = _320 * _378;
    precise float _400 = _325 * _383;
    precise float _401 = _400 + _399;
    precise float _402 = _330 * _388;
    precise float _403 = _402 + _401;
    precise float _404 = TEXCOORD_1.x + _393;
    precise float _405 = TEXCOORD_1.y + _398;
    precise float _406 = TEXCOORD_1.z + _403;
    precise float _407 = cbObjMatrix._m0[_228].x * _404;
    precise float _408 = _405 * cbObjMatrix._m0[_228].y;
    precise float _409 = _408 + _407;
    precise float _410 = _406 * cbObjMatrix._m0[_228].z;
    precise float _411 = _410 + _409;
    precise float _412 = 1.0 * cbObjMatrix._m0[_228].w;
    precise float _414 = _412 + _411;
    precise float _415 = cbObjMatrix._m0[_235].x * _404;
    precise float _416 = _405 * cbObjMatrix._m0[_235].y;
    precise float _417 = _416 + _415;
    precise float _418 = _406 * cbObjMatrix._m0[_235].z;
    precise float _419 = _418 + _417;
    precise float _420 = 1.0 * cbObjMatrix._m0[_235].w;
    precise float _421 = _420 + _419;
    precise float _422 = cbObjMatrix._m0[_242].x * _404;
    precise float _423 = _405 * cbObjMatrix._m0[_242].y;
    precise float _424 = _423 + _422;
    precise float _425 = _406 * cbObjMatrix._m0[_242].z;
    precise float _426 = _425 + _424;
    precise float _427 = 1.0 * cbObjMatrix._m0[_242].w;
    precise float _428 = _427 + _426;
    float _484 = (((-0.0) - cbObjMatrix._m0[_228].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_228].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_228].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _255, fma(cbSceneParam._m0[3u].y, _254, cbSceneParam._m0[3u].x * _253));
    float _487 = (((-0.0) - cbObjMatrix._m0[_235].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_235].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _262, fma(cbSceneParam._m0[3u].y, _261, cbSceneParam._m0[3u].x * _260));
    float _490 = (((-0.0) - cbObjMatrix._m0[_242].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_242].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_242].y, cbObjMatrix._m0[_242].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _269, fma(cbSceneParam._m0[3u].y, _268, cbSceneParam._m0[3u].x * _267));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    float _495 = _494 * _484;
    float _496 = _494 * _487;
    float _497 = _494 * _490;
    float _500 = fma(_497, _352, fma(_496, _351, _495 * _350));
    float _503 = fma(_497, _359, fma(_496, _358, _495 * _357));
    float _506 = fma(_497, _370, fma(_496, _369, _495 * _368));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    float _511 = _510 * _500;
    float _512 = _510 * _503;
    float _513 = _510 * _506;
    float _532 = dot(vec3(_511, _512, _513), vec3(float(int(uint(_511 > 0.0) - uint(_511 < 0.0))), float(int(uint(_512 > 0.0) - uint(_512 < 0.0))), float(int(uint(_513 > 0.0) - uint(_513 < 0.0)))));
    float _548 = fma(_191, _352, fma(_190, _351, _350 * _188));
    float _551 = fma(_191, _359, fma(_190, _358, _357 * _188));
    float _554 = fma(_191, _370, fma(_190, _369, _368 * _188));
    float _557 = fma(_300, _554, fma(_295, _551, _548 * _290));
    float _560 = fma(_315, _554, fma(_310, _551, _548 * _305));
    float _563 = fma(_330, _554, fma(_325, _551, _548 * _320));
    float _566 = fma(_563, cbObjMatrix._m0[_228].z, fma(_560, cbObjMatrix._m0[_228].y, _557 * cbObjMatrix._m0[_228].x));
    float _569 = fma(_563, cbObjMatrix._m0[_235].z, fma(_560, cbObjMatrix._m0[_235].y, _557 * cbObjMatrix._m0[_235].x));
    float _572 = fma(_563, cbObjMatrix._m0[_242].z, fma(_560, cbObjMatrix._m0[_242].y, _557 * cbObjMatrix._m0[_242].x));
    float _574 = (-0.0) - _572;
    precise float _586 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _594 = _196 + 1u;
    uint _601 = _196 + 2u;
    precise float _608 = TEXCOORD_1.x * cbInstanceData._m0[_196].x;
    precise float _609 = TEXCOORD_1.y * cbInstanceData._m0[_196].y;
    precise float _610 = _609 + _608;
    precise float _611 = TEXCOORD_1.z * cbInstanceData._m0[_196].z;
    precise float _612 = _611 + _610;
    precise float _613 = 1.0 * cbInstanceData._m0[_196].w;
    precise float _614 = _613 + _612;
    precise float _615 = TEXCOORD_1.x * cbInstanceData._m0[_594].x;
    precise float _616 = TEXCOORD_1.y * cbInstanceData._m0[_594].y;
    precise float _617 = _616 + _615;
    precise float _618 = TEXCOORD_1.z * cbInstanceData._m0[_594].z;
    precise float _619 = _618 + _617;
    precise float _620 = 1.0 * cbInstanceData._m0[_594].w;
    precise float _621 = _620 + _619;
    precise float _622 = TEXCOORD_1.x * cbInstanceData._m0[_601].x;
    precise float _623 = TEXCOORD_1.y * cbInstanceData._m0[_601].y;
    precise float _624 = _623 + _622;
    precise float _625 = TEXCOORD_1.z * cbInstanceData._m0[_601].z;
    precise float _626 = _625 + _624;
    precise float _627 = 1.0 * cbInstanceData._m0[_601].w;
    precise float _628 = _627 + _626;
    precise float _629 = _414 - _614;
    precise float _630 = _421 - _621;
    precise float _631 = _428 - _628;
    precise float _632 = _629 * _629;
    precise float _633 = _630 * _630;
    precise float _634 = _632 + _633;
    precise float _635 = _631 * _631;
    precise float _636 = _634 + _635;
    precise float _638 = cbMtdParam._m0[9u].z * sqrt(_636);
    precise float _639 = _586 + _638;
    precise float _640 = cbPerFrame._m0[22u].x + _639;
    uint _641 = _202.w;
    float _642;
    float _644;
    float _646;
    if (_205 == 0u)
    {
        _642 = 0.0;
        _644 = 0.0;
        _646 = 0.0;
    }
    else
    {
        uint _932 = _202.z;
        precise float _643;
        precise float _645;
        precise float _647;
        float _1075;
        float _1077;
        float _1079;
        float _933 = 0.0;
        float _934 = 0.0;
        float _935 = 0.0;
        uint _936 = _932;
        uint _938 = 0u;
        float _974;
        float _993;
        vec4 _1007;
        float _1008;
        float _1009;
        float _1023;
        float _1024;
        float _1025;
        float _1042;
        float _1043;
        float _1044;
        float _1045;
        bool _1046;
        bool _1047;
        bool _1048;
        precise float _1049;
        precise float _1050;
        precise float _1051;
        float _1052;
        float _1053;
        float _1054;
        precise float _1055;
        bool _1058;
        for (;;)
        {
            uint _940 = _936 & 255u;
            uint _942 = _940 * 24u;
            uvec3 _952 = uvec3(texelFetch(g_forceParam, int(_942)).x, texelFetch(g_forceParam, int(_942 + 1u)).x, texelFetch(g_forceParam, int(_942 + 2u)).x);
            uint _957 = (_940 * 24u) + 4u;
            vec4 _970 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_957)).x, texelFetch(g_forceParam, int(_957 + 1u)).x, texelFetch(g_forceParam, int(_957 + 2u)).x, texelFetch(g_forceParam, int(_957 + 3u)).x));
            _974 = _970.w;
            uint _976 = (_940 * 24u) + 8u;
            vec4 _989 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_976)).x, texelFetch(g_forceParam, int(_976 + 1u)).x, texelFetch(g_forceParam, int(_976 + 2u)).x, texelFetch(g_forceParam, int(_976 + 3u)).x));
            _993 = _989.w;
            uint _996 = (_940 * 24u) + 12u;
            _1007 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_996)).x, texelFetch(g_forceParam, int(_996 + 1u)).x, _1002, texelFetch(g_forceParam, int(_996 + 3u)).x));
            _1008 = _1007.x;
            _1009 = _1007.w;
            uint _1012 = (_940 * 24u) + 16u;
            vec3 _1022 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1012)).x, texelFetch(g_forceParam, int(_1012 + 1u)).x, texelFetch(g_forceParam, int(_1012 + 2u)).x));
            _1023 = _1022.x;
            _1024 = _1022.y;
            _1025 = _1022.z;
            uint _1028 = (_940 * 24u) + 20u;
            vec4 _1041 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1028)).x, texelFetch(g_forceParam, int(_1028 + 1u)).x, texelFetch(g_forceParam, int(_1028 + 2u)).x, texelFetch(g_forceParam, int(_1028 + 3u)).x));
            _1042 = _1041.x;
            _1043 = _1041.y;
            _1044 = _1041.z;
            _1045 = _1041.w;
            _1046 = _952.x == 1u;
            _1047 = _952.y == 1u;
            _1048 = _952.z == 1u;
            _1049 = _614 - _970.x;
            _1050 = _621 - _970.y;
            _1051 = _628 - _970.z;
            _1052 = _1046 ? _989.x : _1049;
            _1053 = _1046 ? _989.y : _1050;
            _1054 = _1046 ? _989.z : _1051;
            _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
            _1058 = _1055 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_1058)
            {
                precise float _1060 = _1049 * _1049;
                precise float _1061 = _1050 * _1050;
                precise float _1062 = _1060 + _1061;
                precise float _1063 = _1051 * _1051;
                precise float _1064 = _1063 + _1062;
                float _1065 = sqrt(_1064);
                float _1066 = inversesqrt(_1055);
                precise float _1067 = _1052 * _1066;
                precise float _1068 = _1053 * _1066;
                precise float _1069 = _1054 * _1066;
                precise float _1072 = _1065 / (isnan(0.001000000047497451305389404296875) ? _1007.y : (isnan(_1007.y) ? 0.001000000047497451305389404296875 : max(_1007.y, 0.001000000047497451305389404296875)));
                precise float _1073 = 1.0 - _1072;
                float _1236 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
                float _1074 = isnan(1.0) ? _1236 : (isnan(_1236) ? 1.0 : min(_1236, 1.0));
                float _1100;
                if (_1048)
                {
                    float _1087 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
                    precise float _1088 = _1049 * _1087;
                    precise float _1089 = _1050 * _1087;
                    precise float _1090 = _1051 * _1087;
                    precise float _1094 = dot(vec3(_1067, _1068, _1069), vec3(_1088, _1089, _1090)) * 0.800000011920928955078125;
                    precise float _1096 = _1094 + 0.20000000298023223876953125;
                    float _1247 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
                    precise float _1099 = _1074 * (isnan(1.0) ? _1247 : (isnan(_1247) ? 1.0 : min(_1247, 1.0)));
                    _1100 = _1099;
                }
                else
                {
                    _1100 = _1074;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_1100 > 0.0)
                {
                    bool _1103 = _1046 && (!_1048);
                    precise float _1105 = _1065 * (-4.0);
                    precise float _1109 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1008 : (isnan(_1008) ? 0.001000000047497451305389404296875 : max(_1008, 0.001000000047497451305389404296875)));
                    precise float _1111 = dot(vec2(_1067, _1069), vec2(_1049, _1051));
                    precise float _1115 = _1109 * _1111;
                    precise float _1116 = float(_1103) * _1115;
                    precise float _1117 = _640 * _1109;
                    precise float _1118 = _1117 - _1116;
                    precise float _1119 = (_1103 ? 0.0 : _1105) + _1118;
                    precise float _1121 = _993 * sin(_1119);
                    precise float _1122 = _1068 * 0.0;
                    precise float _1123 = _1122 - _1069;
                    precise float _1124 = _1069 * 0.0;
                    precise float _1125 = _1067 * 0.0;
                    precise float _1126 = _1124 - _1125;
                    precise float _1127 = _1067 - _1122;
                    precise float _1128 = _1009 * _1121;
                    float _1129 = _1046 ? _1128 : 0.0;
                    float _1171;
                    if (_1047)
                    {
                        precise float _1132 = _1023 * 2.0;
                        precise float _1134 = _1043 + _1044;
                        precise float _1135 = _1045 + _1134;
                        precise float _1137 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1023 : (isnan(_1023) ? 0.001000000047497451305389404296875 : max(_1023, 0.001000000047497451305389404296875)));
                        precise float _1138 = _1042 * _1137;
                        precise float _1139 = (-0.0) - _1067;
                        precise float _1143 = dot(vec2(_1069, _1139), vec2(_1049, _1051)) / _1132;
                        precise float _1144 = (-0.0) - _1143;
                        float _1147 = fract(abs(_1143));
                        precise float _1148 = (-0.0) - _1147;
                        precise float _1150 = _1132 * ((_1143 >= _1144) ? _1147 : _1148);
                        precise float _1151 = _1150 * 6.283184051513671875;
                        precise float _1152 = _1151 / _1132;
                        precise float _1154 = (isnan(5.0) ? _1023 : (isnan(_1023) ? 5.0 : min(_1023, 5.0))) * sin(_1152);
                        precise float _1155 = _1111 + _1154;
                        precise float _1156 = _1023 * 0.25;
                        precise float _1158 = _640 * _1042;
                        precise float _1159 = _1158 - _1156;
                        precise float _1160 = _1159 - _1155;
                        precise float _1161 = _1042 * _1135;
                        precise float _1163 = _1160 / (isnan(0.001000000047497451305389404296875) ? _1161 : (isnan(_1161) ? 0.001000000047497451305389404296875 : max(_1161, 0.001000000047497451305389404296875)));
                        float _1164 = fract(_1163);
                        precise float _1166 = 1.0 - _1164;
                        float _1167 = (_1163 < 0.0) ? _1166 : _1164;
                        precise float _1168 = _1134 / _1135;
                        precise float _1169 = _1043 / _1135;
                        float _1190;
                        if (_1167 < _1169)
                        {
                            precise float _1188 = _1167 / _1169;
                            _1190 = _1188;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_1167 < _1168)
                            {
                                precise float _1200 = _1167 - _1169;
                                precise float _1201 = _1168 - _1169;
                                precise float _1202 = _1200 / _1201;
                                precise float _1191 = 1.0 - _1202;
                                frontier_phi_14_13_ladder = _1191;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1190 = frontier_phi_14_13_ladder;
                        }
                        precise float _1192 = _1025 * _1190;
                        precise float _1193 = _1137 * _1111;
                        precise float _1194 = _640 * _1138;
                        precise float _1195 = _1194 - _1193;
                        precise float _1197 = _1024 + sin(_1195);
                        precise float _1199 = _1192 * abs(_1197);
                        precise float _1172 = _1199 + 0.0;
                        _1171 = _1172;
                    }
                    else
                    {
                        _1171 = 0.0;
                    }
                    precise float _1173 = _974 + _1121;
                    precise float _1174 = _1173 + _1171;
                    precise float _1175 = _1067 * _1174;
                    precise float _1176 = _1068 * _1174;
                    precise float _1177 = _1069 * _1174;
                    precise float _1178 = _1123 * _1129;
                    precise float _1179 = _1126 * _1129;
                    precise float _1180 = _1127 * _1129;
                    precise float _1181 = _1178 + _1175;
                    precise float _1182 = _1179 + _1176;
                    precise float _1183 = _1180 + _1177;
                    precise float _1184 = _1100 * _1181;
                    precise float _1185 = _1100 * _1182;
                    precise float _1186 = _1100 * _1183;
                    precise float _1076 = _1184 * 0.0500000007450580596923828125;
                    precise float _1078 = _1185 * 0.0500000007450580596923828125;
                    precise float _1080 = _1186 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _1076;
                    frontier_phi_5_pred_7_ladder_1 = _1078;
                    frontier_phi_5_pred_7_ladder_2 = _1080;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _1075 = frontier_phi_5_pred;
            _1077 = frontier_phi_5_pred_1;
            _1079 = frontier_phi_5_pred_2;
            _643 = _933 + _1075;
            _645 = _934 + _1077;
            _647 = _935 + _1079;
            uint _939 = _938 + 1u;
            if (_939 == _205)
            {
                break;
            }
            else
            {
                _933 = _643;
                _934 = _645;
                _935 = _647;
                _936 = (_938 != 3u) ? (_936 >> 8u) : _641;
                _938 = _939;
                continue;
            }
        }
        _642 = _643;
        _644 = _645;
        _646 = _647;
    }
    precise float _648 = _642 * _642;
    precise float _649 = _644 * _644;
    precise float _650 = _648 + _649;
    precise float _651 = _646 * _646;
    precise float _652 = _650 + _651;
    float _653 = sqrt(_652);
    bool _654 = _653 < 0.00011000000085914507508277893066406;
    float _659 = inversesqrt(dot(vec3(cbInstanceData._m0[_196].x, cbInstanceData._m0[_594].x, cbInstanceData._m0[_601].x), vec3(cbInstanceData._m0[_196].x, cbInstanceData._m0[_594].x, cbInstanceData._m0[_601].x)));
    precise float _660 = cbInstanceData._m0[_196].x * _659;
    precise float _661 = cbInstanceData._m0[_594].x * _659;
    precise float _662 = cbInstanceData._m0[_601].x * _659;
    float _666 = inversesqrt(dot(vec3(cbInstanceData._m0[_196].y, cbInstanceData._m0[_594].y, cbInstanceData._m0[_601].y), vec3(cbInstanceData._m0[_196].y, cbInstanceData._m0[_594].y, cbInstanceData._m0[_601].y)));
    precise float _667 = cbInstanceData._m0[_196].y * _666;
    precise float _668 = cbInstanceData._m0[_594].y * _666;
    precise float _669 = cbInstanceData._m0[_601].y * _666;
    float _673 = inversesqrt(dot(vec3(cbInstanceData._m0[_196].z, cbInstanceData._m0[_594].z, cbInstanceData._m0[_601].z), vec3(cbInstanceData._m0[_196].z, cbInstanceData._m0[_594].z, cbInstanceData._m0[_601].z)));
    precise float _674 = cbInstanceData._m0[_196].z * _673;
    precise float _675 = cbInstanceData._m0[_594].z * _673;
    precise float _676 = cbInstanceData._m0[_601].z * _673;
    precise float _677 = _660 * 0.0;
    precise float _678 = 1.0 * _667;
    precise float _679 = _678 + _677;
    precise float _680 = 0.0 * _674;
    precise float _681 = _680 + _679;
    precise float _682 = _661 * 0.0;
    precise float _683 = 1.0 * _668;
    precise float _684 = _683 + _682;
    precise float _685 = 0.0 * _675;
    precise float _686 = _685 + _684;
    precise float _687 = _662 * 0.0;
    precise float _688 = 1.0 * _669;
    precise float _689 = _688 + _687;
    precise float _690 = 0.0 * _676;
    precise float _691 = _690 + _689;
    float _695 = inversesqrt(dot(vec3(_642, _644, _646), vec3(_642, _644, _646)));
    precise float _696 = _642 * _695;
    precise float _697 = _644 * _695;
    precise float _698 = _646 * _695;
    precise float _699 = _686 * _698;
    precise float _700 = _691 * _697;
    precise float _701 = _699 - _700;
    precise float _702 = _691 * _696;
    precise float _703 = _681 * _698;
    precise float _704 = _702 - _703;
    precise float _705 = _681 * _697;
    precise float _706 = _686 * _696;
    precise float _707 = _705 - _706;
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    precise float _712 = _711 * _701;
    precise float _713 = _711 * _704;
    precise float _714 = _711 * _707;
    precise float _715 = _653 + 1.0;
    precise float _717 = cbMtdParam._m0[9u].w * log2(_715);
    precise float _718 = dot(vec3(_712, _713, _714), vec3(_629, _630, _631));
    precise float _721 = _712 * _718;
    precise float _722 = _713 * _718;
    precise float _723 = _714 * _718;
    precise float _724 = _614 + _721;
    precise float _725 = _621 + _722;
    precise float _726 = _628 + _723;
    precise float _727 = _414 - _724;
    precise float _728 = _421 - _725;
    precise float _729 = _428 - _726;
    precise float _730 = _713 * _729;
    precise float _731 = _714 * _728;
    precise float _732 = _730 - _731;
    precise float _733 = _714 * _727;
    precise float _734 = _712 * _729;
    precise float _735 = _733 - _734;
    precise float _736 = _712 * _728;
    precise float _737 = _713 * _727;
    precise float _738 = _736 - _737;
    float _739 = sin(_717);
    float _740 = cos(_717);
    precise float _741 = _727 * _740;
    precise float _742 = _728 * _740;
    precise float _743 = _729 * _740;
    precise float _744 = _739 * _732;
    precise float _745 = _739 * _735;
    precise float _746 = _739 * _738;
    precise float _747 = _741 + _744;
    precise float _748 = _742 + _745;
    precise float _749 = _746 + _743;
    precise float _750 = _724 + _747;
    precise float _751 = _725 + _748;
    precise float _752 = _726 + _749;
    precise float _753 = _750 - _414;
    precise float _754 = _751 - _421;
    precise float _755 = _752 - _428;
    float _756 = _654 ? 0.0 : _753;
    float _757 = _654 ? 0.0 : _754;
    float _758 = _654 ? 0.0 : _755;
    precise float _759 = _414 + _756;
    precise float _760 = _421 + _757;
    precise float _761 = _428 + _758;
    float _769 = ((fma(_406, cbPrevObjMatrix._m0[_228].z, fma(_405, cbPrevObjMatrix._m0[_228].y, cbPrevObjMatrix._m0[_228].x * _404)) + cbPrevObjMatrix._m0[_228].w) - cbSceneParam._m0[28u].x) + _756;
    float _771 = ((fma(_406, cbPrevObjMatrix._m0[_235].z, fma(_405, cbPrevObjMatrix._m0[_235].y, cbPrevObjMatrix._m0[_235].x * _404)) + cbPrevObjMatrix._m0[_235].w) - cbSceneParam._m0[28u].y) + _757;
    float _773 = ((fma(_406, cbPrevObjMatrix._m0[_242].z, fma(_405, cbPrevObjMatrix._m0[_242].y, cbPrevObjMatrix._m0[_242].x * _404)) + cbPrevObjMatrix._m0[_242].w) - cbSceneParam._m0[28u].z) + _758;
    precise float _818 = _759 - cbSceneParam._m0[3u].x;
    precise float _819 = _760 - cbSceneParam._m0[3u].y;
    precise float _820 = _761 - cbSceneParam._m0[3u].z;
    precise float _848 = _818 * cbSceneParam._m0[24u].x;
    precise float _849 = _819 * cbSceneParam._m0[24u].y;
    precise float _850 = _849 + _848;
    precise float _851 = _820 * cbSceneParam._m0[24u].z;
    precise float _852 = _851 + _850;
    precise float _853 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _854 = _853 + _852;
    precise float _855 = _818 * cbSceneParam._m0[25u].x;
    precise float _856 = _819 * cbSceneParam._m0[25u].y;
    precise float _857 = _856 + _855;
    precise float _858 = _820 * cbSceneParam._m0[25u].z;
    precise float _859 = _858 + _857;
    precise float _860 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _861 = _860 + _859;
    precise float _862 = _818 * cbSceneParam._m0[26u].x;
    precise float _863 = _819 * cbSceneParam._m0[26u].y;
    precise float _864 = _863 + _862;
    precise float _865 = _820 * cbSceneParam._m0[26u].z;
    precise float _866 = _865 + _864;
    precise float _867 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _868 = _867 + _866;
    precise float _869 = _818 * cbSceneParam._m0[27u].x;
    precise float _870 = _819 * cbSceneParam._m0[27u].y;
    precise float _871 = _870 + _869;
    precise float _872 = _820 * cbSceneParam._m0[27u].z;
    precise float _873 = _872 + _871;
    precise float _874 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _875 = _874 + _873;
    gl_Position.x = _854;
    gl_Position.y = _861;
    gl_Position.z = _868;
    gl_Position.w = _875;
    POSITION_1.x = _854;
    POSITION_1.y = _861;
    POSITION_1.z = _868;
    POSITION_1.w = _875;
    NORMAL_1.x = _566;
    NORMAL_1.y = _569;
    NORMAL_1.z = _572;
    NORMAL_1.w = float(_219);
    TANGENT_1.x = (-0.0) - (_566 * _569);
    TANGENT_1.y = (_566 * _566) - (_572 * _574);
    TANGENT_1.z = _569 * _574;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = (((_510 * (_506 + _500)) / _532) + 1.0) * 0.5;
    TEXCOORD_2.w = (((_510 * (_506 - _500)) / _532) + 1.0) * 0.5;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_10.x = _854;
    TEXCOORD_10.y = _861;
    TEXCOORD_10.z = _868;
    TEXCOORD_10.w = _875;
    TEXCOORD_11.x = fma(_773, cbSceneParam._m0[29u].z, fma(_771, cbSceneParam._m0[29u].y, _769 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_11.y = fma(_773, cbSceneParam._m0[30u].z, fma(_771, cbSceneParam._m0[30u].y, _769 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_11.z = fma(_773, cbSceneParam._m0[31u].z, fma(_771, cbSceneParam._m0[31u].y, _769 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_11.w = fma(_773, cbSceneParam._m0[32u].z, fma(_771, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _769)) + cbSceneParam._m0[32u].w;
    TEXCOORD_12.x = _566;
    TEXCOORD_12.y = _569;
    TEXCOORD_12.z = _572;
    gl_ClipDistance[0u] = dot(vec4(_854, _861, _868, _875), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_854, _861, _868, _875), vec4(cbInstanceData._m0[_221 + 3u]));
}


