#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out vec2 TEXCOORD_9;
layout(location = 5, component = 2) out float TEXCOORD_13;

uint _894;

void main()
{
    uint _83 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_13 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    precise float _166 = float(NORMAL.x) + (-127.0);
    precise float _168 = float(NORMAL.y) + (-127.0);
    precise float _169 = float(NORMAL.z) + (-127.0);
    precise float _170 = _166 * 0.0078740157186985015869140625;
    precise float _172 = _168 * 0.0078740157186985015869140625;
    precise float _173 = _169 * 0.0078740157186985015869140625;
    uint _178 = _83 * 13u;
    uvec4 _184 = floatBitsToUint(cbInstanceData._m0[_178 + 7u]);
    uint _187 = min(_184.y, 8u);
    precise float _191 = POSITION.x + 0.0;
    precise float _192 = POSITION.y + 0.0;
    precise float _193 = POSITION.z + 0.0;
    uint _198 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _83;
    uvec4 _200 = texelFetch(g_InstanceIndexBuffer, int(_198));
    uint _201 = _200.x;
    uint _203 = _201 * 13u;
    uint _210 = (floatBitsToUint(cbInstanceData._m0[_203 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _217 = _210 + 1u;
    uint _224 = _210 + 2u;
    float _234 = inversesqrt(dot(vec3(cbObjMatrix._m0[_210].x, cbObjMatrix._m0[_217].x, cbObjMatrix._m0[_224].x), vec3(cbObjMatrix._m0[_210].x, cbObjMatrix._m0[_217].x, cbObjMatrix._m0[_224].x)));
    precise float _235 = cbObjMatrix._m0[_210].x * _234;
    precise float _236 = cbObjMatrix._m0[_217].x * _234;
    precise float _237 = cbObjMatrix._m0[_224].x * _234;
    float _241 = inversesqrt(dot(vec3(cbObjMatrix._m0[_210].y, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_224].y), vec3(cbObjMatrix._m0[_210].y, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_224].y)));
    precise float _242 = cbObjMatrix._m0[_210].y * _241;
    precise float _243 = cbObjMatrix._m0[_217].y * _241;
    precise float _244 = cbObjMatrix._m0[_224].y * _241;
    float _248 = inversesqrt(dot(vec3(cbObjMatrix._m0[_210].z, cbObjMatrix._m0[_217].z, cbObjMatrix._m0[_224].z), vec3(cbObjMatrix._m0[_210].z, cbObjMatrix._m0[_217].z, cbObjMatrix._m0[_224].z)));
    precise float _249 = cbObjMatrix._m0[_210].z * _248;
    precise float _250 = cbObjMatrix._m0[_217].z * _248;
    precise float _251 = cbObjMatrix._m0[_224].z * _248;
    precise float _268 = _235 * cbSceneParam._m0[5u].x;
    precise float _269 = _236 * cbSceneParam._m0[5u].y;
    precise float _270 = _269 + _268;
    precise float _271 = _237 * cbSceneParam._m0[5u].z;
    precise float _272 = _271 + _270;
    precise float _273 = _235 * cbSceneParam._m0[6u].x;
    precise float _274 = _236 * cbSceneParam._m0[6u].y;
    precise float _275 = _274 + _273;
    precise float _276 = _237 * cbSceneParam._m0[6u].z;
    precise float _277 = _276 + _275;
    precise float _278 = _235 * cbSceneParam._m0[7u].x;
    precise float _279 = _236 * cbSceneParam._m0[7u].y;
    precise float _280 = _279 + _278;
    precise float _281 = _237 * cbSceneParam._m0[7u].z;
    precise float _282 = _281 + _280;
    precise float _283 = _242 * cbSceneParam._m0[5u].x;
    precise float _284 = _243 * cbSceneParam._m0[5u].y;
    precise float _285 = _284 + _283;
    precise float _286 = _244 * cbSceneParam._m0[5u].z;
    precise float _287 = _286 + _285;
    precise float _288 = _242 * cbSceneParam._m0[6u].x;
    precise float _289 = _243 * cbSceneParam._m0[6u].y;
    precise float _290 = _289 + _288;
    precise float _291 = _244 * cbSceneParam._m0[6u].z;
    precise float _292 = _291 + _290;
    precise float _293 = _242 * cbSceneParam._m0[7u].x;
    precise float _294 = _243 * cbSceneParam._m0[7u].y;
    precise float _295 = _294 + _293;
    precise float _296 = _244 * cbSceneParam._m0[7u].z;
    precise float _297 = _296 + _295;
    precise float _298 = _249 * cbSceneParam._m0[5u].x;
    precise float _299 = _250 * cbSceneParam._m0[5u].y;
    precise float _300 = _299 + _298;
    precise float _301 = _251 * cbSceneParam._m0[5u].z;
    precise float _302 = _301 + _300;
    precise float _303 = _249 * cbSceneParam._m0[6u].x;
    precise float _304 = _250 * cbSceneParam._m0[6u].y;
    precise float _305 = _304 + _303;
    precise float _306 = _251 * cbSceneParam._m0[6u].z;
    precise float _307 = _306 + _305;
    precise float _308 = _249 * cbSceneParam._m0[7u].x;
    precise float _309 = _250 * cbSceneParam._m0[7u].y;
    precise float _310 = _309 + _308;
    precise float _311 = _251 * cbSceneParam._m0[7u].z;
    precise float _312 = _311 + _310;
    precise float _313 = _172 * 0.0;
    precise float _314 = _313 - _173;
    precise float _315 = _173 * 0.0;
    precise float _316 = _170 * 0.0;
    precise float _317 = _315 - _316;
    precise float _318 = _170 - _313;
    precise float _319 = _173 * _317;
    precise float _320 = _172 * _318;
    precise float _321 = _319 - _320;
    precise float _322 = _170 * _318;
    precise float _323 = _173 * _314;
    precise float _324 = _322 - _323;
    precise float _325 = _172 * _314;
    precise float _326 = _170 * _317;
    precise float _327 = _325 - _326;
    float _331 = inversesqrt(dot(vec3(_314, _317, _318), vec3(_314, _317, _318)));
    precise float _332 = _314 * _331;
    precise float _333 = _317 * _331;
    precise float _334 = _318 * _331;
    float _338 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    precise float _339 = _321 * _338;
    precise float _340 = _324 * _338;
    precise float _341 = _327 * _338;
    precise float _342 = (-0.0) - _170;
    precise float _344 = (-0.0) - _172;
    precise float _345 = (-0.0) - _173;
    float _349 = inversesqrt(dot(vec3(_342, _344, _345), vec3(_342, _344, _345)));
    precise float _350 = _349 * _342;
    precise float _351 = _349 * _344;
    precise float _352 = _349 * _345;
    precise float _353 = _191 - TEXCOORD_1.x;
    precise float _354 = _192 - TEXCOORD_1.y;
    precise float _355 = _193 - TEXCOORD_1.z;
    precise float _356 = _353 * _332;
    precise float _357 = _354 * _333;
    precise float _358 = _357 + _356;
    precise float _359 = _355 * _334;
    precise float _360 = _359 + _358;
    precise float _361 = _353 * _339;
    precise float _362 = _354 * _340;
    precise float _363 = _362 + _361;
    precise float _364 = _355 * _341;
    precise float _365 = _364 + _363;
    precise float _366 = _353 * _350;
    precise float _367 = _354 * _351;
    precise float _368 = _367 + _366;
    precise float _369 = _355 * _352;
    precise float _370 = _369 + _368;
    precise float _371 = _272 * _360;
    precise float _372 = _277 * _365;
    precise float _373 = _372 + _371;
    precise float _374 = _282 * _370;
    precise float _375 = _374 + _373;
    precise float _376 = _287 * _360;
    precise float _377 = _292 * _365;
    precise float _378 = _377 + _376;
    precise float _379 = _297 * _370;
    precise float _380 = _379 + _378;
    precise float _381 = _302 * _360;
    precise float _382 = _307 * _365;
    precise float _383 = _382 + _381;
    precise float _384 = _312 * _370;
    precise float _385 = _384 + _383;
    precise float _386 = TEXCOORD_1.x + _375;
    precise float _387 = TEXCOORD_1.y + _380;
    precise float _388 = TEXCOORD_1.z + _385;
    precise float _389 = cbObjMatrix._m0[_210].x * _386;
    precise float _390 = _387 * cbObjMatrix._m0[_210].y;
    precise float _391 = _390 + _389;
    precise float _392 = _388 * cbObjMatrix._m0[_210].z;
    precise float _393 = _392 + _391;
    precise float _394 = 1.0 * cbObjMatrix._m0[_210].w;
    precise float _396 = _394 + _393;
    precise float _397 = cbObjMatrix._m0[_217].x * _386;
    precise float _398 = _387 * cbObjMatrix._m0[_217].y;
    precise float _399 = _398 + _397;
    precise float _400 = _388 * cbObjMatrix._m0[_217].z;
    precise float _401 = _400 + _399;
    precise float _402 = 1.0 * cbObjMatrix._m0[_217].w;
    precise float _403 = _402 + _401;
    precise float _404 = cbObjMatrix._m0[_224].x * _386;
    precise float _405 = _387 * cbObjMatrix._m0[_224].y;
    precise float _406 = _405 + _404;
    precise float _407 = _388 * cbObjMatrix._m0[_224].z;
    precise float _408 = _407 + _406;
    precise float _409 = 1.0 * cbObjMatrix._m0[_224].w;
    precise float _410 = _409 + _408;
    float _436 = (((-0.0) - cbObjMatrix._m0[_210].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_210].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_210].y, cbObjMatrix._m0[_210].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _237, fma(cbSceneParam._m0[3u].y, _236, cbSceneParam._m0[3u].x * _235));
    float _439 = (((-0.0) - cbObjMatrix._m0[_217].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_217].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_217].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _244, fma(cbSceneParam._m0[3u].y, _243, cbSceneParam._m0[3u].x * _242));
    float _442 = (((-0.0) - cbObjMatrix._m0[_224].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_224].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_224].y, cbObjMatrix._m0[_224].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _251, fma(cbSceneParam._m0[3u].y, _250, cbSceneParam._m0[3u].x * _249));
    float _446 = inversesqrt(dot(vec3(_436, _439, _442), vec3(_436, _439, _442)));
    float _447 = _446 * _436;
    float _448 = _446 * _439;
    float _449 = _446 * _442;
    float _452 = fma(_449, _334, fma(_448, _333, _447 * _332));
    float _455 = fma(_449, _341, fma(_448, _340, _447 * _339));
    float _458 = fma(_449, _352, fma(_448, _351, _447 * _350));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _484 = dot(vec3(_463, _464, _465), vec3(float(int(uint(_463 > 0.0) - uint(_463 < 0.0))), float(int(uint(_464 > 0.0) - uint(_464 < 0.0))), float(int(uint(_465 > 0.0) - uint(_465 < 0.0)))));
    float _498 = cbSceneParam._m0[3u].x - _396;
    float _499 = cbSceneParam._m0[3u].y - _403;
    float _500 = cbSceneParam._m0[3u].z - _410;
    float _509 = fma(_173, _334, fma(_172, _333, _332 * _170));
    float _512 = fma(_173, _341, fma(_172, _340, _339 * _170));
    float _515 = fma(_173, _352, fma(_172, _351, _350 * _170));
    float _518 = fma(_282, _515, fma(_277, _512, _509 * _272));
    float _521 = fma(_297, _515, fma(_292, _512, _509 * _287));
    float _524 = fma(_312, _515, fma(_307, _512, _509 * _302));
    float _527 = fma(_524, cbObjMatrix._m0[_210].z, fma(_521, cbObjMatrix._m0[_210].y, _518 * cbObjMatrix._m0[_210].x));
    float _530 = fma(_524, cbObjMatrix._m0[_217].z, fma(_521, cbObjMatrix._m0[_217].y, _518 * cbObjMatrix._m0[_217].x));
    float _533 = fma(_524, cbObjMatrix._m0[_224].z, fma(_521, cbObjMatrix._m0[_224].y, _518 * cbObjMatrix._m0[_224].x));
    float _535 = (-0.0) - _533;
    precise float _547 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _555 = _178 + 1u;
    uint _562 = _178 + 2u;
    precise float _569 = TEXCOORD_1.x * cbInstanceData._m0[_178].x;
    precise float _570 = TEXCOORD_1.y * cbInstanceData._m0[_178].y;
    precise float _571 = _570 + _569;
    precise float _572 = TEXCOORD_1.z * cbInstanceData._m0[_178].z;
    precise float _573 = _572 + _571;
    precise float _574 = 1.0 * cbInstanceData._m0[_178].w;
    precise float _575 = _574 + _573;
    precise float _576 = TEXCOORD_1.x * cbInstanceData._m0[_555].x;
    precise float _577 = TEXCOORD_1.y * cbInstanceData._m0[_555].y;
    precise float _578 = _577 + _576;
    precise float _579 = TEXCOORD_1.z * cbInstanceData._m0[_555].z;
    precise float _580 = _579 + _578;
    precise float _581 = 1.0 * cbInstanceData._m0[_555].w;
    precise float _582 = _581 + _580;
    precise float _583 = TEXCOORD_1.x * cbInstanceData._m0[_562].x;
    precise float _584 = TEXCOORD_1.y * cbInstanceData._m0[_562].y;
    precise float _585 = _584 + _583;
    precise float _586 = TEXCOORD_1.z * cbInstanceData._m0[_562].z;
    precise float _587 = _586 + _585;
    precise float _588 = 1.0 * cbInstanceData._m0[_562].w;
    precise float _589 = _588 + _587;
    precise float _590 = _396 - _575;
    precise float _591 = _403 - _582;
    precise float _592 = _410 - _589;
    precise float _593 = _590 * _590;
    precise float _594 = _591 * _591;
    precise float _595 = _593 + _594;
    precise float _596 = _592 * _592;
    precise float _597 = _595 + _596;
    precise float _599 = cbMtdParam._m0[9u].z * sqrt(_597);
    precise float _600 = _547 + _599;
    precise float _601 = cbPerFrame._m0[22u].x + _600;
    uint _602 = _184.w;
    float _603;
    float _605;
    float _607;
    if (_187 == 0u)
    {
        _603 = 0.0;
        _605 = 0.0;
        _607 = 0.0;
    }
    else
    {
        uint _824 = _184.z;
        precise float _604;
        precise float _606;
        precise float _608;
        float _967;
        float _969;
        float _971;
        float _825 = 0.0;
        float _826 = 0.0;
        float _827 = 0.0;
        uint _828 = _824;
        uint _830 = 0u;
        float _866;
        float _885;
        vec4 _899;
        float _900;
        float _901;
        float _915;
        float _916;
        float _917;
        float _934;
        float _935;
        float _936;
        float _937;
        bool _938;
        bool _939;
        bool _940;
        precise float _941;
        precise float _942;
        precise float _943;
        float _944;
        float _945;
        float _946;
        precise float _947;
        bool _950;
        for (;;)
        {
            uint _832 = _828 & 255u;
            uint _834 = _832 * 24u;
            uvec3 _844 = uvec3(texelFetch(g_forceParam, int(_834)).x, texelFetch(g_forceParam, int(_834 + 1u)).x, texelFetch(g_forceParam, int(_834 + 2u)).x);
            uint _849 = (_832 * 24u) + 4u;
            vec4 _862 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_849)).x, texelFetch(g_forceParam, int(_849 + 1u)).x, texelFetch(g_forceParam, int(_849 + 2u)).x, texelFetch(g_forceParam, int(_849 + 3u)).x));
            _866 = _862.w;
            uint _868 = (_832 * 24u) + 8u;
            vec4 _881 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_868)).x, texelFetch(g_forceParam, int(_868 + 1u)).x, texelFetch(g_forceParam, int(_868 + 2u)).x, texelFetch(g_forceParam, int(_868 + 3u)).x));
            _885 = _881.w;
            uint _888 = (_832 * 24u) + 12u;
            _899 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_888)).x, texelFetch(g_forceParam, int(_888 + 1u)).x, _894, texelFetch(g_forceParam, int(_888 + 3u)).x));
            _900 = _899.x;
            _901 = _899.w;
            uint _904 = (_832 * 24u) + 16u;
            vec3 _914 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_904)).x, texelFetch(g_forceParam, int(_904 + 1u)).x, texelFetch(g_forceParam, int(_904 + 2u)).x));
            _915 = _914.x;
            _916 = _914.y;
            _917 = _914.z;
            uint _920 = (_832 * 24u) + 20u;
            vec4 _933 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_920)).x, texelFetch(g_forceParam, int(_920 + 1u)).x, texelFetch(g_forceParam, int(_920 + 2u)).x, texelFetch(g_forceParam, int(_920 + 3u)).x));
            _934 = _933.x;
            _935 = _933.y;
            _936 = _933.z;
            _937 = _933.w;
            _938 = _844.x == 1u;
            _939 = _844.y == 1u;
            _940 = _844.z == 1u;
            _941 = _575 - _862.x;
            _942 = _582 - _862.y;
            _943 = _589 - _862.z;
            _944 = _938 ? _881.x : _941;
            _945 = _938 ? _881.y : _942;
            _946 = _938 ? _881.z : _943;
            _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
            _950 = _947 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_950)
            {
                precise float _952 = _941 * _941;
                precise float _953 = _942 * _942;
                precise float _954 = _952 + _953;
                precise float _955 = _943 * _943;
                precise float _956 = _955 + _954;
                float _957 = sqrt(_956);
                float _958 = inversesqrt(_947);
                precise float _959 = _944 * _958;
                precise float _960 = _945 * _958;
                precise float _961 = _946 * _958;
                precise float _964 = _957 / (isnan(0.001000000047497451305389404296875) ? _899.y : (isnan(_899.y) ? 0.001000000047497451305389404296875 : max(_899.y, 0.001000000047497451305389404296875)));
                precise float _965 = 1.0 - _964;
                float _1127 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
                float _966 = isnan(1.0) ? _1127 : (isnan(_1127) ? 1.0 : min(_1127, 1.0));
                float _992;
                if (_940)
                {
                    float _979 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
                    precise float _980 = _941 * _979;
                    precise float _981 = _942 * _979;
                    precise float _982 = _943 * _979;
                    precise float _986 = dot(vec3(_959, _960, _961), vec3(_980, _981, _982)) * 0.800000011920928955078125;
                    precise float _988 = _986 + 0.20000000298023223876953125;
                    float _1138 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
                    precise float _991 = _966 * (isnan(1.0) ? _1138 : (isnan(_1138) ? 1.0 : min(_1138, 1.0)));
                    _992 = _991;
                }
                else
                {
                    _992 = _966;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_992 > 0.0)
                {
                    bool _995 = _938 && (!_940);
                    precise float _997 = _957 * (-4.0);
                    precise float _1001 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _900 : (isnan(_900) ? 0.001000000047497451305389404296875 : max(_900, 0.001000000047497451305389404296875)));
                    precise float _1003 = dot(vec2(_959, _961), vec2(_941, _943));
                    precise float _1006 = _1001 * _1003;
                    precise float _1007 = float(_995) * _1006;
                    precise float _1008 = _601 * _1001;
                    precise float _1009 = _1008 - _1007;
                    precise float _1010 = (_995 ? 0.0 : _997) + _1009;
                    precise float _1012 = _885 * sin(_1010);
                    precise float _1013 = _960 * 0.0;
                    precise float _1014 = _1013 - _961;
                    precise float _1015 = _961 * 0.0;
                    precise float _1016 = _959 * 0.0;
                    precise float _1017 = _1015 - _1016;
                    precise float _1018 = _959 - _1013;
                    precise float _1019 = _901 * _1012;
                    float _1020 = _938 ? _1019 : 0.0;
                    float _1062;
                    if (_939)
                    {
                        precise float _1023 = _915 * 2.0;
                        precise float _1025 = _935 + _936;
                        precise float _1026 = _937 + _1025;
                        precise float _1028 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _915 : (isnan(_915) ? 0.001000000047497451305389404296875 : max(_915, 0.001000000047497451305389404296875)));
                        precise float _1029 = _934 * _1028;
                        precise float _1030 = (-0.0) - _959;
                        precise float _1034 = dot(vec2(_961, _1030), vec2(_941, _943)) / _1023;
                        precise float _1035 = (-0.0) - _1034;
                        float _1038 = fract(abs(_1034));
                        precise float _1039 = (-0.0) - _1038;
                        precise float _1041 = _1023 * ((_1034 >= _1035) ? _1038 : _1039);
                        precise float _1042 = _1041 * 6.283184051513671875;
                        precise float _1043 = _1042 / _1023;
                        precise float _1045 = (isnan(5.0) ? _915 : (isnan(_915) ? 5.0 : min(_915, 5.0))) * sin(_1043);
                        precise float _1046 = _1003 + _1045;
                        precise float _1047 = _915 * 0.25;
                        precise float _1049 = _601 * _934;
                        precise float _1050 = _1049 - _1047;
                        precise float _1051 = _1050 - _1046;
                        precise float _1052 = _934 * _1026;
                        precise float _1054 = _1051 / (isnan(0.001000000047497451305389404296875) ? _1052 : (isnan(_1052) ? 0.001000000047497451305389404296875 : max(_1052, 0.001000000047497451305389404296875)));
                        float _1055 = fract(_1054);
                        precise float _1057 = 1.0 - _1055;
                        float _1058 = (_1054 < 0.0) ? _1057 : _1055;
                        precise float _1059 = _1025 / _1026;
                        precise float _1060 = _935 / _1026;
                        float _1081;
                        if (_1058 < _1060)
                        {
                            precise float _1079 = _1058 / _1060;
                            _1081 = _1079;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_1058 < _1059)
                            {
                                precise float _1091 = _1058 - _1060;
                                precise float _1092 = _1059 - _1060;
                                precise float _1093 = _1091 / _1092;
                                precise float _1082 = 1.0 - _1093;
                                frontier_phi_14_13_ladder = _1082;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _1081 = frontier_phi_14_13_ladder;
                        }
                        precise float _1083 = _917 * _1081;
                        precise float _1084 = _1028 * _1003;
                        precise float _1085 = _601 * _1029;
                        precise float _1086 = _1085 - _1084;
                        precise float _1088 = _916 + sin(_1086);
                        precise float _1090 = _1083 * abs(_1088);
                        precise float _1063 = _1090 + 0.0;
                        _1062 = _1063;
                    }
                    else
                    {
                        _1062 = 0.0;
                    }
                    precise float _1064 = _866 + _1012;
                    precise float _1065 = _1064 + _1062;
                    precise float _1066 = _959 * _1065;
                    precise float _1067 = _960 * _1065;
                    precise float _1068 = _961 * _1065;
                    precise float _1069 = _1014 * _1020;
                    precise float _1070 = _1017 * _1020;
                    precise float _1071 = _1018 * _1020;
                    precise float _1072 = _1069 + _1066;
                    precise float _1073 = _1070 + _1067;
                    precise float _1074 = _1071 + _1068;
                    precise float _1075 = _992 * _1072;
                    precise float _1076 = _992 * _1073;
                    precise float _1077 = _992 * _1074;
                    precise float _968 = _1075 * 0.0500000007450580596923828125;
                    precise float _970 = _1076 * 0.0500000007450580596923828125;
                    precise float _972 = _1077 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _968;
                    frontier_phi_5_pred_7_ladder_1 = _970;
                    frontier_phi_5_pred_7_ladder_2 = _972;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _967 = frontier_phi_5_pred;
            _969 = frontier_phi_5_pred_1;
            _971 = frontier_phi_5_pred_2;
            _604 = _825 + _967;
            _606 = _826 + _969;
            _608 = _827 + _971;
            uint _831 = _830 + 1u;
            if (_831 == _187)
            {
                break;
            }
            else
            {
                _825 = _604;
                _826 = _606;
                _827 = _608;
                _828 = (_830 != 3u) ? (_828 >> 8u) : _602;
                _830 = _831;
                continue;
            }
        }
        _603 = _604;
        _605 = _606;
        _607 = _608;
    }
    precise float _609 = _603 * _603;
    precise float _610 = _605 * _605;
    precise float _611 = _609 + _610;
    precise float _612 = _607 * _607;
    precise float _613 = _611 + _612;
    float _614 = sqrt(_613);
    bool _615 = _614 < 0.00011000000085914507508277893066406;
    float _620 = inversesqrt(dot(vec3(cbInstanceData._m0[_178].x, cbInstanceData._m0[_555].x, cbInstanceData._m0[_562].x), vec3(cbInstanceData._m0[_178].x, cbInstanceData._m0[_555].x, cbInstanceData._m0[_562].x)));
    precise float _621 = cbInstanceData._m0[_178].x * _620;
    precise float _622 = cbInstanceData._m0[_555].x * _620;
    precise float _623 = cbInstanceData._m0[_562].x * _620;
    float _627 = inversesqrt(dot(vec3(cbInstanceData._m0[_178].y, cbInstanceData._m0[_555].y, cbInstanceData._m0[_562].y), vec3(cbInstanceData._m0[_178].y, cbInstanceData._m0[_555].y, cbInstanceData._m0[_562].y)));
    precise float _628 = cbInstanceData._m0[_178].y * _627;
    precise float _629 = cbInstanceData._m0[_555].y * _627;
    precise float _630 = cbInstanceData._m0[_562].y * _627;
    float _634 = inversesqrt(dot(vec3(cbInstanceData._m0[_178].z, cbInstanceData._m0[_555].z, cbInstanceData._m0[_562].z), vec3(cbInstanceData._m0[_178].z, cbInstanceData._m0[_555].z, cbInstanceData._m0[_562].z)));
    precise float _635 = cbInstanceData._m0[_178].z * _634;
    precise float _636 = cbInstanceData._m0[_555].z * _634;
    precise float _637 = cbInstanceData._m0[_562].z * _634;
    precise float _638 = _621 * 0.0;
    precise float _639 = 1.0 * _628;
    precise float _640 = _639 + _638;
    precise float _641 = 0.0 * _635;
    precise float _642 = _641 + _640;
    precise float _643 = _622 * 0.0;
    precise float _644 = 1.0 * _629;
    precise float _645 = _644 + _643;
    precise float _646 = 0.0 * _636;
    precise float _647 = _646 + _645;
    precise float _648 = _623 * 0.0;
    precise float _649 = 1.0 * _630;
    precise float _650 = _649 + _648;
    precise float _651 = 0.0 * _637;
    precise float _652 = _651 + _650;
    float _656 = inversesqrt(dot(vec3(_603, _605, _607), vec3(_603, _605, _607)));
    precise float _657 = _603 * _656;
    precise float _658 = _605 * _656;
    precise float _659 = _607 * _656;
    precise float _660 = _647 * _659;
    precise float _661 = _652 * _658;
    precise float _662 = _660 - _661;
    precise float _663 = _652 * _657;
    precise float _664 = _642 * _659;
    precise float _665 = _663 - _664;
    precise float _666 = _642 * _658;
    precise float _667 = _647 * _657;
    precise float _668 = _666 - _667;
    float _672 = inversesqrt(dot(vec3(_662, _665, _668), vec3(_662, _665, _668)));
    precise float _673 = _672 * _662;
    precise float _674 = _672 * _665;
    precise float _675 = _672 * _668;
    precise float _676 = _614 + 1.0;
    precise float _678 = cbMtdParam._m0[9u].w * log2(_676);
    precise float _679 = dot(vec3(_673, _674, _675), vec3(_590, _591, _592));
    precise float _682 = _673 * _679;
    precise float _683 = _674 * _679;
    precise float _684 = _675 * _679;
    precise float _685 = _575 + _682;
    precise float _686 = _582 + _683;
    precise float _687 = _589 + _684;
    precise float _688 = _396 - _685;
    precise float _689 = _403 - _686;
    precise float _690 = _410 - _687;
    precise float _691 = _674 * _690;
    precise float _692 = _675 * _689;
    precise float _693 = _691 - _692;
    precise float _694 = _675 * _688;
    precise float _695 = _673 * _690;
    precise float _696 = _694 - _695;
    precise float _697 = _673 * _689;
    precise float _698 = _674 * _688;
    precise float _699 = _697 - _698;
    float _700 = sin(_678);
    float _701 = cos(_678);
    precise float _702 = _688 * _701;
    precise float _703 = _689 * _701;
    precise float _704 = _690 * _701;
    precise float _705 = _700 * _693;
    precise float _706 = _700 * _696;
    precise float _707 = _700 * _699;
    precise float _708 = _702 + _705;
    precise float _709 = _703 + _706;
    precise float _710 = _707 + _704;
    precise float _711 = _685 + _708;
    precise float _712 = _686 + _709;
    precise float _713 = _687 + _710;
    precise float _714 = _711 - _396;
    precise float _715 = _712 - _403;
    precise float _716 = _713 - _410;
    precise float _720 = _396 + (_615 ? 0.0 : _714);
    precise float _721 = _403 + (_615 ? 0.0 : _715);
    precise float _722 = _410 + (_615 ? 0.0 : _716);
    precise float _723 = _720 - cbSceneParam._m0[3u].x;
    precise float _724 = _721 - cbSceneParam._m0[3u].y;
    precise float _725 = _722 - cbSceneParam._m0[3u].z;
    precise float _753 = cbSceneParam._m0[24u].x * _723;
    precise float _754 = _724 * cbSceneParam._m0[24u].y;
    precise float _755 = _754 + _753;
    precise float _756 = _725 * cbSceneParam._m0[24u].z;
    precise float _757 = _756 + _755;
    precise float _758 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _759 = _758 + _757;
    precise float _760 = cbSceneParam._m0[25u].x * _723;
    precise float _761 = _724 * cbSceneParam._m0[25u].y;
    precise float _762 = _761 + _760;
    precise float _763 = _725 * cbSceneParam._m0[25u].z;
    precise float _764 = _763 + _762;
    precise float _765 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _766 = _765 + _764;
    precise float _767 = cbSceneParam._m0[26u].x * _723;
    precise float _768 = _724 * cbSceneParam._m0[26u].y;
    precise float _769 = _768 + _767;
    precise float _770 = _725 * cbSceneParam._m0[26u].z;
    precise float _771 = _770 + _769;
    precise float _772 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _773 = _772 + _771;
    precise float _774 = _723 * cbSceneParam._m0[27u].x;
    precise float _775 = _724 * cbSceneParam._m0[27u].y;
    precise float _776 = _775 + _774;
    precise float _777 = _725 * cbSceneParam._m0[27u].z;
    precise float _778 = _777 + _776;
    precise float _779 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _780 = _779 + _778;
    gl_Position.x = _759;
    gl_Position.y = _766;
    gl_Position.z = _773;
    gl_Position.w = _780;
    NORMAL_1.x = _527;
    NORMAL_1.y = _530;
    NORMAL_1.z = _533;
    NORMAL_1.w = float(_201);
    TANGENT_1.x = (-0.0) - (_527 * _530);
    TANGENT_1.y = (_527 * _527) - (_533 * _535);
    TANGENT_1.z = _530 * _535;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = (((_462 * (_458 + _452)) / _484) + 1.0) * 0.5;
    TEXCOORD_2.w = (((_462 * (_458 - _452)) / _484) + 1.0) * 0.5;
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_9.x = _773;
    TEXCOORD_9.y = _780;
    TEXCOORD_13 = sqrt(((_498 * _498) + (_499 * _499)) + (_500 * _500));
    gl_ClipDistance[0u] = dot(vec4(_759, _766, _773, _780), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_759, _766, _773, _780), vec4(cbInstanceData._m0[_203 + 3u]));
}


