#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1052;
float _3420;
float _3421;
float _3422;
float _3423;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _243 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _248 = _243.z;
    float _252 = (_243.x * 2.0) + (-1.0);
    float _254 = (_243.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3432 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))));
    float _264 = fma(_261, _222, fma(_254, _215, _252 * _201));
    float _267 = fma(_261, _223, fma(_254, _216, _252 * _202));
    float _270 = fma(_261, _224, fma(_254, _217, _252 * _203));
    float _279 = exp2(log2(inversesqrt(dot(vec3(_264, _267, _270), vec3(_264, _267, _270))) * _267) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3443 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _304 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3454 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _311 = (1.0 - cbMtdParam._m0[12u].x) + (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)));
    float _312 = _311 * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)));
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(1.0) ? _313 : (isnan(_313) ? 1.0 : min(_313, 1.0));
    vec4 _326 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _351 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _362 = cbMtdParam._m0[9u].x * _351.x;
    float _363 = cbMtdParam._m0[9u].y * _351.y;
    float _364 = cbMtdParam._m0[9u].z * _351.z;
    float _371 = (((cbMtdParam._m0[10u].x * _326.x) - _362) * _314) + _362;
    float _372 = (((cbMtdParam._m0[10u].y * _326.y) - _363) * _314) + _363;
    float _373 = (((cbMtdParam._m0[10u].z * _326.z) - _364) * _314) + _364;
    vec4 _386 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _393 = (_386.x * 2.0) + (-1.0);
    float _394 = (_386.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_393, _394), vec2(_393, _394));
    float _3475 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _403 = ((_386.z - _248) * _314) + _248;
    float _404 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _405 = isnan(1.0) ? _404 : (isnan(_404) ? 1.0 : min(_404, 1.0));
    vec4 _426 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _432 = (_426.x * 2.0) + (-1.0);
    float _433 = (_426.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_432, _433), vec2(_432, _433));
    float _3496 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _439 = sqrt(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))));
    float _448 = (((((sqrt(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) - _261) * _314) + _261) - _439) * _405) + _439;
    vec4 _462 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _472 = ((((((_393 - _252) * _314) + _252) - _432) * _405) + _432) + (((_462.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _473 = ((((((_394 - _254) * _314) + _254) - _433) * _405) + _433) + (((_462.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _476 = fma(_448, _222, fma(_473, _215, _472 * _201));
    float _479 = fma(_448, _223, fma(_473, _216, _472 * _202));
    float _482 = fma(_448, _224, fma(_473, _217, _472 * _203));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    float _487 = _486 * _476;
    float _488 = _486 * _479;
    float _489 = _486 * _482;
    float _3507 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _490 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3529 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3540 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _509 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _560 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _550);
    float _561 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _550);
    float _562 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _550);
    float _566 = inversesqrt(dot(vec3(_560, _561, _562), vec3(_560, _561, _562)));
    float _567 = _560 * _566;
    float _568 = _561 * _566;
    float _569 = _562 * _566;
    vec4 _574 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _576 = _574.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _731 = sqrt(((_560 * _560) + (_561 * _561)) + (_562 * _562));
        float _737 = (cbMatDynParam._m0[5u].x * _731) + cbMatDynParam._m0[5u].y;
        float _3551 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _742 = (cbMatDynParam._m0[5u].z * _731) + cbMatDynParam._m0[5u].w;
        float _3562 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) - _738)) + _738) < ((_576 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _587 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _588 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _607 = fma(_489, cbSceneParam._m0[5u].z, fma(_488, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _487));
    float _610 = fma(_489, cbSceneParam._m0[6u].z, fma(_488, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _487));
    float _613 = fma(_489, cbSceneParam._m0[7u].z, fma(_488, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _487));
    uint _626 = uint(roundEven(NORMAL.w)) * 13u;
    uint _627 = _626 + 9u;
    uint _628 = _627 + uint(cbMatDynParam._m0[0u].w);
    float _634 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_628].x;
    float _635 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_628].y;
    float _636 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_628].z;
    float _3573 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    vec4 _648 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _587, cbSceneParam._m0[86u].y * _588));
    float _651 = _648.x * TEXCOORD_3.w;
    float _652 = dot(vec3(_487, _488, _489), vec3(_567, _568, _569));
    float _655 = _652 * 2.0;
    float _659 = (_655 * _487) - _567;
    float _660 = (_655 * _488) - _568;
    float _661 = (_655 * _489) - _569;
    float _665 = abs(dot(vec3(_567, _568, _569), vec3(_487, _488, _489)));
    float _3606 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _667 = sqrt(_490);
    float _680 = exp2((_667 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_667 * 3.0));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1051;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _776 = fma(_720, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _712));
        float _780 = fma(_720, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _712));
        float _784 = fma(_720, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _712));
        float _809 = _712 + _487;
        float _810 = _716 + _488;
        float _811 = _720 + _489;
        float _821 = fma(_811, cbModelParam._m0[26u].z, fma(_810, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809)) - _776;
        float _822 = fma(_811, cbModelParam._m0[27u].z, fma(_810, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809)) - _780;
        float _823 = fma(_811, cbModelParam._m0[28u].z, fma(_810, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809)) - _784;
        float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
        float _840 = ((_827 * _821) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_776 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_827 * _822) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_780 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_827 * _823) / cbModelParam._m0[34u].z) + ((((((_784 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        float _879 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_845.x + (-0.5));
        float _881 = _879 * (_845.y + (-0.5));
        float _882 = _879 * (_845.z + (-0.5));
        float _889 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_852.x + (-0.5));
        float _891 = _889 * (_852.y + (-0.5));
        float _892 = _889 * (_852.z + (-0.5));
        float _899 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_859.x + (-0.5));
        float _901 = _899 * (_859.y + (-0.5));
        float _902 = _899 * (_859.z + (-0.5));
        float _909 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_866.x + (-0.5));
        float _911 = _909 * (_866.y + (-0.5));
        float _912 = _909 * (_866.z + (-0.5));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = _880 * 0.5;
        float _917 = _890 * 0.5;
        float _918 = _900 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _933 = (dot(vec3(_487, _488, _489), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _943 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3654 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_945 + 1.0))) + _950) * _913;
        float _960 = _881 * 0.5;
        float _961 = _891 * 0.5;
        float _962 = _901 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_487, _488, _489), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3687 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_987 + 1.0))) + _992) * _914;
        float _1002 = _882 * 0.5;
        float _1003 = _892 * 0.5;
        float _1004 = _902 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_487, _488, _489), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3720 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1029 + 1.0))) + _1034) * _915;
        _1051 = _882;
        _1053 = _881;
        _1054 = _880;
        _1055 = _892;
        _1056 = _891;
        _1057 = _890;
        _1058 = _902;
        _1059 = _901;
        _1060 = _900;
        _1061 = _915;
        _1062 = _914;
        _1063 = _913;
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
    }
    else
    {
        _1051 = _1052;
        _1053 = _1052;
        _1054 = _1052;
        _1055 = _1052;
        _1056 = _1052;
        _1057 = _1052;
        _1058 = _1052;
        _1059 = _1052;
        _1060 = _1052;
        _1061 = _1052;
        _1062 = _1052;
        _1063 = _1052;
        _1064 = 0.0;
        _1065 = 0.0;
        _1066 = 0.0;
    }
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1095 = fma(_720, cbModelParam._m0[30u].z, fma(_716, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _712));
        float _1099 = fma(_720, cbModelParam._m0[31u].z, fma(_716, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _712));
        float _1103 = fma(_720, cbModelParam._m0[32u].z, fma(_716, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _712));
        float _1126 = _712 + _487;
        float _1127 = _716 + _488;
        float _1128 = _720 + _489;
        float _1138 = fma(_1128, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126)) - _1095;
        float _1139 = fma(_1128, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126)) - _1099;
        float _1140 = fma(_1128, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126)) - _1103;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1095 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1099 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[35u].z) + ((((((_1103 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1194 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1161.x + (-0.5));
        float _1196 = _1194 * (_1161.y + (-0.5));
        float _1197 = _1194 * (_1161.z + (-0.5));
        float _1204 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1168.x + (-0.5));
        float _1206 = _1204 * (_1168.y + (-0.5));
        float _1207 = _1204 * (_1168.z + (-0.5));
        float _1214 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1175.x + (-0.5));
        float _1216 = _1214 * (_1175.y + (-0.5));
        float _1217 = _1214 * (_1175.z + (-0.5));
        float _1224 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1182.x + (-0.5));
        float _1226 = _1224 * (_1182.y + (-0.5));
        float _1227 = _1224 * (_1182.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_487, _488, _489), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3783 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1258 + 1.0))) + _1263) * _1228;
        float _1273 = _1196 * 0.5;
        float _1274 = _1206 * 0.5;
        float _1275 = _1216 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_487, _488, _489), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3816 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1300 + 1.0))) + _1305) * _1229;
        float _1315 = _1197 * 0.5;
        float _1316 = _1207 * 0.5;
        float _1317 = _1217 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_487, _488, _489), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3849 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1342 + 1.0))) + _1347) * _1230;
        _1364 = _1197;
        _1365 = _1196;
        _1366 = _1195;
        _1367 = _1207;
        _1368 = _1206;
        _1369 = _1205;
        _1370 = _1217;
        _1371 = _1216;
        _1372 = _1215;
        _1373 = _1230;
        _1374 = _1229;
        _1375 = _1228;
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1052;
        _1365 = _1052;
        _1366 = _1052;
        _1367 = _1052;
        _1368 = _1052;
        _1369 = _1052;
        _1370 = _1052;
        _1371 = _1052;
        _1372 = _1052;
        _1373 = _1052;
        _1374 = _1052;
        _1375 = _1052;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1064)) + _1064;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1065)) + _1065;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1066)) + _1066;
    float _1411 = fma(_1390, cbSceneParam._m0[89u].z, fma(_1389, cbSceneParam._m0[89u].y, _1388 * cbSceneParam._m0[89u].x));
    float _1414 = fma(_1390, cbSceneParam._m0[90u].z, fma(_1389, cbSceneParam._m0[90u].y, _1388 * cbSceneParam._m0[90u].x));
    float _1417 = fma(_1390, cbSceneParam._m0[91u].z, fma(_1389, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1388));
    float _1432 = _659 * 0.5;
    float _1433 = _660 * 0.5;
    float _1434 = _661 * 0.5;
    float _1435 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1438 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1441 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1475;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1448 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1051, _1055, _1058, _1061));
        float _1452 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1456 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1463 = dot(vec4(cbModelParam._m0[39u]), vec4(_1432, _1433, _1434, 1.0));
        _1475 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1475 = 1.0;
    }
    float _1486;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1477 = dot(vec4(cbModelParam._m0[40u]), vec4(_1432, _1433, _1434, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1490 = (_1486 * cbModelParam._m0[1u].x) + (_1475 * (1.0 - cbModelParam._m0[1u].x));
    float _1500 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _490);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1500 : min(cbModelParam._m0[25u].z, _1500));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1550 = fma(_720, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _712)) + cbModelParam._m0[13u].w;
        float _1554 = fma(_720, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _712)) + cbModelParam._m0[14u].w;
        float _1558 = fma(_720, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _712)) + cbModelParam._m0[15u].w;
        float _1561 = fma(_661, cbModelParam._m0[13u].z, fma(_660, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _659));
        float _1564 = fma(_661, cbModelParam._m0[14u].z, fma(_660, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _659));
        float _1567 = fma(_661, cbModelParam._m0[15u].z, fma(_660, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _659));
        float _1595;
        if (_1561 > 0.0)
        {
            _1595 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1595 = frontier_phi_19_17_ladder;
        }
        float _1799;
        if (_1564 > 0.0)
        {
            _1799 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1799 = frontier_phi_28_24_ladder;
        }
        float _2042;
        if (_1567 > 0.0)
        {
            _2042 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2042 = frontier_phi_40_35_ladder;
        }
        float _2044 = isnan(_1799) ? _1595 : (isnan(_1595) ? _1799 : min(_1595, _1799));
        float _2045 = isnan(_2042) ? _2044 : (isnan(_2044) ? _2042 : min(_2044, _2042));
        float _2049 = (_2045 * _1561) + _1550;
        float _2050 = (_2045 * _1564) + _1554;
        float _2051 = (_2045 * _1567) + _1558;
        float _2052 = _2045 * 9.9999997473787516355514526367188e-05;
        float _2054 = (-1.0) - _2052;
        float _2056 = _2052 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2051 > _2056) || ((_2051 < _2054) || ((_2050 > _2056) || ((_2050 < _2054) || ((_2049 < _2054) || (_2049 > _2056))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2175 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2051, cbModelParam._m0[9u].z, fma(_2050, cbModelParam._m0[9u].y, _2049 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2051, cbModelParam._m0[10u].z, fma(_2050, cbModelParam._m0[10u].y, _2049 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2051, cbModelParam._m0[11u].z, fma(_2050, cbModelParam._m0[11u].y, _2049 * cbModelParam._m0[11u].x))), _1501);
            frontier_phi_18_40_ladder = _2175.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2175.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2175.x * cbModelParam._m0[1u].y;
        }
        _1583 = frontier_phi_18_40_ladder_2;
        _1585 = frontier_phi_18_40_ladder_1;
        _1587 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_659, _660, _661), _1501);
        _1583 = _1571.x * cbModelParam._m0[1u].y;
        _1585 = _1571.y * cbModelParam._m0[1u].y;
        _1587 = _1571.z * cbModelParam._m0[1u].y;
    }
    float _1591 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _490);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1591 : min(cbModelParam._m0[25u].w, _1591));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1649 = fma(_720, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _712)) + cbModelParam._m0[21u].w;
        float _1653 = fma(_720, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _712)) + cbModelParam._m0[22u].w;
        float _1657 = fma(_720, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _712)) + cbModelParam._m0[23u].w;
        float _1660 = fma(_661, cbModelParam._m0[21u].z, fma(_660, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _659));
        float _1663 = fma(_661, cbModelParam._m0[22u].z, fma(_660, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _659));
        float _1666 = fma(_661, cbModelParam._m0[23u].z, fma(_660, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _659));
        float _1804;
        if (_1660 > 0.0)
        {
            _1804 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1804 = frontier_phi_30_26_ladder;
        }
        float _2069;
        if (_1663 > 0.0)
        {
            _2069 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2069 = frontier_phi_42_37_ladder;
        }
        float _2274;
        if (_1666 > 0.0)
        {
            _2274 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2274 = frontier_phi_51_48_ladder;
        }
        float _2276 = isnan(_2069) ? _1804 : (isnan(_1804) ? _2069 : min(_1804, _2069));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1660) + _1649;
        float _2282 = (_2277 * _1663) + _1653;
        float _2283 = (_2277 * _1666) + _1657;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2284;
        float _2287 = _2284 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2283 > _2287) || ((_2283 < _2285) || ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 < _2285) || (_2281 > _2287))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2283, cbModelParam._m0[17u].z, fma(_2282, cbModelParam._m0[17u].y, _2281 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2283, cbModelParam._m0[18u].z, fma(_2282, cbModelParam._m0[18u].y, _2281 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2283, cbModelParam._m0[19u].z, fma(_2282, cbModelParam._m0[19u].y, _2281 * cbModelParam._m0[19u].x))), _1592);
            frontier_phi_27_51_ladder = _2481.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2481.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2481.x * cbModelParam._m0[1u].z;
        }
        _1685 = frontier_phi_27_51_ladder_2;
        _1687 = frontier_phi_27_51_ladder_1;
        _1689 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_659, _660, _661), _1592);
        _1685 = _1669.x * cbModelParam._m0[1u].z;
        _1687 = _1669.y * cbModelParam._m0[1u].z;
        _1689 = _1669.z * cbModelParam._m0[1u].z;
    }
    float _1701 = ((((1.0 - _680) * ((_667 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_680 * _667)) * _651;
    float _1702 = _1701 * ((cbModelParam._m0[1u].w * (_1685 - _1583)) + _1583);
    float _1703 = _1701 * ((cbModelParam._m0[1u].w * (_1687 - _1585)) + _1585);
    float _1704 = _1701 * ((cbModelParam._m0[1u].w * (_1689 - _1587)) + _1587);
    float _1707 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, _1702 * cbSceneParam._m0[91u].x));
    uvec4 _1723 = floatBitsToUint(cbInstanceData._m0[_626 + 5u]);
    uint _1725 = _1723.x * 14u;
    uint _1726 = _1725 + 13u;
    float _1733 = _651 + (-1.0);
    float _1738 = (cbLight._m0[_1726].x * _1733) + 1.0;
    float _1739 = (cbLight._m0[_1726].y * _1733) + 1.0;
    float _1740 = (cbLight._m0[_1726].z * _1733) + 1.0;
    float _1741 = (cbLight._m0[_1726].w * _1733) + 1.0;
    uint _1742 = _1725 + 5u;
    float _1748 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1752 = _1725 + 4u;
    float _1758 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1762 = _1725 | 1u;
    float _1773 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_487, _488, _489));
    float _1776 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_487, _488, _489));
    float _3985 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _3996 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1781 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * 0.3183098733425140380859375;
    float _1783 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.3183098733425140380859375;
    float _1790 = ((cbLight._m0[_1742].x * _1748) * _1783) + ((cbLight._m0[_1752].x * _1758) * _1781);
    float _1791 = ((_1748 * cbLight._m0[_1742].y) * _1783) + ((_1758 * cbLight._m0[_1752].y) * _1781);
    float _1792 = ((_1748 * cbLight._m0[_1742].z) * _1783) + ((_1758 * cbLight._m0[_1752].z) * _1781);
    uvec4 _1796 = floatBitsToUint(cbLight._m0[_1725 + 12u]);
    bool _1798 = _1796.x == 0u;
    float _1809;
    float _1811;
    float _1813;
    if (_1798)
    {
        _1809 = _1790;
        _1811 = _1791;
        _1813 = _1792;
    }
    else
    {
        uint _1817 = _1725 + 6u;
        float _1833 = (dot(vec3(cbLight._m0[_1725 + 2u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _4007 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1836 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1809 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1790;
        _1811 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1791;
        _1813 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1792;
    }
    bool _1816 = _1796.y == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1816)
    {
        _1854 = _1809;
        _1856 = _1811;
        _1858 = _1813;
    }
    else
    {
        uint _2013 = _1725 + 7u;
        float _2029 = (dot(vec3(cbLight._m0[_1725 + 3u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _2030 = _2029 * _2029;
        float _4023 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _2032 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _1854 = (((cbLight._m0[_2013].x * 0.3183098733425140380859375) * _2031) * _2032) + _1809;
        _1856 = (((cbLight._m0[_2013].y * 0.3183098733425140380859375) * _2031) * _2032) + _1811;
        _1858 = (((cbLight._m0[_2013].z * 0.3183098733425140380859375) * _2031) * _2032) + _1813;
    }
    uint _1861 = _1725 + 8u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _490) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1725].x + _567;
    float _1877 = cbLight._m0[_1725].y + _568;
    float _1878 = cbLight._m0[_1725].z + _569;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1725].xyz));
    float _4039 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _1890 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1891 = dot(vec3(_487, _488, _489), vec3(_1883, _1884, _1885));
    float _4061 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1883, _1884, _1885));
    float _4072 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1875 * _1875;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1914 = (exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1915 = 1.0 - _1875;
    float _1926 = (0.5 / (((_1890 * ((_1889 * _1915) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1915) + _1875) * _1889))) * _1889;
    float _4083 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    uint _1939 = _1725 + 9u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _490) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1762].x + _567;
    float _1953 = cbLight._m0[_1762].y + _568;
    float _1954 = cbLight._m0[_1762].z + _569;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1762].xyz));
    float _4094 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1966 = dot(vec3(_487, _488, _489), vec3(_1959, _1960, _1961));
    float _4105 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1959, _1960, _1961));
    float _4116 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1951 * _1951;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1988 = 1.0 - _1951;
    float _1998 = (0.5 / (((_1890 * ((_1965 * _1988) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1988) + _1951) * _1965))) * _1965;
    float _4127 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    float _2010 = (((_1987 * cbLight._m0[_1939].x) * _2000) * _1748) + (((_1914 * cbLight._m0[_1861].x) * _1928) * _1758);
    float _2011 = (((_1987 * cbLight._m0[_1939].y) * _2000) * _1748) + (((_1914 * cbLight._m0[_1861].y) * _1928) * _1758);
    float _2012 = (((_1987 * cbLight._m0[_1939].z) * _2000) * _1748) + (((_1914 * cbLight._m0[_1861].z) * _1928) * _1758);
    float _2074;
    float _2076;
    float _2078;
    if (_1798)
    {
        _2074 = _2010;
        _2076 = _2011;
        _2078 = _2012;
    }
    else
    {
        uint _2080 = _1725 + 2u;
        uint _2084 = _1725 + 10u;
        float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _490) * 0.949999988079071044921875);
        float _2099 = _2098 * _2098;
        float _2100 = cbLight._m0[_2080].x + _567;
        float _2101 = cbLight._m0[_2080].y + _568;
        float _2102 = cbLight._m0[_2080].z + _569;
        float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
        float _2107 = _2106 * _2100;
        float _2108 = _2106 * _2101;
        float _2109 = _2106 * _2102;
        float _2110 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2080].xyz));
        float _4138 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2114 = dot(vec3(_487, _488, _489), vec3(_2107, _2108, _2109));
        float _4149 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2118 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2107, _2108, _2109));
        float _4160 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2122 = _2099 * _2099;
        float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
        float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2136 = 1.0 - _2099;
        float _2146 = (0.5 / (((_1890 * ((_2113 * _2136) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2136) + _2099) * _2113))) * _2113;
        float _4171 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2074 = (((_2135 * cbLight._m0[_2084].x) * _2148) * _2149) + _2010;
        _2076 = (((_2135 * cbLight._m0[_2084].y) * _2148) * _2149) + _2011;
        _2078 = (((_2135 * cbLight._m0[_2084].z) * _2148) * _2149) + _2012;
    }
    float _2184;
    float _2186;
    float _2188;
    if (_1816)
    {
        _2184 = _2074;
        _2186 = _2076;
        _2188 = _2078;
    }
    else
    {
        uint _2195 = _1725 + 3u;
        uint _2199 = _1725 + 11u;
        float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _490) * 0.949999988079071044921875);
        float _2214 = _2213 * _2213;
        float _2215 = cbLight._m0[_2195].x + _567;
        float _2216 = cbLight._m0[_2195].y + _568;
        float _2217 = cbLight._m0[_2195].z + _569;
        float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
        float _2222 = _2221 * _2215;
        float _2223 = _2221 * _2216;
        float _2224 = _2221 * _2217;
        float _2225 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2195].xyz));
        float _4187 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2229 = dot(vec3(_487, _488, _489), vec3(_2222, _2223, _2224));
        float _4198 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2222, _2223, _2224));
        float _4209 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2237 = _2214 * _2214;
        float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
        float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2251 = 1.0 - _2214;
        float _2261 = (0.5 / (((_1890 * ((_2228 * _2251) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2251) + _2214) * _2228))) * _2228;
        float _4220 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _2184 = (((_2250 * cbLight._m0[_2199].x) * _2263) * _2264) + _2074;
        _2186 = (((_2250 * cbLight._m0[_2199].y) * _2263) * _2264) + _2076;
        _2188 = (((_2250 * cbLight._m0[_2199].z) * _2263) * _2264) + _2078;
    }
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    if (_1723.y == 0u)
    {
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2339;
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2339;
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2339;
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.x;
        uint _2366 = uint((float(_2354.y) * floor(float(uint(cbSceneParam._m0[85u].y * _588) / _2355))) + floor(float(uint(cbSceneParam._m0[85u].x * _587) / _2355)));
        float _2376 = (log2(_2342 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2377 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        uint _2380 = uint(isnan(14.0) ? _2377 : (isnan(_2377) ? 14.0 : min(_2377, 14.0)));
        uvec4 _2385 = texelFetch(g_lightClusterGridBuffer, int(((_2380 << 2u) + (_2366 << 6u)) >> 2u));
        uint _2386 = _2385.x;
        uint _2387 = _2354.z;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        if (((((1u << ((_2387 >> 4u) & 15u)) + 4294967295u) & _2386) == 0u) || ((_2387 & 240u) == 0u))
        {
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
        }
        else
        {
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            uint _2644 = 0u;
            uint _2653;
            bool _2654;
            for (;;)
            {
                _2653 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2644 << 2u)) >> 2u)).x;
                _2654 = _2653 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2654)
                {
                    frontier_phi_68_pred = _2640;
                    frontier_phi_68_pred_1 = _2643;
                    frontier_phi_68_pred_2 = _2642;
                    frontier_phi_68_pred_3 = _2641;
                    frontier_phi_68_pred_4 = _2639;
                    frontier_phi_68_pred_5 = _2638;
                }
                else
                {
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    uint _2789;
                    _2783 = _2638;
                    _2784 = _2639;
                    _2785 = _2640;
                    _2786 = _2641;
                    _2787 = _2642;
                    _2788 = _2643;
                    _2789 = _2653;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    for (;;)
                    {
                        uint _2793 = uint(findLSB(_2789)) + (_2644 << 5u);
                        uint _2790 = (_2789 + 4294967295u) & _2789;
                        uint _2795 = _2793 * 48u;
                        vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 3u)).x));
                        uint _2815 = (_2793 * 48u) + 4u;
                        vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2815)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 3u)).x));
                        uint _2834 = (_2793 * 48u) + 8u;
                        vec3 _2845 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x));
                        float _2849 = _2809.x - _2340;
                        float _2850 = _2809.y - _2341;
                        float _2851 = _2809.z - _2342;
                        float _2852 = dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851));
                        float _2855 = inversesqrt(_2852);
                        float _2856 = _2855 * _2849;
                        float _2857 = _2855 * _2850;
                        float _2858 = _2855 * _2851;
                        float _2859 = dot(vec3(_607, _610, _613), vec3(_2856, _2857, _2858));
                        float _2864 = 1.0 - (_2852 * _2809.w);
                        float _4246 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2865 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2866 = sqrt(_2852) * _2828.w;
                        float _2869 = 1.39999997615814208984375 / (_2866 + 1.39999997615814208984375);
                        float _2870 = _2869 * _2869;
                        float _2873 = ((1.0 - _2870) * _2859) + _2870;
                        float _2876 = _2866 * _2866;
                        float _2880 = ((isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))) * _2865) / ((_2876 * 0.699999988079071044921875) + 1.0);
                        float _2884 = (-0.0) - _2340;
                        float _2885 = (-0.0) - _2341;
                        float _2886 = (-0.0) - _2342;
                        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
                        float _2891 = _2890 * _2884;
                        float _2892 = _2890 * _2885;
                        float _2893 = _2890 * _2886;
                        float _2901 = exp2(log2(1.0 / ((_2876 * 3.5) + 5.0)) * 0.25);
                        float _2902 = 1.0 - _667;
                        float _2909 = sqrt(1.0 - ((1.0 - (_2902 * _2902)) * (1.0 - (_2901 * _2901))));
                        float _2910 = _2909 * _2909;
                        float _2911 = _2910 * _2910;
                        float _2912 = _2891 + _2856;
                        float _2913 = _2892 + _2857;
                        float _2914 = _2893 + _2858;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2922 = dot(vec3(_607, _610, _613), vec3(_2891, _2892, _2893));
                        float _4262 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2925 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                        float _2926 = dot(vec3(_607, _610, _613), vec3(_2918 * _2912, _2918 * _2913, _2918 * _2914));
                        float _4273 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2929 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2933 = ((_2929 * _2929) * (_2911 + (-1.0))) + 1.0;
                        float _2934 = _2869 * _2910;
                        float _2935 = _2934 * _2934;
                        float _2938 = ((1.0 - _2935) * _2859) + _2935;
                        float _4284 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2940 = 1.0 - _2910;
                        float _2950 = (0.5 / (((_2939 * ((_2925 * _2940) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2939 * _2940) + _2910) * _2925))) * _2939;
                        float _4295 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2961 = (((_2911 * 3.1415927410125732421875) * (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) / ((_2933 * _2933) * ((_2876 * 2.1991131305694580078125) + 3.141590118408203125))) * _2865;
                        _2713 = (_2880 * _2828.x) + _2786;
                        _2714 = (_2880 * _2828.y) + _2787;
                        _2715 = (_2880 * _2828.z) + _2788;
                        _2710 = (_2961 * _2845.x) + _2783;
                        _2711 = (_2961 * _2845.y) + _2784;
                        _2712 = (_2961 * _2845.z) + _2785;
                        if (_2790 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2783 = _2710;
                            _2784 = _2711;
                            _2785 = _2712;
                            _2786 = _2713;
                            _2787 = _2714;
                            _2788 = _2715;
                            _2789 = _2790;
                        }
                    }
                    frontier_phi_68_pred = _2712;
                    frontier_phi_68_pred_1 = _2715;
                    frontier_phi_68_pred_2 = _2714;
                    frontier_phi_68_pred_3 = _2713;
                    frontier_phi_68_pred_4 = _2711;
                    frontier_phi_68_pred_5 = _2710;
                }
                _2491 = frontier_phi_68_pred;
                _2497 = frontier_phi_68_pred_1;
                _2495 = frontier_phi_68_pred_2;
                _2493 = frontier_phi_68_pred_3;
                _2489 = frontier_phi_68_pred_4;
                _2487 = frontier_phi_68_pred_5;
                uint _2645 = _2644 + 1u;
                if (_2645 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2638 = _2487;
                    _2639 = _2489;
                    _2640 = _2491;
                    _2641 = _2493;
                    _2642 = _2495;
                    _2643 = _2497;
                    _2644 = _2645;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
        }
        uvec4 _2500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2501 = _2500.z;
        uint _2503 = (_2501 >> 8u) & 15u;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((4294967295u << _2503) & _2386) == 0u)
        {
            _2606 = _2486;
            _2608 = _2488;
            _2610 = _2490;
            _2612 = _2492;
            _2614 = _2494;
            _2616 = _2496;
        }
        else
        {
            float _2631 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
            float _2632 = _2631 * _2340;
            float _2633 = _2631 * _2341;
            float _2634 = _2631 * _2342;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2503 < ((_2501 >> 12u) & 15u))
            {
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2766 = _2486;
                float _2767 = _2488;
                float _2768 = _2490;
                float _2769 = _2492;
                float _2770 = _2494;
                float _2771 = _2496;
                uint _2772 = _2503;
                uint _2781;
                bool _2782;
                for (;;)
                {
                    _2781 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2772 << 2u)) >> 2u)).x;
                    _2782 = _2781 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2782)
                    {
                        frontier_phi_79_pred = _2771;
                        frontier_phi_79_pred_1 = _2770;
                        frontier_phi_79_pred_2 = _2769;
                        frontier_phi_79_pred_3 = _2768;
                        frontier_phi_79_pred_4 = _2767;
                        frontier_phi_79_pred_5 = _2766;
                    }
                    else
                    {
                        float _2975;
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _2988 = _2766;
                        float _2989 = _2767;
                        float _2990 = _2768;
                        float _2991 = _2769;
                        float _2992 = _2770;
                        float _2993 = _2771;
                        uint _2994 = _2781;
                        uint _2995;
                        vec4 _3020;
                        float _3021;
                        vec4 _3036;
                        vec3 _3048;
                        vec4 _3064;
                        vec4 _3080;
                        float _3127;
                        bool _3128;
                        for (;;)
                        {
                            uint _3005 = ((_2772 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2994));
                            _2995 = (_2994 + 4294967295u) & _2994;
                            uint _3007 = _3005 * 40u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            _3021 = _3020.w;
                            uint _3023 = (_3005 * 40u) + 4u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3038 = (_3005 * 40u) + 8u;
                            _3048 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x));
                            uint _3051 = (_3005 * 40u) + 16u;
                            _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3067 = (_3005 * 40u) + 20u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3083 = (_3005 * 40u) + 24u;
                            vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3102 = (_3005 * 40u) + 28u;
                            vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3127 = fma(_2342, _3115.z, fma(_2341, _3115.y, _3115.x * _2340)) + _3115.w;
                            _3128 = !((fma(_2342, _3096.z, fma(_2341, _3096.y, _3096.x * _2340)) + _3096.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3128)
                            {
                                float _3155 = _3020.x - _2340;
                                float _3156 = _3020.y - _2341;
                                float _3157 = _3020.z - _2342;
                                float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                                float _3161 = inversesqrt(_3158);
                                float _3162 = _3161 * _3155;
                                float _3163 = _3161 * _3156;
                                float _3164 = _3161 * _3157;
                                float _3168 = 1.0 - (_3158 / (_3021 * _3021));
                                float _4306 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3173 = sqrt(_3158) * _3036.w;
                                float _3175 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                                float _3176 = _3175 * _3175;
                                float _3179 = ((1.0 - _3176) * dot(vec3(_3162, _3163, _3164), vec3(_607, _610, _613))) + _3176;
                                float _3182 = _3173 * _3173;
                                float _3186 = (fma(_2342, _3064.z, fma(_2341, _3064.y, _3064.x * _2340)) + _3064.w) / _3127;
                                float _3187 = (fma(_2342, _3080.z, fma(_2341, _3080.y, _3080.x * _2340)) + _3080.w) / _3127;
                                float _3191 = 1.0 - dot(vec2(_3186, _3187), vec2(_3186, _3187));
                                float _4322 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3193 = _3192 * (((isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * _3169) / ((_3182 * 0.699999988079071044921875) + 1.0));
                                float _3205 = exp2(log2(1.0 / ((_3182 * 3.5) + 5.0)) * 0.25);
                                float _3206 = 1.0 - _667;
                                float _3213 = sqrt(1.0 - ((1.0 - (_3206 * _3206)) * (1.0 - (_3205 * _3205))));
                                float _3214 = _3213 * _3213;
                                float _3215 = _3214 * _3214;
                                float _3216 = _3162 - _2632;
                                float _3217 = _3163 - _2633;
                                float _3218 = _3164 - _2634;
                                float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                                float _3226 = dot(vec3(_607, _610, _613), vec3((-0.0) - _2632, (-0.0) - _2633, (-0.0) - _2634));
                                float _4333 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3229 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3230 = dot(vec3(_607, _610, _613), vec3(_3222 * _3216, _3222 * _3217, _3222 * _3218));
                                float _4344 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3237 = ((_3233 * _3233) * (_3215 + (-1.0))) + 1.0;
                                float _3238 = _3175 * _3214;
                                float _3239 = _3238 * _3238;
                                float _3245 = ((1.0 - _3239) * dot(vec3(_607, _610, _613), vec3(_3162, _3163, _3164))) + _3239;
                                float _4355 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3247 = 1.0 - _3214;
                                float _3257 = (0.5 / (((_3246 * ((_3229 * _3247) + _3214)) + 9.9999999392252902907785028219223e-09) + (((_3246 * _3247) + _3214) * _3229))) * _3246;
                                float _4366 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3267 = (_3192 * _3169) * (((_3215 * 3.1415927410125732421875) * (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) / ((_3237 * _3237) * ((_3182 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3193 * _3036.z;
                                frontier_phi_85_pred_1 = _3193 * _3036.y;
                                frontier_phi_85_pred_2 = _3193 * _3036.x;
                                frontier_phi_85_pred_3 = _3267 * _3048.z;
                                frontier_phi_85_pred_4 = _3267 * _3048.y;
                                frontier_phi_85_pred_5 = _3267 * _3048.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3276 = frontier_phi_85_pred;
                            _3275 = frontier_phi_85_pred_1;
                            _3274 = frontier_phi_85_pred_2;
                            _3273 = frontier_phi_85_pred_3;
                            _3272 = frontier_phi_85_pred_4;
                            _3271 = frontier_phi_85_pred_5;
                            _2978 = _3274 + _2991;
                            _2979 = _3275 + _2992;
                            _2980 = _3276 + _2993;
                            _2975 = _3271 + _2988;
                            _2976 = _3272 + _2989;
                            _2977 = _3273 + _2990;
                            if (_2995 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2995;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2980;
                        frontier_phi_79_pred_1 = _2979;
                        frontier_phi_79_pred_2 = _2978;
                        frontier_phi_79_pred_3 = _2977;
                        frontier_phi_79_pred_4 = _2976;
                        frontier_phi_79_pred_5 = _2975;
                    }
                    _2617 = frontier_phi_79_pred;
                    _2615 = frontier_phi_79_pred_1;
                    _2613 = frontier_phi_79_pred_2;
                    _2611 = frontier_phi_79_pred_3;
                    _2609 = frontier_phi_79_pred_4;
                    _2607 = frontier_phi_79_pred_5;
                    uint _2773 = _2772 + 1u;
                    if (_2773 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2766 = _2607;
                        _2767 = _2609;
                        _2768 = _2611;
                        _2769 = _2613;
                        _2770 = _2615;
                        _2771 = _2617;
                        _2772 = _2773;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2613;
                frontier_phi_60_61_ladder_1 = _2617;
                frontier_phi_60_61_ladder_2 = _2615;
                frontier_phi_60_61_ladder_3 = _2611;
                frontier_phi_60_61_ladder_4 = _2609;
                frontier_phi_60_61_ladder_5 = _2607;
            }
            else
            {
                frontier_phi_60_61_ladder = _2492;
                frontier_phi_60_61_ladder_1 = _2496;
                frontier_phi_60_61_ladder_2 = _2494;
                frontier_phi_60_61_ladder_3 = _2490;
                frontier_phi_60_61_ladder_4 = _2488;
                frontier_phi_60_61_ladder_5 = _2486;
            }
            _2606 = frontier_phi_60_61_ladder_5;
            _2608 = frontier_phi_60_61_ladder_4;
            _2610 = frontier_phi_60_61_ladder_3;
            _2612 = frontier_phi_60_61_ladder;
            _2614 = frontier_phi_60_61_ladder_2;
            _2616 = frontier_phi_60_61_ladder_1;
        }
        float _2621 = isnan(1.0) ? _651 : (isnan(_651) ? 1.0 : min(_651, 1.0));
        _2398 = (_2621 * _2612) + _1854;
        _2400 = (_2621 * _2614) + _1856;
        _2402 = (_2621 * _2616) + _1858;
        _2404 = ((_2606 * 0.039999999105930328369140625) * _2621) + _2184;
        _2406 = ((_2608 * 0.039999999105930328369140625) * _2621) + _2186;
        _2408 = ((_2610 * 0.039999999105930328369140625) * _2621) + _2188;
    }
    else
    {
        _2398 = _1854;
        _2400 = _1856;
        _2402 = _1858;
        _2404 = _2184;
        _2406 = _2186;
        _2408 = _2188;
    }
    float _4382 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4393 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4404 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _2425 = ((isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2398 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _651))) + ((_2404 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1490)) * cbPerFrame._m0[3u].x);
    float _2426 = ((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2400 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _651))) + ((_2406 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1490)) * cbPerFrame._m0[3u].x);
    float _2427 = ((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2402 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _651))) + ((_2408 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1490)) * cbPerFrame._m0[3u].x);
    uint _2428 = _626 + 6u;
    float _2436 = _587 / cbSceneParam._m0[86u].x;
    float _2437 = _588 / cbSceneParam._m0[86u].y;
    vec4 _2451 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2436, _2437, (log2((isnan(cbSceneParam._m0[77u].w) ? _509 : (isnan(_509) ? cbSceneParam._m0[77u].w : min(_509, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2453 = _2451.x;
    float _2454 = _2451.y;
    float _2455 = _2451.z;
    float _2456 = _2451.w;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    if (_509 > cbSceneParam._m0[78u].w)
    {
        float _2511 = isnan(_509) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _509 : min(cbSceneParam._m0[80u].w, _509));
        float _2512 = _2511 / _509;
        float _2523 = _2512 * _560;
        float _2524 = _561 * _2512;
        float _2525 = (-0.0) - _2524;
        float _2526 = _2512 * _562;
        float _2528 = (cbSceneParam._m0[77u].w * _2525) / _2511;
        float _2529 = _2528 + cbSceneParam._m0[79u].w;
        float _2530 = cbSceneParam._m0[79u].w - _2524;
        float _2536 = sqrt(((_2523 * _2523) + (_2524 * _2524)) + (_2526 * _2526));
        float _2539 = (1.0 - (cbSceneParam._m0[77u].w / _2511)) * _2536;
        float _2544 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2546 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2723;
        if (abs((_2525 - _2528) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2723 = ((((_2529 > 0.0) ? exp2(_2544 * _2529) : (2.0 - exp2(_2546 * _2529))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2539;
        }
        else
        {
            float _2667 = 1.0 / cbSceneParam._m0[80u].x;
            float _2668 = isnan(_2530) ? _2529 : (isnan(_2529) ? _2530 : max(_2529, _2530));
            float _2669 = isnan(_2530) ? _2529 : (isnan(_2529) ? _2530 : min(_2529, _2530));
            float _2678 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : min(_2668, 0.0));
            float _2679 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : min(_2669, 0.0));
            _2723 = ((abs(_2536 / _2525) * cbSceneParam._m0[80u].y) * ((((_2678 - _2679) * 2.0) - ((exp2(_2544 * (isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0)))) - exp2(_2544 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0))))) * _2667)) - ((exp2(_2546 * _2678) - exp2(_2546 * _2679)) * _2667))) + (_2539 * cbSceneParam._m0[80u].z);
        }
        vec4 _2725 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2436, _2437, 1.0), 0.0);
        float _2734 = exp2((_2723 * (-1.44269502162933349609375)) * (1.0 - _2725.w));
        float _2735 = log2(_2734);
        float _2751 = log2(_2456);
        _2548 = (exp2(_2751 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].x)) * _2725.x) / cbSceneParam._m0[78u].x)) + _2453;
        _2550 = (exp2(_2751 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].y)) * _2725.y) / cbSceneParam._m0[78u].y)) + _2454;
        _2552 = (exp2(_2751 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].z)) * _2725.z) / cbSceneParam._m0[78u].z)) + _2455;
        _2554 = _2734 * _2456;
    }
    else
    {
        _2548 = _2453;
        _2550 = _2454;
        _2552 = _2455;
        _2554 = _2456;
    }
    bool _2761;
    vec4 _2564;
    vec4 _2586;
    float _2588;
    float _2592;
    float _2593;
    float _2594;
    float _2595;
    bool _2605;
    for (;;)
    {
        _2564 = cbMatDynParam._m0[0u];
        float _2566 = roundEven(_2564.y);
        bool _2567 = _2566 == 3.0;
        float _2568 = log2(_2554);
        float _2575 = exp2(_2568 * cbSceneParam._m0[78u].x) * _2425;
        float _2576 = exp2(_2568 * cbSceneParam._m0[78u].y) * _2426;
        float _2577 = exp2(_2568 * cbSceneParam._m0[78u].z) * _2427;
        float _2584 = _576 + (-0.5);
        _2586 = cbMtdParam._m0[1u];
        _2588 = _2586.y * _2584;
        float _2591 = (_2566 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2592 = _2591 * (_2567 ? _2575 : (_2575 + (cbSceneParam._m0[72u].w * _2548)));
        _2593 = _2591 * (_2567 ? _2576 : (_2576 + (cbSceneParam._m0[72u].w * _2550)));
        _2594 = _2591 * (_2567 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2552)));
        _2595 = _2584 * 0.999000012874603271484375;
        _2605 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2605)
        {
            if ((cbInstanceData._m0[_626 + 7u].x + _2595) < 0.5)
            {
                _2761 = true;
                break;
            }
        }
        uint _2702 = _627 + uint(_2564.w);
        if ((cbInstanceData._m0[_2702].w < 1.0) && ((cbInstanceData._m0[_2702].w + _2595) < 0.5))
        {
            _2761 = true;
            break;
        }
        if ((_2588 + 1.0) < _2586.x)
        {
            _2761 = true;
            break;
        }
        _2761 = false;
        break;
    }
    float _2966;
    if (_2761)
    {
        discard_state = true;
        _2966 = 0.0;
    }
    else
    {
        _2966 = cbInstanceData._m0[_2428].w;
    }
    SV_Target.x = _2592;
    SV_Target.y = _2593;
    SV_Target.z = _2594;
    SV_Target.w = _2966;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2428].w;
    discard_exit();
}


