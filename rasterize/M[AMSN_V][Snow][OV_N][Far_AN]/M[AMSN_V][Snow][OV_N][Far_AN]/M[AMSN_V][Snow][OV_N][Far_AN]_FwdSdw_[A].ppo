#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1056;
float _3707;
float _3708;
float _3709;
float _3710;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _247 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _252 = _247.z;
    float _256 = (_247.x * 2.0) + (-1.0);
    float _258 = (_247.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3719 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))));
    float _268 = fma(_265, _226, fma(_258, _219, _256 * _205));
    float _271 = fma(_265, _227, fma(_258, _220, _256 * _206));
    float _274 = fma(_265, _228, fma(_258, _221, _256 * _207));
    float _283 = exp2(log2(inversesqrt(dot(vec3(_268, _271, _274), vec3(_268, _271, _274))) * _271) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3730 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _308 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3741 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _315 = (1.0 - cbMtdParam._m0[12u].x) + (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)));
    float _316 = _315 * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)));
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(1.0) ? _317 : (isnan(_317) ? 1.0 : min(_317, 1.0));
    vec4 _330 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _355 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _366 = cbMtdParam._m0[9u].x * _355.x;
    float _367 = cbMtdParam._m0[9u].y * _355.y;
    float _368 = cbMtdParam._m0[9u].z * _355.z;
    float _375 = (((cbMtdParam._m0[10u].x * _330.x) - _366) * _318) + _366;
    float _376 = (((cbMtdParam._m0[10u].y * _330.y) - _367) * _318) + _367;
    float _377 = (((cbMtdParam._m0[10u].z * _330.z) - _368) * _318) + _368;
    vec4 _390 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _397 = (_390.x * 2.0) + (-1.0);
    float _398 = (_390.y * 2.0) + (-1.0);
    float _399 = dot(vec2(_397, _398), vec2(_397, _398));
    float _3762 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _407 = ((_390.z - _252) * _318) + _252;
    float _408 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _409 = isnan(1.0) ? _408 : (isnan(_408) ? 1.0 : min(_408, 1.0));
    vec4 _430 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _436 = (_430.x * 2.0) + (-1.0);
    float _437 = (_430.y * 2.0) + (-1.0);
    float _438 = dot(vec2(_436, _437), vec2(_436, _437));
    float _3783 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _443 = sqrt(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))));
    float _452 = (((((sqrt(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) - _265) * _318) + _265) - _443) * _409) + _443;
    vec4 _466 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _476 = ((((((_397 - _256) * _318) + _256) - _436) * _409) + _436) + (((_466.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _477 = ((((((_398 - _258) * _318) + _258) - _437) * _409) + _437) + (((_466.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _480 = fma(_452, _226, fma(_477, _219, _476 * _205));
    float _483 = fma(_452, _227, fma(_477, _220, _476 * _206));
    float _486 = fma(_452, _228, fma(_477, _221, _476 * _207));
    float _490 = inversesqrt(dot(vec3(_480, _483, _486), vec3(_480, _483, _486)));
    float _491 = _490 * _480;
    float _492 = _490 * _483;
    float _493 = _490 * _486;
    float _3794 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _494 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3816 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3827 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _513 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _564 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _554);
    float _565 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _554);
    float _566 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _554);
    float _570 = inversesqrt(dot(vec3(_564, _565, _566), vec3(_564, _565, _566)));
    float _571 = _564 * _570;
    float _572 = _565 * _570;
    float _573 = _566 * _570;
    vec4 _578 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _580 = _578.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _735 = sqrt(((_564 * _564) + (_565 * _565)) + (_566 * _566));
        float _741 = (cbMatDynParam._m0[5u].x * _735) + cbMatDynParam._m0[5u].y;
        float _3838 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _746 = (cbMatDynParam._m0[5u].z * _735) + cbMatDynParam._m0[5u].w;
        float _3849 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) - _742)) + _742) < ((_580 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _591 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _592 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _611 = fma(_493, cbSceneParam._m0[5u].z, fma(_492, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _491));
    float _614 = fma(_493, cbSceneParam._m0[6u].z, fma(_492, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _491));
    float _617 = fma(_493, cbSceneParam._m0[7u].z, fma(_492, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _491));
    uint _630 = uint(roundEven(NORMAL.w)) * 13u;
    uint _631 = _630 + 9u;
    uint _632 = _631 + uint(cbMatDynParam._m0[0u].w);
    float _638 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_632].x;
    float _639 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_632].y;
    float _640 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_632].z;
    float _3860 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    vec4 _652 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _591, cbSceneParam._m0[86u].y * _592));
    float _655 = _652.x * TEXCOORD_3.w;
    float _656 = dot(vec3(_491, _492, _493), vec3(_571, _572, _573));
    float _659 = _656 * 2.0;
    float _663 = (_659 * _491) - _571;
    float _664 = (_659 * _492) - _572;
    float _665 = (_659 * _493) - _573;
    float _669 = abs(dot(vec3(_571, _572, _573), vec3(_491, _492, _493)));
    float _3893 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _671 = sqrt(_494);
    float _684 = exp2((_671 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_671 * 3.0));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1055;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _780 = fma(_724, cbModelParam._m0[26u].z, fma(_720, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _716));
        float _784 = fma(_724, cbModelParam._m0[27u].z, fma(_720, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _716));
        float _788 = fma(_724, cbModelParam._m0[28u].z, fma(_720, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _716));
        float _813 = _716 + _491;
        float _814 = _720 + _492;
        float _815 = _724 + _493;
        float _825 = fma(_815, cbModelParam._m0[26u].z, fma(_814, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _813)) - _780;
        float _826 = fma(_815, cbModelParam._m0[27u].z, fma(_814, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _813)) - _784;
        float _827 = fma(_815, cbModelParam._m0[28u].z, fma(_814, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _813)) - _788;
        float _831 = inversesqrt(dot(vec3(_825, _826, _827), vec3(_825, _826, _827)));
        float _844 = ((_831 * _825) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_780 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_831 * _826) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_784 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_831 * _827) / cbModelParam._m0[34u].z) + ((((((_788 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        float _883 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_849.x + (-0.5));
        float _885 = _883 * (_849.y + (-0.5));
        float _886 = _883 * (_849.z + (-0.5));
        float _893 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_856.x + (-0.5));
        float _895 = _893 * (_856.y + (-0.5));
        float _896 = _893 * (_856.z + (-0.5));
        float _903 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_863.x + (-0.5));
        float _905 = _903 * (_863.y + (-0.5));
        float _906 = _903 * (_863.z + (-0.5));
        float _913 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_870.x + (-0.5));
        float _915 = _913 * (_870.y + (-0.5));
        float _916 = _913 * (_870.z + (-0.5));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = _884 * 0.5;
        float _921 = _894 * 0.5;
        float _922 = _904 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _937 = (dot(vec3(_491, _492, _493), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _947 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3941 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_949 + 1.0))) + _954) * _917;
        float _964 = _885 * 0.5;
        float _965 = _895 * 0.5;
        float _966 = _905 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_491, _492, _493), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3974 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_991 + 1.0))) + _996) * _918;
        float _1006 = _886 * 0.5;
        float _1007 = _896 * 0.5;
        float _1008 = _906 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_491, _492, _493), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _4007 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1033 + 1.0))) + _1038) * _919;
        _1055 = _886;
        _1057 = _885;
        _1058 = _884;
        _1059 = _896;
        _1060 = _895;
        _1061 = _894;
        _1062 = _906;
        _1063 = _905;
        _1064 = _904;
        _1065 = _919;
        _1066 = _918;
        _1067 = _917;
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
    }
    else
    {
        _1055 = _1056;
        _1057 = _1056;
        _1058 = _1056;
        _1059 = _1056;
        _1060 = _1056;
        _1061 = _1056;
        _1062 = _1056;
        _1063 = _1056;
        _1064 = _1056;
        _1065 = _1056;
        _1066 = _1056;
        _1067 = _1056;
        _1068 = 0.0;
        _1069 = 0.0;
        _1070 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1099 = fma(_724, cbModelParam._m0[30u].z, fma(_720, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _716));
        float _1103 = fma(_724, cbModelParam._m0[31u].z, fma(_720, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _716));
        float _1107 = fma(_724, cbModelParam._m0[32u].z, fma(_720, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _716));
        float _1130 = _716 + _491;
        float _1131 = _720 + _492;
        float _1132 = _724 + _493;
        float _1142 = fma(_1132, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130)) - _1099;
        float _1143 = fma(_1132, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130)) - _1103;
        float _1144 = fma(_1132, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130)) - _1107;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1099 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1103 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[35u].z) + ((((((_1107 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_491, _492, _493), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4070 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_491, _492, _493), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4103 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_491, _492, _493), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4136 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1056;
        _1369 = _1056;
        _1370 = _1056;
        _1371 = _1056;
        _1372 = _1056;
        _1373 = _1056;
        _1374 = _1056;
        _1375 = _1056;
        _1376 = _1056;
        _1377 = _1056;
        _1378 = _1056;
        _1379 = _1056;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1068)) + _1068;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1069)) + _1069;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1070)) + _1070;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _663 * 0.5;
    float _1437 = _664 * 0.5;
    float _1438 = _665 * 0.5;
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1055, _1059, _1062, _1065));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1504 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _494);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1504 : min(cbModelParam._m0[25u].z, _1504));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1554 = fma(_724, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _716)) + cbModelParam._m0[13u].w;
        float _1558 = fma(_724, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _716)) + cbModelParam._m0[14u].w;
        float _1562 = fma(_724, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _716)) + cbModelParam._m0[15u].w;
        float _1565 = fma(_665, cbModelParam._m0[13u].z, fma(_664, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663));
        float _1568 = fma(_665, cbModelParam._m0[14u].z, fma(_664, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663));
        float _1571 = fma(_665, cbModelParam._m0[15u].z, fma(_664, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663));
        float _1599;
        if (_1565 > 0.0)
        {
            _1599 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1599 = frontier_phi_19_17_ladder;
        }
        float _1772;
        if (_1568 > 0.0)
        {
            _1772 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1772 = frontier_phi_28_24_ladder;
        }
        float _2067;
        if (_1571 > 0.0)
        {
            _2067 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2067 = frontier_phi_40_35_ladder;
        }
        float _2069 = isnan(_1772) ? _1599 : (isnan(_1599) ? _1772 : min(_1599, _1772));
        float _2070 = isnan(_2067) ? _2069 : (isnan(_2069) ? _2067 : min(_2069, _2067));
        float _2074 = (_2070 * _1565) + _1554;
        float _2075 = (_2070 * _1568) + _1558;
        float _2076 = (_2070 * _1571) + _1562;
        float _2077 = _2070 * 9.9999997473787516355514526367188e-05;
        float _2079 = (-1.0) - _2077;
        float _2081 = _2077 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2076 > _2081) || ((_2076 < _2079) || ((_2075 > _2081) || ((_2075 < _2079) || ((_2074 < _2079) || (_2074 > _2081))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2076, cbModelParam._m0[9u].z, fma(_2075, cbModelParam._m0[9u].y, _2074 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2076, cbModelParam._m0[10u].z, fma(_2075, cbModelParam._m0[10u].y, _2074 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2076, cbModelParam._m0[11u].z, fma(_2075, cbModelParam._m0[11u].y, _2074 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_18_40_ladder = _2221.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2221.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2221.x * cbModelParam._m0[1u].y;
        }
        _1587 = frontier_phi_18_40_ladder_2;
        _1589 = frontier_phi_18_40_ladder_1;
        _1591 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_663, _664, _665), _1505);
        _1587 = _1575.x * cbModelParam._m0[1u].y;
        _1589 = _1575.y * cbModelParam._m0[1u].y;
        _1591 = _1575.z * cbModelParam._m0[1u].y;
    }
    float _1595 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _494);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1595 : min(cbModelParam._m0[25u].w, _1595));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1653 = fma(_724, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _716)) + cbModelParam._m0[21u].w;
        float _1657 = fma(_724, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _716)) + cbModelParam._m0[22u].w;
        float _1661 = fma(_724, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _716)) + cbModelParam._m0[23u].w;
        float _1664 = fma(_665, cbModelParam._m0[21u].z, fma(_664, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663));
        float _1667 = fma(_665, cbModelParam._m0[22u].z, fma(_664, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663));
        float _1670 = fma(_665, cbModelParam._m0[23u].z, fma(_664, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663));
        float _1777;
        if (_1664 > 0.0)
        {
            _1777 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1777 = frontier_phi_30_26_ladder;
        }
        float _2094;
        if (_1667 > 0.0)
        {
            _2094 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2094 = frontier_phi_42_37_ladder;
        }
        float _2421;
        if (_1670 > 0.0)
        {
            _2421 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2421 = frontier_phi_52_49_ladder;
        }
        float _2423 = isnan(_2094) ? _1777 : (isnan(_1777) ? _2094 : min(_1777, _2094));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1664) + _1653;
        float _2429 = (_2424 * _1667) + _1657;
        float _2430 = (_2424 * _1670) + _1661;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2431;
        float _2434 = _2431 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2430 > _2434) || ((_2430 < _2432) || ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 < _2432) || (_2428 > _2434))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2430, cbModelParam._m0[17u].z, fma(_2429, cbModelParam._m0[17u].y, _2428 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2430, cbModelParam._m0[18u].z, fma(_2429, cbModelParam._m0[18u].y, _2428 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2430, cbModelParam._m0[19u].z, fma(_2429, cbModelParam._m0[19u].y, _2428 * cbModelParam._m0[19u].x))), _1596);
            frontier_phi_27_52_ladder = _2548.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2548.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2548.x * cbModelParam._m0[1u].z;
        }
        _1689 = frontier_phi_27_52_ladder_2;
        _1691 = frontier_phi_27_52_ladder_1;
        _1693 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_663, _664, _665), _1596);
        _1689 = _1673.x * cbModelParam._m0[1u].z;
        _1691 = _1673.y * cbModelParam._m0[1u].z;
        _1693 = _1673.z * cbModelParam._m0[1u].z;
    }
    float _1705 = ((((1.0 - _684) * ((_671 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_684 * _671)) * _655;
    float _1706 = _1705 * ((cbModelParam._m0[1u].w * (_1689 - _1587)) + _1587);
    float _1707 = _1705 * ((cbModelParam._m0[1u].w * (_1691 - _1589)) + _1589);
    float _1708 = _1705 * ((cbModelParam._m0[1u].w * (_1693 - _1591)) + _1591);
    float _1711 = fma(_1708, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1706 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1708, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1706 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1708, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, _1706 * cbSceneParam._m0[91u].x));
    float _1751 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1755 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1759 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1763 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1764 = _1751 / _1763;
    float _1765 = _1755 / _1763;
    float _1766 = _1759 / _1763;
    float _1913;
    float _1914;
    float _1915;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1793 = ((uint(_1766 > cbSceneParam._m0[59u].y) + uint(_1766 > cbSceneParam._m0[59u].x)) + uint(_1766 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1794 = _1793 + 43u;
        uint _1802 = _1793 + 44u;
        uint _1810 = _1793 + 45u;
        uint _1818 = _1793 + 46u;
        float _1829 = fma(_1763, cbSceneParam._m0[_1794].w, fma(_1759, cbSceneParam._m0[_1794].z, fma(_1755, cbSceneParam._m0[_1794].y, _1751 * cbSceneParam._m0[_1794].x)));
        float _1833 = fma(_1763, cbSceneParam._m0[_1802].w, fma(_1759, cbSceneParam._m0[_1802].z, fma(_1755, cbSceneParam._m0[_1802].y, _1751 * cbSceneParam._m0[_1802].x)));
        float _1841 = fma(_1763, cbSceneParam._m0[_1818].w, fma(_1759, cbSceneParam._m0[_1818].z, fma(_1755, cbSceneParam._m0[_1818].y, _1751 * cbSceneParam._m0[_1818].x)));
        float _1846 = cbSceneParam._m0[33u].z * _1841;
        float _1848 = cbSceneParam._m0[33u].w * _1841;
        float _1851 = fma(_1763, cbSceneParam._m0[_1810].w, fma(_1759, cbSceneParam._m0[_1810].z, fma(_1755, cbSceneParam._m0[_1810].y, _1751 * cbSceneParam._m0[_1810].x))) / _1841;
        float _1899 = (cbSceneParam._m0[33u].x - sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766))) * cbSceneParam._m0[33u].y;
        float _4262 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1906 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1846 + _1829) / _1841, (_1848 + _1833) / _1841), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1848 + _1829) / _1841, (_1833 - _1846) / _1841), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1829 - _1846) / _1841, (_1833 - _1848) / _1841), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1829 - _1848) / _1841, (_1846 + _1833) / _1841), _1851), 0.0)).x), vec4(0.25)));
        _1913 = 1.0 - (_1906 * cbSceneParam._m0[34u].x);
        _1914 = 1.0 - (_1906 * cbSceneParam._m0[34u].y);
        _1915 = 1.0 - (_1906 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1913 = 1.0;
        _1914 = 1.0;
        _1915 = 1.0;
    }
    float _1979;
    float _1981;
    float _1983;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1967 = fma(_1763, cbSceneParam._m0[63u].w, fma(_1759, cbSceneParam._m0[63u].z, fma(_1755, cbSceneParam._m0[63u].y, _1751 * cbSceneParam._m0[63u].x)));
        float _1968 = fma(_1763, cbSceneParam._m0[60u].w, fma(_1759, cbSceneParam._m0[60u].z, fma(_1755, cbSceneParam._m0[60u].y, _1751 * cbSceneParam._m0[60u].x))) / _1967;
        float _1969 = fma(_1763, cbSceneParam._m0[61u].w, fma(_1759, cbSceneParam._m0[61u].z, fma(_1755, cbSceneParam._m0[61u].y, _1751 * cbSceneParam._m0[61u].x))) / _1967;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1968 >= cbSceneParam._m0[64u].x) && (_1969 >= cbSceneParam._m0[64u].y)) && (_1968 <= cbSceneParam._m0[64u].z)) && (_1969 <= cbSceneParam._m0[64u].w))
        {
            float _2107 = fma(_1763, cbSceneParam._m0[62u].w, fma(_1759, cbSceneParam._m0[62u].z, fma(_1755, cbSceneParam._m0[62u].y, _1751 * cbSceneParam._m0[62u].x))) / _1967;
            float _2111 = isnan(cbSceneParam._m0[41u].w) ? _2107 : (isnan(_2107) ? cbSceneParam._m0[41u].w : max(_2107, cbSceneParam._m0[41u].w));
            float _2154 = (cbSceneParam._m0[33u].x - sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766))) * cbSceneParam._m0[33u].y;
            float _4278 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
            float _2161 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1968, cbSceneParam._m0[33u].w + _1969), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1968, _1969 - cbSceneParam._m0[33u].z), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1968 - cbSceneParam._m0[33u].z, _1969 - cbSceneParam._m0[33u].w), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1968 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1969), _2111), 0.0)).x), vec4(0.25)));
            float _2165 = 1.0 - (_2161 * cbSceneParam._m0[34u].x);
            float _2166 = 1.0 - (_2161 * cbSceneParam._m0[34u].y);
            float _2167 = 1.0 - (_2161 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2166) ? _1914 : (isnan(_1914) ? _2166 : min(_1914, _2166));
            frontier_phi_39_38_ladder_1 = isnan(_2165) ? _1913 : (isnan(_1913) ? _2165 : min(_1913, _2165));
            frontier_phi_39_38_ladder_2 = isnan(_2167) ? _1915 : (isnan(_1915) ? _2167 : min(_1915, _2167));
        }
        else
        {
            frontier_phi_39_38_ladder = _1914;
            frontier_phi_39_38_ladder_1 = _1913;
            frontier_phi_39_38_ladder_2 = _1915;
        }
        _1979 = frontier_phi_39_38_ladder_1;
        _1981 = frontier_phi_39_38_ladder;
        _1983 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1979 = _1913;
        _1981 = _1914;
        _1983 = _1915;
    }
    uvec4 _1988 = floatBitsToUint(cbInstanceData._m0[_630 + 5u]);
    uint _1990 = _1988.x * 14u;
    uint _1991 = _1990 + 13u;
    float _1998 = _655 + (-1.0);
    float _2003 = (cbLight._m0[_1991].x * _1998) + 1.0;
    float _2004 = (cbLight._m0[_1991].y * _1998) + 1.0;
    float _2005 = (cbLight._m0[_1991].z * _1998) + 1.0;
    float _2006 = (cbLight._m0[_1991].w * _1998) + 1.0;
    uint _2007 = _1990 + 5u;
    float _2013 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
    uint _2017 = _1990 + 4u;
    float _2026 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2030 = _1990 | 1u;
    float _2041 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_491, _492, _493));
    float _2044 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_491, _492, _493));
    float _4314 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _4325 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2049 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * 0.3183098733425140380859375;
    float _2051 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * 0.3183098733425140380859375;
    float _2058 = ((cbLight._m0[_2007].x * _2013) * _2051) + (((cbLight._m0[_2017].x * _1979) * _2026) * _2049);
    float _2059 = ((_2013 * cbLight._m0[_2007].y) * _2051) + (((cbLight._m0[_2017].y * _1981) * _2026) * _2049);
    float _2060 = ((_2013 * cbLight._m0[_2007].z) * _2051) + (((cbLight._m0[_2017].z * _1983) * _2026) * _2049);
    uvec4 _2064 = floatBitsToUint(cbLight._m0[_1990 + 12u]);
    bool _2066 = _2064.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2066)
    {
        _2168 = _2058;
        _2170 = _2059;
        _2172 = _2060;
    }
    else
    {
        uint _2176 = _1990 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_1990 + 2u].xyz), vec3(_491, _492, _493)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4336 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2195 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2058;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2059;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2060;
    }
    bool _2175 = _2064.y == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2175)
    {
        _2230 = _2168;
        _2232 = _2170;
        _2234 = _2172;
    }
    else
    {
        uint _2392 = _1990 + 7u;
        float _2408 = (dot(vec3(cbLight._m0[_1990 + 3u].xyz), vec3(_491, _492, _493)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4352 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2411 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2230 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2168;
        _2232 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2170;
        _2234 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2172;
    }
    uint _2237 = _1990 + 8u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _494) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_1990].x + _571;
    float _2253 = cbLight._m0[_1990].y + _572;
    float _2254 = cbLight._m0[_1990].z + _573;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_1990].xyz));
    float _4368 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _4379 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _2266 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2267 = dot(vec3(_491, _492, _493), vec3(_2259, _2260, _2261));
    float _4390 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2259, _2260, _2261));
    float _4401 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2251 * _2251;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2290 = (exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2291 = 1.0 - _2251;
    float _2302 = (0.5 / (((_2266 * ((_2265 * _2291) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2291) + _2251) * _2265))) * _2265;
    float _4412 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    uint _2318 = _1990 + 9u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _494) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2030].x + _571;
    float _2332 = cbLight._m0[_2030].y + _572;
    float _2333 = cbLight._m0[_2030].z + _573;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_2030].xyz));
    float _4423 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2345 = dot(vec3(_491, _492, _493), vec3(_2338, _2339, _2340));
    float _4434 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2338, _2339, _2340));
    float _4445 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2330 * _2330;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2367 = 1.0 - _2330;
    float _2377 = (0.5 / (((_2266 * ((_2344 * _2367) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2367) + _2330) * _2344))) * _2344;
    float _4456 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    float _2389 = (((_2366 * cbLight._m0[_2318].x) * _2379) * _2013) + ((((cbLight._m0[_2237].x * _1979) * _2290) * _2304) * _2026);
    float _2390 = (((_2366 * cbLight._m0[_2318].y) * _2379) * _2013) + ((((cbLight._m0[_2237].y * _1981) * _2290) * _2304) * _2026);
    float _2391 = (((_2366 * cbLight._m0[_2318].z) * _2379) * _2013) + ((((cbLight._m0[_2237].z * _1983) * _2290) * _2304) * _2026);
    float _2447;
    float _2449;
    float _2451;
    if (_2066)
    {
        _2447 = _2389;
        _2449 = _2390;
        _2451 = _2391;
    }
    else
    {
        uint _2453 = _1990 + 2u;
        uint _2457 = _1990 + 10u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _494) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _571;
        float _2474 = cbLight._m0[_2453].y + _572;
        float _2475 = cbLight._m0[_2453].z + _573;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_2453].xyz));
        float _4467 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2487 = dot(vec3(_491, _492, _493), vec3(_2480, _2481, _2482));
        float _4478 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4489 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2508 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2509 = 1.0 - _2472;
        float _2519 = (0.5 / (((_2266 * ((_2486 * _2509) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2509) + _2472) * _2486))) * _2486;
        float _4500 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2447 = (((_2508 * cbLight._m0[_2457].x) * _2521) * _2522) + _2389;
        _2449 = (((_2508 * cbLight._m0[_2457].y) * _2521) * _2522) + _2390;
        _2451 = (((_2508 * cbLight._m0[_2457].z) * _2521) * _2522) + _2391;
    }
    float _2553;
    float _2555;
    float _2557;
    if (_2175)
    {
        _2553 = _2447;
        _2555 = _2449;
        _2557 = _2451;
    }
    else
    {
        uint _2564 = _1990 + 3u;
        uint _2568 = _1990 + 11u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _494) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _571;
        float _2585 = cbLight._m0[_2564].y + _572;
        float _2586 = cbLight._m0[_2564].z + _573;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_2564].xyz));
        float _4516 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2598 = dot(vec3(_491, _492, _493), vec3(_2591, _2592, _2593));
        float _4527 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4538 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2619 = (exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2620 = 1.0 - _2583;
        float _2630 = (0.5 / (((_2266 * ((_2597 * _2620) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2620) + _2583) * _2597))) * _2597;
        float _4549 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
        _2553 = (((_2619 * cbLight._m0[_2568].x) * _2632) * _2633) + _2447;
        _2555 = (((_2619 * cbLight._m0[_2568].y) * _2632) * _2633) + _2449;
        _2557 = (((_2619 * cbLight._m0[_2568].z) * _2632) * _2633) + _2451;
    }
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_1988.y == 0u)
    {
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.x;
        uint _2666 = uint((float(_2654.y) * floor(float(uint(cbSceneParam._m0[85u].y * _592) / _2655))) + floor(float(uint(cbSceneParam._m0[85u].x * _591) / _2655)));
        float _2676 = (log2(_1766 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2677 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        uint _2680 = uint(isnan(14.0) ? _2677 : (isnan(_2677) ? 14.0 : min(_2677, 14.0)));
        uvec4 _2685 = texelFetch(g_lightClusterGridBuffer, int(((_2680 << 2u) + (_2666 << 6u)) >> 2u));
        uint _2686 = _2685.x;
        uint _2687 = _2654.z;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((((1u << ((_2687 >> 4u) & 15u)) + 4294967295u) & _2686) == 0u) || ((_2687 & 240u) == 0u))
        {
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
        }
        else
        {
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            uint _2923 = 0u;
            uint _2932;
            bool _2933;
            for (;;)
            {
                _2932 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                _2933 = _2932 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2933)
                {
                    frontier_phi_73_pred = _2922;
                    frontier_phi_73_pred_1 = _2921;
                    frontier_phi_73_pred_2 = _2920;
                    frontier_phi_73_pred_3 = _2919;
                    frontier_phi_73_pred_4 = _2918;
                    frontier_phi_73_pred_5 = _2917;
                }
                else
                {
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    uint _3068;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2919;
                    _3065 = _2920;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2932;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    for (;;)
                    {
                        uint _3072 = uint(findLSB(_3068)) + (_2923 << 5u);
                        uint _3069 = (_3068 + 4294967295u) & _3068;
                        uint _3074 = _3072 * 48u;
                        vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3094 = (_3072 * 48u) + 4u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3113 = (_3072 * 48u) + 8u;
                        vec3 _3124 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x));
                        float _3128 = _3088.x - _1764;
                        float _3129 = _3088.y - _1765;
                        float _3130 = _3088.z - _1766;
                        float _3131 = dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130));
                        float _3134 = inversesqrt(_3131);
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3138 = dot(vec3(_611, _614, _617), vec3(_3135, _3136, _3137));
                        float _3143 = 1.0 - (_3131 * _3088.w);
                        float _4575 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3145 = sqrt(_3131) * _3107.w;
                        float _3148 = 1.39999997615814208984375 / (_3145 + 1.39999997615814208984375);
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3138) + _3149;
                        float _3155 = _3145 * _3145;
                        float _3159 = ((isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))) * _3144) / ((_3155 * 0.699999988079071044921875) + 1.0);
                        float _3163 = (-0.0) - _1764;
                        float _3164 = (-0.0) - _1765;
                        float _3165 = (-0.0) - _1766;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3179 = exp2(log2(1.0 / ((_3155 * 3.5) + 5.0)) * 0.25);
                        float _3180 = 1.0 - _671;
                        float _3187 = sqrt(1.0 - ((1.0 - (_3180 * _3180)) * (1.0 - (_3179 * _3179))));
                        float _3188 = _3187 * _3187;
                        float _3189 = _3188 * _3188;
                        float _3190 = _3170 + _3135;
                        float _3191 = _3171 + _3136;
                        float _3192 = _3172 + _3137;
                        float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                        float _3200 = dot(vec3(_611, _614, _617), vec3(_3170, _3171, _3172));
                        float _4591 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3203 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3204 = dot(vec3(_611, _614, _617), vec3(_3196 * _3190, _3196 * _3191, _3196 * _3192));
                        float _4602 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3211 = ((_3207 * _3207) * (_3189 + (-1.0))) + 1.0;
                        float _3212 = _3148 * _3188;
                        float _3213 = _3212 * _3212;
                        float _3216 = ((1.0 - _3213) * _3138) + _3213;
                        float _4613 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3217 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3218 = 1.0 - _3188;
                        float _3228 = (0.5 / (((_3217 * ((_3203 * _3218) + _3188)) + 9.9999999392252902907785028219223e-09) + (((_3217 * _3218) + _3188) * _3203))) * _3217;
                        float _4624 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3239 = (((_3189 * 3.1415927410125732421875) * (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) / ((_3211 * _3211) * ((_3155 * 2.1991131305694580078125) + 3.141590118408203125))) * _3144;
                        _2992 = (_3159 * _3107.x) + _3065;
                        _2993 = (_3159 * _3107.y) + _3066;
                        _2994 = (_3159 * _3107.z) + _3067;
                        _2989 = (_3239 * _3124.x) + _3062;
                        _2990 = (_3239 * _3124.y) + _3063;
                        _2991 = (_3239 * _3124.z) + _3064;
                        if (_3069 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _2991;
                            _3065 = _2992;
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _3069;
                        }
                    }
                    frontier_phi_73_pred = _2994;
                    frontier_phi_73_pred_1 = _2993;
                    frontier_phi_73_pred_2 = _2992;
                    frontier_phi_73_pred_3 = _2991;
                    frontier_phi_73_pred_4 = _2990;
                    frontier_phi_73_pred_5 = _2989;
                }
                _2776 = frontier_phi_73_pred;
                _2774 = frontier_phi_73_pred_1;
                _2772 = frontier_phi_73_pred_2;
                _2770 = frontier_phi_73_pred_3;
                _2768 = frontier_phi_73_pred_4;
                _2766 = frontier_phi_73_pred_5;
                uint _2924 = _2923 + 1u;
                if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2917 = _2766;
                    _2918 = _2768;
                    _2919 = _2770;
                    _2920 = _2772;
                    _2921 = _2774;
                    _2922 = _2776;
                    _2923 = _2924;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
        }
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.z;
        uint _2782 = (_2780 >> 8u) & 15u;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((4294967295u << _2782) & _2686) == 0u)
        {
            _2885 = _2765;
            _2887 = _2767;
            _2889 = _2769;
            _2891 = _2771;
            _2893 = _2773;
            _2895 = _2775;
        }
        else
        {
            float _2910 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
            float _2911 = _2910 * _1764;
            float _2912 = _2910 * _1765;
            float _2913 = _2910 * _1766;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2782 < ((_2780 >> 12u) & 15u))
            {
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _3045 = _2765;
                float _3046 = _2767;
                float _3047 = _2769;
                float _3048 = _2771;
                float _3049 = _2773;
                float _3050 = _2775;
                uint _3051 = _2782;
                uint _3060;
                bool _3061;
                for (;;)
                {
                    _3060 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                    _3061 = _3060 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3061)
                    {
                        frontier_phi_84_pred = _3049;
                        frontier_phi_84_pred_1 = _3048;
                        frontier_phi_84_pred_2 = _3047;
                        frontier_phi_84_pred_3 = _3046;
                        frontier_phi_84_pred_4 = _3045;
                        frontier_phi_84_pred_5 = _3050;
                    }
                    else
                    {
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3266 = _3045;
                        float _3267 = _3046;
                        float _3268 = _3047;
                        float _3269 = _3048;
                        float _3270 = _3049;
                        float _3271 = _3050;
                        uint _3272 = _3060;
                        uint _3273;
                        vec4 _3298;
                        float _3299;
                        vec4 _3314;
                        vec3 _3326;
                        vec4 _3342;
                        vec4 _3358;
                        float _3405;
                        bool _3406;
                        for (;;)
                        {
                            uint _3283 = ((_3051 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3272));
                            _3273 = (_3272 + 4294967295u) & _3272;
                            uint _3285 = _3283 * 40u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            _3299 = _3298.w;
                            uint _3301 = (_3283 * 40u) + 4u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3316 = (_3283 * 40u) + 8u;
                            _3326 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x));
                            uint _3329 = (_3283 * 40u) + 16u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3345 = (_3283 * 40u) + 20u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3361 = (_3283 * 40u) + 24u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3380 = (_3283 * 40u) + 28u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3405 = fma(_1766, _3393.z, fma(_1765, _3393.y, _3393.x * _1764)) + _3393.w;
                            _3406 = !((fma(_1766, _3374.z, fma(_1765, _3374.y, _3374.x * _1764)) + _3374.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3406)
                            {
                                float _3433 = _3298.x - _1764;
                                float _3434 = _3298.y - _1765;
                                float _3435 = _3298.z - _1766;
                                float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                                float _3439 = inversesqrt(_3436);
                                float _3440 = _3439 * _3433;
                                float _3441 = _3439 * _3434;
                                float _3442 = _3439 * _3435;
                                float _3446 = 1.0 - (_3436 / (_3299 * _3299));
                                float _4635 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3451 = sqrt(_3436) * _3314.w;
                                float _3453 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                                float _3454 = _3453 * _3453;
                                float _3457 = ((1.0 - _3454) * dot(vec3(_3440, _3441, _3442), vec3(_611, _614, _617))) + _3454;
                                float _3460 = _3451 * _3451;
                                float _3464 = (fma(_1766, _3342.z, fma(_1765, _3342.y, _3342.x * _1764)) + _3342.w) / _3405;
                                float _3465 = (fma(_1766, _3358.z, fma(_1765, _3358.y, _3358.x * _1764)) + _3358.w) / _3405;
                                float _3469 = 1.0 - dot(vec2(_3464, _3465), vec2(_3464, _3465));
                                float _4651 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3471 = _3470 * (((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3447) / ((_3460 * 0.699999988079071044921875) + 1.0));
                                float _3483 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                                float _3484 = 1.0 - _671;
                                float _3491 = sqrt(1.0 - ((1.0 - (_3484 * _3484)) * (1.0 - (_3483 * _3483))));
                                float _3492 = _3491 * _3491;
                                float _3493 = _3492 * _3492;
                                float _3494 = _3440 - _2911;
                                float _3495 = _3441 - _2912;
                                float _3496 = _3442 - _2913;
                                float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                                float _3504 = dot(vec3(_611, _614, _617), vec3((-0.0) - _2911, (-0.0) - _2912, (-0.0) - _2913));
                                float _4662 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3508 = dot(vec3(_611, _614, _617), vec3(_3500 * _3494, _3500 * _3495, _3500 * _3496));
                                float _4673 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3515 = ((_3511 * _3511) * (_3493 + (-1.0))) + 1.0;
                                float _3516 = _3453 * _3492;
                                float _3517 = _3516 * _3516;
                                float _3523 = ((1.0 - _3517) * dot(vec3(_611, _614, _617), vec3(_3440, _3441, _3442))) + _3517;
                                float _4684 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3525 = 1.0 - _3492;
                                float _3535 = (0.5 / (((_3524 * ((_3507 * _3525) + _3492)) + 9.9999999392252902907785028219223e-09) + (((_3524 * _3525) + _3492) * _3507))) * _3524;
                                float _4695 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3545 = (_3470 * _3447) * (((_3493 * 3.1415927410125732421875) * (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) / ((_3515 * _3515) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3471 * _3314.y;
                                frontier_phi_90_pred_1 = _3471 * _3314.x;
                                frontier_phi_90_pred_2 = _3545 * _3326.z;
                                frontier_phi_90_pred_3 = _3545 * _3326.y;
                                frontier_phi_90_pred_4 = _3545 * _3326.x;
                                frontier_phi_90_pred_5 = _3471 * _3314.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3553 = frontier_phi_90_pred;
                            _3552 = frontier_phi_90_pred_1;
                            _3551 = frontier_phi_90_pred_2;
                            _3550 = frontier_phi_90_pred_3;
                            _3549 = frontier_phi_90_pred_4;
                            _3554 = frontier_phi_90_pred_5;
                            _3256 = _3552 + _3269;
                            _3257 = _3553 + _3270;
                            _3258 = _3554 + _3271;
                            _3253 = _3549 + _3266;
                            _3254 = _3550 + _3267;
                            _3255 = _3551 + _3268;
                            if (_3273 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3273;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3257;
                        frontier_phi_84_pred_1 = _3256;
                        frontier_phi_84_pred_2 = _3255;
                        frontier_phi_84_pred_3 = _3254;
                        frontier_phi_84_pred_4 = _3253;
                        frontier_phi_84_pred_5 = _3258;
                    }
                    _2894 = frontier_phi_84_pred;
                    _2892 = frontier_phi_84_pred_1;
                    _2890 = frontier_phi_84_pred_2;
                    _2888 = frontier_phi_84_pred_3;
                    _2886 = frontier_phi_84_pred_4;
                    _2896 = frontier_phi_84_pred_5;
                    uint _3052 = _3051 + 1u;
                    if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3045 = _2886;
                        _3046 = _2888;
                        _3047 = _2890;
                        _3048 = _2892;
                        _3049 = _2894;
                        _3050 = _2896;
                        _3051 = _3052;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2896;
                frontier_phi_65_66_ladder_1 = _2892;
                frontier_phi_65_66_ladder_2 = _2894;
                frontier_phi_65_66_ladder_3 = _2888;
                frontier_phi_65_66_ladder_4 = _2886;
                frontier_phi_65_66_ladder_5 = _2890;
            }
            else
            {
                frontier_phi_65_66_ladder = _2775;
                frontier_phi_65_66_ladder_1 = _2771;
                frontier_phi_65_66_ladder_2 = _2773;
                frontier_phi_65_66_ladder_3 = _2767;
                frontier_phi_65_66_ladder_4 = _2765;
                frontier_phi_65_66_ladder_5 = _2769;
            }
            _2885 = frontier_phi_65_66_ladder_4;
            _2887 = frontier_phi_65_66_ladder_3;
            _2889 = frontier_phi_65_66_ladder_5;
            _2891 = frontier_phi_65_66_ladder_1;
            _2893 = frontier_phi_65_66_ladder_2;
            _2895 = frontier_phi_65_66_ladder;
        }
        float _2900 = isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0));
        _2698 = (_2900 * _2891) + _2230;
        _2700 = (_2900 * _2893) + _2232;
        _2702 = (_2900 * _2895) + _2234;
        _2704 = ((_2885 * 0.039999999105930328369140625) * _2900) + _2553;
        _2706 = ((_2887 * 0.039999999105930328369140625) * _2900) + _2555;
        _2708 = ((_2889 * 0.039999999105930328369140625) * _2900) + _2557;
    }
    else
    {
        _2698 = _2230;
        _2700 = _2232;
        _2702 = _2234;
        _2704 = _2553;
        _2706 = _2555;
        _2708 = _2557;
    }
    float _4711 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4722 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4733 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _2725 = ((isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2698 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _655))) + ((_2704 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2726 = ((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2700 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _655))) + ((_2706 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2727 = ((isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2702 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _655))) + ((_2708 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    uint _2728 = _630 + 6u;
    float _2736 = _591 / cbSceneParam._m0[86u].x;
    float _2737 = _592 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _513 : (isnan(_513) ? cbSceneParam._m0[77u].w : min(_513, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_513 > cbSceneParam._m0[78u].w)
    {
        float _2790 = isnan(_513) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _513 : min(cbSceneParam._m0[80u].w, _513));
        float _2791 = _2790 / _513;
        float _2802 = _2791 * _564;
        float _2803 = _565 * _2791;
        float _2804 = (-0.0) - _2803;
        float _2805 = _2791 * _566;
        float _2807 = (cbSceneParam._m0[77u].w * _2804) / _2790;
        float _2808 = _2807 + cbSceneParam._m0[79u].w;
        float _2809 = cbSceneParam._m0[79u].w - _2803;
        float _2815 = sqrt(((_2802 * _2802) + (_2803 * _2803)) + (_2805 * _2805));
        float _2818 = (1.0 - (cbSceneParam._m0[77u].w / _2790)) * _2815;
        float _2823 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2825 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3002;
        if (abs((_2804 - _2807) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3002 = ((((_2808 > 0.0) ? exp2(_2823 * _2808) : (2.0 - exp2(_2825 * _2808))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2818;
        }
        else
        {
            float _2946 = 1.0 / cbSceneParam._m0[80u].x;
            float _2947 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : max(_2808, _2809));
            float _2948 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : min(_2808, _2809));
            float _2957 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : min(_2947, 0.0));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            _3002 = ((abs(_2815 / _2804) * cbSceneParam._m0[80u].y) * ((((_2957 - _2958) * 2.0) - ((exp2(_2823 * (isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0)))) - exp2(_2823 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))))) * _2946)) - ((exp2(_2825 * _2957) - exp2(_2825 * _2958)) * _2946))) + (_2818 * cbSceneParam._m0[80u].z);
        }
        vec4 _3004 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _3013 = exp2((_3002 * (-1.44269502162933349609375)) * (1.0 - _3004.w));
        float _3014 = log2(_3013);
        float _3030 = log2(_2756);
        _2827 = (exp2(_3030 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].x)) * _3004.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2829 = (exp2(_3030 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].y)) * _3004.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2831 = (exp2(_3030 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3014 * cbSceneParam._m0[78u].z)) * _3004.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2833 = _3013 * _2756;
    }
    else
    {
        _2827 = _2753;
        _2829 = _2754;
        _2831 = _2755;
        _2833 = _2756;
    }
    bool _3040;
    vec4 _2843;
    vec4 _2865;
    float _2867;
    float _2871;
    float _2872;
    float _2873;
    float _2874;
    bool _2884;
    for (;;)
    {
        _2843 = cbMatDynParam._m0[0u];
        float _2845 = roundEven(_2843.y);
        bool _2846 = _2845 == 3.0;
        float _2847 = log2(_2833);
        float _2854 = exp2(_2847 * cbSceneParam._m0[78u].x) * _2725;
        float _2855 = exp2(_2847 * cbSceneParam._m0[78u].y) * _2726;
        float _2856 = exp2(_2847 * cbSceneParam._m0[78u].z) * _2727;
        float _2863 = _580 + (-0.5);
        _2865 = cbMtdParam._m0[1u];
        _2867 = _2865.y * _2863;
        float _2870 = (_2845 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2871 = _2870 * (_2846 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2827)));
        _2872 = _2870 * (_2846 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2829)));
        _2873 = _2870 * (_2846 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2831)));
        _2874 = _2863 * 0.999000012874603271484375;
        _2884 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2884)
        {
            if ((cbInstanceData._m0[_630 + 7u].x + _2874) < 0.5)
            {
                _3040 = true;
                break;
            }
        }
        uint _2981 = _631 + uint(_2843.w);
        if ((cbInstanceData._m0[_2981].w < 1.0) && ((cbInstanceData._m0[_2981].w + _2874) < 0.5))
        {
            _3040 = true;
            break;
        }
        if ((_2867 + 1.0) < _2865.x)
        {
            _3040 = true;
            break;
        }
        _3040 = false;
        break;
    }
    float _3244;
    if (_3040)
    {
        discard_state = true;
        _3244 = 0.0;
    }
    else
    {
        _3244 = cbInstanceData._m0[_2728].w;
    }
    SV_Target.x = _2871;
    SV_Target.y = _2872;
    SV_Target.z = _2873;
    SV_Target.w = _3244;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2728].w;
    discard_exit();
}


