#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1009;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _241 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _246 = _241.z;
    float _250 = (_241.x * 2.0) + (-1.0);
    float _252 = (_241.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3347 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))));
    float _262 = fma(_259, _220, fma(_252, _213, _250 * _199));
    float _265 = fma(_259, _221, fma(_252, _214, _250 * _200));
    float _268 = fma(_259, _222, fma(_252, _215, _250 * _201));
    float _277 = exp2(log2(inversesqrt(dot(vec3(_262, _265, _268), vec3(_262, _265, _268))) * _265) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3358 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _302 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3369 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _309 = (1.0 - cbMtdParam._m0[12u].x) + (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)));
    float _310 = _309 * (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)));
    float _311 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _312 = isnan(1.0) ? _311 : (isnan(_311) ? 1.0 : min(_311, 1.0));
    vec4 _324 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _349 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _360 = cbMtdParam._m0[9u].x * _349.x;
    float _361 = cbMtdParam._m0[9u].y * _349.y;
    float _362 = cbMtdParam._m0[9u].z * _349.z;
    float _369 = (((cbMtdParam._m0[10u].x * _324.x) - _360) * _312) + _360;
    float _370 = (((cbMtdParam._m0[10u].y * _324.y) - _361) * _312) + _361;
    float _371 = (((cbMtdParam._m0[10u].z * _324.z) - _362) * _312) + _362;
    vec4 _384 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _391 = (_384.x * 2.0) + (-1.0);
    float _392 = (_384.y * 2.0) + (-1.0);
    float _393 = dot(vec2(_391, _392), vec2(_391, _392));
    float _3390 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _401 = ((_384.z - _246) * _312) + _246;
    float _402 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _403 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
    vec4 _424 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _430 = (_424.x * 2.0) + (-1.0);
    float _431 = (_424.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_430, _431), vec2(_430, _431));
    float _3411 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))));
    float _446 = (((((sqrt(1.0 - (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) - _259) * _312) + _259) - _437) * _403) + _437;
    vec4 _460 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _470 = ((((((_391 - _250) * _312) + _250) - _430) * _403) + _430) + (((_460.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _471 = ((((((_392 - _252) * _312) + _252) - _431) * _403) + _431) + (((_460.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _474 = fma(_446, _220, fma(_471, _213, _470 * _199));
    float _477 = fma(_446, _221, fma(_471, _214, _470 * _200));
    float _480 = fma(_446, _222, fma(_471, _215, _470 * _201));
    float _484 = inversesqrt(dot(vec3(_474, _477, _480), vec3(_474, _477, _480)));
    float _485 = _484 * _474;
    float _486 = _484 * _477;
    float _487 = _484 * _480;
    float _3422 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _488 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3444 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3455 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _507 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _558 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _548);
    float _559 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _548);
    float _560 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _548);
    float _564 = inversesqrt(dot(vec3(_558, _559, _560), vec3(_558, _559, _560)));
    float _565 = _558 * _564;
    float _566 = _559 * _564;
    float _567 = _560 * _564;
    float _573 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _574 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _593 = fma(_487, cbSceneParam._m0[5u].z, fma(_486, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _485));
    float _596 = fma(_487, cbSceneParam._m0[6u].z, fma(_486, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _485));
    float _599 = fma(_487, cbSceneParam._m0[7u].z, fma(_486, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _485));
    uint _612 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = (_612 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _620 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_614].x;
    float _621 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_614].y;
    float _622 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_614].z;
    float _3466 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    vec4 _634 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _573, cbSceneParam._m0[86u].y * _574));
    float _637 = _634.x * TEXCOORD_3.w;
    float _638 = dot(vec3(_485, _486, _487), vec3(_565, _566, _567));
    float _641 = _638 * 2.0;
    float _645 = (_641 * _485) - _565;
    float _646 = (_641 * _486) - _566;
    float _647 = (_641 * _487) - _567;
    float _651 = abs(dot(vec3(_565, _566, _567), vec3(_485, _486, _487)));
    float _3499 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _653 = sqrt(_488);
    float _666 = exp2((_653 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_653 * 3.0));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1008;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _733 = fma(_706, cbModelParam._m0[26u].z, fma(_702, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _698));
        float _737 = fma(_706, cbModelParam._m0[27u].z, fma(_702, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _698));
        float _741 = fma(_706, cbModelParam._m0[28u].z, fma(_702, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _698));
        float _766 = _698 + _485;
        float _767 = _702 + _486;
        float _768 = _706 + _487;
        float _778 = fma(_768, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766)) - _733;
        float _779 = fma(_768, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766)) - _737;
        float _780 = fma(_768, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766)) - _741;
        float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
        float _797 = ((_784 * _778) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_733 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _798 = ((_784 * _779) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_737 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_784 * _780) / cbModelParam._m0[34u].z) + ((((((_741 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_797, _798, _799), 0.0);
        float _836 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_802.x + (-0.5));
        float _838 = _836 * (_802.y + (-0.5));
        float _839 = _836 * (_802.z + (-0.5));
        float _846 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_809.x + (-0.5));
        float _848 = _846 * (_809.y + (-0.5));
        float _849 = _846 * (_809.z + (-0.5));
        float _856 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_816.x + (-0.5));
        float _858 = _856 * (_816.y + (-0.5));
        float _859 = _856 * (_816.z + (-0.5));
        float _866 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_823.x + (-0.5));
        float _868 = _866 * (_823.y + (-0.5));
        float _869 = _866 * (_823.z + (-0.5));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = _837 * 0.5;
        float _874 = _847 * 0.5;
        float _875 = _857 * 0.5;
        float _876 = dot(vec3(_873, _874, _875), vec3(_873, _874, _875));
        float _881 = (_876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_876);
        float _890 = (dot(vec3(_485, _486, _487), vec3(_881 * _873, _881 * _874, _881 * _875)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _900 = sqrt(((_874 * _874) + (_873 * _873)) + (_875 * _875)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3547 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_902 + 1.0))) + _907) * _870;
        float _917 = _838 * 0.5;
        float _918 = _848 * 0.5;
        float _919 = _858 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_485, _486, _487), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3580 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_944 + 1.0))) + _949) * _871;
        float _959 = _839 * 0.5;
        float _960 = _849 * 0.5;
        float _961 = _859 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_485, _486, _487), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3613 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_986 + 1.0))) + _991) * _872;
        _1008 = _839;
        _1010 = _838;
        _1011 = _837;
        _1012 = _849;
        _1013 = _848;
        _1014 = _847;
        _1015 = _859;
        _1016 = _858;
        _1017 = _857;
        _1018 = _872;
        _1019 = _871;
        _1020 = _870;
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
    }
    else
    {
        _1008 = _1009;
        _1010 = _1009;
        _1011 = _1009;
        _1012 = _1009;
        _1013 = _1009;
        _1014 = _1009;
        _1015 = _1009;
        _1016 = _1009;
        _1017 = _1009;
        _1018 = _1009;
        _1019 = _1009;
        _1020 = _1009;
        _1021 = 0.0;
        _1022 = 0.0;
        _1023 = 0.0;
    }
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1049 = fma(_706, cbModelParam._m0[30u].z, fma(_702, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _698));
        float _1053 = fma(_706, cbModelParam._m0[31u].z, fma(_702, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _698));
        float _1057 = fma(_706, cbModelParam._m0[32u].z, fma(_702, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _698));
        float _1080 = _698 + _485;
        float _1081 = _702 + _486;
        float _1082 = _706 + _487;
        float _1092 = fma(_1082, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1080)) - _1049;
        float _1093 = fma(_1082, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1080)) - _1053;
        float _1094 = fma(_1082, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1080)) - _1057;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1049 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1053 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[35u].z) + ((((((_1057 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1148 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1115.x + (-0.5));
        float _1150 = _1148 * (_1115.y + (-0.5));
        float _1151 = _1148 * (_1115.z + (-0.5));
        float _1158 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1122.x + (-0.5));
        float _1160 = _1158 * (_1122.y + (-0.5));
        float _1161 = _1158 * (_1122.z + (-0.5));
        float _1168 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1129.x + (-0.5));
        float _1170 = _1168 * (_1129.y + (-0.5));
        float _1171 = _1168 * (_1129.z + (-0.5));
        float _1178 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1136.x + (-0.5));
        float _1180 = _1178 * (_1136.y + (-0.5));
        float _1181 = _1178 * (_1136.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_485, _486, _487), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3676 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1212 + 1.0))) + _1217) * _1182;
        float _1227 = _1150 * 0.5;
        float _1228 = _1160 * 0.5;
        float _1229 = _1170 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_485, _486, _487), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3709 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1254 + 1.0))) + _1259) * _1183;
        float _1269 = _1151 * 0.5;
        float _1270 = _1161 * 0.5;
        float _1271 = _1171 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_485, _486, _487), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3742 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1296 + 1.0))) + _1301) * _1184;
        _1318 = _1151;
        _1319 = _1150;
        _1320 = _1149;
        _1321 = _1161;
        _1322 = _1160;
        _1323 = _1159;
        _1324 = _1171;
        _1325 = _1170;
        _1326 = _1169;
        _1327 = _1184;
        _1328 = _1183;
        _1329 = _1182;
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1009;
        _1319 = _1009;
        _1320 = _1009;
        _1321 = _1009;
        _1322 = _1009;
        _1323 = _1009;
        _1324 = _1009;
        _1325 = _1009;
        _1326 = _1009;
        _1327 = _1009;
        _1328 = _1009;
        _1329 = _1009;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1021)) + _1021;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1022)) + _1022;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1023)) + _1023;
    float _1365 = fma(_1344, cbSceneParam._m0[89u].z, fma(_1343, cbSceneParam._m0[89u].y, _1342 * cbSceneParam._m0[89u].x));
    float _1368 = fma(_1344, cbSceneParam._m0[90u].z, fma(_1343, cbSceneParam._m0[90u].y, _1342 * cbSceneParam._m0[90u].x));
    float _1371 = fma(_1344, cbSceneParam._m0[91u].z, fma(_1343, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1342));
    float _1386 = _645 * 0.5;
    float _1387 = _646 * 0.5;
    float _1388 = _647 * 0.5;
    float _1389 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1392 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1395 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1429;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1402 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1008, _1012, _1015, _1018));
        float _1406 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1010, _1013, _1016, _1019));
        float _1410 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1011, _1014, _1017, _1020));
        float _1417 = dot(vec4(cbModelParam._m0[39u]), vec4(_1386, _1387, _1388, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1440;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1431 = dot(vec4(cbModelParam._m0[40u]), vec4(_1386, _1387, _1388, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1444 = (_1440 * cbModelParam._m0[1u].x) + (_1429 * (1.0 - cbModelParam._m0[1u].x));
    float _1454 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _488);
    float _1455 = isnan(_1454) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1454 : min(cbModelParam._m0[25u].z, _1454));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1504 = fma(_706, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698)) + cbModelParam._m0[13u].w;
        float _1508 = fma(_706, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698)) + cbModelParam._m0[14u].w;
        float _1512 = fma(_706, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698)) + cbModelParam._m0[15u].w;
        float _1515 = fma(_647, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645));
        float _1518 = fma(_647, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645));
        float _1521 = fma(_647, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645));
        float _1549;
        if (_1515 > 0.0)
        {
            _1549 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1549 = frontier_phi_16_14_ladder;
        }
        float _1774;
        if (_1518 > 0.0)
        {
            _1774 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1774 = frontier_phi_25_21_ladder;
        }
        float _2020;
        if (_1521 > 0.0)
        {
            _2020 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2020 = frontier_phi_37_32_ladder;
        }
        float _2022 = isnan(_1774) ? _1549 : (isnan(_1549) ? _1774 : min(_1549, _1774));
        float _2023 = isnan(_2020) ? _2022 : (isnan(_2022) ? _2020 : min(_2022, _2020));
        float _2027 = (_2023 * _1515) + _1504;
        float _2028 = (_2023 * _1518) + _1508;
        float _2029 = (_2023 * _1521) + _1512;
        float _2030 = _2023 * 9.9999997473787516355514526367188e-05;
        float _2032 = (-1.0) - _2030;
        float _2034 = _2030 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2029 > _2034) || ((_2029 < _2032) || ((_2028 > _2034) || ((_2028 < _2032) || ((_2027 < _2032) || (_2027 > _2034))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2153 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2029, cbModelParam._m0[9u].z, fma(_2028, cbModelParam._m0[9u].y, _2027 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2029, cbModelParam._m0[10u].z, fma(_2028, cbModelParam._m0[10u].y, _2027 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2029, cbModelParam._m0[11u].z, fma(_2028, cbModelParam._m0[11u].y, _2027 * cbModelParam._m0[11u].x))), _1455);
            frontier_phi_15_37_ladder = _2153.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2153.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2153.x * cbModelParam._m0[1u].y;
        }
        _1537 = frontier_phi_15_37_ladder_2;
        _1539 = frontier_phi_15_37_ladder_1;
        _1541 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_645, _646, _647), _1455);
        _1537 = _1525.x * cbModelParam._m0[1u].y;
        _1539 = _1525.y * cbModelParam._m0[1u].y;
        _1541 = _1525.z * cbModelParam._m0[1u].y;
    }
    float _1545 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _488);
    float _1546 = isnan(_1545) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1545 : min(cbModelParam._m0[25u].w, _1545));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1603 = fma(_706, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698)) + cbModelParam._m0[21u].w;
        float _1607 = fma(_706, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698)) + cbModelParam._m0[22u].w;
        float _1611 = fma(_706, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698)) + cbModelParam._m0[23u].w;
        float _1614 = fma(_647, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645));
        float _1617 = fma(_647, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645));
        float _1620 = fma(_647, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645));
        float _1779;
        if (_1614 > 0.0)
        {
            _1779 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1779 = frontier_phi_27_23_ladder;
        }
        float _2047;
        if (_1617 > 0.0)
        {
            _2047 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2047 = frontier_phi_39_34_ladder;
        }
        float _2252;
        if (_1620 > 0.0)
        {
            _2252 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2252 = frontier_phi_48_45_ladder;
        }
        float _2254 = isnan(_2047) ? _1779 : (isnan(_1779) ? _2047 : min(_1779, _2047));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1614) + _1603;
        float _2260 = (_2255 * _1617) + _1607;
        float _2261 = (_2255 * _1620) + _1611;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2262;
        float _2265 = _2262 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2261 > _2265) || ((_2261 < _2263) || ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 < _2263) || (_2259 > _2265))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2261, cbModelParam._m0[17u].z, fma(_2260, cbModelParam._m0[17u].y, _2259 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2261, cbModelParam._m0[18u].z, fma(_2260, cbModelParam._m0[18u].y, _2259 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2261, cbModelParam._m0[19u].z, fma(_2260, cbModelParam._m0[19u].y, _2259 * cbModelParam._m0[19u].x))), _1546);
            frontier_phi_24_48_ladder = _2459.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2459.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2459.x * cbModelParam._m0[1u].z;
        }
        _1639 = frontier_phi_24_48_ladder_2;
        _1641 = frontier_phi_24_48_ladder_1;
        _1643 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_645, _646, _647), _1546);
        _1639 = _1623.x * cbModelParam._m0[1u].z;
        _1641 = _1623.y * cbModelParam._m0[1u].z;
        _1643 = _1623.z * cbModelParam._m0[1u].z;
    }
    float _1655 = ((((1.0 - _666) * ((_653 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_666 * _653)) * _637;
    float _1656 = _1655 * ((cbModelParam._m0[1u].w * (_1639 - _1537)) + _1537);
    float _1657 = _1655 * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1658 = _1655 * ((cbModelParam._m0[1u].w * (_1643 - _1541)) + _1541);
    float _1661 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, _1656 * cbSceneParam._m0[91u].x));
    vec4 _1675 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_573, _574));
    float _1677 = _1675.w;
    float _1689 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1677);
    float _1690 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1677);
    float _1691 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1677);
    uvec4 _1695 = floatBitsToUint(cbInstanceData._m0[_612 + 5u]);
    uint _1697 = _1695.x * 14u;
    uint _1698 = _1697 + 13u;
    float _1705 = _637 + (-1.0);
    float _1710 = (cbLight._m0[_1698].x * _1705) + 1.0;
    float _1711 = (cbLight._m0[_1698].y * _1705) + 1.0;
    float _1712 = (cbLight._m0[_1698].z * _1705) + 1.0;
    float _1713 = (cbLight._m0[_1698].w * _1705) + 1.0;
    uint _1714 = _1697 + 5u;
    float _1720 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1724 = _1697 + 4u;
    float _1733 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
    uint _1737 = _1697 | 1u;
    float _1748 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_485, _486, _487));
    float _1751 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_485, _486, _487));
    float _3878 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _3889 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1756 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1758 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1765 = ((cbLight._m0[_1714].x * _1720) * _1758) + (((cbLight._m0[_1724].x * _1689) * _1733) * _1756);
    float _1766 = ((_1720 * cbLight._m0[_1714].y) * _1758) + (((cbLight._m0[_1724].y * _1690) * _1733) * _1756);
    float _1767 = ((_1720 * cbLight._m0[_1714].z) * _1758) + (((cbLight._m0[_1724].z * _1691) * _1733) * _1756);
    uvec4 _1771 = floatBitsToUint(cbLight._m0[_1697 + 12u]);
    bool _1773 = _1771.x == 0u;
    float _1784;
    float _1786;
    float _1788;
    if (_1773)
    {
        _1784 = _1765;
        _1786 = _1766;
        _1788 = _1767;
    }
    else
    {
        uint _1792 = _1697 + 6u;
        float _1808 = (dot(vec3(cbLight._m0[_1697 + 2u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _1809 = _1808 * _1808;
        float _3900 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1811 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _1784 = (((cbLight._m0[_1792].x * 0.3183098733425140380859375) * _1810) * _1811) + _1765;
        _1786 = (((cbLight._m0[_1792].y * 0.3183098733425140380859375) * _1810) * _1811) + _1766;
        _1788 = (((cbLight._m0[_1792].z * 0.3183098733425140380859375) * _1810) * _1811) + _1767;
    }
    bool _1791 = _1771.y == 0u;
    float _1829;
    float _1831;
    float _1833;
    if (_1791)
    {
        _1829 = _1784;
        _1831 = _1786;
        _1833 = _1788;
    }
    else
    {
        uint _1991 = _1697 + 7u;
        float _2007 = (dot(vec3(cbLight._m0[_1697 + 3u].xyz), vec3(_485, _486, _487)) * 0.5) + 0.5;
        float _2008 = _2007 * _2007;
        float _3916 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2010 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _1829 = (((cbLight._m0[_1991].x * 0.3183098733425140380859375) * _2009) * _2010) + _1784;
        _1831 = (((cbLight._m0[_1991].y * 0.3183098733425140380859375) * _2009) * _2010) + _1786;
        _1833 = (((cbLight._m0[_1991].z * 0.3183098733425140380859375) * _2009) * _2010) + _1788;
    }
    uint _1836 = _1697 + 8u;
    float _1849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1697].w)) * _488) * 0.949999988079071044921875);
    float _1850 = _1849 * _1849;
    float _1851 = cbLight._m0[_1697].x + _565;
    float _1852 = cbLight._m0[_1697].y + _566;
    float _1853 = cbLight._m0[_1697].z + _567;
    float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
    float _1858 = _1857 * _1851;
    float _1859 = _1857 * _1852;
    float _1860 = _1857 * _1853;
    float _1861 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1697].xyz));
    float _3932 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _1865 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1866 = dot(vec3(_485, _486, _487), vec3(_1858, _1859, _1860));
    float _3954 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1870 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1858, _1859, _1860));
    float _3965 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1874 = _1850 * _1850;
    float _1878 = ((_1869 * _1869) * (_1874 + (-1.0))) + 1.0;
    float _1889 = (exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1890 = 1.0 - _1850;
    float _1901 = (0.5 / (((_1865 * ((_1864 * _1890) + _1850)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _1890) + _1850) * _1864))) * _1864;
    float _3976 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1874 / ((_1878 * _1878) * 3.141590118408203125));
    uint _1917 = _1697 + 9u;
    float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1737].w)) * _488) * 0.949999988079071044921875);
    float _1929 = _1928 * _1928;
    float _1930 = cbLight._m0[_1737].x + _565;
    float _1931 = cbLight._m0[_1737].y + _566;
    float _1932 = cbLight._m0[_1737].z + _567;
    float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
    float _1937 = _1936 * _1930;
    float _1938 = _1936 * _1931;
    float _1939 = _1936 * _1932;
    float _1940 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_1737].xyz));
    float _3987 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1944 = dot(vec3(_485, _486, _487), vec3(_1937, _1938, _1939));
    float _3998 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1948 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1937, _1938, _1939));
    float _4009 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1952 = _1929 * _1929;
    float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
    float _1965 = (exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1966 = 1.0 - _1929;
    float _1976 = (0.5 / (((_1865 * ((_1943 * _1966) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _1966) + _1929) * _1943))) * _1943;
    float _4020 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1978 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
    float _1988 = (((_1965 * cbLight._m0[_1917].x) * _1978) * _1720) + ((((cbLight._m0[_1836].x * _1689) * _1889) * _1903) * _1733);
    float _1989 = (((_1965 * cbLight._m0[_1917].y) * _1978) * _1720) + ((((cbLight._m0[_1836].y * _1690) * _1889) * _1903) * _1733);
    float _1990 = (((_1965 * cbLight._m0[_1917].z) * _1978) * _1720) + ((((cbLight._m0[_1836].z * _1691) * _1889) * _1903) * _1733);
    float _2052;
    float _2054;
    float _2056;
    if (_1773)
    {
        _2052 = _1988;
        _2054 = _1989;
        _2056 = _1990;
    }
    else
    {
        uint _2058 = _1697 + 2u;
        uint _2062 = _1697 + 10u;
        float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _488) * 0.949999988079071044921875);
        float _2077 = _2076 * _2076;
        float _2078 = cbLight._m0[_2058].x + _565;
        float _2079 = cbLight._m0[_2058].y + _566;
        float _2080 = cbLight._m0[_2058].z + _567;
        float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
        float _2085 = _2084 * _2078;
        float _2086 = _2084 * _2079;
        float _2087 = _2084 * _2080;
        float _2088 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2058].xyz));
        float _4031 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2092 = dot(vec3(_485, _486, _487), vec3(_2085, _2086, _2087));
        float _4042 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2096 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2085, _2086, _2087));
        float _4053 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2100 = _2077 * _2077;
        float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
        float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2114 = 1.0 - _2077;
        float _2124 = (0.5 / (((_1865 * ((_2091 * _2114) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _2114) + _2077) * _2091))) * _2091;
        float _4064 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2126 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
        float _2127 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
        _2052 = (((_2113 * cbLight._m0[_2062].x) * _2126) * _2127) + _1988;
        _2054 = (((_2113 * cbLight._m0[_2062].y) * _2126) * _2127) + _1989;
        _2056 = (((_2113 * cbLight._m0[_2062].z) * _2126) * _2127) + _1990;
    }
    float _2162;
    float _2164;
    float _2166;
    if (_1791)
    {
        _2162 = _2052;
        _2164 = _2054;
        _2166 = _2056;
    }
    else
    {
        uint _2173 = _1697 + 3u;
        uint _2177 = _1697 + 11u;
        float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _488) * 0.949999988079071044921875);
        float _2192 = _2191 * _2191;
        float _2193 = cbLight._m0[_2173].x + _565;
        float _2194 = cbLight._m0[_2173].y + _566;
        float _2195 = cbLight._m0[_2173].z + _567;
        float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
        float _2200 = _2199 * _2193;
        float _2201 = _2199 * _2194;
        float _2202 = _2199 * _2195;
        float _2203 = dot(vec3(_485, _486, _487), vec3(cbLight._m0[_2173].xyz));
        float _4080 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2207 = dot(vec3(_485, _486, _487), vec3(_2200, _2201, _2202));
        float _4091 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2211 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2200, _2201, _2202));
        float _4102 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2215 = _2192 * _2192;
        float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
        float _2228 = (exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2229 = 1.0 - _2192;
        float _2239 = (0.5 / (((_1865 * ((_2206 * _2229) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _2229) + _2192) * _2206))) * _2206;
        float _4113 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2241 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
        float _2242 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _2162 = (((_2228 * cbLight._m0[_2177].x) * _2241) * _2242) + _2052;
        _2164 = (((_2228 * cbLight._m0[_2177].y) * _2241) * _2242) + _2054;
        _2166 = (((_2228 * cbLight._m0[_2177].z) * _2241) * _2242) + _2056;
    }
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    float _2386;
    if (_1695.y == 0u)
    {
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2317;
        float _2319 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2317;
        float _2320 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2317;
        uvec4 _2332 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2333 = _2332.x;
        uint _2344 = uint((float(_2332.y) * floor(float(uint(cbSceneParam._m0[85u].y * _574) / _2333))) + floor(float(uint(cbSceneParam._m0[85u].x * _573) / _2333)));
        float _2354 = (log2(_2320 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2355 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        uint _2358 = uint(isnan(14.0) ? _2355 : (isnan(_2355) ? 14.0 : min(_2355, 14.0)));
        uvec4 _2363 = texelFetch(g_lightClusterGridBuffer, int(((_2358 << 2u) + (_2344 << 6u)) >> 2u));
        uint _2364 = _2363.x;
        uint _2365 = _2332.z;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        if (((((1u << ((_2365 >> 4u) & 15u)) + 4294967295u) & _2364) == 0u) || ((_2365 & 240u) == 0u))
        {
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
        }
        else
        {
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2475;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            uint _2614 = 0u;
            uint _2623;
            bool _2624;
            for (;;)
            {
                _2623 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                _2624 = _2623 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2624)
                {
                    frontier_phi_63_pred = _2613;
                    frontier_phi_63_pred_1 = _2612;
                    frontier_phi_63_pred_2 = _2611;
                    frontier_phi_63_pred_3 = _2610;
                    frontier_phi_63_pred_4 = _2609;
                    frontier_phi_63_pred_5 = _2608;
                }
                else
                {
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    uint _2738;
                    _2732 = _2608;
                    _2733 = _2609;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2613;
                    _2738 = _2623;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    for (;;)
                    {
                        uint _2742 = uint(findLSB(_2738)) + (_2614 << 5u);
                        uint _2739 = (_2738 + 4294967295u) & _2738;
                        uint _2744 = _2742 * 48u;
                        vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 3u)).x));
                        uint _2764 = (_2742 * 48u) + 4u;
                        vec4 _2777 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2783 = (_2742 * 48u) + 8u;
                        vec3 _2794 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x));
                        float _2798 = _2758.x - _2318;
                        float _2799 = _2758.y - _2319;
                        float _2800 = _2758.z - _2320;
                        float _2801 = dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800));
                        float _2804 = inversesqrt(_2801);
                        float _2805 = _2804 * _2798;
                        float _2806 = _2804 * _2799;
                        float _2807 = _2804 * _2800;
                        float _2808 = dot(vec3(_593, _596, _599), vec3(_2805, _2806, _2807));
                        float _2813 = 1.0 - (_2801 * _2758.w);
                        float _4139 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2814 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2815 = sqrt(_2801) * _2777.w;
                        float _2818 = 1.39999997615814208984375 / (_2815 + 1.39999997615814208984375);
                        float _2819 = _2818 * _2818;
                        float _2822 = ((1.0 - _2819) * _2808) + _2819;
                        float _2825 = _2815 * _2815;
                        float _2829 = ((isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0))) * _2814) / ((_2825 * 0.699999988079071044921875) + 1.0);
                        float _2833 = (-0.0) - _2318;
                        float _2834 = (-0.0) - _2319;
                        float _2835 = (-0.0) - _2320;
                        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
                        float _2840 = _2839 * _2833;
                        float _2841 = _2839 * _2834;
                        float _2842 = _2839 * _2835;
                        float _2850 = exp2(log2(1.0 / ((_2825 * 3.5) + 5.0)) * 0.25);
                        float _2851 = 1.0 - _653;
                        float _2858 = sqrt(1.0 - ((1.0 - (_2851 * _2851)) * (1.0 - (_2850 * _2850))));
                        float _2859 = _2858 * _2858;
                        float _2860 = _2859 * _2859;
                        float _2861 = _2840 + _2805;
                        float _2862 = _2841 + _2806;
                        float _2863 = _2842 + _2807;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2871 = dot(vec3(_593, _596, _599), vec3(_2840, _2841, _2842));
                        float _4155 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2874 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2875 = dot(vec3(_593, _596, _599), vec3(_2867 * _2861, _2867 * _2862, _2867 * _2863));
                        float _4166 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2878 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2882 = ((_2878 * _2878) * (_2860 + (-1.0))) + 1.0;
                        float _2883 = _2818 * _2859;
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2808) + _2884;
                        float _4177 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2888 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2889 = 1.0 - _2859;
                        float _2899 = (0.5 / (((_2888 * ((_2874 * _2889) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2888 * _2889) + _2859) * _2874))) * _2888;
                        float _4188 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2910 = (((_2860 * 3.1415927410125732421875) * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) / ((_2882 * _2882) * ((_2825 * 2.1991131305694580078125) + 3.141590118408203125))) * _2814;
                        _2667 = (_2829 * _2777.x) + _2735;
                        _2668 = (_2829 * _2777.y) + _2736;
                        _2669 = (_2829 * _2777.z) + _2737;
                        _2664 = (_2910 * _2794.x) + _2732;
                        _2665 = (_2910 * _2794.y) + _2733;
                        _2666 = (_2910 * _2794.z) + _2734;
                        if (_2739 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2732 = _2664;
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2739;
                        }
                    }
                    frontier_phi_63_pred = _2669;
                    frontier_phi_63_pred_1 = _2668;
                    frontier_phi_63_pred_2 = _2667;
                    frontier_phi_63_pred_3 = _2666;
                    frontier_phi_63_pred_4 = _2665;
                    frontier_phi_63_pred_5 = _2664;
                }
                _2475 = frontier_phi_63_pred;
                _2473 = frontier_phi_63_pred_1;
                _2471 = frontier_phi_63_pred_2;
                _2469 = frontier_phi_63_pred_3;
                _2467 = frontier_phi_63_pred_4;
                _2465 = frontier_phi_63_pred_5;
                uint _2615 = _2614 + 1u;
                if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2608 = _2465;
                    _2609 = _2467;
                    _2610 = _2469;
                    _2611 = _2471;
                    _2612 = _2473;
                    _2613 = _2475;
                    _2614 = _2615;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
        }
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.z;
        uint _2481 = (_2479 >> 8u) & 15u;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        if (((4294967295u << _2481) & _2364) == 0u)
        {
            _2576 = _2464;
            _2578 = _2466;
            _2580 = _2468;
            _2582 = _2470;
            _2584 = _2472;
            _2586 = _2474;
        }
        else
        {
            float _2601 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
            float _2602 = _2601 * _2318;
            float _2603 = _2601 * _2319;
            float _2604 = _2601 * _2320;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2481 < ((_2479 >> 12u) & 15u))
            {
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2715 = _2464;
                float _2716 = _2466;
                float _2717 = _2468;
                float _2718 = _2470;
                float _2719 = _2472;
                float _2720 = _2474;
                uint _2721 = _2481;
                uint _2730;
                bool _2731;
                for (;;)
                {
                    _2730 = texelFetch(g_lightClassification, int((((_2358 << 5u) + (_2344 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                    _2731 = _2730 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2731)
                    {
                        frontier_phi_69_pred = _2720;
                        frontier_phi_69_pred_1 = _2719;
                        frontier_phi_69_pred_2 = _2718;
                        frontier_phi_69_pred_3 = _2717;
                        frontier_phi_69_pred_4 = _2716;
                        frontier_phi_69_pred_5 = _2715;
                    }
                    else
                    {
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _2928 = _2715;
                        float _2929 = _2716;
                        float _2930 = _2717;
                        float _2931 = _2718;
                        float _2932 = _2719;
                        float _2933 = _2720;
                        uint _2934 = _2730;
                        uint _2935;
                        vec4 _2960;
                        float _2961;
                        vec4 _2976;
                        vec3 _2988;
                        vec4 _3004;
                        vec4 _3020;
                        float _3067;
                        bool _3068;
                        for (;;)
                        {
                            uint _2945 = ((_2721 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2934));
                            _2935 = (_2934 + 4294967295u) & _2934;
                            uint _2947 = _2945 * 40u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            _2961 = _2960.w;
                            uint _2963 = (_2945 * 40u) + 4u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2978 = (_2945 * 40u) + 8u;
                            _2988 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x));
                            uint _2991 = (_2945 * 40u) + 16u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2945 * 40u) + 20u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3023 = (_2945 * 40u) + 24u;
                            vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3042 = (_2945 * 40u) + 28u;
                            vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3067 = fma(_2320, _3055.z, fma(_2319, _3055.y, _3055.x * _2318)) + _3055.w;
                            _3068 = !((fma(_2320, _3036.z, fma(_2319, _3036.y, _3036.x * _2318)) + _3036.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3068)
                            {
                                float _3095 = _2960.x - _2318;
                                float _3096 = _2960.y - _2319;
                                float _3097 = _2960.z - _2320;
                                float _3098 = dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097));
                                float _3101 = inversesqrt(_3098);
                                float _3102 = _3101 * _3095;
                                float _3103 = _3101 * _3096;
                                float _3104 = _3101 * _3097;
                                float _3108 = 1.0 - (_3098 / (_2961 * _2961));
                                float _4199 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3113 = sqrt(_3098) * _2976.w;
                                float _3115 = 1.39999997615814208984375 / (_3113 + 1.39999997615814208984375);
                                float _3116 = _3115 * _3115;
                                float _3119 = ((1.0 - _3116) * dot(vec3(_3102, _3103, _3104), vec3(_593, _596, _599))) + _3116;
                                float _3122 = _3113 * _3113;
                                float _3126 = (fma(_2320, _3004.z, fma(_2319, _3004.y, _3004.x * _2318)) + _3004.w) / _3067;
                                float _3127 = (fma(_2320, _3020.z, fma(_2319, _3020.y, _3020.x * _2318)) + _3020.w) / _3067;
                                float _3131 = 1.0 - dot(vec2(_3126, _3127), vec2(_3126, _3127));
                                float _4215 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3133 = _3132 * (((isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))) * _3109) / ((_3122 * 0.699999988079071044921875) + 1.0));
                                float _3145 = exp2(log2(1.0 / ((_3122 * 3.5) + 5.0)) * 0.25);
                                float _3146 = 1.0 - _653;
                                float _3153 = sqrt(1.0 - ((1.0 - (_3146 * _3146)) * (1.0 - (_3145 * _3145))));
                                float _3154 = _3153 * _3153;
                                float _3155 = _3154 * _3154;
                                float _3156 = _3102 - _2602;
                                float _3157 = _3103 - _2603;
                                float _3158 = _3104 - _2604;
                                float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                                float _3166 = dot(vec3(_593, _596, _599), vec3((-0.0) - _2602, (-0.0) - _2603, (-0.0) - _2604));
                                float _4226 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3169 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3170 = dot(vec3(_593, _596, _599), vec3(_3162 * _3156, _3162 * _3157, _3162 * _3158));
                                float _4237 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3173 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3177 = ((_3173 * _3173) * (_3155 + (-1.0))) + 1.0;
                                float _3178 = _3115 * _3154;
                                float _3179 = _3178 * _3178;
                                float _3185 = ((1.0 - _3179) * dot(vec3(_593, _596, _599), vec3(_3102, _3103, _3104))) + _3179;
                                float _4248 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3187 = 1.0 - _3154;
                                float _3197 = (0.5 / (((_3186 * ((_3169 * _3187) + _3154)) + 9.9999999392252902907785028219223e-09) + (((_3186 * _3187) + _3154) * _3169))) * _3186;
                                float _4259 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3207 = (_3132 * _3109) * (((_3155 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_3177 * _3177) * ((_3122 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3133 * _2976.z;
                                frontier_phi_75_pred_1 = _3133 * _2976.y;
                                frontier_phi_75_pred_2 = _3133 * _2976.x;
                                frontier_phi_75_pred_3 = _3207 * _2988.z;
                                frontier_phi_75_pred_4 = _3207 * _2988.y;
                                frontier_phi_75_pred_5 = _3207 * _2988.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3216 = frontier_phi_75_pred;
                            _3215 = frontier_phi_75_pred_1;
                            _3214 = frontier_phi_75_pred_2;
                            _3213 = frontier_phi_75_pred_3;
                            _3212 = frontier_phi_75_pred_4;
                            _3211 = frontier_phi_75_pred_5;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            _2920 = _3216 + _2933;
                            _2915 = _3211 + _2928;
                            _2916 = _3212 + _2929;
                            _2917 = _3213 + _2930;
                            if (_2935 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2935;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2920;
                        frontier_phi_69_pred_1 = _2919;
                        frontier_phi_69_pred_2 = _2918;
                        frontier_phi_69_pred_3 = _2917;
                        frontier_phi_69_pred_4 = _2916;
                        frontier_phi_69_pred_5 = _2915;
                    }
                    _2587 = frontier_phi_69_pred;
                    _2585 = frontier_phi_69_pred_1;
                    _2583 = frontier_phi_69_pred_2;
                    _2581 = frontier_phi_69_pred_3;
                    _2579 = frontier_phi_69_pred_4;
                    _2577 = frontier_phi_69_pred_5;
                    uint _2722 = _2721 + 1u;
                    if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2715 = _2577;
                        _2716 = _2579;
                        _2717 = _2581;
                        _2718 = _2583;
                        _2719 = _2585;
                        _2720 = _2587;
                        _2721 = _2722;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2587;
                frontier_phi_57_58_ladder_1 = _2585;
                frontier_phi_57_58_ladder_2 = _2583;
                frontier_phi_57_58_ladder_3 = _2581;
                frontier_phi_57_58_ladder_4 = _2579;
                frontier_phi_57_58_ladder_5 = _2577;
            }
            else
            {
                frontier_phi_57_58_ladder = _2474;
                frontier_phi_57_58_ladder_1 = _2472;
                frontier_phi_57_58_ladder_2 = _2470;
                frontier_phi_57_58_ladder_3 = _2468;
                frontier_phi_57_58_ladder_4 = _2466;
                frontier_phi_57_58_ladder_5 = _2464;
            }
            _2576 = frontier_phi_57_58_ladder_5;
            _2578 = frontier_phi_57_58_ladder_4;
            _2580 = frontier_phi_57_58_ladder_3;
            _2582 = frontier_phi_57_58_ladder_2;
            _2584 = frontier_phi_57_58_ladder_1;
            _2586 = frontier_phi_57_58_ladder;
        }
        float _2591 = isnan(1.0) ? _637 : (isnan(_637) ? 1.0 : min(_637, 1.0));
        _2376 = (_2591 * _2582) + _1829;
        _2378 = (_2591 * _2584) + _1831;
        _2380 = (_2591 * _2586) + _1833;
        _2382 = ((_2576 * 0.039999999105930328369140625) * _2591) + _2162;
        _2384 = ((_2578 * 0.039999999105930328369140625) * _2591) + _2164;
        _2386 = ((_2580 * 0.039999999105930328369140625) * _2591) + _2166;
    }
    else
    {
        _2376 = _1829;
        _2378 = _1831;
        _2380 = _1833;
        _2382 = _2162;
        _2384 = _2164;
        _2386 = _2166;
    }
    float _4275 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4286 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4297 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    uint _2406 = _612 + 6u;
    float _2414 = _573 / cbSceneParam._m0[86u].x;
    float _2415 = _574 / cbSceneParam._m0[86u].y;
    vec4 _2429 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2414, _2415, (log2((isnan(cbSceneParam._m0[77u].w) ? _507 : (isnan(_507) ? cbSceneParam._m0[77u].w : min(_507, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2431 = _2429.x;
    float _2432 = _2429.y;
    float _2433 = _2429.z;
    float _2434 = _2429.w;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    if (_507 > cbSceneParam._m0[78u].w)
    {
        float _2489 = isnan(_507) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _507 : min(cbSceneParam._m0[80u].w, _507));
        float _2490 = _2489 / _507;
        float _2501 = _2490 * _558;
        float _2502 = _559 * _2490;
        float _2503 = (-0.0) - _2502;
        float _2504 = _2490 * _560;
        float _2506 = (cbSceneParam._m0[77u].w * _2503) / _2489;
        float _2507 = _2506 + cbSceneParam._m0[79u].w;
        float _2508 = cbSceneParam._m0[79u].w - _2502;
        float _2514 = sqrt(((_2501 * _2501) + (_2502 * _2502)) + (_2504 * _2504));
        float _2517 = (1.0 - (cbSceneParam._m0[77u].w / _2489)) * _2514;
        float _2522 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2524 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2677;
        if (abs((_2503 - _2506) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2677 = ((((_2507 > 0.0) ? exp2(_2522 * _2507) : (2.0 - exp2(_2524 * _2507))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2517;
        }
        else
        {
            float _2637 = 1.0 / cbSceneParam._m0[80u].x;
            float _2638 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : max(_2507, _2508));
            float _2639 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : min(_2507, _2508));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            _2677 = ((abs(_2514 / _2503) * cbSceneParam._m0[80u].y) * ((((_2648 - _2649) * 2.0) - ((exp2(_2522 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0)))) - exp2(_2522 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0))))) * _2637)) - ((exp2(_2524 * _2648) - exp2(_2524 * _2649)) * _2637))) + (_2517 * cbSceneParam._m0[80u].z);
        }
        vec4 _2679 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2414, _2415, 1.0), 0.0);
        float _2688 = exp2((_2677 * (-1.44269502162933349609375)) * (1.0 - _2679.w));
        float _2689 = log2(_2688);
        float _2705 = log2(_2434);
        _2526 = (exp2(_2705 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].x)) * _2679.x) / cbSceneParam._m0[78u].x)) + _2431;
        _2528 = (exp2(_2705 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].y)) * _2679.y) / cbSceneParam._m0[78u].y)) + _2432;
        _2530 = (exp2(_2705 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].z)) * _2679.z) / cbSceneParam._m0[78u].z)) + _2433;
        _2532 = _2688 * _2434;
    }
    else
    {
        _2526 = _2431;
        _2528 = _2432;
        _2530 = _2433;
        _2532 = _2434;
    }
    float _2544 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2545 = _2544 == 3.0;
    float _2546 = log2(_2532);
    float _2553 = exp2(_2546 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2376 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _637))) + ((_2382 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1444)) * cbPerFrame._m0[3u].x));
    float _2554 = exp2(_2546 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2378 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _637))) + ((_2384 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1444)) * cbPerFrame._m0[3u].x));
    float _2555 = exp2(_2546 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2380 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _637))) + ((_2386 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1444)) * cbPerFrame._m0[3u].x));
    float _2564 = (_2544 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2564 * (_2545 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2526)));
    SV_Target.y = _2564 * (_2545 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2528)));
    SV_Target.z = _2564 * (_2545 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2530)));
    SV_Target.w = cbInstanceData._m0[_2406].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2406].w;
}


