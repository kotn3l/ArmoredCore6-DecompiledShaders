#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1054;
float _3446;
float _3447;
float _3448;
float _3449;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _245 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _250 = _245.z;
    float _254 = (_245.x * 2.0) + (-1.0);
    float _256 = (_245.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3458 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))));
    float _266 = fma(_263, _224, fma(_256, _217, _254 * _203));
    float _269 = fma(_263, _225, fma(_256, _218, _254 * _204));
    float _272 = fma(_263, _226, fma(_256, _219, _254 * _205));
    float _281 = exp2(log2(inversesqrt(dot(vec3(_266, _269, _272), vec3(_266, _269, _272))) * _269) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3469 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _306 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3480 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _313 = (1.0 - cbMtdParam._m0[12u].x) + (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)));
    float _314 = _313 * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)));
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(1.0) ? _315 : (isnan(_315) ? 1.0 : min(_315, 1.0));
    vec4 _328 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _353 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _364 = cbMtdParam._m0[9u].x * _353.x;
    float _365 = cbMtdParam._m0[9u].y * _353.y;
    float _366 = cbMtdParam._m0[9u].z * _353.z;
    float _373 = (((cbMtdParam._m0[10u].x * _328.x) - _364) * _316) + _364;
    float _374 = (((cbMtdParam._m0[10u].y * _328.y) - _365) * _316) + _365;
    float _375 = (((cbMtdParam._m0[10u].z * _328.z) - _366) * _316) + _366;
    vec4 _388 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _395 = (_388.x * 2.0) + (-1.0);
    float _396 = (_388.y * 2.0) + (-1.0);
    float _397 = dot(vec2(_395, _396), vec2(_395, _396));
    float _3501 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _405 = ((_388.z - _250) * _316) + _250;
    float _406 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _407 = isnan(1.0) ? _406 : (isnan(_406) ? 1.0 : min(_406, 1.0));
    vec4 _428 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _434 = (_428.x * 2.0) + (-1.0);
    float _435 = (_428.y * 2.0) + (-1.0);
    float _436 = dot(vec2(_434, _435), vec2(_434, _435));
    float _3522 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))));
    float _450 = (((((sqrt(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) - _263) * _316) + _263) - _441) * _407) + _441;
    vec4 _464 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _474 = ((((((_395 - _254) * _316) + _254) - _434) * _407) + _434) + (((_464.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _475 = ((((((_396 - _256) * _316) + _256) - _435) * _407) + _435) + (((_464.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _478 = fma(_450, _224, fma(_475, _217, _474 * _203));
    float _481 = fma(_450, _225, fma(_475, _218, _474 * _204));
    float _484 = fma(_450, _226, fma(_475, _219, _474 * _205));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    float _489 = _488 * _478;
    float _490 = _488 * _481;
    float _491 = _488 * _484;
    float _3533 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _492 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3555 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3566 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _511 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _562 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _552);
    float _563 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _552);
    float _564 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _552);
    float _568 = inversesqrt(dot(vec3(_562, _563, _564), vec3(_562, _563, _564)));
    float _569 = _562 * _568;
    float _570 = _563 * _568;
    float _571 = _564 * _568;
    vec4 _576 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _578 = _576.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _733 = sqrt(((_562 * _562) + (_563 * _563)) + (_564 * _564));
        float _739 = (cbMatDynParam._m0[5u].x * _733) + cbMatDynParam._m0[5u].y;
        float _3577 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _744 = (cbMatDynParam._m0[5u].z * _733) + cbMatDynParam._m0[5u].w;
        float _3588 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) - _740)) + _740) < ((_578 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _589 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _590 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _609 = fma(_491, cbSceneParam._m0[5u].z, fma(_490, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _489));
    float _612 = fma(_491, cbSceneParam._m0[6u].z, fma(_490, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _489));
    float _615 = fma(_491, cbSceneParam._m0[7u].z, fma(_490, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _489));
    uint _628 = uint(roundEven(NORMAL.w)) * 13u;
    uint _629 = _628 + 9u;
    uint _630 = _629 + uint(cbMatDynParam._m0[0u].w);
    float _636 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_630].x;
    float _637 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_630].y;
    float _638 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_630].z;
    float _3599 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    vec4 _650 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _589, cbSceneParam._m0[86u].y * _590));
    float _653 = _650.x * TEXCOORD_3.w;
    float _654 = dot(vec3(_489, _490, _491), vec3(_569, _570, _571));
    float _657 = _654 * 2.0;
    float _661 = (_657 * _489) - _569;
    float _662 = (_657 * _490) - _570;
    float _663 = (_657 * _491) - _571;
    float _667 = abs(dot(vec3(_569, _570, _571), vec3(_489, _490, _491)));
    float _3632 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _669 = sqrt(_492);
    float _682 = exp2((_669 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_669 * 3.0));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1053;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _778 = fma(_722, cbModelParam._m0[26u].z, fma(_718, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _714));
        float _782 = fma(_722, cbModelParam._m0[27u].z, fma(_718, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _714));
        float _786 = fma(_722, cbModelParam._m0[28u].z, fma(_718, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _714));
        float _811 = _714 + _489;
        float _812 = _718 + _490;
        float _813 = _722 + _491;
        float _823 = fma(_813, cbModelParam._m0[26u].z, fma(_812, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811)) - _778;
        float _824 = fma(_813, cbModelParam._m0[27u].z, fma(_812, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811)) - _782;
        float _825 = fma(_813, cbModelParam._m0[28u].z, fma(_812, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811)) - _786;
        float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
        float _842 = ((_829 * _823) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_778 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_829 * _824) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_782 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_829 * _825) / cbModelParam._m0[34u].z) + ((((((_786 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        float _881 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_847.x + (-0.5));
        float _883 = _881 * (_847.y + (-0.5));
        float _884 = _881 * (_847.z + (-0.5));
        float _891 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_854.x + (-0.5));
        float _893 = _891 * (_854.y + (-0.5));
        float _894 = _891 * (_854.z + (-0.5));
        float _901 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_861.x + (-0.5));
        float _903 = _901 * (_861.y + (-0.5));
        float _904 = _901 * (_861.z + (-0.5));
        float _911 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_868.x + (-0.5));
        float _913 = _911 * (_868.y + (-0.5));
        float _914 = _911 * (_868.z + (-0.5));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = _882 * 0.5;
        float _919 = _892 * 0.5;
        float _920 = _902 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _935 = (dot(vec3(_489, _490, _491), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _945 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3680 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_947 + 1.0))) + _952) * _915;
        float _962 = _883 * 0.5;
        float _963 = _893 * 0.5;
        float _964 = _903 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_489, _490, _491), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3713 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_989 + 1.0))) + _994) * _916;
        float _1004 = _884 * 0.5;
        float _1005 = _894 * 0.5;
        float _1006 = _904 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_489, _490, _491), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3746 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1031 + 1.0))) + _1036) * _917;
        _1053 = _884;
        _1055 = _883;
        _1056 = _882;
        _1057 = _894;
        _1058 = _893;
        _1059 = _892;
        _1060 = _904;
        _1061 = _903;
        _1062 = _902;
        _1063 = _917;
        _1064 = _916;
        _1065 = _915;
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
    }
    else
    {
        _1053 = _1054;
        _1055 = _1054;
        _1056 = _1054;
        _1057 = _1054;
        _1058 = _1054;
        _1059 = _1054;
        _1060 = _1054;
        _1061 = _1054;
        _1062 = _1054;
        _1063 = _1054;
        _1064 = _1054;
        _1065 = _1054;
        _1066 = 0.0;
        _1067 = 0.0;
        _1068 = 0.0;
    }
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1097 = fma(_722, cbModelParam._m0[30u].z, fma(_718, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _714));
        float _1101 = fma(_722, cbModelParam._m0[31u].z, fma(_718, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _714));
        float _1105 = fma(_722, cbModelParam._m0[32u].z, fma(_718, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _714));
        float _1128 = _714 + _489;
        float _1129 = _718 + _490;
        float _1130 = _722 + _491;
        float _1140 = fma(_1130, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128)) - _1097;
        float _1141 = fma(_1130, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128)) - _1101;
        float _1142 = fma(_1130, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128)) - _1105;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1097 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1101 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[35u].z) + ((((((_1105 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1196 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1163.x + (-0.5));
        float _1198 = _1196 * (_1163.y + (-0.5));
        float _1199 = _1196 * (_1163.z + (-0.5));
        float _1206 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1170.x + (-0.5));
        float _1208 = _1206 * (_1170.y + (-0.5));
        float _1209 = _1206 * (_1170.z + (-0.5));
        float _1216 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1177.x + (-0.5));
        float _1218 = _1216 * (_1177.y + (-0.5));
        float _1219 = _1216 * (_1177.z + (-0.5));
        float _1226 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1184.x + (-0.5));
        float _1228 = _1226 * (_1184.y + (-0.5));
        float _1229 = _1226 * (_1184.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_489, _490, _491), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3809 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1260 + 1.0))) + _1265) * _1230;
        float _1275 = _1198 * 0.5;
        float _1276 = _1208 * 0.5;
        float _1277 = _1218 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_489, _490, _491), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3842 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1302 + 1.0))) + _1307) * _1231;
        float _1317 = _1199 * 0.5;
        float _1318 = _1209 * 0.5;
        float _1319 = _1219 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_489, _490, _491), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3875 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1344 + 1.0))) + _1349) * _1232;
        _1366 = _1199;
        _1367 = _1198;
        _1368 = _1197;
        _1369 = _1209;
        _1370 = _1208;
        _1371 = _1207;
        _1372 = _1219;
        _1373 = _1218;
        _1374 = _1217;
        _1375 = _1232;
        _1376 = _1231;
        _1377 = _1230;
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1054;
        _1367 = _1054;
        _1368 = _1054;
        _1369 = _1054;
        _1370 = _1054;
        _1371 = _1054;
        _1372 = _1054;
        _1373 = _1054;
        _1374 = _1054;
        _1375 = _1054;
        _1376 = _1054;
        _1377 = _1054;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1066)) + _1066;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1067)) + _1067;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1068)) + _1068;
    float _1413 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1416 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1419 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1390));
    float _1434 = _661 * 0.5;
    float _1435 = _662 * 0.5;
    float _1436 = _663 * 0.5;
    float _1437 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1440 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1443 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1477;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1450 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1053, _1057, _1060, _1063));
        float _1454 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1458 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1465 = dot(vec4(cbModelParam._m0[39u]), vec4(_1434, _1435, _1436, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1488;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1479 = dot(vec4(cbModelParam._m0[40u]), vec4(_1434, _1435, _1436, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1492 = (_1488 * cbModelParam._m0[1u].x) + (_1477 * (1.0 - cbModelParam._m0[1u].x));
    float _1502 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _492);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1502 : min(cbModelParam._m0[25u].z, _1502));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1552 = fma(_722, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _714)) + cbModelParam._m0[13u].w;
        float _1556 = fma(_722, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _714)) + cbModelParam._m0[14u].w;
        float _1560 = fma(_722, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _714)) + cbModelParam._m0[15u].w;
        float _1563 = fma(_663, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _661));
        float _1566 = fma(_663, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _661));
        float _1569 = fma(_663, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _661));
        float _1597;
        if (_1563 > 0.0)
        {
            _1597 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1597 = frontier_phi_19_17_ladder;
        }
        float _1822;
        if (_1566 > 0.0)
        {
            _1822 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1822 = frontier_phi_28_24_ladder;
        }
        float _2068;
        if (_1569 > 0.0)
        {
            _2068 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2068 = frontier_phi_40_35_ladder;
        }
        float _2070 = isnan(_1822) ? _1597 : (isnan(_1597) ? _1822 : min(_1597, _1822));
        float _2071 = isnan(_2068) ? _2070 : (isnan(_2070) ? _2068 : min(_2070, _2068));
        float _2075 = (_2071 * _1563) + _1552;
        float _2076 = (_2071 * _1566) + _1556;
        float _2077 = (_2071 * _1569) + _1560;
        float _2078 = _2071 * 9.9999997473787516355514526367188e-05;
        float _2080 = (-1.0) - _2078;
        float _2082 = _2078 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2077 > _2082) || ((_2077 < _2080) || ((_2076 > _2082) || ((_2076 < _2080) || ((_2075 < _2080) || (_2075 > _2082))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2201 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2077, cbModelParam._m0[9u].z, fma(_2076, cbModelParam._m0[9u].y, _2075 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2077, cbModelParam._m0[10u].z, fma(_2076, cbModelParam._m0[10u].y, _2075 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2077, cbModelParam._m0[11u].z, fma(_2076, cbModelParam._m0[11u].y, _2075 * cbModelParam._m0[11u].x))), _1503);
            frontier_phi_18_40_ladder = _2201.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2201.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2201.x * cbModelParam._m0[1u].y;
        }
        _1585 = frontier_phi_18_40_ladder_2;
        _1587 = frontier_phi_18_40_ladder_1;
        _1589 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_661, _662, _663), _1503);
        _1585 = _1573.x * cbModelParam._m0[1u].y;
        _1587 = _1573.y * cbModelParam._m0[1u].y;
        _1589 = _1573.z * cbModelParam._m0[1u].y;
    }
    float _1593 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _492);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1593 : min(cbModelParam._m0[25u].w, _1593));
    float _1687;
    float _1689;
    float _1691;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1651 = fma(_722, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _714)) + cbModelParam._m0[21u].w;
        float _1655 = fma(_722, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _714)) + cbModelParam._m0[22u].w;
        float _1659 = fma(_722, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _714)) + cbModelParam._m0[23u].w;
        float _1662 = fma(_663, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _661));
        float _1665 = fma(_663, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _661));
        float _1668 = fma(_663, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _661));
        float _1827;
        if (_1662 > 0.0)
        {
            _1827 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1827 = frontier_phi_30_26_ladder;
        }
        float _2095;
        if (_1665 > 0.0)
        {
            _2095 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2095 = frontier_phi_42_37_ladder;
        }
        float _2300;
        if (_1668 > 0.0)
        {
            _2300 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2300 = frontier_phi_51_48_ladder;
        }
        float _2302 = isnan(_2095) ? _1827 : (isnan(_1827) ? _2095 : min(_1827, _2095));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1662) + _1651;
        float _2308 = (_2303 * _1665) + _1655;
        float _2309 = (_2303 * _1668) + _1659;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2310;
        float _2313 = _2310 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2309 > _2313) || ((_2309 < _2311) || ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 < _2311) || (_2307 > _2313))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2309, cbModelParam._m0[17u].z, fma(_2308, cbModelParam._m0[17u].y, _2307 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2309, cbModelParam._m0[18u].z, fma(_2308, cbModelParam._m0[18u].y, _2307 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2309, cbModelParam._m0[19u].z, fma(_2308, cbModelParam._m0[19u].y, _2307 * cbModelParam._m0[19u].x))), _1594);
            frontier_phi_27_51_ladder = _2507.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2507.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2507.x * cbModelParam._m0[1u].z;
        }
        _1687 = frontier_phi_27_51_ladder_2;
        _1689 = frontier_phi_27_51_ladder_1;
        _1691 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_661, _662, _663), _1594);
        _1687 = _1671.x * cbModelParam._m0[1u].z;
        _1689 = _1671.y * cbModelParam._m0[1u].z;
        _1691 = _1671.z * cbModelParam._m0[1u].z;
    }
    float _1703 = ((((1.0 - _682) * ((_669 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_682 * _669)) * _653;
    float _1704 = _1703 * ((cbModelParam._m0[1u].w * (_1687 - _1585)) + _1585);
    float _1705 = _1703 * ((cbModelParam._m0[1u].w * (_1689 - _1587)) + _1587);
    float _1706 = _1703 * ((cbModelParam._m0[1u].w * (_1691 - _1589)) + _1589);
    float _1709 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1705, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1705, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1705, cbSceneParam._m0[91u].y, _1704 * cbSceneParam._m0[91u].x));
    vec4 _1723 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_589, _590));
    float _1725 = _1723.w;
    float _1737 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1725);
    float _1738 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1725);
    float _1739 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1725);
    uvec4 _1743 = floatBitsToUint(cbInstanceData._m0[_628 + 5u]);
    uint _1745 = _1743.x * 14u;
    uint _1746 = _1745 + 13u;
    float _1753 = _653 + (-1.0);
    float _1758 = (cbLight._m0[_1746].x * _1753) + 1.0;
    float _1759 = (cbLight._m0[_1746].y * _1753) + 1.0;
    float _1760 = (cbLight._m0[_1746].z * _1753) + 1.0;
    float _1761 = (cbLight._m0[_1746].w * _1753) + 1.0;
    uint _1762 = _1745 + 5u;
    float _1768 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1772 = _1745 + 4u;
    float _1781 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1785 = _1745 | 1u;
    float _1796 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_489, _490, _491));
    float _1799 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_489, _490, _491));
    float _4011 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _4022 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1804 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1806 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _1813 = ((cbLight._m0[_1762].x * _1768) * _1806) + (((cbLight._m0[_1772].x * _1737) * _1781) * _1804);
    float _1814 = ((_1768 * cbLight._m0[_1762].y) * _1806) + (((cbLight._m0[_1772].y * _1738) * _1781) * _1804);
    float _1815 = ((_1768 * cbLight._m0[_1762].z) * _1806) + (((cbLight._m0[_1772].z * _1739) * _1781) * _1804);
    uvec4 _1819 = floatBitsToUint(cbLight._m0[_1745 + 12u]);
    bool _1821 = _1819.x == 0u;
    float _1832;
    float _1834;
    float _1836;
    if (_1821)
    {
        _1832 = _1813;
        _1834 = _1814;
        _1836 = _1815;
    }
    else
    {
        uint _1840 = _1745 + 6u;
        float _1856 = (dot(vec3(cbLight._m0[_1745 + 2u].xyz), vec3(_489, _490, _491)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _4033 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1859 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1832 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1813;
        _1834 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1814;
        _1836 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1815;
    }
    bool _1839 = _1819.y == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1839)
    {
        _1877 = _1832;
        _1879 = _1834;
        _1881 = _1836;
    }
    else
    {
        uint _2039 = _1745 + 7u;
        float _2055 = (dot(vec3(cbLight._m0[_1745 + 3u].xyz), vec3(_489, _490, _491)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _4049 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2058 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _1877 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _1832;
        _1879 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _1834;
        _1881 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _1836;
    }
    uint _1884 = _1745 + 8u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _492) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1745].x + _569;
    float _1900 = cbLight._m0[_1745].y + _570;
    float _1901 = cbLight._m0[_1745].z + _571;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_1745].xyz));
    float _4065 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _1913 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1914 = dot(vec3(_489, _490, _491), vec3(_1906, _1907, _1908));
    float _4087 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1906, _1907, _1908));
    float _4098 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1898 * _1898;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1937 = (exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1938 = 1.0 - _1898;
    float _1949 = (0.5 / (((_1913 * ((_1912 * _1938) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _1938) + _1898) * _1912))) * _1912;
    float _4109 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    uint _1965 = _1745 + 9u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _492) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1785].x + _569;
    float _1979 = cbLight._m0[_1785].y + _570;
    float _1980 = cbLight._m0[_1785].z + _571;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_1785].xyz));
    float _4120 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1992 = dot(vec3(_489, _490, _491), vec3(_1985, _1986, _1987));
    float _4131 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1985, _1986, _1987));
    float _4142 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2000 = _1977 * _1977;
    float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
    float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2014 = 1.0 - _1977;
    float _2024 = (0.5 / (((_1913 * ((_1991 * _2014) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2014) + _1977) * _1991))) * _1991;
    float _4153 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
    float _2036 = (((_2013 * cbLight._m0[_1965].x) * _2026) * _1768) + ((((cbLight._m0[_1884].x * _1737) * _1937) * _1951) * _1781);
    float _2037 = (((_2013 * cbLight._m0[_1965].y) * _2026) * _1768) + ((((cbLight._m0[_1884].y * _1738) * _1937) * _1951) * _1781);
    float _2038 = (((_2013 * cbLight._m0[_1965].z) * _2026) * _1768) + ((((cbLight._m0[_1884].z * _1739) * _1937) * _1951) * _1781);
    float _2100;
    float _2102;
    float _2104;
    if (_1821)
    {
        _2100 = _2036;
        _2102 = _2037;
        _2104 = _2038;
    }
    else
    {
        uint _2106 = _1745 + 2u;
        uint _2110 = _1745 + 10u;
        float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _492) * 0.949999988079071044921875);
        float _2125 = _2124 * _2124;
        float _2126 = cbLight._m0[_2106].x + _569;
        float _2127 = cbLight._m0[_2106].y + _570;
        float _2128 = cbLight._m0[_2106].z + _571;
        float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
        float _2133 = _2132 * _2126;
        float _2134 = _2132 * _2127;
        float _2135 = _2132 * _2128;
        float _2136 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2106].xyz));
        float _4164 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2139 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2140 = dot(vec3(_489, _490, _491), vec3(_2133, _2134, _2135));
        float _4175 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2144 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2133, _2134, _2135));
        float _4186 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2148 = _2125 * _2125;
        float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
        float _2161 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2162 = 1.0 - _2125;
        float _2172 = (0.5 / (((_1913 * ((_2139 * _2162) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2162) + _2125) * _2139))) * _2139;
        float _4197 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2174 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
        float _2175 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2100 = (((_2161 * cbLight._m0[_2110].x) * _2174) * _2175) + _2036;
        _2102 = (((_2161 * cbLight._m0[_2110].y) * _2174) * _2175) + _2037;
        _2104 = (((_2161 * cbLight._m0[_2110].z) * _2174) * _2175) + _2038;
    }
    float _2210;
    float _2212;
    float _2214;
    if (_1839)
    {
        _2210 = _2100;
        _2212 = _2102;
        _2214 = _2104;
    }
    else
    {
        uint _2221 = _1745 + 3u;
        uint _2225 = _1745 + 11u;
        float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _492) * 0.949999988079071044921875);
        float _2240 = _2239 * _2239;
        float _2241 = cbLight._m0[_2221].x + _569;
        float _2242 = cbLight._m0[_2221].y + _570;
        float _2243 = cbLight._m0[_2221].z + _571;
        float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
        float _2248 = _2247 * _2241;
        float _2249 = _2247 * _2242;
        float _2250 = _2247 * _2243;
        float _2251 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_2221].xyz));
        float _4213 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2255 = dot(vec3(_489, _490, _491), vec3(_2248, _2249, _2250));
        float _4224 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2259 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2248, _2249, _2250));
        float _4235 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2263 = _2240 * _2240;
        float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
        float _2276 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2277 = 1.0 - _2240;
        float _2287 = (0.5 / (((_1913 * ((_2254 * _2277) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2277) + _2240) * _2254))) * _2254;
        float _4246 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2289 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
        float _2290 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _2210 = (((_2276 * cbLight._m0[_2225].x) * _2289) * _2290) + _2100;
        _2212 = (((_2276 * cbLight._m0[_2225].y) * _2289) * _2290) + _2102;
        _2214 = (((_2276 * cbLight._m0[_2225].z) * _2289) * _2290) + _2104;
    }
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_1743.y == 0u)
    {
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2365;
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2365;
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2365;
        uvec4 _2380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2381 = _2380.x;
        uint _2392 = uint((float(_2380.y) * floor(float(uint(cbSceneParam._m0[85u].y * _590) / _2381))) + floor(float(uint(cbSceneParam._m0[85u].x * _589) / _2381)));
        float _2402 = (log2(_2368 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2403 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        uint _2406 = uint(isnan(14.0) ? _2403 : (isnan(_2403) ? 14.0 : min(_2403, 14.0)));
        uvec4 _2411 = texelFetch(g_lightClusterGridBuffer, int(((_2406 << 2u) + (_2392 << 6u)) >> 2u));
        uint _2412 = _2411.x;
        uint _2413 = _2380.z;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((((1u << ((_2413 >> 4u) & 15u)) + 4294967295u) & _2412) == 0u) || ((_2413 & 240u) == 0u))
        {
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
        }
        else
        {
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            uint _2670 = 0u;
            uint _2679;
            bool _2680;
            for (;;)
            {
                _2679 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                _2680 = _2679 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2680)
                {
                    frontier_phi_68_pred = _2666;
                    frontier_phi_68_pred_1 = _2669;
                    frontier_phi_68_pred_2 = _2668;
                    frontier_phi_68_pred_3 = _2667;
                    frontier_phi_68_pred_4 = _2665;
                    frontier_phi_68_pred_5 = _2664;
                }
                else
                {
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    uint _2815;
                    _2809 = _2664;
                    _2810 = _2665;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2669;
                    _2815 = _2679;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    for (;;)
                    {
                        uint _2819 = uint(findLSB(_2815)) + (_2670 << 5u);
                        uint _2816 = (_2815 + 4294967295u) & _2815;
                        uint _2821 = _2819 * 48u;
                        vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2841 = (_2819 * 48u) + 4u;
                        vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2841)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 3u)).x));
                        uint _2860 = (_2819 * 48u) + 8u;
                        vec3 _2871 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x));
                        float _2875 = _2835.x - _2366;
                        float _2876 = _2835.y - _2367;
                        float _2877 = _2835.z - _2368;
                        float _2878 = dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877));
                        float _2881 = inversesqrt(_2878);
                        float _2882 = _2881 * _2875;
                        float _2883 = _2881 * _2876;
                        float _2884 = _2881 * _2877;
                        float _2885 = dot(vec3(_609, _612, _615), vec3(_2882, _2883, _2884));
                        float _2890 = 1.0 - (_2878 * _2835.w);
                        float _4272 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2891 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _2892 = sqrt(_2878) * _2854.w;
                        float _2895 = 1.39999997615814208984375 / (_2892 + 1.39999997615814208984375);
                        float _2896 = _2895 * _2895;
                        float _2899 = ((1.0 - _2896) * _2885) + _2896;
                        float _2902 = _2892 * _2892;
                        float _2906 = ((isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0))) * _2891) / ((_2902 * 0.699999988079071044921875) + 1.0);
                        float _2910 = (-0.0) - _2366;
                        float _2911 = (-0.0) - _2367;
                        float _2912 = (-0.0) - _2368;
                        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
                        float _2917 = _2916 * _2910;
                        float _2918 = _2916 * _2911;
                        float _2919 = _2916 * _2912;
                        float _2927 = exp2(log2(1.0 / ((_2902 * 3.5) + 5.0)) * 0.25);
                        float _2928 = 1.0 - _669;
                        float _2935 = sqrt(1.0 - ((1.0 - (_2928 * _2928)) * (1.0 - (_2927 * _2927))));
                        float _2936 = _2935 * _2935;
                        float _2937 = _2936 * _2936;
                        float _2938 = _2917 + _2882;
                        float _2939 = _2918 + _2883;
                        float _2940 = _2919 + _2884;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2948 = dot(vec3(_609, _612, _615), vec3(_2917, _2918, _2919));
                        float _4288 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2951 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _2952 = dot(vec3(_609, _612, _615), vec3(_2944 * _2938, _2944 * _2939, _2944 * _2940));
                        float _4299 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _2959 = ((_2955 * _2955) * (_2937 + (-1.0))) + 1.0;
                        float _2960 = _2895 * _2936;
                        float _2961 = _2960 * _2960;
                        float _2964 = ((1.0 - _2961) * _2885) + _2961;
                        float _4310 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2966 = 1.0 - _2936;
                        float _2976 = (0.5 / (((_2965 * ((_2951 * _2966) + _2936)) + 9.9999999392252902907785028219223e-09) + (((_2965 * _2966) + _2936) * _2951))) * _2965;
                        float _4321 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2987 = (((_2937 * 3.1415927410125732421875) * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) / ((_2959 * _2959) * ((_2902 * 2.1991131305694580078125) + 3.141590118408203125))) * _2891;
                        _2739 = (_2906 * _2854.x) + _2812;
                        _2740 = (_2906 * _2854.y) + _2813;
                        _2741 = (_2906 * _2854.z) + _2814;
                        _2736 = (_2987 * _2871.x) + _2809;
                        _2737 = (_2987 * _2871.y) + _2810;
                        _2738 = (_2987 * _2871.z) + _2811;
                        if (_2816 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2809 = _2736;
                            _2810 = _2737;
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2741;
                            _2815 = _2816;
                        }
                    }
                    frontier_phi_68_pred = _2738;
                    frontier_phi_68_pred_1 = _2741;
                    frontier_phi_68_pred_2 = _2740;
                    frontier_phi_68_pred_3 = _2739;
                    frontier_phi_68_pred_4 = _2737;
                    frontier_phi_68_pred_5 = _2736;
                }
                _2517 = frontier_phi_68_pred;
                _2523 = frontier_phi_68_pred_1;
                _2521 = frontier_phi_68_pred_2;
                _2519 = frontier_phi_68_pred_3;
                _2515 = frontier_phi_68_pred_4;
                _2513 = frontier_phi_68_pred_5;
                uint _2671 = _2670 + 1u;
                if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2664 = _2513;
                    _2665 = _2515;
                    _2666 = _2517;
                    _2667 = _2519;
                    _2668 = _2521;
                    _2669 = _2523;
                    _2670 = _2671;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
        }
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.z;
        uint _2529 = (_2527 >> 8u) & 15u;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((4294967295u << _2529) & _2412) == 0u)
        {
            _2632 = _2512;
            _2634 = _2514;
            _2636 = _2516;
            _2638 = _2518;
            _2640 = _2520;
            _2642 = _2522;
        }
        else
        {
            float _2657 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
            float _2658 = _2657 * _2366;
            float _2659 = _2657 * _2367;
            float _2660 = _2657 * _2368;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2529 < ((_2527 >> 12u) & 15u))
            {
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2792 = _2512;
                float _2793 = _2514;
                float _2794 = _2516;
                float _2795 = _2518;
                float _2796 = _2520;
                float _2797 = _2522;
                uint _2798 = _2529;
                uint _2807;
                bool _2808;
                for (;;)
                {
                    _2807 = texelFetch(g_lightClassification, int((((_2406 << 5u) + (_2392 << 9u)) + (_2798 << 2u)) >> 2u)).x;
                    _2808 = _2807 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2808)
                    {
                        frontier_phi_79_pred = _2797;
                        frontier_phi_79_pred_1 = _2796;
                        frontier_phi_79_pred_2 = _2795;
                        frontier_phi_79_pred_3 = _2794;
                        frontier_phi_79_pred_4 = _2793;
                        frontier_phi_79_pred_5 = _2792;
                    }
                    else
                    {
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3014 = _2792;
                        float _3015 = _2793;
                        float _3016 = _2794;
                        float _3017 = _2795;
                        float _3018 = _2796;
                        float _3019 = _2797;
                        uint _3020 = _2807;
                        uint _3021;
                        vec4 _3046;
                        float _3047;
                        vec4 _3062;
                        vec3 _3074;
                        vec4 _3090;
                        vec4 _3106;
                        float _3153;
                        bool _3154;
                        for (;;)
                        {
                            uint _3031 = ((_2798 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3020));
                            _3021 = (_3020 + 4294967295u) & _3020;
                            uint _3033 = _3031 * 40u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3047 = _3046.w;
                            uint _3049 = (_3031 * 40u) + 4u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3064 = (_3031 * 40u) + 8u;
                            _3074 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x));
                            uint _3077 = (_3031 * 40u) + 16u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3093 = (_3031 * 40u) + 20u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3109 = (_3031 * 40u) + 24u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3128 = (_3031 * 40u) + 28u;
                            vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3153 = fma(_2368, _3141.z, fma(_2367, _3141.y, _3141.x * _2366)) + _3141.w;
                            _3154 = !((fma(_2368, _3122.z, fma(_2367, _3122.y, _3122.x * _2366)) + _3122.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3154)
                            {
                                float _3181 = _3046.x - _2366;
                                float _3182 = _3046.y - _2367;
                                float _3183 = _3046.z - _2368;
                                float _3184 = dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183));
                                float _3187 = inversesqrt(_3184);
                                float _3188 = _3187 * _3181;
                                float _3189 = _3187 * _3182;
                                float _3190 = _3187 * _3183;
                                float _3194 = 1.0 - (_3184 / (_3047 * _3047));
                                float _4332 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3199 = sqrt(_3184) * _3062.w;
                                float _3201 = 1.39999997615814208984375 / (_3199 + 1.39999997615814208984375);
                                float _3202 = _3201 * _3201;
                                float _3205 = ((1.0 - _3202) * dot(vec3(_3188, _3189, _3190), vec3(_609, _612, _615))) + _3202;
                                float _3208 = _3199 * _3199;
                                float _3212 = (fma(_2368, _3090.z, fma(_2367, _3090.y, _3090.x * _2366)) + _3090.w) / _3153;
                                float _3213 = (fma(_2368, _3106.z, fma(_2367, _3106.y, _3106.x * _2366)) + _3106.w) / _3153;
                                float _3217 = 1.0 - dot(vec2(_3212, _3213), vec2(_3212, _3213));
                                float _4348 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3219 = _3218 * (((isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))) * _3195) / ((_3208 * 0.699999988079071044921875) + 1.0));
                                float _3231 = exp2(log2(1.0 / ((_3208 * 3.5) + 5.0)) * 0.25);
                                float _3232 = 1.0 - _669;
                                float _3239 = sqrt(1.0 - ((1.0 - (_3232 * _3232)) * (1.0 - (_3231 * _3231))));
                                float _3240 = _3239 * _3239;
                                float _3241 = _3240 * _3240;
                                float _3242 = _3188 - _2658;
                                float _3243 = _3189 - _2659;
                                float _3244 = _3190 - _2660;
                                float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                                float _3252 = dot(vec3(_609, _612, _615), vec3((-0.0) - _2658, (-0.0) - _2659, (-0.0) - _2660));
                                float _4359 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3256 = dot(vec3(_609, _612, _615), vec3(_3248 * _3242, _3248 * _3243, _3248 * _3244));
                                float _4370 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3263 = ((_3259 * _3259) * (_3241 + (-1.0))) + 1.0;
                                float _3264 = _3201 * _3240;
                                float _3265 = _3264 * _3264;
                                float _3271 = ((1.0 - _3265) * dot(vec3(_609, _612, _615), vec3(_3188, _3189, _3190))) + _3265;
                                float _4381 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3273 = 1.0 - _3240;
                                float _3283 = (0.5 / (((_3272 * ((_3255 * _3273) + _3240)) + 9.9999999392252902907785028219223e-09) + (((_3272 * _3273) + _3240) * _3255))) * _3272;
                                float _4392 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3293 = (_3218 * _3195) * (((_3241 * 3.1415927410125732421875) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) / ((_3263 * _3263) * ((_3208 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3219 * _3062.z;
                                frontier_phi_85_pred_1 = _3219 * _3062.y;
                                frontier_phi_85_pred_2 = _3219 * _3062.x;
                                frontier_phi_85_pred_3 = _3293 * _3074.z;
                                frontier_phi_85_pred_4 = _3293 * _3074.y;
                                frontier_phi_85_pred_5 = _3293 * _3074.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3302 = frontier_phi_85_pred;
                            _3301 = frontier_phi_85_pred_1;
                            _3300 = frontier_phi_85_pred_2;
                            _3299 = frontier_phi_85_pred_3;
                            _3298 = frontier_phi_85_pred_4;
                            _3297 = frontier_phi_85_pred_5;
                            _3004 = _3300 + _3017;
                            _3005 = _3301 + _3018;
                            _3006 = _3302 + _3019;
                            _3001 = _3297 + _3014;
                            _3002 = _3298 + _3015;
                            _3003 = _3299 + _3016;
                            if (_3021 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3021;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3006;
                        frontier_phi_79_pred_1 = _3005;
                        frontier_phi_79_pred_2 = _3004;
                        frontier_phi_79_pred_3 = _3003;
                        frontier_phi_79_pred_4 = _3002;
                        frontier_phi_79_pred_5 = _3001;
                    }
                    _2643 = frontier_phi_79_pred;
                    _2641 = frontier_phi_79_pred_1;
                    _2639 = frontier_phi_79_pred_2;
                    _2637 = frontier_phi_79_pred_3;
                    _2635 = frontier_phi_79_pred_4;
                    _2633 = frontier_phi_79_pred_5;
                    uint _2799 = _2798 + 1u;
                    if (_2799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2792 = _2633;
                        _2793 = _2635;
                        _2794 = _2637;
                        _2795 = _2639;
                        _2796 = _2641;
                        _2797 = _2643;
                        _2798 = _2799;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2639;
                frontier_phi_60_61_ladder_1 = _2643;
                frontier_phi_60_61_ladder_2 = _2641;
                frontier_phi_60_61_ladder_3 = _2637;
                frontier_phi_60_61_ladder_4 = _2635;
                frontier_phi_60_61_ladder_5 = _2633;
            }
            else
            {
                frontier_phi_60_61_ladder = _2518;
                frontier_phi_60_61_ladder_1 = _2522;
                frontier_phi_60_61_ladder_2 = _2520;
                frontier_phi_60_61_ladder_3 = _2516;
                frontier_phi_60_61_ladder_4 = _2514;
                frontier_phi_60_61_ladder_5 = _2512;
            }
            _2632 = frontier_phi_60_61_ladder_5;
            _2634 = frontier_phi_60_61_ladder_4;
            _2636 = frontier_phi_60_61_ladder_3;
            _2638 = frontier_phi_60_61_ladder;
            _2640 = frontier_phi_60_61_ladder_2;
            _2642 = frontier_phi_60_61_ladder_1;
        }
        float _2647 = isnan(1.0) ? _653 : (isnan(_653) ? 1.0 : min(_653, 1.0));
        _2424 = (_2647 * _2638) + _1877;
        _2426 = (_2647 * _2640) + _1879;
        _2428 = (_2647 * _2642) + _1881;
        _2430 = ((_2632 * 0.039999999105930328369140625) * _2647) + _2210;
        _2432 = ((_2634 * 0.039999999105930328369140625) * _2647) + _2212;
        _2434 = ((_2636 * 0.039999999105930328369140625) * _2647) + _2214;
    }
    else
    {
        _2424 = _1877;
        _2426 = _1879;
        _2428 = _1881;
        _2430 = _2210;
        _2432 = _2212;
        _2434 = _2214;
    }
    float _4408 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4419 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4430 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _2451 = ((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2424 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _653))) + ((_2430 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1492)) * cbPerFrame._m0[3u].x);
    float _2452 = ((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2426 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _653))) + ((_2432 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1492)) * cbPerFrame._m0[3u].x);
    float _2453 = ((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2428 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _653))) + ((_2434 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1492)) * cbPerFrame._m0[3u].x);
    uint _2454 = _628 + 6u;
    float _2462 = _589 / cbSceneParam._m0[86u].x;
    float _2463 = _590 / cbSceneParam._m0[86u].y;
    vec4 _2477 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, (log2((isnan(cbSceneParam._m0[77u].w) ? _511 : (isnan(_511) ? cbSceneParam._m0[77u].w : min(_511, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2479 = _2477.x;
    float _2480 = _2477.y;
    float _2481 = _2477.z;
    float _2482 = _2477.w;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    if (_511 > cbSceneParam._m0[78u].w)
    {
        float _2537 = isnan(_511) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _511 : min(cbSceneParam._m0[80u].w, _511));
        float _2538 = _2537 / _511;
        float _2549 = _2538 * _562;
        float _2550 = _563 * _2538;
        float _2551 = (-0.0) - _2550;
        float _2552 = _2538 * _564;
        float _2554 = (cbSceneParam._m0[77u].w * _2551) / _2537;
        float _2555 = _2554 + cbSceneParam._m0[79u].w;
        float _2556 = cbSceneParam._m0[79u].w - _2550;
        float _2562 = sqrt(((_2549 * _2549) + (_2550 * _2550)) + (_2552 * _2552));
        float _2565 = (1.0 - (cbSceneParam._m0[77u].w / _2537)) * _2562;
        float _2570 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2572 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2749;
        if (abs((_2551 - _2554) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2749 = ((((_2555 > 0.0) ? exp2(_2570 * _2555) : (2.0 - exp2(_2572 * _2555))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2565;
        }
        else
        {
            float _2693 = 1.0 / cbSceneParam._m0[80u].x;
            float _2694 = isnan(_2556) ? _2555 : (isnan(_2555) ? _2556 : max(_2555, _2556));
            float _2695 = isnan(_2556) ? _2555 : (isnan(_2555) ? _2556 : min(_2555, _2556));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            _2749 = ((abs(_2562 / _2551) * cbSceneParam._m0[80u].y) * ((((_2704 - _2705) * 2.0) - ((exp2(_2570 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)))) - exp2(_2570 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0))))) * _2693)) - ((exp2(_2572 * _2704) - exp2(_2572 * _2705)) * _2693))) + (_2565 * cbSceneParam._m0[80u].z);
        }
        vec4 _2751 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2462, _2463, 1.0), 0.0);
        float _2760 = exp2((_2749 * (-1.44269502162933349609375)) * (1.0 - _2751.w));
        float _2761 = log2(_2760);
        float _2777 = log2(_2482);
        _2574 = (exp2(_2777 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].x)) * _2751.x) / cbSceneParam._m0[78u].x)) + _2479;
        _2576 = (exp2(_2777 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].y)) * _2751.y) / cbSceneParam._m0[78u].y)) + _2480;
        _2578 = (exp2(_2777 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2761 * cbSceneParam._m0[78u].z)) * _2751.z) / cbSceneParam._m0[78u].z)) + _2481;
        _2580 = _2760 * _2482;
    }
    else
    {
        _2574 = _2479;
        _2576 = _2480;
        _2578 = _2481;
        _2580 = _2482;
    }
    bool _2787;
    vec4 _2590;
    vec4 _2612;
    float _2614;
    float _2618;
    float _2619;
    float _2620;
    float _2621;
    bool _2631;
    for (;;)
    {
        _2590 = cbMatDynParam._m0[0u];
        float _2592 = roundEven(_2590.y);
        bool _2593 = _2592 == 3.0;
        float _2594 = log2(_2580);
        float _2601 = exp2(_2594 * cbSceneParam._m0[78u].x) * _2451;
        float _2602 = exp2(_2594 * cbSceneParam._m0[78u].y) * _2452;
        float _2603 = exp2(_2594 * cbSceneParam._m0[78u].z) * _2453;
        float _2610 = _578 + (-0.5);
        _2612 = cbMtdParam._m0[1u];
        _2614 = _2612.y * _2610;
        float _2617 = (_2592 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2618 = _2617 * (_2593 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2574)));
        _2619 = _2617 * (_2593 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2576)));
        _2620 = _2617 * (_2593 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2578)));
        _2621 = _2610 * 0.999000012874603271484375;
        _2631 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2631)
        {
            if ((cbInstanceData._m0[_628 + 7u].x + _2621) < 0.5)
            {
                _2787 = true;
                break;
            }
        }
        uint _2728 = _629 + uint(_2590.w);
        if ((cbInstanceData._m0[_2728].w < 1.0) && ((cbInstanceData._m0[_2728].w + _2621) < 0.5))
        {
            _2787 = true;
            break;
        }
        if ((_2614 + 1.0) < _2612.x)
        {
            _2787 = true;
            break;
        }
        _2787 = false;
        break;
    }
    float _2992;
    if (_2787)
    {
        discard_state = true;
        _2992 = 0.0;
    }
    else
    {
        _2992 = cbInstanceData._m0[_2454].w;
    }
    SV_Target.x = _2618;
    SV_Target.y = _2619;
    SV_Target.z = _2620;
    SV_Target.w = _2992;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2454].w;
    discard_exit();
}


