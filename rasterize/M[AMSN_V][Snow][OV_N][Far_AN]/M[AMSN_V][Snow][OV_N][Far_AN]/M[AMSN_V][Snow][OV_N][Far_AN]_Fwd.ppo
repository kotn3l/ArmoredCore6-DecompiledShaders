#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1007;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _244 = _239.z;
    float _248 = (_239.x * 2.0) + (-1.0);
    float _250 = (_239.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3321 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))));
    float _260 = fma(_257, _218, fma(_250, _211, _248 * _197));
    float _263 = fma(_257, _219, fma(_250, _212, _248 * _198));
    float _266 = fma(_257, _220, fma(_250, _213, _248 * _199));
    float _275 = exp2(log2(inversesqrt(dot(vec3(_260, _263, _266), vec3(_260, _263, _266))) * _263) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3332 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _300 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3343 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _307 = (1.0 - cbMtdParam._m0[12u].x) + (isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0)));
    float _308 = _307 * (isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0)));
    float _309 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _310 = isnan(1.0) ? _309 : (isnan(_309) ? 1.0 : min(_309, 1.0));
    vec4 _322 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _347 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _358 = cbMtdParam._m0[9u].x * _347.x;
    float _359 = cbMtdParam._m0[9u].y * _347.y;
    float _360 = cbMtdParam._m0[9u].z * _347.z;
    float _367 = (((cbMtdParam._m0[10u].x * _322.x) - _358) * _310) + _358;
    float _368 = (((cbMtdParam._m0[10u].y * _322.y) - _359) * _310) + _359;
    float _369 = (((cbMtdParam._m0[10u].z * _322.z) - _360) * _310) + _360;
    vec4 _382 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _389 = (_382.x * 2.0) + (-1.0);
    float _390 = (_382.y * 2.0) + (-1.0);
    float _391 = dot(vec2(_389, _390), vec2(_389, _390));
    float _3364 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _399 = ((_382.z - _244) * _310) + _244;
    float _400 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _401 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
    vec4 _422 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _428 = (_422.x * 2.0) + (-1.0);
    float _429 = (_422.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3385 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))));
    float _444 = (((((sqrt(1.0 - (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) - _257) * _310) + _257) - _435) * _401) + _435;
    vec4 _458 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _468 = ((((((_389 - _248) * _310) + _248) - _428) * _401) + _428) + (((_458.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _469 = ((((((_390 - _250) * _310) + _250) - _429) * _401) + _429) + (((_458.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _472 = fma(_444, _218, fma(_469, _211, _468 * _197));
    float _475 = fma(_444, _219, fma(_469, _212, _468 * _198));
    float _478 = fma(_444, _220, fma(_469, _213, _468 * _199));
    float _482 = inversesqrt(dot(vec3(_472, _475, _478), vec3(_472, _475, _478)));
    float _483 = _482 * _472;
    float _484 = _482 * _475;
    float _485 = _482 * _478;
    float _3396 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _486 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3418 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3429 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _505 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _556 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _546);
    float _557 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _546);
    float _558 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _546);
    float _562 = inversesqrt(dot(vec3(_556, _557, _558), vec3(_556, _557, _558)));
    float _563 = _556 * _562;
    float _564 = _557 * _562;
    float _565 = _558 * _562;
    float _571 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _572 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _591 = fma(_485, cbSceneParam._m0[5u].z, fma(_484, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _483));
    float _594 = fma(_485, cbSceneParam._m0[6u].z, fma(_484, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _483));
    float _597 = fma(_485, cbSceneParam._m0[7u].z, fma(_484, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _483));
    uint _610 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = (_610 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3440 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _571, cbSceneParam._m0[86u].y * _572));
    float _635 = _632.x * TEXCOORD_3.w;
    float _636 = dot(vec3(_483, _484, _485), vec3(_563, _564, _565));
    float _639 = _636 * 2.0;
    float _643 = (_639 * _483) - _563;
    float _644 = (_639 * _484) - _564;
    float _645 = (_639 * _485) - _565;
    float _649 = abs(dot(vec3(_563, _564, _565), vec3(_483, _484, _485)));
    float _3473 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _651 = sqrt(_486);
    float _664 = exp2((_651 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_651 * 3.0));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1006;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _731 = fma(_704, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696));
        float _735 = fma(_704, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696));
        float _739 = fma(_704, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696));
        float _764 = _696 + _483;
        float _765 = _700 + _484;
        float _766 = _704 + _485;
        float _776 = fma(_766, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764)) - _731;
        float _777 = fma(_766, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764)) - _735;
        float _778 = fma(_766, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764)) - _739;
        float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
        float _795 = ((_782 * _776) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_731 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_782 * _777) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_735 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_782 * _778) / cbModelParam._m0[34u].z) + ((((((_739 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        float _834 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_800.x + (-0.5));
        float _836 = _834 * (_800.y + (-0.5));
        float _837 = _834 * (_800.z + (-0.5));
        float _844 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_807.x + (-0.5));
        float _846 = _844 * (_807.y + (-0.5));
        float _847 = _844 * (_807.z + (-0.5));
        float _854 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_814.x + (-0.5));
        float _856 = _854 * (_814.y + (-0.5));
        float _857 = _854 * (_814.z + (-0.5));
        float _864 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_821.x + (-0.5));
        float _866 = _864 * (_821.y + (-0.5));
        float _867 = _864 * (_821.z + (-0.5));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = _835 * 0.5;
        float _872 = _845 * 0.5;
        float _873 = _855 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _888 = (dot(vec3(_483, _484, _485), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _898 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3521 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_900 + 1.0))) + _905) * _868;
        float _915 = _836 * 0.5;
        float _916 = _846 * 0.5;
        float _917 = _856 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_483, _484, _485), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3554 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_942 + 1.0))) + _947) * _869;
        float _957 = _837 * 0.5;
        float _958 = _847 * 0.5;
        float _959 = _857 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_483, _484, _485), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3587 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_984 + 1.0))) + _989) * _870;
        _1006 = _837;
        _1008 = _836;
        _1009 = _835;
        _1010 = _847;
        _1011 = _846;
        _1012 = _845;
        _1013 = _857;
        _1014 = _856;
        _1015 = _855;
        _1016 = _870;
        _1017 = _869;
        _1018 = _868;
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = _1007;
        _1008 = _1007;
        _1009 = _1007;
        _1010 = _1007;
        _1011 = _1007;
        _1012 = _1007;
        _1013 = _1007;
        _1014 = _1007;
        _1015 = _1007;
        _1016 = _1007;
        _1017 = _1007;
        _1018 = _1007;
        _1019 = 0.0;
        _1020 = 0.0;
        _1021 = 0.0;
    }
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1047 = fma(_704, cbModelParam._m0[30u].z, fma(_700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _696));
        float _1051 = fma(_704, cbModelParam._m0[31u].z, fma(_700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _696));
        float _1055 = fma(_704, cbModelParam._m0[32u].z, fma(_700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _696));
        float _1078 = _696 + _483;
        float _1079 = _700 + _484;
        float _1080 = _704 + _485;
        float _1090 = fma(_1080, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078)) - _1047;
        float _1091 = fma(_1080, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078)) - _1051;
        float _1092 = fma(_1080, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078)) - _1055;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1047 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1051 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[35u].z) + ((((((_1055 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1146 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1113.x + (-0.5));
        float _1148 = _1146 * (_1113.y + (-0.5));
        float _1149 = _1146 * (_1113.z + (-0.5));
        float _1156 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1120.x + (-0.5));
        float _1158 = _1156 * (_1120.y + (-0.5));
        float _1159 = _1156 * (_1120.z + (-0.5));
        float _1166 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1127.x + (-0.5));
        float _1168 = _1166 * (_1127.y + (-0.5));
        float _1169 = _1166 * (_1127.z + (-0.5));
        float _1176 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1134.x + (-0.5));
        float _1178 = _1176 * (_1134.y + (-0.5));
        float _1179 = _1176 * (_1134.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_483, _484, _485), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3650 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1210 + 1.0))) + _1215) * _1180;
        float _1225 = _1148 * 0.5;
        float _1226 = _1158 * 0.5;
        float _1227 = _1168 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_483, _484, _485), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3683 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1252 + 1.0))) + _1257) * _1181;
        float _1267 = _1149 * 0.5;
        float _1268 = _1159 * 0.5;
        float _1269 = _1169 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_483, _484, _485), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3716 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1294 + 1.0))) + _1299) * _1182;
        _1316 = _1149;
        _1317 = _1148;
        _1318 = _1147;
        _1319 = _1159;
        _1320 = _1158;
        _1321 = _1157;
        _1322 = _1169;
        _1323 = _1168;
        _1324 = _1167;
        _1325 = _1182;
        _1326 = _1181;
        _1327 = _1180;
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1007;
        _1317 = _1007;
        _1318 = _1007;
        _1319 = _1007;
        _1320 = _1007;
        _1321 = _1007;
        _1322 = _1007;
        _1323 = _1007;
        _1324 = _1007;
        _1325 = _1007;
        _1326 = _1007;
        _1327 = _1007;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1019)) + _1019;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1020)) + _1020;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1021)) + _1021;
    float _1363 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1366 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1369 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1340));
    float _1384 = _643 * 0.5;
    float _1385 = _644 * 0.5;
    float _1386 = _645 * 0.5;
    float _1387 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1390 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1393 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1427;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1400 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1006, _1010, _1013, _1016));
        float _1404 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1408 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1415 = dot(vec4(cbModelParam._m0[39u]), vec4(_1384, _1385, _1386, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1415) ? 0.0 : (isnan(0.0) ? _1415 : max(0.0, _1415))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1438;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1429 = dot(vec4(cbModelParam._m0[40u]), vec4(_1384, _1385, _1386, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1442 = (_1438 * cbModelParam._m0[1u].x) + (_1427 * (1.0 - cbModelParam._m0[1u].x));
    float _1452 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _486);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1452 : min(cbModelParam._m0[25u].z, _1452));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1502 = fma(_704, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696)) + cbModelParam._m0[13u].w;
        float _1506 = fma(_704, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696)) + cbModelParam._m0[14u].w;
        float _1510 = fma(_704, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696)) + cbModelParam._m0[15u].w;
        float _1513 = fma(_645, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643));
        float _1516 = fma(_645, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643));
        float _1519 = fma(_645, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643));
        float _1547;
        if (_1513 > 0.0)
        {
            _1547 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1547 = frontier_phi_16_14_ladder;
        }
        float _1751;
        if (_1516 > 0.0)
        {
            _1751 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1751 = frontier_phi_25_21_ladder;
        }
        float _1994;
        if (_1519 > 0.0)
        {
            _1994 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1994 = frontier_phi_37_32_ladder;
        }
        float _1996 = isnan(_1751) ? _1547 : (isnan(_1547) ? _1751 : min(_1547, _1751));
        float _1997 = isnan(_1994) ? _1996 : (isnan(_1996) ? _1994 : min(_1996, _1994));
        float _2001 = (_1997 * _1513) + _1502;
        float _2002 = (_1997 * _1516) + _1506;
        float _2003 = (_1997 * _1519) + _1510;
        float _2004 = _1997 * 9.9999997473787516355514526367188e-05;
        float _2006 = (-1.0) - _2004;
        float _2008 = _2004 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2003 > _2008) || ((_2003 < _2006) || ((_2002 > _2008) || ((_2002 < _2006) || ((_2001 < _2006) || (_2001 > _2008))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2127 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2003, cbModelParam._m0[9u].z, fma(_2002, cbModelParam._m0[9u].y, _2001 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2003, cbModelParam._m0[10u].z, fma(_2002, cbModelParam._m0[10u].y, _2001 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2003, cbModelParam._m0[11u].z, fma(_2002, cbModelParam._m0[11u].y, _2001 * cbModelParam._m0[11u].x))), _1453);
            frontier_phi_15_37_ladder = _2127.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2127.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2127.x * cbModelParam._m0[1u].y;
        }
        _1535 = frontier_phi_15_37_ladder_2;
        _1537 = frontier_phi_15_37_ladder_1;
        _1539 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_643, _644, _645), _1453);
        _1535 = _1523.x * cbModelParam._m0[1u].y;
        _1537 = _1523.y * cbModelParam._m0[1u].y;
        _1539 = _1523.z * cbModelParam._m0[1u].y;
    }
    float _1543 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _486);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1543 : min(cbModelParam._m0[25u].w, _1543));
    float _1637;
    float _1639;
    float _1641;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1601 = fma(_704, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696)) + cbModelParam._m0[21u].w;
        float _1605 = fma(_704, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696)) + cbModelParam._m0[22u].w;
        float _1609 = fma(_704, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696)) + cbModelParam._m0[23u].w;
        float _1612 = fma(_645, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643));
        float _1615 = fma(_645, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643));
        float _1618 = fma(_645, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643));
        float _1756;
        if (_1612 > 0.0)
        {
            _1756 = abs((1.0 - _1601) / _1612);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1601 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1756 = frontier_phi_27_23_ladder;
        }
        float _2021;
        if (_1615 > 0.0)
        {
            _2021 = abs((1.0 - _1605) / _1615);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1605 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2021 = frontier_phi_39_34_ladder;
        }
        float _2226;
        if (_1618 > 0.0)
        {
            _2226 = abs((1.0 - _1609) / _1618);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1609 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2226 = frontier_phi_48_45_ladder;
        }
        float _2228 = isnan(_2021) ? _1756 : (isnan(_1756) ? _2021 : min(_1756, _2021));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1612) + _1601;
        float _2234 = (_2229 * _1615) + _1605;
        float _2235 = (_2229 * _1618) + _1609;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2236;
        float _2239 = _2236 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2235 > _2239) || ((_2235 < _2237) || ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 < _2237) || (_2233 > _2239))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2433 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2235, cbModelParam._m0[17u].z, fma(_2234, cbModelParam._m0[17u].y, _2233 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2235, cbModelParam._m0[18u].z, fma(_2234, cbModelParam._m0[18u].y, _2233 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2235, cbModelParam._m0[19u].z, fma(_2234, cbModelParam._m0[19u].y, _2233 * cbModelParam._m0[19u].x))), _1544);
            frontier_phi_24_48_ladder = _2433.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2433.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2433.x * cbModelParam._m0[1u].z;
        }
        _1637 = frontier_phi_24_48_ladder_2;
        _1639 = frontier_phi_24_48_ladder_1;
        _1641 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_643, _644, _645), _1544);
        _1637 = _1621.x * cbModelParam._m0[1u].z;
        _1639 = _1621.y * cbModelParam._m0[1u].z;
        _1641 = _1621.z * cbModelParam._m0[1u].z;
    }
    float _1653 = ((((1.0 - _664) * ((_651 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_664 * _651)) * _635;
    float _1654 = _1653 * ((cbModelParam._m0[1u].w * (_1637 - _1535)) + _1535);
    float _1655 = _1653 * ((cbModelParam._m0[1u].w * (_1639 - _1537)) + _1537);
    float _1656 = _1653 * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1659 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, _1654 * cbSceneParam._m0[91u].x));
    uvec4 _1675 = floatBitsToUint(cbInstanceData._m0[_610 + 5u]);
    uint _1677 = _1675.x * 14u;
    uint _1678 = _1677 + 13u;
    float _1685 = _635 + (-1.0);
    float _1690 = (cbLight._m0[_1678].x * _1685) + 1.0;
    float _1691 = (cbLight._m0[_1678].y * _1685) + 1.0;
    float _1692 = (cbLight._m0[_1678].z * _1685) + 1.0;
    float _1693 = (cbLight._m0[_1678].w * _1685) + 1.0;
    uint _1694 = _1677 + 5u;
    float _1700 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1704 = _1677 + 4u;
    float _1710 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
    uint _1714 = _1677 | 1u;
    float _1725 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_483, _484, _485));
    float _1728 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_483, _484, _485));
    float _3852 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _3863 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1733 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1735 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1742 = ((cbLight._m0[_1694].x * _1700) * _1735) + ((cbLight._m0[_1704].x * _1710) * _1733);
    float _1743 = ((_1700 * cbLight._m0[_1694].y) * _1735) + ((_1710 * cbLight._m0[_1704].y) * _1733);
    float _1744 = ((_1700 * cbLight._m0[_1694].z) * _1735) + ((_1710 * cbLight._m0[_1704].z) * _1733);
    uvec4 _1748 = floatBitsToUint(cbLight._m0[_1677 + 12u]);
    bool _1750 = _1748.x == 0u;
    float _1761;
    float _1763;
    float _1765;
    if (_1750)
    {
        _1761 = _1742;
        _1763 = _1743;
        _1765 = _1744;
    }
    else
    {
        uint _1769 = _1677 + 6u;
        float _1785 = (dot(vec3(cbLight._m0[_1677 + 2u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _1786 = _1785 * _1785;
        float _3874 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1788 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _1761 = (((cbLight._m0[_1769].x * 0.3183098733425140380859375) * _1787) * _1788) + _1742;
        _1763 = (((cbLight._m0[_1769].y * 0.3183098733425140380859375) * _1787) * _1788) + _1743;
        _1765 = (((cbLight._m0[_1769].z * 0.3183098733425140380859375) * _1787) * _1788) + _1744;
    }
    bool _1768 = _1748.y == 0u;
    float _1806;
    float _1808;
    float _1810;
    if (_1768)
    {
        _1806 = _1761;
        _1808 = _1763;
        _1810 = _1765;
    }
    else
    {
        uint _1965 = _1677 + 7u;
        float _1981 = (dot(vec3(cbLight._m0[_1677 + 3u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _3890 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1984 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _1806 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1761;
        _1808 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1763;
        _1810 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1765;
    }
    uint _1813 = _1677 + 8u;
    float _1826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _486) * 0.949999988079071044921875);
    float _1827 = _1826 * _1826;
    float _1828 = cbLight._m0[_1677].x + _563;
    float _1829 = cbLight._m0[_1677].y + _564;
    float _1830 = cbLight._m0[_1677].z + _565;
    float _1834 = inversesqrt(dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830)));
    float _1835 = _1834 * _1828;
    float _1836 = _1834 * _1829;
    float _1837 = _1834 * _1830;
    float _1838 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_1677].xyz));
    float _3906 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1841 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _1842 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1843 = dot(vec3(_483, _484, _485), vec3(_1835, _1836, _1837));
    float _3928 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1847 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1835, _1836, _1837));
    float _3939 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1851 = _1827 * _1827;
    float _1855 = ((_1846 * _1846) * (_1851 + (-1.0))) + 1.0;
    float _1866 = (exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1867 = 1.0 - _1827;
    float _1878 = (0.5 / (((_1842 * ((_1841 * _1867) + _1827)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _1867) + _1827) * _1841))) * _1841;
    float _3950 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1880 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1851 / ((_1855 * _1855) * 3.141590118408203125));
    uint _1891 = _1677 + 9u;
    float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1714].w)) * _486) * 0.949999988079071044921875);
    float _1903 = _1902 * _1902;
    float _1904 = cbLight._m0[_1714].x + _563;
    float _1905 = cbLight._m0[_1714].y + _564;
    float _1906 = cbLight._m0[_1714].z + _565;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1911 = _1910 * _1904;
    float _1912 = _1910 * _1905;
    float _1913 = _1910 * _1906;
    float _1914 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_1714].xyz));
    float _3961 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1918 = dot(vec3(_483, _484, _485), vec3(_1911, _1912, _1913));
    float _3972 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1922 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1911, _1912, _1913));
    float _3983 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1926 = _1903 * _1903;
    float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
    float _1939 = (exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1940 = 1.0 - _1903;
    float _1950 = (0.5 / (((_1842 * ((_1917 * _1940) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _1940) + _1903) * _1917))) * _1917;
    float _3994 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1952 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
    float _1962 = (((_1939 * cbLight._m0[_1891].x) * _1952) * _1700) + (((_1866 * cbLight._m0[_1813].x) * _1880) * _1710);
    float _1963 = (((_1939 * cbLight._m0[_1891].y) * _1952) * _1700) + (((_1866 * cbLight._m0[_1813].y) * _1880) * _1710);
    float _1964 = (((_1939 * cbLight._m0[_1891].z) * _1952) * _1700) + (((_1866 * cbLight._m0[_1813].z) * _1880) * _1710);
    float _2026;
    float _2028;
    float _2030;
    if (_1750)
    {
        _2026 = _1962;
        _2028 = _1963;
        _2030 = _1964;
    }
    else
    {
        uint _2032 = _1677 + 2u;
        uint _2036 = _1677 + 10u;
        float _2050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _486) * 0.949999988079071044921875);
        float _2051 = _2050 * _2050;
        float _2052 = cbLight._m0[_2032].x + _563;
        float _2053 = cbLight._m0[_2032].y + _564;
        float _2054 = cbLight._m0[_2032].z + _565;
        float _2058 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
        float _2059 = _2058 * _2052;
        float _2060 = _2058 * _2053;
        float _2061 = _2058 * _2054;
        float _2062 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2032].xyz));
        float _4005 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2066 = dot(vec3(_483, _484, _485), vec3(_2059, _2060, _2061));
        float _4016 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2070 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2059, _2060, _2061));
        float _4027 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2074 = _2051 * _2051;
        float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
        float _2087 = (exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2088 = 1.0 - _2051;
        float _2098 = (0.5 / (((_1842 * ((_2065 * _2088) + _2051)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _2088) + _2051) * _2065))) * _2065;
        float _4038 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2100 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
        float _2101 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _2026 = (((_2087 * cbLight._m0[_2036].x) * _2100) * _2101) + _1962;
        _2028 = (((_2087 * cbLight._m0[_2036].y) * _2100) * _2101) + _1963;
        _2030 = (((_2087 * cbLight._m0[_2036].z) * _2100) * _2101) + _1964;
    }
    float _2136;
    float _2138;
    float _2140;
    if (_1768)
    {
        _2136 = _2026;
        _2138 = _2028;
        _2140 = _2030;
    }
    else
    {
        uint _2147 = _1677 + 3u;
        uint _2151 = _1677 + 11u;
        float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _486) * 0.949999988079071044921875);
        float _2166 = _2165 * _2165;
        float _2167 = cbLight._m0[_2147].x + _563;
        float _2168 = cbLight._m0[_2147].y + _564;
        float _2169 = cbLight._m0[_2147].z + _565;
        float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
        float _2174 = _2173 * _2167;
        float _2175 = _2173 * _2168;
        float _2176 = _2173 * _2169;
        float _2177 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2147].xyz));
        float _4054 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2181 = dot(vec3(_483, _484, _485), vec3(_2174, _2175, _2176));
        float _4065 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2185 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2174, _2175, _2176));
        float _4076 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2189 = _2166 * _2166;
        float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
        float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2203 = 1.0 - _2166;
        float _2213 = (0.5 / (((_1842 * ((_2180 * _2203) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _2203) + _2166) * _2180))) * _2180;
        float _4087 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2215 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
        float _2216 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _2136 = (((_2202 * cbLight._m0[_2151].x) * _2215) * _2216) + _2026;
        _2138 = (((_2202 * cbLight._m0[_2151].y) * _2215) * _2216) + _2028;
        _2140 = (((_2202 * cbLight._m0[_2151].z) * _2215) * _2216) + _2030;
    }
    float _2350;
    float _2352;
    float _2354;
    float _2356;
    float _2358;
    float _2360;
    if (_1675.y == 0u)
    {
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2291;
        float _2293 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2291;
        float _2294 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2291;
        uvec4 _2306 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2307 = _2306.x;
        uint _2318 = uint((float(_2306.y) * floor(float(uint(cbSceneParam._m0[85u].y * _572) / _2307))) + floor(float(uint(cbSceneParam._m0[85u].x * _571) / _2307)));
        float _2328 = (log2(_2294 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2329 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        uint _2332 = uint(isnan(14.0) ? _2329 : (isnan(_2329) ? 14.0 : min(_2329, 14.0)));
        uvec4 _2337 = texelFetch(g_lightClusterGridBuffer, int(((_2332 << 2u) + (_2318 << 6u)) >> 2u));
        uint _2338 = _2337.x;
        uint _2339 = _2306.z;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        if (((((1u << ((_2339 >> 4u) & 15u)) + 4294967295u) & _2338) == 0u) || ((_2339 & 240u) == 0u))
        {
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
        }
        else
        {
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2449;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            uint _2588 = 0u;
            uint _2597;
            bool _2598;
            for (;;)
            {
                _2597 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2588 << 2u)) >> 2u)).x;
                _2598 = _2597 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2598)
                {
                    frontier_phi_63_pred = _2587;
                    frontier_phi_63_pred_1 = _2586;
                    frontier_phi_63_pred_2 = _2585;
                    frontier_phi_63_pred_3 = _2584;
                    frontier_phi_63_pred_4 = _2583;
                    frontier_phi_63_pred_5 = _2582;
                }
                else
                {
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    uint _2712;
                    _2706 = _2582;
                    _2707 = _2583;
                    _2708 = _2584;
                    _2709 = _2585;
                    _2710 = _2586;
                    _2711 = _2587;
                    _2712 = _2597;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    for (;;)
                    {
                        uint _2716 = uint(findLSB(_2712)) + (_2588 << 5u);
                        uint _2713 = (_2712 + 4294967295u) & _2712;
                        uint _2718 = _2716 * 48u;
                        vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 3u)).x));
                        uint _2738 = (_2716 * 48u) + 4u;
                        vec4 _2751 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 3u)).x));
                        uint _2757 = (_2716 * 48u) + 8u;
                        vec3 _2768 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x));
                        float _2772 = _2732.x - _2292;
                        float _2773 = _2732.y - _2293;
                        float _2774 = _2732.z - _2294;
                        float _2775 = dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774));
                        float _2778 = inversesqrt(_2775);
                        float _2779 = _2778 * _2772;
                        float _2780 = _2778 * _2773;
                        float _2781 = _2778 * _2774;
                        float _2782 = dot(vec3(_591, _594, _597), vec3(_2779, _2780, _2781));
                        float _2787 = 1.0 - (_2775 * _2732.w);
                        float _4113 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2788 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2789 = sqrt(_2775) * _2751.w;
                        float _2792 = 1.39999997615814208984375 / (_2789 + 1.39999997615814208984375);
                        float _2793 = _2792 * _2792;
                        float _2796 = ((1.0 - _2793) * _2782) + _2793;
                        float _2799 = _2789 * _2789;
                        float _2803 = ((isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))) * _2788) / ((_2799 * 0.699999988079071044921875) + 1.0);
                        float _2807 = (-0.0) - _2292;
                        float _2808 = (-0.0) - _2293;
                        float _2809 = (-0.0) - _2294;
                        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
                        float _2814 = _2813 * _2807;
                        float _2815 = _2813 * _2808;
                        float _2816 = _2813 * _2809;
                        float _2824 = exp2(log2(1.0 / ((_2799 * 3.5) + 5.0)) * 0.25);
                        float _2825 = 1.0 - _651;
                        float _2832 = sqrt(1.0 - ((1.0 - (_2825 * _2825)) * (1.0 - (_2824 * _2824))));
                        float _2833 = _2832 * _2832;
                        float _2834 = _2833 * _2833;
                        float _2835 = _2814 + _2779;
                        float _2836 = _2815 + _2780;
                        float _2837 = _2816 + _2781;
                        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
                        float _2845 = dot(vec3(_591, _594, _597), vec3(_2814, _2815, _2816));
                        float _4129 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2848 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2849 = dot(vec3(_591, _594, _597), vec3(_2841 * _2835, _2841 * _2836, _2841 * _2837));
                        float _4140 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2852 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2856 = ((_2852 * _2852) * (_2834 + (-1.0))) + 1.0;
                        float _2857 = _2792 * _2833;
                        float _2858 = _2857 * _2857;
                        float _2861 = ((1.0 - _2858) * _2782) + _2858;
                        float _4151 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2862 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2863 = 1.0 - _2833;
                        float _2873 = (0.5 / (((_2862 * ((_2848 * _2863) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2862 * _2863) + _2833) * _2848))) * _2862;
                        float _4162 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2884 = (((_2834 * 3.1415927410125732421875) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) / ((_2856 * _2856) * ((_2799 * 2.1991131305694580078125) + 3.141590118408203125))) * _2788;
                        _2641 = (_2803 * _2751.x) + _2709;
                        _2642 = (_2803 * _2751.y) + _2710;
                        _2643 = (_2803 * _2751.z) + _2711;
                        _2638 = (_2884 * _2768.x) + _2706;
                        _2639 = (_2884 * _2768.y) + _2707;
                        _2640 = (_2884 * _2768.z) + _2708;
                        if (_2713 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2706 = _2638;
                            _2707 = _2639;
                            _2708 = _2640;
                            _2709 = _2641;
                            _2710 = _2642;
                            _2711 = _2643;
                            _2712 = _2713;
                        }
                    }
                    frontier_phi_63_pred = _2643;
                    frontier_phi_63_pred_1 = _2642;
                    frontier_phi_63_pred_2 = _2641;
                    frontier_phi_63_pred_3 = _2640;
                    frontier_phi_63_pred_4 = _2639;
                    frontier_phi_63_pred_5 = _2638;
                }
                _2449 = frontier_phi_63_pred;
                _2447 = frontier_phi_63_pred_1;
                _2445 = frontier_phi_63_pred_2;
                _2443 = frontier_phi_63_pred_3;
                _2441 = frontier_phi_63_pred_4;
                _2439 = frontier_phi_63_pred_5;
                uint _2589 = _2588 + 1u;
                if (_2589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2582 = _2439;
                    _2583 = _2441;
                    _2584 = _2443;
                    _2585 = _2445;
                    _2586 = _2447;
                    _2587 = _2449;
                    _2588 = _2589;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
        }
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.z;
        uint _2455 = (_2453 >> 8u) & 15u;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        if (((4294967295u << _2455) & _2338) == 0u)
        {
            _2550 = _2438;
            _2552 = _2440;
            _2554 = _2442;
            _2556 = _2444;
            _2558 = _2446;
            _2560 = _2448;
        }
        else
        {
            float _2575 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
            float _2576 = _2575 * _2292;
            float _2577 = _2575 * _2293;
            float _2578 = _2575 * _2294;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2455 < ((_2453 >> 12u) & 15u))
            {
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2689 = _2438;
                float _2690 = _2440;
                float _2691 = _2442;
                float _2692 = _2444;
                float _2693 = _2446;
                float _2694 = _2448;
                uint _2695 = _2455;
                uint _2704;
                bool _2705;
                for (;;)
                {
                    _2704 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                    _2705 = _2704 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2705)
                    {
                        frontier_phi_69_pred = _2694;
                        frontier_phi_69_pred_1 = _2693;
                        frontier_phi_69_pred_2 = _2692;
                        frontier_phi_69_pred_3 = _2691;
                        frontier_phi_69_pred_4 = _2690;
                        frontier_phi_69_pred_5 = _2689;
                    }
                    else
                    {
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _2902 = _2689;
                        float _2903 = _2690;
                        float _2904 = _2691;
                        float _2905 = _2692;
                        float _2906 = _2693;
                        float _2907 = _2694;
                        uint _2908 = _2704;
                        uint _2909;
                        vec4 _2934;
                        float _2935;
                        vec4 _2950;
                        vec3 _2962;
                        vec4 _2978;
                        vec4 _2994;
                        float _3041;
                        bool _3042;
                        for (;;)
                        {
                            uint _2919 = ((_2695 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2908));
                            _2909 = (_2908 + 4294967295u) & _2908;
                            uint _2921 = _2919 * 40u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            _2935 = _2934.w;
                            uint _2937 = (_2919 * 40u) + 4u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2952 = (_2919 * 40u) + 8u;
                            _2962 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x));
                            uint _2965 = (_2919 * 40u) + 16u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2981 = (_2919 * 40u) + 20u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _2997 = (_2919 * 40u) + 24u;
                            vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3016 = (_2919 * 40u) + 28u;
                            vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3041 = fma(_2294, _3029.z, fma(_2293, _3029.y, _3029.x * _2292)) + _3029.w;
                            _3042 = !((fma(_2294, _3010.z, fma(_2293, _3010.y, _3010.x * _2292)) + _3010.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3042)
                            {
                                float _3069 = _2934.x - _2292;
                                float _3070 = _2934.y - _2293;
                                float _3071 = _2934.z - _2294;
                                float _3072 = dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071));
                                float _3075 = inversesqrt(_3072);
                                float _3076 = _3075 * _3069;
                                float _3077 = _3075 * _3070;
                                float _3078 = _3075 * _3071;
                                float _3082 = 1.0 - (_3072 / (_2935 * _2935));
                                float _4173 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3083 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3087 = sqrt(_3072) * _2950.w;
                                float _3089 = 1.39999997615814208984375 / (_3087 + 1.39999997615814208984375);
                                float _3090 = _3089 * _3089;
                                float _3093 = ((1.0 - _3090) * dot(vec3(_3076, _3077, _3078), vec3(_591, _594, _597))) + _3090;
                                float _3096 = _3087 * _3087;
                                float _3100 = (fma(_2294, _2978.z, fma(_2293, _2978.y, _2978.x * _2292)) + _2978.w) / _3041;
                                float _3101 = (fma(_2294, _2994.z, fma(_2293, _2994.y, _2994.x * _2292)) + _2994.w) / _3041;
                                float _3105 = 1.0 - dot(vec2(_3100, _3101), vec2(_3100, _3101));
                                float _4189 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3107 = _3106 * (((isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))) * _3083) / ((_3096 * 0.699999988079071044921875) + 1.0));
                                float _3119 = exp2(log2(1.0 / ((_3096 * 3.5) + 5.0)) * 0.25);
                                float _3120 = 1.0 - _651;
                                float _3127 = sqrt(1.0 - ((1.0 - (_3120 * _3120)) * (1.0 - (_3119 * _3119))));
                                float _3128 = _3127 * _3127;
                                float _3129 = _3128 * _3128;
                                float _3130 = _3076 - _2576;
                                float _3131 = _3077 - _2577;
                                float _3132 = _3078 - _2578;
                                float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                                float _3140 = dot(vec3(_591, _594, _597), vec3((-0.0) - _2576, (-0.0) - _2577, (-0.0) - _2578));
                                float _4200 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3143 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3144 = dot(vec3(_591, _594, _597), vec3(_3136 * _3130, _3136 * _3131, _3136 * _3132));
                                float _4211 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3147 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3151 = ((_3147 * _3147) * (_3129 + (-1.0))) + 1.0;
                                float _3152 = _3089 * _3128;
                                float _3153 = _3152 * _3152;
                                float _3159 = ((1.0 - _3153) * dot(vec3(_591, _594, _597), vec3(_3076, _3077, _3078))) + _3153;
                                float _4222 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3160 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3161 = 1.0 - _3128;
                                float _3171 = (0.5 / (((_3160 * ((_3143 * _3161) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_3160 * _3161) + _3128) * _3143))) * _3160;
                                float _4233 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3181 = (_3106 * _3083) * (((_3129 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_3151 * _3151) * ((_3096 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3107 * _2950.z;
                                frontier_phi_75_pred_1 = _3107 * _2950.y;
                                frontier_phi_75_pred_2 = _3107 * _2950.x;
                                frontier_phi_75_pred_3 = _3181 * _2962.z;
                                frontier_phi_75_pred_4 = _3181 * _2962.y;
                                frontier_phi_75_pred_5 = _3181 * _2962.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3190 = frontier_phi_75_pred;
                            _3189 = frontier_phi_75_pred_1;
                            _3188 = frontier_phi_75_pred_2;
                            _3187 = frontier_phi_75_pred_3;
                            _3186 = frontier_phi_75_pred_4;
                            _3185 = frontier_phi_75_pred_5;
                            _2892 = _3188 + _2905;
                            _2893 = _3189 + _2906;
                            _2894 = _3190 + _2907;
                            _2889 = _3185 + _2902;
                            _2890 = _3186 + _2903;
                            _2891 = _3187 + _2904;
                            if (_2909 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2909;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2894;
                        frontier_phi_69_pred_1 = _2893;
                        frontier_phi_69_pred_2 = _2892;
                        frontier_phi_69_pred_3 = _2891;
                        frontier_phi_69_pred_4 = _2890;
                        frontier_phi_69_pred_5 = _2889;
                    }
                    _2561 = frontier_phi_69_pred;
                    _2559 = frontier_phi_69_pred_1;
                    _2557 = frontier_phi_69_pred_2;
                    _2555 = frontier_phi_69_pred_3;
                    _2553 = frontier_phi_69_pred_4;
                    _2551 = frontier_phi_69_pred_5;
                    uint _2696 = _2695 + 1u;
                    if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2689 = _2551;
                        _2690 = _2553;
                        _2691 = _2555;
                        _2692 = _2557;
                        _2693 = _2559;
                        _2694 = _2561;
                        _2695 = _2696;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2561;
                frontier_phi_57_58_ladder_1 = _2559;
                frontier_phi_57_58_ladder_2 = _2557;
                frontier_phi_57_58_ladder_3 = _2555;
                frontier_phi_57_58_ladder_4 = _2553;
                frontier_phi_57_58_ladder_5 = _2551;
            }
            else
            {
                frontier_phi_57_58_ladder = _2448;
                frontier_phi_57_58_ladder_1 = _2446;
                frontier_phi_57_58_ladder_2 = _2444;
                frontier_phi_57_58_ladder_3 = _2442;
                frontier_phi_57_58_ladder_4 = _2440;
                frontier_phi_57_58_ladder_5 = _2438;
            }
            _2550 = frontier_phi_57_58_ladder_5;
            _2552 = frontier_phi_57_58_ladder_4;
            _2554 = frontier_phi_57_58_ladder_3;
            _2556 = frontier_phi_57_58_ladder_2;
            _2558 = frontier_phi_57_58_ladder_1;
            _2560 = frontier_phi_57_58_ladder;
        }
        float _2565 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        _2350 = (_2565 * _2556) + _1806;
        _2352 = (_2565 * _2558) + _1808;
        _2354 = (_2565 * _2560) + _1810;
        _2356 = ((_2550 * 0.039999999105930328369140625) * _2565) + _2136;
        _2358 = ((_2552 * 0.039999999105930328369140625) * _2565) + _2138;
        _2360 = ((_2554 * 0.039999999105930328369140625) * _2565) + _2140;
    }
    else
    {
        _2350 = _1806;
        _2352 = _1808;
        _2354 = _1810;
        _2356 = _2136;
        _2358 = _2138;
        _2360 = _2140;
    }
    float _4249 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4260 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4271 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    uint _2380 = _610 + 6u;
    float _2388 = _571 / cbSceneParam._m0[86u].x;
    float _2389 = _572 / cbSceneParam._m0[86u].y;
    vec4 _2403 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2388, _2389, (log2((isnan(cbSceneParam._m0[77u].w) ? _505 : (isnan(_505) ? cbSceneParam._m0[77u].w : min(_505, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2405 = _2403.x;
    float _2406 = _2403.y;
    float _2407 = _2403.z;
    float _2408 = _2403.w;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    if (_505 > cbSceneParam._m0[78u].w)
    {
        float _2463 = isnan(_505) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _505 : min(cbSceneParam._m0[80u].w, _505));
        float _2464 = _2463 / _505;
        float _2475 = _2464 * _556;
        float _2476 = _557 * _2464;
        float _2477 = (-0.0) - _2476;
        float _2478 = _2464 * _558;
        float _2480 = (cbSceneParam._m0[77u].w * _2477) / _2463;
        float _2481 = _2480 + cbSceneParam._m0[79u].w;
        float _2482 = cbSceneParam._m0[79u].w - _2476;
        float _2488 = sqrt(((_2475 * _2475) + (_2476 * _2476)) + (_2478 * _2478));
        float _2491 = (1.0 - (cbSceneParam._m0[77u].w / _2463)) * _2488;
        float _2496 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2498 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2651;
        if (abs((_2477 - _2480) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2651 = ((((_2481 > 0.0) ? exp2(_2496 * _2481) : (2.0 - exp2(_2498 * _2481))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2491;
        }
        else
        {
            float _2611 = 1.0 / cbSceneParam._m0[80u].x;
            float _2612 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : max(_2481, _2482));
            float _2613 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : min(_2481, _2482));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            _2651 = ((abs(_2488 / _2477) * cbSceneParam._m0[80u].y) * ((((_2622 - _2623) * 2.0) - ((exp2(_2496 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0)))) - exp2(_2496 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0))))) * _2611)) - ((exp2(_2498 * _2622) - exp2(_2498 * _2623)) * _2611))) + (_2491 * cbSceneParam._m0[80u].z);
        }
        vec4 _2653 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2388, _2389, 1.0), 0.0);
        float _2662 = exp2((_2651 * (-1.44269502162933349609375)) * (1.0 - _2653.w));
        float _2663 = log2(_2662);
        float _2679 = log2(_2408);
        _2500 = (exp2(_2679 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].x)) * _2653.x) / cbSceneParam._m0[78u].x)) + _2405;
        _2502 = (exp2(_2679 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].y)) * _2653.y) / cbSceneParam._m0[78u].y)) + _2406;
        _2504 = (exp2(_2679 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].z)) * _2653.z) / cbSceneParam._m0[78u].z)) + _2407;
        _2506 = _2662 * _2408;
    }
    else
    {
        _2500 = _2405;
        _2502 = _2406;
        _2504 = _2407;
        _2506 = _2408;
    }
    float _2518 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2519 = _2518 == 3.0;
    float _2520 = log2(_2506);
    float _2527 = exp2(_2520 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2350 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _635))) + ((_2356 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1442)) * cbPerFrame._m0[3u].x));
    float _2528 = exp2(_2520 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2352 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _635))) + ((_2358 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1442)) * cbPerFrame._m0[3u].x));
    float _2529 = exp2(_2520 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2354 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _635))) + ((_2360 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1442)) * cbPerFrame._m0[3u].x));
    float _2538 = (_2518 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2538 * (_2519 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2500)));
    SV_Target.y = _2538 * (_2519 ? _2528 : (_2528 + (cbSceneParam._m0[72u].w * _2502)));
    SV_Target.z = _2538 * (_2519 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2504)));
    SV_Target.w = cbInstanceData._m0[_2380].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2380].w;
}


