#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1011;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _243 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _248 = _243.z;
    float _252 = (_243.x * 2.0) + (-1.0);
    float _254 = (_243.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3608 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))));
    float _264 = fma(_261, _222, fma(_254, _215, _252 * _201));
    float _267 = fma(_261, _223, fma(_254, _216, _252 * _202));
    float _270 = fma(_261, _224, fma(_254, _217, _252 * _203));
    float _279 = exp2(log2(inversesqrt(dot(vec3(_264, _267, _270), vec3(_264, _267, _270))) * _267) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3619 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _304 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3630 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _311 = (1.0 - cbMtdParam._m0[12u].x) + (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)));
    float _312 = _311 * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)));
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(1.0) ? _313 : (isnan(_313) ? 1.0 : min(_313, 1.0));
    vec4 _326 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _351 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _362 = cbMtdParam._m0[9u].x * _351.x;
    float _363 = cbMtdParam._m0[9u].y * _351.y;
    float _364 = cbMtdParam._m0[9u].z * _351.z;
    float _371 = (((cbMtdParam._m0[10u].x * _326.x) - _362) * _314) + _362;
    float _372 = (((cbMtdParam._m0[10u].y * _326.y) - _363) * _314) + _363;
    float _373 = (((cbMtdParam._m0[10u].z * _326.z) - _364) * _314) + _364;
    vec4 _386 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _393 = (_386.x * 2.0) + (-1.0);
    float _394 = (_386.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_393, _394), vec2(_393, _394));
    float _3651 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _403 = ((_386.z - _248) * _314) + _248;
    float _404 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _405 = isnan(1.0) ? _404 : (isnan(_404) ? 1.0 : min(_404, 1.0));
    vec4 _426 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _432 = (_426.x * 2.0) + (-1.0);
    float _433 = (_426.y * 2.0) + (-1.0);
    float _434 = dot(vec2(_432, _433), vec2(_432, _433));
    float _3672 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _439 = sqrt(1.0 - (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))));
    float _448 = (((((sqrt(1.0 - (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) - _261) * _314) + _261) - _439) * _405) + _439;
    vec4 _462 = texture(sampler2D(M_AMSN_V_Snow_OV_N_Far_AN_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _472 = ((((((_393 - _252) * _314) + _252) - _432) * _405) + _432) + (((_462.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _473 = ((((((_394 - _254) * _314) + _254) - _433) * _405) + _433) + (((_462.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _476 = fma(_448, _222, fma(_473, _215, _472 * _201));
    float _479 = fma(_448, _223, fma(_473, _216, _472 * _202));
    float _482 = fma(_448, _224, fma(_473, _217, _472 * _203));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    float _487 = _486 * _476;
    float _488 = _486 * _479;
    float _489 = _486 * _482;
    float _3683 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _490 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3705 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3716 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _509 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _560 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _550);
    float _561 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _550);
    float _562 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _550);
    float _566 = inversesqrt(dot(vec3(_560, _561, _562), vec3(_560, _561, _562)));
    float _567 = _560 * _566;
    float _568 = _561 * _566;
    float _569 = _562 * _566;
    float _575 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _576 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _595 = fma(_489, cbSceneParam._m0[5u].z, fma(_488, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _487));
    float _598 = fma(_489, cbSceneParam._m0[6u].z, fma(_488, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _487));
    float _601 = fma(_489, cbSceneParam._m0[7u].z, fma(_488, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _487));
    uint _614 = uint(roundEven(NORMAL.w)) * 13u;
    uint _616 = (_614 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _622 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_616].x;
    float _623 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_616].y;
    float _624 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_616].z;
    float _3727 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _3738 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    vec4 _636 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _575, cbSceneParam._m0[86u].y * _576));
    float _639 = _636.x * TEXCOORD_3.w;
    float _640 = dot(vec3(_487, _488, _489), vec3(_567, _568, _569));
    float _643 = _640 * 2.0;
    float _647 = (_643 * _487) - _567;
    float _648 = (_643 * _488) - _568;
    float _649 = (_643 * _489) - _569;
    float _653 = abs(dot(vec3(_567, _568, _569), vec3(_487, _488, _489)));
    float _3760 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _655 = sqrt(_490);
    float _668 = exp2((_655 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_655 * 3.0));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1010;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _735 = fma(_708, cbModelParam._m0[26u].z, fma(_704, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _700));
        float _739 = fma(_708, cbModelParam._m0[27u].z, fma(_704, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _700));
        float _743 = fma(_708, cbModelParam._m0[28u].z, fma(_704, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _700));
        float _768 = _700 + _487;
        float _769 = _704 + _488;
        float _770 = _708 + _489;
        float _780 = fma(_770, cbModelParam._m0[26u].z, fma(_769, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768)) - _735;
        float _781 = fma(_770, cbModelParam._m0[27u].z, fma(_769, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768)) - _739;
        float _782 = fma(_770, cbModelParam._m0[28u].z, fma(_769, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768)) - _743;
        float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
        float _799 = ((_786 * _780) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_735 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_786 * _781) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_739 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_786 * _782) / cbModelParam._m0[34u].z) + ((((((_743 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_799, _800, _801), 0.0);
        float _838 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_804.x + (-0.5));
        float _840 = _838 * (_804.y + (-0.5));
        float _841 = _838 * (_804.z + (-0.5));
        float _848 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_811.x + (-0.5));
        float _850 = _848 * (_811.y + (-0.5));
        float _851 = _848 * (_811.z + (-0.5));
        float _858 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_818.x + (-0.5));
        float _860 = _858 * (_818.y + (-0.5));
        float _861 = _858 * (_818.z + (-0.5));
        float _868 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_825.x + (-0.5));
        float _870 = _868 * (_825.y + (-0.5));
        float _871 = _868 * (_825.z + (-0.5));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = _839 * 0.5;
        float _876 = _849 * 0.5;
        float _877 = _859 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _892 = (dot(vec3(_487, _488, _489), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _902 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3808 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_904 + 1.0))) + _909) * _872;
        float _919 = _840 * 0.5;
        float _920 = _850 * 0.5;
        float _921 = _860 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_487, _488, _489), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3841 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_946 + 1.0))) + _951) * _873;
        float _961 = _841 * 0.5;
        float _962 = _851 * 0.5;
        float _963 = _861 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_487, _488, _489), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3874 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_988 + 1.0))) + _993) * _874;
        _1010 = _841;
        _1012 = _840;
        _1013 = _839;
        _1014 = _851;
        _1015 = _850;
        _1016 = _849;
        _1017 = _861;
        _1018 = _860;
        _1019 = _859;
        _1020 = _874;
        _1021 = _873;
        _1022 = _872;
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
    }
    else
    {
        _1010 = _1011;
        _1012 = _1011;
        _1013 = _1011;
        _1014 = _1011;
        _1015 = _1011;
        _1016 = _1011;
        _1017 = _1011;
        _1018 = _1011;
        _1019 = _1011;
        _1020 = _1011;
        _1021 = _1011;
        _1022 = _1011;
        _1023 = 0.0;
        _1024 = 0.0;
        _1025 = 0.0;
    }
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1051 = fma(_708, cbModelParam._m0[30u].z, fma(_704, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _700));
        float _1055 = fma(_708, cbModelParam._m0[31u].z, fma(_704, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _700));
        float _1059 = fma(_708, cbModelParam._m0[32u].z, fma(_704, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _700));
        float _1082 = _700 + _487;
        float _1083 = _704 + _488;
        float _1084 = _708 + _489;
        float _1094 = fma(_1084, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082)) - _1051;
        float _1095 = fma(_1084, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082)) - _1055;
        float _1096 = fma(_1084, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082)) - _1059;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1051 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1055 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[35u].z) + ((((((_1059 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1150 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1117.x + (-0.5));
        float _1152 = _1150 * (_1117.y + (-0.5));
        float _1153 = _1150 * (_1117.z + (-0.5));
        float _1160 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1124.x + (-0.5));
        float _1162 = _1160 * (_1124.y + (-0.5));
        float _1163 = _1160 * (_1124.z + (-0.5));
        float _1170 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1131.x + (-0.5));
        float _1172 = _1170 * (_1131.y + (-0.5));
        float _1173 = _1170 * (_1131.z + (-0.5));
        float _1180 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1138.x + (-0.5));
        float _1182 = _1180 * (_1138.y + (-0.5));
        float _1183 = _1180 * (_1138.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_487, _488, _489), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3937 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1214 + 1.0))) + _1219) * _1184;
        float _1229 = _1152 * 0.5;
        float _1230 = _1162 * 0.5;
        float _1231 = _1172 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_487, _488, _489), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3970 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1256 + 1.0))) + _1261) * _1185;
        float _1271 = _1153 * 0.5;
        float _1272 = _1163 * 0.5;
        float _1273 = _1173 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_487, _488, _489), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4003 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1298 + 1.0))) + _1303) * _1186;
        _1320 = _1153;
        _1321 = _1152;
        _1322 = _1151;
        _1323 = _1163;
        _1324 = _1162;
        _1325 = _1161;
        _1326 = _1173;
        _1327 = _1172;
        _1328 = _1171;
        _1329 = _1186;
        _1330 = _1185;
        _1331 = _1184;
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1011;
        _1321 = _1011;
        _1322 = _1011;
        _1323 = _1011;
        _1324 = _1011;
        _1325 = _1011;
        _1326 = _1011;
        _1327 = _1011;
        _1328 = _1011;
        _1329 = _1011;
        _1330 = _1011;
        _1331 = _1011;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1023)) + _1023;
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1024)) + _1024;
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1025)) + _1025;
    float _1367 = fma(_1346, cbSceneParam._m0[89u].z, fma(_1345, cbSceneParam._m0[89u].y, _1344 * cbSceneParam._m0[89u].x));
    float _1370 = fma(_1346, cbSceneParam._m0[90u].z, fma(_1345, cbSceneParam._m0[90u].y, _1344 * cbSceneParam._m0[90u].x));
    float _1373 = fma(_1346, cbSceneParam._m0[91u].z, fma(_1345, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1344));
    float _1388 = _647 * 0.5;
    float _1389 = _648 * 0.5;
    float _1390 = _649 * 0.5;
    float _1391 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1394 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1397 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1431;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1404 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1010, _1014, _1017, _1020));
        float _1408 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1012, _1015, _1018, _1021));
        float _1412 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1013, _1016, _1019, _1022));
        float _1419 = dot(vec4(cbModelParam._m0[39u]), vec4(_1388, _1389, _1390, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1442;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1433 = dot(vec4(cbModelParam._m0[40u]), vec4(_1388, _1389, _1390, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1433) ? 0.0 : (isnan(0.0) ? _1433 : max(0.0, _1433))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1446 = (_1442 * cbModelParam._m0[1u].x) + (_1431 * (1.0 - cbModelParam._m0[1u].x));
    float _1456 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _490);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1456 : min(cbModelParam._m0[25u].z, _1456));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1506 = fma(_708, cbModelParam._m0[13u].z, fma(_704, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700)) + cbModelParam._m0[13u].w;
        float _1510 = fma(_708, cbModelParam._m0[14u].z, fma(_704, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700)) + cbModelParam._m0[14u].w;
        float _1514 = fma(_708, cbModelParam._m0[15u].z, fma(_704, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700)) + cbModelParam._m0[15u].w;
        float _1517 = fma(_649, cbModelParam._m0[13u].z, fma(_648, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _647));
        float _1520 = fma(_649, cbModelParam._m0[14u].z, fma(_648, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _647));
        float _1523 = fma(_649, cbModelParam._m0[15u].z, fma(_648, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _647));
        float _1551;
        if (_1517 > 0.0)
        {
            _1551 = abs((1.0 - _1506) / _1517);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1506 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1551 = frontier_phi_16_14_ladder;
        }
        float _1724;
        if (_1520 > 0.0)
        {
            _1724 = abs((1.0 - _1510) / _1520);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1510 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1724 = frontier_phi_25_21_ladder;
        }
        float _2019;
        if (_1523 > 0.0)
        {
            _2019 = abs((1.0 - _1514) / _1523);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1514 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2019 = frontier_phi_37_32_ladder;
        }
        float _2021 = isnan(_1724) ? _1551 : (isnan(_1551) ? _1724 : min(_1551, _1724));
        float _2022 = isnan(_2019) ? _2021 : (isnan(_2021) ? _2019 : min(_2021, _2019));
        float _2026 = (_2022 * _1517) + _1506;
        float _2027 = (_2022 * _1520) + _1510;
        float _2028 = (_2022 * _1523) + _1514;
        float _2029 = _2022 * 9.9999997473787516355514526367188e-05;
        float _2031 = (-1.0) - _2029;
        float _2033 = _2029 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2028 > _2033) || ((_2028 < _2031) || ((_2027 > _2033) || ((_2027 < _2031) || ((_2026 < _2031) || (_2026 > _2033))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2173 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2028, cbModelParam._m0[9u].z, fma(_2027, cbModelParam._m0[9u].y, _2026 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2028, cbModelParam._m0[10u].z, fma(_2027, cbModelParam._m0[10u].y, _2026 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2028, cbModelParam._m0[11u].z, fma(_2027, cbModelParam._m0[11u].y, _2026 * cbModelParam._m0[11u].x))), _1457);
            frontier_phi_15_37_ladder = _2173.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2173.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2173.z * cbModelParam._m0[1u].y;
        }
        _1539 = frontier_phi_15_37_ladder_1;
        _1541 = frontier_phi_15_37_ladder;
        _1543 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_647, _648, _649), _1457);
        _1539 = _1527.x * cbModelParam._m0[1u].y;
        _1541 = _1527.y * cbModelParam._m0[1u].y;
        _1543 = _1527.z * cbModelParam._m0[1u].y;
    }
    float _1547 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _490);
    float _1548 = isnan(_1547) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1547 : min(cbModelParam._m0[25u].w, _1547));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1605 = fma(_708, cbModelParam._m0[21u].z, fma(_704, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700)) + cbModelParam._m0[21u].w;
        float _1609 = fma(_708, cbModelParam._m0[22u].z, fma(_704, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700)) + cbModelParam._m0[22u].w;
        float _1613 = fma(_708, cbModelParam._m0[23u].z, fma(_704, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700)) + cbModelParam._m0[23u].w;
        float _1616 = fma(_649, cbModelParam._m0[21u].z, fma(_648, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _647));
        float _1619 = fma(_649, cbModelParam._m0[22u].z, fma(_648, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _647));
        float _1622 = fma(_649, cbModelParam._m0[23u].z, fma(_648, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _647));
        float _1729;
        if (_1616 > 0.0)
        {
            _1729 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1729 = frontier_phi_27_23_ladder;
        }
        float _2046;
        if (_1619 > 0.0)
        {
            _2046 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2046 = frontier_phi_39_34_ladder;
        }
        float _2373;
        if (_1622 > 0.0)
        {
            _2373 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2373 = frontier_phi_49_46_ladder;
        }
        float _2375 = isnan(_2046) ? _1729 : (isnan(_1729) ? _2046 : min(_1729, _2046));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1616) + _1605;
        float _2381 = (_2376 * _1619) + _1609;
        float _2382 = (_2376 * _1622) + _1613;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2384 = (-1.0) - _2383;
        float _2386 = _2383 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2382 > _2386) || ((_2382 < _2384) || ((_2381 > _2386) || ((_2381 < _2384) || ((_2380 < _2384) || (_2380 > _2386))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2382, cbModelParam._m0[17u].z, fma(_2381, cbModelParam._m0[17u].y, _2380 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2382, cbModelParam._m0[18u].z, fma(_2381, cbModelParam._m0[18u].y, _2380 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2382, cbModelParam._m0[19u].z, fma(_2381, cbModelParam._m0[19u].y, _2380 * cbModelParam._m0[19u].x))), _1548);
            frontier_phi_24_49_ladder = _2500.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2500.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2500.x * cbModelParam._m0[1u].z;
        }
        _1641 = frontier_phi_24_49_ladder_2;
        _1643 = frontier_phi_24_49_ladder_1;
        _1645 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_647, _648, _649), _1548);
        _1641 = _1625.x * cbModelParam._m0[1u].z;
        _1643 = _1625.y * cbModelParam._m0[1u].z;
        _1645 = _1625.z * cbModelParam._m0[1u].z;
    }
    float _1657 = ((((1.0 - _668) * ((_655 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_668 * _655)) * _639;
    float _1658 = _1657 * ((cbModelParam._m0[1u].w * (_1641 - _1539)) + _1539);
    float _1659 = _1657 * ((cbModelParam._m0[1u].w * (_1643 - _1541)) + _1541);
    float _1660 = _1657 * ((cbModelParam._m0[1u].w * (_1645 - _1543)) + _1543);
    float _1663 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, _1658 * cbSceneParam._m0[91u].x));
    float _1703 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1707 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1711 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1715 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1716 = _1703 / _1715;
    float _1717 = _1707 / _1715;
    float _1718 = _1711 / _1715;
    float _1865;
    float _1866;
    float _1867;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1745 = ((uint(_1718 > cbSceneParam._m0[59u].y) + uint(_1718 > cbSceneParam._m0[59u].x)) + uint(_1718 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1746 = _1745 + 43u;
        uint _1754 = _1745 + 44u;
        uint _1762 = _1745 + 45u;
        uint _1770 = _1745 + 46u;
        float _1781 = fma(_1715, cbSceneParam._m0[_1746].w, fma(_1711, cbSceneParam._m0[_1746].z, fma(_1707, cbSceneParam._m0[_1746].y, _1703 * cbSceneParam._m0[_1746].x)));
        float _1785 = fma(_1715, cbSceneParam._m0[_1754].w, fma(_1711, cbSceneParam._m0[_1754].z, fma(_1707, cbSceneParam._m0[_1754].y, _1703 * cbSceneParam._m0[_1754].x)));
        float _1793 = fma(_1715, cbSceneParam._m0[_1770].w, fma(_1711, cbSceneParam._m0[_1770].z, fma(_1707, cbSceneParam._m0[_1770].y, _1703 * cbSceneParam._m0[_1770].x)));
        float _1798 = cbSceneParam._m0[33u].z * _1793;
        float _1800 = cbSceneParam._m0[33u].w * _1793;
        float _1803 = fma(_1715, cbSceneParam._m0[_1762].w, fma(_1711, cbSceneParam._m0[_1762].z, fma(_1707, cbSceneParam._m0[_1762].y, _1703 * cbSceneParam._m0[_1762].x))) / _1793;
        float _1851 = (cbSceneParam._m0[33u].x - sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718))) * cbSceneParam._m0[33u].y;
        float _4129 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1858 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1798 + _1781) / _1793, (_1800 + _1785) / _1793), _1803), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1800 + _1781) / _1793, (_1785 - _1798) / _1793), _1803), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1781 - _1798) / _1793, (_1785 - _1800) / _1793), _1803), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1781 - _1800) / _1793, (_1798 + _1785) / _1793), _1803), 0.0)).x), vec4(0.25)));
        _1865 = 1.0 - (_1858 * cbSceneParam._m0[34u].x);
        _1866 = 1.0 - (_1858 * cbSceneParam._m0[34u].y);
        _1867 = 1.0 - (_1858 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1865 = 1.0;
        _1866 = 1.0;
        _1867 = 1.0;
    }
    float _1931;
    float _1933;
    float _1935;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1919 = fma(_1715, cbSceneParam._m0[63u].w, fma(_1711, cbSceneParam._m0[63u].z, fma(_1707, cbSceneParam._m0[63u].y, _1703 * cbSceneParam._m0[63u].x)));
        float _1920 = fma(_1715, cbSceneParam._m0[60u].w, fma(_1711, cbSceneParam._m0[60u].z, fma(_1707, cbSceneParam._m0[60u].y, _1703 * cbSceneParam._m0[60u].x))) / _1919;
        float _1921 = fma(_1715, cbSceneParam._m0[61u].w, fma(_1711, cbSceneParam._m0[61u].z, fma(_1707, cbSceneParam._m0[61u].y, _1703 * cbSceneParam._m0[61u].x))) / _1919;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1920 >= cbSceneParam._m0[64u].x) && (_1921 >= cbSceneParam._m0[64u].y)) && (_1920 <= cbSceneParam._m0[64u].z)) && (_1921 <= cbSceneParam._m0[64u].w))
        {
            float _2059 = fma(_1715, cbSceneParam._m0[62u].w, fma(_1711, cbSceneParam._m0[62u].z, fma(_1707, cbSceneParam._m0[62u].y, _1703 * cbSceneParam._m0[62u].x))) / _1919;
            float _2063 = isnan(cbSceneParam._m0[41u].w) ? _2059 : (isnan(_2059) ? cbSceneParam._m0[41u].w : max(_2059, cbSceneParam._m0[41u].w));
            float _2106 = (cbSceneParam._m0[33u].x - sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718))) * cbSceneParam._m0[33u].y;
            float _4145 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
            float _2113 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1920, cbSceneParam._m0[33u].w + _1921), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1920, _1921 - cbSceneParam._m0[33u].z), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1920 - cbSceneParam._m0[33u].z, _1921 - cbSceneParam._m0[33u].w), _2063), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1920 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1921), _2063), 0.0)).x), vec4(0.25)));
            float _2117 = 1.0 - (_2113 * cbSceneParam._m0[34u].x);
            float _2118 = 1.0 - (_2113 * cbSceneParam._m0[34u].y);
            float _2119 = 1.0 - (_2113 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2118) ? _1866 : (isnan(_1866) ? _2118 : min(_1866, _2118));
            frontier_phi_36_35_ladder_1 = isnan(_2119) ? _1867 : (isnan(_1867) ? _2119 : min(_1867, _2119));
            frontier_phi_36_35_ladder_2 = isnan(_2117) ? _1865 : (isnan(_1865) ? _2117 : min(_1865, _2117));
        }
        else
        {
            frontier_phi_36_35_ladder = _1866;
            frontier_phi_36_35_ladder_1 = _1867;
            frontier_phi_36_35_ladder_2 = _1865;
        }
        _1931 = frontier_phi_36_35_ladder_2;
        _1933 = frontier_phi_36_35_ladder;
        _1935 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1931 = _1865;
        _1933 = _1866;
        _1935 = _1867;
    }
    uvec4 _1940 = floatBitsToUint(cbInstanceData._m0[_614 + 5u]);
    uint _1942 = _1940.x * 14u;
    uint _1943 = _1942 + 13u;
    float _1950 = _639 + (-1.0);
    float _1955 = (cbLight._m0[_1943].x * _1950) + 1.0;
    float _1956 = (cbLight._m0[_1943].y * _1950) + 1.0;
    float _1957 = (cbLight._m0[_1943].z * _1950) + 1.0;
    float _1958 = (cbLight._m0[_1943].w * _1950) + 1.0;
    uint _1959 = _1942 + 5u;
    float _1965 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1969 = _1942 + 4u;
    float _1978 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1982 = _1942 | 1u;
    float _1993 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_487, _488, _489));
    float _1996 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_487, _488, _489));
    float _4181 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _4192 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2001 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * 0.3183098733425140380859375;
    float _2003 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * 0.3183098733425140380859375;
    float _2010 = ((cbLight._m0[_1959].x * _1965) * _2003) + (((cbLight._m0[_1969].x * _1931) * _1978) * _2001);
    float _2011 = ((_1965 * cbLight._m0[_1959].y) * _2003) + (((cbLight._m0[_1969].y * _1933) * _1978) * _2001);
    float _2012 = ((_1965 * cbLight._m0[_1959].z) * _2003) + (((cbLight._m0[_1969].z * _1935) * _1978) * _2001);
    uvec4 _2016 = floatBitsToUint(cbLight._m0[_1942 + 12u]);
    bool _2018 = _2016.x == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2018)
    {
        _2120 = _2010;
        _2122 = _2011;
        _2124 = _2012;
    }
    else
    {
        uint _2128 = _1942 + 6u;
        float _2144 = (dot(vec3(cbLight._m0[_1942 + 2u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4203 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2147 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2120 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _2010;
        _2122 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _2011;
        _2124 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _2012;
    }
    bool _2127 = _2016.y == 0u;
    float _2182;
    float _2184;
    float _2186;
    if (_2127)
    {
        _2182 = _2120;
        _2184 = _2122;
        _2186 = _2124;
    }
    else
    {
        uint _2344 = _1942 + 7u;
        float _2360 = (dot(vec3(cbLight._m0[_1942 + 3u].xyz), vec3(_487, _488, _489)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4219 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2363 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2182 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2120;
        _2184 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2122;
        _2186 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2124;
    }
    uint _2189 = _1942 + 8u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _490) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_1942].x + _567;
    float _2205 = cbLight._m0[_1942].y + _568;
    float _2206 = cbLight._m0[_1942].z + _569;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1942].xyz));
    float _4235 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _2218 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2219 = dot(vec3(_487, _488, _489), vec3(_2211, _2212, _2213));
    float _4257 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2211, _2212, _2213));
    float _4268 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2203 * _2203;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2243 = 1.0 - _2203;
    float _2254 = (0.5 / (((_2218 * ((_2217 * _2243) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2243) + _2203) * _2217))) * _2217;
    float _4279 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    uint _2270 = _1942 + 9u;
    float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _490) * 0.949999988079071044921875);
    float _2282 = _2281 * _2281;
    float _2283 = cbLight._m0[_1982].x + _567;
    float _2284 = cbLight._m0[_1982].y + _568;
    float _2285 = cbLight._m0[_1982].z + _569;
    float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
    float _2290 = _2289 * _2283;
    float _2291 = _2289 * _2284;
    float _2292 = _2289 * _2285;
    float _2293 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1982].xyz));
    float _4290 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2297 = dot(vec3(_487, _488, _489), vec3(_2290, _2291, _2292));
    float _4301 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2301 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2290, _2291, _2292));
    float _4312 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2305 = _2282 * _2282;
    float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
    float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2319 = 1.0 - _2282;
    float _2329 = (0.5 / (((_2218 * ((_2296 * _2319) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2319) + _2282) * _2296))) * _2296;
    float _4323 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2331 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
    float _2341 = (((_2318 * cbLight._m0[_2270].x) * _2331) * _1965) + ((((cbLight._m0[_2189].x * _1931) * _2242) * _2256) * _1978);
    float _2342 = (((_2318 * cbLight._m0[_2270].y) * _2331) * _1965) + ((((cbLight._m0[_2189].y * _1933) * _2242) * _2256) * _1978);
    float _2343 = (((_2318 * cbLight._m0[_2270].z) * _2331) * _1965) + ((((cbLight._m0[_2189].z * _1935) * _2242) * _2256) * _1978);
    float _2399;
    float _2401;
    float _2403;
    if (_2018)
    {
        _2399 = _2341;
        _2401 = _2342;
        _2403 = _2343;
    }
    else
    {
        uint _2405 = _1942 + 2u;
        uint _2409 = _1942 + 10u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _490) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _567;
        float _2426 = cbLight._m0[_2405].y + _568;
        float _2427 = cbLight._m0[_2405].z + _569;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2405].xyz));
        float _4334 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2439 = dot(vec3(_487, _488, _489), vec3(_2432, _2433, _2434));
        float _4345 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4356 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2460 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2461 = 1.0 - _2424;
        float _2471 = (0.5 / (((_2218 * ((_2438 * _2461) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2461) + _2424) * _2438))) * _2438;
        float _4367 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2473 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2474 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2399 = (((_2460 * cbLight._m0[_2409].x) * _2473) * _2474) + _2341;
        _2401 = (((_2460 * cbLight._m0[_2409].y) * _2473) * _2474) + _2342;
        _2403 = (((_2460 * cbLight._m0[_2409].z) * _2473) * _2474) + _2343;
    }
    float _2505;
    float _2507;
    float _2509;
    if (_2127)
    {
        _2505 = _2399;
        _2507 = _2401;
        _2509 = _2403;
    }
    else
    {
        uint _2516 = _1942 + 3u;
        uint _2520 = _1942 + 11u;
        float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2516].w)) * _490) * 0.949999988079071044921875);
        float _2535 = _2534 * _2534;
        float _2536 = cbLight._m0[_2516].x + _567;
        float _2537 = cbLight._m0[_2516].y + _568;
        float _2538 = cbLight._m0[_2516].z + _569;
        float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
        float _2543 = _2542 * _2536;
        float _2544 = _2542 * _2537;
        float _2545 = _2542 * _2538;
        float _2546 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_2516].xyz));
        float _4383 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2550 = dot(vec3(_487, _488, _489), vec3(_2543, _2544, _2545));
        float _4394 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2554 = dot(vec3(cbLight._m0[_2516].xyz), vec3(_2543, _2544, _2545));
        float _4405 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2558 = _2535 * _2535;
        float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
        float _2571 = (exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2572 = 1.0 - _2535;
        float _2582 = (0.5 / (((_2218 * ((_2549 * _2572) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2218 * _2572) + _2535) * _2549))) * _2549;
        float _4416 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2505 = (((_2571 * cbLight._m0[_2520].x) * _2584) * _2585) + _2399;
        _2507 = (((_2571 * cbLight._m0[_2520].y) * _2584) * _2585) + _2401;
        _2509 = (((_2571 * cbLight._m0[_2520].z) * _2584) * _2585) + _2403;
    }
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    if (_1940.y == 0u)
    {
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.x;
        uint _2618 = uint((float(_2606.y) * floor(float(uint(cbSceneParam._m0[85u].y * _576) / _2607))) + floor(float(uint(cbSceneParam._m0[85u].x * _575) / _2607)));
        float _2628 = (log2(_1718 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2629 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        uint _2632 = uint(isnan(14.0) ? _2629 : (isnan(_2629) ? 14.0 : min(_2629, 14.0)));
        uvec4 _2637 = texelFetch(g_lightClusterGridBuffer, int(((_2632 << 2u) + (_2618 << 6u)) >> 2u));
        uint _2638 = _2637.x;
        uint _2639 = _2606.z;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((((1u << ((_2639 >> 4u) & 15u)) + 4294967295u) & _2638) == 0u) || ((_2639 & 240u) == 0u))
        {
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
        }
        else
        {
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            uint _2867 = 0u;
            uint _2876;
            bool _2877;
            for (;;)
            {
                _2876 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                _2877 = _2876 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2877)
                {
                    frontier_phi_68_pred = _2866;
                    frontier_phi_68_pred_1 = _2865;
                    frontier_phi_68_pred_2 = _2864;
                    frontier_phi_68_pred_3 = _2862;
                    frontier_phi_68_pred_4 = _2861;
                    frontier_phi_68_pred_5 = _2863;
                }
                else
                {
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    uint _2991;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2876;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    for (;;)
                    {
                        uint _2995 = uint(findLSB(_2991)) + (_2867 << 5u);
                        uint _2992 = (_2991 + 4294967295u) & _2991;
                        uint _2997 = _2995 * 48u;
                        vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 3u)).x));
                        uint _3017 = (_2995 * 48u) + 4u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3036 = (_2995 * 48u) + 8u;
                        vec3 _3047 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x));
                        float _3051 = _3011.x - _1716;
                        float _3052 = _3011.y - _1717;
                        float _3053 = _3011.z - _1718;
                        float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                        float _3057 = inversesqrt(_3054);
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3061 = dot(vec3(_595, _598, _601), vec3(_3058, _3059, _3060));
                        float _3066 = 1.0 - (_3054 * _3011.w);
                        float _4442 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3067 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3068 = sqrt(_3054) * _3030.w;
                        float _3071 = 1.39999997615814208984375 / (_3068 + 1.39999997615814208984375);
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _3061) + _3072;
                        float _3078 = _3068 * _3068;
                        float _3082 = ((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3067) / ((_3078 * 0.699999988079071044921875) + 1.0);
                        float _3086 = (-0.0) - _1716;
                        float _3087 = (-0.0) - _1717;
                        float _3088 = (-0.0) - _1718;
                        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3102 = exp2(log2(1.0 / ((_3078 * 3.5) + 5.0)) * 0.25);
                        float _3103 = 1.0 - _655;
                        float _3110 = sqrt(1.0 - ((1.0 - (_3103 * _3103)) * (1.0 - (_3102 * _3102))));
                        float _3111 = _3110 * _3110;
                        float _3112 = _3111 * _3111;
                        float _3113 = _3093 + _3058;
                        float _3114 = _3094 + _3059;
                        float _3115 = _3095 + _3060;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3123 = dot(vec3(_595, _598, _601), vec3(_3093, _3094, _3095));
                        float _4458 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3127 = dot(vec3(_595, _598, _601), vec3(_3119 * _3113, _3119 * _3114, _3119 * _3115));
                        float _4469 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3134 = ((_3130 * _3130) * (_3112 + (-1.0))) + 1.0;
                        float _3135 = _3071 * _3111;
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3061) + _3136;
                        float _4480 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3141 = 1.0 - _3111;
                        float _3151 = (0.5 / (((_3140 * ((_3126 * _3141) + _3111)) + 9.9999999392252902907785028219223e-09) + (((_3140 * _3141) + _3111) * _3126))) * _3140;
                        float _4491 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3162 = (((_3112 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3134 * _3134) * ((_3078 * 2.1991131305694580078125) + 3.141590118408203125))) * _3067;
                        _2920 = (_3082 * _3030.x) + _2988;
                        _2921 = (_3082 * _3030.y) + _2989;
                        _2922 = (_3082 * _3030.z) + _2990;
                        _2917 = (_3162 * _3047.x) + _2985;
                        _2918 = (_3162 * _3047.y) + _2986;
                        _2919 = (_3162 * _3047.z) + _2987;
                        if (_2992 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2992;
                        }
                    }
                    frontier_phi_68_pred = _2922;
                    frontier_phi_68_pred_1 = _2921;
                    frontier_phi_68_pred_2 = _2920;
                    frontier_phi_68_pred_3 = _2918;
                    frontier_phi_68_pred_4 = _2917;
                    frontier_phi_68_pred_5 = _2919;
                }
                _2728 = frontier_phi_68_pred;
                _2726 = frontier_phi_68_pred_1;
                _2724 = frontier_phi_68_pred_2;
                _2720 = frontier_phi_68_pred_3;
                _2718 = frontier_phi_68_pred_4;
                _2722 = frontier_phi_68_pred_5;
                uint _2868 = _2867 + 1u;
                if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2861 = _2718;
                    _2862 = _2720;
                    _2863 = _2722;
                    _2864 = _2724;
                    _2865 = _2726;
                    _2866 = _2728;
                    _2867 = _2868;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
        }
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.z;
        uint _2734 = (_2732 >> 8u) & 15u;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((4294967295u << _2734) & _2638) == 0u)
        {
            _2829 = _2717;
            _2831 = _2719;
            _2833 = _2721;
            _2835 = _2723;
            _2837 = _2725;
            _2839 = _2727;
        }
        else
        {
            float _2854 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
            float _2855 = _2854 * _1716;
            float _2856 = _2854 * _1717;
            float _2857 = _2854 * _1718;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2734 < ((_2732 >> 12u) & 15u))
            {
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2968 = _2717;
                float _2969 = _2719;
                float _2970 = _2721;
                float _2971 = _2723;
                float _2972 = _2725;
                float _2973 = _2727;
                uint _2974 = _2734;
                uint _2983;
                bool _2984;
                for (;;)
                {
                    _2983 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2974 << 2u)) >> 2u)).x;
                    _2984 = _2983 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2984)
                    {
                        frontier_phi_74_pred = _2970;
                        frontier_phi_74_pred_1 = _2969;
                        frontier_phi_74_pred_2 = _2968;
                        frontier_phi_74_pred_3 = _2973;
                        frontier_phi_74_pred_4 = _2972;
                        frontier_phi_74_pred_5 = _2971;
                    }
                    else
                    {
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3180 = _2968;
                        float _3181 = _2969;
                        float _3182 = _2970;
                        float _3183 = _2971;
                        float _3184 = _2972;
                        float _3185 = _2973;
                        uint _3186 = _2983;
                        uint _3187;
                        vec4 _3212;
                        float _3213;
                        vec4 _3228;
                        vec3 _3240;
                        vec4 _3256;
                        vec4 _3272;
                        float _3319;
                        bool _3320;
                        for (;;)
                        {
                            uint _3197 = ((_2974 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3186));
                            _3187 = (_3186 + 4294967295u) & _3186;
                            uint _3199 = _3197 * 40u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3213 = _3212.w;
                            uint _3215 = (_3197 * 40u) + 4u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3230 = (_3197 * 40u) + 8u;
                            _3240 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x));
                            uint _3243 = (_3197 * 40u) + 16u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3259 = (_3197 * 40u) + 20u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3275 = (_3197 * 40u) + 24u;
                            vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3294 = (_3197 * 40u) + 28u;
                            vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            _3319 = fma(_1718, _3307.z, fma(_1717, _3307.y, _3307.x * _1716)) + _3307.w;
                            _3320 = !((fma(_1718, _3288.z, fma(_1717, _3288.y, _3288.x * _1716)) + _3288.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3320)
                            {
                                float _3347 = _3212.x - _1716;
                                float _3348 = _3212.y - _1717;
                                float _3349 = _3212.z - _1718;
                                float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                                float _3353 = inversesqrt(_3350);
                                float _3354 = _3353 * _3347;
                                float _3355 = _3353 * _3348;
                                float _3356 = _3353 * _3349;
                                float _3360 = 1.0 - (_3350 / (_3213 * _3213));
                                float _4502 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3365 = sqrt(_3350) * _3228.w;
                                float _3367 = 1.39999997615814208984375 / (_3365 + 1.39999997615814208984375);
                                float _3368 = _3367 * _3367;
                                float _3371 = ((1.0 - _3368) * dot(vec3(_3354, _3355, _3356), vec3(_595, _598, _601))) + _3368;
                                float _3374 = _3365 * _3365;
                                float _3378 = (fma(_1718, _3256.z, fma(_1717, _3256.y, _3256.x * _1716)) + _3256.w) / _3319;
                                float _3379 = (fma(_1718, _3272.z, fma(_1717, _3272.y, _3272.x * _1716)) + _3272.w) / _3319;
                                float _3383 = 1.0 - dot(vec2(_3378, _3379), vec2(_3378, _3379));
                                float _4518 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3385 = _3384 * (((isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))) * _3361) / ((_3374 * 0.699999988079071044921875) + 1.0));
                                float _3397 = exp2(log2(1.0 / ((_3374 * 3.5) + 5.0)) * 0.25);
                                float _3398 = 1.0 - _655;
                                float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                                float _3406 = _3405 * _3405;
                                float _3407 = _3406 * _3406;
                                float _3408 = _3354 - _2855;
                                float _3409 = _3355 - _2856;
                                float _3410 = _3356 - _2857;
                                float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                                float _3418 = dot(vec3(_595, _598, _601), vec3((-0.0) - _2855, (-0.0) - _2856, (-0.0) - _2857));
                                float _4529 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3421 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3422 = dot(vec3(_595, _598, _601), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                                float _4540 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                                float _3430 = _3367 * _3406;
                                float _3431 = _3430 * _3430;
                                float _3437 = ((1.0 - _3431) * dot(vec3(_595, _598, _601), vec3(_3354, _3355, _3356))) + _3431;
                                float _4551 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3439 = 1.0 - _3406;
                                float _3449 = (0.5 / (((_3438 * ((_3421 * _3439) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3406) * _3421))) * _3438;
                                float _4562 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3459 = (_3384 * _3361) * (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) / ((_3429 * _3429) * ((_3374 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3459 * _3240.z;
                                frontier_phi_80_pred_1 = _3459 * _3240.y;
                                frontier_phi_80_pred_2 = _3459 * _3240.x;
                                frontier_phi_80_pred_3 = _3385 * _3228.z;
                                frontier_phi_80_pred_4 = _3385 * _3228.y;
                                frontier_phi_80_pred_5 = _3385 * _3228.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3465 = frontier_phi_80_pred;
                            _3464 = frontier_phi_80_pred_1;
                            _3463 = frontier_phi_80_pred_2;
                            _3468 = frontier_phi_80_pred_3;
                            _3467 = frontier_phi_80_pred_4;
                            _3466 = frontier_phi_80_pred_5;
                            _3170 = _3466 + _3183;
                            _3171 = _3467 + _3184;
                            _3172 = _3468 + _3185;
                            _3167 = _3463 + _3180;
                            _3168 = _3464 + _3181;
                            _3169 = _3465 + _3182;
                            if (_3187 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3187;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3169;
                        frontier_phi_74_pred_1 = _3168;
                        frontier_phi_74_pred_2 = _3167;
                        frontier_phi_74_pred_3 = _3172;
                        frontier_phi_74_pred_4 = _3171;
                        frontier_phi_74_pred_5 = _3170;
                    }
                    _2834 = frontier_phi_74_pred;
                    _2832 = frontier_phi_74_pred_1;
                    _2830 = frontier_phi_74_pred_2;
                    _2840 = frontier_phi_74_pred_3;
                    _2838 = frontier_phi_74_pred_4;
                    _2836 = frontier_phi_74_pred_5;
                    uint _2975 = _2974 + 1u;
                    if (_2975 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2968 = _2830;
                        _2969 = _2832;
                        _2970 = _2834;
                        _2971 = _2836;
                        _2972 = _2838;
                        _2973 = _2840;
                        _2974 = _2975;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2838;
                frontier_phi_62_63_ladder_1 = _2836;
                frontier_phi_62_63_ladder_2 = _2834;
                frontier_phi_62_63_ladder_3 = _2840;
                frontier_phi_62_63_ladder_4 = _2832;
                frontier_phi_62_63_ladder_5 = _2830;
            }
            else
            {
                frontier_phi_62_63_ladder = _2725;
                frontier_phi_62_63_ladder_1 = _2723;
                frontier_phi_62_63_ladder_2 = _2721;
                frontier_phi_62_63_ladder_3 = _2727;
                frontier_phi_62_63_ladder_4 = _2719;
                frontier_phi_62_63_ladder_5 = _2717;
            }
            _2829 = frontier_phi_62_63_ladder_5;
            _2831 = frontier_phi_62_63_ladder_4;
            _2833 = frontier_phi_62_63_ladder_2;
            _2835 = frontier_phi_62_63_ladder_1;
            _2837 = frontier_phi_62_63_ladder;
            _2839 = frontier_phi_62_63_ladder_3;
        }
        float _2844 = isnan(1.0) ? _639 : (isnan(_639) ? 1.0 : min(_639, 1.0));
        _2650 = (_2844 * _2835) + _2182;
        _2652 = (_2844 * _2837) + _2184;
        _2654 = (_2844 * _2839) + _2186;
        _2656 = ((_2829 * 0.039999999105930328369140625) * _2844) + _2505;
        _2658 = ((_2831 * 0.039999999105930328369140625) * _2844) + _2507;
        _2660 = ((_2833 * 0.039999999105930328369140625) * _2844) + _2509;
    }
    else
    {
        _2650 = _2182;
        _2652 = _2184;
        _2654 = _2186;
        _2656 = _2505;
        _2658 = _2507;
        _2660 = _2509;
    }
    float _4578 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4589 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4600 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    uint _2680 = _614 + 6u;
    float _2688 = _575 / cbSceneParam._m0[86u].x;
    float _2689 = _576 / cbSceneParam._m0[86u].y;
    vec4 _2703 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, (log2((isnan(cbSceneParam._m0[77u].w) ? _509 : (isnan(_509) ? cbSceneParam._m0[77u].w : min(_509, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2705 = _2703.x;
    float _2706 = _2703.y;
    float _2707 = _2703.z;
    float _2708 = _2703.w;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_509 > cbSceneParam._m0[78u].w)
    {
        float _2742 = isnan(_509) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _509 : min(cbSceneParam._m0[80u].w, _509));
        float _2743 = _2742 / _509;
        float _2754 = _2743 * _560;
        float _2755 = _561 * _2743;
        float _2756 = (-0.0) - _2755;
        float _2757 = _2743 * _562;
        float _2759 = (cbSceneParam._m0[77u].w * _2756) / _2742;
        float _2760 = _2759 + cbSceneParam._m0[79u].w;
        float _2761 = cbSceneParam._m0[79u].w - _2755;
        float _2767 = sqrt(((_2754 * _2754) + (_2755 * _2755)) + (_2757 * _2757));
        float _2770 = (1.0 - (cbSceneParam._m0[77u].w / _2742)) * _2767;
        float _2775 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2777 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2930;
        if (abs((_2756 - _2759) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2930 = ((((_2760 > 0.0) ? exp2(_2775 * _2760) : (2.0 - exp2(_2777 * _2760))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2770;
        }
        else
        {
            float _2890 = 1.0 / cbSceneParam._m0[80u].x;
            float _2891 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : max(_2760, _2761));
            float _2892 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : min(_2760, _2761));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            _2930 = ((abs(_2767 / _2756) * cbSceneParam._m0[80u].y) * ((((_2901 - _2902) * 2.0) - ((exp2(_2775 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0)))) - exp2(_2775 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))))) * _2890)) - ((exp2(_2777 * _2901) - exp2(_2777 * _2902)) * _2890))) + (_2770 * cbSceneParam._m0[80u].z);
        }
        vec4 _2932 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2688, _2689, 1.0), 0.0);
        float _2941 = exp2((_2930 * (-1.44269502162933349609375)) * (1.0 - _2932.w));
        float _2942 = log2(_2941);
        float _2958 = log2(_2708);
        _2779 = (exp2(_2958 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].x)) * _2932.x) / cbSceneParam._m0[78u].x)) + _2705;
        _2781 = (exp2(_2958 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].y)) * _2932.y) / cbSceneParam._m0[78u].y)) + _2706;
        _2783 = (exp2(_2958 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].z)) * _2932.z) / cbSceneParam._m0[78u].z)) + _2707;
        _2785 = _2941 * _2708;
    }
    else
    {
        _2779 = _2705;
        _2781 = _2706;
        _2783 = _2707;
        _2785 = _2708;
    }
    float _2797 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2798 = _2797 == 3.0;
    float _2799 = log2(_2785);
    float _2806 = exp2(_2799 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2650 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _639))) + ((_2656 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1446)) * cbPerFrame._m0[3u].x));
    float _2807 = exp2(_2799 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2652 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _639))) + ((_2658 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1446)) * cbPerFrame._m0[3u].x));
    float _2808 = exp2(_2799 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2654 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _639))) + ((_2660 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1446)) * cbPerFrame._m0[3u].x));
    float _2817 = (_2797 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2817 * (_2798 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2779)));
    SV_Target.y = _2817 * (_2798 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2781)));
    SV_Target.z = _2817 * (_2798 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2783)));
    SV_Target.w = cbInstanceData._m0[_2680].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2680].w;
}


