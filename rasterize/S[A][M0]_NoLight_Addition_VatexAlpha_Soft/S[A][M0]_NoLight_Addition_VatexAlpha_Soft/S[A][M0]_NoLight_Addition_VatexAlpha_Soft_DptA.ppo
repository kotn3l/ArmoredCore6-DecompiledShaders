#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D S_A_M0_NoLight_Addition_VatexAlpha_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 5) in vec2 TEXCOORD_5;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    vec4 _99 = texture(sampler2D(S_A_M0_NoLight_Addition_VatexAlpha_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _101 = _99.w;
    uint _104 = uint(roundEven(NORMAL.w));
    float _147 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _157 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _147);
    float _158 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _147);
    float _159 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _147);
    vec4 _164 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _166 = _164.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _199 = sqrt(((_157 * _157) + (_158 * _158)) + (_159 * _159));
        float _206 = (cbMatDynParam._m0[5u].x * _199) + cbMatDynParam._m0[5u].y;
        float _277 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
        float _208 = isnan(1.0) ? _277 : (isnan(_277) ? 1.0 : min(_277, 1.0));
        float _212 = (cbMatDynParam._m0[5u].z * _199) + cbMatDynParam._m0[5u].w;
        float _288 = isnan(0.0) ? _212 : (isnan(_212) ? 0.0 : max(_212, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _288 : (isnan(_288) ? 1.0 : min(_288, 1.0))) - _208)) + _208) < ((_166 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _249;
    vec4 _177;
    float _179;
    float _180;
    bool _191;
    uint _192;
    for (;;)
    {
        float _174 = _166 + (-0.5);
        _177 = cbMtdParam._m0[1u];
        _179 = _177.y * _174;
        _180 = _174 * 0.999000012874603271484375;
        _191 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        _192 = _104 * 13u;
        if (_191)
        {
            if ((cbInstanceData._m0[_192 + 7u].x + _180) < 0.5)
            {
                _249 = true;
                break;
            }
        }
        uint _238 = (_192 + 9u) + uint(cbMatDynParam._m0[0u].w);
        if ((cbInstanceData._m0[_238].w < 1.0) && ((cbInstanceData._m0[_238].w + _180) < 0.5))
        {
            _249 = true;
            break;
        }
        if ((_179 + _101) < _177.x)
        {
            _249 = true;
            break;
        }
        _249 = false;
        break;
    }
    if (_249)
    {
        discard_state = true;
    }
    discard_exit();
}


