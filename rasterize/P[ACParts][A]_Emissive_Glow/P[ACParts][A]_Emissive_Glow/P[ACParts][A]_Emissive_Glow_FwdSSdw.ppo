#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_A_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_A_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _722;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    vec4 _184 = texture(sampler2D(P_ACParts_A_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _184.x * cbMtdParam._m0[10u].x;
    float _191 = _184.y * cbMtdParam._m0[10u].y;
    float _192 = _184.z * cbMtdParam._m0[10u].z;
    vec4 _214 = texture(sampler2D(P_ACParts_A_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _222 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _223 = _222 * _162;
    float _224 = _222 * _163;
    float _225 = _222 * _164;
    float _2899 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _2910 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2921 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _245 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _286 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _296 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _286);
    float _297 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _286);
    float _298 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _286);
    float _302 = inversesqrt(dot(vec3(_296, _297, _298), vec3(_296, _297, _298)));
    float _303 = _296 * _302;
    float _304 = _297 * _302;
    float _305 = _298 * _302;
    float _311 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _312 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _333 = fma(_225, cbSceneParam._m0[5u].z, fma(_224, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _223));
    float _336 = fma(_225, cbSceneParam._m0[6u].z, fma(_224, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _223));
    float _339 = fma(_225, cbSceneParam._m0[7u].z, fma(_224, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _223));
    uint _352 = uint(roundEven(NORMAL.w)) * 13u;
    uint _354 = _352 + 9u;
    uint _355 = _354 + uint(cbMatDynParam._m0[0u].w);
    float _361 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2899 : (isnan(_2899) ? 1.0 : min(_2899, 1.0)))) * cbInstanceData._m0[_355].x;
    float _362 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0)))) * cbInstanceData._m0[_355].y;
    float _363 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0)))) * cbInstanceData._m0[_355].z;
    float _2932 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
    float _2943 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0));
    float _2954 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0));
    vec4 _375 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _311, cbSceneParam._m0[86u].y * _312));
    float _378 = _375.x * TEXCOORD.z;
    float _379 = dot(vec3(_223, _224, _225), vec3(_303, _304, _305));
    float _382 = _379 * 2.0;
    float _387 = (_382 * _223) - _303;
    float _388 = (_382 * _224) - _304;
    float _389 = (_382 * _225) - _305;
    float _411 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _721;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _446 = fma(_419, cbModelParam._m0[26u].z, fma(_415, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _411));
        float _450 = fma(_419, cbModelParam._m0[27u].z, fma(_415, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _411));
        float _454 = fma(_419, cbModelParam._m0[28u].z, fma(_415, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _411));
        float _479 = _411 + _223;
        float _480 = _415 + _224;
        float _481 = _419 + _225;
        float _491 = fma(_481, cbModelParam._m0[26u].z, fma(_480, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _479)) - _446;
        float _492 = fma(_481, cbModelParam._m0[27u].z, fma(_480, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _479)) - _450;
        float _493 = fma(_481, cbModelParam._m0[28u].z, fma(_480, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _479)) - _454;
        float _497 = inversesqrt(dot(vec3(_491, _492, _493), vec3(_491, _492, _493)));
        float _510 = ((_497 * _491) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_446 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _511 = ((_497 * _492) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_450 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _512 = ((_497 * _493) / cbModelParam._m0[34u].z) + ((((((_454 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _515 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        vec4 _522 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        vec4 _529 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        vec4 _536 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_510, _511, _512), 0.0);
        float _549 = exp2((_515.w + (-0.5)) * 20.0) * 2.0;
        float _550 = _549 * (_515.x + (-0.5));
        float _551 = _549 * (_515.y + (-0.5));
        float _552 = _549 * (_515.z + (-0.5));
        float _559 = exp2((_522.w + (-0.5)) * 20.0) * 2.0;
        float _560 = _559 * (_522.x + (-0.5));
        float _561 = _559 * (_522.y + (-0.5));
        float _562 = _559 * (_522.z + (-0.5));
        float _569 = exp2((_529.w + (-0.5)) * 20.0) * 2.0;
        float _570 = _569 * (_529.x + (-0.5));
        float _571 = _569 * (_529.y + (-0.5));
        float _572 = _569 * (_529.z + (-0.5));
        float _579 = exp2((_536.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_536.x + (-0.5));
        float _581 = _579 * (_536.y + (-0.5));
        float _582 = _579 * (_536.z + (-0.5));
        float _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _584 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        float _585 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _586 = _550 * 0.5;
        float _587 = _560 * 0.5;
        float _588 = _570 * 0.5;
        float _589 = dot(vec3(_586, _587, _588), vec3(_586, _587, _588));
        float _594 = (_589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_589);
        float _603 = (dot(vec3(_223, _224, _225), vec3(_594 * _586, _594 * _587, _594 * _588)) + 1.0) * 0.5;
        float _2980 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _613 = sqrt(((_587 * _587) + (_586 * _586)) + (_588 * _588)) / (_583 + 9.9999997473787516355514526367188e-06);
        float _2991 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0));
        float _615 = _614 * 2.0;
        float _619 = (1.0 - _614) / (_614 + 1.0);
        float _3002 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0));
        float _629 = ((((1.0 - _620) * (_615 + 2.0)) * exp2(log2(isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0))) * (_615 + 1.0))) + _620) * _583;
        float _630 = _551 * 0.5;
        float _631 = _561 * 0.5;
        float _632 = _571 * 0.5;
        float _633 = dot(vec3(_630, _631, _632), vec3(_630, _631, _632));
        float _638 = (_633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_633);
        float _646 = (dot(vec3(_223, _224, _225), vec3(_638 * _630, _638 * _631, _638 * _632)) + 1.0) * 0.5;
        float _3013 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _655 = sqrt(((_631 * _631) + (_630 * _630)) + (_632 * _632)) / (_584 + 9.9999997473787516355514526367188e-06);
        float _3024 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _656 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
        float _657 = _656 * 2.0;
        float _661 = (1.0 - _656) / (_656 + 1.0);
        float _3035 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
        float _671 = ((((1.0 - _662) * (_657 + 2.0)) * exp2(log2(isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0))) * (_657 + 1.0))) + _662) * _584;
        float _672 = _552 * 0.5;
        float _673 = _562 * 0.5;
        float _674 = _572 * 0.5;
        float _675 = dot(vec3(_672, _673, _674), vec3(_672, _673, _674));
        float _680 = (_675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_675);
        float _688 = (dot(vec3(_223, _224, _225), vec3(_680 * _672, _680 * _673, _680 * _674)) + 1.0) * 0.5;
        float _3046 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _697 = sqrt(((_673 * _673) + (_672 * _672)) + (_674 * _674)) / (_585 + 9.9999997473787516355514526367188e-06);
        float _3057 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _698 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
        float _699 = _698 * 2.0;
        float _703 = (1.0 - _698) / (_698 + 1.0);
        float _3068 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _713 = ((((1.0 - _704) * (_699 + 2.0)) * exp2(log2(isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0))) * (_699 + 1.0))) + _704) * _585;
        _721 = _552;
        _723 = _551;
        _724 = _550;
        _725 = _562;
        _726 = _561;
        _727 = _560;
        _728 = _572;
        _729 = _571;
        _730 = _570;
        _731 = _585;
        _732 = _584;
        _733 = _583;
        _734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0)));
        _735 = cbModelParam._m0[36u].z * (isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0)));
        _736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0)));
    }
    else
    {
        _721 = _722;
        _723 = _722;
        _724 = _722;
        _725 = _722;
        _726 = _722;
        _727 = _722;
        _728 = _722;
        _729 = _722;
        _730 = _722;
        _731 = _722;
        _732 = _722;
        _733 = _722;
        _734 = 0.0;
        _735 = 0.0;
        _736 = 0.0;
    }
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _762 = fma(_419, cbModelParam._m0[30u].z, fma(_415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _411));
        float _766 = fma(_419, cbModelParam._m0[31u].z, fma(_415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _411));
        float _770 = fma(_419, cbModelParam._m0[32u].z, fma(_415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _411));
        float _793 = _411 + _223;
        float _794 = _415 + _224;
        float _795 = _419 + _225;
        float _805 = fma(_795, cbModelParam._m0[30u].z, fma(_794, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _793)) - _762;
        float _806 = fma(_795, cbModelParam._m0[31u].z, fma(_794, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _793)) - _766;
        float _807 = fma(_795, cbModelParam._m0[32u].z, fma(_794, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _793)) - _770;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_762 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_766 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[35u].z) + ((((((_770 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _861 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_828.x + (-0.5));
        float _863 = _861 * (_828.y + (-0.5));
        float _864 = _861 * (_828.z + (-0.5));
        float _871 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_835.x + (-0.5));
        float _873 = _871 * (_835.y + (-0.5));
        float _874 = _871 * (_835.z + (-0.5));
        float _881 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_842.x + (-0.5));
        float _883 = _881 * (_842.y + (-0.5));
        float _884 = _881 * (_842.z + (-0.5));
        float _891 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_849.x + (-0.5));
        float _893 = _891 * (_849.y + (-0.5));
        float _894 = _891 * (_849.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_223, _224, _225), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3109 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3120 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3131 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0))) * (_925 + 1.0))) + _930) * _895;
        float _940 = _863 * 0.5;
        float _941 = _873 * 0.5;
        float _942 = _883 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_223, _224, _225), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3142 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3153 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3164 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0))) * (_967 + 1.0))) + _972) * _896;
        float _982 = _864 * 0.5;
        float _983 = _874 * 0.5;
        float _984 = _884 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_223, _224, _225), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3175 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3186 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3197 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0))) * (_1009 + 1.0))) + _1014) * _897;
        _1031 = _864;
        _1032 = _863;
        _1033 = _862;
        _1034 = _874;
        _1035 = _873;
        _1036 = _872;
        _1037 = _884;
        _1038 = _883;
        _1039 = _882;
        _1040 = _897;
        _1041 = _896;
        _1042 = _895;
        _1043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1044 = cbModelParam._m0[36u].w * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1045 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
    }
    else
    {
        _1031 = _722;
        _1032 = _722;
        _1033 = _722;
        _1034 = _722;
        _1035 = _722;
        _1036 = _722;
        _1037 = _722;
        _1038 = _722;
        _1039 = _722;
        _1040 = _722;
        _1041 = _722;
        _1042 = _722;
        _1043 = 0.0;
        _1044 = 0.0;
        _1045 = 0.0;
    }
    float _1055 = (cbModelParam._m0[1u].x * (_1043 - _734)) + _734;
    float _1056 = (cbModelParam._m0[1u].x * (_1044 - _735)) + _735;
    float _1057 = (cbModelParam._m0[1u].x * (_1045 - _736)) + _736;
    float _1078 = fma(_1057, cbSceneParam._m0[89u].z, fma(_1056, cbSceneParam._m0[89u].y, _1055 * cbSceneParam._m0[89u].x));
    float _1081 = fma(_1057, cbSceneParam._m0[90u].z, fma(_1056, cbSceneParam._m0[90u].y, _1055 * cbSceneParam._m0[90u].x));
    float _1084 = fma(_1057, cbSceneParam._m0[91u].z, fma(_1056, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1055));
    float _1099 = _387 * 0.5;
    float _1100 = _388 * 0.5;
    float _1101 = _389 * 0.5;
    float _1102 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_1033, _1036, _1039, _1042));
    float _1105 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_1032, _1035, _1038, _1041));
    float _1108 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1142;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1115 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_721, _725, _728, _731));
        float _1119 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_723, _726, _729, _732));
        float _1123 = dot(vec4(_1099, _1100, _1101, 1.0), vec4(_724, _727, _730, _733));
        float _1130 = dot(vec4(cbModelParam._m0[39u]), vec4(_1099, _1100, _1101, 1.0));
        _1142 = dot(vec3(isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1130) ? 0.0 : (isnan(0.0) ? _1130 : max(0.0, _1130))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1142 = 1.0;
    }
    float _1153;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1144 = dot(vec4(cbModelParam._m0[40u]), vec4(_1099, _1100, _1101, 1.0));
        _1153 = dot(vec3(isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)), isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1144) ? 0.0 : (isnan(0.0) ? _1144 : max(0.0, _1144))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1153 = 1.0;
    }
    float _1157 = (_1153 * cbModelParam._m0[1u].x) + (_1142 * (1.0 - cbModelParam._m0[1u].x));
    float _1166 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1248;
    float _1250;
    float _1252;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1215 = fma(_419, cbModelParam._m0[13u].z, fma(_415, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411)) + cbModelParam._m0[13u].w;
        float _1219 = fma(_419, cbModelParam._m0[14u].z, fma(_415, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411)) + cbModelParam._m0[14u].w;
        float _1223 = fma(_419, cbModelParam._m0[15u].z, fma(_415, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411)) + cbModelParam._m0[15u].w;
        float _1226 = fma(_389, cbModelParam._m0[13u].z, fma(_388, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _387));
        float _1229 = fma(_389, cbModelParam._m0[14u].z, fma(_388, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _387));
        float _1232 = fma(_389, cbModelParam._m0[15u].z, fma(_388, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _387));
        float _1258;
        if (_1226 > 0.0)
        {
            _1258 = abs((1.0 - _1215) / _1226);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1226 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1215 + 1.0) / _1226);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1258 = frontier_phi_14_12_ladder;
        }
        float _1486;
        if (_1229 > 0.0)
        {
            _1486 = abs((1.0 - _1219) / _1229);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1229 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1219 + 1.0) / _1229);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1486 = frontier_phi_23_19_ladder;
        }
        float _1678;
        if (_1232 > 0.0)
        {
            _1678 = abs((1.0 - _1223) / _1232);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1232 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1223 + 1.0) / _1232);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1678 = frontier_phi_35_30_ladder;
        }
        float _1680 = isnan(_1486) ? _1258 : (isnan(_1258) ? _1486 : min(_1258, _1486));
        float _1681 = isnan(_1678) ? _1680 : (isnan(_1680) ? _1678 : min(_1680, _1678));
        float _1685 = (_1681 * _1226) + _1215;
        float _1686 = (_1681 * _1229) + _1219;
        float _1687 = (_1681 * _1232) + _1223;
        float _1688 = _1681 * 9.9999997473787516355514526367188e-05;
        float _1690 = (-1.0) - _1688;
        float _1692 = _1688 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1687 > _1692) || ((_1687 < _1690) || ((_1686 > _1692) || ((_1686 < _1690) || ((_1685 < _1690) || (_1685 > _1692))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1784 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1687, cbModelParam._m0[9u].z, fma(_1686, cbModelParam._m0[9u].y, _1685 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1687, cbModelParam._m0[10u].z, fma(_1686, cbModelParam._m0[10u].y, _1685 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1687, cbModelParam._m0[11u].z, fma(_1686, cbModelParam._m0[11u].y, _1685 * cbModelParam._m0[11u].x))), _1166);
            frontier_phi_13_35_ladder = _1784.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1784.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1784.x * cbModelParam._m0[1u].y;
        }
        _1248 = frontier_phi_13_35_ladder_2;
        _1250 = frontier_phi_13_35_ladder_1;
        _1252 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_387, _388, _389), _1166);
        _1248 = _1236.x * cbModelParam._m0[1u].y;
        _1250 = _1236.y * cbModelParam._m0[1u].y;
        _1252 = _1236.z * cbModelParam._m0[1u].y;
    }
    float _1255 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1348;
    float _1350;
    float _1352;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1312 = fma(_419, cbModelParam._m0[21u].z, fma(_415, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411)) + cbModelParam._m0[21u].w;
        float _1316 = fma(_419, cbModelParam._m0[22u].z, fma(_415, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411)) + cbModelParam._m0[22u].w;
        float _1320 = fma(_419, cbModelParam._m0[23u].z, fma(_415, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411)) + cbModelParam._m0[23u].w;
        float _1323 = fma(_389, cbModelParam._m0[21u].z, fma(_388, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _387));
        float _1326 = fma(_389, cbModelParam._m0[22u].z, fma(_388, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _387));
        float _1329 = fma(_389, cbModelParam._m0[23u].z, fma(_388, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _387));
        float _1491;
        if (_1323 > 0.0)
        {
            _1491 = abs((1.0 - _1312) / _1323);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1312 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1491 = frontier_phi_25_21_ladder;
        }
        float _1705;
        if (_1326 > 0.0)
        {
            _1705 = abs((1.0 - _1316) / _1326);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1316 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1705 = frontier_phi_37_32_ladder;
        }
        float _1856;
        if (_1329 > 0.0)
        {
            _1856 = abs((1.0 - _1320) / _1329);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1320 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1856 = frontier_phi_46_43_ladder;
        }
        float _1858 = isnan(_1705) ? _1491 : (isnan(_1491) ? _1705 : min(_1491, _1705));
        float _1859 = isnan(_1856) ? _1858 : (isnan(_1858) ? _1856 : min(_1858, _1856));
        float _1863 = (_1859 * _1323) + _1312;
        float _1864 = (_1859 * _1326) + _1316;
        float _1865 = (_1859 * _1329) + _1320;
        float _1866 = _1859 * 9.9999997473787516355514526367188e-05;
        float _1867 = (-1.0) - _1866;
        float _1869 = _1866 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1865 > _1869) || ((_1865 < _1867) || ((_1864 > _1869) || ((_1864 < _1867) || ((_1863 < _1867) || (_1863 > _1869))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2099 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1865, cbModelParam._m0[17u].z, fma(_1864, cbModelParam._m0[17u].y, _1863 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1865, cbModelParam._m0[18u].z, fma(_1864, cbModelParam._m0[18u].y, _1863 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1865, cbModelParam._m0[19u].z, fma(_1864, cbModelParam._m0[19u].y, _1863 * cbModelParam._m0[19u].x))), _1255);
            frontier_phi_22_46_ladder = _2099.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2099.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2099.x * cbModelParam._m0[1u].z;
        }
        _1348 = frontier_phi_22_46_ladder_2;
        _1350 = frontier_phi_22_46_ladder_1;
        _1352 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1332 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_387, _388, _389), _1255);
        _1348 = _1332.x * cbModelParam._m0[1u].z;
        _1350 = _1332.y * cbModelParam._m0[1u].z;
        _1352 = _1332.z * cbModelParam._m0[1u].z;
    }
    float _1364 = _378 * 0.01200000010430812835693359375;
    float _1366 = _1364 * ((cbModelParam._m0[1u].w * (_1348 - _1248)) + _1248);
    float _1367 = _1364 * ((cbModelParam._m0[1u].w * (_1350 - _1250)) + _1250);
    float _1368 = _1364 * ((cbModelParam._m0[1u].w * (_1352 - _1252)) + _1252);
    float _1371 = fma(_1368, cbSceneParam._m0[89u].z, fma(_1367, cbSceneParam._m0[89u].y, _1366 * cbSceneParam._m0[89u].x));
    float _1374 = fma(_1368, cbSceneParam._m0[90u].z, fma(_1367, cbSceneParam._m0[90u].y, _1366 * cbSceneParam._m0[90u].x));
    float _1377 = fma(_1368, cbSceneParam._m0[91u].z, fma(_1367, cbSceneParam._m0[91u].y, _1366 * cbSceneParam._m0[91u].x));
    vec4 _1385 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_311, _312));
    float _1387 = _1385.w;
    float _1399 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1387);
    float _1400 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1387);
    float _1401 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1387);
    uvec4 _1405 = floatBitsToUint(cbInstanceData._m0[_352 + 5u]);
    uint _1407 = _1405.x * 14u;
    uint _1408 = _1407 + 13u;
    float _1415 = _378 + (-1.0);
    float _1421 = (cbLight._m0[_1408].x * _1415) + 1.0;
    float _1422 = (cbLight._m0[_1408].y * _1415) + 1.0;
    float _1423 = (cbLight._m0[_1408].z * _1415) + 1.0;
    float _1424 = (cbLight._m0[_1408].w * _1415) + 1.0;
    uint _1425 = _1407 + 5u;
    float _1431 = isnan(1.0) ? _1422 : (isnan(_1422) ? 1.0 : min(_1422, 1.0));
    uint _1435 = _1407 + 4u;
    float _1445 = isnan(1.0) ? _1421 : (isnan(_1421) ? 1.0 : min(_1421, 1.0));
    uint _1449 = _1407 | 1u;
    float _1460 = dot(vec3(cbLight._m0[_1407].xyz), vec3(_223, _224, _225));
    float _1463 = dot(vec3(cbLight._m0[_1449].xyz), vec3(_223, _224, _225));
    float _3333 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
    float _3344 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _1468 = (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * 0.3183098733425140380859375;
    float _1470 = (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * 0.3183098733425140380859375;
    float _1477 = ((cbLight._m0[_1425].x * _1431) * _1470) + (((cbLight._m0[_1435].x * _1399) * _1445) * _1468);
    float _1478 = ((_1431 * cbLight._m0[_1425].y) * _1470) + (((cbLight._m0[_1435].y * _1400) * _1445) * _1468);
    float _1479 = ((_1431 * cbLight._m0[_1425].z) * _1470) + (((cbLight._m0[_1435].z * _1401) * _1445) * _1468);
    uvec4 _1483 = floatBitsToUint(cbLight._m0[_1407 + 12u]);
    bool _1485 = _1483.x == 0u;
    float _1496;
    float _1498;
    float _1500;
    if (_1485)
    {
        _1496 = _1477;
        _1498 = _1478;
        _1500 = _1479;
    }
    else
    {
        uint _1504 = _1407 + 6u;
        float _1520 = (dot(vec3(cbLight._m0[_1407 + 2u].xyz), vec3(_223, _224, _225)) * 0.5) + 0.5;
        float _1521 = _1520 * _1520;
        float _3355 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _1523 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
        _1496 = (((cbLight._m0[_1504].x * 0.3183098733425140380859375) * _1522) * _1523) + _1477;
        _1498 = (((cbLight._m0[_1504].y * 0.3183098733425140380859375) * _1522) * _1523) + _1478;
        _1500 = (((cbLight._m0[_1504].z * 0.3183098733425140380859375) * _1522) * _1523) + _1479;
    }
    bool _1503 = _1483.y == 0u;
    float _1541;
    float _1543;
    float _1545;
    if (_1503)
    {
        _1541 = _1496;
        _1543 = _1498;
        _1545 = _1500;
    }
    else
    {
        uint _1649 = _1407 + 7u;
        float _1665 = (dot(vec3(cbLight._m0[_1407 + 3u].xyz), vec3(_223, _224, _225)) * 0.5) + 0.5;
        float _1666 = _1665 * _1665;
        float _3371 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1668 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
        _1541 = (((cbLight._m0[_1649].x * 0.3183098733425140380859375) * _1667) * _1668) + _1496;
        _1543 = (((cbLight._m0[_1649].y * 0.3183098733425140380859375) * _1667) * _1668) + _1498;
        _1545 = (((cbLight._m0[_1649].z * 0.3183098733425140380859375) * _1667) * _1668) + _1500;
    }
    uint _1547 = _1407 + 8u;
    float _1553 = cbLight._m0[_1407].x + _303;
    float _1554 = cbLight._m0[_1407].y + _304;
    float _1555 = cbLight._m0[_1407].z + _305;
    float _1559 = inversesqrt(dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555)));
    float _1563 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1407].xyz));
    float _3387 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _1566 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _1567 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _1568 = dot(vec3(cbLight._m0[_1407].xyz), vec3(_1553 * _1559, _1554 * _1559, _1555 * _1559));
    float _3409 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1579 = (exp2(log2(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1585 = (0.5 / ((_1566 + 9.9999999392252902907785028219223e-09) + _1567)) * _1566;
    float _3420 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _1587 = (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * 0.31831014156341552734375;
    uint _1601 = _1407 + 9u;
    float _1607 = cbLight._m0[_1449].x + _303;
    float _1608 = cbLight._m0[_1449].y + _304;
    float _1609 = cbLight._m0[_1449].z + _305;
    float _1613 = inversesqrt(dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609)));
    float _1617 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1449].xyz));
    float _3431 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1620 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _1621 = dot(vec3(cbLight._m0[_1449].xyz), vec3(_1607 * _1613, _1608 * _1613, _1609 * _1613));
    float _3442 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1630 = (exp2(log2(1.0 - (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1634 = (0.5 / ((_1620 + 9.9999999392252902907785028219223e-09) + _1567)) * _1620;
    float _3453 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1636 = (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * 0.31831014156341552734375;
    float _1646 = (((_1630 * cbLight._m0[_1601].x) * _1636) * _1431) + ((((cbLight._m0[_1547].x * _1399) * _1579) * _1587) * _1445);
    float _1647 = (((_1630 * cbLight._m0[_1601].y) * _1636) * _1431) + ((((cbLight._m0[_1547].y * _1400) * _1579) * _1587) * _1445);
    float _1648 = (((_1630 * cbLight._m0[_1601].z) * _1636) * _1431) + ((((cbLight._m0[_1547].z * _1401) * _1579) * _1587) * _1445);
    float _1710;
    float _1712;
    float _1714;
    if (_1485)
    {
        _1710 = _1646;
        _1712 = _1647;
        _1714 = _1648;
    }
    else
    {
        uint _1716 = _1407 + 10u;
        uint _1722 = _1407 + 2u;
        float _1728 = cbLight._m0[_1722].x + _303;
        float _1729 = cbLight._m0[_1722].y + _304;
        float _1730 = cbLight._m0[_1722].z + _305;
        float _1734 = inversesqrt(dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730)));
        float _1738 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1722].xyz));
        float _3464 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1741 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1742 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1728 * _1734, _1729 * _1734, _1730 * _1734));
        float _3475 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = (exp2(log2(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1755 = (0.5 / ((_1741 + 9.9999999392252902907785028219223e-09) + _1567)) * _1741;
        float _3486 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1757 = (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * 0.31831014156341552734375;
        float _1758 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
        _1710 = (((_1751 * cbLight._m0[_1716].x) * _1757) * _1758) + _1646;
        _1712 = (((_1751 * cbLight._m0[_1716].y) * _1757) * _1758) + _1647;
        _1714 = (((_1751 * cbLight._m0[_1716].z) * _1757) * _1758) + _1648;
    }
    float _1793;
    float _1795;
    float _1797;
    if (_1503)
    {
        _1793 = _1710;
        _1795 = _1712;
        _1797 = _1714;
    }
    else
    {
        uint _1804 = _1407 + 11u;
        uint _1810 = _1407 + 3u;
        float _1816 = cbLight._m0[_1810].x + _303;
        float _1817 = cbLight._m0[_1810].y + _304;
        float _1818 = cbLight._m0[_1810].z + _305;
        float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
        float _1826 = dot(vec3(_223, _224, _225), vec3(cbLight._m0[_1810].xyz));
        float _3502 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1829 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1830 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_1816 * _1822, _1817 * _1822, _1818 * _1822));
        float _3513 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1839 = (exp2(log2(1.0 - (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1843 = (0.5 / ((_1829 + 9.9999999392252902907785028219223e-09) + _1567)) * _1829;
        float _3524 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1845 = (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * 0.31831014156341552734375;
        float _1846 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
        _1793 = (((_1839 * cbLight._m0[_1804].x) * _1845) * _1846) + _1710;
        _1795 = (((_1839 * cbLight._m0[_1804].y) * _1845) * _1846) + _1712;
        _1797 = (((_1839 * cbLight._m0[_1804].z) * _1845) * _1846) + _1714;
    }
    float _1981;
    float _1983;
    float _1985;
    float _1987;
    float _1989;
    float _1991;
    if (_1405.y == 0u)
    {
        float _1921 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1922 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1921;
        float _1923 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1921;
        float _1924 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1921;
        uvec4 _1936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1937 = _1936.x;
        uint _1948 = uint((float(_1936.y) * floor(float(uint(cbSceneParam._m0[85u].y * _312) / _1937))) + floor(float(uint(cbSceneParam._m0[85u].x * _311) / _1937)));
        float _1958 = (log2(_1924 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1959 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        uint _1962 = uint(isnan(14.0) ? _1959 : (isnan(_1959) ? 14.0 : min(_1959, 14.0)));
        uvec4 _1967 = texelFetch(g_lightClusterGridBuffer, int(((_1962 << 2u) + (_1948 << 6u)) >> 2u));
        uint _1968 = _1967.x;
        uint _1969 = _1936.z;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        float _2114;
        if (((((1u << ((_1969 >> 4u) & 15u)) + 4294967295u) & _1968) == 0u) || ((_1969 & 240u) == 0u))
        {
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
        }
        else
        {
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2115;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            uint _2262 = 0u;
            uint _2271;
            bool _2272;
            for (;;)
            {
                _2271 = texelFetch(g_lightClassification, int((((_1962 << 5u) + (_1948 << 9u)) + (_2262 << 2u)) >> 2u)).x;
                _2272 = _2271 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2272)
                {
                    frontier_phi_61_pred = _2256;
                    frontier_phi_61_pred_1 = _2261;
                    frontier_phi_61_pred_2 = _2260;
                    frontier_phi_61_pred_3 = _2259;
                    frontier_phi_61_pred_4 = _2258;
                    frontier_phi_61_pred_5 = _2257;
                }
                else
                {
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    uint _2386;
                    _2380 = _2256;
                    _2381 = _2257;
                    _2382 = _2258;
                    _2383 = _2259;
                    _2384 = _2260;
                    _2385 = _2261;
                    _2386 = _2271;
                    float _2312;
                    float _2313;
                    float _2314;
                    float _2315;
                    float _2316;
                    float _2317;
                    for (;;)
                    {
                        uint _2390 = uint(findLSB(_2386)) + (_2262 << 5u);
                        uint _2387 = (_2386 + 4294967295u) & _2386;
                        uint _2392 = _2390 * 48u;
                        vec4 _2406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2392)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 3u)).x));
                        uint _2412 = (_2390 * 48u) + 4u;
                        vec4 _2425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2412)).x, texelFetch(g_PointLightRenderingBuffer, int(_2412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2412 + 3u)).x));
                        uint _2431 = (_2390 * 48u) + 8u;
                        vec3 _2442 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2431)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 2u)).x));
                        float _2446 = _2406.x - _1922;
                        float _2447 = _2406.y - _1923;
                        float _2448 = _2406.z - _1924;
                        float _2449 = dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448));
                        float _2452 = inversesqrt(_2449);
                        float _2461 = 1.0 - (_2449 * _2406.w);
                        float _3550 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
                        float _2462 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
                        float _2463 = sqrt(_2449) * _2425.w;
                        float _2466 = 1.39999997615814208984375 / (_2463 + 1.39999997615814208984375);
                        float _2467 = _2466 * _2466;
                        float _2470 = ((1.0 - _2467) * dot(vec3(_333, _336, _339), vec3(_2452 * _2446, _2452 * _2447, _2452 * _2448))) + _2467;
                        float _2473 = _2463 * _2463;
                        float _2477 = ((isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0))) * _2462) / ((_2473 * 0.699999988079071044921875) + 1.0);
                        float _2481 = (-0.0) - _1922;
                        float _2482 = (-0.0) - _1923;
                        float _2483 = (-0.0) - _1924;
                        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
                        float _2491 = dot(vec3(_333, _336, _339), vec3(_2487 * _2481, _2487 * _2482, _2487 * _2483));
                        float _3566 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
                        float _3577 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
                        float _2495 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
                        float _2499 = (0.5 / (((isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) + 9.9999999392252902907785028219223e-09) + _2495)) * _2495;
                        float _3588 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                        float _2508 = (((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * 3.1415927410125732421875) / ((_2473 * 2.1991131305694580078125) + 3.141590118408203125)) * _2462;
                        _2315 = (_2477 * _2425.x) + _2383;
                        _2316 = (_2477 * _2425.y) + _2384;
                        _2317 = (_2477 * _2425.z) + _2385;
                        _2312 = (_2508 * _2442.x) + _2380;
                        _2313 = (_2508 * _2442.y) + _2381;
                        _2314 = (_2508 * _2442.z) + _2382;
                        if (_2387 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2380 = _2312;
                            _2381 = _2313;
                            _2382 = _2314;
                            _2383 = _2315;
                            _2384 = _2316;
                            _2385 = _2317;
                            _2386 = _2387;
                        }
                    }
                    frontier_phi_61_pred = _2312;
                    frontier_phi_61_pred_1 = _2317;
                    frontier_phi_61_pred_2 = _2316;
                    frontier_phi_61_pred_3 = _2315;
                    frontier_phi_61_pred_4 = _2314;
                    frontier_phi_61_pred_5 = _2313;
                }
                _2105 = frontier_phi_61_pred;
                _2115 = frontier_phi_61_pred_1;
                _2113 = frontier_phi_61_pred_2;
                _2111 = frontier_phi_61_pred_3;
                _2109 = frontier_phi_61_pred_4;
                _2107 = frontier_phi_61_pred_5;
                uint _2263 = _2262 + 1u;
                if (_2263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2256 = _2105;
                    _2257 = _2107;
                    _2258 = _2109;
                    _2259 = _2111;
                    _2260 = _2113;
                    _2261 = _2115;
                    _2262 = _2263;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
        }
        uvec4 _2118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2119 = _2118.z;
        uint _2121 = (_2119 >> 8u) & 15u;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        float _2235;
        float _2237;
        if (((4294967295u << _2121) & _1968) == 0u)
        {
            _2227 = _2104;
            _2229 = _2106;
            _2231 = _2108;
            _2233 = _2110;
            _2235 = _2112;
            _2237 = _2114;
        }
        else
        {
            float _2252 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2121 < ((_2119 >> 12u) & 15u))
            {
                float _2228;
                float _2230;
                float _2232;
                float _2234;
                float _2236;
                float _2238;
                float _2363 = _2104;
                float _2364 = _2106;
                float _2365 = _2108;
                float _2366 = _2110;
                float _2367 = _2112;
                float _2368 = _2114;
                uint _2369 = _2121;
                uint _2378;
                bool _2379;
                for (;;)
                {
                    _2378 = texelFetch(g_lightClassification, int((((_1962 << 5u) + (_1948 << 9u)) + (_2369 << 2u)) >> 2u)).x;
                    _2379 = _2378 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2379)
                    {
                        frontier_phi_67_pred = _2366;
                        frontier_phi_67_pred_1 = _2367;
                        frontier_phi_67_pred_2 = _2368;
                        frontier_phi_67_pred_3 = _2365;
                        frontier_phi_67_pred_4 = _2364;
                        frontier_phi_67_pred_5 = _2363;
                    }
                    else
                    {
                        float _2513;
                        float _2514;
                        float _2515;
                        float _2516;
                        float _2517;
                        float _2518;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2526 = _2363;
                        float _2527 = _2364;
                        float _2528 = _2365;
                        float _2529 = _2366;
                        float _2530 = _2367;
                        float _2531 = _2368;
                        uint _2532 = _2378;
                        uint _2533;
                        vec4 _2558;
                        float _2559;
                        vec4 _2574;
                        vec3 _2586;
                        vec4 _2602;
                        vec4 _2618;
                        float _2665;
                        bool _2666;
                        for (;;)
                        {
                            uint _2543 = ((_2369 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2532));
                            _2533 = (_2532 + 4294967295u) & _2532;
                            uint _2545 = _2543 * 40u;
                            _2558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 3u)).x));
                            _2559 = _2558.w;
                            uint _2561 = (_2543 * 40u) + 4u;
                            _2574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 3u)).x));
                            uint _2576 = (_2543 * 40u) + 8u;
                            _2586 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2576 + 2u)).x));
                            uint _2589 = (_2543 * 40u) + 16u;
                            _2602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 3u)).x));
                            uint _2605 = (_2543 * 40u) + 20u;
                            _2618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 3u)).x));
                            uint _2621 = (_2543 * 40u) + 24u;
                            vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 3u)).x));
                            uint _2640 = (_2543 * 40u) + 28u;
                            vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 3u)).x));
                            _2665 = fma(_1924, _2653.z, fma(_1923, _2653.y, _2653.x * _1922)) + _2653.w;
                            _2666 = !((fma(_1924, _2634.z, fma(_1923, _2634.y, _2634.x * _1922)) + _2634.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2666)
                            {
                                float _2693 = _2558.x - _1922;
                                float _2694 = _2558.y - _1923;
                                float _2695 = _2558.z - _1924;
                                float _2696 = dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695));
                                float _2699 = inversesqrt(_2696);
                                float _2700 = _2699 * _2693;
                                float _2701 = _2699 * _2694;
                                float _2702 = _2699 * _2695;
                                float _2706 = 1.0 - (_2696 / (_2559 * _2559));
                                float _3599 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                                float _2707 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
                                float _2711 = sqrt(_2696) * _2574.w;
                                float _2713 = 1.39999997615814208984375 / (_2711 + 1.39999997615814208984375);
                                float _2714 = _2713 * _2713;
                                float _2715 = 1.0 - _2714;
                                float _2717 = (_2715 * dot(vec3(_2700, _2701, _2702), vec3(_333, _336, _339))) + _2714;
                                float _2720 = _2711 * _2711;
                                float _2724 = (fma(_1924, _2602.z, fma(_1923, _2602.y, _2602.x * _1922)) + _2602.w) / _2665;
                                float _2725 = (fma(_1924, _2618.z, fma(_1923, _2618.y, _2618.x * _1922)) + _2618.w) / _2665;
                                float _2729 = 1.0 - dot(vec2(_2724, _2725), vec2(_2724, _2725));
                                float _3615 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                                float _2730 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
                                float _2731 = _2730 * (((isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))) * _2707) / ((_2720 * 0.699999988079071044921875) + 1.0));
                                float _2741 = dot(vec3(_333, _336, _339), vec3((-0.0) - (_1922 * _2252), (-0.0) - (_1923 * _2252), (-0.0) - (_1924 * _2252)));
                                float _3626 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                                float _2749 = (_2715 * dot(vec3(_333, _336, _339), vec3(_2700, _2701, _2702))) + _2714;
                                float _3637 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2750 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
                                float _2754 = (0.5 / (((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) + 9.9999999392252902907785028219223e-09) + _2750)) * _2750;
                                float _3648 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                                float _2761 = (_2730 * _2707) * (((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 3.1415927410125732421875) / ((_2720 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2761 * _2586.x;
                                frontier_phi_73_pred_1 = _2761 * _2586.y;
                                frontier_phi_73_pred_2 = _2731 * _2574.z;
                                frontier_phi_73_pred_3 = _2731 * _2574.y;
                                frontier_phi_73_pred_4 = _2731 * _2574.x;
                                frontier_phi_73_pred_5 = _2761 * _2586.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2765 = frontier_phi_73_pred;
                            _2766 = frontier_phi_73_pred_1;
                            _2770 = frontier_phi_73_pred_2;
                            _2769 = frontier_phi_73_pred_3;
                            _2768 = frontier_phi_73_pred_4;
                            _2767 = frontier_phi_73_pred_5;
                            _2516 = _2768 + _2529;
                            _2517 = _2769 + _2530;
                            _2518 = _2770 + _2531;
                            _2513 = _2765 + _2526;
                            _2514 = _2766 + _2527;
                            _2515 = _2767 + _2528;
                            if (_2533 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2526 = _2513;
                                _2527 = _2514;
                                _2528 = _2515;
                                _2529 = _2516;
                                _2530 = _2517;
                                _2531 = _2518;
                                _2532 = _2533;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2516;
                        frontier_phi_67_pred_1 = _2517;
                        frontier_phi_67_pred_2 = _2518;
                        frontier_phi_67_pred_3 = _2515;
                        frontier_phi_67_pred_4 = _2514;
                        frontier_phi_67_pred_5 = _2513;
                    }
                    _2234 = frontier_phi_67_pred;
                    _2236 = frontier_phi_67_pred_1;
                    _2238 = frontier_phi_67_pred_2;
                    _2232 = frontier_phi_67_pred_3;
                    _2230 = frontier_phi_67_pred_4;
                    _2228 = frontier_phi_67_pred_5;
                    uint _2370 = _2369 + 1u;
                    if (_2370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2363 = _2228;
                        _2364 = _2230;
                        _2365 = _2232;
                        _2366 = _2234;
                        _2367 = _2236;
                        _2368 = _2238;
                        _2369 = _2370;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2236;
                frontier_phi_55_56_ladder_1 = _2238;
                frontier_phi_55_56_ladder_2 = _2234;
                frontier_phi_55_56_ladder_3 = _2232;
                frontier_phi_55_56_ladder_4 = _2230;
                frontier_phi_55_56_ladder_5 = _2228;
            }
            else
            {
                frontier_phi_55_56_ladder = _2112;
                frontier_phi_55_56_ladder_1 = _2114;
                frontier_phi_55_56_ladder_2 = _2110;
                frontier_phi_55_56_ladder_3 = _2108;
                frontier_phi_55_56_ladder_4 = _2106;
                frontier_phi_55_56_ladder_5 = _2104;
            }
            _2227 = frontier_phi_55_56_ladder_5;
            _2229 = frontier_phi_55_56_ladder_4;
            _2231 = frontier_phi_55_56_ladder_3;
            _2233 = frontier_phi_55_56_ladder_2;
            _2235 = frontier_phi_55_56_ladder;
            _2237 = frontier_phi_55_56_ladder_1;
        }
        float _2242 = isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0));
        _1981 = (_2242 * _2233) + _1541;
        _1983 = (_2242 * _2235) + _1543;
        _1985 = (_2242 * _2237) + _1545;
        _1987 = ((_2227 * 0.039999999105930328369140625) * _2242) + _1793;
        _1989 = ((_2229 * 0.039999999105930328369140625) * _2242) + _1795;
        _1991 = ((_2231 * 0.039999999105930328369140625) * _2242) + _1797;
    }
    else
    {
        _1981 = _1541;
        _1983 = _1543;
        _1985 = _1545;
        _1987 = _1793;
        _1989 = _1795;
        _1991 = _1797;
    }
    uint _1997 = _354 + uint(cbMatDynParam._m0[0u].w);
    float _2005 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[9u].x) * _214.x) * cbInstanceData._m0[_1997].x;
    float _2008 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[9u].y) * _214.y) * cbInstanceData._m0[_1997].y;
    float _2011 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[9u].z) * _214.z) * cbInstanceData._m0[_1997].z;
    float _3664 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _3675 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3686 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _2028 = (((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1981 + ((isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0))) * _378))) + ((_1987 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _1157)) * cbPerFrame._m0[3u].x)) + _2005;
    float _2030 = (_2008 + ((_1989 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _1157)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1983 + ((isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0))) * _378)));
    float _2032 = (_2011 + ((_1991 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _1157)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1985 + ((isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))) * _378)));
    float _3712 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2045 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    uint _2046 = _352 + 6u;
    float _2054 = _311 / cbSceneParam._m0[86u].x;
    float _2055 = _312 / cbSceneParam._m0[86u].y;
    vec4 _2069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, (log2((isnan(cbSceneParam._m0[77u].w) ? _245 : (isnan(_245) ? cbSceneParam._m0[77u].w : min(_245, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2071 = _2069.x;
    float _2072 = _2069.y;
    float _2073 = _2069.z;
    float _2074 = _2069.w;
    float _2167;
    float _2169;
    float _2171;
    float _2173;
    if (_245 > cbSceneParam._m0[78u].w)
    {
        float _2129 = isnan(_245) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _245 : min(cbSceneParam._m0[80u].w, _245));
        float _2130 = _2129 / _245;
        float _2141 = _2130 * _296;
        float _2142 = _297 * _2130;
        float _2143 = (-0.0) - _2142;
        float _2145 = _2130 * _298;
        float _2147 = (cbSceneParam._m0[77u].w * _2143) / _2129;
        float _2148 = _2147 + cbSceneParam._m0[79u].w;
        float _2149 = cbSceneParam._m0[79u].w - _2142;
        float _2155 = sqrt(((_2141 * _2141) + (_2142 * _2142)) + (_2145 * _2145));
        float _2158 = (1.0 - (cbSceneParam._m0[77u].w / _2129)) * _2155;
        float _2163 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2165 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2325;
        if (abs((_2143 - _2147) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2325 = ((((_2148 > 0.0) ? exp2(_2163 * _2148) : (2.0 - exp2(_2165 * _2148))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2158;
        }
        else
        {
            float _2285 = 1.0 / cbSceneParam._m0[80u].x;
            float _2286 = isnan(_2149) ? _2148 : (isnan(_2148) ? _2149 : max(_2148, _2149));
            float _2287 = isnan(_2149) ? _2148 : (isnan(_2148) ? _2149 : min(_2148, _2149));
            float _2296 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : min(_2286, 0.0));
            float _2297 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : min(_2287, 0.0));
            _2325 = ((abs(_2155 / _2143) * cbSceneParam._m0[80u].y) * ((((_2296 - _2297) * 2.0) - ((exp2(_2163 * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0)))) - exp2(_2163 * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))))) * _2285)) - ((exp2(_2165 * _2296) - exp2(_2165 * _2297)) * _2285))) + (_2158 * cbSceneParam._m0[80u].z);
        }
        vec4 _2327 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, 1.0), 0.0);
        float _2336 = exp2((_2325 * (-1.44269502162933349609375)) * (1.0 - _2327.w));
        float _2337 = log2(_2336);
        float _2353 = log2(_2074);
        _2167 = (exp2(_2353 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2337 * cbSceneParam._m0[78u].x)) * _2327.x) / cbSceneParam._m0[78u].x)) + _2071;
        _2169 = (exp2(_2353 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2337 * cbSceneParam._m0[78u].y)) * _2327.y) / cbSceneParam._m0[78u].y)) + _2072;
        _2171 = (exp2(_2353 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2337 * cbSceneParam._m0[78u].z)) * _2327.z) / cbSceneParam._m0[78u].z)) + _2073;
        _2173 = _2336 * _2074;
    }
    else
    {
        _2167 = _2071;
        _2169 = _2072;
        _2171 = _2073;
        _2173 = _2074;
    }
    float _2185 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2186 = _2185 == 3.0;
    float _2188 = log2(_2173);
    float _2192 = exp2(_2188 * cbSceneParam._m0[78u].x);
    float _2193 = exp2(_2188 * cbSceneParam._m0[78u].y);
    float _2194 = exp2(_2188 * cbSceneParam._m0[78u].z);
    float _2195 = _2192 * (isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)));
    float _2196 = _2193 * (isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)));
    float _2197 = _2194 * (isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0)));
    float _2206 = (_2185 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2206 * (_2186 ? _2195 : (_2195 + (cbSceneParam._m0[72u].w * _2167)));
    SV_Target.y = _2206 * (_2186 ? _2196 : (_2196 + (cbSceneParam._m0[72u].w * _2169)));
    SV_Target.z = _2206 * (_2186 ? _2197 : (_2197 + (cbSceneParam._m0[72u].w * _2171)));
    SV_Target.w = cbInstanceData._m0[_2046].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2005) * _2045) * _2192) * _2206;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2008) * _2045) * _2193) * _2206;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2011) * _2045) * _2194) * _2206;
    SV_Target_1.w = cbInstanceData._m0[_2046].w;
}


