#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_A_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_A_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _720;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _159 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _160 = _159 * NORMAL.x;
    float _161 = _159 * NORMAL.y;
    float _162 = _159 * NORMAL.z;
    vec4 _182 = texture(sampler2D(P_ACParts_A_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _188 = _182.x * cbMtdParam._m0[10u].x;
    float _189 = _182.y * cbMtdParam._m0[10u].y;
    float _190 = _182.z * cbMtdParam._m0[10u].z;
    vec4 _212 = texture(sampler2D(P_ACParts_A_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _220 = inversesqrt(dot(vec3(_160, _161, _162), vec3(_160, _161, _162)));
    float _221 = _220 * _160;
    float _222 = _220 * _161;
    float _223 = _220 * _162;
    float _2873 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _2884 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2895 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _243 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _284 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _294 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _284);
    float _295 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _284);
    float _296 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _284);
    float _300 = inversesqrt(dot(vec3(_294, _295, _296), vec3(_294, _295, _296)));
    float _301 = _294 * _300;
    float _302 = _295 * _300;
    float _303 = _296 * _300;
    float _309 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _310 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _331 = fma(_223, cbSceneParam._m0[5u].z, fma(_222, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _221));
    float _334 = fma(_223, cbSceneParam._m0[6u].z, fma(_222, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _221));
    float _337 = fma(_223, cbSceneParam._m0[7u].z, fma(_222, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _221));
    uint _350 = uint(roundEven(NORMAL.w)) * 13u;
    uint _352 = _350 + 9u;
    uint _353 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _359 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0)))) * cbInstanceData._m0[_353].x;
    float _360 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0)))) * cbInstanceData._m0[_353].y;
    float _361 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0)))) * cbInstanceData._m0[_353].z;
    float _2906 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
    float _2917 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _363 = isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0));
    float _2928 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
    vec4 _373 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _309, cbSceneParam._m0[86u].y * _310));
    float _376 = _373.x * TEXCOORD.z;
    float _377 = dot(vec3(_221, _222, _223), vec3(_301, _302, _303));
    float _380 = _377 * 2.0;
    float _385 = (_380 * _221) - _301;
    float _386 = (_380 * _222) - _302;
    float _387 = (_380 * _223) - _303;
    float _409 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _719;
    float _721;
    float _722;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _444 = fma(_417, cbModelParam._m0[26u].z, fma(_413, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _409));
        float _448 = fma(_417, cbModelParam._m0[27u].z, fma(_413, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _409));
        float _452 = fma(_417, cbModelParam._m0[28u].z, fma(_413, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _409));
        float _477 = _409 + _221;
        float _478 = _413 + _222;
        float _479 = _417 + _223;
        float _489 = fma(_479, cbModelParam._m0[26u].z, fma(_478, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _477)) - _444;
        float _490 = fma(_479, cbModelParam._m0[27u].z, fma(_478, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _477)) - _448;
        float _491 = fma(_479, cbModelParam._m0[28u].z, fma(_478, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _477)) - _452;
        float _495 = inversesqrt(dot(vec3(_489, _490, _491), vec3(_489, _490, _491)));
        float _508 = ((_495 * _489) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_444 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _509 = ((_495 * _490) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_448 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _510 = ((_495 * _491) / cbModelParam._m0[34u].z) + ((((((_452 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _513 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _520 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_508, _509, _510), 0.0);
        float _547 = exp2((_513.w + (-0.5)) * 20.0) * 2.0;
        float _548 = _547 * (_513.x + (-0.5));
        float _549 = _547 * (_513.y + (-0.5));
        float _550 = _547 * (_513.z + (-0.5));
        float _557 = exp2((_520.w + (-0.5)) * 20.0) * 2.0;
        float _558 = _557 * (_520.x + (-0.5));
        float _559 = _557 * (_520.y + (-0.5));
        float _560 = _557 * (_520.z + (-0.5));
        float _567 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_527.x + (-0.5));
        float _569 = _567 * (_527.y + (-0.5));
        float _570 = _567 * (_527.z + (-0.5));
        float _577 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_534.x + (-0.5));
        float _579 = _577 * (_534.y + (-0.5));
        float _580 = _577 * (_534.z + (-0.5));
        float _581 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _582 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _583 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _584 = _548 * 0.5;
        float _585 = _558 * 0.5;
        float _586 = _568 * 0.5;
        float _587 = dot(vec3(_584, _585, _586), vec3(_584, _585, _586));
        float _592 = (_587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_587);
        float _601 = (dot(vec3(_221, _222, _223), vec3(_592 * _584, _592 * _585, _592 * _586)) + 1.0) * 0.5;
        float _2954 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _611 = sqrt(((_585 * _585) + (_584 * _584)) + (_586 * _586)) / (_581 + 9.9999997473787516355514526367188e-06);
        float _2965 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _613 = _612 * 2.0;
        float _617 = (1.0 - _612) / (_612 + 1.0);
        float _2976 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
        float _627 = ((((1.0 - _618) * (_613 + 2.0)) * exp2(log2(isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0))) * (_613 + 1.0))) + _618) * _581;
        float _628 = _549 * 0.5;
        float _629 = _559 * 0.5;
        float _630 = _569 * 0.5;
        float _631 = dot(vec3(_628, _629, _630), vec3(_628, _629, _630));
        float _636 = (_631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_631);
        float _644 = (dot(vec3(_221, _222, _223), vec3(_636 * _628, _636 * _629, _636 * _630)) + 1.0) * 0.5;
        float _2987 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _653 = sqrt(((_629 * _629) + (_628 * _628)) + (_630 * _630)) / (_582 + 9.9999997473787516355514526367188e-06);
        float _2998 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _654 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
        float _655 = _654 * 2.0;
        float _659 = (1.0 - _654) / (_654 + 1.0);
        float _3009 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
        float _669 = ((((1.0 - _660) * (_655 + 2.0)) * exp2(log2(isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0))) * (_655 + 1.0))) + _660) * _582;
        float _670 = _550 * 0.5;
        float _671 = _560 * 0.5;
        float _672 = _570 * 0.5;
        float _673 = dot(vec3(_670, _671, _672), vec3(_670, _671, _672));
        float _678 = (_673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_673);
        float _686 = (dot(vec3(_221, _222, _223), vec3(_678 * _670, _678 * _671, _678 * _672)) + 1.0) * 0.5;
        float _3020 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _695 = sqrt(((_671 * _671) + (_670 * _670)) + (_672 * _672)) / (_583 + 9.9999997473787516355514526367188e-06);
        float _3031 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0));
        float _697 = _696 * 2.0;
        float _701 = (1.0 - _696) / (_696 + 1.0);
        float _3042 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
        float _711 = ((((1.0 - _702) * (_697 + 2.0)) * exp2(log2(isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0))) * (_697 + 1.0))) + _702) * _583;
        _719 = _550;
        _721 = _549;
        _722 = _548;
        _723 = _560;
        _724 = _559;
        _725 = _558;
        _726 = _570;
        _727 = _569;
        _728 = _568;
        _729 = _583;
        _730 = _582;
        _731 = _581;
        _732 = cbModelParam._m0[36u].z * (isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0)));
        _733 = cbModelParam._m0[36u].z * (isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0)));
        _734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0)));
    }
    else
    {
        _719 = _720;
        _721 = _720;
        _722 = _720;
        _723 = _720;
        _724 = _720;
        _725 = _720;
        _726 = _720;
        _727 = _720;
        _728 = _720;
        _729 = _720;
        _730 = _720;
        _731 = _720;
        _732 = 0.0;
        _733 = 0.0;
        _734 = 0.0;
    }
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _760 = fma(_417, cbModelParam._m0[30u].z, fma(_413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _409));
        float _764 = fma(_417, cbModelParam._m0[31u].z, fma(_413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _409));
        float _768 = fma(_417, cbModelParam._m0[32u].z, fma(_413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _409));
        float _791 = _409 + _221;
        float _792 = _413 + _222;
        float _793 = _417 + _223;
        float _803 = fma(_793, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791)) - _760;
        float _804 = fma(_793, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791)) - _764;
        float _805 = fma(_793, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791)) - _768;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_760 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_764 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[35u].z) + ((((((_768 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _859 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_826.x + (-0.5));
        float _861 = _859 * (_826.y + (-0.5));
        float _862 = _859 * (_826.z + (-0.5));
        float _869 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_833.x + (-0.5));
        float _871 = _869 * (_833.y + (-0.5));
        float _872 = _869 * (_833.z + (-0.5));
        float _879 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_840.x + (-0.5));
        float _881 = _879 * (_840.y + (-0.5));
        float _882 = _879 * (_840.z + (-0.5));
        float _889 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_847.x + (-0.5));
        float _891 = _889 * (_847.y + (-0.5));
        float _892 = _889 * (_847.z + (-0.5));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = _860 * 0.5;
        float _897 = _870 * 0.5;
        float _898 = _880 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_221, _222, _223), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3083 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3094 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3105 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0))) * (_923 + 1.0))) + _928) * _893;
        float _938 = _861 * 0.5;
        float _939 = _871 * 0.5;
        float _940 = _881 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_221, _222, _223), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3116 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3127 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3138 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0))) * (_965 + 1.0))) + _970) * _894;
        float _980 = _862 * 0.5;
        float _981 = _872 * 0.5;
        float _982 = _882 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_221, _222, _223), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3149 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3160 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3171 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0))) * (_1007 + 1.0))) + _1012) * _895;
        _1029 = _862;
        _1030 = _861;
        _1031 = _860;
        _1032 = _872;
        _1033 = _871;
        _1034 = _870;
        _1035 = _882;
        _1036 = _881;
        _1037 = _880;
        _1038 = _895;
        _1039 = _894;
        _1040 = _893;
        _1041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
    }
    else
    {
        _1029 = _720;
        _1030 = _720;
        _1031 = _720;
        _1032 = _720;
        _1033 = _720;
        _1034 = _720;
        _1035 = _720;
        _1036 = _720;
        _1037 = _720;
        _1038 = _720;
        _1039 = _720;
        _1040 = _720;
        _1041 = 0.0;
        _1042 = 0.0;
        _1043 = 0.0;
    }
    float _1053 = (cbModelParam._m0[1u].x * (_1041 - _732)) + _732;
    float _1054 = (cbModelParam._m0[1u].x * (_1042 - _733)) + _733;
    float _1055 = (cbModelParam._m0[1u].x * (_1043 - _734)) + _734;
    float _1076 = fma(_1055, cbSceneParam._m0[89u].z, fma(_1054, cbSceneParam._m0[89u].y, _1053 * cbSceneParam._m0[89u].x));
    float _1079 = fma(_1055, cbSceneParam._m0[90u].z, fma(_1054, cbSceneParam._m0[90u].y, _1053 * cbSceneParam._m0[90u].x));
    float _1082 = fma(_1055, cbSceneParam._m0[91u].z, fma(_1054, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1053));
    float _1097 = _385 * 0.5;
    float _1098 = _386 * 0.5;
    float _1099 = _387 * 0.5;
    float _1100 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1103 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1030, _1033, _1036, _1039));
    float _1106 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1029, _1032, _1035, _1038));
    float _1140;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1113 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_719, _723, _726, _729));
        float _1117 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_721, _724, _727, _730));
        float _1121 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_722, _725, _728, _731));
        float _1128 = dot(vec4(cbModelParam._m0[39u]), vec4(_1097, _1098, _1099, 1.0));
        _1140 = dot(vec3(isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1128) ? 0.0 : (isnan(0.0) ? _1128 : max(0.0, _1128))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1140 = 1.0;
    }
    float _1151;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1142 = dot(vec4(cbModelParam._m0[40u]), vec4(_1097, _1098, _1099, 1.0));
        _1151 = dot(vec3(isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)), isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1142) ? 0.0 : (isnan(0.0) ? _1142 : max(0.0, _1142))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1151 = 1.0;
    }
    float _1155 = (_1151 * cbModelParam._m0[1u].x) + (_1140 * (1.0 - cbModelParam._m0[1u].x));
    float _1164 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1246;
    float _1248;
    float _1250;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1213 = fma(_417, cbModelParam._m0[13u].z, fma(_413, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409)) + cbModelParam._m0[13u].w;
        float _1217 = fma(_417, cbModelParam._m0[14u].z, fma(_413, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409)) + cbModelParam._m0[14u].w;
        float _1221 = fma(_417, cbModelParam._m0[15u].z, fma(_413, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409)) + cbModelParam._m0[15u].w;
        float _1224 = fma(_387, cbModelParam._m0[13u].z, fma(_386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _385));
        float _1227 = fma(_387, cbModelParam._m0[14u].z, fma(_386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _385));
        float _1230 = fma(_387, cbModelParam._m0[15u].z, fma(_386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _385));
        float _1256;
        if (_1224 > 0.0)
        {
            _1256 = abs((1.0 - _1213) / _1224);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1224 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1213 + 1.0) / _1224);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1256 = frontier_phi_14_12_ladder;
        }
        float _1463;
        if (_1227 > 0.0)
        {
            _1463 = abs((1.0 - _1217) / _1227);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1217 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1463 = frontier_phi_23_19_ladder;
        }
        float _1652;
        if (_1230 > 0.0)
        {
            _1652 = abs((1.0 - _1221) / _1230);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1230 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1221 + 1.0) / _1230);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1652 = frontier_phi_35_30_ladder;
        }
        float _1654 = isnan(_1463) ? _1256 : (isnan(_1256) ? _1463 : min(_1256, _1463));
        float _1655 = isnan(_1652) ? _1654 : (isnan(_1654) ? _1652 : min(_1654, _1652));
        float _1659 = (_1655 * _1224) + _1213;
        float _1660 = (_1655 * _1227) + _1217;
        float _1661 = (_1655 * _1230) + _1221;
        float _1662 = _1655 * 9.9999997473787516355514526367188e-05;
        float _1664 = (-1.0) - _1662;
        float _1666 = _1662 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1661 > _1666) || ((_1661 < _1664) || ((_1660 > _1666) || ((_1660 < _1664) || ((_1659 < _1664) || (_1659 > _1666))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1661, cbModelParam._m0[9u].z, fma(_1660, cbModelParam._m0[9u].y, _1659 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1661, cbModelParam._m0[10u].z, fma(_1660, cbModelParam._m0[10u].y, _1659 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1661, cbModelParam._m0[11u].z, fma(_1660, cbModelParam._m0[11u].y, _1659 * cbModelParam._m0[11u].x))), _1164);
            frontier_phi_13_35_ladder = _1758.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1758.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1758.x * cbModelParam._m0[1u].y;
        }
        _1246 = frontier_phi_13_35_ladder_2;
        _1248 = frontier_phi_13_35_ladder_1;
        _1250 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1234 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_385, _386, _387), _1164);
        _1246 = _1234.x * cbModelParam._m0[1u].y;
        _1248 = _1234.y * cbModelParam._m0[1u].y;
        _1250 = _1234.z * cbModelParam._m0[1u].y;
    }
    float _1253 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1346;
    float _1348;
    float _1350;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1310 = fma(_417, cbModelParam._m0[21u].z, fma(_413, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409)) + cbModelParam._m0[21u].w;
        float _1314 = fma(_417, cbModelParam._m0[22u].z, fma(_413, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409)) + cbModelParam._m0[22u].w;
        float _1318 = fma(_417, cbModelParam._m0[23u].z, fma(_413, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409)) + cbModelParam._m0[23u].w;
        float _1321 = fma(_387, cbModelParam._m0[21u].z, fma(_386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _385));
        float _1324 = fma(_387, cbModelParam._m0[22u].z, fma(_386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _385));
        float _1327 = fma(_387, cbModelParam._m0[23u].z, fma(_386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _385));
        float _1468;
        if (_1321 > 0.0)
        {
            _1468 = abs((1.0 - _1310) / _1321);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1310 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1468 = frontier_phi_25_21_ladder;
        }
        float _1679;
        if (_1324 > 0.0)
        {
            _1679 = abs((1.0 - _1314) / _1324);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1314 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1679 = frontier_phi_37_32_ladder;
        }
        float _1830;
        if (_1327 > 0.0)
        {
            _1830 = abs((1.0 - _1318) / _1327);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1318 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1830 = frontier_phi_46_43_ladder;
        }
        float _1832 = isnan(_1679) ? _1468 : (isnan(_1468) ? _1679 : min(_1468, _1679));
        float _1833 = isnan(_1830) ? _1832 : (isnan(_1832) ? _1830 : min(_1832, _1830));
        float _1837 = (_1833 * _1321) + _1310;
        float _1838 = (_1833 * _1324) + _1314;
        float _1839 = (_1833 * _1327) + _1318;
        float _1840 = _1833 * 9.9999997473787516355514526367188e-05;
        float _1841 = (-1.0) - _1840;
        float _1843 = _1840 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1839 > _1843) || ((_1839 < _1841) || ((_1838 > _1843) || ((_1838 < _1841) || ((_1837 < _1841) || (_1837 > _1843))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1839, cbModelParam._m0[17u].z, fma(_1838, cbModelParam._m0[17u].y, _1837 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1839, cbModelParam._m0[18u].z, fma(_1838, cbModelParam._m0[18u].y, _1837 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1839, cbModelParam._m0[19u].z, fma(_1838, cbModelParam._m0[19u].y, _1837 * cbModelParam._m0[19u].x))), _1253);
            frontier_phi_22_46_ladder = _2073.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2073.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2073.x * cbModelParam._m0[1u].z;
        }
        _1346 = frontier_phi_22_46_ladder_2;
        _1348 = frontier_phi_22_46_ladder_1;
        _1350 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1330 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_385, _386, _387), _1253);
        _1346 = _1330.x * cbModelParam._m0[1u].z;
        _1348 = _1330.y * cbModelParam._m0[1u].z;
        _1350 = _1330.z * cbModelParam._m0[1u].z;
    }
    float _1362 = _376 * 0.01200000010430812835693359375;
    float _1364 = _1362 * ((cbModelParam._m0[1u].w * (_1346 - _1246)) + _1246);
    float _1365 = _1362 * ((cbModelParam._m0[1u].w * (_1348 - _1248)) + _1248);
    float _1366 = _1362 * ((cbModelParam._m0[1u].w * (_1350 - _1250)) + _1250);
    float _1369 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, _1364 * cbSceneParam._m0[91u].x));
    uvec4 _1385 = floatBitsToUint(cbInstanceData._m0[_350 + 5u]);
    uint _1387 = _1385.x * 14u;
    uint _1388 = _1387 + 13u;
    float _1395 = _376 + (-1.0);
    float _1401 = (cbLight._m0[_1388].x * _1395) + 1.0;
    float _1402 = (cbLight._m0[_1388].y * _1395) + 1.0;
    float _1403 = (cbLight._m0[_1388].z * _1395) + 1.0;
    float _1404 = (cbLight._m0[_1388].w * _1395) + 1.0;
    uint _1405 = _1387 + 5u;
    float _1411 = isnan(1.0) ? _1402 : (isnan(_1402) ? 1.0 : min(_1402, 1.0));
    uint _1415 = _1387 + 4u;
    float _1422 = isnan(1.0) ? _1401 : (isnan(_1401) ? 1.0 : min(_1401, 1.0));
    uint _1426 = _1387 | 1u;
    float _1437 = dot(vec3(cbLight._m0[_1387].xyz), vec3(_221, _222, _223));
    float _1440 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_221, _222, _223));
    float _3307 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
    float _3318 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _1445 = (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * 0.3183098733425140380859375;
    float _1447 = (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.3183098733425140380859375;
    float _1454 = ((cbLight._m0[_1405].x * _1411) * _1447) + ((cbLight._m0[_1415].x * _1422) * _1445);
    float _1455 = ((_1411 * cbLight._m0[_1405].y) * _1447) + ((_1422 * cbLight._m0[_1415].y) * _1445);
    float _1456 = ((_1411 * cbLight._m0[_1405].z) * _1447) + ((_1422 * cbLight._m0[_1415].z) * _1445);
    uvec4 _1460 = floatBitsToUint(cbLight._m0[_1387 + 12u]);
    bool _1462 = _1460.x == 0u;
    float _1473;
    float _1475;
    float _1477;
    if (_1462)
    {
        _1473 = _1454;
        _1475 = _1455;
        _1477 = _1456;
    }
    else
    {
        uint _1481 = _1387 + 6u;
        float _1497 = (dot(vec3(cbLight._m0[_1387 + 2u].xyz), vec3(_221, _222, _223)) * 0.5) + 0.5;
        float _1498 = _1497 * _1497;
        float _3329 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _1500 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
        _1473 = (((cbLight._m0[_1481].x * 0.3183098733425140380859375) * _1499) * _1500) + _1454;
        _1475 = (((cbLight._m0[_1481].y * 0.3183098733425140380859375) * _1499) * _1500) + _1455;
        _1477 = (((cbLight._m0[_1481].z * 0.3183098733425140380859375) * _1499) * _1500) + _1456;
    }
    bool _1480 = _1460.y == 0u;
    float _1518;
    float _1520;
    float _1522;
    if (_1480)
    {
        _1518 = _1473;
        _1520 = _1475;
        _1522 = _1477;
    }
    else
    {
        uint _1623 = _1387 + 7u;
        float _1639 = (dot(vec3(cbLight._m0[_1387 + 3u].xyz), vec3(_221, _222, _223)) * 0.5) + 0.5;
        float _1640 = _1639 * _1639;
        float _3345 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _1642 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
        _1518 = (((cbLight._m0[_1623].x * 0.3183098733425140380859375) * _1641) * _1642) + _1473;
        _1520 = (((cbLight._m0[_1623].y * 0.3183098733425140380859375) * _1641) * _1642) + _1475;
        _1522 = (((cbLight._m0[_1623].z * 0.3183098733425140380859375) * _1641) * _1642) + _1477;
    }
    uint _1524 = _1387 + 8u;
    float _1530 = cbLight._m0[_1387].x + _301;
    float _1531 = cbLight._m0[_1387].y + _302;
    float _1532 = cbLight._m0[_1387].z + _303;
    float _1536 = inversesqrt(dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532)));
    float _1540 = dot(vec3(_221, _222, _223), vec3(cbLight._m0[_1387].xyz));
    float _3361 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _1543 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _1544 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _1545 = dot(vec3(cbLight._m0[_1387].xyz), vec3(_1530 * _1536, _1531 * _1536, _1532 * _1536));
    float _3383 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
    float _1556 = (exp2(log2(1.0 - (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1562 = (0.5 / ((_1543 + 9.9999999392252902907785028219223e-09) + _1544)) * _1543;
    float _3394 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
    float _1564 = (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * 0.31831014156341552734375;
    uint _1575 = _1387 + 9u;
    float _1581 = cbLight._m0[_1426].x + _301;
    float _1582 = cbLight._m0[_1426].y + _302;
    float _1583 = cbLight._m0[_1426].z + _303;
    float _1587 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
    float _1591 = dot(vec3(_221, _222, _223), vec3(cbLight._m0[_1426].xyz));
    float _3405 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1594 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _1595 = dot(vec3(cbLight._m0[_1426].xyz), vec3(_1581 * _1587, _1582 * _1587, _1583 * _1587));
    float _3416 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1604 = (exp2(log2(1.0 - (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1608 = (0.5 / ((_1594 + 9.9999999392252902907785028219223e-09) + _1544)) * _1594;
    float _3427 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1610 = (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * 0.31831014156341552734375;
    float _1620 = (((_1604 * cbLight._m0[_1575].x) * _1610) * _1411) + (((_1556 * cbLight._m0[_1524].x) * _1564) * _1422);
    float _1621 = (((_1604 * cbLight._m0[_1575].y) * _1610) * _1411) + (((_1556 * cbLight._m0[_1524].y) * _1564) * _1422);
    float _1622 = (((_1604 * cbLight._m0[_1575].z) * _1610) * _1411) + (((_1556 * cbLight._m0[_1524].z) * _1564) * _1422);
    float _1684;
    float _1686;
    float _1688;
    if (_1462)
    {
        _1684 = _1620;
        _1686 = _1621;
        _1688 = _1622;
    }
    else
    {
        uint _1690 = _1387 + 10u;
        uint _1696 = _1387 + 2u;
        float _1702 = cbLight._m0[_1696].x + _301;
        float _1703 = cbLight._m0[_1696].y + _302;
        float _1704 = cbLight._m0[_1696].z + _303;
        float _1708 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
        float _1712 = dot(vec3(_221, _222, _223), vec3(cbLight._m0[_1696].xyz));
        float _3438 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1715 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _1716 = dot(vec3(cbLight._m0[_1696].xyz), vec3(_1702 * _1708, _1703 * _1708, _1704 * _1708));
        float _3449 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = (exp2(log2(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1729 = (0.5 / ((_1715 + 9.9999999392252902907785028219223e-09) + _1544)) * _1715;
        float _3460 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1731 = (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * 0.31831014156341552734375;
        float _1732 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
        _1684 = (((_1725 * cbLight._m0[_1690].x) * _1731) * _1732) + _1620;
        _1686 = (((_1725 * cbLight._m0[_1690].y) * _1731) * _1732) + _1621;
        _1688 = (((_1725 * cbLight._m0[_1690].z) * _1731) * _1732) + _1622;
    }
    float _1767;
    float _1769;
    float _1771;
    if (_1480)
    {
        _1767 = _1684;
        _1769 = _1686;
        _1771 = _1688;
    }
    else
    {
        uint _1778 = _1387 + 11u;
        uint _1784 = _1387 + 3u;
        float _1790 = cbLight._m0[_1784].x + _301;
        float _1791 = cbLight._m0[_1784].y + _302;
        float _1792 = cbLight._m0[_1784].z + _303;
        float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
        float _1800 = dot(vec3(_221, _222, _223), vec3(cbLight._m0[_1784].xyz));
        float _3476 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1803 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _1804 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1790 * _1796, _1791 * _1796, _1792 * _1796));
        float _3487 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = (exp2(log2(1.0 - (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1817 = (0.5 / ((_1803 + 9.9999999392252902907785028219223e-09) + _1544)) * _1803;
        float _3498 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1819 = (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * 0.31831014156341552734375;
        float _1820 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
        _1767 = (((_1813 * cbLight._m0[_1778].x) * _1819) * _1820) + _1684;
        _1769 = (((_1813 * cbLight._m0[_1778].y) * _1819) * _1820) + _1686;
        _1771 = (((_1813 * cbLight._m0[_1778].z) * _1819) * _1820) + _1688;
    }
    float _1955;
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    float _1965;
    if (_1385.y == 0u)
    {
        float _1895 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1896 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1895;
        float _1897 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1895;
        float _1898 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1895;
        uvec4 _1910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1911 = _1910.x;
        uint _1922 = uint((float(_1910.y) * floor(float(uint(cbSceneParam._m0[85u].y * _310) / _1911))) + floor(float(uint(cbSceneParam._m0[85u].x * _309) / _1911)));
        float _1932 = (log2(_1898 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1933 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        uint _1936 = uint(isnan(14.0) ? _1933 : (isnan(_1933) ? 14.0 : min(_1933, 14.0)));
        uvec4 _1941 = texelFetch(g_lightClusterGridBuffer, int(((_1936 << 2u) + (_1922 << 6u)) >> 2u));
        uint _1942 = _1941.x;
        uint _1943 = _1910.z;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        float _2088;
        if (((((1u << ((_1943 >> 4u) & 15u)) + 4294967295u) & _1942) == 0u) || ((_1943 & 240u) == 0u))
        {
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
            _2088 = 0.0;
        }
        else
        {
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2089;
            float _2230 = 0.0;
            float _2231 = 0.0;
            float _2232 = 0.0;
            float _2233 = 0.0;
            float _2234 = 0.0;
            float _2235 = 0.0;
            uint _2236 = 0u;
            uint _2245;
            bool _2246;
            for (;;)
            {
                _2245 = texelFetch(g_lightClassification, int((((_1936 << 5u) + (_1922 << 9u)) + (_2236 << 2u)) >> 2u)).x;
                _2246 = _2245 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2246)
                {
                    frontier_phi_61_pred = _2230;
                    frontier_phi_61_pred_1 = _2235;
                    frontier_phi_61_pred_2 = _2234;
                    frontier_phi_61_pred_3 = _2233;
                    frontier_phi_61_pred_4 = _2232;
                    frontier_phi_61_pred_5 = _2231;
                }
                else
                {
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    uint _2360;
                    _2354 = _2230;
                    _2355 = _2231;
                    _2356 = _2232;
                    _2357 = _2233;
                    _2358 = _2234;
                    _2359 = _2235;
                    _2360 = _2245;
                    float _2286;
                    float _2287;
                    float _2288;
                    float _2289;
                    float _2290;
                    float _2291;
                    for (;;)
                    {
                        uint _2364 = uint(findLSB(_2360)) + (_2236 << 5u);
                        uint _2361 = (_2360 + 4294967295u) & _2360;
                        uint _2366 = _2364 * 48u;
                        vec4 _2380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2366)).x, texelFetch(g_PointLightRenderingBuffer, int(_2366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2366 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2366 + 3u)).x));
                        uint _2386 = (_2364 * 48u) + 4u;
                        vec4 _2399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2386)).x, texelFetch(g_PointLightRenderingBuffer, int(_2386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2386 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2386 + 3u)).x));
                        uint _2405 = (_2364 * 48u) + 8u;
                        vec3 _2416 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2405)).x, texelFetch(g_PointLightRenderingBuffer, int(_2405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2405 + 2u)).x));
                        float _2420 = _2380.x - _1896;
                        float _2421 = _2380.y - _1897;
                        float _2422 = _2380.z - _1898;
                        float _2423 = dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422));
                        float _2426 = inversesqrt(_2423);
                        float _2435 = 1.0 - (_2423 * _2380.w);
                        float _3524 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
                        float _2436 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
                        float _2437 = sqrt(_2423) * _2399.w;
                        float _2440 = 1.39999997615814208984375 / (_2437 + 1.39999997615814208984375);
                        float _2441 = _2440 * _2440;
                        float _2444 = ((1.0 - _2441) * dot(vec3(_331, _334, _337), vec3(_2426 * _2420, _2426 * _2421, _2426 * _2422))) + _2441;
                        float _2447 = _2437 * _2437;
                        float _2451 = ((isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0))) * _2436) / ((_2447 * 0.699999988079071044921875) + 1.0);
                        float _2455 = (-0.0) - _1896;
                        float _2456 = (-0.0) - _1897;
                        float _2457 = (-0.0) - _1898;
                        float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
                        float _2465 = dot(vec3(_331, _334, _337), vec3(_2461 * _2455, _2461 * _2456, _2461 * _2457));
                        float _3540 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
                        float _3551 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2469 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
                        float _2473 = (0.5 / (((isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) + 9.9999999392252902907785028219223e-09) + _2469)) * _2469;
                        float _3562 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
                        float _2482 = (((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 3.1415927410125732421875) / ((_2447 * 2.1991131305694580078125) + 3.141590118408203125)) * _2436;
                        _2289 = (_2451 * _2399.x) + _2357;
                        _2290 = (_2451 * _2399.y) + _2358;
                        _2291 = (_2451 * _2399.z) + _2359;
                        _2286 = (_2482 * _2416.x) + _2354;
                        _2287 = (_2482 * _2416.y) + _2355;
                        _2288 = (_2482 * _2416.z) + _2356;
                        if (_2361 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2354 = _2286;
                            _2355 = _2287;
                            _2356 = _2288;
                            _2357 = _2289;
                            _2358 = _2290;
                            _2359 = _2291;
                            _2360 = _2361;
                        }
                    }
                    frontier_phi_61_pred = _2286;
                    frontier_phi_61_pred_1 = _2291;
                    frontier_phi_61_pred_2 = _2290;
                    frontier_phi_61_pred_3 = _2289;
                    frontier_phi_61_pred_4 = _2288;
                    frontier_phi_61_pred_5 = _2287;
                }
                _2079 = frontier_phi_61_pred;
                _2089 = frontier_phi_61_pred_1;
                _2087 = frontier_phi_61_pred_2;
                _2085 = frontier_phi_61_pred_3;
                _2083 = frontier_phi_61_pred_4;
                _2081 = frontier_phi_61_pred_5;
                uint _2237 = _2236 + 1u;
                if (_2237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2230 = _2079;
                    _2231 = _2081;
                    _2232 = _2083;
                    _2233 = _2085;
                    _2234 = _2087;
                    _2235 = _2089;
                    _2236 = _2237;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
            _2088 = _2089;
        }
        uvec4 _2092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2093 = _2092.z;
        uint _2095 = (_2093 >> 8u) & 15u;
        float _2201;
        float _2203;
        float _2205;
        float _2207;
        float _2209;
        float _2211;
        if (((4294967295u << _2095) & _1942) == 0u)
        {
            _2201 = _2078;
            _2203 = _2080;
            _2205 = _2082;
            _2207 = _2084;
            _2209 = _2086;
            _2211 = _2088;
        }
        else
        {
            float _2226 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2095 < ((_2093 >> 12u) & 15u))
            {
                float _2202;
                float _2204;
                float _2206;
                float _2208;
                float _2210;
                float _2212;
                float _2337 = _2078;
                float _2338 = _2080;
                float _2339 = _2082;
                float _2340 = _2084;
                float _2341 = _2086;
                float _2342 = _2088;
                uint _2343 = _2095;
                uint _2352;
                bool _2353;
                for (;;)
                {
                    _2352 = texelFetch(g_lightClassification, int((((_1936 << 5u) + (_1922 << 9u)) + (_2343 << 2u)) >> 2u)).x;
                    _2353 = _2352 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2353)
                    {
                        frontier_phi_67_pred = _2340;
                        frontier_phi_67_pred_1 = _2341;
                        frontier_phi_67_pred_2 = _2342;
                        frontier_phi_67_pred_3 = _2339;
                        frontier_phi_67_pred_4 = _2338;
                        frontier_phi_67_pred_5 = _2337;
                    }
                    else
                    {
                        float _2487;
                        float _2488;
                        float _2489;
                        float _2490;
                        float _2491;
                        float _2492;
                        float _2739;
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2500 = _2337;
                        float _2501 = _2338;
                        float _2502 = _2339;
                        float _2503 = _2340;
                        float _2504 = _2341;
                        float _2505 = _2342;
                        uint _2506 = _2352;
                        uint _2507;
                        vec4 _2532;
                        float _2533;
                        vec4 _2548;
                        vec3 _2560;
                        vec4 _2576;
                        vec4 _2592;
                        float _2639;
                        bool _2640;
                        for (;;)
                        {
                            uint _2517 = ((_2343 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2506));
                            _2507 = (_2506 + 4294967295u) & _2506;
                            uint _2519 = _2517 * 40u;
                            _2532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2519 + 3u)).x));
                            _2533 = _2532.w;
                            uint _2535 = (_2517 * 40u) + 4u;
                            _2548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 3u)).x));
                            uint _2550 = (_2517 * 40u) + 8u;
                            _2560 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2550 + 2u)).x));
                            uint _2563 = (_2517 * 40u) + 16u;
                            _2576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 3u)).x));
                            uint _2579 = (_2517 * 40u) + 20u;
                            _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            uint _2595 = (_2517 * 40u) + 24u;
                            vec4 _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2614 = (_2517 * 40u) + 28u;
                            vec4 _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            _2639 = fma(_1898, _2627.z, fma(_1897, _2627.y, _2627.x * _1896)) + _2627.w;
                            _2640 = !((fma(_1898, _2608.z, fma(_1897, _2608.y, _2608.x * _1896)) + _2608.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2640)
                            {
                                float _2667 = _2532.x - _1896;
                                float _2668 = _2532.y - _1897;
                                float _2669 = _2532.z - _1898;
                                float _2670 = dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669));
                                float _2673 = inversesqrt(_2670);
                                float _2674 = _2673 * _2667;
                                float _2675 = _2673 * _2668;
                                float _2676 = _2673 * _2669;
                                float _2680 = 1.0 - (_2670 / (_2533 * _2533));
                                float _3573 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                                float _2681 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
                                float _2685 = sqrt(_2670) * _2548.w;
                                float _2687 = 1.39999997615814208984375 / (_2685 + 1.39999997615814208984375);
                                float _2688 = _2687 * _2687;
                                float _2689 = 1.0 - _2688;
                                float _2691 = (_2689 * dot(vec3(_2674, _2675, _2676), vec3(_331, _334, _337))) + _2688;
                                float _2694 = _2685 * _2685;
                                float _2698 = (fma(_1898, _2576.z, fma(_1897, _2576.y, _2576.x * _1896)) + _2576.w) / _2639;
                                float _2699 = (fma(_1898, _2592.z, fma(_1897, _2592.y, _2592.x * _1896)) + _2592.w) / _2639;
                                float _2703 = 1.0 - dot(vec2(_2698, _2699), vec2(_2698, _2699));
                                float _3589 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                                float _2704 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
                                float _2705 = _2704 * (((isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0))) * _2681) / ((_2694 * 0.699999988079071044921875) + 1.0));
                                float _2715 = dot(vec3(_331, _334, _337), vec3((-0.0) - (_1896 * _2226), (-0.0) - (_1897 * _2226), (-0.0) - (_1898 * _2226)));
                                float _3600 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                                float _2723 = (_2689 * dot(vec3(_331, _334, _337), vec3(_2674, _2675, _2676))) + _2688;
                                float _3611 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                                float _2724 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                                float _2728 = (0.5 / (((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) + 9.9999999392252902907785028219223e-09) + _2724)) * _2724;
                                float _3622 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                                float _2735 = (_2704 * _2681) * (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 3.1415927410125732421875) / ((_2694 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2735 * _2560.x;
                                frontier_phi_73_pred_1 = _2735 * _2560.y;
                                frontier_phi_73_pred_2 = _2705 * _2548.z;
                                frontier_phi_73_pred_3 = _2705 * _2548.y;
                                frontier_phi_73_pred_4 = _2705 * _2548.x;
                                frontier_phi_73_pred_5 = _2735 * _2560.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2739 = frontier_phi_73_pred;
                            _2740 = frontier_phi_73_pred_1;
                            _2744 = frontier_phi_73_pred_2;
                            _2743 = frontier_phi_73_pred_3;
                            _2742 = frontier_phi_73_pred_4;
                            _2741 = frontier_phi_73_pred_5;
                            _2490 = _2742 + _2503;
                            _2491 = _2743 + _2504;
                            _2492 = _2744 + _2505;
                            _2487 = _2739 + _2500;
                            _2488 = _2740 + _2501;
                            _2489 = _2741 + _2502;
                            if (_2507 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2500 = _2487;
                                _2501 = _2488;
                                _2502 = _2489;
                                _2503 = _2490;
                                _2504 = _2491;
                                _2505 = _2492;
                                _2506 = _2507;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2490;
                        frontier_phi_67_pred_1 = _2491;
                        frontier_phi_67_pred_2 = _2492;
                        frontier_phi_67_pred_3 = _2489;
                        frontier_phi_67_pred_4 = _2488;
                        frontier_phi_67_pred_5 = _2487;
                    }
                    _2208 = frontier_phi_67_pred;
                    _2210 = frontier_phi_67_pred_1;
                    _2212 = frontier_phi_67_pred_2;
                    _2206 = frontier_phi_67_pred_3;
                    _2204 = frontier_phi_67_pred_4;
                    _2202 = frontier_phi_67_pred_5;
                    uint _2344 = _2343 + 1u;
                    if (_2344 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2337 = _2202;
                        _2338 = _2204;
                        _2339 = _2206;
                        _2340 = _2208;
                        _2341 = _2210;
                        _2342 = _2212;
                        _2343 = _2344;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2210;
                frontier_phi_55_56_ladder_1 = _2212;
                frontier_phi_55_56_ladder_2 = _2208;
                frontier_phi_55_56_ladder_3 = _2206;
                frontier_phi_55_56_ladder_4 = _2204;
                frontier_phi_55_56_ladder_5 = _2202;
            }
            else
            {
                frontier_phi_55_56_ladder = _2086;
                frontier_phi_55_56_ladder_1 = _2088;
                frontier_phi_55_56_ladder_2 = _2084;
                frontier_phi_55_56_ladder_3 = _2082;
                frontier_phi_55_56_ladder_4 = _2080;
                frontier_phi_55_56_ladder_5 = _2078;
            }
            _2201 = frontier_phi_55_56_ladder_5;
            _2203 = frontier_phi_55_56_ladder_4;
            _2205 = frontier_phi_55_56_ladder_3;
            _2207 = frontier_phi_55_56_ladder_2;
            _2209 = frontier_phi_55_56_ladder;
            _2211 = frontier_phi_55_56_ladder_1;
        }
        float _2216 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
        _1955 = (_2216 * _2207) + _1518;
        _1957 = (_2216 * _2209) + _1520;
        _1959 = (_2216 * _2211) + _1522;
        _1961 = ((_2201 * 0.039999999105930328369140625) * _2216) + _1767;
        _1963 = ((_2203 * 0.039999999105930328369140625) * _2216) + _1769;
        _1965 = ((_2205 * 0.039999999105930328369140625) * _2216) + _1771;
    }
    else
    {
        _1955 = _1518;
        _1957 = _1520;
        _1959 = _1522;
        _1961 = _1767;
        _1963 = _1769;
        _1965 = _1771;
    }
    uint _1971 = _352 + uint(cbMatDynParam._m0[0u].w);
    float _1979 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[9u].x) * _212.x) * cbInstanceData._m0[_1971].x;
    float _1982 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[9u].y) * _212.y) * cbInstanceData._m0[_1971].y;
    float _1985 = ((cbMtdParam._m0[11u].x * cbMtdParam._m0[9u].z) * _212.z) * cbInstanceData._m0[_1971].z;
    float _3638 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3649 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _3660 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _2002 = (((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1955 + ((isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0))) * _376))) + ((_1961 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + _1979;
    float _2004 = (_1982 + ((_1963 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1957 + ((isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0))) * _376)));
    float _2006 = (_1985 + ((_1965 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1155)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1959 + ((isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))) * _376)));
    float _3686 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2019 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    uint _2020 = _350 + 6u;
    float _2028 = _309 / cbSceneParam._m0[86u].x;
    float _2029 = _310 / cbSceneParam._m0[86u].y;
    vec4 _2043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2028, _2029, (log2((isnan(cbSceneParam._m0[77u].w) ? _243 : (isnan(_243) ? cbSceneParam._m0[77u].w : min(_243, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2045 = _2043.x;
    float _2046 = _2043.y;
    float _2047 = _2043.z;
    float _2048 = _2043.w;
    float _2141;
    float _2143;
    float _2145;
    float _2147;
    if (_243 > cbSceneParam._m0[78u].w)
    {
        float _2103 = isnan(_243) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _243 : min(cbSceneParam._m0[80u].w, _243));
        float _2104 = _2103 / _243;
        float _2115 = _2104 * _294;
        float _2116 = _295 * _2104;
        float _2117 = (-0.0) - _2116;
        float _2119 = _2104 * _296;
        float _2121 = (cbSceneParam._m0[77u].w * _2117) / _2103;
        float _2122 = _2121 + cbSceneParam._m0[79u].w;
        float _2123 = cbSceneParam._m0[79u].w - _2116;
        float _2129 = sqrt(((_2115 * _2115) + (_2116 * _2116)) + (_2119 * _2119));
        float _2132 = (1.0 - (cbSceneParam._m0[77u].w / _2103)) * _2129;
        float _2137 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2139 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2299;
        if (abs((_2117 - _2121) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2299 = ((((_2122 > 0.0) ? exp2(_2137 * _2122) : (2.0 - exp2(_2139 * _2122))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2132;
        }
        else
        {
            float _2259 = 1.0 / cbSceneParam._m0[80u].x;
            float _2260 = isnan(_2123) ? _2122 : (isnan(_2122) ? _2123 : max(_2122, _2123));
            float _2261 = isnan(_2123) ? _2122 : (isnan(_2122) ? _2123 : min(_2122, _2123));
            float _2270 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : min(_2260, 0.0));
            float _2271 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : min(_2261, 0.0));
            _2299 = ((abs(_2129 / _2117) * cbSceneParam._m0[80u].y) * ((((_2270 - _2271) * 2.0) - ((exp2(_2137 * (isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0)))) - exp2(_2137 * (isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))))) * _2259)) - ((exp2(_2139 * _2270) - exp2(_2139 * _2271)) * _2259))) + (_2132 * cbSceneParam._m0[80u].z);
        }
        vec4 _2301 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2028, _2029, 1.0), 0.0);
        float _2310 = exp2((_2299 * (-1.44269502162933349609375)) * (1.0 - _2301.w));
        float _2311 = log2(_2310);
        float _2327 = log2(_2048);
        _2141 = (exp2(_2327 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2311 * cbSceneParam._m0[78u].x)) * _2301.x) / cbSceneParam._m0[78u].x)) + _2045;
        _2143 = (exp2(_2327 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2311 * cbSceneParam._m0[78u].y)) * _2301.y) / cbSceneParam._m0[78u].y)) + _2046;
        _2145 = (exp2(_2327 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2311 * cbSceneParam._m0[78u].z)) * _2301.z) / cbSceneParam._m0[78u].z)) + _2047;
        _2147 = _2310 * _2048;
    }
    else
    {
        _2141 = _2045;
        _2143 = _2046;
        _2145 = _2047;
        _2147 = _2048;
    }
    float _2159 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2160 = _2159 == 3.0;
    float _2162 = log2(_2147);
    float _2166 = exp2(_2162 * cbSceneParam._m0[78u].x);
    float _2167 = exp2(_2162 * cbSceneParam._m0[78u].y);
    float _2168 = exp2(_2162 * cbSceneParam._m0[78u].z);
    float _2169 = _2166 * (isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)));
    float _2170 = _2167 * (isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)));
    float _2171 = _2168 * (isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)));
    float _2180 = (_2159 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2180 * (_2160 ? _2169 : (_2169 + (cbSceneParam._m0[72u].w * _2141)));
    SV_Target.y = _2180 * (_2160 ? _2170 : (_2170 + (cbSceneParam._m0[72u].w * _2143)));
    SV_Target.z = _2180 * (_2160 ? _2171 : (_2171 + (cbSceneParam._m0[72u].w * _2145)));
    SV_Target.w = cbInstanceData._m0[_2020].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1979) * _2019) * _2166) * _2180;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1982) * _2019) * _2167) * _2180;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1985) * _2019) * _2168) * _2180;
    SV_Target_1.w = cbInstanceData._m0[_2020].w;
}


