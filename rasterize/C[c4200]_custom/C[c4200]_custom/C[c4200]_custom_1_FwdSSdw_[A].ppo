#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1449;
float _3875;
float _3876;
float _3877;
float _3878;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _283 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _296 = exp2(log2(_283.w * cbMtdParam._m0[26u].x) * cbMtdParam._m0[18u].w);
    float _297 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _298 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    vec4 _314 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _318 = _314.z;
    float _323 = exp2(log2(_318 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    vec4 _337 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _362 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _373 = cbMtdParam._m0[9u].x * _362.x;
    float _374 = cbMtdParam._m0[9u].y * _362.y;
    float _375 = cbMtdParam._m0[9u].z * _362.z;
    float _382 = (((cbMtdParam._m0[10u].x * _337.x) - _373) * _325) + _373;
    float _383 = (((cbMtdParam._m0[10u].y * _337.y) - _374) * _325) + _374;
    float _384 = (((cbMtdParam._m0[10u].z * _337.z) - _375) * _325) + _375;
    vec4 _397 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _399 = _397.x;
    float _403 = exp2(log2(_399) * cbMtdParam._m0[19u].z);
    vec4 _416 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _436 = (((cbMtdParam._m0[12u].x * _416.x) - _382) * _403) + _382;
    float _437 = (((cbMtdParam._m0[12u].y * _416.y) - _383) * _403) + _383;
    float _438 = (((cbMtdParam._m0[12u].z * _416.z) - _384) * _403) + _384;
    vec4 _451 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _476 = (_283.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _451.x) - _436) * _298) + _436);
    float _478 = (_283.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _451.y) - _437) * _298) + _437);
    float _480 = (_283.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _451.z) - _438) * _298) + _438);
    float _482 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _491 = (_482 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _482))) * (cbMtdParam._m0[22u].y + 1.0);
    float _3907 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _499 = ((cbMtdParam._m0[14u].x - _476) * _492) + _476;
    float _500 = ((cbMtdParam._m0[14u].y - _478) * _492) + _478;
    float _501 = ((cbMtdParam._m0[14u].z - _480) * _492) + _480;
    float _503 = _399 - (_482 * _399);
    vec4 _519 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _537 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _543 = cbMtdParam._m0[18u].x + _537.z;
    float _546 = (((cbMtdParam._m0[18u].z + _519.z) - _543) * _325) + _543;
    vec4 _558 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _570 = (((_558.z - _546) + cbMtdParam._m0[24u].z) * _403) + _546;
    float _576 = ((((_318 * 2.0) * _570) - _570) * cbMtdParam._m0[20u].z) + _570;
    vec4 _589 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _598 = (((cbMtdParam._m0[19u].y + _589.z) - _576) * _298) + _576;
    vec4 _614 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _629 = ((cbMtdParam._m0[21u].w * _482) * ((_614.z * cbMtdParam._m0[21u].z) - _598)) + _598;
    float _640 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _662 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_640 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_640 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _666 = cbPerFrame._m0[22u].x * 2.0;
    float _667 = _666 * cbMtdParam._m0[25u].y;
    float _670 = (_662.x * 0.5) + (-0.25);
    float _673 = (_662.y * 0.5) + (-0.25);
    float _674 = _673 * cbMtdParam._m0[25u].x;
    float _676 = (-0.0) - (cbMtdParam._m0[25u].x * _670);
    float _678 = fract(_667);
    float _680 = fract(_667 + 0.5);
    float _691 = abs((_678 * 2.0) + (-1.0));
    vec4 _708 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_678 * _676) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_674 * _678) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _710 = _708.x;
    float _711 = _708.y;
    float _712 = _708.z;
    vec4 _713 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_680 * _676) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_674 * _680) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _724 = ((_713.x - _710) * _691) + _710;
    float _731 = exp2(log2(_724 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _732 = isnan(cbMtdParam._m0[24u].x) ? _731 : (isnan(_731) ? cbMtdParam._m0[24u].x : max(_731, cbMtdParam._m0[24u].x));
    float _753 = _666 * cbMtdParam._m0[25u].w;
    float _754 = _673 * cbMtdParam._m0[25u].z;
    float _756 = (-0.0) - (cbMtdParam._m0[25u].z * _670);
    float _757 = fract(_753);
    float _759 = fract(_753 + 0.5);
    float _770 = abs((_757 * 2.0) + (-1.0));
    vec4 _786 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_757 * _756) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_754 * _757) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _788 = _786.x;
    float _789 = _786.y;
    float _790 = _786.z;
    vec4 _791 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_759 * _756) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_754 * _759) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _820 = ((_519.x - _539) * _325) + _539;
    float _821 = ((_519.y - _540) * _325) + _540;
    float _826 = ((_558.x - _820) * _403) + _820;
    float _827 = ((_558.y - _821) * _403) + _821;
    float _836 = ((((_589.x - _826) * _298) + _826) * 2.0) + (-1.0);
    float _837 = ((((_589.y - _827) * _298) + _827) * 2.0) + (-1.0);
    float _838 = dot(vec2(_836, _837), vec2(_836, _837));
    float _3928 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _843 = sqrt(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))));
    float _853 = ((cbMtdParam._m0[20u].w * ((_314.x * 2.0) + (-1.0))) + _836) + ((((_614.x * 2.0) + (-1.0)) * _482) * cbMtdParam._m0[21u].y);
    float _854 = ((cbMtdParam._m0[20u].w * ((_314.y * 2.0) + (-1.0))) + _837) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_614.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _857 = fma(_843, _230 * NORMAL.x, fma(_854, _237 * TANGENT.x, (_223 * _215) * _853));
    float _860 = fma(_843, _230 * NORMAL.y, fma(_854, _237 * TANGENT.y, (_223 * _216) * _853));
    float _863 = fma(_843, _230 * NORMAL.z, fma(_854, _237 * TANGENT.z, (_223 * _217) * _853));
    float _867 = inversesqrt(dot(vec3(_857, _860, _863), vec3(_857, _860, _863)));
    float _868 = _867 * _857;
    float _869 = _867 * _860;
    float _870 = _867 * _863;
    float _3939 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _871 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3961 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3972 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3983 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _875 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _891 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _942 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _932);
    float _943 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _932);
    float _944 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _932);
    float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
    float _949 = _942 * _948;
    float _950 = _943 * _948;
    float _951 = _944 * _948;
    vec4 _956 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _958 = _956.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1130 = sqrt(((_942 * _942) + (_943 * _943)) + (_944 * _944));
        float _1136 = (cbMatDynParam._m0[5u].x * _1130) + cbMatDynParam._m0[5u].y;
        float _3994 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1141 = (cbMatDynParam._m0[5u].z * _1130) + cbMatDynParam._m0[5u].w;
        float _4005 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) - _1137)) + _1137) < ((_958 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _969 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _970 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _988 = fma(_870, cbSceneParam._m0[5u].z, fma(_869, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _868));
    float _991 = fma(_870, cbSceneParam._m0[6u].z, fma(_869, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _868));
    float _994 = fma(_870, cbSceneParam._m0[7u].z, fma(_869, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _868));
    uint _1007 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1008 = _1007 + 9u;
    uint _1009 = _1008 + uint(cbMatDynParam._m0[0u].w);
    float _1015 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_1009].x;
    float _1016 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_1009].y;
    float _1017 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_1009].z;
    float _4016 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1021 = 1.0 - _875;
    float _1022 = _1018 * _1021;
    float _1023 = _1019 * _1021;
    float _1024 = _1020 * _1021;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _875;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _875;
    float _1031 = (_1020 + (-0.039999999105930328369140625)) * _875;
    float _1032 = _1029 + 0.039999999105930328369140625;
    float _1034 = _1030 + 0.039999999105930328369140625;
    float _1035 = _1031 + 0.039999999105930328369140625;
    vec4 _1044 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _969, cbSceneParam._m0[86u].y * _970));
    float _1047 = _1044.x * TEXCOORD_3.w;
    float _1048 = dot(vec3(_868, _869, _870), vec3(_949, _950, _951));
    float _1051 = _1048 * 2.0;
    float _1055 = (_1051 * _868) - _949;
    float _1056 = (_1051 * _869) - _950;
    float _1057 = (_1051 * _870) - _951;
    float _1061 = abs(dot(vec3(_949, _950, _951), vec3(_868, _869, _870)));
    float _4049 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1063 = sqrt(_871);
    float _1076 = exp2((_1063 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1063 * 3.0));
    float _1082 = (1.0 - _1076) * ((_1063 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1083 = _1076 * _1063;
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1115 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1448;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1174 = fma(_1119, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1111));
        float _1178 = fma(_1119, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1111));
        float _1182 = fma(_1119, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1111));
        float _1206 = _1111 + _868;
        float _1207 = _1115 + _869;
        float _1208 = _1119 + _870;
        float _1218 = fma(_1208, cbModelParam._m0[26u].z, fma(_1207, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1206)) - _1174;
        float _1219 = fma(_1208, cbModelParam._m0[27u].z, fma(_1207, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1206)) - _1178;
        float _1220 = fma(_1208, cbModelParam._m0[28u].z, fma(_1207, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1206)) - _1182;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1174 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1178 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[34u].z) + ((((((_1182 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1276 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1242.x + (-0.5));
        float _1278 = _1276 * (_1242.y + (-0.5));
        float _1279 = _1276 * (_1242.z + (-0.5));
        float _1286 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1249.x + (-0.5));
        float _1288 = _1286 * (_1249.y + (-0.5));
        float _1289 = _1286 * (_1249.z + (-0.5));
        float _1296 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1256.x + (-0.5));
        float _1298 = _1296 * (_1256.y + (-0.5));
        float _1299 = _1296 * (_1256.z + (-0.5));
        float _1306 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1263.x + (-0.5));
        float _1308 = _1306 * (_1263.y + (-0.5));
        float _1309 = _1306 * (_1263.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1330 = (dot(vec3(_868, _869, _870), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1340 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4097 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1342 + 1.0))) + _1347) * _1310;
        float _1357 = _1278 * 0.5;
        float _1358 = _1288 * 0.5;
        float _1359 = _1298 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_868, _869, _870), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4130 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1384 + 1.0))) + _1389) * _1311;
        float _1399 = _1279 * 0.5;
        float _1400 = _1289 * 0.5;
        float _1401 = _1299 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_868, _869, _870), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4163 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1426 + 1.0))) + _1431) * _1312;
        _1448 = _1279;
        _1450 = _1278;
        _1451 = _1277;
        _1452 = _1289;
        _1453 = _1288;
        _1454 = _1287;
        _1455 = _1299;
        _1456 = _1298;
        _1457 = _1297;
        _1458 = _1312;
        _1459 = _1311;
        _1460 = _1310;
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1449;
        _1450 = _1449;
        _1451 = _1449;
        _1452 = _1449;
        _1453 = _1449;
        _1454 = _1449;
        _1455 = _1449;
        _1456 = _1449;
        _1457 = _1449;
        _1458 = _1449;
        _1459 = _1449;
        _1460 = _1449;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1492 = fma(_1119, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111));
        float _1496 = fma(_1119, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111));
        float _1500 = fma(_1119, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111));
        float _1523 = _1111 + _868;
        float _1524 = _1115 + _869;
        float _1525 = _1119 + _870;
        float _1535 = fma(_1525, cbModelParam._m0[30u].z, fma(_1524, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1523)) - _1492;
        float _1536 = fma(_1525, cbModelParam._m0[31u].z, fma(_1524, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1523)) - _1496;
        float _1537 = fma(_1525, cbModelParam._m0[32u].z, fma(_1524, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1523)) - _1500;
        float _1541 = inversesqrt(dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537)));
        float _1554 = ((_1541 * _1535) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1492 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1541 * _1536) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1496 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1541 * _1537) / cbModelParam._m0[35u].z) + ((((((_1500 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        float _1591 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1558.x + (-0.5));
        float _1593 = _1591 * (_1558.y + (-0.5));
        float _1594 = _1591 * (_1558.z + (-0.5));
        float _1601 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1565.x + (-0.5));
        float _1603 = _1601 * (_1565.y + (-0.5));
        float _1604 = _1601 * (_1565.z + (-0.5));
        float _1611 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1572.x + (-0.5));
        float _1613 = _1611 * (_1572.y + (-0.5));
        float _1614 = _1611 * (_1572.z + (-0.5));
        float _1621 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1579.x + (-0.5));
        float _1623 = _1621 * (_1579.y + (-0.5));
        float _1624 = _1621 * (_1579.z + (-0.5));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = _1592 * 0.5;
        float _1629 = _1602 * 0.5;
        float _1630 = _1612 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_868, _869, _870), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4226 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1655 + 1.0))) + _1660) * _1625;
        float _1670 = _1593 * 0.5;
        float _1671 = _1603 * 0.5;
        float _1672 = _1613 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_868, _869, _870), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4259 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1697 + 1.0))) + _1702) * _1626;
        float _1712 = _1594 * 0.5;
        float _1713 = _1604 * 0.5;
        float _1714 = _1614 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_868, _869, _870), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4292 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1739 + 1.0))) + _1744) * _1627;
        _1761 = _1594;
        _1762 = _1593;
        _1763 = _1592;
        _1764 = _1604;
        _1765 = _1603;
        _1766 = _1602;
        _1767 = _1614;
        _1768 = _1613;
        _1769 = _1612;
        _1770 = _1627;
        _1771 = _1626;
        _1772 = _1625;
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
    }
    else
    {
        _1761 = _1449;
        _1762 = _1449;
        _1763 = _1449;
        _1764 = _1449;
        _1765 = _1449;
        _1766 = _1449;
        _1767 = _1449;
        _1768 = _1449;
        _1769 = _1449;
        _1770 = _1449;
        _1771 = _1449;
        _1772 = _1449;
        _1773 = 0.0;
        _1774 = 0.0;
        _1775 = 0.0;
    }
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1461)) + _1461;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1462)) + _1462;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1463)) + _1463;
    float _1808 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1786, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1811 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1786, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1814 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1786, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1785));
    float _1829 = _1055 * 0.5;
    float _1830 = _1056 * 0.5;
    float _1831 = _1057 * 0.5;
    float _1832 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1835 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1838 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1872;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1845 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1448, _1452, _1455, _1458));
        float _1849 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1450, _1453, _1456, _1459));
        float _1853 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1860 = dot(vec4(cbModelParam._m0[39u]), vec4(_1829, _1830, _1831, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1883;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1874 = dot(vec4(cbModelParam._m0[40u]), vec4(_1829, _1830, _1831, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1874) ? 0.0 : (isnan(0.0) ? _1874 : max(0.0, _1874))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1887 = (_1883 * cbModelParam._m0[1u].x) + (_1872 * (1.0 - cbModelParam._m0[1u].x));
    float _1897 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _871);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1897 : min(cbModelParam._m0[25u].z, _1897));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1945 = fma(_1119, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1111)) + cbModelParam._m0[13u].w;
        float _1949 = fma(_1119, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1111)) + cbModelParam._m0[14u].w;
        float _1953 = fma(_1119, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1111)) + cbModelParam._m0[15u].w;
        float _1956 = fma(_1057, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055));
        float _1959 = fma(_1057, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055));
        float _1962 = fma(_1057, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055));
        float _1990;
        if (_1956 > 0.0)
        {
            _1990 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1990 = frontier_phi_17_15_ladder;
        }
        float _2214;
        if (_1959 > 0.0)
        {
            _2214 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2214 = frontier_phi_26_22_ladder;
        }
        float _2471;
        if (_1962 > 0.0)
        {
            _2471 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2471 = frontier_phi_38_33_ladder;
        }
        float _2473 = isnan(_2214) ? _1990 : (isnan(_1990) ? _2214 : min(_1990, _2214));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1956) + _1945;
        float _2479 = (_2474 * _1959) + _1949;
        float _2480 = (_2474 * _1962) + _1953;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2481;
        float _2485 = _2481 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 > _2485) || ((_2479 < _2483) || ((_2478 < _2483) || (_2478 > _2485))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2480, cbModelParam._m0[9u].z, fma(_2479, cbModelParam._m0[9u].y, _2478 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2480, cbModelParam._m0[10u].z, fma(_2479, cbModelParam._m0[10u].y, _2478 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2480, cbModelParam._m0[11u].z, fma(_2479, cbModelParam._m0[11u].y, _2478 * cbModelParam._m0[11u].x))), _1898);
            frontier_phi_16_38_ladder = _2608.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2608.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2608.x * cbModelParam._m0[1u].y;
        }
        _1978 = frontier_phi_16_38_ladder_2;
        _1980 = frontier_phi_16_38_ladder_1;
        _1982 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1055, _1056, _1057), _1898);
        _1978 = _1966.x * cbModelParam._m0[1u].y;
        _1980 = _1966.y * cbModelParam._m0[1u].y;
        _1982 = _1966.z * cbModelParam._m0[1u].y;
    }
    float _1986 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _871);
    float _1987 = isnan(_1986) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1986 : min(cbModelParam._m0[25u].w, _1986));
    float _2076;
    float _2078;
    float _2080;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2040 = fma(_1119, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1111)) + cbModelParam._m0[21u].w;
        float _2044 = fma(_1119, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1111)) + cbModelParam._m0[22u].w;
        float _2048 = fma(_1119, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1111)) + cbModelParam._m0[23u].w;
        float _2051 = fma(_1057, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055));
        float _2054 = fma(_1057, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055));
        float _2057 = fma(_1057, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055));
        float _2219;
        if (_2051 > 0.0)
        {
            _2219 = abs((1.0 - _2040) / _2051);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2040 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2219 = frontier_phi_28_24_ladder;
        }
        float _2498;
        if (_2054 > 0.0)
        {
            _2498 = abs((1.0 - _2044) / _2054);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2044 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2498 = frontier_phi_40_35_ladder;
        }
        float _2711;
        if (_2057 > 0.0)
        {
            _2711 = abs((1.0 - _2048) / _2057);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2048 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2711 = frontier_phi_49_46_ladder;
        }
        float _2713 = isnan(_2498) ? _2219 : (isnan(_2219) ? _2498 : min(_2219, _2498));
        float _2714 = isnan(_2711) ? _2713 : (isnan(_2713) ? _2711 : min(_2713, _2711));
        float _2718 = (_2714 * _2051) + _2040;
        float _2719 = (_2714 * _2054) + _2044;
        float _2720 = (_2714 * _2057) + _2048;
        float _2721 = _2714 * 9.9999997473787516355514526367188e-05;
        float _2722 = (-1.0) - _2721;
        float _2724 = _2721 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2720 > _2724) || ((_2720 < _2722) || ((_2719 > _2724) || ((_2719 < _2722) || ((_2718 < _2722) || (_2718 > _2724))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2720, cbModelParam._m0[17u].z, fma(_2719, cbModelParam._m0[17u].y, _2718 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2720, cbModelParam._m0[18u].z, fma(_2719, cbModelParam._m0[18u].y, _2718 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2720, cbModelParam._m0[19u].z, fma(_2719, cbModelParam._m0[19u].y, _2718 * cbModelParam._m0[19u].x))), _1987);
            frontier_phi_25_49_ladder = _2942.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2942.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2942.x * cbModelParam._m0[1u].z;
        }
        _2076 = frontier_phi_25_49_ladder_2;
        _2078 = frontier_phi_25_49_ladder_1;
        _2080 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1055, _1056, _1057), _1987);
        _2076 = _2060.x * cbModelParam._m0[1u].z;
        _2078 = _2060.y * cbModelParam._m0[1u].z;
        _2080 = _2060.z * cbModelParam._m0[1u].z;
    }
    float _2093 = (((_1082 * _1032) + _1083) * _1047) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2095 = (((_1082 * _1034) + _1083) * _1047) * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2097 = (((_1082 * _1035) + _1083) * _1047) * ((cbModelParam._m0[1u].w * (_2080 - _1982)) + _1982);
    float _2100 = fma(_2097, cbSceneParam._m0[89u].z, fma(_2095, cbSceneParam._m0[89u].y, _2093 * cbSceneParam._m0[89u].x));
    float _2103 = fma(_2097, cbSceneParam._m0[90u].z, fma(_2095, cbSceneParam._m0[90u].y, _2093 * cbSceneParam._m0[90u].x));
    float _2106 = fma(_2097, cbSceneParam._m0[91u].z, fma(_2095, cbSceneParam._m0[91u].y, _2093 * cbSceneParam._m0[91u].x));
    vec4 _2114 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_969, _970));
    float _2116 = _2114.w;
    float _2128 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2116);
    float _2129 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2116);
    float _2130 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2116);
    uvec4 _2134 = floatBitsToUint(cbInstanceData._m0[_1007 + 5u]);
    uint _2136 = _2134.x * 14u;
    uint _2137 = _2136 + 13u;
    float _2144 = _1047 + (-1.0);
    float _2149 = (cbLight._m0[_2137].x * _2144) + 1.0;
    float _2150 = (cbLight._m0[_2137].y * _2144) + 1.0;
    float _2151 = (cbLight._m0[_2137].z * _2144) + 1.0;
    float _2152 = (cbLight._m0[_2137].w * _2144) + 1.0;
    uint _2153 = _2136 + 5u;
    float _2159 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2163 = _2136 + 4u;
    float _2173 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2177 = _2136 | 1u;
    float _2188 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_868, _869, _870));
    float _2191 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_868, _869, _870));
    float _4428 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _4439 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2196 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * 0.3183098733425140380859375;
    float _2198 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * 0.3183098733425140380859375;
    float _2205 = ((cbLight._m0[_2153].x * _2159) * _2198) + (((cbLight._m0[_2163].x * _2128) * _2173) * _2196);
    float _2206 = ((_2159 * cbLight._m0[_2153].y) * _2198) + (((cbLight._m0[_2163].y * _2129) * _2173) * _2196);
    float _2207 = ((_2159 * cbLight._m0[_2153].z) * _2198) + (((cbLight._m0[_2163].z * _2130) * _2173) * _2196);
    uvec4 _2211 = floatBitsToUint(cbLight._m0[_2136 + 12u]);
    bool _2213 = _2211.x == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2213)
    {
        _2224 = _2205;
        _2226 = _2206;
        _2228 = _2207;
    }
    else
    {
        uint _2232 = _2136 + 6u;
        float _2248 = (dot(vec3(cbLight._m0[_2136 + 2u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4450 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2251 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2224 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2205;
        _2226 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2206;
        _2228 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2207;
    }
    bool _2231 = _2211.y == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2231)
    {
        _2269 = _2224;
        _2271 = _2226;
        _2273 = _2228;
    }
    else
    {
        uint _2442 = _2136 + 7u;
        float _2458 = (dot(vec3(cbLight._m0[_2136 + 3u].xyz), vec3(_868, _869, _870)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4466 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2461 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2269 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2224;
        _2271 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2226;
        _2273 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2228;
    }
    uint _2276 = _2136 + 8u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _871) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2136].x + _949;
    float _2292 = cbLight._m0[_2136].y + _950;
    float _2293 = cbLight._m0[_2136].z + _951;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2136].xyz));
    float _4482 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _4493 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _2305 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2306 = dot(vec3(_868, _869, _870), vec3(_2298, _2299, _2300));
    float _4504 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2298, _2299, _2300));
    float _4515 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2290 * _2290;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0);
    float _2327 = 0.959999978542327880859375 - _1029;
    float _2329 = 0.959999978542327880859375 - _1030;
    float _2330 = 0.959999978542327880859375 - _1031;
    float _2337 = 1.0 - _2290;
    float _2348 = (0.5 / (((_2305 * ((_2304 * _2337) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2337) + _2290) * _2304))) * _2304;
    float _4526 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    uint _2364 = _2136 + 9u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _871) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2177].x + _949;
    float _2378 = cbLight._m0[_2177].y + _950;
    float _2379 = cbLight._m0[_2177].z + _951;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2177].xyz));
    float _4537 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2391 = dot(vec3(_868, _869, _870), vec3(_2384, _2385, _2386));
    float _4548 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2395 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2384, _2385, _2386));
    float _4559 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2399 = _2376 * _2376;
    float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
    float _2417 = 1.0 - _2376;
    float _2427 = (0.5 / (((_2305 * ((_2390 * _2417) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2417) + _2376) * _2390))) * _2390;
    float _4570 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
    float _2439 = (((((_2410 * _2327) + _1032) * cbLight._m0[_2364].x) * _2429) * _2159) + ((((cbLight._m0[_2276].x * _2128) * ((_2326 * _2327) + _1032)) * _2350) * _2173);
    float _2440 = (((((_2410 * _2329) + _1034) * cbLight._m0[_2364].y) * _2429) * _2159) + ((((cbLight._m0[_2276].y * _2129) * ((_2326 * _2329) + _1034)) * _2350) * _2173);
    float _2441 = (((((_2410 * _2330) + _1035) * cbLight._m0[_2364].z) * _2429) * _2159) + ((((cbLight._m0[_2276].z * _2130) * ((_2326 * _2330) + _1035)) * _2350) * _2173);
    float _2503;
    float _2505;
    float _2507;
    if (_2213)
    {
        _2503 = _2439;
        _2505 = _2440;
        _2507 = _2441;
    }
    else
    {
        uint _2509 = _2136 + 2u;
        uint _2513 = _2136 + 10u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _871) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _949;
        float _2530 = cbLight._m0[_2509].y + _950;
        float _2531 = cbLight._m0[_2509].z + _951;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2509].xyz));
        float _4581 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2543 = dot(vec3(_868, _869, _870), vec3(_2536, _2537, _2538));
        float _4592 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4603 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2305 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2569) + _2528) * _2542))) * _2542;
        float _4614 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2503 = (((((_2562 * _2327) + _1032) * cbLight._m0[_2513].x) * _2581) * _2582) + _2439;
        _2505 = (((((_2562 * _2329) + _1034) * cbLight._m0[_2513].y) * _2581) * _2582) + _2440;
        _2507 = (((((_2562 * _2330) + _1035) * cbLight._m0[_2513].z) * _2581) * _2582) + _2441;
    }
    float _2617;
    float _2619;
    float _2621;
    if (_2231)
    {
        _2617 = _2503;
        _2619 = _2505;
        _2621 = _2507;
    }
    else
    {
        uint _2628 = _2136 + 3u;
        uint _2632 = _2136 + 11u;
        float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2628].w)) * _871) * 0.949999988079071044921875);
        float _2647 = _2646 * _2646;
        float _2648 = cbLight._m0[_2628].x + _949;
        float _2649 = cbLight._m0[_2628].y + _950;
        float _2650 = cbLight._m0[_2628].z + _951;
        float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
        float _2655 = _2654 * _2648;
        float _2656 = _2654 * _2649;
        float _2657 = _2654 * _2650;
        float _2658 = dot(vec3(_868, _869, _870), vec3(cbLight._m0[_2628].xyz));
        float _4630 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2662 = dot(vec3(_868, _869, _870), vec3(_2655, _2656, _2657));
        float _4641 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2666 = dot(vec3(cbLight._m0[_2628].xyz), vec3(_2655, _2656, _2657));
        float _4652 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2670 = _2647 * _2647;
        float _2674 = ((_2665 * _2665) * (_2670 + (-1.0))) + 1.0;
        float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
        float _2688 = 1.0 - _2647;
        float _2698 = (0.5 / (((_2305 * ((_2661 * _2688) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2688) + _2647) * _2661))) * _2661;
        float _4663 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2700 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2670 / ((_2674 * _2674) * 3.141590118408203125));
        float _2701 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2617 = (((((_2681 * _2327) + _1032) * cbLight._m0[_2632].x) * _2700) * _2701) + _2503;
        _2619 = (((((_2681 * _2329) + _1034) * cbLight._m0[_2632].y) * _2700) * _2701) + _2505;
        _2621 = (((((_2681 * _2330) + _1035) * cbLight._m0[_2632].z) * _2700) * _2701) + _2507;
    }
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_2134.y == 0u)
    {
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2776;
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2776;
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2776;
        uvec4 _2791 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2792 = _2791.x;
        uint _2803 = uint((float(_2791.y) * floor(float(uint(cbSceneParam._m0[85u].y * _970) / _2792))) + floor(float(uint(cbSceneParam._m0[85u].x * _969) / _2792)));
        float _2813 = (log2(_2779 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2814 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        uint _2817 = uint(isnan(14.0) ? _2814 : (isnan(_2814) ? 14.0 : min(_2814, 14.0)));
        uvec4 _2822 = texelFetch(g_lightClusterGridBuffer, int(((_2817 << 2u) + (_2803 << 6u)) >> 2u));
        uint _2823 = _2822.x;
        uint _2824 = _2791.z;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((((1u << ((_2824 >> 4u) & 15u)) + 4294967295u) & _2823) == 0u) || ((_2824 & 240u) == 0u))
        {
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
        }
        else
        {
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            uint _3104 = 0u;
            uint _3113;
            bool _3114;
            for (;;)
            {
                _3113 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                _3114 = _3113 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3114)
                {
                    frontier_phi_66_pred = _3098;
                    frontier_phi_66_pred_1 = _3103;
                    frontier_phi_66_pred_2 = _3102;
                    frontier_phi_66_pred_3 = _3101;
                    frontier_phi_66_pred_4 = _3100;
                    frontier_phi_66_pred_5 = _3099;
                }
                else
                {
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    uint _3249;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3113;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    for (;;)
                    {
                        uint _3253 = uint(findLSB(_3249)) + (_3104 << 5u);
                        uint _3250 = (_3249 + 4294967295u) & _3249;
                        uint _3255 = _3253 * 48u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3275 = (_3253 * 48u) + 4u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 3u)).x));
                        uint _3294 = (_3253 * 48u) + 8u;
                        vec3 _3305 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x));
                        float _3309 = _3269.x - _2777;
                        float _3310 = _3269.y - _2778;
                        float _3311 = _3269.z - _2779;
                        float _3312 = dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311));
                        float _3315 = inversesqrt(_3312);
                        float _3316 = _3315 * _3309;
                        float _3317 = _3315 * _3310;
                        float _3318 = _3315 * _3311;
                        float _3319 = dot(vec3(_988, _991, _994), vec3(_3316, _3317, _3318));
                        float _3324 = 1.0 - (_3312 * _3269.w);
                        float _4689 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3325 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3326 = sqrt(_3312) * _3288.w;
                        float _3329 = 1.39999997615814208984375 / (_3326 + 1.39999997615814208984375);
                        float _3330 = _3329 * _3329;
                        float _3333 = ((1.0 - _3330) * _3319) + _3330;
                        float _3336 = _3326 * _3326;
                        float _3340 = ((isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))) * _3325) / ((_3336 * 0.699999988079071044921875) + 1.0);
                        float _3344 = (-0.0) - _2777;
                        float _3345 = (-0.0) - _2778;
                        float _3346 = (-0.0) - _2779;
                        float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                        float _3351 = _3350 * _3344;
                        float _3352 = _3350 * _3345;
                        float _3353 = _3350 * _3346;
                        float _3361 = exp2(log2(1.0 / ((_3336 * 3.5) + 5.0)) * 0.25);
                        float _3362 = 1.0 - _1063;
                        float _3369 = sqrt(1.0 - ((1.0 - (_3362 * _3362)) * (1.0 - (_3361 * _3361))));
                        float _3370 = _3369 * _3369;
                        float _3371 = _3370 * _3370;
                        float _3372 = _3351 + _3316;
                        float _3373 = _3352 + _3317;
                        float _3374 = _3353 + _3318;
                        float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                        float _3382 = dot(vec3(_988, _991, _994), vec3(_3351, _3352, _3353));
                        float _4705 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3385 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3386 = dot(vec3(_988, _991, _994), vec3(_3378 * _3372, _3378 * _3373, _3378 * _3374));
                        float _4716 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3389 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3393 = ((_3389 * _3389) * (_3371 + (-1.0))) + 1.0;
                        float _3394 = _3329 * _3370;
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3319) + _3395;
                        float _4727 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3400 = 1.0 - _3370;
                        float _3410 = (0.5 / (((_3399 * ((_3385 * _3400) + _3370)) + 9.9999999392252902907785028219223e-09) + (((_3399 * _3400) + _3370) * _3385))) * _3399;
                        float _4738 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3421 = (((_3371 * 3.1415927410125732421875) * (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) / ((_3393 * _3393) * ((_3336 * 2.1991131305694580078125) + 3.141590118408203125))) * _3325;
                        _3173 = (_3340 * _3288.x) + _3246;
                        _3174 = (_3340 * _3288.y) + _3247;
                        _3175 = (_3340 * _3288.z) + _3248;
                        _3170 = (_3421 * _3305.x) + _3243;
                        _3171 = (_3421 * _3305.y) + _3244;
                        _3172 = (_3421 * _3305.z) + _3245;
                        if (_3250 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3250;
                        }
                    }
                    frontier_phi_66_pred = _3170;
                    frontier_phi_66_pred_1 = _3175;
                    frontier_phi_66_pred_2 = _3174;
                    frontier_phi_66_pred_3 = _3173;
                    frontier_phi_66_pred_4 = _3172;
                    frontier_phi_66_pred_5 = _3171;
                }
                _2948 = frontier_phi_66_pred;
                _2958 = frontier_phi_66_pred_1;
                _2956 = frontier_phi_66_pred_2;
                _2954 = frontier_phi_66_pred_3;
                _2952 = frontier_phi_66_pred_4;
                _2950 = frontier_phi_66_pred_5;
                uint _3105 = _3104 + 1u;
                if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3098 = _2948;
                    _3099 = _2950;
                    _3100 = _2952;
                    _3101 = _2954;
                    _3102 = _2956;
                    _3103 = _2958;
                    _3104 = _3105;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
        }
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.z;
        uint _2964 = (_2962 >> 8u) & 15u;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((4294967295u << _2964) & _2823) == 0u)
        {
            _3066 = _2947;
            _3068 = _2949;
            _3070 = _2951;
            _3072 = _2953;
            _3074 = _2955;
            _3076 = _2957;
        }
        else
        {
            float _3091 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
            float _3092 = _3091 * _2777;
            float _3093 = _3091 * _2778;
            float _3094 = _3091 * _2779;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2964 < ((_2962 >> 12u) & 15u))
            {
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3226 = _2947;
                float _3227 = _2949;
                float _3228 = _2951;
                float _3229 = _2953;
                float _3230 = _2955;
                float _3231 = _2957;
                uint _3232 = _2964;
                uint _3241;
                bool _3242;
                for (;;)
                {
                    _3241 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3232 << 2u)) >> 2u)).x;
                    _3242 = _3241 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3242)
                    {
                        frontier_phi_77_pred = _3231;
                        frontier_phi_77_pred_1 = _3230;
                        frontier_phi_77_pred_2 = _3229;
                        frontier_phi_77_pred_3 = _3228;
                        frontier_phi_77_pred_4 = _3227;
                        frontier_phi_77_pred_5 = _3226;
                    }
                    else
                    {
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        float _3453 = _3231;
                        uint _3454 = _3241;
                        uint _3455;
                        vec4 _3480;
                        float _3481;
                        vec4 _3496;
                        vec3 _3508;
                        vec4 _3523;
                        vec4 _3538;
                        float _3584;
                        bool _3585;
                        for (;;)
                        {
                            uint _3465 = ((_3232 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3454));
                            _3455 = (_3454 + 4294967295u) & _3454;
                            uint _3467 = _3465 * 40u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3481 = _3480.w;
                            uint _3483 = (_3465 * 40u) + 4u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3465 * 40u) + 8u;
                            _3508 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x));
                            uint _3510 = (_3465 * 40u) + 16u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3465 * 40u) + 20u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3465 * 40u) + 24u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3559 = (_3465 * 40u) + 28u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3584 = fma(_2779, _3572.z, fma(_2778, _3572.y, _3572.x * _2777)) + _3572.w;
                            _3585 = !((fma(_2779, _3553.z, fma(_2778, _3553.y, _3553.x * _2777)) + _3553.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3585)
                            {
                                float _3612 = _3480.x - _2777;
                                float _3613 = _3480.y - _2778;
                                float _3614 = _3480.z - _2779;
                                float _3615 = dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614));
                                float _3618 = inversesqrt(_3615);
                                float _3619 = _3618 * _3612;
                                float _3620 = _3618 * _3613;
                                float _3621 = _3618 * _3614;
                                float _3625 = 1.0 - (_3615 / (_3481 * _3481));
                                float _4749 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3630 = sqrt(_3615) * _3496.w;
                                float _3632 = 1.39999997615814208984375 / (_3630 + 1.39999997615814208984375);
                                float _3633 = _3632 * _3632;
                                float _3636 = ((1.0 - _3633) * dot(vec3(_3619, _3620, _3621), vec3(_988, _991, _994))) + _3633;
                                float _3639 = _3630 * _3630;
                                float _3643 = (fma(_2779, _3523.z, fma(_2778, _3523.y, _3523.x * _2777)) + _3523.w) / _3584;
                                float _3644 = (fma(_2779, _3538.z, fma(_2778, _3538.y, _3538.x * _2777)) + _3538.w) / _3584;
                                float _3648 = 1.0 - dot(vec2(_3643, _3644), vec2(_3643, _3644));
                                float _4765 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3650 = _3649 * (((isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0))) * _3626) / ((_3639 * 0.699999988079071044921875) + 1.0));
                                float _3662 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                                float _3663 = 1.0 - _1063;
                                float _3670 = sqrt(1.0 - ((1.0 - (_3663 * _3663)) * (1.0 - (_3662 * _3662))));
                                float _3671 = _3670 * _3670;
                                float _3672 = _3671 * _3671;
                                float _3673 = _3619 - _3092;
                                float _3674 = _3620 - _3093;
                                float _3675 = _3621 - _3094;
                                float _3679 = inversesqrt(dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675)));
                                float _3683 = dot(vec3(_988, _991, _994), vec3((-0.0) - _3092, (-0.0) - _3093, (-0.0) - _3094));
                                float _4776 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3687 = dot(vec3(_988, _991, _994), vec3(_3679 * _3673, _3679 * _3674, _3679 * _3675));
                                float _4787 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3694 = ((_3690 * _3690) * (_3672 + (-1.0))) + 1.0;
                                float _3695 = _3632 * _3671;
                                float _3696 = _3695 * _3695;
                                float _3702 = ((1.0 - _3696) * dot(vec3(_988, _991, _994), vec3(_3619, _3620, _3621))) + _3696;
                                float _4798 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3704 = 1.0 - _3671;
                                float _3714 = (0.5 / (((_3703 * ((_3686 * _3704) + _3671)) + 9.9999999392252902907785028219223e-09) + (((_3703 * _3704) + _3671) * _3686))) * _3703;
                                float _4809 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3724 = (_3649 * _3626) * (((_3672 * 3.1415927410125732421875) * (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) / ((_3694 * _3694) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3650 * _3496.y;
                                frontier_phi_83_pred_1 = _3650 * _3496.x;
                                frontier_phi_83_pred_2 = _3724 * _3508.z;
                                frontier_phi_83_pred_3 = _3724 * _3508.y;
                                frontier_phi_83_pred_4 = _3724 * _3508.x;
                                frontier_phi_83_pred_5 = _3650 * _3496.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3732 = frontier_phi_83_pred;
                            _3731 = frontier_phi_83_pred_1;
                            _3730 = frontier_phi_83_pred_2;
                            _3729 = frontier_phi_83_pred_3;
                            _3728 = frontier_phi_83_pred_4;
                            _3733 = frontier_phi_83_pred_5;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            if (_3455 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3455;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3440;
                        frontier_phi_77_pred_1 = _3439;
                        frontier_phi_77_pred_2 = _3438;
                        frontier_phi_77_pred_3 = _3437;
                        frontier_phi_77_pred_4 = _3436;
                        frontier_phi_77_pred_5 = _3435;
                    }
                    _3077 = frontier_phi_77_pred;
                    _3075 = frontier_phi_77_pred_1;
                    _3073 = frontier_phi_77_pred_2;
                    _3071 = frontier_phi_77_pred_3;
                    _3069 = frontier_phi_77_pred_4;
                    _3067 = frontier_phi_77_pred_5;
                    uint _3233 = _3232 + 1u;
                    if (_3233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3226 = _3067;
                        _3227 = _3069;
                        _3228 = _3071;
                        _3229 = _3073;
                        _3230 = _3075;
                        _3231 = _3077;
                        _3232 = _3233;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3071;
                frontier_phi_58_59_ladder_1 = _3077;
                frontier_phi_58_59_ladder_2 = _3075;
                frontier_phi_58_59_ladder_3 = _3073;
                frontier_phi_58_59_ladder_4 = _3069;
                frontier_phi_58_59_ladder_5 = _3067;
            }
            else
            {
                frontier_phi_58_59_ladder = _2951;
                frontier_phi_58_59_ladder_1 = _2957;
                frontier_phi_58_59_ladder_2 = _2955;
                frontier_phi_58_59_ladder_3 = _2953;
                frontier_phi_58_59_ladder_4 = _2949;
                frontier_phi_58_59_ladder_5 = _2947;
            }
            _3066 = frontier_phi_58_59_ladder_5;
            _3068 = frontier_phi_58_59_ladder_4;
            _3070 = frontier_phi_58_59_ladder;
            _3072 = frontier_phi_58_59_ladder_3;
            _3074 = frontier_phi_58_59_ladder_2;
            _3076 = frontier_phi_58_59_ladder_1;
        }
        float _3081 = isnan(1.0) ? _1047 : (isnan(_1047) ? 1.0 : min(_1047, 1.0));
        _2836 = (_3081 * _3072) + _2269;
        _2838 = (_3081 * _3074) + _2271;
        _2840 = (_3081 * _3076) + _2273;
        _2842 = ((_3066 * _1032) * _3081) + _2617;
        _2844 = ((_3068 * _1034) * _3081) + _2619;
        _2846 = ((_3070 * _1035) * _3081) + _2621;
    }
    else
    {
        _2836 = _2269;
        _2838 = _2271;
        _2840 = _2273;
        _2842 = _2617;
        _2844 = _2619;
        _2846 = _2621;
    }
    uint _2852 = _1008 + uint(cbMatDynParam._m0[0u].w);
    float _2858 = (isnan(cbMtdParam._m0[24u].y) ? _732 : (isnan(_732) ? cbMtdParam._m0[24u].y : min(_732, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4825 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _4836 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _4847 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _2881 = (((isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2836 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1047))) + ((_2842 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1887)) * cbPerFrame._m0[3u].x)) + ((_2858 * (((((_791.x - _788) * _770) + _788) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _724) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2852].x);
    float _2883 = (((_2858 * (((((_791.y - _789) * _770) + _789) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_713.y - _711) * _691) + _711)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2852].y) + ((_2844 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1887)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2838 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1047)));
    float _2885 = (((_2858 * (((((_791.z - _790) * _770) + _790) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_713.z - _712) * _691) + _712)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2852].z) + ((_2846 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1887)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2840 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1047)));
    float _2886 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
    float _2887 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
    float _2888 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
    uint _2889 = _1007 + 6u;
    float _2897 = _969 / cbSceneParam._m0[86u].x;
    float _2898 = _970 / cbSceneParam._m0[86u].y;
    vec4 _2912 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, (log2((isnan(cbSceneParam._m0[77u].w) ? _891 : (isnan(_891) ? cbSceneParam._m0[77u].w : min(_891, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2914 = _2912.x;
    float _2915 = _2912.y;
    float _2916 = _2912.z;
    float _2917 = _2912.w;
    float _3009;
    float _3011;
    float _3013;
    float _3015;
    if (_891 > cbSceneParam._m0[78u].w)
    {
        float _2972 = isnan(_891) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _891 : min(cbSceneParam._m0[80u].w, _891));
        float _2973 = _2972 / _891;
        float _2984 = _2973 * _942;
        float _2985 = _943 * _2973;
        float _2986 = (-0.0) - _2985;
        float _2987 = _2973 * _944;
        float _2989 = (cbSceneParam._m0[77u].w * _2986) / _2972;
        float _2990 = _2989 + cbSceneParam._m0[79u].w;
        float _2991 = cbSceneParam._m0[79u].w - _2985;
        float _2997 = sqrt(((_2984 * _2984) + (_2985 * _2985)) + (_2987 * _2987));
        float _3000 = (1.0 - (cbSceneParam._m0[77u].w / _2972)) * _2997;
        float _3005 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3007 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3183;
        if (abs((_2986 - _2989) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3183 = ((((_2990 > 0.0) ? exp2(_3005 * _2990) : (2.0 - exp2(_3007 * _2990))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3000;
        }
        else
        {
            float _3127 = 1.0 / cbSceneParam._m0[80u].x;
            float _3128 = isnan(_2991) ? _2990 : (isnan(_2990) ? _2991 : max(_2990, _2991));
            float _3129 = isnan(_2991) ? _2990 : (isnan(_2990) ? _2991 : min(_2990, _2991));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            _3183 = ((abs(_2997 / _2986) * cbSceneParam._m0[80u].y) * ((((_3138 - _3139) * 2.0) - ((exp2(_3005 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0)))) - exp2(_3005 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))))) * _3127)) - ((exp2(_3007 * _3138) - exp2(_3007 * _3139)) * _3127))) + (_3000 * cbSceneParam._m0[80u].z);
        }
        vec4 _3185 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, 1.0), 0.0);
        float _3194 = exp2((_3183 * (-1.44269502162933349609375)) * (1.0 - _3185.w));
        float _3195 = log2(_3194);
        float _3211 = log2(_2917);
        _3009 = (exp2(_3211 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].x)) * _3185.x) / cbSceneParam._m0[78u].x)) + _2914;
        _3011 = (exp2(_3211 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].y)) * _3185.y) / cbSceneParam._m0[78u].y)) + _2915;
        _3013 = (exp2(_3211 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].z)) * _3185.z) / cbSceneParam._m0[78u].z)) + _2916;
        _3015 = _3194 * _2917;
    }
    else
    {
        _3009 = _2914;
        _3011 = _2915;
        _3013 = _2916;
        _3015 = _2917;
    }
    bool _3221;
    vec4 _3024;
    vec4 _3046;
    float _3048;
    float _3052;
    float _3053;
    float _3054;
    float _3055;
    bool _3065;
    for (;;)
    {
        _3024 = cbMatDynParam._m0[0u];
        float _3026 = roundEven(_3024.y);
        bool _3027 = _3026 == 3.0;
        float _3028 = log2(_3015);
        float _3035 = exp2(_3028 * cbSceneParam._m0[78u].x) * _2886;
        float _3036 = exp2(_3028 * cbSceneParam._m0[78u].y) * _2887;
        float _3037 = exp2(_3028 * cbSceneParam._m0[78u].z) * _2888;
        float _3044 = _958 + (-0.5);
        _3046 = cbMtdParam._m0[1u];
        _3048 = _3046.y * _3044;
        float _3051 = (_3026 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3052 = _3051 * (_3027 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3009)));
        _3053 = _3051 * (_3027 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3011)));
        _3054 = _3051 * (_3027 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3013)));
        _3055 = _3044 * 0.999000012874603271484375;
        _3065 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3065)
        {
            if ((cbInstanceData._m0[_1007 + 7u].x + _3055) < 0.5)
            {
                _3221 = true;
                break;
            }
        }
        uint _3162 = _1008 + uint(_3024.w);
        if ((cbInstanceData._m0[_3162].w < 1.0) && ((cbInstanceData._m0[_3162].w + _3055) < 0.5))
        {
            _3221 = true;
            break;
        }
        if ((_3048 + 1.0) < _3046.x)
        {
            _3221 = true;
            break;
        }
        _3221 = false;
        break;
    }
    float _3426;
    if (_3221)
    {
        discard_state = true;
        _3426 = 0.0;
    }
    else
    {
        _3426 = cbInstanceData._m0[_2889].w;
    }
    SV_Target.x = _3052;
    SV_Target.y = _3053;
    SV_Target.z = _3054;
    SV_Target.w = _3426;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2889].w;
    discard_exit();
}


