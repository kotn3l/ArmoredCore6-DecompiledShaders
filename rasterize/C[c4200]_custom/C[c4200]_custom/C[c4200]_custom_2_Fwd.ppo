#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1400;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _283 = log2(0.0);
    float _285 = exp2(_283 * cbMtdParam._m0[18u].w);
    float _286 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _287 = isnan(1.0) ? _286 : (isnan(_286) ? 1.0 : min(_286, 1.0));
    vec4 _303 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _307 = _303.z;
    float _312 = exp2(log2(_307 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(1.0) ? _313 : (isnan(_313) ? 1.0 : min(_313, 1.0));
    vec4 _326 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _351 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _362 = cbMtdParam._m0[9u].x * _351.x;
    float _363 = cbMtdParam._m0[9u].y * _351.y;
    float _364 = cbMtdParam._m0[9u].z * _351.z;
    float _371 = (((cbMtdParam._m0[10u].x * _326.x) - _362) * _314) + _362;
    float _372 = (((cbMtdParam._m0[10u].y * _326.y) - _363) * _314) + _363;
    float _373 = (((cbMtdParam._m0[10u].z * _326.z) - _364) * _314) + _364;
    vec4 _386 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _388 = _386.x;
    float _392 = exp2(log2(_388) * cbMtdParam._m0[19u].z);
    vec4 _405 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _425 = (((cbMtdParam._m0[12u].x * _405.x) - _371) * _392) + _371;
    float _426 = (((cbMtdParam._m0[12u].y * _405.y) - _372) * _392) + _372;
    float _427 = (((cbMtdParam._m0[12u].z * _405.z) - _373) * _392) + _373;
    vec4 _440 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _465 = (_274.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _440.x) - _425) * _287) + _425);
    float _467 = (_274.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _440.y) - _426) * _287) + _426);
    float _469 = (_274.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _440.z) - _427) * _287) + _427);
    float _471 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _480 = (_471 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _471))) * (cbMtdParam._m0[22u].y + 1.0);
    float _3768 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _488 = ((cbMtdParam._m0[14u].x - _465) * _481) + _465;
    float _489 = ((cbMtdParam._m0[14u].y - _467) * _481) + _467;
    float _490 = ((cbMtdParam._m0[14u].z - _469) * _481) + _469;
    float _492 = _388 - (_471 * _388);
    vec4 _508 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _526 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _528 = _526.x;
    float _529 = _526.y;
    float _532 = cbMtdParam._m0[18u].x + _526.z;
    float _535 = (((cbMtdParam._m0[18u].z + _508.z) - _532) * _314) + _532;
    vec4 _547 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _559 = (((_547.z - _535) + cbMtdParam._m0[24u].z) * _392) + _535;
    float _565 = ((((_307 * 2.0) * _559) - _559) * cbMtdParam._m0[20u].z) + _559;
    vec4 _578 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _587 = (((cbMtdParam._m0[19u].y + _578.z) - _565) * _287) + _565;
    vec4 _603 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _618 = ((cbMtdParam._m0[21u].w * _471) * ((_603.z * cbMtdParam._m0[21u].z) - _587)) + _587;
    float _629 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _653 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_629 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_629 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _657 = cbPerFrame._m0[22u].x * 2.0;
    float _658 = _657 * cbMtdParam._m0[25u].y;
    float _661 = (_653.x * 0.5) + (-0.25);
    float _664 = (_653.y * 0.5) + (-0.25);
    float _665 = _664 * cbMtdParam._m0[25u].x;
    float _667 = (-0.0) - (cbMtdParam._m0[25u].x * _661);
    float _669 = fract(_658);
    float _671 = fract(_658 + 0.5);
    float _682 = abs((_669 * 2.0) + (-1.0));
    vec4 _699 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_669 * _667) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_665 * _669) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _703 = _699.z;
    vec4 _704 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_671 * _667) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_665 * _671) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _715 = ((_704.x - _701) * _682) + _701;
    float _722 = exp2(log2(_715 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _723 = isnan(cbMtdParam._m0[24u].x) ? _722 : (isnan(_722) ? cbMtdParam._m0[24u].x : max(_722, cbMtdParam._m0[24u].x));
    float _744 = _657 * cbMtdParam._m0[25u].w;
    float _745 = _664 * cbMtdParam._m0[25u].z;
    float _747 = (-0.0) - (cbMtdParam._m0[25u].z * _661);
    float _748 = fract(_744);
    float _750 = fract(_744 + 0.5);
    float _761 = abs((_748 * 2.0) + (-1.0));
    vec4 _777 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_748 * _747) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_745 * _748) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _779 = _777.x;
    float _780 = _777.y;
    float _781 = _777.z;
    vec4 _782 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_750 * _747) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_745 * _750) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _811 = ((_508.x - _528) * _314) + _528;
    float _812 = ((_508.y - _529) * _314) + _529;
    float _817 = ((_547.x - _811) * _392) + _811;
    float _818 = ((_547.y - _812) * _392) + _812;
    float _827 = ((((_578.x - _817) * _287) + _817) * 2.0) + (-1.0);
    float _828 = ((((_578.y - _818) * _287) + _818) * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _3789 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _834 = sqrt(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))));
    float _844 = ((cbMtdParam._m0[20u].w * ((_303.x * 2.0) + (-1.0))) + _827) + ((((_603.x * 2.0) + (-1.0)) * _471) * cbMtdParam._m0[21u].y);
    float _845 = ((cbMtdParam._m0[20u].w * ((_303.y * 2.0) + (-1.0))) + _828) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_603.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _848 = fma(_834, _224 * NORMAL.x, fma(_845, _231 * TANGENT.x, (_217 * _209) * _844));
    float _851 = fma(_834, _224 * NORMAL.y, fma(_845, _231 * TANGENT.y, (_217 * _210) * _844));
    float _854 = fma(_834, _224 * NORMAL.z, fma(_845, _231 * TANGENT.z, (_217 * _211) * _844));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _3800 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _862 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3822 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3833 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3844 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _866 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _933 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _923);
    float _934 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _923);
    float _935 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _923);
    float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
    float _940 = _933 * _939;
    float _941 = _934 * _939;
    float _942 = _935 * _939;
    float _948 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _949 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _967 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _970 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _973 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _986 = uint(roundEven(NORMAL.w)) * 13u;
    uint _987 = _986 + 9u;
    uint _988 = _987 + uint(cbMatDynParam._m0[0u].w);
    float _994 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_988].x;
    float _995 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_988].y;
    float _996 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_988].z;
    float _3855 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1000 = 1.0 - _866;
    float _1001 = _997 * _1000;
    float _1002 = _998 * _1000;
    float _1003 = _999 * _1000;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _866;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _866;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _866;
    float _1011 = _1008 + 0.039999999105930328369140625;
    float _1013 = _1009 + 0.039999999105930328369140625;
    float _1014 = _1010 + 0.039999999105930328369140625;
    vec4 _1023 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _948, cbSceneParam._m0[86u].y * _949));
    float _1026 = _1023.x * TEXCOORD_3.w;
    float _1027 = dot(vec3(_859, _860, _861), vec3(_940, _941, _942));
    float _1030 = _1027 * 2.0;
    float _1034 = (_1030 * _859) - _940;
    float _1035 = (_1030 * _860) - _941;
    float _1036 = (_1030 * _861) - _942;
    float _1040 = abs(dot(vec3(_940, _941, _942), vec3(_859, _860, _861)));
    float _3888 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1042 = sqrt(_862);
    float _1055 = exp2((_1042 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1042 * 3.0));
    float _1061 = (1.0 - _1055) * ((_1042 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1062 = _1055 * _1042;
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1399;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1098, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090));
        float _1129 = fma(_1098, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090));
        float _1133 = fma(_1098, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090));
        float _1157 = _1090 + _859;
        float _1158 = _1094 + _860;
        float _1159 = _1098 + _861;
        float _1169 = fma(_1159, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157)) - _1125;
        float _1170 = fma(_1159, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157)) - _1129;
        float _1171 = fma(_1159, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157)) - _1133;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1188 = ((_1175 * _1169) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1170) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1175 * _1171) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1227 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1193.x + (-0.5));
        float _1229 = _1227 * (_1193.y + (-0.5));
        float _1230 = _1227 * (_1193.z + (-0.5));
        float _1237 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1200.x + (-0.5));
        float _1239 = _1237 * (_1200.y + (-0.5));
        float _1240 = _1237 * (_1200.z + (-0.5));
        float _1247 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1207.x + (-0.5));
        float _1249 = _1247 * (_1207.y + (-0.5));
        float _1250 = _1247 * (_1207.z + (-0.5));
        float _1257 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1214.x + (-0.5));
        float _1259 = _1257 * (_1214.y + (-0.5));
        float _1260 = _1257 * (_1214.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1281 = (dot(vec3(_859, _860, _861), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1291 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3936 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1293 + 1.0))) + _1298) * _1261;
        float _1308 = _1229 * 0.5;
        float _1309 = _1239 * 0.5;
        float _1310 = _1249 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_859, _860, _861), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3969 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1335 + 1.0))) + _1340) * _1262;
        float _1350 = _1230 * 0.5;
        float _1351 = _1240 * 0.5;
        float _1352 = _1250 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_859, _860, _861), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4002 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1377 + 1.0))) + _1382) * _1263;
        _1399 = _1230;
        _1401 = _1229;
        _1402 = _1228;
        _1403 = _1240;
        _1404 = _1239;
        _1405 = _1238;
        _1406 = _1250;
        _1407 = _1249;
        _1408 = _1248;
        _1409 = _1263;
        _1410 = _1262;
        _1411 = _1261;
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1400;
        _1401 = _1400;
        _1402 = _1400;
        _1403 = _1400;
        _1404 = _1400;
        _1405 = _1400;
        _1406 = _1400;
        _1407 = _1400;
        _1408 = _1400;
        _1409 = _1400;
        _1410 = _1400;
        _1411 = _1400;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1440 = fma(_1098, cbModelParam._m0[30u].z, fma(_1094, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090));
        float _1444 = fma(_1098, cbModelParam._m0[31u].z, fma(_1094, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090));
        float _1448 = fma(_1098, cbModelParam._m0[32u].z, fma(_1094, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090));
        float _1471 = _1090 + _859;
        float _1472 = _1094 + _860;
        float _1473 = _1098 + _861;
        float _1483 = fma(_1473, cbModelParam._m0[30u].z, fma(_1472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1471)) - _1440;
        float _1484 = fma(_1473, cbModelParam._m0[31u].z, fma(_1472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1471)) - _1444;
        float _1485 = fma(_1473, cbModelParam._m0[32u].z, fma(_1472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1471)) - _1448;
        float _1489 = inversesqrt(dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485)));
        float _1502 = ((_1489 * _1483) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1440 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1489 * _1484) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1444 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1489 * _1485) / cbModelParam._m0[35u].z) + ((((((_1448 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        float _1539 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1506.x + (-0.5));
        float _1541 = _1539 * (_1506.y + (-0.5));
        float _1542 = _1539 * (_1506.z + (-0.5));
        float _1549 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1513.x + (-0.5));
        float _1551 = _1549 * (_1513.y + (-0.5));
        float _1552 = _1549 * (_1513.z + (-0.5));
        float _1559 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1520.x + (-0.5));
        float _1561 = _1559 * (_1520.y + (-0.5));
        float _1562 = _1559 * (_1520.z + (-0.5));
        float _1569 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1527.x + (-0.5));
        float _1571 = _1569 * (_1527.y + (-0.5));
        float _1572 = _1569 * (_1527.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_859, _860, _861), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4065 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1603 + 1.0))) + _1608) * _1573;
        float _1618 = _1541 * 0.5;
        float _1619 = _1551 * 0.5;
        float _1620 = _1561 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_859, _860, _861), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4098 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1645 + 1.0))) + _1650) * _1574;
        float _1660 = _1542 * 0.5;
        float _1661 = _1552 * 0.5;
        float _1662 = _1562 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_859, _860, _861), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4131 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1687 + 1.0))) + _1692) * _1575;
        _1709 = _1542;
        _1710 = _1541;
        _1711 = _1540;
        _1712 = _1552;
        _1713 = _1551;
        _1714 = _1550;
        _1715 = _1562;
        _1716 = _1561;
        _1717 = _1560;
        _1718 = _1575;
        _1719 = _1574;
        _1720 = _1573;
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1400;
        _1710 = _1400;
        _1711 = _1400;
        _1712 = _1400;
        _1713 = _1400;
        _1714 = _1400;
        _1715 = _1400;
        _1716 = _1400;
        _1717 = _1400;
        _1718 = _1400;
        _1719 = _1400;
        _1720 = _1400;
        _1721 = 0.0;
        _1722 = 0.0;
        _1723 = 0.0;
    }
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1412)) + _1412;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1413)) + _1413;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1414)) + _1414;
    float _1756 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1733));
    float _1777 = _1034 * 0.5;
    float _1778 = _1035 * 0.5;
    float _1779 = _1036 * 0.5;
    float _1780 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1783 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1786 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1820;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1793 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1399, _1403, _1406, _1409));
        float _1797 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1801 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1808 = dot(vec4(cbModelParam._m0[39u]), vec4(_1777, _1778, _1779, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1831;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1822 = dot(vec4(cbModelParam._m0[40u]), vec4(_1777, _1778, _1779, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1835 = (_1831 * cbModelParam._m0[1u].x) + (_1820 * (1.0 - cbModelParam._m0[1u].x));
    float _1845 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1845 : min(cbModelParam._m0[25u].z, _1845));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1098, cbModelParam._m0[13u].z, fma(_1094, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1090)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1098, cbModelParam._m0[14u].z, fma(_1094, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1090)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1098, cbModelParam._m0[15u].z, fma(_1094, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1090)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1036, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034));
        float _1907 = fma(_1036, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034));
        float _1910 = fma(_1036, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1938 = frontier_phi_14_12_ladder;
        }
        float _2141;
        if (_1907 > 0.0)
        {
            _2141 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2141 = frontier_phi_23_19_ladder;
        }
        float _2395;
        if (_1910 > 0.0)
        {
            _2395 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2395 = frontier_phi_35_30_ladder;
        }
        float _2397 = isnan(_2141) ? _1938 : (isnan(_1938) ? _2141 : min(_1938, _2141));
        float _2398 = isnan(_2395) ? _2397 : (isnan(_2397) ? _2395 : min(_2397, _2395));
        float _2402 = (_2398 * _1904) + _1893;
        float _2403 = (_2398 * _1907) + _1897;
        float _2404 = (_2398 * _1910) + _1901;
        float _2405 = _2398 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2405;
        float _2409 = _2405 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 > _2409) || ((_2403 < _2407) || ((_2402 < _2407) || (_2402 > _2409))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2404, cbModelParam._m0[9u].z, fma(_2403, cbModelParam._m0[9u].y, _2402 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2404, cbModelParam._m0[10u].z, fma(_2403, cbModelParam._m0[10u].y, _2402 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2404, cbModelParam._m0[11u].z, fma(_2403, cbModelParam._m0[11u].y, _2402 * cbModelParam._m0[11u].x))), _1846);
            frontier_phi_13_35_ladder = _2532.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2532.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2532.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_13_35_ladder_2;
        _1928 = frontier_phi_13_35_ladder_1;
        _1930 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1034, _1035, _1036), _1846);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2024;
    float _2026;
    float _2028;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1988 = fma(_1098, cbModelParam._m0[21u].z, fma(_1094, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1090)) + cbModelParam._m0[21u].w;
        float _1992 = fma(_1098, cbModelParam._m0[22u].z, fma(_1094, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1090)) + cbModelParam._m0[22u].w;
        float _1996 = fma(_1098, cbModelParam._m0[23u].z, fma(_1094, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1090)) + cbModelParam._m0[23u].w;
        float _1999 = fma(_1036, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034));
        float _2002 = fma(_1036, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034));
        float _2005 = fma(_1036, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034));
        float _2146;
        if (_1999 > 0.0)
        {
            _2146 = abs((1.0 - _1988) / _1999);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1988 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2146 = frontier_phi_25_21_ladder;
        }
        float _2422;
        if (_2002 > 0.0)
        {
            _2422 = abs((1.0 - _1992) / _2002);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1992 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2422 = frontier_phi_37_32_ladder;
        }
        float _2635;
        if (_2005 > 0.0)
        {
            _2635 = abs((1.0 - _1996) / _2005);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1996 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2635 = frontier_phi_46_43_ladder;
        }
        float _2637 = isnan(_2422) ? _2146 : (isnan(_2146) ? _2422 : min(_2146, _2422));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _1999) + _1988;
        float _2643 = (_2638 * _2002) + _1992;
        float _2644 = (_2638 * _2005) + _1996;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_22_46_ladder = _2866.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2866.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2866.x * cbModelParam._m0[1u].z;
        }
        _2024 = frontier_phi_22_46_ladder_2;
        _2026 = frontier_phi_22_46_ladder_1;
        _2028 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2008 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1034, _1035, _1036), _1935);
        _2024 = _2008.x * cbModelParam._m0[1u].z;
        _2026 = _2008.y * cbModelParam._m0[1u].z;
        _2028 = _2008.z * cbModelParam._m0[1u].z;
    }
    float _2041 = (((_1061 * _1011) + _1062) * _1026) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2043 = (((_1061 * _1013) + _1062) * _1026) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2045 = (((_1061 * _1014) + _1062) * _1026) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2048 = fma(_2045, cbSceneParam._m0[89u].z, fma(_2043, cbSceneParam._m0[89u].y, _2041 * cbSceneParam._m0[89u].x));
    float _2051 = fma(_2045, cbSceneParam._m0[90u].z, fma(_2043, cbSceneParam._m0[90u].y, _2041 * cbSceneParam._m0[90u].x));
    float _2054 = fma(_2045, cbSceneParam._m0[91u].z, fma(_2043, cbSceneParam._m0[91u].y, _2041 * cbSceneParam._m0[91u].x));
    uvec4 _2064 = floatBitsToUint(cbInstanceData._m0[_986 + 5u]);
    uint _2066 = _2064.x * 14u;
    uint _2067 = _2066 + 13u;
    float _2074 = _1026 + (-1.0);
    float _2079 = (cbLight._m0[_2067].x * _2074) + 1.0;
    float _2080 = (cbLight._m0[_2067].y * _2074) + 1.0;
    float _2081 = (cbLight._m0[_2067].z * _2074) + 1.0;
    float _2082 = (cbLight._m0[_2067].w * _2074) + 1.0;
    uint _2083 = _2066 + 5u;
    float _2089 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2093 = _2066 + 4u;
    float _2100 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2104 = _2066 | 1u;
    float _2115 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_859, _860, _861));
    float _2118 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_859, _860, _861));
    float _4267 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _4278 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2123 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 0.3183098733425140380859375;
    float _2125 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2132 = ((cbLight._m0[_2083].x * _2089) * _2125) + ((cbLight._m0[_2093].x * _2100) * _2123);
    float _2133 = ((_2089 * cbLight._m0[_2083].y) * _2125) + ((_2100 * cbLight._m0[_2093].y) * _2123);
    float _2134 = ((_2089 * cbLight._m0[_2083].z) * _2125) + ((_2100 * cbLight._m0[_2093].z) * _2123);
    uvec4 _2138 = floatBitsToUint(cbLight._m0[_2066 + 12u]);
    bool _2140 = _2138.x == 0u;
    float _2151;
    float _2153;
    float _2155;
    if (_2140)
    {
        _2151 = _2132;
        _2153 = _2133;
        _2155 = _2134;
    }
    else
    {
        uint _2159 = _2066 + 6u;
        float _2175 = (dot(vec3(cbLight._m0[_2066 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2176 = _2175 * _2175;
        float _4289 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2177 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2178 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2151 = (((cbLight._m0[_2159].x * 0.3183098733425140380859375) * _2177) * _2178) + _2132;
        _2153 = (((cbLight._m0[_2159].y * 0.3183098733425140380859375) * _2177) * _2178) + _2133;
        _2155 = (((cbLight._m0[_2159].z * 0.3183098733425140380859375) * _2177) * _2178) + _2134;
    }
    bool _2158 = _2138.y == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2158)
    {
        _2196 = _2151;
        _2198 = _2153;
        _2200 = _2155;
    }
    else
    {
        uint _2366 = _2066 + 7u;
        float _2382 = (dot(vec3(cbLight._m0[_2066 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2383 = _2382 * _2382;
        float _4305 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2384 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2385 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2196 = (((cbLight._m0[_2366].x * 0.3183098733425140380859375) * _2384) * _2385) + _2151;
        _2198 = (((cbLight._m0[_2366].y * 0.3183098733425140380859375) * _2384) * _2385) + _2153;
        _2200 = (((cbLight._m0[_2366].z * 0.3183098733425140380859375) * _2384) * _2385) + _2155;
    }
    uint _2203 = _2066 + 8u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _862) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_2066].x + _940;
    float _2219 = cbLight._m0[_2066].y + _941;
    float _2220 = cbLight._m0[_2066].z + _942;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2066].xyz));
    float _4321 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _4332 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _2232 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2233 = dot(vec3(_859, _860, _861), vec3(_2225, _2226, _2227));
    float _4343 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2225, _2226, _2227));
    float _4354 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2217 * _2217;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
    float _2254 = 0.959999978542327880859375 - _1008;
    float _2256 = 0.959999978542327880859375 - _1009;
    float _2257 = 0.959999978542327880859375 - _1010;
    float _2264 = 1.0 - _2217;
    float _2275 = (0.5 / (((_2232 * ((_2231 * _2264) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2264) + _2217) * _2231))) * _2231;
    float _4365 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    uint _2288 = _2066 + 9u;
    float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _862) * 0.949999988079071044921875);
    float _2300 = _2299 * _2299;
    float _2301 = cbLight._m0[_2104].x + _940;
    float _2302 = cbLight._m0[_2104].y + _941;
    float _2303 = cbLight._m0[_2104].z + _942;
    float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
    float _2308 = _2307 * _2301;
    float _2309 = _2307 * _2302;
    float _2310 = _2307 * _2303;
    float _2311 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2104].xyz));
    float _4376 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2315 = dot(vec3(_859, _860, _861), vec3(_2308, _2309, _2310));
    float _4387 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2308, _2309, _2310));
    float _4398 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2300 * _2300;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
    float _2341 = 1.0 - _2300;
    float _2351 = (0.5 / (((_2232 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2341) + _2300) * _2314))) * _2314;
    float _4409 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    float _2363 = (((((_2334 * _2254) + _1011) * cbLight._m0[_2288].x) * _2353) * _2089) + (((((_2253 * _2254) + _1011) * cbLight._m0[_2203].x) * _2277) * _2100);
    float _2364 = (((((_2334 * _2256) + _1013) * cbLight._m0[_2288].y) * _2353) * _2089) + (((((_2253 * _2256) + _1013) * cbLight._m0[_2203].y) * _2277) * _2100);
    float _2365 = (((((_2334 * _2257) + _1014) * cbLight._m0[_2288].z) * _2353) * _2089) + (((((_2253 * _2257) + _1014) * cbLight._m0[_2203].z) * _2277) * _2100);
    float _2427;
    float _2429;
    float _2431;
    if (_2140)
    {
        _2427 = _2363;
        _2429 = _2364;
        _2431 = _2365;
    }
    else
    {
        uint _2433 = _2066 + 2u;
        uint _2437 = _2066 + 10u;
        float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _862) * 0.949999988079071044921875);
        float _2452 = _2451 * _2451;
        float _2453 = cbLight._m0[_2433].x + _940;
        float _2454 = cbLight._m0[_2433].y + _941;
        float _2455 = cbLight._m0[_2433].z + _942;
        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
        float _2460 = _2459 * _2453;
        float _2461 = _2459 * _2454;
        float _2462 = _2459 * _2455;
        float _2463 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2433].xyz));
        float _4420 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2467 = dot(vec3(_859, _860, _861), vec3(_2460, _2461, _2462));
        float _4431 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2471 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2460, _2461, _2462));
        float _4442 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2475 = _2452 * _2452;
        float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
        float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
        float _2493 = 1.0 - _2452;
        float _2503 = (0.5 / (((_2232 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2493) + _2452) * _2466))) * _2466;
        float _4453 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2427 = (((((_2486 * _2254) + _1011) * cbLight._m0[_2437].x) * _2505) * _2506) + _2363;
        _2429 = (((((_2486 * _2256) + _1013) * cbLight._m0[_2437].y) * _2505) * _2506) + _2364;
        _2431 = (((((_2486 * _2257) + _1014) * cbLight._m0[_2437].z) * _2505) * _2506) + _2365;
    }
    float _2541;
    float _2543;
    float _2545;
    if (_2158)
    {
        _2541 = _2427;
        _2543 = _2429;
        _2545 = _2431;
    }
    else
    {
        uint _2552 = _2066 + 3u;
        uint _2556 = _2066 + 11u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _862) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _940;
        float _2573 = cbLight._m0[_2552].y + _941;
        float _2574 = cbLight._m0[_2552].z + _942;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2552].xyz));
        float _4469 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2586 = dot(vec3(_859, _860, _861), vec3(_2579, _2580, _2581));
        float _4480 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4491 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
        float _2612 = 1.0 - _2571;
        float _2622 = (0.5 / (((_2232 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2612) + _2571) * _2585))) * _2585;
        float _4502 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2541 = (((((_2605 * _2254) + _1011) * cbLight._m0[_2556].x) * _2624) * _2625) + _2427;
        _2543 = (((((_2605 * _2256) + _1013) * cbLight._m0[_2556].y) * _2624) * _2625) + _2429;
        _2545 = (((((_2605 * _2257) + _1014) * cbLight._m0[_2556].z) * _2624) * _2625) + _2431;
    }
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    if (_2064.y == 0u)
    {
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2700;
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2700;
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2700;
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.x;
        uint _2727 = uint((float(_2715.y) * floor(float(uint(cbSceneParam._m0[85u].y * _949) / _2716))) + floor(float(uint(cbSceneParam._m0[85u].x * _948) / _2716)));
        float _2737 = (log2(_2703 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2738 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        uint _2741 = uint(isnan(14.0) ? _2738 : (isnan(_2738) ? 14.0 : min(_2738, 14.0)));
        uvec4 _2746 = texelFetch(g_lightClusterGridBuffer, int(((_2741 << 2u) + (_2727 << 6u)) >> 2u));
        uint _2747 = _2746.x;
        uint _2748 = _2715.z;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((((1u << ((_2748 >> 4u) & 15u)) + 4294967295u) & _2747) == 0u) || ((_2748 & 240u) == 0u))
        {
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
        }
        else
        {
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            uint _3020 = 0u;
            uint _3029;
            bool _3030;
            for (;;)
            {
                _3029 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3020 << 2u)) >> 2u)).x;
                _3030 = _3029 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3030)
                {
                    frontier_phi_61_pred = _3014;
                    frontier_phi_61_pred_1 = _3019;
                    frontier_phi_61_pred_2 = _3018;
                    frontier_phi_61_pred_3 = _3017;
                    frontier_phi_61_pred_4 = _3016;
                    frontier_phi_61_pred_5 = _3015;
                }
                else
                {
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    uint _3144;
                    _3138 = _3014;
                    _3139 = _3015;
                    _3140 = _3016;
                    _3141 = _3017;
                    _3142 = _3018;
                    _3143 = _3019;
                    _3144 = _3029;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    for (;;)
                    {
                        uint _3148 = uint(findLSB(_3144)) + (_3020 << 5u);
                        uint _3145 = (_3144 + 4294967295u) & _3144;
                        uint _3150 = _3148 * 48u;
                        vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3170 = (_3148 * 48u) + 4u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3189 = (_3148 * 48u) + 8u;
                        vec3 _3200 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x));
                        float _3204 = _3164.x - _2701;
                        float _3205 = _3164.y - _2702;
                        float _3206 = _3164.z - _2703;
                        float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                        float _3210 = inversesqrt(_3207);
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3214 = dot(vec3(_967, _970, _973), vec3(_3211, _3212, _3213));
                        float _3219 = 1.0 - (_3207 * _3164.w);
                        float _4528 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3220 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3221 = sqrt(_3207) * _3183.w;
                        float _3224 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3214) + _3225;
                        float _3231 = _3221 * _3221;
                        float _3235 = ((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3220) / ((_3231 * 0.699999988079071044921875) + 1.0);
                        float _3239 = (-0.0) - _2701;
                        float _3240 = (-0.0) - _2702;
                        float _3241 = (-0.0) - _2703;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3256 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                        float _3257 = 1.0 - _1042;
                        float _3264 = sqrt(1.0 - ((1.0 - (_3257 * _3257)) * (1.0 - (_3256 * _3256))));
                        float _3265 = _3264 * _3264;
                        float _3266 = _3265 * _3265;
                        float _3267 = _3246 + _3211;
                        float _3268 = _3247 + _3212;
                        float _3269 = _3248 + _3213;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3277 = dot(vec3(_967, _970, _973), vec3(_3246, _3247, _3248));
                        float _4544 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3280 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3281 = dot(vec3(_967, _970, _973), vec3(_3273 * _3267, _3273 * _3268, _3273 * _3269));
                        float _4555 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3284 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3288 = ((_3284 * _3284) * (_3266 + (-1.0))) + 1.0;
                        float _3289 = _3224 * _3265;
                        float _3290 = _3289 * _3289;
                        float _3293 = ((1.0 - _3290) * _3214) + _3290;
                        float _4566 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3294 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3295 = 1.0 - _3265;
                        float _3305 = (0.5 / (((_3294 * ((_3280 * _3295) + _3265)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3265) * _3280))) * _3294;
                        float _4577 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3316 = (((_3266 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3288 * _3288) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125))) * _3220;
                        _3073 = (_3235 * _3183.x) + _3141;
                        _3074 = (_3235 * _3183.y) + _3142;
                        _3075 = (_3235 * _3183.z) + _3143;
                        _3070 = (_3316 * _3200.x) + _3138;
                        _3071 = (_3316 * _3200.y) + _3139;
                        _3072 = (_3316 * _3200.z) + _3140;
                        if (_3145 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3138 = _3070;
                            _3139 = _3071;
                            _3140 = _3072;
                            _3141 = _3073;
                            _3142 = _3074;
                            _3143 = _3075;
                            _3144 = _3145;
                        }
                    }
                    frontier_phi_61_pred = _3070;
                    frontier_phi_61_pred_1 = _3075;
                    frontier_phi_61_pred_2 = _3074;
                    frontier_phi_61_pred_3 = _3073;
                    frontier_phi_61_pred_4 = _3072;
                    frontier_phi_61_pred_5 = _3071;
                }
                _2872 = frontier_phi_61_pred;
                _2882 = frontier_phi_61_pred_1;
                _2880 = frontier_phi_61_pred_2;
                _2878 = frontier_phi_61_pred_3;
                _2876 = frontier_phi_61_pred_4;
                _2874 = frontier_phi_61_pred_5;
                uint _3021 = _3020 + 1u;
                if (_3021 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3014 = _2872;
                    _3015 = _2874;
                    _3016 = _2876;
                    _3017 = _2878;
                    _3018 = _2880;
                    _3019 = _2882;
                    _3020 = _3021;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
        }
        uvec4 _2885 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2886 = _2885.z;
        uint _2888 = (_2886 >> 8u) & 15u;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        if (((4294967295u << _2888) & _2747) == 0u)
        {
            _2982 = _2871;
            _2984 = _2873;
            _2986 = _2875;
            _2988 = _2877;
            _2990 = _2879;
            _2992 = _2881;
        }
        else
        {
            float _3007 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
            float _3008 = _3007 * _2701;
            float _3009 = _3007 * _2702;
            float _3010 = _3007 * _2703;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2888 < ((_2886 >> 12u) & 15u))
            {
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _3121 = _2871;
                float _3122 = _2873;
                float _3123 = _2875;
                float _3124 = _2877;
                float _3125 = _2879;
                float _3126 = _2881;
                uint _3127 = _2888;
                uint _3136;
                bool _3137;
                for (;;)
                {
                    _3136 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3127 << 2u)) >> 2u)).x;
                    _3137 = _3136 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3137)
                    {
                        frontier_phi_67_pred = _3124;
                        frontier_phi_67_pred_1 = _3125;
                        frontier_phi_67_pred_2 = _3126;
                        frontier_phi_67_pred_3 = _3123;
                        frontier_phi_67_pred_4 = _3122;
                        frontier_phi_67_pred_5 = _3121;
                    }
                    else
                    {
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3334 = _3121;
                        float _3335 = _3122;
                        float _3336 = _3123;
                        float _3337 = _3124;
                        float _3338 = _3125;
                        float _3339 = _3126;
                        uint _3340 = _3136;
                        uint _3341;
                        vec4 _3366;
                        float _3367;
                        vec4 _3382;
                        vec3 _3394;
                        vec4 _3409;
                        vec4 _3424;
                        float _3470;
                        bool _3471;
                        for (;;)
                        {
                            uint _3351 = ((_3127 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3340));
                            _3341 = (_3340 + 4294967295u) & _3340;
                            uint _3353 = _3351 * 40u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            _3367 = _3366.w;
                            uint _3369 = (_3351 * 40u) + 4u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3351 * 40u) + 8u;
                            _3394 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x));
                            uint _3396 = (_3351 * 40u) + 16u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3351 * 40u) + 20u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3351 * 40u) + 24u;
                            vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3445 = (_3351 * 40u) + 28u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            _3470 = fma(_2703, _3458.z, fma(_2702, _3458.y, _3458.x * _2701)) + _3458.w;
                            _3471 = !((fma(_2703, _3439.z, fma(_2702, _3439.y, _3439.x * _2701)) + _3439.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3471)
                            {
                                float _3498 = _3366.x - _2701;
                                float _3499 = _3366.y - _2702;
                                float _3500 = _3366.z - _2703;
                                float _3501 = dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500));
                                float _3504 = inversesqrt(_3501);
                                float _3505 = _3504 * _3498;
                                float _3506 = _3504 * _3499;
                                float _3507 = _3504 * _3500;
                                float _3511 = 1.0 - (_3501 / (_3367 * _3367));
                                float _4588 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3516 = sqrt(_3501) * _3382.w;
                                float _3518 = 1.39999997615814208984375 / (_3516 + 1.39999997615814208984375);
                                float _3519 = _3518 * _3518;
                                float _3522 = ((1.0 - _3519) * dot(vec3(_3505, _3506, _3507), vec3(_967, _970, _973))) + _3519;
                                float _3525 = _3516 * _3516;
                                float _3529 = (fma(_2703, _3409.z, fma(_2702, _3409.y, _3409.x * _2701)) + _3409.w) / _3470;
                                float _3530 = (fma(_2703, _3424.z, fma(_2702, _3424.y, _3424.x * _2701)) + _3424.w) / _3470;
                                float _3534 = 1.0 - dot(vec2(_3529, _3530), vec2(_3529, _3530));
                                float _4604 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3536 = _3535 * (((isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0))) * _3512) / ((_3525 * 0.699999988079071044921875) + 1.0));
                                float _3548 = exp2(log2(1.0 / ((_3525 * 3.5) + 5.0)) * 0.25);
                                float _3549 = 1.0 - _1042;
                                float _3556 = sqrt(1.0 - ((1.0 - (_3549 * _3549)) * (1.0 - (_3548 * _3548))));
                                float _3557 = _3556 * _3556;
                                float _3558 = _3557 * _3557;
                                float _3559 = _3505 - _3008;
                                float _3560 = _3506 - _3009;
                                float _3561 = _3507 - _3010;
                                float _3565 = inversesqrt(dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561)));
                                float _3569 = dot(vec3(_967, _970, _973), vec3((-0.0) - _3008, (-0.0) - _3009, (-0.0) - _3010));
                                float _4615 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3573 = dot(vec3(_967, _970, _973), vec3(_3565 * _3559, _3565 * _3560, _3565 * _3561));
                                float _4626 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3580 = ((_3576 * _3576) * (_3558 + (-1.0))) + 1.0;
                                float _3581 = _3518 * _3557;
                                float _3582 = _3581 * _3581;
                                float _3588 = ((1.0 - _3582) * dot(vec3(_967, _970, _973), vec3(_3505, _3506, _3507))) + _3582;
                                float _4637 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3590 = 1.0 - _3557;
                                float _3600 = (0.5 / (((_3589 * ((_3572 * _3590) + _3557)) + 9.9999999392252902907785028219223e-09) + (((_3589 * _3590) + _3557) * _3572))) * _3589;
                                float _4648 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3610 = (_3535 * _3512) * (((_3558 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3580 * _3580) * ((_3525 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3610 * _3394.x;
                                frontier_phi_73_pred_1 = _3610 * _3394.y;
                                frontier_phi_73_pred_2 = _3536 * _3382.z;
                                frontier_phi_73_pred_3 = _3536 * _3382.y;
                                frontier_phi_73_pred_4 = _3536 * _3382.x;
                                frontier_phi_73_pred_5 = _3610 * _3394.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3614 = frontier_phi_73_pred;
                            _3615 = frontier_phi_73_pred_1;
                            _3619 = frontier_phi_73_pred_2;
                            _3618 = frontier_phi_73_pred_3;
                            _3617 = frontier_phi_73_pred_4;
                            _3616 = frontier_phi_73_pred_5;
                            _3324 = _3617 + _3337;
                            _3325 = _3618 + _3338;
                            _3326 = _3619 + _3339;
                            _3321 = _3614 + _3334;
                            _3322 = _3615 + _3335;
                            _3323 = _3616 + _3336;
                            if (_3341 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3341;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3324;
                        frontier_phi_67_pred_1 = _3325;
                        frontier_phi_67_pred_2 = _3326;
                        frontier_phi_67_pred_3 = _3323;
                        frontier_phi_67_pred_4 = _3322;
                        frontier_phi_67_pred_5 = _3321;
                    }
                    _2989 = frontier_phi_67_pred;
                    _2991 = frontier_phi_67_pred_1;
                    _2993 = frontier_phi_67_pred_2;
                    _2987 = frontier_phi_67_pred_3;
                    _2985 = frontier_phi_67_pred_4;
                    _2983 = frontier_phi_67_pred_5;
                    uint _3128 = _3127 + 1u;
                    if (_3128 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3121 = _2983;
                        _3122 = _2985;
                        _3123 = _2987;
                        _3124 = _2989;
                        _3125 = _2991;
                        _3126 = _2993;
                        _3127 = _3128;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2991;
                frontier_phi_55_56_ladder_1 = _2993;
                frontier_phi_55_56_ladder_2 = _2989;
                frontier_phi_55_56_ladder_3 = _2987;
                frontier_phi_55_56_ladder_4 = _2985;
                frontier_phi_55_56_ladder_5 = _2983;
            }
            else
            {
                frontier_phi_55_56_ladder = _2879;
                frontier_phi_55_56_ladder_1 = _2881;
                frontier_phi_55_56_ladder_2 = _2877;
                frontier_phi_55_56_ladder_3 = _2875;
                frontier_phi_55_56_ladder_4 = _2873;
                frontier_phi_55_56_ladder_5 = _2871;
            }
            _2982 = frontier_phi_55_56_ladder_5;
            _2984 = frontier_phi_55_56_ladder_4;
            _2986 = frontier_phi_55_56_ladder_3;
            _2988 = frontier_phi_55_56_ladder_2;
            _2990 = frontier_phi_55_56_ladder;
            _2992 = frontier_phi_55_56_ladder_1;
        }
        float _2997 = isnan(1.0) ? _1026 : (isnan(_1026) ? 1.0 : min(_1026, 1.0));
        _2760 = (_2997 * _2988) + _2196;
        _2762 = (_2997 * _2990) + _2198;
        _2764 = (_2997 * _2992) + _2200;
        _2766 = ((_2982 * _1011) * _2997) + _2541;
        _2768 = ((_2984 * _1013) * _2997) + _2543;
        _2770 = ((_2986 * _1014) * _2997) + _2545;
    }
    else
    {
        _2760 = _2196;
        _2762 = _2198;
        _2764 = _2200;
        _2766 = _2541;
        _2768 = _2543;
        _2770 = _2545;
    }
    uint _2776 = _987 + uint(cbMatDynParam._m0[0u].w);
    float _2782 = (isnan(cbMtdParam._m0[24u].y) ? _723 : (isnan(_723) ? cbMtdParam._m0[24u].y : min(_723, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4664 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4675 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _4686 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _2805 = (((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2760 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1026))) + ((_2766 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1835)) * cbPerFrame._m0[3u].x)) + ((_2782 * (((((_782.x - _779) * _761) + _779) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _715) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2776].x);
    float _2807 = (((_2782 * (((((_782.y - _780) * _761) + _780) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_704.y - _702) * _682) + _702)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2776].y) + ((_2768 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1835)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2762 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1026)));
    float _2809 = (((_2782 * (((((_782.z - _781) * _761) + _781) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_704.z - _703) * _682) + _703)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2776].z) + ((_2770 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1835)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2764 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1026)));
    uint _2813 = _986 + 6u;
    float _2821 = _948 / cbSceneParam._m0[86u].x;
    float _2822 = _949 / cbSceneParam._m0[86u].y;
    vec4 _2836 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2838 = _2836.x;
    float _2839 = _2836.y;
    float _2840 = _2836.z;
    float _2841 = _2836.w;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _2896 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _2897 = _2896 / _882;
        float _2908 = _2897 * _933;
        float _2909 = _934 * _2897;
        float _2910 = (-0.0) - _2909;
        float _2911 = _2897 * _935;
        float _2913 = (cbSceneParam._m0[77u].w * _2910) / _2896;
        float _2914 = _2913 + cbSceneParam._m0[79u].w;
        float _2915 = cbSceneParam._m0[79u].w - _2909;
        float _2921 = sqrt(((_2908 * _2908) + (_2909 * _2909)) + (_2911 * _2911));
        float _2924 = (1.0 - (cbSceneParam._m0[77u].w / _2896)) * _2921;
        float _2929 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2931 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3083;
        if (abs((_2910 - _2913) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3083 = ((((_2914 > 0.0) ? exp2(_2929 * _2914) : (2.0 - exp2(_2931 * _2914))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2924;
        }
        else
        {
            float _3043 = 1.0 / cbSceneParam._m0[80u].x;
            float _3044 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : max(_2914, _2915));
            float _3045 = isnan(_2915) ? _2914 : (isnan(_2914) ? _2915 : min(_2914, _2915));
            float _3054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : min(_3044, 0.0));
            float _3055 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : min(_3045, 0.0));
            _3083 = ((abs(_2921 / _2910) * cbSceneParam._m0[80u].y) * ((((_3054 - _3055) * 2.0) - ((exp2(_2929 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0)))) - exp2(_2929 * (isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))))) * _3043)) - ((exp2(_2931 * _3054) - exp2(_2931 * _3055)) * _3043))) + (_2924 * cbSceneParam._m0[80u].z);
        }
        vec4 _3085 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, 1.0), 0.0);
        float _3094 = exp2((_3083 * (-1.44269502162933349609375)) * (1.0 - _3085.w));
        float _3095 = log2(_3094);
        float _3111 = log2(_2841);
        _2933 = (exp2(_3111 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].x)) * _3085.x) / cbSceneParam._m0[78u].x)) + _2838;
        _2935 = (exp2(_3111 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].y)) * _3085.y) / cbSceneParam._m0[78u].y)) + _2839;
        _2937 = (exp2(_3111 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].z)) * _3085.z) / cbSceneParam._m0[78u].z)) + _2840;
        _2939 = _3094 * _2841;
    }
    else
    {
        _2933 = _2838;
        _2935 = _2839;
        _2937 = _2840;
        _2939 = _2841;
    }
    float _2950 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2951 = _2950 == 3.0;
    float _2952 = log2(_2939);
    float _2959 = exp2(_2952 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0)));
    float _2960 = exp2(_2952 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0)));
    float _2961 = exp2(_2952 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0)));
    float _2970 = (_2950 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2970 * (_2951 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2933)));
    SV_Target.y = _2970 * (_2951 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2935)));
    SV_Target.z = _2970 * (_2951 ? _2961 : (_2961 + (cbSceneParam._m0[72u].w * _2937)));
    SV_Target.w = cbInstanceData._m0[_2813].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2813].w;
}


