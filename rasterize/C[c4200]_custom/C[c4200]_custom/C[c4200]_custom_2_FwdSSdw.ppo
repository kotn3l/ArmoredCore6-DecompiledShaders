#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1402;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _276 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _285 = log2(0.0);
    float _287 = exp2(_285 * cbMtdParam._m0[18u].w);
    float _288 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _289 = isnan(1.0) ? _288 : (isnan(_288) ? 1.0 : min(_288, 1.0));
    vec4 _305 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _309 = _305.z;
    float _314 = exp2(log2(_309 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(1.0) ? _315 : (isnan(_315) ? 1.0 : min(_315, 1.0));
    vec4 _328 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _353 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _364 = cbMtdParam._m0[9u].x * _353.x;
    float _365 = cbMtdParam._m0[9u].y * _353.y;
    float _366 = cbMtdParam._m0[9u].z * _353.z;
    float _373 = (((cbMtdParam._m0[10u].x * _328.x) - _364) * _316) + _364;
    float _374 = (((cbMtdParam._m0[10u].y * _328.y) - _365) * _316) + _365;
    float _375 = (((cbMtdParam._m0[10u].z * _328.z) - _366) * _316) + _366;
    vec4 _388 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _390 = _388.x;
    float _394 = exp2(log2(_390) * cbMtdParam._m0[19u].z);
    vec4 _407 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _427 = (((cbMtdParam._m0[12u].x * _407.x) - _373) * _394) + _373;
    float _428 = (((cbMtdParam._m0[12u].y * _407.y) - _374) * _394) + _374;
    float _429 = (((cbMtdParam._m0[12u].z * _407.z) - _375) * _394) + _375;
    vec4 _442 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _467 = (_276.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _442.x) - _427) * _289) + _427);
    float _469 = (_276.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _442.y) - _428) * _289) + _428);
    float _471 = (_276.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _442.z) - _429) * _289) + _429);
    float _473 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _482 = (_473 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _473))) * (cbMtdParam._m0[22u].y + 1.0);
    float _3794 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _490 = ((cbMtdParam._m0[14u].x - _467) * _483) + _467;
    float _491 = ((cbMtdParam._m0[14u].y - _469) * _483) + _469;
    float _492 = ((cbMtdParam._m0[14u].z - _471) * _483) + _471;
    float _494 = _390 - (_473 * _390);
    vec4 _510 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _528 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _530 = _528.x;
    float _531 = _528.y;
    float _534 = cbMtdParam._m0[18u].x + _528.z;
    float _537 = (((cbMtdParam._m0[18u].z + _510.z) - _534) * _316) + _534;
    vec4 _549 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _561 = (((_549.z - _537) + cbMtdParam._m0[24u].z) * _394) + _537;
    float _567 = ((((_309 * 2.0) * _561) - _561) * cbMtdParam._m0[20u].z) + _561;
    vec4 _580 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _589 = (((cbMtdParam._m0[19u].y + _580.z) - _567) * _289) + _567;
    vec4 _605 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _620 = ((cbMtdParam._m0[21u].w * _473) * ((_605.z * cbMtdParam._m0[21u].z) - _589)) + _589;
    float _631 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _655 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_631 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_631 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _659 = cbPerFrame._m0[22u].x * 2.0;
    float _660 = _659 * cbMtdParam._m0[25u].y;
    float _663 = (_655.x * 0.5) + (-0.25);
    float _666 = (_655.y * 0.5) + (-0.25);
    float _667 = _666 * cbMtdParam._m0[25u].x;
    float _669 = (-0.0) - (cbMtdParam._m0[25u].x * _663);
    float _671 = fract(_660);
    float _673 = fract(_660 + 0.5);
    float _684 = abs((_671 * 2.0) + (-1.0));
    vec4 _701 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_671 * _669) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_667 * _671) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _703 = _701.x;
    float _704 = _701.y;
    float _705 = _701.z;
    vec4 _706 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_673 * _669) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_667 * _673) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _717 = ((_706.x - _703) * _684) + _703;
    float _724 = exp2(log2(_717 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _725 = isnan(cbMtdParam._m0[24u].x) ? _724 : (isnan(_724) ? cbMtdParam._m0[24u].x : max(_724, cbMtdParam._m0[24u].x));
    float _746 = _659 * cbMtdParam._m0[25u].w;
    float _747 = _666 * cbMtdParam._m0[25u].z;
    float _749 = (-0.0) - (cbMtdParam._m0[25u].z * _663);
    float _750 = fract(_746);
    float _752 = fract(_746 + 0.5);
    float _763 = abs((_750 * 2.0) + (-1.0));
    vec4 _779 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_750 * _749) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_747 * _750) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _781 = _779.x;
    float _782 = _779.y;
    float _783 = _779.z;
    vec4 _784 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_752 * _749) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_747 * _752) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _813 = ((_510.x - _530) * _316) + _530;
    float _814 = ((_510.y - _531) * _316) + _531;
    float _819 = ((_549.x - _813) * _394) + _813;
    float _820 = ((_549.y - _814) * _394) + _814;
    float _829 = ((((_580.x - _819) * _289) + _819) * 2.0) + (-1.0);
    float _830 = ((((_580.y - _820) * _289) + _820) * 2.0) + (-1.0);
    float _831 = dot(vec2(_829, _830), vec2(_829, _830));
    float _3815 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _836 = sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))));
    float _846 = ((cbMtdParam._m0[20u].w * ((_305.x * 2.0) + (-1.0))) + _829) + ((((_605.x * 2.0) + (-1.0)) * _473) * cbMtdParam._m0[21u].y);
    float _847 = ((cbMtdParam._m0[20u].w * ((_305.y * 2.0) + (-1.0))) + _830) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_605.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _850 = fma(_836, _226 * NORMAL.x, fma(_847, _233 * TANGENT.x, (_219 * _211) * _846));
    float _853 = fma(_836, _226 * NORMAL.y, fma(_847, _233 * TANGENT.y, (_219 * _212) * _846));
    float _856 = fma(_836, _226 * NORMAL.z, fma(_847, _233 * TANGENT.z, (_219 * _213) * _846));
    float _860 = inversesqrt(dot(vec3(_850, _853, _856), vec3(_850, _853, _856)));
    float _861 = _860 * _850;
    float _862 = _860 * _853;
    float _863 = _860 * _856;
    float _3826 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _864 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3848 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3859 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3870 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _868 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _884 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _935 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _925);
    float _936 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _925);
    float _937 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _925);
    float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
    float _942 = _935 * _941;
    float _943 = _936 * _941;
    float _944 = _937 * _941;
    float _950 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _951 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _969 = fma(_863, cbSceneParam._m0[5u].z, fma(_862, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _861));
    float _972 = fma(_863, cbSceneParam._m0[6u].z, fma(_862, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _861));
    float _975 = fma(_863, cbSceneParam._m0[7u].z, fma(_862, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _861));
    uint _988 = uint(roundEven(NORMAL.w)) * 13u;
    uint _989 = _988 + 9u;
    uint _990 = _989 + uint(cbMatDynParam._m0[0u].w);
    float _996 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_990].x;
    float _997 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_990].y;
    float _998 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_990].z;
    float _3881 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1002 = 1.0 - _868;
    float _1003 = _999 * _1002;
    float _1004 = _1000 * _1002;
    float _1005 = _1001 * _1002;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _868;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _868;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _868;
    float _1013 = _1010 + 0.039999999105930328369140625;
    float _1015 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    vec4 _1025 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _950, cbSceneParam._m0[86u].y * _951));
    float _1028 = _1025.x * TEXCOORD_3.w;
    float _1029 = dot(vec3(_861, _862, _863), vec3(_942, _943, _944));
    float _1032 = _1029 * 2.0;
    float _1036 = (_1032 * _861) - _942;
    float _1037 = (_1032 * _862) - _943;
    float _1038 = (_1032 * _863) - _944;
    float _1042 = abs(dot(vec3(_942, _943, _944), vec3(_861, _862, _863)));
    float _3914 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1044 = sqrt(_864);
    float _1057 = exp2((_1044 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1044 * 3.0));
    float _1063 = (1.0 - _1057) * ((_1044 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1064 = _1057 * _1044;
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1401;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1127 = fma(_1100, cbModelParam._m0[26u].z, fma(_1096, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092));
        float _1131 = fma(_1100, cbModelParam._m0[27u].z, fma(_1096, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092));
        float _1135 = fma(_1100, cbModelParam._m0[28u].z, fma(_1096, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092));
        float _1159 = _1092 + _861;
        float _1160 = _1096 + _862;
        float _1161 = _1100 + _863;
        float _1171 = fma(_1161, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159)) - _1127;
        float _1172 = fma(_1161, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159)) - _1131;
        float _1173 = fma(_1161, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159)) - _1135;
        float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
        float _1190 = ((_1177 * _1171) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1127 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1177 * _1172) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1131 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1177 * _1173) / cbModelParam._m0[34u].z) + ((((((_1135 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1229 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1195.x + (-0.5));
        float _1231 = _1229 * (_1195.y + (-0.5));
        float _1232 = _1229 * (_1195.z + (-0.5));
        float _1239 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1202.x + (-0.5));
        float _1241 = _1239 * (_1202.y + (-0.5));
        float _1242 = _1239 * (_1202.z + (-0.5));
        float _1249 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1209.x + (-0.5));
        float _1251 = _1249 * (_1209.y + (-0.5));
        float _1252 = _1249 * (_1209.z + (-0.5));
        float _1259 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1216.x + (-0.5));
        float _1261 = _1259 * (_1216.y + (-0.5));
        float _1262 = _1259 * (_1216.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1283 = (dot(vec3(_861, _862, _863), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1293 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3962 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1295 + 1.0))) + _1300) * _1263;
        float _1310 = _1231 * 0.5;
        float _1311 = _1241 * 0.5;
        float _1312 = _1251 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_861, _862, _863), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3995 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1337 + 1.0))) + _1342) * _1264;
        float _1352 = _1232 * 0.5;
        float _1353 = _1242 * 0.5;
        float _1354 = _1252 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_861, _862, _863), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4028 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1379 + 1.0))) + _1384) * _1265;
        _1401 = _1232;
        _1403 = _1231;
        _1404 = _1230;
        _1405 = _1242;
        _1406 = _1241;
        _1407 = _1240;
        _1408 = _1252;
        _1409 = _1251;
        _1410 = _1250;
        _1411 = _1265;
        _1412 = _1264;
        _1413 = _1263;
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1402;
        _1403 = _1402;
        _1404 = _1402;
        _1405 = _1402;
        _1406 = _1402;
        _1407 = _1402;
        _1408 = _1402;
        _1409 = _1402;
        _1410 = _1402;
        _1411 = _1402;
        _1412 = _1402;
        _1413 = _1402;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1442 = fma(_1100, cbModelParam._m0[30u].z, fma(_1096, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092));
        float _1446 = fma(_1100, cbModelParam._m0[31u].z, fma(_1096, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092));
        float _1450 = fma(_1100, cbModelParam._m0[32u].z, fma(_1096, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092));
        float _1473 = _1092 + _861;
        float _1474 = _1096 + _862;
        float _1475 = _1100 + _863;
        float _1485 = fma(_1475, cbModelParam._m0[30u].z, fma(_1474, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1473)) - _1442;
        float _1486 = fma(_1475, cbModelParam._m0[31u].z, fma(_1474, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1473)) - _1446;
        float _1487 = fma(_1475, cbModelParam._m0[32u].z, fma(_1474, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1473)) - _1450;
        float _1491 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
        float _1504 = ((_1491 * _1485) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1442 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1491 * _1486) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1446 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1491 * _1487) / cbModelParam._m0[35u].z) + ((((((_1450 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        float _1541 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1508.x + (-0.5));
        float _1543 = _1541 * (_1508.y + (-0.5));
        float _1544 = _1541 * (_1508.z + (-0.5));
        float _1551 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1515.x + (-0.5));
        float _1553 = _1551 * (_1515.y + (-0.5));
        float _1554 = _1551 * (_1515.z + (-0.5));
        float _1561 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1522.x + (-0.5));
        float _1563 = _1561 * (_1522.y + (-0.5));
        float _1564 = _1561 * (_1522.z + (-0.5));
        float _1571 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1529.x + (-0.5));
        float _1573 = _1571 * (_1529.y + (-0.5));
        float _1574 = _1571 * (_1529.z + (-0.5));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = _1542 * 0.5;
        float _1579 = _1552 * 0.5;
        float _1580 = _1562 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_861, _862, _863), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4091 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1605 + 1.0))) + _1610) * _1575;
        float _1620 = _1543 * 0.5;
        float _1621 = _1553 * 0.5;
        float _1622 = _1563 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_861, _862, _863), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4124 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1647 + 1.0))) + _1652) * _1576;
        float _1662 = _1544 * 0.5;
        float _1663 = _1554 * 0.5;
        float _1664 = _1564 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_861, _862, _863), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4157 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1689 + 1.0))) + _1694) * _1577;
        _1711 = _1544;
        _1712 = _1543;
        _1713 = _1542;
        _1714 = _1554;
        _1715 = _1553;
        _1716 = _1552;
        _1717 = _1564;
        _1718 = _1563;
        _1719 = _1562;
        _1720 = _1577;
        _1721 = _1576;
        _1722 = _1575;
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
    }
    else
    {
        _1711 = _1402;
        _1712 = _1402;
        _1713 = _1402;
        _1714 = _1402;
        _1715 = _1402;
        _1716 = _1402;
        _1717 = _1402;
        _1718 = _1402;
        _1719 = _1402;
        _1720 = _1402;
        _1721 = _1402;
        _1722 = _1402;
        _1723 = 0.0;
        _1724 = 0.0;
        _1725 = 0.0;
    }
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1414)) + _1414;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1415)) + _1415;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1416)) + _1416;
    float _1758 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1735));
    float _1779 = _1036 * 0.5;
    float _1780 = _1037 * 0.5;
    float _1781 = _1038 * 0.5;
    float _1782 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1785 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1788 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1822;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1795 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1401, _1405, _1408, _1411));
        float _1799 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1803 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1810 = dot(vec4(cbModelParam._m0[39u]), vec4(_1779, _1780, _1781, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1833;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1824 = dot(vec4(cbModelParam._m0[40u]), vec4(_1779, _1780, _1781, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1837 = (_1833 * cbModelParam._m0[1u].x) + (_1822 * (1.0 - cbModelParam._m0[1u].x));
    float _1847 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _864);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1847 : min(cbModelParam._m0[25u].z, _1847));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1895 = fma(_1100, cbModelParam._m0[13u].z, fma(_1096, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1092)) + cbModelParam._m0[13u].w;
        float _1899 = fma(_1100, cbModelParam._m0[14u].z, fma(_1096, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1092)) + cbModelParam._m0[14u].w;
        float _1903 = fma(_1100, cbModelParam._m0[15u].z, fma(_1096, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1092)) + cbModelParam._m0[15u].w;
        float _1906 = fma(_1038, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036));
        float _1909 = fma(_1038, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036));
        float _1912 = fma(_1038, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036));
        float _1940;
        if (_1906 > 0.0)
        {
            _1940 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1940 = frontier_phi_14_12_ladder;
        }
        float _2164;
        if (_1909 > 0.0)
        {
            _2164 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2164 = frontier_phi_23_19_ladder;
        }
        float _2421;
        if (_1912 > 0.0)
        {
            _2421 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2421 = frontier_phi_35_30_ladder;
        }
        float _2423 = isnan(_2164) ? _1940 : (isnan(_1940) ? _2164 : min(_1940, _2164));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1906) + _1895;
        float _2429 = (_2424 * _1909) + _1899;
        float _2430 = (_2424 * _1912) + _1903;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2431;
        float _2435 = _2431 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 > _2435) || ((_2429 < _2433) || ((_2428 < _2433) || (_2428 > _2435))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2430, cbModelParam._m0[9u].z, fma(_2429, cbModelParam._m0[9u].y, _2428 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2430, cbModelParam._m0[10u].z, fma(_2429, cbModelParam._m0[10u].y, _2428 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2430, cbModelParam._m0[11u].z, fma(_2429, cbModelParam._m0[11u].y, _2428 * cbModelParam._m0[11u].x))), _1848);
            frontier_phi_13_35_ladder = _2558.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2558.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2558.x * cbModelParam._m0[1u].y;
        }
        _1928 = frontier_phi_13_35_ladder_2;
        _1930 = frontier_phi_13_35_ladder_1;
        _1932 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1036, _1037, _1038), _1848);
        _1928 = _1916.x * cbModelParam._m0[1u].y;
        _1930 = _1916.y * cbModelParam._m0[1u].y;
        _1932 = _1916.z * cbModelParam._m0[1u].y;
    }
    float _1936 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _864);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1936 : min(cbModelParam._m0[25u].w, _1936));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1990 = fma(_1100, cbModelParam._m0[21u].z, fma(_1096, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1092)) + cbModelParam._m0[21u].w;
        float _1994 = fma(_1100, cbModelParam._m0[22u].z, fma(_1096, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1092)) + cbModelParam._m0[22u].w;
        float _1998 = fma(_1100, cbModelParam._m0[23u].z, fma(_1096, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1092)) + cbModelParam._m0[23u].w;
        float _2001 = fma(_1038, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036));
        float _2004 = fma(_1038, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036));
        float _2007 = fma(_1038, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036));
        float _2169;
        if (_2001 > 0.0)
        {
            _2169 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2169 = frontier_phi_25_21_ladder;
        }
        float _2448;
        if (_2004 > 0.0)
        {
            _2448 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2448 = frontier_phi_37_32_ladder;
        }
        float _2661;
        if (_2007 > 0.0)
        {
            _2661 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2661 = frontier_phi_46_43_ladder;
        }
        float _2663 = isnan(_2448) ? _2169 : (isnan(_2169) ? _2448 : min(_2169, _2448));
        float _2664 = isnan(_2661) ? _2663 : (isnan(_2663) ? _2661 : min(_2663, _2661));
        float _2668 = (_2664 * _2001) + _1990;
        float _2669 = (_2664 * _2004) + _1994;
        float _2670 = (_2664 * _2007) + _1998;
        float _2671 = _2664 * 9.9999997473787516355514526367188e-05;
        float _2672 = (-1.0) - _2671;
        float _2674 = _2671 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2670 > _2674) || ((_2670 < _2672) || ((_2669 > _2674) || ((_2669 < _2672) || ((_2668 < _2672) || (_2668 > _2674))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2670, cbModelParam._m0[17u].z, fma(_2669, cbModelParam._m0[17u].y, _2668 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2670, cbModelParam._m0[18u].z, fma(_2669, cbModelParam._m0[18u].y, _2668 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2670, cbModelParam._m0[19u].z, fma(_2669, cbModelParam._m0[19u].y, _2668 * cbModelParam._m0[19u].x))), _1937);
            frontier_phi_22_46_ladder = _2892.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2892.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2892.x * cbModelParam._m0[1u].z;
        }
        _2026 = frontier_phi_22_46_ladder_2;
        _2028 = frontier_phi_22_46_ladder_1;
        _2030 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1036, _1037, _1038), _1937);
        _2026 = _2010.x * cbModelParam._m0[1u].z;
        _2028 = _2010.y * cbModelParam._m0[1u].z;
        _2030 = _2010.z * cbModelParam._m0[1u].z;
    }
    float _2043 = (((_1063 * _1013) + _1064) * _1028) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2045 = (((_1063 * _1015) + _1064) * _1028) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2047 = (((_1063 * _1016) + _1064) * _1028) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2050 = fma(_2047, cbSceneParam._m0[89u].z, fma(_2045, cbSceneParam._m0[89u].y, _2043 * cbSceneParam._m0[89u].x));
    float _2053 = fma(_2047, cbSceneParam._m0[90u].z, fma(_2045, cbSceneParam._m0[90u].y, _2043 * cbSceneParam._m0[90u].x));
    float _2056 = fma(_2047, cbSceneParam._m0[91u].z, fma(_2045, cbSceneParam._m0[91u].y, _2043 * cbSceneParam._m0[91u].x));
    vec4 _2064 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_950, _951));
    float _2066 = _2064.w;
    float _2078 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2066);
    float _2079 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2066);
    float _2080 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2066);
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_988 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _1028 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2123 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2127 = _2086 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_861, _862, _863));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_861, _862, _863));
    float _4293 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4304 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2103].x * _2109) * _2148) + (((cbLight._m0[_2113].x * _2078) * _2123) * _2146);
    float _2156 = ((_2109 * cbLight._m0[_2103].y) * _2148) + (((cbLight._m0[_2113].y * _2079) * _2123) * _2146);
    float _2157 = ((_2109 * cbLight._m0[_2103].z) * _2148) + (((cbLight._m0[_2113].z * _2080) * _2123) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2163)
    {
        _2174 = _2155;
        _2176 = _2156;
        _2178 = _2157;
    }
    else
    {
        uint _2182 = _2086 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4315 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2201 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2155;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2156;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2157;
    }
    bool _2181 = _2161.y == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2181)
    {
        _2219 = _2174;
        _2221 = _2176;
        _2223 = _2178;
    }
    else
    {
        uint _2392 = _2086 + 7u;
        float _2408 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4331 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2411 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2219 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2174;
        _2221 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2176;
        _2223 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2178;
    }
    uint _2226 = _2086 + 8u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _864) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2086].x + _942;
    float _2242 = cbLight._m0[_2086].y + _943;
    float _2243 = cbLight._m0[_2086].z + _944;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2086].xyz));
    float _4347 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _4358 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _2255 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2256 = dot(vec3(_861, _862, _863), vec3(_2248, _2249, _2250));
    float _4369 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2248, _2249, _2250));
    float _4380 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2240 * _2240;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0);
    float _2277 = 0.959999978542327880859375 - _1010;
    float _2279 = 0.959999978542327880859375 - _1011;
    float _2280 = 0.959999978542327880859375 - _1012;
    float _2287 = 1.0 - _2240;
    float _2298 = (0.5 / (((_2255 * ((_2254 * _2287) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2287) + _2240) * _2254))) * _2254;
    float _4391 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    uint _2314 = _2086 + 9u;
    float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _864) * 0.949999988079071044921875);
    float _2326 = _2325 * _2325;
    float _2327 = cbLight._m0[_2127].x + _942;
    float _2328 = cbLight._m0[_2127].y + _943;
    float _2329 = cbLight._m0[_2127].z + _944;
    float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
    float _2334 = _2333 * _2327;
    float _2335 = _2333 * _2328;
    float _2336 = _2333 * _2329;
    float _2337 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2127].xyz));
    float _4402 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2341 = dot(vec3(_861, _862, _863), vec3(_2334, _2335, _2336));
    float _4413 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2345 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2334, _2335, _2336));
    float _4424 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2349 = _2326 * _2326;
    float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
    float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0);
    float _2367 = 1.0 - _2326;
    float _2377 = (0.5 / (((_2255 * ((_2340 * _2367) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2367) + _2326) * _2340))) * _2340;
    float _4435 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
    float _2389 = (((((_2360 * _2277) + _1013) * cbLight._m0[_2314].x) * _2379) * _2109) + ((((cbLight._m0[_2226].x * _2078) * ((_2276 * _2277) + _1013)) * _2300) * _2123);
    float _2390 = (((((_2360 * _2279) + _1015) * cbLight._m0[_2314].y) * _2379) * _2109) + ((((cbLight._m0[_2226].y * _2079) * ((_2276 * _2279) + _1015)) * _2300) * _2123);
    float _2391 = (((((_2360 * _2280) + _1016) * cbLight._m0[_2314].z) * _2379) * _2109) + ((((cbLight._m0[_2226].z * _2080) * ((_2276 * _2280) + _1016)) * _2300) * _2123);
    float _2453;
    float _2455;
    float _2457;
    if (_2163)
    {
        _2453 = _2389;
        _2455 = _2390;
        _2457 = _2391;
    }
    else
    {
        uint _2459 = _2086 + 2u;
        uint _2463 = _2086 + 10u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _864) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _942;
        float _2480 = cbLight._m0[_2459].y + _943;
        float _2481 = cbLight._m0[_2459].z + _944;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2459].xyz));
        float _4446 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2493 = dot(vec3(_861, _862, _863), vec3(_2486, _2487, _2488));
        float _4457 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4468 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
        float _2519 = 1.0 - _2478;
        float _2529 = (0.5 / (((_2255 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2519) + _2478) * _2492))) * _2492;
        float _4479 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2453 = (((((_2512 * _2277) + _1013) * cbLight._m0[_2463].x) * _2531) * _2532) + _2389;
        _2455 = (((((_2512 * _2279) + _1015) * cbLight._m0[_2463].y) * _2531) * _2532) + _2390;
        _2457 = (((((_2512 * _2280) + _1016) * cbLight._m0[_2463].z) * _2531) * _2532) + _2391;
    }
    float _2567;
    float _2569;
    float _2571;
    if (_2181)
    {
        _2567 = _2453;
        _2569 = _2455;
        _2571 = _2457;
    }
    else
    {
        uint _2578 = _2086 + 3u;
        uint _2582 = _2086 + 11u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _864) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _942;
        float _2599 = cbLight._m0[_2578].y + _943;
        float _2600 = cbLight._m0[_2578].z + _944;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2578].xyz));
        float _4495 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2612 = dot(vec3(_861, _862, _863), vec3(_2605, _2606, _2607));
        float _4506 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4517 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2255 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2638) + _2597) * _2611))) * _2611;
        float _4528 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2567 = (((((_2631 * _2277) + _1013) * cbLight._m0[_2582].x) * _2650) * _2651) + _2453;
        _2569 = (((((_2631 * _2279) + _1015) * cbLight._m0[_2582].y) * _2650) * _2651) + _2455;
        _2571 = (((((_2631 * _2280) + _1016) * cbLight._m0[_2582].z) * _2650) * _2651) + _2457;
    }
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_2084.y == 0u)
    {
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2726;
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2726;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2726;
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.x;
        uint _2753 = uint((float(_2741.y) * floor(float(uint(cbSceneParam._m0[85u].y * _951) / _2742))) + floor(float(uint(cbSceneParam._m0[85u].x * _950) / _2742)));
        float _2763 = (log2(_2729 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2764 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        uint _2767 = uint(isnan(14.0) ? _2764 : (isnan(_2764) ? 14.0 : min(_2764, 14.0)));
        uvec4 _2772 = texelFetch(g_lightClusterGridBuffer, int(((_2767 << 2u) + (_2753 << 6u)) >> 2u));
        uint _2773 = _2772.x;
        uint _2774 = _2741.z;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((((1u << ((_2774 >> 4u) & 15u)) + 4294967295u) & _2773) == 0u) || ((_2774 & 240u) == 0u))
        {
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
        }
        else
        {
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            uint _3046 = 0u;
            uint _3055;
            bool _3056;
            for (;;)
            {
                _3055 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3046 << 2u)) >> 2u)).x;
                _3056 = _3055 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3056)
                {
                    frontier_phi_61_pred = _3040;
                    frontier_phi_61_pred_1 = _3045;
                    frontier_phi_61_pred_2 = _3044;
                    frontier_phi_61_pred_3 = _3043;
                    frontier_phi_61_pred_4 = _3042;
                    frontier_phi_61_pred_5 = _3041;
                }
                else
                {
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    uint _3170;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3055;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    for (;;)
                    {
                        uint _3174 = uint(findLSB(_3170)) + (_3046 << 5u);
                        uint _3171 = (_3170 + 4294967295u) & _3170;
                        uint _3176 = _3174 * 48u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3196 = (_3174 * 48u) + 4u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3215 = (_3174 * 48u) + 8u;
                        vec3 _3226 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x));
                        float _3230 = _3190.x - _2727;
                        float _3231 = _3190.y - _2728;
                        float _3232 = _3190.z - _2729;
                        float _3233 = dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232));
                        float _3236 = inversesqrt(_3233);
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3240 = dot(vec3(_969, _972, _975), vec3(_3237, _3238, _3239));
                        float _3245 = 1.0 - (_3233 * _3190.w);
                        float _4554 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3246 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3247 = sqrt(_3233) * _3209.w;
                        float _3250 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                        float _3251 = _3250 * _3250;
                        float _3254 = ((1.0 - _3251) * _3240) + _3251;
                        float _3257 = _3247 * _3247;
                        float _3261 = ((isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))) * _3246) / ((_3257 * 0.699999988079071044921875) + 1.0);
                        float _3265 = (-0.0) - _2727;
                        float _3266 = (-0.0) - _2728;
                        float _3267 = (-0.0) - _2729;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3282 = exp2(log2(1.0 / ((_3257 * 3.5) + 5.0)) * 0.25);
                        float _3283 = 1.0 - _1044;
                        float _3290 = sqrt(1.0 - ((1.0 - (_3283 * _3283)) * (1.0 - (_3282 * _3282))));
                        float _3291 = _3290 * _3290;
                        float _3292 = _3291 * _3291;
                        float _3293 = _3272 + _3237;
                        float _3294 = _3273 + _3238;
                        float _3295 = _3274 + _3239;
                        float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                        float _3303 = dot(vec3(_969, _972, _975), vec3(_3272, _3273, _3274));
                        float _4570 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3306 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3307 = dot(vec3(_969, _972, _975), vec3(_3299 * _3293, _3299 * _3294, _3299 * _3295));
                        float _4581 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3314 = ((_3310 * _3310) * (_3292 + (-1.0))) + 1.0;
                        float _3315 = _3250 * _3291;
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3240) + _3316;
                        float _4592 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3320 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3321 = 1.0 - _3291;
                        float _3331 = (0.5 / (((_3320 * ((_3306 * _3321) + _3291)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3291) * _3306))) * _3320;
                        float _4603 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3342 = (((_3292 * 3.1415927410125732421875) * (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) / ((_3314 * _3314) * ((_3257 * 2.1991131305694580078125) + 3.141590118408203125))) * _3246;
                        _3099 = (_3261 * _3209.x) + _3167;
                        _3100 = (_3261 * _3209.y) + _3168;
                        _3101 = (_3261 * _3209.z) + _3169;
                        _3096 = (_3342 * _3226.x) + _3164;
                        _3097 = (_3342 * _3226.y) + _3165;
                        _3098 = (_3342 * _3226.z) + _3166;
                        if (_3171 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3171;
                        }
                    }
                    frontier_phi_61_pred = _3096;
                    frontier_phi_61_pred_1 = _3101;
                    frontier_phi_61_pred_2 = _3100;
                    frontier_phi_61_pred_3 = _3099;
                    frontier_phi_61_pred_4 = _3098;
                    frontier_phi_61_pred_5 = _3097;
                }
                _2898 = frontier_phi_61_pred;
                _2908 = frontier_phi_61_pred_1;
                _2906 = frontier_phi_61_pred_2;
                _2904 = frontier_phi_61_pred_3;
                _2902 = frontier_phi_61_pred_4;
                _2900 = frontier_phi_61_pred_5;
                uint _3047 = _3046 + 1u;
                if (_3047 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3040 = _2898;
                    _3041 = _2900;
                    _3042 = _2902;
                    _3043 = _2904;
                    _3044 = _2906;
                    _3045 = _2908;
                    _3046 = _3047;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
        }
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.z;
        uint _2914 = (_2912 >> 8u) & 15u;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((4294967295u << _2914) & _2773) == 0u)
        {
            _3008 = _2897;
            _3010 = _2899;
            _3012 = _2901;
            _3014 = _2903;
            _3016 = _2905;
            _3018 = _2907;
        }
        else
        {
            float _3033 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
            float _3034 = _3033 * _2727;
            float _3035 = _3033 * _2728;
            float _3036 = _3033 * _2729;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2914 < ((_2912 >> 12u) & 15u))
            {
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3147 = _2897;
                float _3148 = _2899;
                float _3149 = _2901;
                float _3150 = _2903;
                float _3151 = _2905;
                float _3152 = _2907;
                uint _3153 = _2914;
                uint _3162;
                bool _3163;
                for (;;)
                {
                    _3162 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                    _3163 = _3162 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3163)
                    {
                        frontier_phi_67_pred = _3150;
                        frontier_phi_67_pred_1 = _3151;
                        frontier_phi_67_pred_2 = _3152;
                        frontier_phi_67_pred_3 = _3149;
                        frontier_phi_67_pred_4 = _3148;
                        frontier_phi_67_pred_5 = _3147;
                    }
                    else
                    {
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3360 = _3147;
                        float _3361 = _3148;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        float _3365 = _3152;
                        uint _3366 = _3162;
                        uint _3367;
                        vec4 _3392;
                        float _3393;
                        vec4 _3408;
                        vec3 _3420;
                        vec4 _3435;
                        vec4 _3450;
                        float _3496;
                        bool _3497;
                        for (;;)
                        {
                            uint _3377 = ((_3153 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3366));
                            _3367 = (_3366 + 4294967295u) & _3366;
                            uint _3379 = _3377 * 40u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            _3393 = _3392.w;
                            uint _3395 = (_3377 * 40u) + 4u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3377 * 40u) + 8u;
                            _3420 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x));
                            uint _3422 = (_3377 * 40u) + 16u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3377 * 40u) + 20u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3377 * 40u) + 24u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3471 = (_3377 * 40u) + 28u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            _3496 = fma(_2729, _3484.z, fma(_2728, _3484.y, _3484.x * _2727)) + _3484.w;
                            _3497 = !((fma(_2729, _3465.z, fma(_2728, _3465.y, _3465.x * _2727)) + _3465.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3497)
                            {
                                float _3524 = _3392.x - _2727;
                                float _3525 = _3392.y - _2728;
                                float _3526 = _3392.z - _2729;
                                float _3527 = dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526));
                                float _3530 = inversesqrt(_3527);
                                float _3531 = _3530 * _3524;
                                float _3532 = _3530 * _3525;
                                float _3533 = _3530 * _3526;
                                float _3537 = 1.0 - (_3527 / (_3393 * _3393));
                                float _4614 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3542 = sqrt(_3527) * _3408.w;
                                float _3544 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                                float _3545 = _3544 * _3544;
                                float _3548 = ((1.0 - _3545) * dot(vec3(_3531, _3532, _3533), vec3(_969, _972, _975))) + _3545;
                                float _3551 = _3542 * _3542;
                                float _3555 = (fma(_2729, _3435.z, fma(_2728, _3435.y, _3435.x * _2727)) + _3435.w) / _3496;
                                float _3556 = (fma(_2729, _3450.z, fma(_2728, _3450.y, _3450.x * _2727)) + _3450.w) / _3496;
                                float _3560 = 1.0 - dot(vec2(_3555, _3556), vec2(_3555, _3556));
                                float _4630 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3562 = _3561 * (((isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0))) * _3538) / ((_3551 * 0.699999988079071044921875) + 1.0));
                                float _3574 = exp2(log2(1.0 / ((_3551 * 3.5) + 5.0)) * 0.25);
                                float _3575 = 1.0 - _1044;
                                float _3582 = sqrt(1.0 - ((1.0 - (_3575 * _3575)) * (1.0 - (_3574 * _3574))));
                                float _3583 = _3582 * _3582;
                                float _3584 = _3583 * _3583;
                                float _3585 = _3531 - _3034;
                                float _3586 = _3532 - _3035;
                                float _3587 = _3533 - _3036;
                                float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                                float _3595 = dot(vec3(_969, _972, _975), vec3((-0.0) - _3034, (-0.0) - _3035, (-0.0) - _3036));
                                float _4641 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3599 = dot(vec3(_969, _972, _975), vec3(_3591 * _3585, _3591 * _3586, _3591 * _3587));
                                float _4652 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3606 = ((_3602 * _3602) * (_3584 + (-1.0))) + 1.0;
                                float _3607 = _3544 * _3583;
                                float _3608 = _3607 * _3607;
                                float _3614 = ((1.0 - _3608) * dot(vec3(_969, _972, _975), vec3(_3531, _3532, _3533))) + _3608;
                                float _4663 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3616 = 1.0 - _3583;
                                float _3626 = (0.5 / (((_3615 * ((_3598 * _3616) + _3583)) + 9.9999999392252902907785028219223e-09) + (((_3615 * _3616) + _3583) * _3598))) * _3615;
                                float _4674 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3636 = (_3561 * _3538) * (((_3584 * 3.1415927410125732421875) * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) / ((_3606 * _3606) * ((_3551 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3636 * _3420.x;
                                frontier_phi_73_pred_1 = _3636 * _3420.y;
                                frontier_phi_73_pred_2 = _3562 * _3408.z;
                                frontier_phi_73_pred_3 = _3562 * _3408.y;
                                frontier_phi_73_pred_4 = _3562 * _3408.x;
                                frontier_phi_73_pred_5 = _3636 * _3420.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3640 = frontier_phi_73_pred;
                            _3641 = frontier_phi_73_pred_1;
                            _3645 = frontier_phi_73_pred_2;
                            _3644 = frontier_phi_73_pred_3;
                            _3643 = frontier_phi_73_pred_4;
                            _3642 = frontier_phi_73_pred_5;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            if (_3367 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3367;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3350;
                        frontier_phi_67_pred_1 = _3351;
                        frontier_phi_67_pred_2 = _3352;
                        frontier_phi_67_pred_3 = _3349;
                        frontier_phi_67_pred_4 = _3348;
                        frontier_phi_67_pred_5 = _3347;
                    }
                    _3015 = frontier_phi_67_pred;
                    _3017 = frontier_phi_67_pred_1;
                    _3019 = frontier_phi_67_pred_2;
                    _3013 = frontier_phi_67_pred_3;
                    _3011 = frontier_phi_67_pred_4;
                    _3009 = frontier_phi_67_pred_5;
                    uint _3154 = _3153 + 1u;
                    if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3147 = _3009;
                        _3148 = _3011;
                        _3149 = _3013;
                        _3150 = _3015;
                        _3151 = _3017;
                        _3152 = _3019;
                        _3153 = _3154;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3017;
                frontier_phi_55_56_ladder_1 = _3019;
                frontier_phi_55_56_ladder_2 = _3015;
                frontier_phi_55_56_ladder_3 = _3013;
                frontier_phi_55_56_ladder_4 = _3011;
                frontier_phi_55_56_ladder_5 = _3009;
            }
            else
            {
                frontier_phi_55_56_ladder = _2905;
                frontier_phi_55_56_ladder_1 = _2907;
                frontier_phi_55_56_ladder_2 = _2903;
                frontier_phi_55_56_ladder_3 = _2901;
                frontier_phi_55_56_ladder_4 = _2899;
                frontier_phi_55_56_ladder_5 = _2897;
            }
            _3008 = frontier_phi_55_56_ladder_5;
            _3010 = frontier_phi_55_56_ladder_4;
            _3012 = frontier_phi_55_56_ladder_3;
            _3014 = frontier_phi_55_56_ladder_2;
            _3016 = frontier_phi_55_56_ladder;
            _3018 = frontier_phi_55_56_ladder_1;
        }
        float _3023 = isnan(1.0) ? _1028 : (isnan(_1028) ? 1.0 : min(_1028, 1.0));
        _2786 = (_3023 * _3014) + _2219;
        _2788 = (_3023 * _3016) + _2221;
        _2790 = (_3023 * _3018) + _2223;
        _2792 = ((_3008 * _1013) * _3023) + _2567;
        _2794 = ((_3010 * _1015) * _3023) + _2569;
        _2796 = ((_3012 * _1016) * _3023) + _2571;
    }
    else
    {
        _2786 = _2219;
        _2788 = _2221;
        _2790 = _2223;
        _2792 = _2567;
        _2794 = _2569;
        _2796 = _2571;
    }
    uint _2802 = _989 + uint(cbMatDynParam._m0[0u].w);
    float _2808 = (isnan(cbMtdParam._m0[24u].y) ? _725 : (isnan(_725) ? cbMtdParam._m0[24u].y : min(_725, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4690 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4701 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4712 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _2831 = (((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2786 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1028))) + ((_2792 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1837)) * cbPerFrame._m0[3u].x)) + ((_2808 * (((((_784.x - _781) * _763) + _781) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _717) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2802].x);
    float _2833 = (((_2808 * (((((_784.y - _782) * _763) + _782) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_706.y - _704) * _684) + _704)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2802].y) + ((_2794 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1837)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2788 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1028)));
    float _2835 = (((_2808 * (((((_784.z - _783) * _763) + _783) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_706.z - _705) * _684) + _705)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2802].z) + ((_2796 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1837)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2790 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1028)));
    uint _2839 = _988 + 6u;
    float _2847 = _950 / cbSceneParam._m0[86u].x;
    float _2848 = _951 / cbSceneParam._m0[86u].y;
    vec4 _2862 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, (log2((isnan(cbSceneParam._m0[77u].w) ? _884 : (isnan(_884) ? cbSceneParam._m0[77u].w : min(_884, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2864 = _2862.x;
    float _2865 = _2862.y;
    float _2866 = _2862.z;
    float _2867 = _2862.w;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_884 > cbSceneParam._m0[78u].w)
    {
        float _2922 = isnan(_884) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _884 : min(cbSceneParam._m0[80u].w, _884));
        float _2923 = _2922 / _884;
        float _2934 = _2923 * _935;
        float _2935 = _936 * _2923;
        float _2936 = (-0.0) - _2935;
        float _2937 = _2923 * _937;
        float _2939 = (cbSceneParam._m0[77u].w * _2936) / _2922;
        float _2940 = _2939 + cbSceneParam._m0[79u].w;
        float _2941 = cbSceneParam._m0[79u].w - _2935;
        float _2947 = sqrt(((_2934 * _2934) + (_2935 * _2935)) + (_2937 * _2937));
        float _2950 = (1.0 - (cbSceneParam._m0[77u].w / _2922)) * _2947;
        float _2955 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2957 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3109;
        if (abs((_2936 - _2939) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3109 = ((((_2940 > 0.0) ? exp2(_2955 * _2940) : (2.0 - exp2(_2957 * _2940))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2950;
        }
        else
        {
            float _3069 = 1.0 / cbSceneParam._m0[80u].x;
            float _3070 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : max(_2940, _2941));
            float _3071 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : min(_2940, _2941));
            float _3080 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : min(_3070, 0.0));
            float _3081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : min(_3071, 0.0));
            _3109 = ((abs(_2947 / _2936) * cbSceneParam._m0[80u].y) * ((((_3080 - _3081) * 2.0) - ((exp2(_2955 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0)))) - exp2(_2955 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))))) * _3069)) - ((exp2(_2957 * _3080) - exp2(_2957 * _3081)) * _3069))) + (_2950 * cbSceneParam._m0[80u].z);
        }
        vec4 _3111 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, 1.0), 0.0);
        float _3120 = exp2((_3109 * (-1.44269502162933349609375)) * (1.0 - _3111.w));
        float _3121 = log2(_3120);
        float _3137 = log2(_2867);
        _2959 = (exp2(_3137 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].x)) * _3111.x) / cbSceneParam._m0[78u].x)) + _2864;
        _2961 = (exp2(_3137 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].y)) * _3111.y) / cbSceneParam._m0[78u].y)) + _2865;
        _2963 = (exp2(_3137 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3121 * cbSceneParam._m0[78u].z)) * _3111.z) / cbSceneParam._m0[78u].z)) + _2866;
        _2965 = _3120 * _2867;
    }
    else
    {
        _2959 = _2864;
        _2961 = _2865;
        _2963 = _2866;
        _2965 = _2867;
    }
    float _2976 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2977 = _2976 == 3.0;
    float _2978 = log2(_2965);
    float _2985 = exp2(_2978 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0)));
    float _2986 = exp2(_2978 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0)));
    float _2987 = exp2(_2978 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0)));
    float _2996 = (_2976 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2996 * (_2977 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2959)));
    SV_Target.y = _2996 * (_2977 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.z = _2996 * (_2977 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.w = cbInstanceData._m0[_2839].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2839].w;
}


