#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1407;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _281 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _294 = exp2(log2(_281.w * cbMtdParam._m0[26u].x) * cbMtdParam._m0[18u].w);
    float _295 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _296 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    vec4 _312 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _316 = _312.z;
    float _321 = exp2(log2(_316 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    vec4 _335 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _360 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _371 = cbMtdParam._m0[9u].x * _360.x;
    float _372 = cbMtdParam._m0[9u].y * _360.y;
    float _373 = cbMtdParam._m0[9u].z * _360.z;
    float _380 = (((cbMtdParam._m0[10u].x * _335.x) - _371) * _323) + _371;
    float _381 = (((cbMtdParam._m0[10u].y * _335.y) - _372) * _323) + _372;
    float _382 = (((cbMtdParam._m0[10u].z * _335.z) - _373) * _323) + _373;
    vec4 _395 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _397 = _395.x;
    float _401 = exp2(log2(_397) * cbMtdParam._m0[19u].z);
    vec4 _414 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _434 = (((cbMtdParam._m0[12u].x * _414.x) - _380) * _401) + _380;
    float _435 = (((cbMtdParam._m0[12u].y * _414.y) - _381) * _401) + _381;
    float _436 = (((cbMtdParam._m0[12u].z * _414.z) - _382) * _401) + _382;
    vec4 _449 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _474 = (_281.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _449.x) - _434) * _296) + _434);
    float _476 = (_281.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _449.y) - _435) * _296) + _435);
    float _478 = (_281.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _449.z) - _436) * _296) + _436);
    float _480 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _489 = (_480 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _480))) * (cbMtdParam._m0[22u].y + 1.0);
    float _4058 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _497 = ((cbMtdParam._m0[14u].x - _474) * _490) + _474;
    float _498 = ((cbMtdParam._m0[14u].y - _476) * _490) + _476;
    float _499 = ((cbMtdParam._m0[14u].z - _478) * _490) + _478;
    float _501 = _397 - (_480 * _397);
    vec4 _517 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _535 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _541 = cbMtdParam._m0[18u].x + _535.z;
    float _544 = (((cbMtdParam._m0[18u].z + _517.z) - _541) * _323) + _541;
    vec4 _556 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _568 = (((_556.z - _544) + cbMtdParam._m0[24u].z) * _401) + _544;
    float _574 = ((((_316 * 2.0) * _568) - _568) * cbMtdParam._m0[20u].z) + _568;
    vec4 _587 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _596 = (((cbMtdParam._m0[19u].y + _587.z) - _574) * _296) + _574;
    vec4 _612 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _627 = ((cbMtdParam._m0[21u].w * _480) * ((_612.z * cbMtdParam._m0[21u].z) - _596)) + _596;
    float _638 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _660 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_638 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_638 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _664 = cbPerFrame._m0[22u].x * 2.0;
    float _665 = _664 * cbMtdParam._m0[25u].y;
    float _668 = (_660.x * 0.5) + (-0.25);
    float _671 = (_660.y * 0.5) + (-0.25);
    float _672 = _671 * cbMtdParam._m0[25u].x;
    float _674 = (-0.0) - (cbMtdParam._m0[25u].x * _668);
    float _676 = fract(_665);
    float _678 = fract(_665 + 0.5);
    float _689 = abs((_676 * 2.0) + (-1.0));
    vec4 _706 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_676 * _674) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_672 * _676) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _708 = _706.x;
    float _709 = _706.y;
    float _710 = _706.z;
    vec4 _711 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_678 * _674) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_672 * _678) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _722 = ((_711.x - _708) * _689) + _708;
    float _729 = exp2(log2(_722 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _730 = isnan(cbMtdParam._m0[24u].x) ? _729 : (isnan(_729) ? cbMtdParam._m0[24u].x : max(_729, cbMtdParam._m0[24u].x));
    float _751 = _664 * cbMtdParam._m0[25u].w;
    float _752 = _671 * cbMtdParam._m0[25u].z;
    float _754 = (-0.0) - (cbMtdParam._m0[25u].z * _668);
    float _755 = fract(_751);
    float _757 = fract(_751 + 0.5);
    float _768 = abs((_755 * 2.0) + (-1.0));
    vec4 _784 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_755 * _754) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_752 * _755) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _786 = _784.x;
    float _787 = _784.y;
    float _788 = _784.z;
    vec4 _789 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_757 * _754) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_752 * _757) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _818 = ((_517.x - _537) * _323) + _537;
    float _819 = ((_517.y - _538) * _323) + _538;
    float _824 = ((_556.x - _818) * _401) + _818;
    float _825 = ((_556.y - _819) * _401) + _819;
    float _834 = ((((_587.x - _824) * _296) + _824) * 2.0) + (-1.0);
    float _835 = ((((_587.y - _825) * _296) + _825) * 2.0) + (-1.0);
    float _836 = dot(vec2(_834, _835), vec2(_834, _835));
    float _4079 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _841 = sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))));
    float _851 = ((cbMtdParam._m0[20u].w * ((_312.x * 2.0) + (-1.0))) + _834) + ((((_612.x * 2.0) + (-1.0)) * _480) * cbMtdParam._m0[21u].y);
    float _852 = ((cbMtdParam._m0[20u].w * ((_312.y * 2.0) + (-1.0))) + _835) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_612.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _855 = fma(_841, _228 * NORMAL.x, fma(_852, _235 * TANGENT.x, (_221 * _213) * _851));
    float _858 = fma(_841, _228 * NORMAL.y, fma(_852, _235 * TANGENT.y, (_221 * _214) * _851));
    float _861 = fma(_841, _228 * NORMAL.z, fma(_852, _235 * TANGENT.z, (_221 * _215) * _851));
    float _865 = inversesqrt(dot(vec3(_855, _858, _861), vec3(_855, _858, _861)));
    float _866 = _865 * _855;
    float _867 = _865 * _858;
    float _868 = _865 * _861;
    float _4090 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _869 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4112 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4123 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4134 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _873 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _940 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _930);
    float _941 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _930);
    float _942 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _930);
    float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
    float _947 = _940 * _946;
    float _948 = _941 * _946;
    float _949 = _942 * _946;
    float _955 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _956 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _974 = fma(_868, cbSceneParam._m0[5u].z, fma(_867, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _866));
    float _977 = fma(_868, cbSceneParam._m0[6u].z, fma(_867, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _866));
    float _980 = fma(_868, cbSceneParam._m0[7u].z, fma(_867, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _866));
    uint _993 = uint(roundEven(NORMAL.w)) * 13u;
    uint _994 = _993 + 9u;
    uint _995 = _994 + uint(cbMatDynParam._m0[0u].w);
    float _1001 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * cbInstanceData._m0[_995].x;
    float _1002 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_995].y;
    float _1003 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_995].z;
    float _4145 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1005 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1006 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _1007 = 1.0 - _873;
    float _1008 = _1004 * _1007;
    float _1009 = _1005 * _1007;
    float _1010 = _1006 * _1007;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _873;
    float _1016 = (_1005 + (-0.039999999105930328369140625)) * _873;
    float _1017 = (_1006 + (-0.039999999105930328369140625)) * _873;
    float _1018 = _1015 + 0.039999999105930328369140625;
    float _1020 = _1016 + 0.039999999105930328369140625;
    float _1021 = _1017 + 0.039999999105930328369140625;
    vec4 _1030 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _955, cbSceneParam._m0[86u].y * _956));
    float _1033 = _1030.x * TEXCOORD_3.w;
    float _1034 = dot(vec3(_866, _867, _868), vec3(_947, _948, _949));
    float _1037 = _1034 * 2.0;
    float _1041 = (_1037 * _866) - _947;
    float _1042 = (_1037 * _867) - _948;
    float _1043 = (_1037 * _868) - _949;
    float _1047 = abs(dot(vec3(_947, _948, _949), vec3(_866, _867, _868)));
    float _4178 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1049 = sqrt(_869);
    float _1062 = exp2((_1049 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1049 * 3.0));
    float _1068 = (1.0 - _1062) * ((_1049 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1069 = _1062 * _1049;
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1406;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1132 = fma(_1105, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1097));
        float _1136 = fma(_1105, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1097));
        float _1140 = fma(_1105, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1097));
        float _1164 = _1097 + _866;
        float _1165 = _1101 + _867;
        float _1166 = _1105 + _868;
        float _1176 = fma(_1166, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164)) - _1132;
        float _1177 = fma(_1166, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164)) - _1136;
        float _1178 = fma(_1166, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164)) - _1140;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1132 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1136 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[34u].z) + ((((((_1140 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1234 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1200.x + (-0.5));
        float _1236 = _1234 * (_1200.y + (-0.5));
        float _1237 = _1234 * (_1200.z + (-0.5));
        float _1244 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1207.x + (-0.5));
        float _1246 = _1244 * (_1207.y + (-0.5));
        float _1247 = _1244 * (_1207.z + (-0.5));
        float _1254 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1214.x + (-0.5));
        float _1256 = _1254 * (_1214.y + (-0.5));
        float _1257 = _1254 * (_1214.z + (-0.5));
        float _1264 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1221.x + (-0.5));
        float _1266 = _1264 * (_1221.y + (-0.5));
        float _1267 = _1264 * (_1221.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1288 = (dot(vec3(_866, _867, _868), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1298 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4226 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1300 + 1.0))) + _1305) * _1268;
        float _1315 = _1236 * 0.5;
        float _1316 = _1246 * 0.5;
        float _1317 = _1256 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_866, _867, _868), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4259 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1342 + 1.0))) + _1347) * _1269;
        float _1357 = _1237 * 0.5;
        float _1358 = _1247 * 0.5;
        float _1359 = _1257 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_866, _867, _868), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4292 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1384 + 1.0))) + _1389) * _1270;
        _1406 = _1237;
        _1408 = _1236;
        _1409 = _1235;
        _1410 = _1247;
        _1411 = _1246;
        _1412 = _1245;
        _1413 = _1257;
        _1414 = _1256;
        _1415 = _1255;
        _1416 = _1270;
        _1417 = _1269;
        _1418 = _1268;
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1407;
        _1408 = _1407;
        _1409 = _1407;
        _1410 = _1407;
        _1411 = _1407;
        _1412 = _1407;
        _1413 = _1407;
        _1414 = _1407;
        _1415 = _1407;
        _1416 = _1407;
        _1417 = _1407;
        _1418 = _1407;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1447 = fma(_1105, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097));
        float _1451 = fma(_1105, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097));
        float _1455 = fma(_1105, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097));
        float _1478 = _1097 + _866;
        float _1479 = _1101 + _867;
        float _1480 = _1105 + _868;
        float _1490 = fma(_1480, cbModelParam._m0[30u].z, fma(_1479, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1478)) - _1447;
        float _1491 = fma(_1480, cbModelParam._m0[31u].z, fma(_1479, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1478)) - _1451;
        float _1492 = fma(_1480, cbModelParam._m0[32u].z, fma(_1479, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1478)) - _1455;
        float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
        float _1509 = ((_1496 * _1490) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1447 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1496 * _1491) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1451 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1496 * _1492) / cbModelParam._m0[35u].z) + ((((((_1455 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1546 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1513.x + (-0.5));
        float _1548 = _1546 * (_1513.y + (-0.5));
        float _1549 = _1546 * (_1513.z + (-0.5));
        float _1556 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1520.x + (-0.5));
        float _1558 = _1556 * (_1520.y + (-0.5));
        float _1559 = _1556 * (_1520.z + (-0.5));
        float _1566 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1527.x + (-0.5));
        float _1568 = _1566 * (_1527.y + (-0.5));
        float _1569 = _1566 * (_1527.z + (-0.5));
        float _1576 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1534.x + (-0.5));
        float _1578 = _1576 * (_1534.y + (-0.5));
        float _1579 = _1576 * (_1534.z + (-0.5));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1547 * 0.5;
        float _1584 = _1557 * 0.5;
        float _1585 = _1567 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_866, _867, _868), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4355 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1610 + 1.0))) + _1615) * _1580;
        float _1625 = _1548 * 0.5;
        float _1626 = _1558 * 0.5;
        float _1627 = _1568 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_866, _867, _868), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4388 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1652 + 1.0))) + _1657) * _1581;
        float _1667 = _1549 * 0.5;
        float _1668 = _1559 * 0.5;
        float _1669 = _1569 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_866, _867, _868), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4421 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1694 + 1.0))) + _1699) * _1582;
        _1716 = _1549;
        _1717 = _1548;
        _1718 = _1547;
        _1719 = _1559;
        _1720 = _1558;
        _1721 = _1557;
        _1722 = _1569;
        _1723 = _1568;
        _1724 = _1567;
        _1725 = _1582;
        _1726 = _1581;
        _1727 = _1580;
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
    }
    else
    {
        _1716 = _1407;
        _1717 = _1407;
        _1718 = _1407;
        _1719 = _1407;
        _1720 = _1407;
        _1721 = _1407;
        _1722 = _1407;
        _1723 = _1407;
        _1724 = _1407;
        _1725 = _1407;
        _1726 = _1407;
        _1727 = _1407;
        _1728 = 0.0;
        _1729 = 0.0;
        _1730 = 0.0;
    }
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1419)) + _1419;
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1420)) + _1420;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1421)) + _1421;
    float _1763 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1740));
    float _1784 = _1041 * 0.5;
    float _1785 = _1042 * 0.5;
    float _1786 = _1043 * 0.5;
    float _1787 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1790 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1793 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1827;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1800 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1406, _1410, _1413, _1416));
        float _1804 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1808 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1815 = dot(vec4(cbModelParam._m0[39u]), vec4(_1784, _1785, _1786, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1838;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1829 = dot(vec4(cbModelParam._m0[40u]), vec4(_1784, _1785, _1786, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1842 = (_1838 * cbModelParam._m0[1u].x) + (_1827 * (1.0 - cbModelParam._m0[1u].x));
    float _1852 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _869);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1852 : min(cbModelParam._m0[25u].z, _1852));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1900 = fma(_1105, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097)) + cbModelParam._m0[13u].w;
        float _1904 = fma(_1105, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097)) + cbModelParam._m0[14u].w;
        float _1908 = fma(_1105, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097)) + cbModelParam._m0[15u].w;
        float _1911 = fma(_1043, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041));
        float _1914 = fma(_1043, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041));
        float _1917 = fma(_1043, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041));
        float _1945;
        if (_1911 > 0.0)
        {
            _1945 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1945 = frontier_phi_14_12_ladder;
        }
        float _2116;
        if (_1914 > 0.0)
        {
            _2116 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2116 = frontier_phi_23_19_ladder;
        }
        float _2412;
        if (_1917 > 0.0)
        {
            _2412 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2412 = frontier_phi_35_30_ladder;
        }
        float _2414 = isnan(_2116) ? _1945 : (isnan(_1945) ? _2116 : min(_1945, _2116));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1911) + _1900;
        float _2420 = (_2415 * _1914) + _1904;
        float _2421 = (_2415 * _1917) + _1908;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2422;
        float _2426 = _2422 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 > _2426) || ((_2420 < _2424) || ((_2419 < _2424) || (_2419 > _2426))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2421, cbModelParam._m0[9u].z, fma(_2420, cbModelParam._m0[9u].y, _2419 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2421, cbModelParam._m0[10u].z, fma(_2420, cbModelParam._m0[10u].y, _2419 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2421, cbModelParam._m0[11u].z, fma(_2420, cbModelParam._m0[11u].y, _2419 * cbModelParam._m0[11u].x))), _1853);
            frontier_phi_13_35_ladder = _2566.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2566.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2566.x * cbModelParam._m0[1u].y;
        }
        _1933 = frontier_phi_13_35_ladder_2;
        _1935 = frontier_phi_13_35_ladder_1;
        _1937 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1041, _1042, _1043), _1853);
        _1933 = _1921.x * cbModelParam._m0[1u].y;
        _1935 = _1921.y * cbModelParam._m0[1u].y;
        _1937 = _1921.z * cbModelParam._m0[1u].y;
    }
    float _1941 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _869);
    float _1942 = isnan(_1941) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1941 : min(cbModelParam._m0[25u].w, _1941));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1995 = fma(_1105, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097)) + cbModelParam._m0[21u].w;
        float _1999 = fma(_1105, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097)) + cbModelParam._m0[22u].w;
        float _2003 = fma(_1105, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097)) + cbModelParam._m0[23u].w;
        float _2006 = fma(_1043, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041));
        float _2009 = fma(_1043, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041));
        float _2012 = fma(_1043, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041));
        float _2121;
        if (_2006 > 0.0)
        {
            _2121 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2121 = frontier_phi_25_21_ladder;
        }
        float _2439;
        if (_2009 > 0.0)
        {
            _2439 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2439 = frontier_phi_37_32_ladder;
        }
        float _2777;
        if (_2012 > 0.0)
        {
            _2777 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2777 = frontier_phi_47_44_ladder;
        }
        float _2779 = isnan(_2439) ? _2121 : (isnan(_2121) ? _2439 : min(_2121, _2439));
        float _2780 = isnan(_2777) ? _2779 : (isnan(_2779) ? _2777 : min(_2779, _2777));
        float _2784 = (_2780 * _2006) + _1995;
        float _2785 = (_2780 * _2009) + _1999;
        float _2786 = (_2780 * _2012) + _2003;
        float _2787 = _2780 * 9.9999997473787516355514526367188e-05;
        float _2788 = (-1.0) - _2787;
        float _2790 = _2787 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2786 > _2790) || ((_2786 < _2788) || ((_2785 > _2790) || ((_2785 < _2788) || ((_2784 < _2788) || (_2784 > _2790))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2786, cbModelParam._m0[17u].z, fma(_2785, cbModelParam._m0[17u].y, _2784 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2786, cbModelParam._m0[18u].z, fma(_2785, cbModelParam._m0[18u].y, _2784 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2786, cbModelParam._m0[19u].z, fma(_2785, cbModelParam._m0[19u].y, _2784 * cbModelParam._m0[19u].x))), _1942);
            frontier_phi_22_47_ladder = _2908.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2908.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2908.x * cbModelParam._m0[1u].z;
        }
        _2031 = frontier_phi_22_47_ladder_2;
        _2033 = frontier_phi_22_47_ladder_1;
        _2035 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1041, _1042, _1043), _1942);
        _2031 = _2015.x * cbModelParam._m0[1u].z;
        _2033 = _2015.y * cbModelParam._m0[1u].z;
        _2035 = _2015.z * cbModelParam._m0[1u].z;
    }
    float _2048 = (((_1068 * _1018) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2050 = (((_1068 * _1020) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2052 = (((_1068 * _1021) + _1069) * _1033) * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2055 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2050, cbSceneParam._m0[89u].y, _2048 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2050, cbSceneParam._m0[90u].y, _2048 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2050, cbSceneParam._m0[91u].y, _2048 * cbSceneParam._m0[91u].x));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2108 = _2095 / _2107;
    float _2109 = _2099 / _2107;
    float _2110 = _2103 / _2107;
    float _2257;
    float _2258;
    float _2259;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2137 = ((uint(_2110 > cbSceneParam._m0[59u].y) + uint(_2110 > cbSceneParam._m0[59u].x)) + uint(_2110 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2138 = _2137 + 43u;
        uint _2146 = _2137 + 44u;
        uint _2154 = _2137 + 45u;
        uint _2162 = _2137 + 46u;
        float _2173 = fma(_2107, cbSceneParam._m0[_2138].w, fma(_2103, cbSceneParam._m0[_2138].z, fma(_2099, cbSceneParam._m0[_2138].y, _2095 * cbSceneParam._m0[_2138].x)));
        float _2177 = fma(_2107, cbSceneParam._m0[_2146].w, fma(_2103, cbSceneParam._m0[_2146].z, fma(_2099, cbSceneParam._m0[_2146].y, _2095 * cbSceneParam._m0[_2146].x)));
        float _2185 = fma(_2107, cbSceneParam._m0[_2162].w, fma(_2103, cbSceneParam._m0[_2162].z, fma(_2099, cbSceneParam._m0[_2162].y, _2095 * cbSceneParam._m0[_2162].x)));
        float _2190 = cbSceneParam._m0[33u].z * _2185;
        float _2192 = cbSceneParam._m0[33u].w * _2185;
        float _2195 = fma(_2107, cbSceneParam._m0[_2154].w, fma(_2103, cbSceneParam._m0[_2154].z, fma(_2099, cbSceneParam._m0[_2154].y, _2095 * cbSceneParam._m0[_2154].x))) / _2185;
        float _2243 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
        float _4547 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2250 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2190 + _2173) / _2185, (_2192 + _2177) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 + _2173) / _2185, (_2177 - _2190) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2190) / _2185, (_2177 - _2192) / _2185), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 - _2192) / _2185, (_2190 + _2177) / _2185), _2195), 0.0)).x), vec4(0.25)));
        _2257 = 1.0 - (_2250 * cbSceneParam._m0[34u].x);
        _2258 = 1.0 - (_2250 * cbSceneParam._m0[34u].y);
        _2259 = 1.0 - (_2250 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2257 = 1.0;
        _2258 = 1.0;
        _2259 = 1.0;
    }
    float _2323;
    float _2325;
    float _2327;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2311 = fma(_2107, cbSceneParam._m0[63u].w, fma(_2103, cbSceneParam._m0[63u].z, fma(_2099, cbSceneParam._m0[63u].y, _2095 * cbSceneParam._m0[63u].x)));
        float _2312 = fma(_2107, cbSceneParam._m0[60u].w, fma(_2103, cbSceneParam._m0[60u].z, fma(_2099, cbSceneParam._m0[60u].y, _2095 * cbSceneParam._m0[60u].x))) / _2311;
        float _2313 = fma(_2107, cbSceneParam._m0[61u].w, fma(_2103, cbSceneParam._m0[61u].z, fma(_2099, cbSceneParam._m0[61u].y, _2095 * cbSceneParam._m0[61u].x))) / _2311;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2312 >= cbSceneParam._m0[64u].x) && (_2313 >= cbSceneParam._m0[64u].y)) && (_2312 <= cbSceneParam._m0[64u].z)) && (_2313 <= cbSceneParam._m0[64u].w))
        {
            float _2452 = fma(_2107, cbSceneParam._m0[62u].w, fma(_2103, cbSceneParam._m0[62u].z, fma(_2099, cbSceneParam._m0[62u].y, _2095 * cbSceneParam._m0[62u].x))) / _2311;
            float _2456 = isnan(cbSceneParam._m0[41u].w) ? _2452 : (isnan(_2452) ? cbSceneParam._m0[41u].w : max(_2452, cbSceneParam._m0[41u].w));
            float _2499 = (cbSceneParam._m0[33u].x - sqrt(((_2109 * _2109) + (_2108 * _2108)) + (_2110 * _2110))) * cbSceneParam._m0[33u].y;
            float _4563 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
            float _2506 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2312, cbSceneParam._m0[33u].w + _2313), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2312, _2313 - cbSceneParam._m0[33u].z), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].z, _2313 - cbSceneParam._m0[33u].w), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2312 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2313), _2456), 0.0)).x), vec4(0.25)));
            float _2510 = 1.0 - (_2506 * cbSceneParam._m0[34u].x);
            float _2511 = 1.0 - (_2506 * cbSceneParam._m0[34u].y);
            float _2512 = 1.0 - (_2506 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2512) ? _2259 : (isnan(_2259) ? _2512 : min(_2259, _2512));
            frontier_phi_34_33_ladder_1 = isnan(_2511) ? _2258 : (isnan(_2258) ? _2511 : min(_2258, _2511));
            frontier_phi_34_33_ladder_2 = isnan(_2510) ? _2257 : (isnan(_2257) ? _2510 : min(_2257, _2510));
        }
        else
        {
            frontier_phi_34_33_ladder = _2259;
            frontier_phi_34_33_ladder_1 = _2258;
            frontier_phi_34_33_ladder_2 = _2257;
        }
        _2323 = frontier_phi_34_33_ladder_2;
        _2325 = frontier_phi_34_33_ladder_1;
        _2327 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2323 = _2257;
        _2325 = _2258;
        _2327 = _2259;
    }
    uvec4 _2332 = floatBitsToUint(cbInstanceData._m0[_993 + 5u]);
    uint _2334 = _2332.x * 14u;
    uint _2335 = _2334 + 13u;
    float _2342 = _1033 + (-1.0);
    float _2347 = (cbLight._m0[_2335].x * _2342) + 1.0;
    float _2348 = (cbLight._m0[_2335].y * _2342) + 1.0;
    float _2349 = (cbLight._m0[_2335].z * _2342) + 1.0;
    float _2350 = (cbLight._m0[_2335].w * _2342) + 1.0;
    uint _2351 = _2334 + 5u;
    float _2357 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2361 = _2334 + 4u;
    float _2371 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
    uint _2375 = _2334 | 1u;
    float _2386 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_866, _867, _868));
    float _2389 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_866, _867, _868));
    float _4599 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _4610 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2394 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * 0.3183098733425140380859375;
    float _2396 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * 0.3183098733425140380859375;
    float _2403 = ((cbLight._m0[_2351].x * _2357) * _2396) + (((cbLight._m0[_2361].x * _2323) * _2371) * _2394);
    float _2404 = ((_2357 * cbLight._m0[_2351].y) * _2396) + (((cbLight._m0[_2361].y * _2325) * _2371) * _2394);
    float _2405 = ((_2357 * cbLight._m0[_2351].z) * _2396) + (((cbLight._m0[_2361].z * _2327) * _2371) * _2394);
    uvec4 _2409 = floatBitsToUint(cbLight._m0[_2334 + 12u]);
    bool _2411 = _2409.x == 0u;
    float _2513;
    float _2515;
    float _2517;
    if (_2411)
    {
        _2513 = _2403;
        _2515 = _2404;
        _2517 = _2405;
    }
    else
    {
        uint _2521 = _2334 + 6u;
        float _2537 = (dot(vec3(cbLight._m0[_2334 + 2u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2538 = _2537 * _2537;
        float _4621 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2539 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2540 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2513 = (((cbLight._m0[_2521].x * 0.3183098733425140380859375) * _2539) * _2540) + _2403;
        _2515 = (((cbLight._m0[_2521].y * 0.3183098733425140380859375) * _2539) * _2540) + _2404;
        _2517 = (((cbLight._m0[_2521].z * 0.3183098733425140380859375) * _2539) * _2540) + _2405;
    }
    bool _2520 = _2409.y == 0u;
    float _2575;
    float _2577;
    float _2579;
    if (_2520)
    {
        _2575 = _2513;
        _2577 = _2515;
        _2579 = _2517;
    }
    else
    {
        uint _2748 = _2334 + 7u;
        float _2764 = (dot(vec3(cbLight._m0[_2334 + 3u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2765 = _2764 * _2764;
        float _4637 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2766 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2767 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2575 = (((cbLight._m0[_2748].x * 0.3183098733425140380859375) * _2766) * _2767) + _2513;
        _2577 = (((cbLight._m0[_2748].y * 0.3183098733425140380859375) * _2766) * _2767) + _2515;
        _2579 = (((cbLight._m0[_2748].z * 0.3183098733425140380859375) * _2766) * _2767) + _2517;
    }
    uint _2582 = _2334 + 8u;
    float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _869) * 0.949999988079071044921875);
    float _2596 = _2595 * _2595;
    float _2597 = cbLight._m0[_2334].x + _947;
    float _2598 = cbLight._m0[_2334].y + _948;
    float _2599 = cbLight._m0[_2334].z + _949;
    float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
    float _2604 = _2603 * _2597;
    float _2605 = _2603 * _2598;
    float _2606 = _2603 * _2599;
    float _2607 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2334].xyz));
    float _4653 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _4664 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _2611 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2612 = dot(vec3(_866, _867, _868), vec3(_2604, _2605, _2606));
    float _4675 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _2616 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2604, _2605, _2606));
    float _4686 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2620 = _2596 * _2596;
    float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
    float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0);
    float _2633 = 0.959999978542327880859375 - _1015;
    float _2635 = 0.959999978542327880859375 - _1016;
    float _2636 = 0.959999978542327880859375 - _1017;
    float _2643 = 1.0 - _2596;
    float _2654 = (0.5 / (((_2611 * ((_2610 * _2643) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2643) + _2596) * _2610))) * _2610;
    float _4697 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2656 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
    uint _2670 = _2334 + 9u;
    float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _869) * 0.949999988079071044921875);
    float _2682 = _2681 * _2681;
    float _2683 = cbLight._m0[_2375].x + _947;
    float _2684 = cbLight._m0[_2375].y + _948;
    float _2685 = cbLight._m0[_2375].z + _949;
    float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
    float _2690 = _2689 * _2683;
    float _2691 = _2689 * _2684;
    float _2692 = _2689 * _2685;
    float _2693 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2375].xyz));
    float _4708 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2696 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2697 = dot(vec3(_866, _867, _868), vec3(_2690, _2691, _2692));
    float _4719 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2700 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _2701 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2690, _2691, _2692));
    float _4730 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2705 = _2682 * _2682;
    float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
    float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0);
    float _2723 = 1.0 - _2682;
    float _2733 = (0.5 / (((_2611 * ((_2696 * _2723) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2723) + _2682) * _2696))) * _2696;
    float _4741 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2735 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
    float _2745 = (((((_2716 * _2633) + _1018) * cbLight._m0[_2670].x) * _2735) * _2357) + ((((cbLight._m0[_2582].x * _2323) * ((_2632 * _2633) + _1018)) * _2656) * _2371);
    float _2746 = (((((_2716 * _2635) + _1020) * cbLight._m0[_2670].y) * _2735) * _2357) + ((((cbLight._m0[_2582].y * _2325) * ((_2632 * _2635) + _1020)) * _2656) * _2371);
    float _2747 = (((((_2716 * _2636) + _1021) * cbLight._m0[_2670].z) * _2735) * _2357) + ((((cbLight._m0[_2582].z * _2327) * ((_2632 * _2636) + _1021)) * _2656) * _2371);
    float _2803;
    float _2805;
    float _2807;
    if (_2411)
    {
        _2803 = _2745;
        _2805 = _2746;
        _2807 = _2747;
    }
    else
    {
        uint _2809 = _2334 + 2u;
        uint _2813 = _2334 + 10u;
        float _2827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2809].w)) * _869) * 0.949999988079071044921875);
        float _2828 = _2827 * _2827;
        float _2829 = cbLight._m0[_2809].x + _947;
        float _2830 = cbLight._m0[_2809].y + _948;
        float _2831 = cbLight._m0[_2809].z + _949;
        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
        float _2836 = _2835 * _2829;
        float _2837 = _2835 * _2830;
        float _2838 = _2835 * _2831;
        float _2839 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2809].xyz));
        float _4752 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2843 = dot(vec3(_866, _867, _868), vec3(_2836, _2837, _2838));
        float _4763 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2847 = dot(vec3(cbLight._m0[_2809].xyz), vec3(_2836, _2837, _2838));
        float _4774 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2851 = _2828 * _2828;
        float _2855 = ((_2846 * _2846) * (_2851 + (-1.0))) + 1.0;
        float _2862 = exp2(log2(1.0 - (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) * 5.0);
        float _2869 = 1.0 - _2828;
        float _2879 = (0.5 / (((_2611 * ((_2842 * _2869) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2869) + _2828) * _2842))) * _2842;
        float _4785 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2881 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2851 / ((_2855 * _2855) * 3.141590118408203125));
        float _2882 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2803 = (((((_2862 * _2633) + _1018) * cbLight._m0[_2813].x) * _2881) * _2882) + _2745;
        _2805 = (((((_2862 * _2635) + _1020) * cbLight._m0[_2813].y) * _2881) * _2882) + _2746;
        _2807 = (((((_2862 * _2636) + _1021) * cbLight._m0[_2813].z) * _2881) * _2882) + _2747;
    }
    float _2913;
    float _2915;
    float _2917;
    if (_2520)
    {
        _2913 = _2803;
        _2915 = _2805;
        _2917 = _2807;
    }
    else
    {
        uint _2924 = _2334 + 3u;
        uint _2928 = _2334 + 11u;
        float _2942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2924].w)) * _869) * 0.949999988079071044921875);
        float _2943 = _2942 * _2942;
        float _2944 = cbLight._m0[_2924].x + _947;
        float _2945 = cbLight._m0[_2924].y + _948;
        float _2946 = cbLight._m0[_2924].z + _949;
        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
        float _2951 = _2950 * _2944;
        float _2952 = _2950 * _2945;
        float _2953 = _2950 * _2946;
        float _2954 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2924].xyz));
        float _4801 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2957 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2958 = dot(vec3(_866, _867, _868), vec3(_2951, _2952, _2953));
        float _4812 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2961 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2962 = dot(vec3(cbLight._m0[_2924].xyz), vec3(_2951, _2952, _2953));
        float _4823 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2966 = _2943 * _2943;
        float _2970 = ((_2961 * _2961) * (_2966 + (-1.0))) + 1.0;
        float _2977 = exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0);
        float _2984 = 1.0 - _2943;
        float _2994 = (0.5 / (((_2611 * ((_2957 * _2984) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2984) + _2943) * _2957))) * _2957;
        float _4834 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2996 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2966 / ((_2970 * _2970) * 3.141590118408203125));
        float _2997 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2913 = (((((_2977 * _2633) + _1018) * cbLight._m0[_2928].x) * _2996) * _2997) + _2803;
        _2915 = (((((_2977 * _2635) + _1020) * cbLight._m0[_2928].y) * _2996) * _2997) + _2805;
        _2917 = (((((_2977 * _2636) + _1021) * cbLight._m0[_2928].z) * _2996) * _2997) + _2807;
    }
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_2332.y == 0u)
    {
        uvec4 _3018 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3019 = _3018.x;
        uint _3030 = uint((float(_3018.y) * floor(float(uint(cbSceneParam._m0[85u].y * _956) / _3019))) + floor(float(uint(cbSceneParam._m0[85u].x * _955) / _3019)));
        float _3040 = (log2(_2110 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3041 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        uint _3044 = uint(isnan(14.0) ? _3041 : (isnan(_3041) ? 14.0 : min(_3041, 14.0)));
        uvec4 _3049 = texelFetch(g_lightClusterGridBuffer, int(((_3044 << 2u) + (_3030 << 6u)) >> 2u));
        uint _3050 = _3049.x;
        uint _3051 = _3018.z;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        if (((((1u << ((_3051 >> 4u) & 15u)) + 4294967295u) & _3050) == 0u) || ((_3051 & 240u) == 0u))
        {
            _3153 = 0.0;
            _3155 = 0.0;
            _3157 = 0.0;
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
        }
        else
        {
            float _3154;
            float _3156;
            float _3158;
            float _3160;
            float _3162;
            float _3164;
            float _3296 = 0.0;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            uint _3302 = 0u;
            uint _3311;
            bool _3312;
            for (;;)
            {
                _3311 = texelFetch(g_lightClassification, int((((_3044 << 5u) + (_3030 << 9u)) + (_3302 << 2u)) >> 2u)).x;
                _3312 = _3311 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3312)
                {
                    frontier_phi_66_pred = _3301;
                    frontier_phi_66_pred_1 = _3300;
                    frontier_phi_66_pred_2 = _3299;
                    frontier_phi_66_pred_3 = _3298;
                    frontier_phi_66_pred_4 = _3297;
                    frontier_phi_66_pred_5 = _3296;
                }
                else
                {
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    uint _3426;
                    _3420 = _3296;
                    _3421 = _3297;
                    _3422 = _3298;
                    _3423 = _3299;
                    _3424 = _3300;
                    _3425 = _3301;
                    _3426 = _3311;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    for (;;)
                    {
                        uint _3430 = uint(findLSB(_3426)) + (_3302 << 5u);
                        uint _3427 = (_3426 + 4294967295u) & _3426;
                        uint _3432 = _3430 * 48u;
                        vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3432)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 3u)).x));
                        uint _3452 = (_3430 * 48u) + 4u;
                        vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3452)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 3u)).x));
                        uint _3471 = (_3430 * 48u) + 8u;
                        vec3 _3482 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3471)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 2u)).x));
                        float _3486 = _3446.x - _2108;
                        float _3487 = _3446.y - _2109;
                        float _3488 = _3446.z - _2110;
                        float _3489 = dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488));
                        float _3492 = inversesqrt(_3489);
                        float _3493 = _3492 * _3486;
                        float _3494 = _3492 * _3487;
                        float _3495 = _3492 * _3488;
                        float _3496 = dot(vec3(_974, _977, _980), vec3(_3493, _3494, _3495));
                        float _3501 = 1.0 - (_3489 * _3446.w);
                        float _4860 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3502 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3503 = sqrt(_3489) * _3465.w;
                        float _3506 = 1.39999997615814208984375 / (_3503 + 1.39999997615814208984375);
                        float _3507 = _3506 * _3506;
                        float _3510 = ((1.0 - _3507) * _3496) + _3507;
                        float _3513 = _3503 * _3503;
                        float _3517 = ((isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0))) * _3502) / ((_3513 * 0.699999988079071044921875) + 1.0);
                        float _3521 = (-0.0) - _2108;
                        float _3522 = (-0.0) - _2109;
                        float _3523 = (-0.0) - _2110;
                        float _3527 = inversesqrt(dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523)));
                        float _3528 = _3527 * _3521;
                        float _3529 = _3527 * _3522;
                        float _3530 = _3527 * _3523;
                        float _3537 = exp2(log2(1.0 / ((_3513 * 3.5) + 5.0)) * 0.25);
                        float _3538 = 1.0 - _1049;
                        float _3545 = sqrt(1.0 - ((1.0 - (_3538 * _3538)) * (1.0 - (_3537 * _3537))));
                        float _3546 = _3545 * _3545;
                        float _3547 = _3546 * _3546;
                        float _3548 = _3528 + _3493;
                        float _3549 = _3529 + _3494;
                        float _3550 = _3530 + _3495;
                        float _3554 = inversesqrt(dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550)));
                        float _3558 = dot(vec3(_974, _977, _980), vec3(_3528, _3529, _3530));
                        float _4876 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3561 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                        float _3562 = dot(vec3(_974, _977, _980), vec3(_3554 * _3548, _3554 * _3549, _3554 * _3550));
                        float _4887 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3565 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3569 = ((_3565 * _3565) * (_3547 + (-1.0))) + 1.0;
                        float _3570 = _3506 * _3546;
                        float _3571 = _3570 * _3570;
                        float _3574 = ((1.0 - _3571) * _3496) + _3571;
                        float _4898 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3575 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3576 = 1.0 - _3546;
                        float _3586 = (0.5 / (((_3575 * ((_3561 * _3576) + _3546)) + 9.9999999392252902907785028219223e-09) + (((_3575 * _3576) + _3546) * _3561))) * _3575;
                        float _4909 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3597 = (((_3547 * 3.1415927410125732421875) * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) / ((_3569 * _3569) * ((_3513 * 2.1991131305694580078125) + 3.141590118408203125))) * _3502;
                        _3355 = (_3517 * _3465.x) + _3423;
                        _3356 = (_3517 * _3465.y) + _3424;
                        _3357 = (_3517 * _3465.z) + _3425;
                        _3352 = (_3597 * _3482.x) + _3420;
                        _3353 = (_3597 * _3482.y) + _3421;
                        _3354 = (_3597 * _3482.z) + _3422;
                        if (_3427 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3420 = _3352;
                            _3421 = _3353;
                            _3422 = _3354;
                            _3423 = _3355;
                            _3424 = _3356;
                            _3425 = _3357;
                            _3426 = _3427;
                        }
                    }
                    frontier_phi_66_pred = _3357;
                    frontier_phi_66_pred_1 = _3356;
                    frontier_phi_66_pred_2 = _3355;
                    frontier_phi_66_pred_3 = _3354;
                    frontier_phi_66_pred_4 = _3353;
                    frontier_phi_66_pred_5 = _3352;
                }
                _3164 = frontier_phi_66_pred;
                _3162 = frontier_phi_66_pred_1;
                _3160 = frontier_phi_66_pred_2;
                _3158 = frontier_phi_66_pred_3;
                _3156 = frontier_phi_66_pred_4;
                _3154 = frontier_phi_66_pred_5;
                uint _3303 = _3302 + 1u;
                if (_3303 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3296 = _3154;
                    _3297 = _3156;
                    _3298 = _3158;
                    _3299 = _3160;
                    _3300 = _3162;
                    _3301 = _3164;
                    _3302 = _3303;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3153 = _3154;
            _3155 = _3156;
            _3157 = _3158;
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
        }
        uvec4 _3167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3168 = _3167.z;
        uint _3170 = (_3168 >> 8u) & 15u;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        if (((4294967295u << _3170) & _3050) == 0u)
        {
            _3264 = _3153;
            _3266 = _3155;
            _3268 = _3157;
            _3270 = _3159;
            _3272 = _3161;
            _3274 = _3163;
        }
        else
        {
            float _3289 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
            float _3290 = _3289 * _2108;
            float _3291 = _3289 * _2109;
            float _3292 = _3289 * _2110;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3170 < ((_3168 >> 12u) & 15u))
            {
                float _3265;
                float _3267;
                float _3269;
                float _3271;
                float _3273;
                float _3275;
                float _3403 = _3153;
                float _3404 = _3155;
                float _3405 = _3157;
                float _3406 = _3159;
                float _3407 = _3161;
                float _3408 = _3163;
                uint _3409 = _3170;
                uint _3418;
                bool _3419;
                for (;;)
                {
                    _3418 = texelFetch(g_lightClassification, int((((_3044 << 5u) + (_3030 << 9u)) + (_3409 << 2u)) >> 2u)).x;
                    _3419 = _3418 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3419)
                    {
                        frontier_phi_72_pred = _3408;
                        frontier_phi_72_pred_1 = _3407;
                        frontier_phi_72_pred_2 = _3406;
                        frontier_phi_72_pred_3 = _3405;
                        frontier_phi_72_pred_4 = _3404;
                        frontier_phi_72_pred_5 = _3403;
                    }
                    else
                    {
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3615 = _3403;
                        float _3616 = _3404;
                        float _3617 = _3405;
                        float _3618 = _3406;
                        float _3619 = _3407;
                        float _3620 = _3408;
                        uint _3621 = _3418;
                        uint _3622;
                        vec4 _3647;
                        float _3648;
                        vec4 _3663;
                        vec3 _3675;
                        vec4 _3690;
                        vec4 _3705;
                        float _3751;
                        bool _3752;
                        for (;;)
                        {
                            uint _3632 = ((_3409 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3621));
                            _3622 = (_3621 + 4294967295u) & _3621;
                            uint _3634 = _3632 * 40u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            _3648 = _3647.w;
                            uint _3650 = (_3632 * 40u) + 4u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3632 * 40u) + 8u;
                            _3675 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x));
                            uint _3677 = (_3632 * 40u) + 16u;
                            _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            uint _3692 = (_3632 * 40u) + 20u;
                            _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            uint _3707 = (_3632 * 40u) + 24u;
                            vec4 _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3726 = (_3632 * 40u) + 28u;
                            vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            _3751 = fma(_2110, _3739.z, fma(_2109, _3739.y, _3739.x * _2108)) + _3739.w;
                            _3752 = !((fma(_2110, _3720.z, fma(_2109, _3720.y, _3720.x * _2108)) + _3720.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3752)
                            {
                                float _3779 = _3647.x - _2108;
                                float _3780 = _3647.y - _2109;
                                float _3781 = _3647.z - _2110;
                                float _3782 = dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781));
                                float _3785 = inversesqrt(_3782);
                                float _3786 = _3785 * _3779;
                                float _3787 = _3785 * _3780;
                                float _3788 = _3785 * _3781;
                                float _3792 = 1.0 - (_3782 / (_3648 * _3648));
                                float _4920 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3793 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3797 = sqrt(_3782) * _3663.w;
                                float _3799 = 1.39999997615814208984375 / (_3797 + 1.39999997615814208984375);
                                float _3800 = _3799 * _3799;
                                float _3803 = ((1.0 - _3800) * dot(vec3(_3786, _3787, _3788), vec3(_974, _977, _980))) + _3800;
                                float _3806 = _3797 * _3797;
                                float _3810 = (fma(_2110, _3690.z, fma(_2109, _3690.y, _3690.x * _2108)) + _3690.w) / _3751;
                                float _3811 = (fma(_2110, _3705.z, fma(_2109, _3705.y, _3705.x * _2108)) + _3705.w) / _3751;
                                float _3815 = 1.0 - dot(vec2(_3810, _3811), vec2(_3810, _3811));
                                float _4936 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                                float _3817 = _3816 * (((isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0))) * _3793) / ((_3806 * 0.699999988079071044921875) + 1.0));
                                float _3829 = exp2(log2(1.0 / ((_3806 * 3.5) + 5.0)) * 0.25);
                                float _3830 = 1.0 - _1049;
                                float _3837 = sqrt(1.0 - ((1.0 - (_3830 * _3830)) * (1.0 - (_3829 * _3829))));
                                float _3838 = _3837 * _3837;
                                float _3839 = _3838 * _3838;
                                float _3840 = _3786 - _3290;
                                float _3841 = _3787 - _3291;
                                float _3842 = _3788 - _3292;
                                float _3846 = inversesqrt(dot(vec3(_3840, _3841, _3842), vec3(_3840, _3841, _3842)));
                                float _3850 = dot(vec3(_974, _977, _980), vec3((-0.0) - _3290, (-0.0) - _3291, (-0.0) - _3292));
                                float _4947 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3853 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3854 = dot(vec3(_974, _977, _980), vec3(_3846 * _3840, _3846 * _3841, _3846 * _3842));
                                float _4958 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3857 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3861 = ((_3857 * _3857) * (_3839 + (-1.0))) + 1.0;
                                float _3862 = _3799 * _3838;
                                float _3863 = _3862 * _3862;
                                float _3869 = ((1.0 - _3863) * dot(vec3(_974, _977, _980), vec3(_3786, _3787, _3788))) + _3863;
                                float _4969 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3871 = 1.0 - _3838;
                                float _3881 = (0.5 / (((_3870 * ((_3853 * _3871) + _3838)) + 9.9999999392252902907785028219223e-09) + (((_3870 * _3871) + _3838) * _3853))) * _3870;
                                float _4980 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3891 = (_3816 * _3793) * (((_3839 * 3.1415927410125732421875) * (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) / ((_3861 * _3861) * ((_3806 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3817 * _3663.y;
                                frontier_phi_78_pred_1 = _3817 * _3663.x;
                                frontier_phi_78_pred_2 = _3891 * _3675.z;
                                frontier_phi_78_pred_3 = _3891 * _3675.y;
                                frontier_phi_78_pred_4 = _3891 * _3675.x;
                                frontier_phi_78_pred_5 = _3817 * _3663.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3899 = frontier_phi_78_pred;
                            _3898 = frontier_phi_78_pred_1;
                            _3897 = frontier_phi_78_pred_2;
                            _3896 = frontier_phi_78_pred_3;
                            _3895 = frontier_phi_78_pred_4;
                            _3900 = frontier_phi_78_pred_5;
                            _3605 = _3898 + _3618;
                            _3606 = _3899 + _3619;
                            _3607 = _3900 + _3620;
                            _3602 = _3895 + _3615;
                            _3603 = _3896 + _3616;
                            _3604 = _3897 + _3617;
                            if (_3622 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3622;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3607;
                        frontier_phi_72_pred_1 = _3606;
                        frontier_phi_72_pred_2 = _3605;
                        frontier_phi_72_pred_3 = _3604;
                        frontier_phi_72_pred_4 = _3603;
                        frontier_phi_72_pred_5 = _3602;
                    }
                    _3275 = frontier_phi_72_pred;
                    _3273 = frontier_phi_72_pred_1;
                    _3271 = frontier_phi_72_pred_2;
                    _3269 = frontier_phi_72_pred_3;
                    _3267 = frontier_phi_72_pred_4;
                    _3265 = frontier_phi_72_pred_5;
                    uint _3410 = _3409 + 1u;
                    if (_3410 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3403 = _3265;
                        _3404 = _3267;
                        _3405 = _3269;
                        _3406 = _3271;
                        _3407 = _3273;
                        _3408 = _3275;
                        _3409 = _3410;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3275;
                frontier_phi_60_61_ladder_1 = _3273;
                frontier_phi_60_61_ladder_2 = _3269;
                frontier_phi_60_61_ladder_3 = _3267;
                frontier_phi_60_61_ladder_4 = _3265;
                frontier_phi_60_61_ladder_5 = _3271;
            }
            else
            {
                frontier_phi_60_61_ladder = _3163;
                frontier_phi_60_61_ladder_1 = _3161;
                frontier_phi_60_61_ladder_2 = _3157;
                frontier_phi_60_61_ladder_3 = _3155;
                frontier_phi_60_61_ladder_4 = _3153;
                frontier_phi_60_61_ladder_5 = _3159;
            }
            _3264 = frontier_phi_60_61_ladder_4;
            _3266 = frontier_phi_60_61_ladder_3;
            _3268 = frontier_phi_60_61_ladder_2;
            _3270 = frontier_phi_60_61_ladder_5;
            _3272 = frontier_phi_60_61_ladder_1;
            _3274 = frontier_phi_60_61_ladder;
        }
        float _3279 = isnan(1.0) ? _1033 : (isnan(_1033) ? 1.0 : min(_1033, 1.0));
        _3063 = (_3279 * _3270) + _2575;
        _3065 = (_3279 * _3272) + _2577;
        _3067 = (_3279 * _3274) + _2579;
        _3069 = ((_3264 * _1018) * _3279) + _2913;
        _3071 = ((_3266 * _1020) * _3279) + _2915;
        _3073 = ((_3268 * _1021) * _3279) + _2917;
    }
    else
    {
        _3063 = _2575;
        _3065 = _2577;
        _3067 = _2579;
        _3069 = _2913;
        _3071 = _2915;
        _3073 = _2917;
    }
    uint _3079 = _994 + uint(cbMatDynParam._m0[0u].w);
    float _3085 = (isnan(cbMtdParam._m0[24u].y) ? _730 : (isnan(_730) ? cbMtdParam._m0[24u].y : min(_730, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4996 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _5007 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _5018 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _3108 = (((isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_3063 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1033))) + ((_3069 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1842)) * cbPerFrame._m0[3u].x)) + ((_3085 * (((((_789.x - _786) * _768) + _786) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _722) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_3079].x);
    float _3110 = (((_3085 * (((((_789.y - _787) * _768) + _787) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_711.y - _709) * _689) + _709)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_3079].y) + ((_3071 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1842)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_3065 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1033)));
    float _3112 = (((_3085 * (((((_789.z - _788) * _768) + _788) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_711.z - _710) * _689) + _710)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_3079].z) + ((_3073 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1842)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_3067 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1033)));
    uint _3116 = _993 + 6u;
    float _3124 = _955 / cbSceneParam._m0[86u].x;
    float _3125 = _956 / cbSceneParam._m0[86u].y;
    vec4 _3139 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3124, _3125, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3141 = _3139.x;
    float _3142 = _3139.y;
    float _3143 = _3139.z;
    float _3144 = _3139.w;
    float _3215;
    float _3217;
    float _3219;
    float _3221;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _3178 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _3179 = _3178 / _889;
        float _3190 = _3179 * _940;
        float _3191 = _941 * _3179;
        float _3192 = (-0.0) - _3191;
        float _3193 = _3179 * _942;
        float _3195 = (cbSceneParam._m0[77u].w * _3192) / _3178;
        float _3196 = _3195 + cbSceneParam._m0[79u].w;
        float _3197 = cbSceneParam._m0[79u].w - _3191;
        float _3203 = sqrt(((_3190 * _3190) + (_3191 * _3191)) + (_3193 * _3193));
        float _3206 = (1.0 - (cbSceneParam._m0[77u].w / _3178)) * _3203;
        float _3211 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3213 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3365;
        if (abs((_3192 - _3195) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3365 = ((((_3196 > 0.0) ? exp2(_3211 * _3196) : (2.0 - exp2(_3213 * _3196))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3206;
        }
        else
        {
            float _3325 = 1.0 / cbSceneParam._m0[80u].x;
            float _3326 = isnan(_3197) ? _3196 : (isnan(_3196) ? _3197 : max(_3196, _3197));
            float _3327 = isnan(_3197) ? _3196 : (isnan(_3196) ? _3197 : min(_3196, _3197));
            float _3336 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : min(_3326, 0.0));
            float _3337 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : min(_3327, 0.0));
            _3365 = ((abs(_3203 / _3192) * cbSceneParam._m0[80u].y) * ((((_3336 - _3337) * 2.0) - ((exp2(_3211 * (isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0)))) - exp2(_3211 * (isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0))))) * _3325)) - ((exp2(_3213 * _3336) - exp2(_3213 * _3337)) * _3325))) + (_3206 * cbSceneParam._m0[80u].z);
        }
        vec4 _3367 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3124, _3125, 1.0), 0.0);
        float _3376 = exp2((_3365 * (-1.44269502162933349609375)) * (1.0 - _3367.w));
        float _3377 = log2(_3376);
        float _3393 = log2(_3144);
        _3215 = (exp2(_3393 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3377 * cbSceneParam._m0[78u].x)) * _3367.x) / cbSceneParam._m0[78u].x)) + _3141;
        _3217 = (exp2(_3393 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3377 * cbSceneParam._m0[78u].y)) * _3367.y) / cbSceneParam._m0[78u].y)) + _3142;
        _3219 = (exp2(_3393 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3377 * cbSceneParam._m0[78u].z)) * _3367.z) / cbSceneParam._m0[78u].z)) + _3143;
        _3221 = _3376 * _3144;
    }
    else
    {
        _3215 = _3141;
        _3217 = _3142;
        _3219 = _3143;
        _3221 = _3144;
    }
    float _3232 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3233 = _3232 == 3.0;
    float _3234 = log2(_3221);
    float _3241 = exp2(_3234 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0)));
    float _3242 = exp2(_3234 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0)));
    float _3243 = exp2(_3234 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0)));
    float _3252 = (_3232 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3252 * (_3233 ? _3241 : (_3241 + (cbSceneParam._m0[72u].w * _3215)));
    SV_Target.y = _3252 * (_3233 ? _3242 : (_3242 + (cbSceneParam._m0[72u].w * _3217)));
    SV_Target.z = _3252 * (_3233 ? _3243 : (_3243 + (cbSceneParam._m0[72u].w * _3219)));
    SV_Target.w = cbInstanceData._m0[_3116].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3116].w;
}


