#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1404;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _278 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _287 = log2(0.0);
    float _289 = exp2(_287 * cbMtdParam._m0[18u].w);
    float _290 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _291 = isnan(1.0) ? _290 : (isnan(_290) ? 1.0 : min(_290, 1.0));
    vec4 _307 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _311 = _307.z;
    float _316 = exp2(log2(_311 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(1.0) ? _317 : (isnan(_317) ? 1.0 : min(_317, 1.0));
    vec4 _330 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _355 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _366 = cbMtdParam._m0[9u].x * _355.x;
    float _367 = cbMtdParam._m0[9u].y * _355.y;
    float _368 = cbMtdParam._m0[9u].z * _355.z;
    float _375 = (((cbMtdParam._m0[10u].x * _330.x) - _366) * _318) + _366;
    float _376 = (((cbMtdParam._m0[10u].y * _330.y) - _367) * _318) + _367;
    float _377 = (((cbMtdParam._m0[10u].z * _330.z) - _368) * _318) + _368;
    vec4 _390 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _392 = _390.x;
    float _396 = exp2(log2(_392) * cbMtdParam._m0[19u].z);
    vec4 _409 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _429 = (((cbMtdParam._m0[12u].x * _409.x) - _375) * _396) + _375;
    float _430 = (((cbMtdParam._m0[12u].y * _409.y) - _376) * _396) + _376;
    float _431 = (((cbMtdParam._m0[12u].z * _409.z) - _377) * _396) + _377;
    vec4 _444 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _469 = (_278.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _444.x) - _429) * _291) + _429);
    float _471 = (_278.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _444.y) - _430) * _291) + _430);
    float _473 = (_278.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _444.z) - _431) * _291) + _431);
    float _475 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _484 = (_475 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _475))) * (cbMtdParam._m0[22u].y + 1.0);
    float _4055 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _492 = ((cbMtdParam._m0[14u].x - _469) * _485) + _469;
    float _493 = ((cbMtdParam._m0[14u].y - _471) * _485) + _471;
    float _494 = ((cbMtdParam._m0[14u].z - _473) * _485) + _473;
    float _496 = _392 - (_475 * _392);
    vec4 _512 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _530 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _536 = cbMtdParam._m0[18u].x + _530.z;
    float _539 = (((cbMtdParam._m0[18u].z + _512.z) - _536) * _318) + _536;
    vec4 _551 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _563 = (((_551.z - _539) + cbMtdParam._m0[24u].z) * _396) + _539;
    float _569 = ((((_311 * 2.0) * _563) - _563) * cbMtdParam._m0[20u].z) + _563;
    vec4 _582 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _591 = (((cbMtdParam._m0[19u].y + _582.z) - _569) * _291) + _569;
    vec4 _607 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _622 = ((cbMtdParam._m0[21u].w * _475) * ((_607.z * cbMtdParam._m0[21u].z) - _591)) + _591;
    float _633 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _657 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_633 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_633 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _661 = cbPerFrame._m0[22u].x * 2.0;
    float _662 = _661 * cbMtdParam._m0[25u].y;
    float _665 = (_657.x * 0.5) + (-0.25);
    float _668 = (_657.y * 0.5) + (-0.25);
    float _669 = _668 * cbMtdParam._m0[25u].x;
    float _671 = (-0.0) - (cbMtdParam._m0[25u].x * _665);
    float _673 = fract(_662);
    float _675 = fract(_662 + 0.5);
    float _686 = abs((_673 * 2.0) + (-1.0));
    vec4 _703 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_673 * _671) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_669 * _673) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _707 = _703.z;
    vec4 _708 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_675 * _671) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_669 * _675) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _719 = ((_708.x - _705) * _686) + _705;
    float _726 = exp2(log2(_719 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _727 = isnan(cbMtdParam._m0[24u].x) ? _726 : (isnan(_726) ? cbMtdParam._m0[24u].x : max(_726, cbMtdParam._m0[24u].x));
    float _748 = _661 * cbMtdParam._m0[25u].w;
    float _749 = _668 * cbMtdParam._m0[25u].z;
    float _751 = (-0.0) - (cbMtdParam._m0[25u].z * _665);
    float _752 = fract(_748);
    float _754 = fract(_748 + 0.5);
    float _765 = abs((_752 * 2.0) + (-1.0));
    vec4 _781 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_752 * _751) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_749 * _752) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _783 = _781.x;
    float _784 = _781.y;
    float _785 = _781.z;
    vec4 _786 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_754 * _751) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_749 * _754) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _815 = ((_512.x - _532) * _318) + _532;
    float _816 = ((_512.y - _533) * _318) + _533;
    float _821 = ((_551.x - _815) * _396) + _815;
    float _822 = ((_551.y - _816) * _396) + _816;
    float _831 = ((((_582.x - _821) * _291) + _821) * 2.0) + (-1.0);
    float _832 = ((((_582.y - _822) * _291) + _822) * 2.0) + (-1.0);
    float _833 = dot(vec2(_831, _832), vec2(_831, _832));
    float _4076 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _838 = sqrt(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))));
    float _848 = ((cbMtdParam._m0[20u].w * ((_307.x * 2.0) + (-1.0))) + _831) + ((((_607.x * 2.0) + (-1.0)) * _475) * cbMtdParam._m0[21u].y);
    float _849 = ((cbMtdParam._m0[20u].w * ((_307.y * 2.0) + (-1.0))) + _832) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_607.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _852 = fma(_838, _228 * NORMAL.x, fma(_849, _235 * TANGENT.x, (_221 * _213) * _848));
    float _855 = fma(_838, _228 * NORMAL.y, fma(_849, _235 * TANGENT.y, (_221 * _214) * _848));
    float _858 = fma(_838, _228 * NORMAL.z, fma(_849, _235 * TANGENT.z, (_221 * _215) * _848));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    float _863 = _862 * _852;
    float _864 = _862 * _855;
    float _865 = _862 * _858;
    float _4087 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _866 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4109 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4120 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4131 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _870 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _937 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _927);
    float _938 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _927);
    float _939 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _927);
    float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
    float _944 = _937 * _943;
    float _945 = _938 * _943;
    float _946 = _939 * _943;
    float _952 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _953 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _971 = fma(_865, cbSceneParam._m0[5u].z, fma(_864, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _863));
    float _974 = fma(_865, cbSceneParam._m0[6u].z, fma(_864, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _863));
    float _977 = fma(_865, cbSceneParam._m0[7u].z, fma(_864, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _863));
    uint _990 = uint(roundEven(NORMAL.w)) * 13u;
    uint _991 = _990 + 9u;
    uint _992 = _991 + uint(cbMatDynParam._m0[0u].w);
    float _998 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_992].x;
    float _999 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_992].y;
    float _1000 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * cbInstanceData._m0[_992].z;
    float _4142 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _1004 = 1.0 - _870;
    float _1005 = _1001 * _1004;
    float _1006 = _1002 * _1004;
    float _1007 = _1003 * _1004;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _870;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _870;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _870;
    float _1015 = _1012 + 0.039999999105930328369140625;
    float _1017 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    vec4 _1027 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _952, cbSceneParam._m0[86u].y * _953));
    float _1030 = _1027.x * TEXCOORD_3.w;
    float _1031 = dot(vec3(_863, _864, _865), vec3(_944, _945, _946));
    float _1034 = _1031 * 2.0;
    float _1038 = (_1034 * _863) - _944;
    float _1039 = (_1034 * _864) - _945;
    float _1040 = (_1034 * _865) - _946;
    float _1044 = abs(dot(vec3(_944, _945, _946), vec3(_863, _864, _865)));
    float _4175 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1046 = sqrt(_866);
    float _1059 = exp2((_1046 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1046 * 3.0));
    float _1065 = (1.0 - _1059) * ((_1046 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1066 = _1059 * _1046;
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1403;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1129 = fma(_1102, cbModelParam._m0[26u].z, fma(_1098, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094));
        float _1133 = fma(_1102, cbModelParam._m0[27u].z, fma(_1098, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094));
        float _1137 = fma(_1102, cbModelParam._m0[28u].z, fma(_1098, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094));
        float _1161 = _1094 + _863;
        float _1162 = _1098 + _864;
        float _1163 = _1102 + _865;
        float _1173 = fma(_1163, cbModelParam._m0[26u].z, fma(_1162, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161)) - _1129;
        float _1174 = fma(_1163, cbModelParam._m0[27u].z, fma(_1162, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161)) - _1133;
        float _1175 = fma(_1163, cbModelParam._m0[28u].z, fma(_1162, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161)) - _1137;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1129 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1133 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[34u].z) + ((((((_1137 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1231 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1197.x + (-0.5));
        float _1233 = _1231 * (_1197.y + (-0.5));
        float _1234 = _1231 * (_1197.z + (-0.5));
        float _1241 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1204.x + (-0.5));
        float _1243 = _1241 * (_1204.y + (-0.5));
        float _1244 = _1241 * (_1204.z + (-0.5));
        float _1251 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1211.x + (-0.5));
        float _1253 = _1251 * (_1211.y + (-0.5));
        float _1254 = _1251 * (_1211.z + (-0.5));
        float _1261 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1218.x + (-0.5));
        float _1263 = _1261 * (_1218.y + (-0.5));
        float _1264 = _1261 * (_1218.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1285 = (dot(vec3(_863, _864, _865), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1295 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4223 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1297 + 1.0))) + _1302) * _1265;
        float _1312 = _1233 * 0.5;
        float _1313 = _1243 * 0.5;
        float _1314 = _1253 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_863, _864, _865), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4256 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1339 + 1.0))) + _1344) * _1266;
        float _1354 = _1234 * 0.5;
        float _1355 = _1244 * 0.5;
        float _1356 = _1254 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_863, _864, _865), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4289 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1381 + 1.0))) + _1386) * _1267;
        _1403 = _1234;
        _1405 = _1233;
        _1406 = _1232;
        _1407 = _1244;
        _1408 = _1243;
        _1409 = _1242;
        _1410 = _1254;
        _1411 = _1253;
        _1412 = _1252;
        _1413 = _1267;
        _1414 = _1266;
        _1415 = _1265;
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1404;
        _1405 = _1404;
        _1406 = _1404;
        _1407 = _1404;
        _1408 = _1404;
        _1409 = _1404;
        _1410 = _1404;
        _1411 = _1404;
        _1412 = _1404;
        _1413 = _1404;
        _1414 = _1404;
        _1415 = _1404;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1444 = fma(_1102, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1094));
        float _1448 = fma(_1102, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1094));
        float _1452 = fma(_1102, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1094));
        float _1475 = _1094 + _863;
        float _1476 = _1098 + _864;
        float _1477 = _1102 + _865;
        float _1487 = fma(_1477, cbModelParam._m0[30u].z, fma(_1476, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1475)) - _1444;
        float _1488 = fma(_1477, cbModelParam._m0[31u].z, fma(_1476, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1475)) - _1448;
        float _1489 = fma(_1477, cbModelParam._m0[32u].z, fma(_1476, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1475)) - _1452;
        float _1493 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
        float _1506 = ((_1493 * _1487) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1444 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1493 * _1488) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1448 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1493 * _1489) / cbModelParam._m0[35u].z) + ((((((_1452 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        float _1543 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1510.x + (-0.5));
        float _1545 = _1543 * (_1510.y + (-0.5));
        float _1546 = _1543 * (_1510.z + (-0.5));
        float _1553 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1517.x + (-0.5));
        float _1555 = _1553 * (_1517.y + (-0.5));
        float _1556 = _1553 * (_1517.z + (-0.5));
        float _1563 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1524.x + (-0.5));
        float _1565 = _1563 * (_1524.y + (-0.5));
        float _1566 = _1563 * (_1524.z + (-0.5));
        float _1573 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1531.x + (-0.5));
        float _1575 = _1573 * (_1531.y + (-0.5));
        float _1576 = _1573 * (_1531.z + (-0.5));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = _1544 * 0.5;
        float _1581 = _1554 * 0.5;
        float _1582 = _1564 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_863, _864, _865), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4352 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1607 + 1.0))) + _1612) * _1577;
        float _1622 = _1545 * 0.5;
        float _1623 = _1555 * 0.5;
        float _1624 = _1565 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_863, _864, _865), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4385 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1649 + 1.0))) + _1654) * _1578;
        float _1664 = _1546 * 0.5;
        float _1665 = _1556 * 0.5;
        float _1666 = _1566 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_863, _864, _865), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4418 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1691 + 1.0))) + _1696) * _1579;
        _1713 = _1546;
        _1714 = _1545;
        _1715 = _1544;
        _1716 = _1556;
        _1717 = _1555;
        _1718 = _1554;
        _1719 = _1566;
        _1720 = _1565;
        _1721 = _1564;
        _1722 = _1579;
        _1723 = _1578;
        _1724 = _1577;
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
    }
    else
    {
        _1713 = _1404;
        _1714 = _1404;
        _1715 = _1404;
        _1716 = _1404;
        _1717 = _1404;
        _1718 = _1404;
        _1719 = _1404;
        _1720 = _1404;
        _1721 = _1404;
        _1722 = _1404;
        _1723 = _1404;
        _1724 = _1404;
        _1725 = 0.0;
        _1726 = 0.0;
        _1727 = 0.0;
    }
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1416)) + _1416;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1417)) + _1417;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1418)) + _1418;
    float _1760 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1737));
    float _1781 = _1038 * 0.5;
    float _1782 = _1039 * 0.5;
    float _1783 = _1040 * 0.5;
    float _1784 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1787 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1790 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1797 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1403, _1407, _1410, _1413));
        float _1801 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1805 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1812 = dot(vec4(cbModelParam._m0[39u]), vec4(_1781, _1782, _1783, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1826 = dot(vec4(cbModelParam._m0[40u]), vec4(_1781, _1782, _1783, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1839 = (_1835 * cbModelParam._m0[1u].x) + (_1824 * (1.0 - cbModelParam._m0[1u].x));
    float _1849 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _866);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1849 : min(cbModelParam._m0[25u].z, _1849));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1897 = fma(_1102, cbModelParam._m0[13u].z, fma(_1098, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1094)) + cbModelParam._m0[13u].w;
        float _1901 = fma(_1102, cbModelParam._m0[14u].z, fma(_1098, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1094)) + cbModelParam._m0[14u].w;
        float _1905 = fma(_1102, cbModelParam._m0[15u].z, fma(_1098, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1094)) + cbModelParam._m0[15u].w;
        float _1908 = fma(_1040, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038));
        float _1911 = fma(_1040, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038));
        float _1914 = fma(_1040, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038));
        float _1942;
        if (_1908 > 0.0)
        {
            _1942 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1942 = frontier_phi_14_12_ladder;
        }
        float _2113;
        if (_1911 > 0.0)
        {
            _2113 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2113 = frontier_phi_23_19_ladder;
        }
        float _2409;
        if (_1914 > 0.0)
        {
            _2409 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2409 = frontier_phi_35_30_ladder;
        }
        float _2411 = isnan(_2113) ? _1942 : (isnan(_1942) ? _2113 : min(_1942, _2113));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1908) + _1897;
        float _2417 = (_2412 * _1911) + _1901;
        float _2418 = (_2412 * _1914) + _1905;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2419;
        float _2423 = _2419 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 > _2423) || ((_2417 < _2421) || ((_2416 < _2421) || (_2416 > _2423))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2418, cbModelParam._m0[9u].z, fma(_2417, cbModelParam._m0[9u].y, _2416 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2418, cbModelParam._m0[10u].z, fma(_2417, cbModelParam._m0[10u].y, _2416 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2418, cbModelParam._m0[11u].z, fma(_2417, cbModelParam._m0[11u].y, _2416 * cbModelParam._m0[11u].x))), _1850);
            frontier_phi_13_35_ladder = _2563.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2563.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2563.x * cbModelParam._m0[1u].y;
        }
        _1930 = frontier_phi_13_35_ladder_2;
        _1932 = frontier_phi_13_35_ladder_1;
        _1934 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1038, _1039, _1040), _1850);
        _1930 = _1918.x * cbModelParam._m0[1u].y;
        _1932 = _1918.y * cbModelParam._m0[1u].y;
        _1934 = _1918.z * cbModelParam._m0[1u].y;
    }
    float _1938 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _866);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1938 : min(cbModelParam._m0[25u].w, _1938));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1992 = fma(_1102, cbModelParam._m0[21u].z, fma(_1098, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1094)) + cbModelParam._m0[21u].w;
        float _1996 = fma(_1102, cbModelParam._m0[22u].z, fma(_1098, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1094)) + cbModelParam._m0[22u].w;
        float _2000 = fma(_1102, cbModelParam._m0[23u].z, fma(_1098, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1094)) + cbModelParam._m0[23u].w;
        float _2003 = fma(_1040, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038));
        float _2006 = fma(_1040, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038));
        float _2009 = fma(_1040, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038));
        float _2118;
        if (_2003 > 0.0)
        {
            _2118 = abs((1.0 - _1992) / _2003);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1992 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2118 = frontier_phi_25_21_ladder;
        }
        float _2436;
        if (_2006 > 0.0)
        {
            _2436 = abs((1.0 - _1996) / _2006);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1996 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2436 = frontier_phi_37_32_ladder;
        }
        float _2774;
        if (_2009 > 0.0)
        {
            _2774 = abs((1.0 - _2000) / _2009);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2000 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2774 = frontier_phi_47_44_ladder;
        }
        float _2776 = isnan(_2436) ? _2118 : (isnan(_2118) ? _2436 : min(_2118, _2436));
        float _2777 = isnan(_2774) ? _2776 : (isnan(_2776) ? _2774 : min(_2776, _2774));
        float _2781 = (_2777 * _2003) + _1992;
        float _2782 = (_2777 * _2006) + _1996;
        float _2783 = (_2777 * _2009) + _2000;
        float _2784 = _2777 * 9.9999997473787516355514526367188e-05;
        float _2785 = (-1.0) - _2784;
        float _2787 = _2784 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2783 > _2787) || ((_2783 < _2785) || ((_2782 > _2787) || ((_2782 < _2785) || ((_2781 < _2785) || (_2781 > _2787))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2783, cbModelParam._m0[17u].z, fma(_2782, cbModelParam._m0[17u].y, _2781 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2783, cbModelParam._m0[18u].z, fma(_2782, cbModelParam._m0[18u].y, _2781 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2783, cbModelParam._m0[19u].z, fma(_2782, cbModelParam._m0[19u].y, _2781 * cbModelParam._m0[19u].x))), _1939);
            frontier_phi_22_47_ladder = _2905.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2905.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2905.x * cbModelParam._m0[1u].z;
        }
        _2028 = frontier_phi_22_47_ladder_2;
        _2030 = frontier_phi_22_47_ladder_1;
        _2032 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1038, _1039, _1040), _1939);
        _2028 = _2012.x * cbModelParam._m0[1u].z;
        _2030 = _2012.y * cbModelParam._m0[1u].z;
        _2032 = _2012.z * cbModelParam._m0[1u].z;
    }
    float _2045 = (((_1065 * _1015) + _1066) * _1030) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2047 = (((_1065 * _1017) + _1066) * _1030) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2049 = (((_1065 * _1018) + _1066) * _1030) * ((cbModelParam._m0[1u].w * (_2032 - _1934)) + _1934);
    float _2052 = fma(_2049, cbSceneParam._m0[89u].z, fma(_2047, cbSceneParam._m0[89u].y, _2045 * cbSceneParam._m0[89u].x));
    float _2055 = fma(_2049, cbSceneParam._m0[90u].z, fma(_2047, cbSceneParam._m0[90u].y, _2045 * cbSceneParam._m0[90u].x));
    float _2058 = fma(_2049, cbSceneParam._m0[91u].z, fma(_2047, cbSceneParam._m0[91u].y, _2045 * cbSceneParam._m0[91u].x));
    float _2092 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2096 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2100 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2105 = _2092 / _2104;
    float _2106 = _2096 / _2104;
    float _2107 = _2100 / _2104;
    float _2254;
    float _2255;
    float _2256;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2134 = ((uint(_2107 > cbSceneParam._m0[59u].y) + uint(_2107 > cbSceneParam._m0[59u].x)) + uint(_2107 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2135 = _2134 + 43u;
        uint _2143 = _2134 + 44u;
        uint _2151 = _2134 + 45u;
        uint _2159 = _2134 + 46u;
        float _2170 = fma(_2104, cbSceneParam._m0[_2135].w, fma(_2100, cbSceneParam._m0[_2135].z, fma(_2096, cbSceneParam._m0[_2135].y, _2092 * cbSceneParam._m0[_2135].x)));
        float _2174 = fma(_2104, cbSceneParam._m0[_2143].w, fma(_2100, cbSceneParam._m0[_2143].z, fma(_2096, cbSceneParam._m0[_2143].y, _2092 * cbSceneParam._m0[_2143].x)));
        float _2182 = fma(_2104, cbSceneParam._m0[_2159].w, fma(_2100, cbSceneParam._m0[_2159].z, fma(_2096, cbSceneParam._m0[_2159].y, _2092 * cbSceneParam._m0[_2159].x)));
        float _2187 = cbSceneParam._m0[33u].z * _2182;
        float _2189 = cbSceneParam._m0[33u].w * _2182;
        float _2192 = fma(_2104, cbSceneParam._m0[_2151].w, fma(_2100, cbSceneParam._m0[_2151].z, fma(_2096, cbSceneParam._m0[_2151].y, _2092 * cbSceneParam._m0[_2151].x))) / _2182;
        float _2240 = (cbSceneParam._m0[33u].x - sqrt(((_2106 * _2106) + (_2105 * _2105)) + (_2107 * _2107))) * cbSceneParam._m0[33u].y;
        float _4544 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2247 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2187 + _2170) / _2182, (_2189 + _2174) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2189 + _2170) / _2182, (_2174 - _2187) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 - _2187) / _2182, (_2174 - _2189) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 - _2189) / _2182, (_2187 + _2174) / _2182), _2192), 0.0)).x), vec4(0.25)));
        _2254 = 1.0 - (_2247 * cbSceneParam._m0[34u].x);
        _2255 = 1.0 - (_2247 * cbSceneParam._m0[34u].y);
        _2256 = 1.0 - (_2247 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2254 = 1.0;
        _2255 = 1.0;
        _2256 = 1.0;
    }
    float _2320;
    float _2322;
    float _2324;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2308 = fma(_2104, cbSceneParam._m0[63u].w, fma(_2100, cbSceneParam._m0[63u].z, fma(_2096, cbSceneParam._m0[63u].y, _2092 * cbSceneParam._m0[63u].x)));
        float _2309 = fma(_2104, cbSceneParam._m0[60u].w, fma(_2100, cbSceneParam._m0[60u].z, fma(_2096, cbSceneParam._m0[60u].y, _2092 * cbSceneParam._m0[60u].x))) / _2308;
        float _2310 = fma(_2104, cbSceneParam._m0[61u].w, fma(_2100, cbSceneParam._m0[61u].z, fma(_2096, cbSceneParam._m0[61u].y, _2092 * cbSceneParam._m0[61u].x))) / _2308;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2309 >= cbSceneParam._m0[64u].x) && (_2310 >= cbSceneParam._m0[64u].y)) && (_2309 <= cbSceneParam._m0[64u].z)) && (_2310 <= cbSceneParam._m0[64u].w))
        {
            float _2449 = fma(_2104, cbSceneParam._m0[62u].w, fma(_2100, cbSceneParam._m0[62u].z, fma(_2096, cbSceneParam._m0[62u].y, _2092 * cbSceneParam._m0[62u].x))) / _2308;
            float _2453 = isnan(cbSceneParam._m0[41u].w) ? _2449 : (isnan(_2449) ? cbSceneParam._m0[41u].w : max(_2449, cbSceneParam._m0[41u].w));
            float _2496 = (cbSceneParam._m0[33u].x - sqrt(((_2106 * _2106) + (_2105 * _2105)) + (_2107 * _2107))) * cbSceneParam._m0[33u].y;
            float _4560 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
            float _2503 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2309, cbSceneParam._m0[33u].w + _2310), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2309, _2310 - cbSceneParam._m0[33u].z), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2309 - cbSceneParam._m0[33u].z, _2310 - cbSceneParam._m0[33u].w), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2309 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2310), _2453), 0.0)).x), vec4(0.25)));
            float _2507 = 1.0 - (_2503 * cbSceneParam._m0[34u].x);
            float _2508 = 1.0 - (_2503 * cbSceneParam._m0[34u].y);
            float _2509 = 1.0 - (_2503 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2509) ? _2256 : (isnan(_2256) ? _2509 : min(_2256, _2509));
            frontier_phi_34_33_ladder_1 = isnan(_2508) ? _2255 : (isnan(_2255) ? _2508 : min(_2255, _2508));
            frontier_phi_34_33_ladder_2 = isnan(_2507) ? _2254 : (isnan(_2254) ? _2507 : min(_2254, _2507));
        }
        else
        {
            frontier_phi_34_33_ladder = _2256;
            frontier_phi_34_33_ladder_1 = _2255;
            frontier_phi_34_33_ladder_2 = _2254;
        }
        _2320 = frontier_phi_34_33_ladder_2;
        _2322 = frontier_phi_34_33_ladder_1;
        _2324 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2320 = _2254;
        _2322 = _2255;
        _2324 = _2256;
    }
    uvec4 _2329 = floatBitsToUint(cbInstanceData._m0[_990 + 5u]);
    uint _2331 = _2329.x * 14u;
    uint _2332 = _2331 + 13u;
    float _2339 = _1030 + (-1.0);
    float _2344 = (cbLight._m0[_2332].x * _2339) + 1.0;
    float _2345 = (cbLight._m0[_2332].y * _2339) + 1.0;
    float _2346 = (cbLight._m0[_2332].z * _2339) + 1.0;
    float _2347 = (cbLight._m0[_2332].w * _2339) + 1.0;
    uint _2348 = _2331 + 5u;
    float _2354 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
    uint _2358 = _2331 + 4u;
    float _2368 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
    uint _2372 = _2331 | 1u;
    float _2383 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_863, _864, _865));
    float _2386 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_863, _864, _865));
    float _4596 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _4607 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2391 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * 0.3183098733425140380859375;
    float _2393 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2400 = ((cbLight._m0[_2348].x * _2354) * _2393) + (((cbLight._m0[_2358].x * _2320) * _2368) * _2391);
    float _2401 = ((_2354 * cbLight._m0[_2348].y) * _2393) + (((cbLight._m0[_2358].y * _2322) * _2368) * _2391);
    float _2402 = ((_2354 * cbLight._m0[_2348].z) * _2393) + (((cbLight._m0[_2358].z * _2324) * _2368) * _2391);
    uvec4 _2406 = floatBitsToUint(cbLight._m0[_2331 + 12u]);
    bool _2408 = _2406.x == 0u;
    float _2510;
    float _2512;
    float _2514;
    if (_2408)
    {
        _2510 = _2400;
        _2512 = _2401;
        _2514 = _2402;
    }
    else
    {
        uint _2518 = _2331 + 6u;
        float _2534 = (dot(vec3(cbLight._m0[_2331 + 2u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2535 = _2534 * _2534;
        float _4618 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2536 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2537 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2510 = (((cbLight._m0[_2518].x * 0.3183098733425140380859375) * _2536) * _2537) + _2400;
        _2512 = (((cbLight._m0[_2518].y * 0.3183098733425140380859375) * _2536) * _2537) + _2401;
        _2514 = (((cbLight._m0[_2518].z * 0.3183098733425140380859375) * _2536) * _2537) + _2402;
    }
    bool _2517 = _2406.y == 0u;
    float _2572;
    float _2574;
    float _2576;
    if (_2517)
    {
        _2572 = _2510;
        _2574 = _2512;
        _2576 = _2514;
    }
    else
    {
        uint _2745 = _2331 + 7u;
        float _2761 = (dot(vec3(cbLight._m0[_2331 + 3u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2762 = _2761 * _2761;
        float _4634 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2763 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2764 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2572 = (((cbLight._m0[_2745].x * 0.3183098733425140380859375) * _2763) * _2764) + _2510;
        _2574 = (((cbLight._m0[_2745].y * 0.3183098733425140380859375) * _2763) * _2764) + _2512;
        _2576 = (((cbLight._m0[_2745].z * 0.3183098733425140380859375) * _2763) * _2764) + _2514;
    }
    uint _2579 = _2331 + 8u;
    float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _866) * 0.949999988079071044921875);
    float _2593 = _2592 * _2592;
    float _2594 = cbLight._m0[_2331].x + _944;
    float _2595 = cbLight._m0[_2331].y + _945;
    float _2596 = cbLight._m0[_2331].z + _946;
    float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
    float _2601 = _2600 * _2594;
    float _2602 = _2600 * _2595;
    float _2603 = _2600 * _2596;
    float _2604 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2331].xyz));
    float _4650 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2607 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _4661 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _2608 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2609 = dot(vec3(_863, _864, _865), vec3(_2601, _2602, _2603));
    float _4672 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2613 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2601, _2602, _2603));
    float _4683 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2617 = _2593 * _2593;
    float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
    float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
    float _2630 = 0.959999978542327880859375 - _1012;
    float _2632 = 0.959999978542327880859375 - _1013;
    float _2633 = 0.959999978542327880859375 - _1014;
    float _2640 = 1.0 - _2593;
    float _2651 = (0.5 / (((_2608 * ((_2607 * _2640) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2608 * _2640) + _2593) * _2607))) * _2607;
    float _4694 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2653 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
    uint _2667 = _2331 + 9u;
    float _2678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _866) * 0.949999988079071044921875);
    float _2679 = _2678 * _2678;
    float _2680 = cbLight._m0[_2372].x + _944;
    float _2681 = cbLight._m0[_2372].y + _945;
    float _2682 = cbLight._m0[_2372].z + _946;
    float _2686 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
    float _2687 = _2686 * _2680;
    float _2688 = _2686 * _2681;
    float _2689 = _2686 * _2682;
    float _2690 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2372].xyz));
    float _4705 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2693 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2694 = dot(vec3(_863, _864, _865), vec3(_2687, _2688, _2689));
    float _4716 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2697 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2698 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2687, _2688, _2689));
    float _4727 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2702 = _2679 * _2679;
    float _2706 = ((_2697 * _2697) * (_2702 + (-1.0))) + 1.0;
    float _2713 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
    float _2720 = 1.0 - _2679;
    float _2730 = (0.5 / (((_2608 * ((_2693 * _2720) + _2679)) + 9.9999999392252902907785028219223e-09) + (((_2608 * _2720) + _2679) * _2693))) * _2693;
    float _4738 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2732 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2702 / ((_2706 * _2706) * 3.141590118408203125));
    float _2742 = (((((_2713 * _2630) + _1015) * cbLight._m0[_2667].x) * _2732) * _2354) + ((((cbLight._m0[_2579].x * _2320) * ((_2629 * _2630) + _1015)) * _2653) * _2368);
    float _2743 = (((((_2713 * _2632) + _1017) * cbLight._m0[_2667].y) * _2732) * _2354) + ((((cbLight._m0[_2579].y * _2322) * ((_2629 * _2632) + _1017)) * _2653) * _2368);
    float _2744 = (((((_2713 * _2633) + _1018) * cbLight._m0[_2667].z) * _2732) * _2354) + ((((cbLight._m0[_2579].z * _2324) * ((_2629 * _2633) + _1018)) * _2653) * _2368);
    float _2800;
    float _2802;
    float _2804;
    if (_2408)
    {
        _2800 = _2742;
        _2802 = _2743;
        _2804 = _2744;
    }
    else
    {
        uint _2806 = _2331 + 2u;
        uint _2810 = _2331 + 10u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _866) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _944;
        float _2827 = cbLight._m0[_2806].y + _945;
        float _2828 = cbLight._m0[_2806].z + _946;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2806].xyz));
        float _4749 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2840 = dot(vec3(_863, _864, _865), vec3(_2833, _2834, _2835));
        float _4760 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4771 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2608 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2608 * _2866) + _2825) * _2839))) * _2839;
        float _4782 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2800 = (((((_2859 * _2630) + _1015) * cbLight._m0[_2810].x) * _2878) * _2879) + _2742;
        _2802 = (((((_2859 * _2632) + _1017) * cbLight._m0[_2810].y) * _2878) * _2879) + _2743;
        _2804 = (((((_2859 * _2633) + _1018) * cbLight._m0[_2810].z) * _2878) * _2879) + _2744;
    }
    float _2910;
    float _2912;
    float _2914;
    if (_2517)
    {
        _2910 = _2800;
        _2912 = _2802;
        _2914 = _2804;
    }
    else
    {
        uint _2921 = _2331 + 3u;
        uint _2925 = _2331 + 11u;
        float _2939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2921].w)) * _866) * 0.949999988079071044921875);
        float _2940 = _2939 * _2939;
        float _2941 = cbLight._m0[_2921].x + _944;
        float _2942 = cbLight._m0[_2921].y + _945;
        float _2943 = cbLight._m0[_2921].z + _946;
        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
        float _2948 = _2947 * _2941;
        float _2949 = _2947 * _2942;
        float _2950 = _2947 * _2943;
        float _2951 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2921].xyz));
        float _4798 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2954 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2955 = dot(vec3(_863, _864, _865), vec3(_2948, _2949, _2950));
        float _4809 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2958 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2959 = dot(vec3(cbLight._m0[_2921].xyz), vec3(_2948, _2949, _2950));
        float _4820 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2963 = _2940 * _2940;
        float _2967 = ((_2958 * _2958) * (_2963 + (-1.0))) + 1.0;
        float _2974 = exp2(log2(1.0 - (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) * 5.0);
        float _2981 = 1.0 - _2940;
        float _2991 = (0.5 / (((_2608 * ((_2954 * _2981) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2608 * _2981) + _2940) * _2954))) * _2954;
        float _4831 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        float _2993 = (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2963 / ((_2967 * _2967) * 3.141590118408203125));
        float _2994 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2910 = (((((_2974 * _2630) + _1015) * cbLight._m0[_2925].x) * _2993) * _2994) + _2800;
        _2912 = (((((_2974 * _2632) + _1017) * cbLight._m0[_2925].y) * _2993) * _2994) + _2802;
        _2914 = (((((_2974 * _2633) + _1018) * cbLight._m0[_2925].z) * _2993) * _2994) + _2804;
    }
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    if (_2329.y == 0u)
    {
        uvec4 _3015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3016 = _3015.x;
        uint _3027 = uint((float(_3015.y) * floor(float(uint(cbSceneParam._m0[85u].y * _953) / _3016))) + floor(float(uint(cbSceneParam._m0[85u].x * _952) / _3016)));
        float _3037 = (log2(_2107 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3038 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        uint _3041 = uint(isnan(14.0) ? _3038 : (isnan(_3038) ? 14.0 : min(_3038, 14.0)));
        uvec4 _3046 = texelFetch(g_lightClusterGridBuffer, int(((_3041 << 2u) + (_3027 << 6u)) >> 2u));
        uint _3047 = _3046.x;
        uint _3048 = _3015.z;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        if (((((1u << ((_3048 >> 4u) & 15u)) + 4294967295u) & _3047) == 0u) || ((_3048 & 240u) == 0u))
        {
            _3150 = 0.0;
            _3152 = 0.0;
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
        }
        else
        {
            float _3151;
            float _3153;
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            float _3298 = 0.0;
            uint _3299 = 0u;
            uint _3308;
            bool _3309;
            for (;;)
            {
                _3308 = texelFetch(g_lightClassification, int((((_3041 << 5u) + (_3027 << 9u)) + (_3299 << 2u)) >> 2u)).x;
                _3309 = _3308 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3309)
                {
                    frontier_phi_66_pred = _3298;
                    frontier_phi_66_pred_1 = _3297;
                    frontier_phi_66_pred_2 = _3296;
                    frontier_phi_66_pred_3 = _3295;
                    frontier_phi_66_pred_4 = _3294;
                    frontier_phi_66_pred_5 = _3293;
                }
                else
                {
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    uint _3423;
                    _3417 = _3293;
                    _3418 = _3294;
                    _3419 = _3295;
                    _3420 = _3296;
                    _3421 = _3297;
                    _3422 = _3298;
                    _3423 = _3308;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    for (;;)
                    {
                        uint _3427 = uint(findLSB(_3423)) + (_3299 << 5u);
                        uint _3424 = (_3423 + 4294967295u) & _3423;
                        uint _3429 = _3427 * 48u;
                        vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3429)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 3u)).x));
                        uint _3449 = (_3427 * 48u) + 4u;
                        vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 3u)).x));
                        uint _3468 = (_3427 * 48u) + 8u;
                        vec3 _3479 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3468)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 2u)).x));
                        float _3483 = _3443.x - _2105;
                        float _3484 = _3443.y - _2106;
                        float _3485 = _3443.z - _2107;
                        float _3486 = dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485));
                        float _3489 = inversesqrt(_3486);
                        float _3490 = _3489 * _3483;
                        float _3491 = _3489 * _3484;
                        float _3492 = _3489 * _3485;
                        float _3493 = dot(vec3(_971, _974, _977), vec3(_3490, _3491, _3492));
                        float _3498 = 1.0 - (_3486 * _3443.w);
                        float _4857 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3499 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3500 = sqrt(_3486) * _3462.w;
                        float _3503 = 1.39999997615814208984375 / (_3500 + 1.39999997615814208984375);
                        float _3504 = _3503 * _3503;
                        float _3507 = ((1.0 - _3504) * _3493) + _3504;
                        float _3510 = _3500 * _3500;
                        float _3514 = ((isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0))) * _3499) / ((_3510 * 0.699999988079071044921875) + 1.0);
                        float _3518 = (-0.0) - _2105;
                        float _3519 = (-0.0) - _2106;
                        float _3520 = (-0.0) - _2107;
                        float _3524 = inversesqrt(dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520)));
                        float _3525 = _3524 * _3518;
                        float _3526 = _3524 * _3519;
                        float _3527 = _3524 * _3520;
                        float _3534 = exp2(log2(1.0 / ((_3510 * 3.5) + 5.0)) * 0.25);
                        float _3535 = 1.0 - _1046;
                        float _3542 = sqrt(1.0 - ((1.0 - (_3535 * _3535)) * (1.0 - (_3534 * _3534))));
                        float _3543 = _3542 * _3542;
                        float _3544 = _3543 * _3543;
                        float _3545 = _3525 + _3490;
                        float _3546 = _3526 + _3491;
                        float _3547 = _3527 + _3492;
                        float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                        float _3555 = dot(vec3(_971, _974, _977), vec3(_3525, _3526, _3527));
                        float _4873 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3558 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3559 = dot(vec3(_971, _974, _977), vec3(_3551 * _3545, _3551 * _3546, _3551 * _3547));
                        float _4884 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3562 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3566 = ((_3562 * _3562) * (_3544 + (-1.0))) + 1.0;
                        float _3567 = _3503 * _3543;
                        float _3568 = _3567 * _3567;
                        float _3571 = ((1.0 - _3568) * _3493) + _3568;
                        float _4895 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3572 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3573 = 1.0 - _3543;
                        float _3583 = (0.5 / (((_3572 * ((_3558 * _3573) + _3543)) + 9.9999999392252902907785028219223e-09) + (((_3572 * _3573) + _3543) * _3558))) * _3572;
                        float _4906 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3594 = (((_3544 * 3.1415927410125732421875) * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) / ((_3566 * _3566) * ((_3510 * 2.1991131305694580078125) + 3.141590118408203125))) * _3499;
                        _3352 = (_3514 * _3462.x) + _3420;
                        _3353 = (_3514 * _3462.y) + _3421;
                        _3354 = (_3514 * _3462.z) + _3422;
                        _3349 = (_3594 * _3479.x) + _3417;
                        _3350 = (_3594 * _3479.y) + _3418;
                        _3351 = (_3594 * _3479.z) + _3419;
                        if (_3424 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3417 = _3349;
                            _3418 = _3350;
                            _3419 = _3351;
                            _3420 = _3352;
                            _3421 = _3353;
                            _3422 = _3354;
                            _3423 = _3424;
                        }
                    }
                    frontier_phi_66_pred = _3354;
                    frontier_phi_66_pred_1 = _3353;
                    frontier_phi_66_pred_2 = _3352;
                    frontier_phi_66_pred_3 = _3351;
                    frontier_phi_66_pred_4 = _3350;
                    frontier_phi_66_pred_5 = _3349;
                }
                _3161 = frontier_phi_66_pred;
                _3159 = frontier_phi_66_pred_1;
                _3157 = frontier_phi_66_pred_2;
                _3155 = frontier_phi_66_pred_3;
                _3153 = frontier_phi_66_pred_4;
                _3151 = frontier_phi_66_pred_5;
                uint _3300 = _3299 + 1u;
                if (_3300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3293 = _3151;
                    _3294 = _3153;
                    _3295 = _3155;
                    _3296 = _3157;
                    _3297 = _3159;
                    _3298 = _3161;
                    _3299 = _3300;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3150 = _3151;
            _3152 = _3153;
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
        }
        uvec4 _3164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3165 = _3164.z;
        uint _3167 = (_3165 >> 8u) & 15u;
        float _3261;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        if (((4294967295u << _3167) & _3047) == 0u)
        {
            _3261 = _3150;
            _3263 = _3152;
            _3265 = _3154;
            _3267 = _3156;
            _3269 = _3158;
            _3271 = _3160;
        }
        else
        {
            float _3286 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
            float _3287 = _3286 * _2105;
            float _3288 = _3286 * _2106;
            float _3289 = _3286 * _2107;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3167 < ((_3165 >> 12u) & 15u))
            {
                float _3262;
                float _3264;
                float _3266;
                float _3268;
                float _3270;
                float _3272;
                float _3400 = _3150;
                float _3401 = _3152;
                float _3402 = _3154;
                float _3403 = _3156;
                float _3404 = _3158;
                float _3405 = _3160;
                uint _3406 = _3167;
                uint _3415;
                bool _3416;
                for (;;)
                {
                    _3415 = texelFetch(g_lightClassification, int((((_3041 << 5u) + (_3027 << 9u)) + (_3406 << 2u)) >> 2u)).x;
                    _3416 = _3415 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3416)
                    {
                        frontier_phi_72_pred = _3405;
                        frontier_phi_72_pred_1 = _3404;
                        frontier_phi_72_pred_2 = _3403;
                        frontier_phi_72_pred_3 = _3402;
                        frontier_phi_72_pred_4 = _3401;
                        frontier_phi_72_pred_5 = _3400;
                    }
                    else
                    {
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3612 = _3400;
                        float _3613 = _3401;
                        float _3614 = _3402;
                        float _3615 = _3403;
                        float _3616 = _3404;
                        float _3617 = _3405;
                        uint _3618 = _3415;
                        uint _3619;
                        vec4 _3644;
                        float _3645;
                        vec4 _3660;
                        vec3 _3672;
                        vec4 _3687;
                        vec4 _3702;
                        float _3748;
                        bool _3749;
                        for (;;)
                        {
                            uint _3629 = ((_3406 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3618));
                            _3619 = (_3618 + 4294967295u) & _3618;
                            uint _3631 = _3629 * 40u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            _3645 = _3644.w;
                            uint _3647 = (_3629 * 40u) + 4u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3629 * 40u) + 8u;
                            _3672 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x));
                            uint _3674 = (_3629 * 40u) + 16u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3689 = (_3629 * 40u) + 20u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3704 = (_3629 * 40u) + 24u;
                            vec4 _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3723 = (_3629 * 40u) + 28u;
                            vec4 _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            _3748 = fma(_2107, _3736.z, fma(_2106, _3736.y, _3736.x * _2105)) + _3736.w;
                            _3749 = !((fma(_2107, _3717.z, fma(_2106, _3717.y, _3717.x * _2105)) + _3717.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3749)
                            {
                                float _3776 = _3644.x - _2105;
                                float _3777 = _3644.y - _2106;
                                float _3778 = _3644.z - _2107;
                                float _3779 = dot(vec3(_3776, _3777, _3778), vec3(_3776, _3777, _3778));
                                float _3782 = inversesqrt(_3779);
                                float _3783 = _3782 * _3776;
                                float _3784 = _3782 * _3777;
                                float _3785 = _3782 * _3778;
                                float _3789 = 1.0 - (_3779 / (_3645 * _3645));
                                float _4917 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3794 = sqrt(_3779) * _3660.w;
                                float _3796 = 1.39999997615814208984375 / (_3794 + 1.39999997615814208984375);
                                float _3797 = _3796 * _3796;
                                float _3800 = ((1.0 - _3797) * dot(vec3(_3783, _3784, _3785), vec3(_971, _974, _977))) + _3797;
                                float _3803 = _3794 * _3794;
                                float _3807 = (fma(_2107, _3687.z, fma(_2106, _3687.y, _3687.x * _2105)) + _3687.w) / _3748;
                                float _3808 = (fma(_2107, _3702.z, fma(_2106, _3702.y, _3702.x * _2105)) + _3702.w) / _3748;
                                float _3812 = 1.0 - dot(vec2(_3807, _3808), vec2(_3807, _3808));
                                float _4933 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3813 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3814 = _3813 * (((isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0))) * _3790) / ((_3803 * 0.699999988079071044921875) + 1.0));
                                float _3826 = exp2(log2(1.0 / ((_3803 * 3.5) + 5.0)) * 0.25);
                                float _3827 = 1.0 - _1046;
                                float _3834 = sqrt(1.0 - ((1.0 - (_3827 * _3827)) * (1.0 - (_3826 * _3826))));
                                float _3835 = _3834 * _3834;
                                float _3836 = _3835 * _3835;
                                float _3837 = _3783 - _3287;
                                float _3838 = _3784 - _3288;
                                float _3839 = _3785 - _3289;
                                float _3843 = inversesqrt(dot(vec3(_3837, _3838, _3839), vec3(_3837, _3838, _3839)));
                                float _3847 = dot(vec3(_971, _974, _977), vec3((-0.0) - _3287, (-0.0) - _3288, (-0.0) - _3289));
                                float _4944 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3850 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3851 = dot(vec3(_971, _974, _977), vec3(_3843 * _3837, _3843 * _3838, _3843 * _3839));
                                float _4955 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3854 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3858 = ((_3854 * _3854) * (_3836 + (-1.0))) + 1.0;
                                float _3859 = _3796 * _3835;
                                float _3860 = _3859 * _3859;
                                float _3866 = ((1.0 - _3860) * dot(vec3(_971, _974, _977), vec3(_3783, _3784, _3785))) + _3860;
                                float _4966 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3868 = 1.0 - _3835;
                                float _3878 = (0.5 / (((_3867 * ((_3850 * _3868) + _3835)) + 9.9999999392252902907785028219223e-09) + (((_3867 * _3868) + _3835) * _3850))) * _3867;
                                float _4977 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3888 = (_3813 * _3790) * (((_3836 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3858 * _3858) * ((_3803 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3814 * _3660.y;
                                frontier_phi_78_pred_1 = _3814 * _3660.x;
                                frontier_phi_78_pred_2 = _3888 * _3672.z;
                                frontier_phi_78_pred_3 = _3888 * _3672.y;
                                frontier_phi_78_pred_4 = _3888 * _3672.x;
                                frontier_phi_78_pred_5 = _3814 * _3660.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3896 = frontier_phi_78_pred;
                            _3895 = frontier_phi_78_pred_1;
                            _3894 = frontier_phi_78_pred_2;
                            _3893 = frontier_phi_78_pred_3;
                            _3892 = frontier_phi_78_pred_4;
                            _3897 = frontier_phi_78_pred_5;
                            _3602 = _3895 + _3615;
                            _3603 = _3896 + _3616;
                            _3604 = _3897 + _3617;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            if (_3619 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3619;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3604;
                        frontier_phi_72_pred_1 = _3603;
                        frontier_phi_72_pred_2 = _3602;
                        frontier_phi_72_pred_3 = _3601;
                        frontier_phi_72_pred_4 = _3600;
                        frontier_phi_72_pred_5 = _3599;
                    }
                    _3272 = frontier_phi_72_pred;
                    _3270 = frontier_phi_72_pred_1;
                    _3268 = frontier_phi_72_pred_2;
                    _3266 = frontier_phi_72_pred_3;
                    _3264 = frontier_phi_72_pred_4;
                    _3262 = frontier_phi_72_pred_5;
                    uint _3407 = _3406 + 1u;
                    if (_3407 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3400 = _3262;
                        _3401 = _3264;
                        _3402 = _3266;
                        _3403 = _3268;
                        _3404 = _3270;
                        _3405 = _3272;
                        _3406 = _3407;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3272;
                frontier_phi_60_61_ladder_1 = _3270;
                frontier_phi_60_61_ladder_2 = _3266;
                frontier_phi_60_61_ladder_3 = _3264;
                frontier_phi_60_61_ladder_4 = _3262;
                frontier_phi_60_61_ladder_5 = _3268;
            }
            else
            {
                frontier_phi_60_61_ladder = _3160;
                frontier_phi_60_61_ladder_1 = _3158;
                frontier_phi_60_61_ladder_2 = _3154;
                frontier_phi_60_61_ladder_3 = _3152;
                frontier_phi_60_61_ladder_4 = _3150;
                frontier_phi_60_61_ladder_5 = _3156;
            }
            _3261 = frontier_phi_60_61_ladder_4;
            _3263 = frontier_phi_60_61_ladder_3;
            _3265 = frontier_phi_60_61_ladder_2;
            _3267 = frontier_phi_60_61_ladder_5;
            _3269 = frontier_phi_60_61_ladder_1;
            _3271 = frontier_phi_60_61_ladder;
        }
        float _3276 = isnan(1.0) ? _1030 : (isnan(_1030) ? 1.0 : min(_1030, 1.0));
        _3060 = (_3276 * _3267) + _2572;
        _3062 = (_3276 * _3269) + _2574;
        _3064 = (_3276 * _3271) + _2576;
        _3066 = ((_3261 * _1015) * _3276) + _2910;
        _3068 = ((_3263 * _1017) * _3276) + _2912;
        _3070 = ((_3265 * _1018) * _3276) + _2914;
    }
    else
    {
        _3060 = _2572;
        _3062 = _2574;
        _3064 = _2576;
        _3066 = _2910;
        _3068 = _2912;
        _3070 = _2914;
    }
    uint _3076 = _991 + uint(cbMatDynParam._m0[0u].w);
    float _3082 = (isnan(cbMtdParam._m0[24u].y) ? _727 : (isnan(_727) ? cbMtdParam._m0[24u].y : min(_727, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4993 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _5004 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _5015 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _3105 = (((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_3060 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1030))) + ((_3066 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1839)) * cbPerFrame._m0[3u].x)) + ((_3082 * (((((_786.x - _783) * _765) + _783) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _719) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_3076].x);
    float _3107 = (((_3082 * (((((_786.y - _784) * _765) + _784) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_708.y - _706) * _686) + _706)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_3076].y) + ((_3068 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1839)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_3062 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1030)));
    float _3109 = (((_3082 * (((((_786.z - _785) * _765) + _785) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_708.z - _707) * _686) + _707)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_3076].z) + ((_3070 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1839)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_3064 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1030)));
    uint _3113 = _990 + 6u;
    float _3121 = _952 / cbSceneParam._m0[86u].x;
    float _3122 = _953 / cbSceneParam._m0[86u].y;
    vec4 _3136 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3121, _3122, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3138 = _3136.x;
    float _3139 = _3136.y;
    float _3140 = _3136.z;
    float _3141 = _3136.w;
    float _3212;
    float _3214;
    float _3216;
    float _3218;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _3175 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _3176 = _3175 / _886;
        float _3187 = _3176 * _937;
        float _3188 = _938 * _3176;
        float _3189 = (-0.0) - _3188;
        float _3190 = _3176 * _939;
        float _3192 = (cbSceneParam._m0[77u].w * _3189) / _3175;
        float _3193 = _3192 + cbSceneParam._m0[79u].w;
        float _3194 = cbSceneParam._m0[79u].w - _3188;
        float _3200 = sqrt(((_3187 * _3187) + (_3188 * _3188)) + (_3190 * _3190));
        float _3203 = (1.0 - (cbSceneParam._m0[77u].w / _3175)) * _3200;
        float _3208 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3210 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3362;
        if (abs((_3189 - _3192) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3362 = ((((_3193 > 0.0) ? exp2(_3208 * _3193) : (2.0 - exp2(_3210 * _3193))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3203;
        }
        else
        {
            float _3322 = 1.0 / cbSceneParam._m0[80u].x;
            float _3323 = isnan(_3194) ? _3193 : (isnan(_3193) ? _3194 : max(_3193, _3194));
            float _3324 = isnan(_3194) ? _3193 : (isnan(_3193) ? _3194 : min(_3193, _3194));
            float _3333 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : min(_3323, 0.0));
            float _3334 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : min(_3324, 0.0));
            _3362 = ((abs(_3200 / _3189) * cbSceneParam._m0[80u].y) * ((((_3333 - _3334) * 2.0) - ((exp2(_3208 * (isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0)))) - exp2(_3208 * (isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))))) * _3322)) - ((exp2(_3210 * _3333) - exp2(_3210 * _3334)) * _3322))) + (_3203 * cbSceneParam._m0[80u].z);
        }
        vec4 _3364 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3121, _3122, 1.0), 0.0);
        float _3373 = exp2((_3362 * (-1.44269502162933349609375)) * (1.0 - _3364.w));
        float _3374 = log2(_3373);
        float _3390 = log2(_3141);
        _3212 = (exp2(_3390 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].x)) * _3364.x) / cbSceneParam._m0[78u].x)) + _3138;
        _3214 = (exp2(_3390 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].y)) * _3364.y) / cbSceneParam._m0[78u].y)) + _3139;
        _3216 = (exp2(_3390 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].z)) * _3364.z) / cbSceneParam._m0[78u].z)) + _3140;
        _3218 = _3373 * _3141;
    }
    else
    {
        _3212 = _3138;
        _3214 = _3139;
        _3216 = _3140;
        _3218 = _3141;
    }
    float _3229 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3230 = _3229 == 3.0;
    float _3231 = log2(_3218);
    float _3238 = exp2(_3231 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0)));
    float _3239 = exp2(_3231 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0)));
    float _3240 = exp2(_3231 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0)));
    float _3249 = (_3229 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3249 * (_3230 ? _3238 : (_3238 + (cbSceneParam._m0[72u].w * _3212)));
    SV_Target.y = _3249 * (_3230 ? _3239 : (_3239 + (cbSceneParam._m0[72u].w * _3214)));
    SV_Target.z = _3249 * (_3230 ? _3240 : (_3240 + (cbSceneParam._m0[72u].w * _3216)));
    SV_Target.w = cbInstanceData._m0[_3113].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3113].w;
}


