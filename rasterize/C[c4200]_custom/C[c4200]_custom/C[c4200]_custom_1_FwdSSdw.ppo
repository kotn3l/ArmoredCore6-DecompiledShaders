#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1405;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _279 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _292 = exp2(log2(_279.w * cbMtdParam._m0[26u].x) * cbMtdParam._m0[18u].w);
    float _293 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _294 = isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0));
    vec4 _310 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _314 = _310.z;
    float _319 = exp2(log2(_314 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _320 : (isnan(_320) ? 1.0 : min(_320, 1.0));
    vec4 _333 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _358 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _369 = cbMtdParam._m0[9u].x * _358.x;
    float _370 = cbMtdParam._m0[9u].y * _358.y;
    float _371 = cbMtdParam._m0[9u].z * _358.z;
    float _378 = (((cbMtdParam._m0[10u].x * _333.x) - _369) * _321) + _369;
    float _379 = (((cbMtdParam._m0[10u].y * _333.y) - _370) * _321) + _370;
    float _380 = (((cbMtdParam._m0[10u].z * _333.z) - _371) * _321) + _371;
    vec4 _393 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _395 = _393.x;
    float _399 = exp2(log2(_395) * cbMtdParam._m0[19u].z);
    vec4 _412 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _432 = (((cbMtdParam._m0[12u].x * _412.x) - _378) * _399) + _378;
    float _433 = (((cbMtdParam._m0[12u].y * _412.y) - _379) * _399) + _379;
    float _434 = (((cbMtdParam._m0[12u].z * _412.z) - _380) * _399) + _380;
    vec4 _447 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _472 = (_279.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _447.x) - _432) * _294) + _432);
    float _474 = (_279.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _447.y) - _433) * _294) + _433);
    float _476 = (_279.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _447.z) - _434) * _294) + _434);
    float _478 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _487 = (_478 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _478))) * (cbMtdParam._m0[22u].y + 1.0);
    float _3797 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _495 = ((cbMtdParam._m0[14u].x - _472) * _488) + _472;
    float _496 = ((cbMtdParam._m0[14u].y - _474) * _488) + _474;
    float _497 = ((cbMtdParam._m0[14u].z - _476) * _488) + _476;
    float _499 = _395 - (_478 * _395);
    vec4 _515 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _533 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _539 = cbMtdParam._m0[18u].x + _533.z;
    float _542 = (((cbMtdParam._m0[18u].z + _515.z) - _539) * _321) + _539;
    vec4 _554 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _566 = (((_554.z - _542) + cbMtdParam._m0[24u].z) * _399) + _542;
    float _572 = ((((_314 * 2.0) * _566) - _566) * cbMtdParam._m0[20u].z) + _566;
    vec4 _585 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _594 = (((cbMtdParam._m0[19u].y + _585.z) - _572) * _294) + _572;
    vec4 _610 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _625 = ((cbMtdParam._m0[21u].w * _478) * ((_610.z * cbMtdParam._m0[21u].z) - _594)) + _594;
    float _636 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _658 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_636 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_636 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _662 = cbPerFrame._m0[22u].x * 2.0;
    float _663 = _662 * cbMtdParam._m0[25u].y;
    float _666 = (_658.x * 0.5) + (-0.25);
    float _669 = (_658.y * 0.5) + (-0.25);
    float _670 = _669 * cbMtdParam._m0[25u].x;
    float _672 = (-0.0) - (cbMtdParam._m0[25u].x * _666);
    float _674 = fract(_663);
    float _676 = fract(_663 + 0.5);
    float _687 = abs((_674 * 2.0) + (-1.0));
    vec4 _704 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_674 * _672) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_670 * _674) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _706 = _704.x;
    float _707 = _704.y;
    float _708 = _704.z;
    vec4 _709 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_676 * _672) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_670 * _676) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _720 = ((_709.x - _706) * _687) + _706;
    float _727 = exp2(log2(_720 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _728 = isnan(cbMtdParam._m0[24u].x) ? _727 : (isnan(_727) ? cbMtdParam._m0[24u].x : max(_727, cbMtdParam._m0[24u].x));
    float _749 = _662 * cbMtdParam._m0[25u].w;
    float _750 = _669 * cbMtdParam._m0[25u].z;
    float _752 = (-0.0) - (cbMtdParam._m0[25u].z * _666);
    float _753 = fract(_749);
    float _755 = fract(_749 + 0.5);
    float _766 = abs((_753 * 2.0) + (-1.0));
    vec4 _782 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_753 * _752) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_750 * _753) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _784 = _782.x;
    float _785 = _782.y;
    float _786 = _782.z;
    vec4 _787 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_755 * _752) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_750 * _755) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _816 = ((_515.x - _535) * _321) + _535;
    float _817 = ((_515.y - _536) * _321) + _536;
    float _822 = ((_554.x - _816) * _399) + _816;
    float _823 = ((_554.y - _817) * _399) + _817;
    float _832 = ((((_585.x - _822) * _294) + _822) * 2.0) + (-1.0);
    float _833 = ((((_585.y - _823) * _294) + _823) * 2.0) + (-1.0);
    float _834 = dot(vec2(_832, _833), vec2(_832, _833));
    float _3818 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _839 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    float _849 = ((cbMtdParam._m0[20u].w * ((_310.x * 2.0) + (-1.0))) + _832) + ((((_610.x * 2.0) + (-1.0)) * _478) * cbMtdParam._m0[21u].y);
    float _850 = ((cbMtdParam._m0[20u].w * ((_310.y * 2.0) + (-1.0))) + _833) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_610.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _853 = fma(_839, _226 * NORMAL.x, fma(_850, _233 * TANGENT.x, (_219 * _211) * _849));
    float _856 = fma(_839, _226 * NORMAL.y, fma(_850, _233 * TANGENT.y, (_219 * _212) * _849));
    float _859 = fma(_839, _226 * NORMAL.z, fma(_850, _233 * TANGENT.z, (_219 * _213) * _849));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    float _864 = _863 * _853;
    float _865 = _863 * _856;
    float _866 = _863 * _859;
    float _3829 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _867 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3851 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3862 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3873 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _871 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _887 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _938 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _928);
    float _939 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _928);
    float _940 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _928);
    float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
    float _945 = _938 * _944;
    float _946 = _939 * _944;
    float _947 = _940 * _944;
    float _953 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _954 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _972 = fma(_866, cbSceneParam._m0[5u].z, fma(_865, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _864));
    float _975 = fma(_866, cbSceneParam._m0[6u].z, fma(_865, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _864));
    float _978 = fma(_866, cbSceneParam._m0[7u].z, fma(_865, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _864));
    uint _991 = uint(roundEven(NORMAL.w)) * 13u;
    uint _992 = _991 + 9u;
    uint _993 = _992 + uint(cbMatDynParam._m0[0u].w);
    float _999 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * cbInstanceData._m0[_993].x;
    float _1000 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_993].y;
    float _1001 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_993].z;
    float _3884 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1005 = 1.0 - _871;
    float _1006 = _1002 * _1005;
    float _1007 = _1003 * _1005;
    float _1008 = _1004 * _1005;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _871;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _871;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _871;
    float _1016 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    float _1019 = _1015 + 0.039999999105930328369140625;
    vec4 _1028 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _953, cbSceneParam._m0[86u].y * _954));
    float _1031 = _1028.x * TEXCOORD_3.w;
    float _1032 = dot(vec3(_864, _865, _866), vec3(_945, _946, _947));
    float _1035 = _1032 * 2.0;
    float _1039 = (_1035 * _864) - _945;
    float _1040 = (_1035 * _865) - _946;
    float _1041 = (_1035 * _866) - _947;
    float _1045 = abs(dot(vec3(_945, _946, _947), vec3(_864, _865, _866)));
    float _3917 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1047 = sqrt(_867);
    float _1060 = exp2((_1047 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1047 * 3.0));
    float _1066 = (1.0 - _1060) * ((_1047 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1067 = _1060 * _1047;
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1404;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1130 = fma(_1103, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1095));
        float _1134 = fma(_1103, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1095));
        float _1138 = fma(_1103, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1095));
        float _1162 = _1095 + _864;
        float _1163 = _1099 + _865;
        float _1164 = _1103 + _866;
        float _1174 = fma(_1164, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1162)) - _1130;
        float _1175 = fma(_1164, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1162)) - _1134;
        float _1176 = fma(_1164, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1162)) - _1138;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1130 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1134 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[34u].z) + ((((((_1138 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1232 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1198.x + (-0.5));
        float _1234 = _1232 * (_1198.y + (-0.5));
        float _1235 = _1232 * (_1198.z + (-0.5));
        float _1242 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1205.x + (-0.5));
        float _1244 = _1242 * (_1205.y + (-0.5));
        float _1245 = _1242 * (_1205.z + (-0.5));
        float _1252 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1212.x + (-0.5));
        float _1254 = _1252 * (_1212.y + (-0.5));
        float _1255 = _1252 * (_1212.z + (-0.5));
        float _1262 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1219.x + (-0.5));
        float _1264 = _1262 * (_1219.y + (-0.5));
        float _1265 = _1262 * (_1219.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1286 = (dot(vec3(_864, _865, _866), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1296 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3965 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1298 + 1.0))) + _1303) * _1266;
        float _1313 = _1234 * 0.5;
        float _1314 = _1244 * 0.5;
        float _1315 = _1254 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_864, _865, _866), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3998 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1340 + 1.0))) + _1345) * _1267;
        float _1355 = _1235 * 0.5;
        float _1356 = _1245 * 0.5;
        float _1357 = _1255 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_864, _865, _866), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4031 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1382 + 1.0))) + _1387) * _1268;
        _1404 = _1235;
        _1406 = _1234;
        _1407 = _1233;
        _1408 = _1245;
        _1409 = _1244;
        _1410 = _1243;
        _1411 = _1255;
        _1412 = _1254;
        _1413 = _1253;
        _1414 = _1268;
        _1415 = _1267;
        _1416 = _1266;
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1405;
        _1406 = _1405;
        _1407 = _1405;
        _1408 = _1405;
        _1409 = _1405;
        _1410 = _1405;
        _1411 = _1405;
        _1412 = _1405;
        _1413 = _1405;
        _1414 = _1405;
        _1415 = _1405;
        _1416 = _1405;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1445 = fma(_1103, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1095));
        float _1449 = fma(_1103, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1095));
        float _1453 = fma(_1103, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1095));
        float _1476 = _1095 + _864;
        float _1477 = _1099 + _865;
        float _1478 = _1103 + _866;
        float _1488 = fma(_1478, cbModelParam._m0[30u].z, fma(_1477, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1476)) - _1445;
        float _1489 = fma(_1478, cbModelParam._m0[31u].z, fma(_1477, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1476)) - _1449;
        float _1490 = fma(_1478, cbModelParam._m0[32u].z, fma(_1477, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1476)) - _1453;
        float _1494 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
        float _1507 = ((_1494 * _1488) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1445 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1494 * _1489) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1449 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1509 = ((_1494 * _1490) / cbModelParam._m0[35u].z) + ((((((_1453 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        float _1544 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1511.x + (-0.5));
        float _1546 = _1544 * (_1511.y + (-0.5));
        float _1547 = _1544 * (_1511.z + (-0.5));
        float _1554 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1518.x + (-0.5));
        float _1556 = _1554 * (_1518.y + (-0.5));
        float _1557 = _1554 * (_1518.z + (-0.5));
        float _1564 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1525.x + (-0.5));
        float _1566 = _1564 * (_1525.y + (-0.5));
        float _1567 = _1564 * (_1525.z + (-0.5));
        float _1574 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1532.x + (-0.5));
        float _1576 = _1574 * (_1532.y + (-0.5));
        float _1577 = _1574 * (_1532.z + (-0.5));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = _1545 * 0.5;
        float _1582 = _1555 * 0.5;
        float _1583 = _1565 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_864, _865, _866), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4094 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1608 + 1.0))) + _1613) * _1578;
        float _1623 = _1546 * 0.5;
        float _1624 = _1556 * 0.5;
        float _1625 = _1566 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_864, _865, _866), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4127 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1650 + 1.0))) + _1655) * _1579;
        float _1665 = _1547 * 0.5;
        float _1666 = _1557 * 0.5;
        float _1667 = _1567 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_864, _865, _866), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4160 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1692 + 1.0))) + _1697) * _1580;
        _1714 = _1547;
        _1715 = _1546;
        _1716 = _1545;
        _1717 = _1557;
        _1718 = _1556;
        _1719 = _1555;
        _1720 = _1567;
        _1721 = _1566;
        _1722 = _1565;
        _1723 = _1580;
        _1724 = _1579;
        _1725 = _1578;
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
    }
    else
    {
        _1714 = _1405;
        _1715 = _1405;
        _1716 = _1405;
        _1717 = _1405;
        _1718 = _1405;
        _1719 = _1405;
        _1720 = _1405;
        _1721 = _1405;
        _1722 = _1405;
        _1723 = _1405;
        _1724 = _1405;
        _1725 = _1405;
        _1726 = 0.0;
        _1727 = 0.0;
        _1728 = 0.0;
    }
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1417)) + _1417;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1418)) + _1418;
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1419)) + _1419;
    float _1761 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1738));
    float _1782 = _1039 * 0.5;
    float _1783 = _1040 * 0.5;
    float _1784 = _1041 * 0.5;
    float _1785 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1788 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1791 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1825;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1798 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1404, _1408, _1411, _1414));
        float _1802 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1806 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1813 = dot(vec4(cbModelParam._m0[39u]), vec4(_1782, _1783, _1784, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1836;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1827 = dot(vec4(cbModelParam._m0[40u]), vec4(_1782, _1783, _1784, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1840 = (_1836 * cbModelParam._m0[1u].x) + (_1825 * (1.0 - cbModelParam._m0[1u].x));
    float _1850 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _867);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1850 : min(cbModelParam._m0[25u].z, _1850));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1898 = fma(_1103, cbModelParam._m0[13u].z, fma(_1099, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1095)) + cbModelParam._m0[13u].w;
        float _1902 = fma(_1103, cbModelParam._m0[14u].z, fma(_1099, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1095)) + cbModelParam._m0[14u].w;
        float _1906 = fma(_1103, cbModelParam._m0[15u].z, fma(_1099, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1095)) + cbModelParam._m0[15u].w;
        float _1909 = fma(_1041, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039));
        float _1912 = fma(_1041, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039));
        float _1915 = fma(_1041, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039));
        float _1943;
        if (_1909 > 0.0)
        {
            _1943 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1943 = frontier_phi_14_12_ladder;
        }
        float _2167;
        if (_1912 > 0.0)
        {
            _2167 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2167 = frontier_phi_23_19_ladder;
        }
        float _2424;
        if (_1915 > 0.0)
        {
            _2424 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2424 = frontier_phi_35_30_ladder;
        }
        float _2426 = isnan(_2167) ? _1943 : (isnan(_1943) ? _2167 : min(_1943, _2167));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1909) + _1898;
        float _2432 = (_2427 * _1912) + _1902;
        float _2433 = (_2427 * _1915) + _1906;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2434;
        float _2438 = _2434 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 > _2438) || ((_2432 < _2436) || ((_2431 < _2436) || (_2431 > _2438))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2433, cbModelParam._m0[9u].z, fma(_2432, cbModelParam._m0[9u].y, _2431 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2433, cbModelParam._m0[10u].z, fma(_2432, cbModelParam._m0[10u].y, _2431 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2433, cbModelParam._m0[11u].z, fma(_2432, cbModelParam._m0[11u].y, _2431 * cbModelParam._m0[11u].x))), _1851);
            frontier_phi_13_35_ladder = _2561.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2561.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2561.x * cbModelParam._m0[1u].y;
        }
        _1931 = frontier_phi_13_35_ladder_2;
        _1933 = frontier_phi_13_35_ladder_1;
        _1935 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1039, _1040, _1041), _1851);
        _1931 = _1919.x * cbModelParam._m0[1u].y;
        _1933 = _1919.y * cbModelParam._m0[1u].y;
        _1935 = _1919.z * cbModelParam._m0[1u].y;
    }
    float _1939 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _867);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1939 : min(cbModelParam._m0[25u].w, _1939));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1993 = fma(_1103, cbModelParam._m0[21u].z, fma(_1099, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1095)) + cbModelParam._m0[21u].w;
        float _1997 = fma(_1103, cbModelParam._m0[22u].z, fma(_1099, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1095)) + cbModelParam._m0[22u].w;
        float _2001 = fma(_1103, cbModelParam._m0[23u].z, fma(_1099, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1095)) + cbModelParam._m0[23u].w;
        float _2004 = fma(_1041, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039));
        float _2007 = fma(_1041, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039));
        float _2010 = fma(_1041, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039));
        float _2172;
        if (_2004 > 0.0)
        {
            _2172 = abs((1.0 - _1993) / _2004);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1993 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2172 = frontier_phi_25_21_ladder;
        }
        float _2451;
        if (_2007 > 0.0)
        {
            _2451 = abs((1.0 - _1997) / _2007);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1997 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2451 = frontier_phi_37_32_ladder;
        }
        float _2664;
        if (_2010 > 0.0)
        {
            _2664 = abs((1.0 - _2001) / _2010);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2001 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2664 = frontier_phi_46_43_ladder;
        }
        float _2666 = isnan(_2451) ? _2172 : (isnan(_2172) ? _2451 : min(_2172, _2451));
        float _2667 = isnan(_2664) ? _2666 : (isnan(_2666) ? _2664 : min(_2666, _2664));
        float _2671 = (_2667 * _2004) + _1993;
        float _2672 = (_2667 * _2007) + _1997;
        float _2673 = (_2667 * _2010) + _2001;
        float _2674 = _2667 * 9.9999997473787516355514526367188e-05;
        float _2675 = (-1.0) - _2674;
        float _2677 = _2674 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2673 > _2677) || ((_2673 < _2675) || ((_2672 > _2677) || ((_2672 < _2675) || ((_2671 < _2675) || (_2671 > _2677))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2673, cbModelParam._m0[17u].z, fma(_2672, cbModelParam._m0[17u].y, _2671 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2673, cbModelParam._m0[18u].z, fma(_2672, cbModelParam._m0[18u].y, _2671 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2673, cbModelParam._m0[19u].z, fma(_2672, cbModelParam._m0[19u].y, _2671 * cbModelParam._m0[19u].x))), _1940);
            frontier_phi_22_46_ladder = _2895.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2895.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2895.x * cbModelParam._m0[1u].z;
        }
        _2029 = frontier_phi_22_46_ladder_2;
        _2031 = frontier_phi_22_46_ladder_1;
        _2033 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1039, _1040, _1041), _1940);
        _2029 = _2013.x * cbModelParam._m0[1u].z;
        _2031 = _2013.y * cbModelParam._m0[1u].z;
        _2033 = _2013.z * cbModelParam._m0[1u].z;
    }
    float _2046 = (((_1066 * _1016) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2048 = (((_1066 * _1018) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2050 = (((_1066 * _1019) + _1067) * _1031) * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2053 = fma(_2050, cbSceneParam._m0[89u].z, fma(_2048, cbSceneParam._m0[89u].y, _2046 * cbSceneParam._m0[89u].x));
    float _2056 = fma(_2050, cbSceneParam._m0[90u].z, fma(_2048, cbSceneParam._m0[90u].y, _2046 * cbSceneParam._m0[90u].x));
    float _2059 = fma(_2050, cbSceneParam._m0[91u].z, fma(_2048, cbSceneParam._m0[91u].y, _2046 * cbSceneParam._m0[91u].x));
    vec4 _2067 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_953, _954));
    float _2069 = _2067.w;
    float _2081 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2069);
    float _2082 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2069);
    float _2083 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2069);
    uvec4 _2087 = floatBitsToUint(cbInstanceData._m0[_991 + 5u]);
    uint _2089 = _2087.x * 14u;
    uint _2090 = _2089 + 13u;
    float _2097 = _1031 + (-1.0);
    float _2102 = (cbLight._m0[_2090].x * _2097) + 1.0;
    float _2103 = (cbLight._m0[_2090].y * _2097) + 1.0;
    float _2104 = (cbLight._m0[_2090].z * _2097) + 1.0;
    float _2105 = (cbLight._m0[_2090].w * _2097) + 1.0;
    uint _2106 = _2089 + 5u;
    float _2112 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2116 = _2089 + 4u;
    float _2126 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2130 = _2089 | 1u;
    float _2141 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_864, _865, _866));
    float _2144 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_864, _865, _866));
    float _4296 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _4307 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2149 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2151 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.3183098733425140380859375;
    float _2158 = ((cbLight._m0[_2106].x * _2112) * _2151) + (((cbLight._m0[_2116].x * _2081) * _2126) * _2149);
    float _2159 = ((_2112 * cbLight._m0[_2106].y) * _2151) + (((cbLight._m0[_2116].y * _2082) * _2126) * _2149);
    float _2160 = ((_2112 * cbLight._m0[_2106].z) * _2151) + (((cbLight._m0[_2116].z * _2083) * _2126) * _2149);
    uvec4 _2164 = floatBitsToUint(cbLight._m0[_2089 + 12u]);
    bool _2166 = _2164.x == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2166)
    {
        _2177 = _2158;
        _2179 = _2159;
        _2181 = _2160;
    }
    else
    {
        uint _2185 = _2089 + 6u;
        float _2201 = (dot(vec3(cbLight._m0[_2089 + 2u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4318 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2204 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2177 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _2158;
        _2179 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _2159;
        _2181 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _2160;
    }
    bool _2184 = _2164.y == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2184)
    {
        _2222 = _2177;
        _2224 = _2179;
        _2226 = _2181;
    }
    else
    {
        uint _2395 = _2089 + 7u;
        float _2411 = (dot(vec3(cbLight._m0[_2089 + 3u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2412 = _2411 * _2411;
        float _4334 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2413 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2414 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2222 = (((cbLight._m0[_2395].x * 0.3183098733425140380859375) * _2413) * _2414) + _2177;
        _2224 = (((cbLight._m0[_2395].y * 0.3183098733425140380859375) * _2413) * _2414) + _2179;
        _2226 = (((cbLight._m0[_2395].z * 0.3183098733425140380859375) * _2413) * _2414) + _2181;
    }
    uint _2229 = _2089 + 8u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _867) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_2089].x + _945;
    float _2245 = cbLight._m0[_2089].y + _946;
    float _2246 = cbLight._m0[_2089].z + _947;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2089].xyz));
    float _4350 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _4361 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _2258 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2259 = dot(vec3(_864, _865, _866), vec3(_2251, _2252, _2253));
    float _4372 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2251, _2252, _2253));
    float _4383 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2243 * _2243;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
    float _2280 = 0.959999978542327880859375 - _1013;
    float _2282 = 0.959999978542327880859375 - _1014;
    float _2283 = 0.959999978542327880859375 - _1015;
    float _2290 = 1.0 - _2243;
    float _2301 = (0.5 / (((_2258 * ((_2257 * _2290) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2290) + _2243) * _2257))) * _2257;
    float _4394 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2303 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    uint _2317 = _2089 + 9u;
    float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _867) * 0.949999988079071044921875);
    float _2329 = _2328 * _2328;
    float _2330 = cbLight._m0[_2130].x + _945;
    float _2331 = cbLight._m0[_2130].y + _946;
    float _2332 = cbLight._m0[_2130].z + _947;
    float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
    float _2337 = _2336 * _2330;
    float _2338 = _2336 * _2331;
    float _2339 = _2336 * _2332;
    float _2340 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2130].xyz));
    float _4405 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2344 = dot(vec3(_864, _865, _866), vec3(_2337, _2338, _2339));
    float _4416 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2337, _2338, _2339));
    float _4427 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2329 * _2329;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
    float _2370 = 1.0 - _2329;
    float _2380 = (0.5 / (((_2258 * ((_2343 * _2370) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2370) + _2329) * _2343))) * _2343;
    float _4438 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    float _2392 = (((((_2363 * _2280) + _1016) * cbLight._m0[_2317].x) * _2382) * _2112) + ((((cbLight._m0[_2229].x * _2081) * ((_2279 * _2280) + _1016)) * _2303) * _2126);
    float _2393 = (((((_2363 * _2282) + _1018) * cbLight._m0[_2317].y) * _2382) * _2112) + ((((cbLight._m0[_2229].y * _2082) * ((_2279 * _2282) + _1018)) * _2303) * _2126);
    float _2394 = (((((_2363 * _2283) + _1019) * cbLight._m0[_2317].z) * _2382) * _2112) + ((((cbLight._m0[_2229].z * _2083) * ((_2279 * _2283) + _1019)) * _2303) * _2126);
    float _2456;
    float _2458;
    float _2460;
    if (_2166)
    {
        _2456 = _2392;
        _2458 = _2393;
        _2460 = _2394;
    }
    else
    {
        uint _2462 = _2089 + 2u;
        uint _2466 = _2089 + 10u;
        float _2480 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2462].w)) * _867) * 0.949999988079071044921875);
        float _2481 = _2480 * _2480;
        float _2482 = cbLight._m0[_2462].x + _945;
        float _2483 = cbLight._m0[_2462].y + _946;
        float _2484 = cbLight._m0[_2462].z + _947;
        float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
        float _2489 = _2488 * _2482;
        float _2490 = _2488 * _2483;
        float _2491 = _2488 * _2484;
        float _2492 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2462].xyz));
        float _4449 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2496 = dot(vec3(_864, _865, _866), vec3(_2489, _2490, _2491));
        float _4460 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2499 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2500 = dot(vec3(cbLight._m0[_2462].xyz), vec3(_2489, _2490, _2491));
        float _4471 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2504 = _2481 * _2481;
        float _2508 = ((_2499 * _2499) * (_2504 + (-1.0))) + 1.0;
        float _2515 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
        float _2522 = 1.0 - _2481;
        float _2532 = (0.5 / (((_2258 * ((_2495 * _2522) + _2481)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2522) + _2481) * _2495))) * _2495;
        float _4482 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2534 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2504 / ((_2508 * _2508) * 3.141590118408203125));
        float _2535 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2456 = (((((_2515 * _2280) + _1016) * cbLight._m0[_2466].x) * _2534) * _2535) + _2392;
        _2458 = (((((_2515 * _2282) + _1018) * cbLight._m0[_2466].y) * _2534) * _2535) + _2393;
        _2460 = (((((_2515 * _2283) + _1019) * cbLight._m0[_2466].z) * _2534) * _2535) + _2394;
    }
    float _2570;
    float _2572;
    float _2574;
    if (_2184)
    {
        _2570 = _2456;
        _2572 = _2458;
        _2574 = _2460;
    }
    else
    {
        uint _2581 = _2089 + 3u;
        uint _2585 = _2089 + 11u;
        float _2599 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2581].w)) * _867) * 0.949999988079071044921875);
        float _2600 = _2599 * _2599;
        float _2601 = cbLight._m0[_2581].x + _945;
        float _2602 = cbLight._m0[_2581].y + _946;
        float _2603 = cbLight._m0[_2581].z + _947;
        float _2607 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
        float _2608 = _2607 * _2601;
        float _2609 = _2607 * _2602;
        float _2610 = _2607 * _2603;
        float _2611 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2581].xyz));
        float _4498 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2615 = dot(vec3(_864, _865, _866), vec3(_2608, _2609, _2610));
        float _4509 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2619 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_2608, _2609, _2610));
        float _4520 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2623 = _2600 * _2600;
        float _2627 = ((_2618 * _2618) * (_2623 + (-1.0))) + 1.0;
        float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
        float _2641 = 1.0 - _2600;
        float _2651 = (0.5 / (((_2258 * ((_2614 * _2641) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2641) + _2600) * _2614))) * _2614;
        float _4531 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2653 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2623 / ((_2627 * _2627) * 3.141590118408203125));
        float _2654 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2570 = (((((_2634 * _2280) + _1016) * cbLight._m0[_2585].x) * _2653) * _2654) + _2456;
        _2572 = (((((_2634 * _2282) + _1018) * cbLight._m0[_2585].y) * _2653) * _2654) + _2458;
        _2574 = (((((_2634 * _2283) + _1019) * cbLight._m0[_2585].z) * _2653) * _2654) + _2460;
    }
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_2087.y == 0u)
    {
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2729;
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2729;
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2729;
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.x;
        uint _2756 = uint((float(_2744.y) * floor(float(uint(cbSceneParam._m0[85u].y * _954) / _2745))) + floor(float(uint(cbSceneParam._m0[85u].x * _953) / _2745)));
        float _2766 = (log2(_2732 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2767 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        uint _2770 = uint(isnan(14.0) ? _2767 : (isnan(_2767) ? 14.0 : min(_2767, 14.0)));
        uvec4 _2775 = texelFetch(g_lightClusterGridBuffer, int(((_2770 << 2u) + (_2756 << 6u)) >> 2u));
        uint _2776 = _2775.x;
        uint _2777 = _2744.z;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((((1u << ((_2777 >> 4u) & 15u)) + 4294967295u) & _2776) == 0u) || ((_2777 & 240u) == 0u))
        {
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
        }
        else
        {
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            uint _3049 = 0u;
            uint _3058;
            bool _3059;
            for (;;)
            {
                _3058 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3049 << 2u)) >> 2u)).x;
                _3059 = _3058 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3059)
                {
                    frontier_phi_61_pred = _3043;
                    frontier_phi_61_pred_1 = _3048;
                    frontier_phi_61_pred_2 = _3047;
                    frontier_phi_61_pred_3 = _3046;
                    frontier_phi_61_pred_4 = _3045;
                    frontier_phi_61_pred_5 = _3044;
                }
                else
                {
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    uint _3173;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3058;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    for (;;)
                    {
                        uint _3177 = uint(findLSB(_3173)) + (_3049 << 5u);
                        uint _3174 = (_3173 + 4294967295u) & _3173;
                        uint _3179 = _3177 * 48u;
                        vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3199 = (_3177 * 48u) + 4u;
                        vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3218 = (_3177 * 48u) + 8u;
                        vec3 _3229 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x));
                        float _3233 = _3193.x - _2730;
                        float _3234 = _3193.y - _2731;
                        float _3235 = _3193.z - _2732;
                        float _3236 = dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235));
                        float _3239 = inversesqrt(_3236);
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3243 = dot(vec3(_972, _975, _978), vec3(_3240, _3241, _3242));
                        float _3248 = 1.0 - (_3236 * _3193.w);
                        float _4557 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3250 = sqrt(_3236) * _3212.w;
                        float _3253 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                        float _3254 = _3253 * _3253;
                        float _3257 = ((1.0 - _3254) * _3243) + _3254;
                        float _3260 = _3250 * _3250;
                        float _3264 = ((isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))) * _3249) / ((_3260 * 0.699999988079071044921875) + 1.0);
                        float _3268 = (-0.0) - _2730;
                        float _3269 = (-0.0) - _2731;
                        float _3270 = (-0.0) - _2732;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3275 = _3274 * _3268;
                        float _3276 = _3274 * _3269;
                        float _3277 = _3274 * _3270;
                        float _3285 = exp2(log2(1.0 / ((_3260 * 3.5) + 5.0)) * 0.25);
                        float _3286 = 1.0 - _1047;
                        float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                        float _3294 = _3293 * _3293;
                        float _3295 = _3294 * _3294;
                        float _3296 = _3275 + _3240;
                        float _3297 = _3276 + _3241;
                        float _3298 = _3277 + _3242;
                        float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                        float _3306 = dot(vec3(_972, _975, _978), vec3(_3275, _3276, _3277));
                        float _4573 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3310 = dot(vec3(_972, _975, _978), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                        float _4584 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3313 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                        float _3318 = _3253 * _3294;
                        float _3319 = _3318 * _3318;
                        float _3322 = ((1.0 - _3319) * _3243) + _3319;
                        float _4595 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3323 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3324 = 1.0 - _3294;
                        float _3334 = (0.5 / (((_3323 * ((_3309 * _3324) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3323 * _3324) + _3294) * _3309))) * _3323;
                        float _4606 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3345 = (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) / ((_3317 * _3317) * ((_3260 * 2.1991131305694580078125) + 3.141590118408203125))) * _3249;
                        _3102 = (_3264 * _3212.x) + _3170;
                        _3103 = (_3264 * _3212.y) + _3171;
                        _3104 = (_3264 * _3212.z) + _3172;
                        _3099 = (_3345 * _3229.x) + _3167;
                        _3100 = (_3345 * _3229.y) + _3168;
                        _3101 = (_3345 * _3229.z) + _3169;
                        if (_3174 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3174;
                        }
                    }
                    frontier_phi_61_pred = _3099;
                    frontier_phi_61_pred_1 = _3104;
                    frontier_phi_61_pred_2 = _3103;
                    frontier_phi_61_pred_3 = _3102;
                    frontier_phi_61_pred_4 = _3101;
                    frontier_phi_61_pred_5 = _3100;
                }
                _2901 = frontier_phi_61_pred;
                _2911 = frontier_phi_61_pred_1;
                _2909 = frontier_phi_61_pred_2;
                _2907 = frontier_phi_61_pred_3;
                _2905 = frontier_phi_61_pred_4;
                _2903 = frontier_phi_61_pred_5;
                uint _3050 = _3049 + 1u;
                if (_3050 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3043 = _2901;
                    _3044 = _2903;
                    _3045 = _2905;
                    _3046 = _2907;
                    _3047 = _2909;
                    _3048 = _2911;
                    _3049 = _3050;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
        }
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.z;
        uint _2917 = (_2915 >> 8u) & 15u;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((4294967295u << _2917) & _2776) == 0u)
        {
            _3011 = _2900;
            _3013 = _2902;
            _3015 = _2904;
            _3017 = _2906;
            _3019 = _2908;
            _3021 = _2910;
        }
        else
        {
            float _3036 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
            float _3037 = _3036 * _2730;
            float _3038 = _3036 * _2731;
            float _3039 = _3036 * _2732;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2917 < ((_2915 >> 12u) & 15u))
            {
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3150 = _2900;
                float _3151 = _2902;
                float _3152 = _2904;
                float _3153 = _2906;
                float _3154 = _2908;
                float _3155 = _2910;
                uint _3156 = _2917;
                uint _3165;
                bool _3166;
                for (;;)
                {
                    _3165 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3156 << 2u)) >> 2u)).x;
                    _3166 = _3165 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3166)
                    {
                        frontier_phi_67_pred = _3153;
                        frontier_phi_67_pred_1 = _3154;
                        frontier_phi_67_pred_2 = _3155;
                        frontier_phi_67_pred_3 = _3152;
                        frontier_phi_67_pred_4 = _3151;
                        frontier_phi_67_pred_5 = _3150;
                    }
                    else
                    {
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        float _3368 = _3155;
                        uint _3369 = _3165;
                        uint _3370;
                        vec4 _3395;
                        float _3396;
                        vec4 _3411;
                        vec3 _3423;
                        vec4 _3438;
                        vec4 _3453;
                        float _3499;
                        bool _3500;
                        for (;;)
                        {
                            uint _3380 = ((_3156 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3369));
                            _3370 = (_3369 + 4294967295u) & _3369;
                            uint _3382 = _3380 * 40u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3396 = _3395.w;
                            uint _3398 = (_3380 * 40u) + 4u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3380 * 40u) + 8u;
                            _3423 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x));
                            uint _3425 = (_3380 * 40u) + 16u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3380 * 40u) + 20u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3380 * 40u) + 24u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3474 = (_3380 * 40u) + 28u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3499 = fma(_2732, _3487.z, fma(_2731, _3487.y, _3487.x * _2730)) + _3487.w;
                            _3500 = !((fma(_2732, _3468.z, fma(_2731, _3468.y, _3468.x * _2730)) + _3468.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3500)
                            {
                                float _3527 = _3395.x - _2730;
                                float _3528 = _3395.y - _2731;
                                float _3529 = _3395.z - _2732;
                                float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                                float _3533 = inversesqrt(_3530);
                                float _3534 = _3533 * _3527;
                                float _3535 = _3533 * _3528;
                                float _3536 = _3533 * _3529;
                                float _3540 = 1.0 - (_3530 / (_3396 * _3396));
                                float _4617 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3545 = sqrt(_3530) * _3411.w;
                                float _3547 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                                float _3548 = _3547 * _3547;
                                float _3551 = ((1.0 - _3548) * dot(vec3(_3534, _3535, _3536), vec3(_972, _975, _978))) + _3548;
                                float _3554 = _3545 * _3545;
                                float _3558 = (fma(_2732, _3438.z, fma(_2731, _3438.y, _3438.x * _2730)) + _3438.w) / _3499;
                                float _3559 = (fma(_2732, _3453.z, fma(_2731, _3453.y, _3453.x * _2730)) + _3453.w) / _3499;
                                float _3563 = 1.0 - dot(vec2(_3558, _3559), vec2(_3558, _3559));
                                float _4633 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3565 = _3564 * (((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3541) / ((_3554 * 0.699999988079071044921875) + 1.0));
                                float _3577 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                                float _3578 = 1.0 - _1047;
                                float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                                float _3586 = _3585 * _3585;
                                float _3587 = _3586 * _3586;
                                float _3588 = _3534 - _3037;
                                float _3589 = _3535 - _3038;
                                float _3590 = _3536 - _3039;
                                float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                                float _3598 = dot(vec3(_972, _975, _978), vec3((-0.0) - _3037, (-0.0) - _3038, (-0.0) - _3039));
                                float _4644 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3602 = dot(vec3(_972, _975, _978), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                                float _4655 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                                float _3610 = _3547 * _3586;
                                float _3611 = _3610 * _3610;
                                float _3617 = ((1.0 - _3611) * dot(vec3(_972, _975, _978), vec3(_3534, _3535, _3536))) + _3611;
                                float _4666 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3619 = 1.0 - _3586;
                                float _3629 = (0.5 / (((_3618 * ((_3601 * _3619) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3586) * _3601))) * _3618;
                                float _4677 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3639 = (_3564 * _3541) * (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3609 * _3609) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3639 * _3423.x;
                                frontier_phi_73_pred_1 = _3639 * _3423.y;
                                frontier_phi_73_pred_2 = _3565 * _3411.z;
                                frontier_phi_73_pred_3 = _3565 * _3411.y;
                                frontier_phi_73_pred_4 = _3565 * _3411.x;
                                frontier_phi_73_pred_5 = _3639 * _3423.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3643 = frontier_phi_73_pred;
                            _3644 = frontier_phi_73_pred_1;
                            _3648 = frontier_phi_73_pred_2;
                            _3647 = frontier_phi_73_pred_3;
                            _3646 = frontier_phi_73_pred_4;
                            _3645 = frontier_phi_73_pred_5;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            if (_3370 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3370;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3353;
                        frontier_phi_67_pred_1 = _3354;
                        frontier_phi_67_pred_2 = _3355;
                        frontier_phi_67_pred_3 = _3352;
                        frontier_phi_67_pred_4 = _3351;
                        frontier_phi_67_pred_5 = _3350;
                    }
                    _3018 = frontier_phi_67_pred;
                    _3020 = frontier_phi_67_pred_1;
                    _3022 = frontier_phi_67_pred_2;
                    _3016 = frontier_phi_67_pred_3;
                    _3014 = frontier_phi_67_pred_4;
                    _3012 = frontier_phi_67_pred_5;
                    uint _3157 = _3156 + 1u;
                    if (_3157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3150 = _3012;
                        _3151 = _3014;
                        _3152 = _3016;
                        _3153 = _3018;
                        _3154 = _3020;
                        _3155 = _3022;
                        _3156 = _3157;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3020;
                frontier_phi_55_56_ladder_1 = _3022;
                frontier_phi_55_56_ladder_2 = _3018;
                frontier_phi_55_56_ladder_3 = _3016;
                frontier_phi_55_56_ladder_4 = _3014;
                frontier_phi_55_56_ladder_5 = _3012;
            }
            else
            {
                frontier_phi_55_56_ladder = _2908;
                frontier_phi_55_56_ladder_1 = _2910;
                frontier_phi_55_56_ladder_2 = _2906;
                frontier_phi_55_56_ladder_3 = _2904;
                frontier_phi_55_56_ladder_4 = _2902;
                frontier_phi_55_56_ladder_5 = _2900;
            }
            _3011 = frontier_phi_55_56_ladder_5;
            _3013 = frontier_phi_55_56_ladder_4;
            _3015 = frontier_phi_55_56_ladder_3;
            _3017 = frontier_phi_55_56_ladder_2;
            _3019 = frontier_phi_55_56_ladder;
            _3021 = frontier_phi_55_56_ladder_1;
        }
        float _3026 = isnan(1.0) ? _1031 : (isnan(_1031) ? 1.0 : min(_1031, 1.0));
        _2789 = (_3026 * _3017) + _2222;
        _2791 = (_3026 * _3019) + _2224;
        _2793 = (_3026 * _3021) + _2226;
        _2795 = ((_3011 * _1016) * _3026) + _2570;
        _2797 = ((_3013 * _1018) * _3026) + _2572;
        _2799 = ((_3015 * _1019) * _3026) + _2574;
    }
    else
    {
        _2789 = _2222;
        _2791 = _2224;
        _2793 = _2226;
        _2795 = _2570;
        _2797 = _2572;
        _2799 = _2574;
    }
    uint _2805 = _992 + uint(cbMatDynParam._m0[0u].w);
    float _2811 = (isnan(cbMtdParam._m0[24u].y) ? _728 : (isnan(_728) ? cbMtdParam._m0[24u].y : min(_728, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4693 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4704 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4715 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2834 = (((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2789 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1031))) + ((_2795 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1840)) * cbPerFrame._m0[3u].x)) + ((_2811 * (((((_787.x - _784) * _766) + _784) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _720) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2805].x);
    float _2836 = (((_2811 * (((((_787.y - _785) * _766) + _785) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_709.y - _707) * _687) + _707)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2805].y) + ((_2797 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1840)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2791 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1031)));
    float _2838 = (((_2811 * (((((_787.z - _786) * _766) + _786) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_709.z - _708) * _687) + _708)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2805].z) + ((_2799 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1840)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2793 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1031)));
    uint _2842 = _991 + 6u;
    float _2850 = _953 / cbSceneParam._m0[86u].x;
    float _2851 = _954 / cbSceneParam._m0[86u].y;
    vec4 _2865 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, (log2((isnan(cbSceneParam._m0[77u].w) ? _887 : (isnan(_887) ? cbSceneParam._m0[77u].w : min(_887, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2867 = _2865.x;
    float _2868 = _2865.y;
    float _2869 = _2865.z;
    float _2870 = _2865.w;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_887 > cbSceneParam._m0[78u].w)
    {
        float _2925 = isnan(_887) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _887 : min(cbSceneParam._m0[80u].w, _887));
        float _2926 = _2925 / _887;
        float _2937 = _2926 * _938;
        float _2938 = _939 * _2926;
        float _2939 = (-0.0) - _2938;
        float _2940 = _2926 * _940;
        float _2942 = (cbSceneParam._m0[77u].w * _2939) / _2925;
        float _2943 = _2942 + cbSceneParam._m0[79u].w;
        float _2944 = cbSceneParam._m0[79u].w - _2938;
        float _2950 = sqrt(((_2937 * _2937) + (_2938 * _2938)) + (_2940 * _2940));
        float _2953 = (1.0 - (cbSceneParam._m0[77u].w / _2925)) * _2950;
        float _2958 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2960 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3112;
        if (abs((_2939 - _2942) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3112 = ((((_2943 > 0.0) ? exp2(_2958 * _2943) : (2.0 - exp2(_2960 * _2943))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2953;
        }
        else
        {
            float _3072 = 1.0 / cbSceneParam._m0[80u].x;
            float _3073 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : max(_2943, _2944));
            float _3074 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : min(_2943, _2944));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            _3112 = ((abs(_2950 / _2939) * cbSceneParam._m0[80u].y) * ((((_3083 - _3084) * 2.0) - ((exp2(_2958 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0)))) - exp2(_2958 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))))) * _3072)) - ((exp2(_2960 * _3083) - exp2(_2960 * _3084)) * _3072))) + (_2953 * cbSceneParam._m0[80u].z);
        }
        vec4 _3114 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, 1.0), 0.0);
        float _3123 = exp2((_3112 * (-1.44269502162933349609375)) * (1.0 - _3114.w));
        float _3124 = log2(_3123);
        float _3140 = log2(_2870);
        _2962 = (exp2(_3140 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].x)) * _3114.x) / cbSceneParam._m0[78u].x)) + _2867;
        _2964 = (exp2(_3140 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].y)) * _3114.y) / cbSceneParam._m0[78u].y)) + _2868;
        _2966 = (exp2(_3140 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].z)) * _3114.z) / cbSceneParam._m0[78u].z)) + _2869;
        _2968 = _3123 * _2870;
    }
    else
    {
        _2962 = _2867;
        _2964 = _2868;
        _2966 = _2869;
        _2968 = _2870;
    }
    float _2979 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2980 = _2979 == 3.0;
    float _2981 = log2(_2968);
    float _2988 = exp2(_2981 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)));
    float _2989 = exp2(_2981 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0)));
    float _2990 = exp2(_2981 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0)));
    float _2999 = (_2979 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2999 * (_2980 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.y = _2999 * (_2980 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.z = _2999 * (_2980 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2966)));
    SV_Target.w = cbInstanceData._m0[_2842].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2842].w;
}


