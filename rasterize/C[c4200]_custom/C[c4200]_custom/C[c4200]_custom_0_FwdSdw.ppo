#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_c4200_custom_snp_0_Texture2D_16;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c4200_custom_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D C_c4200_custom_snp_0_Texture2D_18;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1523;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _313 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _326 = exp2(log2(_313.w * cbMtdParam._m0[26u].x) * cbMtdParam._m0[18u].w);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    vec4 _342 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _346 = _342.z;
    float _351 = exp2(log2(_346 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _353 = isnan(1.0) ? _352 : (isnan(_352) ? 1.0 : min(_352, 1.0));
    vec4 _365 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _390 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _401 = cbMtdParam._m0[9u].x * _390.x;
    float _402 = cbMtdParam._m0[9u].y * _390.y;
    float _403 = cbMtdParam._m0[9u].z * _390.z;
    float _410 = (((cbMtdParam._m0[10u].x * _365.x) - _401) * _353) + _401;
    float _411 = (((cbMtdParam._m0[10u].y * _365.y) - _402) * _353) + _402;
    float _412 = (((cbMtdParam._m0[10u].z * _365.z) - _403) * _353) + _403;
    vec4 _425 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _427 = _425.x;
    float _431 = exp2(log2(_427) * cbMtdParam._m0[19u].z);
    vec4 _444 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _464 = (((cbMtdParam._m0[12u].x * _444.x) - _410) * _431) + _410;
    float _465 = (((cbMtdParam._m0[12u].y * _444.y) - _411) * _431) + _411;
    float _466 = (((cbMtdParam._m0[12u].z * _444.z) - _412) * _431) + _412;
    vec4 _479 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _504 = (_313.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _479.x) - _464) * _328) + _464);
    float _506 = (_313.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _479.y) - _465) * _328) + _465);
    float _508 = (_313.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _479.z) - _466) * _328) + _466);
    vec4 _520 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _539 = TEXCOORD_3.x - ((cbMtdParam._m0[19u].w * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c4200_custom_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x + 0.00999999977648258209228515625));
    float _541 = _539 * (cbMtdParam._m0[20u].y + 1.0);
    float _4173 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _549 = (_542 * ((cbMtdParam._m0[11u].x * _520.x) - _504)) + _504;
    float _550 = (((cbMtdParam._m0[11u].y * _520.y) - _506) * _542) + _506;
    float _551 = (((cbMtdParam._m0[11u].z * _520.z) - _508) * _542) + _508;
    float _553 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _561 = (_553 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _553))) * (cbMtdParam._m0[22u].y + 1.0);
    float _4184 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _569 = ((cbMtdParam._m0[14u].x - _549) * _562) + _549;
    float _570 = ((cbMtdParam._m0[14u].y - _550) * _562) + _550;
    float _571 = ((cbMtdParam._m0[14u].z - _551) * _562) + _551;
    float _574 = (cbMtdParam._m0[20u].x + 1.0) * _539;
    float _4195 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _577 = _427 - (_575 * _427);
    float _579 = _577 - (_577 * _553);
    vec4 _592 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _610 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _612 = _610.x;
    float _613 = _610.y;
    float _616 = cbMtdParam._m0[18u].x + _610.z;
    float _619 = (((cbMtdParam._m0[18u].z + _592.z) - _616) * _353) + _616;
    vec4 _631 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _643 = (((_631.z - _619) + cbMtdParam._m0[24u].z) * _431) + _619;
    float _649 = ((((_346 * 2.0) * _643) - _643) * cbMtdParam._m0[20u].z) + _643;
    vec4 _662 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _671 = (((cbMtdParam._m0[19u].y + _662.z) - _649) * _328) + _649;
    vec4 _683 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _695 = ((_683.z - _671) * _575) + _671;
    vec4 _711 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _725 = ((cbMtdParam._m0[21u].w * _553) * ((_711.z * cbMtdParam._m0[21u].z) - _695)) + _695;
    float _736 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    float _755 = (cbTextureTilingScale._m0[12u].x * ((_736 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z;
    float _756 = (cbTextureTilingScale._m0[12u].y * ((_736 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w;
    vec4 _758 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2(_755, _756));
    float _762 = cbPerFrame._m0[22u].x * 2.0;
    float _763 = _762 * cbMtdParam._m0[25u].y;
    float _770 = ((_758.y * 0.5) + (-0.25)) * cbMtdParam._m0[25u].x;
    float _772 = (-0.0) - (cbMtdParam._m0[25u].x * ((_758.x * 0.5) + (-0.25)));
    float _774 = fract(_763);
    float _776 = fract(_763 + 0.5);
    float _787 = abs((_774 * 2.0) + (-1.0));
    vec4 _803 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_774 * _772) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_770 * _774) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _805 = _803.x;
    float _806 = _803.y;
    float _807 = _803.z;
    vec4 _808 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_776 * _772) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_770 * _776) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _819 = ((_808.x - _805) * _787) + _805;
    float _826 = exp2(log2(_819 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _827 = isnan(cbMtdParam._m0[24u].x) ? _826 : (isnan(_826) ? cbMtdParam._m0[24u].x : max(_826, cbMtdParam._m0[24u].x));
    vec4 _848 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2(_755, _756));
    float _852 = _762 * cbMtdParam._m0[25u].w;
    float _857 = ((_848.y * 0.5) + (-0.25)) * cbMtdParam._m0[25u].z;
    float _859 = (-0.0) - (cbMtdParam._m0[25u].z * ((_848.x * 0.5) + (-0.25)));
    float _860 = fract(_852);
    float _862 = fract(_852 + 0.5);
    float _873 = abs((_860 * 2.0) + (-1.0));
    vec4 _889 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_860 * _859) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_857 * _860) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _891 = _889.x;
    float _892 = _889.y;
    float _893 = _889.z;
    vec4 _894 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_862 * _859) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_857 * _862) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _928 = ((_592.x - _612) * _353) + _612;
    float _929 = ((_592.y - _613) * _353) + _613;
    float _934 = ((_631.x - _928) * _431) + _928;
    float _935 = ((_631.y - _929) * _431) + _929;
    float _944 = ((((_662.x - _934) * _328) + _934) * 2.0) + (-1.0);
    float _945 = ((((_662.y - _935) * _328) + _935) * 2.0) + (-1.0);
    float _946 = dot(vec2(_944, _945), vec2(_944, _945));
    float _4216 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _951 = sqrt(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))));
    float _967 = (((cbMtdParam._m0[20u].w * ((_342.x * 2.0) + (-1.0))) + _944) + (((((_683.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[21u].x) * _575)) + ((((_711.x * 2.0) + (-1.0)) * _553) * cbMtdParam._m0[21u].y);
    float _968 = (((cbMtdParam._m0[20u].w * ((_342.y * 2.0) + (-1.0))) + _945) + (((((_683.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[21u].x) * _575)) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_711.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _971 = fma(_951, _238 * NORMAL.x, fma(_968, _245 * TANGENT.x, (_231 * _223) * _967));
    float _974 = fma(_951, _238 * NORMAL.y, fma(_968, _245 * TANGENT.y, (_231 * _224) * _967));
    float _977 = fma(_951, _238 * NORMAL.z, fma(_968, _245 * TANGENT.z, (_231 * _225) * _967));
    float _981 = inversesqrt(dot(vec3(_971, _974, _977), vec3(_971, _974, _977)));
    float _982 = _981 * _971;
    float _983 = _981 * _974;
    float _984 = _981 * _977;
    float _4227 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _985 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4249 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4260 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4271 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _989 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _1005 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1056 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1046);
    float _1057 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1046);
    float _1058 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1046);
    float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
    float _1063 = _1056 * _1062;
    float _1064 = _1057 * _1062;
    float _1065 = _1058 * _1062;
    float _1071 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1072 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1090 = fma(_984, cbSceneParam._m0[5u].z, fma(_983, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _982));
    float _1093 = fma(_984, cbSceneParam._m0[6u].z, fma(_983, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _982));
    float _1096 = fma(_984, cbSceneParam._m0[7u].z, fma(_983, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _982));
    uint _1109 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1110 = _1109 + 9u;
    uint _1111 = _1110 + uint(cbMatDynParam._m0[0u].w);
    float _1117 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * cbInstanceData._m0[_1111].x;
    float _1118 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * cbInstanceData._m0[_1111].y;
    float _1119 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * cbInstanceData._m0[_1111].z;
    float _4282 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1120 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1121 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1122 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _1123 = 1.0 - _989;
    float _1124 = _1120 * _1123;
    float _1125 = _1121 * _1123;
    float _1126 = _1122 * _1123;
    float _1131 = (_1120 + (-0.039999999105930328369140625)) * _989;
    float _1132 = (_1121 + (-0.039999999105930328369140625)) * _989;
    float _1133 = (_1122 + (-0.039999999105930328369140625)) * _989;
    float _1134 = _1131 + 0.039999999105930328369140625;
    float _1136 = _1132 + 0.039999999105930328369140625;
    float _1137 = _1133 + 0.039999999105930328369140625;
    vec4 _1146 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1071, cbSceneParam._m0[86u].y * _1072));
    float _1149 = _1146.x * TEXCOORD_3.w;
    float _1150 = dot(vec3(_982, _983, _984), vec3(_1063, _1064, _1065));
    float _1153 = _1150 * 2.0;
    float _1157 = (_1153 * _982) - _1063;
    float _1158 = (_1153 * _983) - _1064;
    float _1159 = (_1153 * _984) - _1065;
    float _1163 = abs(dot(vec3(_1063, _1064, _1065), vec3(_982, _983, _984)));
    float _4315 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1165 = sqrt(_985);
    float _1178 = exp2((_1165 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1165 * 3.0));
    float _1184 = (1.0 - _1178) * ((_1165 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1185 = _1178 * _1165;
    float _1213 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1522;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1248 = fma(_1221, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213));
        float _1252 = fma(_1221, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213));
        float _1256 = fma(_1221, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213));
        float _1280 = _1213 + _982;
        float _1281 = _1217 + _983;
        float _1282 = _1221 + _984;
        float _1292 = fma(_1282, cbModelParam._m0[26u].z, fma(_1281, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1280)) - _1248;
        float _1293 = fma(_1282, cbModelParam._m0[27u].z, fma(_1281, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1280)) - _1252;
        float _1294 = fma(_1282, cbModelParam._m0[28u].z, fma(_1281, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1280)) - _1256;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1311 = ((_1298 * _1292) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1248 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1293) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1252 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1298 * _1294) / cbModelParam._m0[34u].z) + ((((((_1256 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1350 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1316.x + (-0.5));
        float _1352 = _1350 * (_1316.y + (-0.5));
        float _1353 = _1350 * (_1316.z + (-0.5));
        float _1360 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1323.x + (-0.5));
        float _1362 = _1360 * (_1323.y + (-0.5));
        float _1363 = _1360 * (_1323.z + (-0.5));
        float _1370 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1330.x + (-0.5));
        float _1372 = _1370 * (_1330.y + (-0.5));
        float _1373 = _1370 * (_1330.z + (-0.5));
        float _1380 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1337.x + (-0.5));
        float _1382 = _1380 * (_1337.y + (-0.5));
        float _1383 = _1380 * (_1337.z + (-0.5));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = _1351 * 0.5;
        float _1388 = _1361 * 0.5;
        float _1389 = _1371 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1404 = (dot(vec3(_982, _983, _984), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1414 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4363 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1416 + 1.0))) + _1421) * _1384;
        float _1431 = _1352 * 0.5;
        float _1432 = _1362 * 0.5;
        float _1433 = _1372 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_982, _983, _984), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4396 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1458 + 1.0))) + _1463) * _1385;
        float _1473 = _1353 * 0.5;
        float _1474 = _1363 * 0.5;
        float _1475 = _1373 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_982, _983, _984), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4429 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1500 + 1.0))) + _1505) * _1386;
        _1522 = _1353;
        _1524 = _1352;
        _1525 = _1351;
        _1526 = _1363;
        _1527 = _1362;
        _1528 = _1361;
        _1529 = _1373;
        _1530 = _1372;
        _1531 = _1371;
        _1532 = _1386;
        _1533 = _1385;
        _1534 = _1384;
        _1535 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1536 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    }
    else
    {
        _1522 = _1523;
        _1524 = _1523;
        _1525 = _1523;
        _1526 = _1523;
        _1527 = _1523;
        _1528 = _1523;
        _1529 = _1523;
        _1530 = _1523;
        _1531 = _1523;
        _1532 = _1523;
        _1533 = _1523;
        _1534 = _1523;
        _1535 = 0.0;
        _1536 = 0.0;
        _1537 = 0.0;
    }
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1563 = fma(_1221, cbModelParam._m0[30u].z, fma(_1217, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213));
        float _1567 = fma(_1221, cbModelParam._m0[31u].z, fma(_1217, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213));
        float _1571 = fma(_1221, cbModelParam._m0[32u].z, fma(_1217, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213));
        float _1594 = _1213 + _982;
        float _1595 = _1217 + _983;
        float _1596 = _1221 + _984;
        float _1606 = fma(_1596, cbModelParam._m0[30u].z, fma(_1595, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1594)) - _1563;
        float _1607 = fma(_1596, cbModelParam._m0[31u].z, fma(_1595, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1594)) - _1567;
        float _1608 = fma(_1596, cbModelParam._m0[32u].z, fma(_1595, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1594)) - _1571;
        float _1612 = inversesqrt(dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608)));
        float _1625 = ((_1612 * _1606) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1563 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1626 = ((_1612 * _1607) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1567 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1627 = ((_1612 * _1608) / cbModelParam._m0[35u].z) + ((((((_1571 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        float _1662 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1629.x + (-0.5));
        float _1664 = _1662 * (_1629.y + (-0.5));
        float _1665 = _1662 * (_1629.z + (-0.5));
        float _1672 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1636.x + (-0.5));
        float _1674 = _1672 * (_1636.y + (-0.5));
        float _1675 = _1672 * (_1636.z + (-0.5));
        float _1682 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1643.x + (-0.5));
        float _1684 = _1682 * (_1643.y + (-0.5));
        float _1685 = _1682 * (_1643.z + (-0.5));
        float _1692 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1650.x + (-0.5));
        float _1694 = _1692 * (_1650.y + (-0.5));
        float _1695 = _1692 * (_1650.z + (-0.5));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1698 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = _1663 * 0.5;
        float _1700 = _1673 * 0.5;
        float _1701 = _1683 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_982, _983, _984), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4492 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1726 + 1.0))) + _1731) * _1696;
        float _1741 = _1664 * 0.5;
        float _1742 = _1674 * 0.5;
        float _1743 = _1684 * 0.5;
        float _1744 = dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743));
        float _1749 = (_1744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1744);
        float _1757 = (dot(vec3(_982, _983, _984), vec3(_1749 * _1741, _1749 * _1742, _1749 * _1743)) + 1.0) * 0.5;
        float _4503 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743)) / (_1697 + 9.9999997473787516355514526367188e-06);
        float _4514 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1768 = _1767 * 2.0;
        float _1772 = (1.0 - _1767) / (_1767 + 1.0);
        float _4525 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1782 = ((((1.0 - _1773) * (_1768 + 2.0)) * exp2(log2(isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_1768 + 1.0))) + _1773) * _1697;
        float _1783 = _1665 * 0.5;
        float _1784 = _1675 * 0.5;
        float _1785 = _1685 * 0.5;
        float _1786 = dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785));
        float _1791 = (_1786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1786);
        float _1799 = (dot(vec3(_982, _983, _984), vec3(_1791 * _1783, _1791 * _1784, _1791 * _1785)) + 1.0) * 0.5;
        float _4536 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1808 = sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785)) / (_1698 + 9.9999997473787516355514526367188e-06);
        float _4547 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1810 = _1809 * 2.0;
        float _1814 = (1.0 - _1809) / (_1809 + 1.0);
        float _4558 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1824 = ((((1.0 - _1815) * (_1810 + 2.0)) * exp2(log2(isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_1810 + 1.0))) + _1815) * _1698;
        _1832 = _1665;
        _1833 = _1664;
        _1834 = _1663;
        _1835 = _1675;
        _1836 = _1674;
        _1837 = _1673;
        _1838 = _1685;
        _1839 = _1684;
        _1840 = _1683;
        _1841 = _1698;
        _1842 = _1697;
        _1843 = _1696;
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
        _1845 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)));
        _1846 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)));
    }
    else
    {
        _1832 = _1523;
        _1833 = _1523;
        _1834 = _1523;
        _1835 = _1523;
        _1836 = _1523;
        _1837 = _1523;
        _1838 = _1523;
        _1839 = _1523;
        _1840 = _1523;
        _1841 = _1523;
        _1842 = _1523;
        _1843 = _1523;
        _1844 = 0.0;
        _1845 = 0.0;
        _1846 = 0.0;
    }
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1535)) + _1535;
    float _1857 = (cbModelParam._m0[1u].x * (_1845 - _1536)) + _1536;
    float _1858 = (cbModelParam._m0[1u].x * (_1846 - _1537)) + _1537;
    float _1879 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1857, cbSceneParam._m0[89u].y, _1856 * cbSceneParam._m0[89u].x));
    float _1882 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1857, cbSceneParam._m0[90u].y, _1856 * cbSceneParam._m0[90u].x));
    float _1885 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1857, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1856));
    float _1900 = _1157 * 0.5;
    float _1901 = _1158 * 0.5;
    float _1902 = _1159 * 0.5;
    float _1903 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1834, _1837, _1840, _1843));
    float _1906 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1833, _1836, _1839, _1842));
    float _1909 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1943;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1916 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1522, _1526, _1529, _1532));
        float _1920 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1524, _1527, _1530, _1533));
        float _1924 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1525, _1528, _1531, _1534));
        float _1931 = dot(vec4(cbModelParam._m0[39u]), vec4(_1900, _1901, _1902, 1.0));
        _1943 = dot(vec3(isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1943 = 1.0;
    }
    float _1954;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1945 = dot(vec4(cbModelParam._m0[40u]), vec4(_1900, _1901, _1902, 1.0));
        _1954 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1945) ? 0.0 : (isnan(0.0) ? _1945 : max(0.0, _1945))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1954 = 1.0;
    }
    float _1958 = (_1954 * cbModelParam._m0[1u].x) + (_1943 * (1.0 - cbModelParam._m0[1u].x));
    float _1968 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _985);
    float _1969 = isnan(_1968) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1968 : min(cbModelParam._m0[25u].z, _1968));
    float _2049;
    float _2051;
    float _2053;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2016 = fma(_1221, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1213)) + cbModelParam._m0[13u].w;
        float _2020 = fma(_1221, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1213)) + cbModelParam._m0[14u].w;
        float _2024 = fma(_1221, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1213)) + cbModelParam._m0[15u].w;
        float _2027 = fma(_1159, cbModelParam._m0[13u].z, fma(_1158, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1157));
        float _2030 = fma(_1159, cbModelParam._m0[14u].z, fma(_1158, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1157));
        float _2033 = fma(_1159, cbModelParam._m0[15u].z, fma(_1158, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1157));
        float _2061;
        if (_2027 > 0.0)
        {
            _2061 = abs((1.0 - _2016) / _2027);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2016 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2061 = frontier_phi_14_12_ladder;
        }
        float _2232;
        if (_2030 > 0.0)
        {
            _2232 = abs((1.0 - _2020) / _2030);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2020 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2232 = frontier_phi_23_19_ladder;
        }
        float _2527;
        if (_2033 > 0.0)
        {
            _2527 = abs((1.0 - _2024) / _2033);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2024 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2527 = frontier_phi_35_30_ladder;
        }
        float _2529 = isnan(_2232) ? _2061 : (isnan(_2061) ? _2232 : min(_2061, _2232));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _2027) + _2016;
        float _2535 = (_2530 * _2030) + _2020;
        float _2536 = (_2530 * _2033) + _2024;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2537;
        float _2541 = _2537 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 > _2541) || ((_2535 < _2539) || ((_2534 < _2539) || (_2534 > _2541))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2536, cbModelParam._m0[9u].z, fma(_2535, cbModelParam._m0[9u].y, _2534 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2536, cbModelParam._m0[10u].z, fma(_2535, cbModelParam._m0[10u].y, _2534 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2536, cbModelParam._m0[11u].z, fma(_2535, cbModelParam._m0[11u].y, _2534 * cbModelParam._m0[11u].x))), _1969);
            frontier_phi_13_35_ladder = _2681.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2681.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2681.x * cbModelParam._m0[1u].y;
        }
        _2049 = frontier_phi_13_35_ladder_2;
        _2051 = frontier_phi_13_35_ladder_1;
        _2053 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2037 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1157, _1158, _1159), _1969);
        _2049 = _2037.x * cbModelParam._m0[1u].y;
        _2051 = _2037.y * cbModelParam._m0[1u].y;
        _2053 = _2037.z * cbModelParam._m0[1u].y;
    }
    float _2057 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _985);
    float _2058 = isnan(_2057) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2057 : min(cbModelParam._m0[25u].w, _2057));
    float _2147;
    float _2149;
    float _2151;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2111 = fma(_1221, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1213)) + cbModelParam._m0[21u].w;
        float _2115 = fma(_1221, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1213)) + cbModelParam._m0[22u].w;
        float _2119 = fma(_1221, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1213)) + cbModelParam._m0[23u].w;
        float _2122 = fma(_1159, cbModelParam._m0[21u].z, fma(_1158, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1157));
        float _2125 = fma(_1159, cbModelParam._m0[22u].z, fma(_1158, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1157));
        float _2128 = fma(_1159, cbModelParam._m0[23u].z, fma(_1158, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1157));
        float _2237;
        if (_2122 > 0.0)
        {
            _2237 = abs((1.0 - _2111) / _2122);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2111 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2237 = frontier_phi_25_21_ladder;
        }
        float _2554;
        if (_2125 > 0.0)
        {
            _2554 = abs((1.0 - _2115) / _2125);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2115 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2554 = frontier_phi_37_32_ladder;
        }
        float _2892;
        if (_2128 > 0.0)
        {
            _2892 = abs((1.0 - _2119) / _2128);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2119 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2892 = frontier_phi_47_44_ladder;
        }
        float _2894 = isnan(_2554) ? _2237 : (isnan(_2237) ? _2554 : min(_2237, _2554));
        float _2895 = isnan(_2892) ? _2894 : (isnan(_2894) ? _2892 : min(_2894, _2892));
        float _2899 = (_2895 * _2122) + _2111;
        float _2900 = (_2895 * _2125) + _2115;
        float _2901 = (_2895 * _2128) + _2119;
        float _2902 = _2895 * 9.9999997473787516355514526367188e-05;
        float _2903 = (-1.0) - _2902;
        float _2905 = _2902 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2901 > _2905) || ((_2901 < _2903) || ((_2900 > _2905) || ((_2900 < _2903) || ((_2899 < _2903) || (_2899 > _2905))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2901, cbModelParam._m0[17u].z, fma(_2900, cbModelParam._m0[17u].y, _2899 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2901, cbModelParam._m0[18u].z, fma(_2900, cbModelParam._m0[18u].y, _2899 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2901, cbModelParam._m0[19u].z, fma(_2900, cbModelParam._m0[19u].y, _2899 * cbModelParam._m0[19u].x))), _2058);
            frontier_phi_22_47_ladder = _3023.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3023.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3023.x * cbModelParam._m0[1u].z;
        }
        _2147 = frontier_phi_22_47_ladder_2;
        _2149 = frontier_phi_22_47_ladder_1;
        _2151 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2131 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1157, _1158, _1159), _2058);
        _2147 = _2131.x * cbModelParam._m0[1u].z;
        _2149 = _2131.y * cbModelParam._m0[1u].z;
        _2151 = _2131.z * cbModelParam._m0[1u].z;
    }
    float _2164 = (((_1184 * _1134) + _1185) * _1149) * ((cbModelParam._m0[1u].w * (_2147 - _2049)) + _2049);
    float _2166 = (((_1184 * _1136) + _1185) * _1149) * ((cbModelParam._m0[1u].w * (_2149 - _2051)) + _2051);
    float _2168 = (((_1184 * _1137) + _1185) * _1149) * ((cbModelParam._m0[1u].w * (_2151 - _2053)) + _2053);
    float _2171 = fma(_2168, cbSceneParam._m0[89u].z, fma(_2166, cbSceneParam._m0[89u].y, _2164 * cbSceneParam._m0[89u].x));
    float _2174 = fma(_2168, cbSceneParam._m0[90u].z, fma(_2166, cbSceneParam._m0[90u].y, _2164 * cbSceneParam._m0[90u].x));
    float _2177 = fma(_2168, cbSceneParam._m0[91u].z, fma(_2166, cbSceneParam._m0[91u].y, _2164 * cbSceneParam._m0[91u].x));
    float _2211 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2215 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2219 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2223 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2224 = _2211 / _2223;
    float _2225 = _2215 / _2223;
    float _2226 = _2219 / _2223;
    float _2373;
    float _2374;
    float _2375;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2253 = ((uint(_2226 > cbSceneParam._m0[59u].y) + uint(_2226 > cbSceneParam._m0[59u].x)) + uint(_2226 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2254 = _2253 + 43u;
        uint _2262 = _2253 + 44u;
        uint _2270 = _2253 + 45u;
        uint _2278 = _2253 + 46u;
        float _2289 = fma(_2223, cbSceneParam._m0[_2254].w, fma(_2219, cbSceneParam._m0[_2254].z, fma(_2215, cbSceneParam._m0[_2254].y, _2211 * cbSceneParam._m0[_2254].x)));
        float _2293 = fma(_2223, cbSceneParam._m0[_2262].w, fma(_2219, cbSceneParam._m0[_2262].z, fma(_2215, cbSceneParam._m0[_2262].y, _2211 * cbSceneParam._m0[_2262].x)));
        float _2301 = fma(_2223, cbSceneParam._m0[_2278].w, fma(_2219, cbSceneParam._m0[_2278].z, fma(_2215, cbSceneParam._m0[_2278].y, _2211 * cbSceneParam._m0[_2278].x)));
        float _2306 = cbSceneParam._m0[33u].z * _2301;
        float _2308 = cbSceneParam._m0[33u].w * _2301;
        float _2311 = fma(_2223, cbSceneParam._m0[_2270].w, fma(_2219, cbSceneParam._m0[_2270].z, fma(_2215, cbSceneParam._m0[_2270].y, _2211 * cbSceneParam._m0[_2270].x))) / _2301;
        float _2359 = (cbSceneParam._m0[33u].x - sqrt(((_2225 * _2225) + (_2224 * _2224)) + (_2226 * _2226))) * cbSceneParam._m0[33u].y;
        float _4684 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2366 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2306 + _2289) / _2301, (_2308 + _2293) / _2301), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2308 + _2289) / _2301, (_2293 - _2306) / _2301), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2289 - _2306) / _2301, (_2293 - _2308) / _2301), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2289 - _2308) / _2301, (_2306 + _2293) / _2301), _2311), 0.0)).x), vec4(0.25)));
        _2373 = 1.0 - (_2366 * cbSceneParam._m0[34u].x);
        _2374 = 1.0 - (_2366 * cbSceneParam._m0[34u].y);
        _2375 = 1.0 - (_2366 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2373 = 1.0;
        _2374 = 1.0;
        _2375 = 1.0;
    }
    float _2439;
    float _2441;
    float _2443;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2427 = fma(_2223, cbSceneParam._m0[63u].w, fma(_2219, cbSceneParam._m0[63u].z, fma(_2215, cbSceneParam._m0[63u].y, _2211 * cbSceneParam._m0[63u].x)));
        float _2428 = fma(_2223, cbSceneParam._m0[60u].w, fma(_2219, cbSceneParam._m0[60u].z, fma(_2215, cbSceneParam._m0[60u].y, _2211 * cbSceneParam._m0[60u].x))) / _2427;
        float _2429 = fma(_2223, cbSceneParam._m0[61u].w, fma(_2219, cbSceneParam._m0[61u].z, fma(_2215, cbSceneParam._m0[61u].y, _2211 * cbSceneParam._m0[61u].x))) / _2427;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2428 >= cbSceneParam._m0[64u].x) && (_2429 >= cbSceneParam._m0[64u].y)) && (_2428 <= cbSceneParam._m0[64u].z)) && (_2429 <= cbSceneParam._m0[64u].w))
        {
            float _2567 = fma(_2223, cbSceneParam._m0[62u].w, fma(_2219, cbSceneParam._m0[62u].z, fma(_2215, cbSceneParam._m0[62u].y, _2211 * cbSceneParam._m0[62u].x))) / _2427;
            float _2571 = isnan(cbSceneParam._m0[41u].w) ? _2567 : (isnan(_2567) ? cbSceneParam._m0[41u].w : max(_2567, cbSceneParam._m0[41u].w));
            float _2614 = (cbSceneParam._m0[33u].x - sqrt(((_2225 * _2225) + (_2224 * _2224)) + (_2226 * _2226))) * cbSceneParam._m0[33u].y;
            float _4700 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
            float _2621 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2428, cbSceneParam._m0[33u].w + _2429), _2571), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2428, _2429 - cbSceneParam._m0[33u].z), _2571), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2428 - cbSceneParam._m0[33u].z, _2429 - cbSceneParam._m0[33u].w), _2571), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2428 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2429), _2571), 0.0)).x), vec4(0.25)));
            float _2625 = 1.0 - (_2621 * cbSceneParam._m0[34u].x);
            float _2626 = 1.0 - (_2621 * cbSceneParam._m0[34u].y);
            float _2627 = 1.0 - (_2621 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2627) ? _2375 : (isnan(_2375) ? _2627 : min(_2375, _2627));
            frontier_phi_34_33_ladder_1 = isnan(_2626) ? _2374 : (isnan(_2374) ? _2626 : min(_2374, _2626));
            frontier_phi_34_33_ladder_2 = isnan(_2625) ? _2373 : (isnan(_2373) ? _2625 : min(_2373, _2625));
        }
        else
        {
            frontier_phi_34_33_ladder = _2375;
            frontier_phi_34_33_ladder_1 = _2374;
            frontier_phi_34_33_ladder_2 = _2373;
        }
        _2439 = frontier_phi_34_33_ladder_2;
        _2441 = frontier_phi_34_33_ladder_1;
        _2443 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2439 = _2373;
        _2441 = _2374;
        _2443 = _2375;
    }
    uvec4 _2448 = floatBitsToUint(cbInstanceData._m0[_1109 + 5u]);
    uint _2450 = _2448.x * 14u;
    uint _2451 = _2450 + 13u;
    float _2458 = _1149 + (-1.0);
    float _2463 = (cbLight._m0[_2451].x * _2458) + 1.0;
    float _2464 = (cbLight._m0[_2451].y * _2458) + 1.0;
    float _2465 = (cbLight._m0[_2451].z * _2458) + 1.0;
    float _2466 = (cbLight._m0[_2451].w * _2458) + 1.0;
    uint _2467 = _2450 + 5u;
    float _2473 = isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0));
    uint _2477 = _2450 + 4u;
    float _2486 = isnan(1.0) ? _2463 : (isnan(_2463) ? 1.0 : min(_2463, 1.0));
    uint _2490 = _2450 | 1u;
    float _2501 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_982, _983, _984));
    float _2504 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_982, _983, _984));
    float _4736 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _4747 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2509 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * 0.3183098733425140380859375;
    float _2511 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * 0.3183098733425140380859375;
    float _2518 = ((cbLight._m0[_2467].x * _2473) * _2511) + (((cbLight._m0[_2477].x * _2439) * _2486) * _2509);
    float _2519 = ((_2473 * cbLight._m0[_2467].y) * _2511) + (((cbLight._m0[_2477].y * _2441) * _2486) * _2509);
    float _2520 = ((_2473 * cbLight._m0[_2467].z) * _2511) + (((cbLight._m0[_2477].z * _2443) * _2486) * _2509);
    uvec4 _2524 = floatBitsToUint(cbLight._m0[_2450 + 12u]);
    bool _2526 = _2524.x == 0u;
    float _2628;
    float _2630;
    float _2632;
    if (_2526)
    {
        _2628 = _2518;
        _2630 = _2519;
        _2632 = _2520;
    }
    else
    {
        uint _2636 = _2450 + 6u;
        float _2652 = (dot(vec3(cbLight._m0[_2450 + 2u].xyz), vec3(_982, _983, _984)) * 0.5) + 0.5;
        float _2653 = _2652 * _2652;
        float _4758 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2654 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2655 = isnan(1.0) ? _2465 : (isnan(_2465) ? 1.0 : min(_2465, 1.0));
        _2628 = (((cbLight._m0[_2636].x * 0.3183098733425140380859375) * _2654) * _2655) + _2518;
        _2630 = (((cbLight._m0[_2636].y * 0.3183098733425140380859375) * _2654) * _2655) + _2519;
        _2632 = (((cbLight._m0[_2636].z * 0.3183098733425140380859375) * _2654) * _2655) + _2520;
    }
    bool _2635 = _2524.y == 0u;
    float _2690;
    float _2692;
    float _2694;
    if (_2635)
    {
        _2690 = _2628;
        _2692 = _2630;
        _2694 = _2632;
    }
    else
    {
        uint _2863 = _2450 + 7u;
        float _2879 = (dot(vec3(cbLight._m0[_2450 + 3u].xyz), vec3(_982, _983, _984)) * 0.5) + 0.5;
        float _2880 = _2879 * _2879;
        float _4774 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2881 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2882 = isnan(1.0) ? _2466 : (isnan(_2466) ? 1.0 : min(_2466, 1.0));
        _2690 = (((cbLight._m0[_2863].x * 0.3183098733425140380859375) * _2881) * _2882) + _2628;
        _2692 = (((cbLight._m0[_2863].y * 0.3183098733425140380859375) * _2881) * _2882) + _2630;
        _2694 = (((cbLight._m0[_2863].z * 0.3183098733425140380859375) * _2881) * _2882) + _2632;
    }
    uint _2697 = _2450 + 8u;
    float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _985) * 0.949999988079071044921875);
    float _2711 = _2710 * _2710;
    float _2712 = cbLight._m0[_2450].x + _1063;
    float _2713 = cbLight._m0[_2450].y + _1064;
    float _2714 = cbLight._m0[_2450].z + _1065;
    float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
    float _2719 = _2718 * _2712;
    float _2720 = _2718 * _2713;
    float _2721 = _2718 * _2714;
    float _2722 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_2450].xyz));
    float _4790 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2725 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _4801 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _2726 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _2727 = dot(vec3(_982, _983, _984), vec3(_2719, _2720, _2721));
    float _4812 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2730 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2731 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2719, _2720, _2721));
    float _4823 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2735 = _2711 * _2711;
    float _2739 = ((_2730 * _2730) * (_2735 + (-1.0))) + 1.0;
    float _2747 = exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0);
    float _2748 = 0.959999978542327880859375 - _1131;
    float _2750 = 0.959999978542327880859375 - _1132;
    float _2751 = 0.959999978542327880859375 - _1133;
    float _2758 = 1.0 - _2711;
    float _2769 = (0.5 / (((_2726 * ((_2725 * _2758) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2758) + _2711) * _2725))) * _2725;
    float _4834 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
    float _2771 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2735 / ((_2739 * _2739) * 3.141590118408203125));
    uint _2785 = _2450 + 9u;
    float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _985) * 0.949999988079071044921875);
    float _2797 = _2796 * _2796;
    float _2798 = cbLight._m0[_2490].x + _1063;
    float _2799 = cbLight._m0[_2490].y + _1064;
    float _2800 = cbLight._m0[_2490].z + _1065;
    float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
    float _2805 = _2804 * _2798;
    float _2806 = _2804 * _2799;
    float _2807 = _2804 * _2800;
    float _2808 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_2490].xyz));
    float _4845 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2811 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
    float _2812 = dot(vec3(_982, _983, _984), vec3(_2805, _2806, _2807));
    float _4856 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2815 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _2816 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2805, _2806, _2807));
    float _4867 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
    float _2820 = _2797 * _2797;
    float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
    float _2831 = exp2(log2(1.0 - (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0)))) * 5.0);
    float _2838 = 1.0 - _2797;
    float _2848 = (0.5 / (((_2726 * ((_2811 * _2838) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2838) + _2797) * _2811))) * _2811;
    float _4878 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
    float _2850 = (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
    float _2860 = (((((_2831 * _2748) + _1134) * cbLight._m0[_2785].x) * _2850) * _2473) + ((((cbLight._m0[_2697].x * _2439) * ((_2747 * _2748) + _1134)) * _2771) * _2486);
    float _2861 = (((((_2831 * _2750) + _1136) * cbLight._m0[_2785].y) * _2850) * _2473) + ((((cbLight._m0[_2697].y * _2441) * ((_2747 * _2750) + _1136)) * _2771) * _2486);
    float _2862 = (((((_2831 * _2751) + _1137) * cbLight._m0[_2785].z) * _2850) * _2473) + ((((cbLight._m0[_2697].z * _2443) * ((_2747 * _2751) + _1137)) * _2771) * _2486);
    float _2918;
    float _2920;
    float _2922;
    if (_2526)
    {
        _2918 = _2860;
        _2920 = _2861;
        _2922 = _2862;
    }
    else
    {
        uint _2924 = _2450 + 2u;
        uint _2928 = _2450 + 10u;
        float _2942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2924].w)) * _985) * 0.949999988079071044921875);
        float _2943 = _2942 * _2942;
        float _2944 = cbLight._m0[_2924].x + _1063;
        float _2945 = cbLight._m0[_2924].y + _1064;
        float _2946 = cbLight._m0[_2924].z + _1065;
        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
        float _2951 = _2950 * _2944;
        float _2952 = _2950 * _2945;
        float _2953 = _2950 * _2946;
        float _2954 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_2924].xyz));
        float _4889 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2957 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
        float _2958 = dot(vec3(_982, _983, _984), vec3(_2951, _2952, _2953));
        float _4900 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2961 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
        float _2962 = dot(vec3(cbLight._m0[_2924].xyz), vec3(_2951, _2952, _2953));
        float _4911 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2966 = _2943 * _2943;
        float _2970 = ((_2961 * _2961) * (_2966 + (-1.0))) + 1.0;
        float _2977 = exp2(log2(1.0 - (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) * 5.0);
        float _2984 = 1.0 - _2943;
        float _2994 = (0.5 / (((_2726 * ((_2957 * _2984) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2984) + _2943) * _2957))) * _2957;
        float _4922 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2996 = (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2966 / ((_2970 * _2970) * 3.141590118408203125));
        float _2997 = isnan(1.0) ? _2465 : (isnan(_2465) ? 1.0 : min(_2465, 1.0));
        _2918 = (((((_2977 * _2748) + _1134) * cbLight._m0[_2928].x) * _2996) * _2997) + _2860;
        _2920 = (((((_2977 * _2750) + _1136) * cbLight._m0[_2928].y) * _2996) * _2997) + _2861;
        _2922 = (((((_2977 * _2751) + _1137) * cbLight._m0[_2928].z) * _2996) * _2997) + _2862;
    }
    float _3028;
    float _3030;
    float _3032;
    if (_2635)
    {
        _3028 = _2918;
        _3030 = _2920;
        _3032 = _2922;
    }
    else
    {
        uint _3039 = _2450 + 3u;
        uint _3043 = _2450 + 11u;
        float _3057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3039].w)) * _985) * 0.949999988079071044921875);
        float _3058 = _3057 * _3057;
        float _3059 = cbLight._m0[_3039].x + _1063;
        float _3060 = cbLight._m0[_3039].y + _1064;
        float _3061 = cbLight._m0[_3039].z + _1065;
        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
        float _3066 = _3065 * _3059;
        float _3067 = _3065 * _3060;
        float _3068 = _3065 * _3061;
        float _3069 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_3039].xyz));
        float _4938 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3072 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
        float _3073 = dot(vec3(_982, _983, _984), vec3(_3066, _3067, _3068));
        float _4949 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
        float _3076 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
        float _3077 = dot(vec3(cbLight._m0[_3039].xyz), vec3(_3066, _3067, _3068));
        float _4960 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
        float _3081 = _3058 * _3058;
        float _3085 = ((_3076 * _3076) * (_3081 + (-1.0))) + 1.0;
        float _3092 = exp2(log2(1.0 - (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) * 5.0);
        float _3099 = 1.0 - _3058;
        float _3109 = (0.5 / (((_2726 * ((_3072 * _3099) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _3099) + _3058) * _3072))) * _3072;
        float _4971 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
        float _3111 = (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * (_3081 / ((_3085 * _3085) * 3.141590118408203125));
        float _3112 = isnan(1.0) ? _2466 : (isnan(_2466) ? 1.0 : min(_2466, 1.0));
        _3028 = (((((_3092 * _2748) + _1134) * cbLight._m0[_3043].x) * _3111) * _3112) + _2918;
        _3030 = (((((_3092 * _2750) + _1136) * cbLight._m0[_3043].y) * _3111) * _3112) + _2920;
        _3032 = (((((_3092 * _2751) + _1137) * cbLight._m0[_3043].z) * _3111) * _3112) + _2922;
    }
    float _3178;
    float _3180;
    float _3182;
    float _3184;
    float _3186;
    float _3188;
    if (_2448.y == 0u)
    {
        uvec4 _3133 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3134 = _3133.x;
        uint _3145 = uint((float(_3133.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1072) / _3134))) + floor(float(uint(cbSceneParam._m0[85u].x * _1071) / _3134)));
        float _3155 = (log2(_2226 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3156 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
        uint _3159 = uint(isnan(14.0) ? _3156 : (isnan(_3156) ? 14.0 : min(_3156, 14.0)));
        uvec4 _3164 = texelFetch(g_lightClusterGridBuffer, int(((_3159 << 2u) + (_3145 << 6u)) >> 2u));
        uint _3165 = _3164.x;
        uint _3166 = _3133.z;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        if (((((1u << ((_3166 >> 4u) & 15u)) + 4294967295u) & _3165) == 0u) || ((_3166 & 240u) == 0u))
        {
            _3268 = 0.0;
            _3270 = 0.0;
            _3272 = 0.0;
            _3274 = 0.0;
            _3276 = 0.0;
            _3278 = 0.0;
        }
        else
        {
            float _3269;
            float _3271;
            float _3273;
            float _3275;
            float _3277;
            float _3279;
            float _3411 = 0.0;
            float _3412 = 0.0;
            float _3413 = 0.0;
            float _3414 = 0.0;
            float _3415 = 0.0;
            float _3416 = 0.0;
            uint _3417 = 0u;
            uint _3426;
            bool _3427;
            for (;;)
            {
                _3426 = texelFetch(g_lightClassification, int((((_3159 << 5u) + (_3145 << 9u)) + (_3417 << 2u)) >> 2u)).x;
                _3427 = _3426 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3427)
                {
                    frontier_phi_66_pred = _3416;
                    frontier_phi_66_pred_1 = _3415;
                    frontier_phi_66_pred_2 = _3414;
                    frontier_phi_66_pred_3 = _3413;
                    frontier_phi_66_pred_4 = _3412;
                    frontier_phi_66_pred_5 = _3411;
                }
                else
                {
                    float _3535;
                    float _3536;
                    float _3537;
                    float _3538;
                    float _3539;
                    float _3540;
                    uint _3541;
                    _3535 = _3411;
                    _3536 = _3412;
                    _3537 = _3413;
                    _3538 = _3414;
                    _3539 = _3415;
                    _3540 = _3416;
                    _3541 = _3426;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    float _3472;
                    for (;;)
                    {
                        uint _3545 = uint(findLSB(_3541)) + (_3417 << 5u);
                        uint _3542 = (_3541 + 4294967295u) & _3541;
                        uint _3547 = _3545 * 48u;
                        vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3547)).x, texelFetch(g_PointLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3547 + 3u)).x));
                        uint _3567 = (_3545 * 48u) + 4u;
                        vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3567)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 3u)).x));
                        uint _3586 = (_3545 * 48u) + 8u;
                        vec3 _3597 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3586)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 2u)).x));
                        float _3601 = _3561.x - _2224;
                        float _3602 = _3561.y - _2225;
                        float _3603 = _3561.z - _2226;
                        float _3604 = dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603));
                        float _3607 = inversesqrt(_3604);
                        float _3608 = _3607 * _3601;
                        float _3609 = _3607 * _3602;
                        float _3610 = _3607 * _3603;
                        float _3611 = dot(vec3(_1090, _1093, _1096), vec3(_3608, _3609, _3610));
                        float _3616 = 1.0 - (_3604 * _3561.w);
                        float _4997 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3617 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                        float _3618 = sqrt(_3604) * _3580.w;
                        float _3621 = 1.39999997615814208984375 / (_3618 + 1.39999997615814208984375);
                        float _3622 = _3621 * _3621;
                        float _3625 = ((1.0 - _3622) * _3611) + _3622;
                        float _3628 = _3618 * _3618;
                        float _3632 = ((isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0))) * _3617) / ((_3628 * 0.699999988079071044921875) + 1.0);
                        float _3636 = (-0.0) - _2224;
                        float _3637 = (-0.0) - _2225;
                        float _3638 = (-0.0) - _2226;
                        float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                        float _3643 = _3642 * _3636;
                        float _3644 = _3642 * _3637;
                        float _3645 = _3642 * _3638;
                        float _3652 = exp2(log2(1.0 / ((_3628 * 3.5) + 5.0)) * 0.25);
                        float _3653 = 1.0 - _1165;
                        float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                        float _3661 = _3660 * _3660;
                        float _3662 = _3661 * _3661;
                        float _3663 = _3643 + _3608;
                        float _3664 = _3644 + _3609;
                        float _3665 = _3645 + _3610;
                        float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                        float _3673 = dot(vec3(_1090, _1093, _1096), vec3(_3643, _3644, _3645));
                        float _5013 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                        float _3676 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                        float _3677 = dot(vec3(_1090, _1093, _1096), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                        float _5024 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                        float _3680 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                        float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                        float _3685 = _3621 * _3661;
                        float _3686 = _3685 * _3685;
                        float _3689 = ((1.0 - _3686) * _3611) + _3686;
                        float _5035 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                        float _3690 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                        float _3691 = 1.0 - _3661;
                        float _3701 = (0.5 / (((_3690 * ((_3676 * _3691) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3690 * _3691) + _3661) * _3676))) * _3690;
                        float _5046 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                        float _3712 = (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0)))) / ((_3684 * _3684) * ((_3628 * 2.1991131305694580078125) + 3.141590118408203125))) * _3617;
                        _3470 = (_3632 * _3580.x) + _3538;
                        _3471 = (_3632 * _3580.y) + _3539;
                        _3472 = (_3632 * _3580.z) + _3540;
                        _3467 = (_3712 * _3597.x) + _3535;
                        _3468 = (_3712 * _3597.y) + _3536;
                        _3469 = (_3712 * _3597.z) + _3537;
                        if (_3542 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3535 = _3467;
                            _3536 = _3468;
                            _3537 = _3469;
                            _3538 = _3470;
                            _3539 = _3471;
                            _3540 = _3472;
                            _3541 = _3542;
                        }
                    }
                    frontier_phi_66_pred = _3472;
                    frontier_phi_66_pred_1 = _3471;
                    frontier_phi_66_pred_2 = _3470;
                    frontier_phi_66_pred_3 = _3469;
                    frontier_phi_66_pred_4 = _3468;
                    frontier_phi_66_pred_5 = _3467;
                }
                _3279 = frontier_phi_66_pred;
                _3277 = frontier_phi_66_pred_1;
                _3275 = frontier_phi_66_pred_2;
                _3273 = frontier_phi_66_pred_3;
                _3271 = frontier_phi_66_pred_4;
                _3269 = frontier_phi_66_pred_5;
                uint _3418 = _3417 + 1u;
                if (_3418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3411 = _3269;
                    _3412 = _3271;
                    _3413 = _3273;
                    _3414 = _3275;
                    _3415 = _3277;
                    _3416 = _3279;
                    _3417 = _3418;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3268 = _3269;
            _3270 = _3271;
            _3272 = _3273;
            _3274 = _3275;
            _3276 = _3277;
            _3278 = _3279;
        }
        uvec4 _3282 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3283 = _3282.z;
        uint _3285 = (_3283 >> 8u) & 15u;
        float _3379;
        float _3381;
        float _3383;
        float _3385;
        float _3387;
        float _3389;
        if (((4294967295u << _3285) & _3165) == 0u)
        {
            _3379 = _3268;
            _3381 = _3270;
            _3383 = _3272;
            _3385 = _3274;
            _3387 = _3276;
            _3389 = _3278;
        }
        else
        {
            float _3404 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
            float _3405 = _3404 * _2224;
            float _3406 = _3404 * _2225;
            float _3407 = _3404 * _2226;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3285 < ((_3283 >> 12u) & 15u))
            {
                float _3380;
                float _3382;
                float _3384;
                float _3386;
                float _3388;
                float _3390;
                float _3518 = _3268;
                float _3519 = _3270;
                float _3520 = _3272;
                float _3521 = _3274;
                float _3522 = _3276;
                float _3523 = _3278;
                uint _3524 = _3285;
                uint _3533;
                bool _3534;
                for (;;)
                {
                    _3533 = texelFetch(g_lightClassification, int((((_3159 << 5u) + (_3145 << 9u)) + (_3524 << 2u)) >> 2u)).x;
                    _3534 = _3533 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3534)
                    {
                        frontier_phi_72_pred = _3523;
                        frontier_phi_72_pred_1 = _3522;
                        frontier_phi_72_pred_2 = _3521;
                        frontier_phi_72_pred_3 = _3520;
                        frontier_phi_72_pred_4 = _3519;
                        frontier_phi_72_pred_5 = _3518;
                    }
                    else
                    {
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _4010;
                        float _4011;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _3730 = _3518;
                        float _3731 = _3519;
                        float _3732 = _3520;
                        float _3733 = _3521;
                        float _3734 = _3522;
                        float _3735 = _3523;
                        uint _3736 = _3533;
                        uint _3737;
                        vec4 _3762;
                        float _3763;
                        vec4 _3778;
                        vec3 _3790;
                        vec4 _3805;
                        vec4 _3820;
                        float _3866;
                        bool _3867;
                        for (;;)
                        {
                            uint _3747 = ((_3524 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3736));
                            _3737 = (_3736 + 4294967295u) & _3736;
                            uint _3749 = _3747 * 40u;
                            _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            _3763 = _3762.w;
                            uint _3765 = (_3747 * 40u) + 4u;
                            _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            uint _3780 = (_3747 * 40u) + 8u;
                            _3790 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x));
                            uint _3792 = (_3747 * 40u) + 16u;
                            _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            uint _3807 = (_3747 * 40u) + 20u;
                            _3820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 3u)).x));
                            uint _3822 = (_3747 * 40u) + 24u;
                            vec4 _3835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 3u)).x));
                            uint _3841 = (_3747 * 40u) + 28u;
                            vec4 _3854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 3u)).x));
                            _3866 = fma(_2226, _3854.z, fma(_2225, _3854.y, _3854.x * _2224)) + _3854.w;
                            _3867 = !((fma(_2226, _3835.z, fma(_2225, _3835.y, _3835.x * _2224)) + _3835.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3867)
                            {
                                float _3894 = _3762.x - _2224;
                                float _3895 = _3762.y - _2225;
                                float _3896 = _3762.z - _2226;
                                float _3897 = dot(vec3(_3894, _3895, _3896), vec3(_3894, _3895, _3896));
                                float _3900 = inversesqrt(_3897);
                                float _3901 = _3900 * _3894;
                                float _3902 = _3900 * _3895;
                                float _3903 = _3900 * _3896;
                                float _3907 = 1.0 - (_3897 / (_3763 * _3763));
                                float _5057 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3908 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                                float _3912 = sqrt(_3897) * _3778.w;
                                float _3914 = 1.39999997615814208984375 / (_3912 + 1.39999997615814208984375);
                                float _3915 = _3914 * _3914;
                                float _3918 = ((1.0 - _3915) * dot(vec3(_3901, _3902, _3903), vec3(_1090, _1093, _1096))) + _3915;
                                float _3921 = _3912 * _3912;
                                float _3925 = (fma(_2226, _3805.z, fma(_2225, _3805.y, _3805.x * _2224)) + _3805.w) / _3866;
                                float _3926 = (fma(_2226, _3820.z, fma(_2225, _3820.y, _3820.x * _2224)) + _3820.w) / _3866;
                                float _3930 = 1.0 - dot(vec2(_3925, _3926), vec2(_3925, _3926));
                                float _5073 = isnan(0.0) ? _3930 : (isnan(_3930) ? 0.0 : max(_3930, 0.0));
                                float _3931 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                                float _3932 = _3931 * (((isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0))) * _3908) / ((_3921 * 0.699999988079071044921875) + 1.0));
                                float _3944 = exp2(log2(1.0 / ((_3921 * 3.5) + 5.0)) * 0.25);
                                float _3945 = 1.0 - _1165;
                                float _3952 = sqrt(1.0 - ((1.0 - (_3945 * _3945)) * (1.0 - (_3944 * _3944))));
                                float _3953 = _3952 * _3952;
                                float _3954 = _3953 * _3953;
                                float _3955 = _3901 - _3405;
                                float _3956 = _3902 - _3406;
                                float _3957 = _3903 - _3407;
                                float _3961 = inversesqrt(dot(vec3(_3955, _3956, _3957), vec3(_3955, _3956, _3957)));
                                float _3965 = dot(vec3(_1090, _1093, _1096), vec3((-0.0) - _3405, (-0.0) - _3406, (-0.0) - _3407));
                                float _5084 = isnan(0.0) ? _3965 : (isnan(_3965) ? 0.0 : max(_3965, 0.0));
                                float _3968 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                                float _3969 = dot(vec3(_1090, _1093, _1096), vec3(_3961 * _3955, _3961 * _3956, _3961 * _3957));
                                float _5095 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3972 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                                float _3976 = ((_3972 * _3972) * (_3954 + (-1.0))) + 1.0;
                                float _3977 = _3914 * _3953;
                                float _3978 = _3977 * _3977;
                                float _3984 = ((1.0 - _3978) * dot(vec3(_1090, _1093, _1096), vec3(_3901, _3902, _3903))) + _3978;
                                float _5106 = isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0));
                                float _3985 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                                float _3986 = 1.0 - _3953;
                                float _3996 = (0.5 / (((_3985 * ((_3968 * _3986) + _3953)) + 9.9999999392252902907785028219223e-09) + (((_3985 * _3986) + _3953) * _3968))) * _3985;
                                float _5117 = isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0));
                                float _4006 = (_3931 * _3908) * (((_3954 * 3.1415927410125732421875) * (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0)))) / ((_3976 * _3976) * ((_3921 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3932 * _3778.y;
                                frontier_phi_78_pred_1 = _3932 * _3778.x;
                                frontier_phi_78_pred_2 = _4006 * _3790.z;
                                frontier_phi_78_pred_3 = _4006 * _3790.y;
                                frontier_phi_78_pred_4 = _4006 * _3790.x;
                                frontier_phi_78_pred_5 = _3932 * _3778.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4014 = frontier_phi_78_pred;
                            _4013 = frontier_phi_78_pred_1;
                            _4012 = frontier_phi_78_pred_2;
                            _4011 = frontier_phi_78_pred_3;
                            _4010 = frontier_phi_78_pred_4;
                            _4015 = frontier_phi_78_pred_5;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            _3717 = _4010 + _3730;
                            _3718 = _4011 + _3731;
                            _3719 = _4012 + _3732;
                            if (_3737 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3730 = _3717;
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3737;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3722;
                        frontier_phi_72_pred_1 = _3721;
                        frontier_phi_72_pred_2 = _3720;
                        frontier_phi_72_pred_3 = _3719;
                        frontier_phi_72_pred_4 = _3718;
                        frontier_phi_72_pred_5 = _3717;
                    }
                    _3390 = frontier_phi_72_pred;
                    _3388 = frontier_phi_72_pred_1;
                    _3386 = frontier_phi_72_pred_2;
                    _3384 = frontier_phi_72_pred_3;
                    _3382 = frontier_phi_72_pred_4;
                    _3380 = frontier_phi_72_pred_5;
                    uint _3525 = _3524 + 1u;
                    if (_3525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3518 = _3380;
                        _3519 = _3382;
                        _3520 = _3384;
                        _3521 = _3386;
                        _3522 = _3388;
                        _3523 = _3390;
                        _3524 = _3525;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3390;
                frontier_phi_60_61_ladder_1 = _3388;
                frontier_phi_60_61_ladder_2 = _3384;
                frontier_phi_60_61_ladder_3 = _3382;
                frontier_phi_60_61_ladder_4 = _3380;
                frontier_phi_60_61_ladder_5 = _3386;
            }
            else
            {
                frontier_phi_60_61_ladder = _3278;
                frontier_phi_60_61_ladder_1 = _3276;
                frontier_phi_60_61_ladder_2 = _3272;
                frontier_phi_60_61_ladder_3 = _3270;
                frontier_phi_60_61_ladder_4 = _3268;
                frontier_phi_60_61_ladder_5 = _3274;
            }
            _3379 = frontier_phi_60_61_ladder_4;
            _3381 = frontier_phi_60_61_ladder_3;
            _3383 = frontier_phi_60_61_ladder_2;
            _3385 = frontier_phi_60_61_ladder_5;
            _3387 = frontier_phi_60_61_ladder_1;
            _3389 = frontier_phi_60_61_ladder;
        }
        float _3394 = isnan(1.0) ? _1149 : (isnan(_1149) ? 1.0 : min(_1149, 1.0));
        _3178 = (_3394 * _3385) + _2690;
        _3180 = (_3394 * _3387) + _2692;
        _3182 = (_3394 * _3389) + _2694;
        _3184 = ((_3379 * _1134) * _3394) + _3028;
        _3186 = ((_3381 * _1136) * _3394) + _3030;
        _3188 = ((_3383 * _1137) * _3394) + _3032;
    }
    else
    {
        _3178 = _2690;
        _3180 = _2692;
        _3182 = _2694;
        _3184 = _3028;
        _3186 = _3030;
        _3188 = _3032;
    }
    uint _3194 = _1110 + uint(cbMatDynParam._m0[0u].w);
    float _3200 = (isnan(cbMtdParam._m0[24u].y) ? _827 : (isnan(_827) ? cbMtdParam._m0[24u].y : min(_827, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _5133 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _5144 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _5155 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _3223 = (((isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0))) * (_3178 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1149))) + ((_3184 + ((isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0))) * _1958)) * cbPerFrame._m0[3u].x)) + ((_3200 * (((((_894.x - _891) * _873) + _891) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _819) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_3194].x);
    float _3225 = (((_3200 * (((((_894.y - _892) * _873) + _892) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_808.y - _806) * _787) + _806)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_3194].y) + ((_3186 + ((isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0))) * _1958)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0))) * (_3180 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1149)));
    float _3227 = (((_3200 * (((((_894.z - _893) * _873) + _893) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_808.z - _807) * _787) + _807)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_3194].z) + ((_3188 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1958)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0))) * (_3182 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1149)));
    uint _3231 = _1109 + 6u;
    float _3239 = _1071 / cbSceneParam._m0[86u].x;
    float _3240 = _1072 / cbSceneParam._m0[86u].y;
    vec4 _3254 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3239, _3240, (log2((isnan(cbSceneParam._m0[77u].w) ? _1005 : (isnan(_1005) ? cbSceneParam._m0[77u].w : min(_1005, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3256 = _3254.x;
    float _3257 = _3254.y;
    float _3258 = _3254.z;
    float _3259 = _3254.w;
    float _3330;
    float _3332;
    float _3334;
    float _3336;
    if (_1005 > cbSceneParam._m0[78u].w)
    {
        float _3293 = isnan(_1005) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1005 : min(cbSceneParam._m0[80u].w, _1005));
        float _3294 = _3293 / _1005;
        float _3305 = _3294 * _1056;
        float _3306 = _1057 * _3294;
        float _3307 = (-0.0) - _3306;
        float _3308 = _3294 * _1058;
        float _3310 = (cbSceneParam._m0[77u].w * _3307) / _3293;
        float _3311 = _3310 + cbSceneParam._m0[79u].w;
        float _3312 = cbSceneParam._m0[79u].w - _3306;
        float _3318 = sqrt(((_3305 * _3305) + (_3306 * _3306)) + (_3308 * _3308));
        float _3321 = (1.0 - (cbSceneParam._m0[77u].w / _3293)) * _3318;
        float _3326 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3328 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3480;
        if (abs((_3307 - _3310) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3480 = ((((_3311 > 0.0) ? exp2(_3326 * _3311) : (2.0 - exp2(_3328 * _3311))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3321;
        }
        else
        {
            float _3440 = 1.0 / cbSceneParam._m0[80u].x;
            float _3441 = isnan(_3312) ? _3311 : (isnan(_3311) ? _3312 : max(_3311, _3312));
            float _3442 = isnan(_3312) ? _3311 : (isnan(_3311) ? _3312 : min(_3311, _3312));
            float _3451 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : min(_3441, 0.0));
            float _3452 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : min(_3442, 0.0));
            _3480 = ((abs(_3318 / _3307) * cbSceneParam._m0[80u].y) * ((((_3451 - _3452) * 2.0) - ((exp2(_3326 * (isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0)))) - exp2(_3326 * (isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0))))) * _3440)) - ((exp2(_3328 * _3451) - exp2(_3328 * _3452)) * _3440))) + (_3321 * cbSceneParam._m0[80u].z);
        }
        vec4 _3482 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3239, _3240, 1.0), 0.0);
        float _3491 = exp2((_3480 * (-1.44269502162933349609375)) * (1.0 - _3482.w));
        float _3492 = log2(_3491);
        float _3508 = log2(_3259);
        _3330 = (exp2(_3508 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3492 * cbSceneParam._m0[78u].x)) * _3482.x) / cbSceneParam._m0[78u].x)) + _3256;
        _3332 = (exp2(_3508 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3492 * cbSceneParam._m0[78u].y)) * _3482.y) / cbSceneParam._m0[78u].y)) + _3257;
        _3334 = (exp2(_3508 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3492 * cbSceneParam._m0[78u].z)) * _3482.z) / cbSceneParam._m0[78u].z)) + _3258;
        _3336 = _3491 * _3259;
    }
    else
    {
        _3330 = _3256;
        _3332 = _3257;
        _3334 = _3258;
        _3336 = _3259;
    }
    float _3347 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3348 = _3347 == 3.0;
    float _3349 = log2(_3336);
    float _3356 = exp2(_3349 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0)));
    float _3357 = exp2(_3349 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0)));
    float _3358 = exp2(_3349 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0)));
    float _3367 = (_3347 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3367 * (_3348 ? _3356 : (_3356 + (cbSceneParam._m0[72u].w * _3330)));
    SV_Target.y = _3367 * (_3348 ? _3357 : (_3357 + (cbSceneParam._m0[72u].w * _3332)));
    SV_Target.z = _3367 * (_3348 ? _3358 : (_3358 + (cbSceneParam._m0[72u].w * _3334)));
    SV_Target.w = cbInstanceData._m0[_3231].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3231].w;
}


