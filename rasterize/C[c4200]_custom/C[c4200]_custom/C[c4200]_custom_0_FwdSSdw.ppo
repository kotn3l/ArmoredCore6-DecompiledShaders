#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_c4200_custom_snp_0_Texture2D_16;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c4200_custom_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D C_c4200_custom_snp_0_Texture2D_18;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1521;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _311 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _324 = exp2(log2(_311.w * cbMtdParam._m0[26u].x) * cbMtdParam._m0[18u].w);
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(1.0) ? _325 : (isnan(_325) ? 1.0 : min(_325, 1.0));
    vec4 _340 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _344 = _340.z;
    float _349 = exp2(log2(_344 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _350 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _351 = isnan(1.0) ? _350 : (isnan(_350) ? 1.0 : min(_350, 1.0));
    vec4 _363 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _388 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _399 = cbMtdParam._m0[9u].x * _388.x;
    float _400 = cbMtdParam._m0[9u].y * _388.y;
    float _401 = cbMtdParam._m0[9u].z * _388.z;
    float _408 = (((cbMtdParam._m0[10u].x * _363.x) - _399) * _351) + _399;
    float _409 = (((cbMtdParam._m0[10u].y * _363.y) - _400) * _351) + _400;
    float _410 = (((cbMtdParam._m0[10u].z * _363.z) - _401) * _351) + _401;
    vec4 _423 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _425 = _423.x;
    float _429 = exp2(log2(_425) * cbMtdParam._m0[19u].z);
    vec4 _442 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _462 = (((cbMtdParam._m0[12u].x * _442.x) - _408) * _429) + _408;
    float _463 = (((cbMtdParam._m0[12u].y * _442.y) - _409) * _429) + _409;
    float _464 = (((cbMtdParam._m0[12u].z * _442.z) - _410) * _429) + _410;
    vec4 _477 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _502 = (_311.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _477.x) - _462) * _326) + _462);
    float _504 = (_311.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _477.y) - _463) * _326) + _463);
    float _506 = (_311.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _477.z) - _464) * _326) + _464);
    vec4 _518 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _537 = TEXCOORD_3.x - ((cbMtdParam._m0[19u].w * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c4200_custom_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x + 0.00999999977648258209228515625));
    float _539 = _537 * (cbMtdParam._m0[20u].y + 1.0);
    float _3912 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _547 = (_540 * ((cbMtdParam._m0[11u].x * _518.x) - _502)) + _502;
    float _548 = (((cbMtdParam._m0[11u].y * _518.y) - _504) * _540) + _504;
    float _549 = (((cbMtdParam._m0[11u].z * _518.z) - _506) * _540) + _506;
    float _551 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _559 = (_551 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _551))) * (cbMtdParam._m0[22u].y + 1.0);
    float _3923 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _567 = ((cbMtdParam._m0[14u].x - _547) * _560) + _547;
    float _568 = ((cbMtdParam._m0[14u].y - _548) * _560) + _548;
    float _569 = ((cbMtdParam._m0[14u].z - _549) * _560) + _549;
    float _572 = (cbMtdParam._m0[20u].x + 1.0) * _537;
    float _3934 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _575 = _425 - (_573 * _425);
    float _577 = _575 - (_575 * _551);
    vec4 _590 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _608 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _610 = _608.x;
    float _611 = _608.y;
    float _614 = cbMtdParam._m0[18u].x + _608.z;
    float _617 = (((cbMtdParam._m0[18u].z + _590.z) - _614) * _351) + _614;
    vec4 _629 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _641 = (((_629.z - _617) + cbMtdParam._m0[24u].z) * _429) + _617;
    float _647 = ((((_344 * 2.0) * _641) - _641) * cbMtdParam._m0[20u].z) + _641;
    vec4 _660 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _669 = (((cbMtdParam._m0[19u].y + _660.z) - _647) * _326) + _647;
    vec4 _681 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _693 = ((_681.z - _669) * _573) + _669;
    vec4 _709 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _723 = ((cbMtdParam._m0[21u].w * _551) * ((_709.z * cbMtdParam._m0[21u].z) - _693)) + _693;
    float _734 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    float _753 = (cbTextureTilingScale._m0[12u].x * ((_734 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z;
    float _754 = (cbTextureTilingScale._m0[12u].y * ((_734 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w;
    vec4 _756 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2(_753, _754));
    float _760 = cbPerFrame._m0[22u].x * 2.0;
    float _761 = _760 * cbMtdParam._m0[25u].y;
    float _768 = ((_756.y * 0.5) + (-0.25)) * cbMtdParam._m0[25u].x;
    float _770 = (-0.0) - (cbMtdParam._m0[25u].x * ((_756.x * 0.5) + (-0.25)));
    float _772 = fract(_761);
    float _774 = fract(_761 + 0.5);
    float _785 = abs((_772 * 2.0) + (-1.0));
    vec4 _801 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_772 * _770) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_768 * _772) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _803 = _801.x;
    float _804 = _801.y;
    float _805 = _801.z;
    vec4 _806 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_774 * _770) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_768 * _774) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _817 = ((_806.x - _803) * _785) + _803;
    float _824 = exp2(log2(_817 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _825 = isnan(cbMtdParam._m0[24u].x) ? _824 : (isnan(_824) ? cbMtdParam._m0[24u].x : max(_824, cbMtdParam._m0[24u].x));
    vec4 _846 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2(_753, _754));
    float _850 = _760 * cbMtdParam._m0[25u].w;
    float _855 = ((_846.y * 0.5) + (-0.25)) * cbMtdParam._m0[25u].z;
    float _857 = (-0.0) - (cbMtdParam._m0[25u].z * ((_846.x * 0.5) + (-0.25)));
    float _858 = fract(_850);
    float _860 = fract(_850 + 0.5);
    float _871 = abs((_858 * 2.0) + (-1.0));
    vec4 _887 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_858 * _857) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_855 * _858) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _889 = _887.x;
    float _890 = _887.y;
    float _891 = _887.z;
    vec4 _892 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_860 * _857) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_855 * _860) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _926 = ((_590.x - _610) * _351) + _610;
    float _927 = ((_590.y - _611) * _351) + _611;
    float _932 = ((_629.x - _926) * _429) + _926;
    float _933 = ((_629.y - _927) * _429) + _927;
    float _942 = ((((_660.x - _932) * _326) + _932) * 2.0) + (-1.0);
    float _943 = ((((_660.y - _933) * _326) + _933) * 2.0) + (-1.0);
    float _944 = dot(vec2(_942, _943), vec2(_942, _943));
    float _3955 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _949 = sqrt(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))));
    float _965 = (((cbMtdParam._m0[20u].w * ((_340.x * 2.0) + (-1.0))) + _942) + (((((_681.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[21u].x) * _573)) + ((((_709.x * 2.0) + (-1.0)) * _551) * cbMtdParam._m0[21u].y);
    float _966 = (((cbMtdParam._m0[20u].w * ((_340.y * 2.0) + (-1.0))) + _943) + (((((_681.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[21u].x) * _573)) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_709.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _969 = fma(_949, _236 * NORMAL.x, fma(_966, _243 * TANGENT.x, (_229 * _221) * _965));
    float _972 = fma(_949, _236 * NORMAL.y, fma(_966, _243 * TANGENT.y, (_229 * _222) * _965));
    float _975 = fma(_949, _236 * NORMAL.z, fma(_966, _243 * TANGENT.z, (_229 * _223) * _965));
    float _979 = inversesqrt(dot(vec3(_969, _972, _975), vec3(_969, _972, _975)));
    float _980 = _979 * _969;
    float _981 = _979 * _972;
    float _982 = _979 * _975;
    float _3966 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _983 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3988 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3999 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4010 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _987 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1003 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1054 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1044);
    float _1055 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1044);
    float _1056 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1044);
    float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
    float _1061 = _1054 * _1060;
    float _1062 = _1055 * _1060;
    float _1063 = _1056 * _1060;
    float _1069 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1070 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1088 = fma(_982, cbSceneParam._m0[5u].z, fma(_981, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _980));
    float _1091 = fma(_982, cbSceneParam._m0[6u].z, fma(_981, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _980));
    float _1094 = fma(_982, cbSceneParam._m0[7u].z, fma(_981, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _980));
    uint _1107 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1108 = _1107 + 9u;
    uint _1109 = _1108 + uint(cbMatDynParam._m0[0u].w);
    float _1115 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_1109].x;
    float _1116 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_1109].y;
    float _1117 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1109].z;
    float _4021 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1118 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1119 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1120 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1121 = 1.0 - _987;
    float _1122 = _1118 * _1121;
    float _1123 = _1119 * _1121;
    float _1124 = _1120 * _1121;
    float _1129 = (_1118 + (-0.039999999105930328369140625)) * _987;
    float _1130 = (_1119 + (-0.039999999105930328369140625)) * _987;
    float _1131 = (_1120 + (-0.039999999105930328369140625)) * _987;
    float _1132 = _1129 + 0.039999999105930328369140625;
    float _1134 = _1130 + 0.039999999105930328369140625;
    float _1135 = _1131 + 0.039999999105930328369140625;
    vec4 _1144 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1069, cbSceneParam._m0[86u].y * _1070));
    float _1147 = _1144.x * TEXCOORD_3.w;
    float _1148 = dot(vec3(_980, _981, _982), vec3(_1061, _1062, _1063));
    float _1151 = _1148 * 2.0;
    float _1155 = (_1151 * _980) - _1061;
    float _1156 = (_1151 * _981) - _1062;
    float _1157 = (_1151 * _982) - _1063;
    float _1161 = abs(dot(vec3(_1061, _1062, _1063), vec3(_980, _981, _982)));
    float _4054 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1163 = sqrt(_983);
    float _1176 = exp2((_1163 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1163 * 3.0));
    float _1182 = (1.0 - _1176) * ((_1163 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1183 = _1176 * _1163;
    float _1211 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1520;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1246 = fma(_1219, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211));
        float _1250 = fma(_1219, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211));
        float _1254 = fma(_1219, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211));
        float _1278 = _1211 + _980;
        float _1279 = _1215 + _981;
        float _1280 = _1219 + _982;
        float _1290 = fma(_1280, cbModelParam._m0[26u].z, fma(_1279, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1278)) - _1246;
        float _1291 = fma(_1280, cbModelParam._m0[27u].z, fma(_1279, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1278)) - _1250;
        float _1292 = fma(_1280, cbModelParam._m0[28u].z, fma(_1279, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1278)) - _1254;
        float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
        float _1309 = ((_1296 * _1290) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1246 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1296 * _1291) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1250 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1296 * _1292) / cbModelParam._m0[34u].z) + ((((((_1254 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        float _1348 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1314.x + (-0.5));
        float _1350 = _1348 * (_1314.y + (-0.5));
        float _1351 = _1348 * (_1314.z + (-0.5));
        float _1358 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1321.x + (-0.5));
        float _1360 = _1358 * (_1321.y + (-0.5));
        float _1361 = _1358 * (_1321.z + (-0.5));
        float _1368 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1328.x + (-0.5));
        float _1370 = _1368 * (_1328.y + (-0.5));
        float _1371 = _1368 * (_1328.z + (-0.5));
        float _1378 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1335.x + (-0.5));
        float _1380 = _1378 * (_1335.y + (-0.5));
        float _1381 = _1378 * (_1335.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1402 = (dot(vec3(_980, _981, _982), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1412 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4102 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1414 + 1.0))) + _1419) * _1382;
        float _1429 = _1350 * 0.5;
        float _1430 = _1360 * 0.5;
        float _1431 = _1370 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_980, _981, _982), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4135 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1456 + 1.0))) + _1461) * _1383;
        float _1471 = _1351 * 0.5;
        float _1472 = _1361 * 0.5;
        float _1473 = _1371 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_980, _981, _982), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4168 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1498 + 1.0))) + _1503) * _1384;
        _1520 = _1351;
        _1522 = _1350;
        _1523 = _1349;
        _1524 = _1361;
        _1525 = _1360;
        _1526 = _1359;
        _1527 = _1371;
        _1528 = _1370;
        _1529 = _1369;
        _1530 = _1384;
        _1531 = _1383;
        _1532 = _1382;
        _1533 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1534 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1535 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
    }
    else
    {
        _1520 = _1521;
        _1522 = _1521;
        _1523 = _1521;
        _1524 = _1521;
        _1525 = _1521;
        _1526 = _1521;
        _1527 = _1521;
        _1528 = _1521;
        _1529 = _1521;
        _1530 = _1521;
        _1531 = _1521;
        _1532 = _1521;
        _1533 = 0.0;
        _1534 = 0.0;
        _1535 = 0.0;
    }
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1561 = fma(_1219, cbModelParam._m0[30u].z, fma(_1215, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1211));
        float _1565 = fma(_1219, cbModelParam._m0[31u].z, fma(_1215, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1211));
        float _1569 = fma(_1219, cbModelParam._m0[32u].z, fma(_1215, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1211));
        float _1592 = _1211 + _980;
        float _1593 = _1215 + _981;
        float _1594 = _1219 + _982;
        float _1604 = fma(_1594, cbModelParam._m0[30u].z, fma(_1593, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1592)) - _1561;
        float _1605 = fma(_1594, cbModelParam._m0[31u].z, fma(_1593, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1592)) - _1565;
        float _1606 = fma(_1594, cbModelParam._m0[32u].z, fma(_1593, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1592)) - _1569;
        float _1610 = inversesqrt(dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606)));
        float _1623 = ((_1610 * _1604) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1561 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1624 = ((_1610 * _1605) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1565 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1625 = ((_1610 * _1606) / cbModelParam._m0[35u].z) + ((((((_1569 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        float _1660 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1627.x + (-0.5));
        float _1662 = _1660 * (_1627.y + (-0.5));
        float _1663 = _1660 * (_1627.z + (-0.5));
        float _1670 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1634.x + (-0.5));
        float _1672 = _1670 * (_1634.y + (-0.5));
        float _1673 = _1670 * (_1634.z + (-0.5));
        float _1680 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1641.x + (-0.5));
        float _1682 = _1680 * (_1641.y + (-0.5));
        float _1683 = _1680 * (_1641.z + (-0.5));
        float _1690 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1648.x + (-0.5));
        float _1692 = _1690 * (_1648.y + (-0.5));
        float _1693 = _1690 * (_1648.z + (-0.5));
        float _1694 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1695 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = _1661 * 0.5;
        float _1698 = _1671 * 0.5;
        float _1699 = _1681 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_980, _981, _982), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1694 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4231 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1724 + 1.0))) + _1729) * _1694;
        float _1739 = _1662 * 0.5;
        float _1740 = _1672 * 0.5;
        float _1741 = _1682 * 0.5;
        float _1742 = dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741));
        float _1747 = (_1742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1742);
        float _1755 = (dot(vec3(_980, _981, _982), vec3(_1747 * _1739, _1747 * _1740, _1747 * _1741)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1764 = sqrt(((_1740 * _1740) + (_1739 * _1739)) + (_1741 * _1741)) / (_1695 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1766 = _1765 * 2.0;
        float _1770 = (1.0 - _1765) / (_1765 + 1.0);
        float _4264 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1780 = ((((1.0 - _1771) * (_1766 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1766 + 1.0))) + _1771) * _1695;
        float _1781 = _1663 * 0.5;
        float _1782 = _1673 * 0.5;
        float _1783 = _1683 * 0.5;
        float _1784 = dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783));
        float _1789 = (_1784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1784);
        float _1797 = (dot(vec3(_980, _981, _982), vec3(_1789 * _1781, _1789 * _1782, _1789 * _1783)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = sqrt(((_1782 * _1782) + (_1781 * _1781)) + (_1783 * _1783)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1808 = _1807 * 2.0;
        float _1812 = (1.0 - _1807) / (_1807 + 1.0);
        float _4297 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1822 = ((((1.0 - _1813) * (_1808 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1808 + 1.0))) + _1813) * _1696;
        _1830 = _1663;
        _1831 = _1662;
        _1832 = _1661;
        _1833 = _1673;
        _1834 = _1672;
        _1835 = _1671;
        _1836 = _1683;
        _1837 = _1682;
        _1838 = _1681;
        _1839 = _1696;
        _1840 = _1695;
        _1841 = _1694;
        _1842 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
        _1843 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)));
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)));
    }
    else
    {
        _1830 = _1521;
        _1831 = _1521;
        _1832 = _1521;
        _1833 = _1521;
        _1834 = _1521;
        _1835 = _1521;
        _1836 = _1521;
        _1837 = _1521;
        _1838 = _1521;
        _1839 = _1521;
        _1840 = _1521;
        _1841 = _1521;
        _1842 = 0.0;
        _1843 = 0.0;
        _1844 = 0.0;
    }
    float _1854 = (cbModelParam._m0[1u].x * (_1842 - _1533)) + _1533;
    float _1855 = (cbModelParam._m0[1u].x * (_1843 - _1534)) + _1534;
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1535)) + _1535;
    float _1877 = fma(_1856, cbSceneParam._m0[89u].z, fma(_1855, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1856, cbSceneParam._m0[90u].z, fma(_1855, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1856, cbSceneParam._m0[91u].z, fma(_1855, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1854));
    float _1898 = _1155 * 0.5;
    float _1899 = _1156 * 0.5;
    float _1900 = _1157 * 0.5;
    float _1901 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1904 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1831, _1834, _1837, _1840));
    float _1907 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1830, _1833, _1836, _1839));
    float _1941;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1914 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1520, _1524, _1527, _1530));
        float _1918 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1522, _1525, _1528, _1531));
        float _1922 = dot(vec4(_1898, _1899, _1900, 1.0), vec4(_1523, _1526, _1529, _1532));
        float _1929 = dot(vec4(cbModelParam._m0[39u]), vec4(_1898, _1899, _1900, 1.0));
        _1941 = dot(vec3(isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1929) ? 0.0 : (isnan(0.0) ? _1929 : max(0.0, _1929))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1941 = 1.0;
    }
    float _1952;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1943 = dot(vec4(cbModelParam._m0[40u]), vec4(_1898, _1899, _1900, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1943) ? 0.0 : (isnan(0.0) ? _1943 : max(0.0, _1943))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1956 = (_1952 * cbModelParam._m0[1u].x) + (_1941 * (1.0 - cbModelParam._m0[1u].x));
    float _1966 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _983);
    float _1967 = isnan(_1966) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1966 : min(cbModelParam._m0[25u].z, _1966));
    float _2047;
    float _2049;
    float _2051;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2014 = fma(_1219, cbModelParam._m0[13u].z, fma(_1215, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1211)) + cbModelParam._m0[13u].w;
        float _2018 = fma(_1219, cbModelParam._m0[14u].z, fma(_1215, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1211)) + cbModelParam._m0[14u].w;
        float _2022 = fma(_1219, cbModelParam._m0[15u].z, fma(_1215, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1211)) + cbModelParam._m0[15u].w;
        float _2025 = fma(_1157, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1155));
        float _2028 = fma(_1157, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1155));
        float _2031 = fma(_1157, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1155));
        float _2059;
        if (_2025 > 0.0)
        {
            _2059 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2059 = frontier_phi_14_12_ladder;
        }
        float _2282;
        if (_2028 > 0.0)
        {
            _2282 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2282 = frontier_phi_23_19_ladder;
        }
        float _2539;
        if (_2031 > 0.0)
        {
            _2539 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2539 = frontier_phi_35_30_ladder;
        }
        float _2541 = isnan(_2282) ? _2059 : (isnan(_2059) ? _2282 : min(_2059, _2282));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _2025) + _2014;
        float _2547 = (_2542 * _2028) + _2018;
        float _2548 = (_2542 * _2031) + _2022;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2551 = (-1.0) - _2549;
        float _2553 = _2549 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2548 > _2553) || ((_2548 < _2551) || ((_2547 > _2553) || ((_2547 < _2551) || ((_2546 < _2551) || (_2546 > _2553))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2548, cbModelParam._m0[9u].z, fma(_2547, cbModelParam._m0[9u].y, _2546 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2548, cbModelParam._m0[10u].z, fma(_2547, cbModelParam._m0[10u].y, _2546 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2548, cbModelParam._m0[11u].z, fma(_2547, cbModelParam._m0[11u].y, _2546 * cbModelParam._m0[11u].x))), _1967);
            frontier_phi_13_35_ladder = _2676.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2676.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2676.x * cbModelParam._m0[1u].y;
        }
        _2047 = frontier_phi_13_35_ladder_2;
        _2049 = frontier_phi_13_35_ladder_1;
        _2051 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1155, _1156, _1157), _1967);
        _2047 = _2035.x * cbModelParam._m0[1u].y;
        _2049 = _2035.y * cbModelParam._m0[1u].y;
        _2051 = _2035.z * cbModelParam._m0[1u].y;
    }
    float _2055 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _983);
    float _2056 = isnan(_2055) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2055 : min(cbModelParam._m0[25u].w, _2055));
    float _2145;
    float _2147;
    float _2149;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2109 = fma(_1219, cbModelParam._m0[21u].z, fma(_1215, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1211)) + cbModelParam._m0[21u].w;
        float _2113 = fma(_1219, cbModelParam._m0[22u].z, fma(_1215, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1211)) + cbModelParam._m0[22u].w;
        float _2117 = fma(_1219, cbModelParam._m0[23u].z, fma(_1215, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1211)) + cbModelParam._m0[23u].w;
        float _2120 = fma(_1157, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1155));
        float _2123 = fma(_1157, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1155));
        float _2126 = fma(_1157, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1155));
        float _2287;
        if (_2120 > 0.0)
        {
            _2287 = abs((1.0 - _2109) / _2120);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2109 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2287 = frontier_phi_25_21_ladder;
        }
        float _2566;
        if (_2123 > 0.0)
        {
            _2566 = abs((1.0 - _2113) / _2123);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2113 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2566 = frontier_phi_37_32_ladder;
        }
        float _2779;
        if (_2126 > 0.0)
        {
            _2779 = abs((1.0 - _2117) / _2126);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2117 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2779 = frontier_phi_46_43_ladder;
        }
        float _2781 = isnan(_2566) ? _2287 : (isnan(_2287) ? _2566 : min(_2287, _2566));
        float _2782 = isnan(_2779) ? _2781 : (isnan(_2781) ? _2779 : min(_2781, _2779));
        float _2786 = (_2782 * _2120) + _2109;
        float _2787 = (_2782 * _2123) + _2113;
        float _2788 = (_2782 * _2126) + _2117;
        float _2789 = _2782 * 9.9999997473787516355514526367188e-05;
        float _2790 = (-1.0) - _2789;
        float _2792 = _2789 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2788 > _2792) || ((_2788 < _2790) || ((_2787 > _2792) || ((_2787 < _2790) || ((_2786 < _2790) || (_2786 > _2792))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2788, cbModelParam._m0[17u].z, fma(_2787, cbModelParam._m0[17u].y, _2786 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2788, cbModelParam._m0[18u].z, fma(_2787, cbModelParam._m0[18u].y, _2786 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2788, cbModelParam._m0[19u].z, fma(_2787, cbModelParam._m0[19u].y, _2786 * cbModelParam._m0[19u].x))), _2056);
            frontier_phi_22_46_ladder = _3010.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3010.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3010.x * cbModelParam._m0[1u].z;
        }
        _2145 = frontier_phi_22_46_ladder_2;
        _2147 = frontier_phi_22_46_ladder_1;
        _2149 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2129 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1155, _1156, _1157), _2056);
        _2145 = _2129.x * cbModelParam._m0[1u].z;
        _2147 = _2129.y * cbModelParam._m0[1u].z;
        _2149 = _2129.z * cbModelParam._m0[1u].z;
    }
    float _2162 = (((_1182 * _1132) + _1183) * _1147) * ((cbModelParam._m0[1u].w * (_2145 - _2047)) + _2047);
    float _2164 = (((_1182 * _1134) + _1183) * _1147) * ((cbModelParam._m0[1u].w * (_2147 - _2049)) + _2049);
    float _2166 = (((_1182 * _1135) + _1183) * _1147) * ((cbModelParam._m0[1u].w * (_2149 - _2051)) + _2051);
    float _2169 = fma(_2166, cbSceneParam._m0[89u].z, fma(_2164, cbSceneParam._m0[89u].y, _2162 * cbSceneParam._m0[89u].x));
    float _2172 = fma(_2166, cbSceneParam._m0[90u].z, fma(_2164, cbSceneParam._m0[90u].y, _2162 * cbSceneParam._m0[90u].x));
    float _2175 = fma(_2166, cbSceneParam._m0[91u].z, fma(_2164, cbSceneParam._m0[91u].y, _2162 * cbSceneParam._m0[91u].x));
    vec4 _2183 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1069, _1070));
    float _2185 = _2183.w;
    float _2197 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2185);
    float _2198 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2185);
    float _2199 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2185);
    uvec4 _2203 = floatBitsToUint(cbInstanceData._m0[_1107 + 5u]);
    uint _2205 = _2203.x * 14u;
    uint _2206 = _2205 + 13u;
    float _2213 = _1147 + (-1.0);
    float _2218 = (cbLight._m0[_2206].x * _2213) + 1.0;
    float _2219 = (cbLight._m0[_2206].y * _2213) + 1.0;
    float _2220 = (cbLight._m0[_2206].z * _2213) + 1.0;
    float _2221 = (cbLight._m0[_2206].w * _2213) + 1.0;
    uint _2222 = _2205 + 5u;
    float _2228 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2232 = _2205 + 4u;
    float _2241 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2245 = _2205 | 1u;
    float _2256 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_980, _981, _982));
    float _2259 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_980, _981, _982));
    float _4433 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _4444 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2264 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2266 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2273 = ((cbLight._m0[_2222].x * _2228) * _2266) + (((cbLight._m0[_2232].x * _2197) * _2241) * _2264);
    float _2274 = ((_2228 * cbLight._m0[_2222].y) * _2266) + (((cbLight._m0[_2232].y * _2198) * _2241) * _2264);
    float _2275 = ((_2228 * cbLight._m0[_2222].z) * _2266) + (((cbLight._m0[_2232].z * _2199) * _2241) * _2264);
    uvec4 _2279 = floatBitsToUint(cbLight._m0[_2205 + 12u]);
    bool _2281 = _2279.x == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2281)
    {
        _2292 = _2273;
        _2294 = _2274;
        _2296 = _2275;
    }
    else
    {
        uint _2300 = _2205 + 6u;
        float _2316 = (dot(vec3(cbLight._m0[_2205 + 2u].xyz), vec3(_980, _981, _982)) * 0.5) + 0.5;
        float _2317 = _2316 * _2316;
        float _4455 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2318 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2319 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2292 = (((cbLight._m0[_2300].x * 0.3183098733425140380859375) * _2318) * _2319) + _2273;
        _2294 = (((cbLight._m0[_2300].y * 0.3183098733425140380859375) * _2318) * _2319) + _2274;
        _2296 = (((cbLight._m0[_2300].z * 0.3183098733425140380859375) * _2318) * _2319) + _2275;
    }
    bool _2299 = _2279.y == 0u;
    float _2337;
    float _2339;
    float _2341;
    if (_2299)
    {
        _2337 = _2292;
        _2339 = _2294;
        _2341 = _2296;
    }
    else
    {
        uint _2510 = _2205 + 7u;
        float _2526 = (dot(vec3(cbLight._m0[_2205 + 3u].xyz), vec3(_980, _981, _982)) * 0.5) + 0.5;
        float _2527 = _2526 * _2526;
        float _4471 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2528 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2529 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2337 = (((cbLight._m0[_2510].x * 0.3183098733425140380859375) * _2528) * _2529) + _2292;
        _2339 = (((cbLight._m0[_2510].y * 0.3183098733425140380859375) * _2528) * _2529) + _2294;
        _2341 = (((cbLight._m0[_2510].z * 0.3183098733425140380859375) * _2528) * _2529) + _2296;
    }
    uint _2344 = _2205 + 8u;
    float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _983) * 0.949999988079071044921875);
    float _2358 = _2357 * _2357;
    float _2359 = cbLight._m0[_2205].x + _1061;
    float _2360 = cbLight._m0[_2205].y + _1062;
    float _2361 = cbLight._m0[_2205].z + _1063;
    float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
    float _2366 = _2365 * _2359;
    float _2367 = _2365 * _2360;
    float _2368 = _2365 * _2361;
    float _2369 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2205].xyz));
    float _4487 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _4498 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _2373 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2374 = dot(vec3(_980, _981, _982), vec3(_2366, _2367, _2368));
    float _4509 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2378 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2366, _2367, _2368));
    float _4520 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2382 = _2358 * _2358;
    float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
    float _2394 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2395 = 0.959999978542327880859375 - _1129;
    float _2397 = 0.959999978542327880859375 - _1130;
    float _2398 = 0.959999978542327880859375 - _1131;
    float _2405 = 1.0 - _2358;
    float _2416 = (0.5 / (((_2373 * ((_2372 * _2405) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2373 * _2405) + _2358) * _2372))) * _2372;
    float _4531 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2418 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
    uint _2432 = _2205 + 9u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _983) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2245].x + _1061;
    float _2446 = cbLight._m0[_2245].y + _1062;
    float _2447 = cbLight._m0[_2245].z + _1063;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2245].xyz));
    float _4542 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2459 = dot(vec3(_980, _981, _982), vec3(_2452, _2453, _2454));
    float _4553 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2463 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2452, _2453, _2454));
    float _4564 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2467 = _2444 * _2444;
    float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
    float _2478 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2485 = 1.0 - _2444;
    float _2495 = (0.5 / (((_2373 * ((_2458 * _2485) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2373 * _2485) + _2444) * _2458))) * _2458;
    float _4575 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2497 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
    float _2507 = (((((_2478 * _2395) + _1132) * cbLight._m0[_2432].x) * _2497) * _2228) + ((((cbLight._m0[_2344].x * _2197) * ((_2394 * _2395) + _1132)) * _2418) * _2241);
    float _2508 = (((((_2478 * _2397) + _1134) * cbLight._m0[_2432].y) * _2497) * _2228) + ((((cbLight._m0[_2344].y * _2198) * ((_2394 * _2397) + _1134)) * _2418) * _2241);
    float _2509 = (((((_2478 * _2398) + _1135) * cbLight._m0[_2432].z) * _2497) * _2228) + ((((cbLight._m0[_2344].z * _2199) * ((_2394 * _2398) + _1135)) * _2418) * _2241);
    float _2571;
    float _2573;
    float _2575;
    if (_2281)
    {
        _2571 = _2507;
        _2573 = _2508;
        _2575 = _2509;
    }
    else
    {
        uint _2577 = _2205 + 2u;
        uint _2581 = _2205 + 10u;
        float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2577].w)) * _983) * 0.949999988079071044921875);
        float _2596 = _2595 * _2595;
        float _2597 = cbLight._m0[_2577].x + _1061;
        float _2598 = cbLight._m0[_2577].y + _1062;
        float _2599 = cbLight._m0[_2577].z + _1063;
        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
        float _2604 = _2603 * _2597;
        float _2605 = _2603 * _2598;
        float _2606 = _2603 * _2599;
        float _2607 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2577].xyz));
        float _4586 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2611 = dot(vec3(_980, _981, _982), vec3(_2604, _2605, _2606));
        float _4597 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2615 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_2604, _2605, _2606));
        float _4608 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2619 = _2596 * _2596;
        float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
        float _2630 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
        float _2637 = 1.0 - _2596;
        float _2647 = (0.5 / (((_2373 * ((_2610 * _2637) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2373 * _2637) + _2596) * _2610))) * _2610;
        float _4619 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2649 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
        float _2650 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2571 = (((((_2630 * _2395) + _1132) * cbLight._m0[_2581].x) * _2649) * _2650) + _2507;
        _2573 = (((((_2630 * _2397) + _1134) * cbLight._m0[_2581].y) * _2649) * _2650) + _2508;
        _2575 = (((((_2630 * _2398) + _1135) * cbLight._m0[_2581].z) * _2649) * _2650) + _2509;
    }
    float _2685;
    float _2687;
    float _2689;
    if (_2299)
    {
        _2685 = _2571;
        _2687 = _2573;
        _2689 = _2575;
    }
    else
    {
        uint _2696 = _2205 + 3u;
        uint _2700 = _2205 + 11u;
        float _2714 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2696].w)) * _983) * 0.949999988079071044921875);
        float _2715 = _2714 * _2714;
        float _2716 = cbLight._m0[_2696].x + _1061;
        float _2717 = cbLight._m0[_2696].y + _1062;
        float _2718 = cbLight._m0[_2696].z + _1063;
        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
        float _2723 = _2722 * _2716;
        float _2724 = _2722 * _2717;
        float _2725 = _2722 * _2718;
        float _2726 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2696].xyz));
        float _4635 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2730 = dot(vec3(_980, _981, _982), vec3(_2723, _2724, _2725));
        float _4646 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2734 = dot(vec3(cbLight._m0[_2696].xyz), vec3(_2723, _2724, _2725));
        float _4657 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2738 = _2715 * _2715;
        float _2742 = ((_2733 * _2733) * (_2738 + (-1.0))) + 1.0;
        float _2749 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2756 = 1.0 - _2715;
        float _2766 = (0.5 / (((_2373 * ((_2729 * _2756) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2373 * _2756) + _2715) * _2729))) * _2729;
        float _4668 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2768 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2738 / ((_2742 * _2742) * 3.141590118408203125));
        float _2769 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2685 = (((((_2749 * _2395) + _1132) * cbLight._m0[_2700].x) * _2768) * _2769) + _2571;
        _2687 = (((((_2749 * _2397) + _1134) * cbLight._m0[_2700].y) * _2768) * _2769) + _2573;
        _2689 = (((((_2749 * _2398) + _1135) * cbLight._m0[_2700].z) * _2768) * _2769) + _2575;
    }
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    if (_2203.y == 0u)
    {
        float _2844 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2845 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2844;
        float _2846 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2844;
        float _2847 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2844;
        uvec4 _2859 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2860 = _2859.x;
        uint _2871 = uint((float(_2859.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1070) / _2860))) + floor(float(uint(cbSceneParam._m0[85u].x * _1069) / _2860)));
        float _2881 = (log2(_2847 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2882 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        uint _2885 = uint(isnan(14.0) ? _2882 : (isnan(_2882) ? 14.0 : min(_2882, 14.0)));
        uvec4 _2890 = texelFetch(g_lightClusterGridBuffer, int(((_2885 << 2u) + (_2871 << 6u)) >> 2u));
        uint _2891 = _2890.x;
        uint _2892 = _2859.z;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        if (((((1u << ((_2892 >> 4u) & 15u)) + 4294967295u) & _2891) == 0u) || ((_2892 & 240u) == 0u))
        {
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
        }
        else
        {
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            uint _3164 = 0u;
            uint _3173;
            bool _3174;
            for (;;)
            {
                _3173 = texelFetch(g_lightClassification, int((((_2885 << 5u) + (_2871 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                _3174 = _3173 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3174)
                {
                    frontier_phi_61_pred = _3158;
                    frontier_phi_61_pred_1 = _3163;
                    frontier_phi_61_pred_2 = _3162;
                    frontier_phi_61_pred_3 = _3161;
                    frontier_phi_61_pred_4 = _3160;
                    frontier_phi_61_pred_5 = _3159;
                }
                else
                {
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    uint _3288;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3173;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    for (;;)
                    {
                        uint _3292 = uint(findLSB(_3288)) + (_3164 << 5u);
                        uint _3289 = (_3288 + 4294967295u) & _3288;
                        uint _3294 = _3292 * 48u;
                        vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3314 = (_3292 * 48u) + 4u;
                        vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 3u)).x));
                        uint _3333 = (_3292 * 48u) + 8u;
                        vec3 _3344 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x));
                        float _3348 = _3308.x - _2845;
                        float _3349 = _3308.y - _2846;
                        float _3350 = _3308.z - _2847;
                        float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                        float _3354 = inversesqrt(_3351);
                        float _3355 = _3354 * _3348;
                        float _3356 = _3354 * _3349;
                        float _3357 = _3354 * _3350;
                        float _3358 = dot(vec3(_1088, _1091, _1094), vec3(_3355, _3356, _3357));
                        float _3363 = 1.0 - (_3351 * _3308.w);
                        float _4694 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3364 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3365 = sqrt(_3351) * _3327.w;
                        float _3368 = 1.39999997615814208984375 / (_3365 + 1.39999997615814208984375);
                        float _3369 = _3368 * _3368;
                        float _3372 = ((1.0 - _3369) * _3358) + _3369;
                        float _3375 = _3365 * _3365;
                        float _3379 = ((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3364) / ((_3375 * 0.699999988079071044921875) + 1.0);
                        float _3383 = (-0.0) - _2845;
                        float _3384 = (-0.0) - _2846;
                        float _3385 = (-0.0) - _2847;
                        float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3400 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                        float _3401 = 1.0 - _1163;
                        float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                        float _3409 = _3408 * _3408;
                        float _3410 = _3409 * _3409;
                        float _3411 = _3390 + _3355;
                        float _3412 = _3391 + _3356;
                        float _3413 = _3392 + _3357;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3421 = dot(vec3(_1088, _1091, _1094), vec3(_3390, _3391, _3392));
                        float _4710 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3425 = dot(vec3(_1088, _1091, _1094), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                        float _4721 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                        float _3433 = _3368 * _3409;
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3358) + _3434;
                        float _4732 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3439 = 1.0 - _3409;
                        float _3449 = (0.5 / (((_3438 * ((_3424 * _3439) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3409) * _3424))) * _3438;
                        float _4743 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3460 = (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3432 * _3432) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125))) * _3364;
                        _3217 = (_3379 * _3327.x) + _3285;
                        _3218 = (_3379 * _3327.y) + _3286;
                        _3219 = (_3379 * _3327.z) + _3287;
                        _3214 = (_3460 * _3344.x) + _3282;
                        _3215 = (_3460 * _3344.y) + _3283;
                        _3216 = (_3460 * _3344.z) + _3284;
                        if (_3289 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3289;
                        }
                    }
                    frontier_phi_61_pred = _3214;
                    frontier_phi_61_pred_1 = _3219;
                    frontier_phi_61_pred_2 = _3218;
                    frontier_phi_61_pred_3 = _3217;
                    frontier_phi_61_pred_4 = _3216;
                    frontier_phi_61_pred_5 = _3215;
                }
                _3016 = frontier_phi_61_pred;
                _3026 = frontier_phi_61_pred_1;
                _3024 = frontier_phi_61_pred_2;
                _3022 = frontier_phi_61_pred_3;
                _3020 = frontier_phi_61_pred_4;
                _3018 = frontier_phi_61_pred_5;
                uint _3165 = _3164 + 1u;
                if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3158 = _3016;
                    _3159 = _3018;
                    _3160 = _3020;
                    _3161 = _3022;
                    _3162 = _3024;
                    _3163 = _3026;
                    _3164 = _3165;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
        }
        uvec4 _3029 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3030 = _3029.z;
        uint _3032 = (_3030 >> 8u) & 15u;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        if (((4294967295u << _3032) & _2891) == 0u)
        {
            _3126 = _3015;
            _3128 = _3017;
            _3130 = _3019;
            _3132 = _3021;
            _3134 = _3023;
            _3136 = _3025;
        }
        else
        {
            float _3151 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
            float _3152 = _3151 * _2845;
            float _3153 = _3151 * _2846;
            float _3154 = _3151 * _2847;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3032 < ((_3030 >> 12u) & 15u))
            {
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3265 = _3015;
                float _3266 = _3017;
                float _3267 = _3019;
                float _3268 = _3021;
                float _3269 = _3023;
                float _3270 = _3025;
                uint _3271 = _3032;
                uint _3280;
                bool _3281;
                for (;;)
                {
                    _3280 = texelFetch(g_lightClassification, int((((_2885 << 5u) + (_2871 << 9u)) + (_3271 << 2u)) >> 2u)).x;
                    _3281 = _3280 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3281)
                    {
                        frontier_phi_67_pred = _3268;
                        frontier_phi_67_pred_1 = _3269;
                        frontier_phi_67_pred_2 = _3270;
                        frontier_phi_67_pred_3 = _3267;
                        frontier_phi_67_pred_4 = _3266;
                        frontier_phi_67_pred_5 = _3265;
                    }
                    else
                    {
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3478 = _3265;
                        float _3479 = _3266;
                        float _3480 = _3267;
                        float _3481 = _3268;
                        float _3482 = _3269;
                        float _3483 = _3270;
                        uint _3484 = _3280;
                        uint _3485;
                        vec4 _3510;
                        float _3511;
                        vec4 _3526;
                        vec3 _3538;
                        vec4 _3553;
                        vec4 _3568;
                        float _3614;
                        bool _3615;
                        for (;;)
                        {
                            uint _3495 = ((_3271 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3484));
                            _3485 = (_3484 + 4294967295u) & _3484;
                            uint _3497 = _3495 * 40u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            _3511 = _3510.w;
                            uint _3513 = (_3495 * 40u) + 4u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3495 * 40u) + 8u;
                            _3538 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x));
                            uint _3540 = (_3495 * 40u) + 16u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3495 * 40u) + 20u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3495 * 40u) + 24u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3589 = (_3495 * 40u) + 28u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3614 = fma(_2847, _3602.z, fma(_2846, _3602.y, _3602.x * _2845)) + _3602.w;
                            _3615 = !((fma(_2847, _3583.z, fma(_2846, _3583.y, _3583.x * _2845)) + _3583.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3615)
                            {
                                float _3642 = _3510.x - _2845;
                                float _3643 = _3510.y - _2846;
                                float _3644 = _3510.z - _2847;
                                float _3645 = dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644));
                                float _3648 = inversesqrt(_3645);
                                float _3649 = _3648 * _3642;
                                float _3650 = _3648 * _3643;
                                float _3651 = _3648 * _3644;
                                float _3655 = 1.0 - (_3645 / (_3511 * _3511));
                                float _4754 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3660 = sqrt(_3645) * _3526.w;
                                float _3662 = 1.39999997615814208984375 / (_3660 + 1.39999997615814208984375);
                                float _3663 = _3662 * _3662;
                                float _3666 = ((1.0 - _3663) * dot(vec3(_3649, _3650, _3651), vec3(_1088, _1091, _1094))) + _3663;
                                float _3669 = _3660 * _3660;
                                float _3673 = (fma(_2847, _3553.z, fma(_2846, _3553.y, _3553.x * _2845)) + _3553.w) / _3614;
                                float _3674 = (fma(_2847, _3568.z, fma(_2846, _3568.y, _3568.x * _2845)) + _3568.w) / _3614;
                                float _3678 = 1.0 - dot(vec2(_3673, _3674), vec2(_3673, _3674));
                                float _4770 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3680 = _3679 * (((isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0))) * _3656) / ((_3669 * 0.699999988079071044921875) + 1.0));
                                float _3692 = exp2(log2(1.0 / ((_3669 * 3.5) + 5.0)) * 0.25);
                                float _3693 = 1.0 - _1163;
                                float _3700 = sqrt(1.0 - ((1.0 - (_3693 * _3693)) * (1.0 - (_3692 * _3692))));
                                float _3701 = _3700 * _3700;
                                float _3702 = _3701 * _3701;
                                float _3703 = _3649 - _3152;
                                float _3704 = _3650 - _3153;
                                float _3705 = _3651 - _3154;
                                float _3709 = inversesqrt(dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705)));
                                float _3713 = dot(vec3(_1088, _1091, _1094), vec3((-0.0) - _3152, (-0.0) - _3153, (-0.0) - _3154));
                                float _4781 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3717 = dot(vec3(_1088, _1091, _1094), vec3(_3709 * _3703, _3709 * _3704, _3709 * _3705));
                                float _4792 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3724 = ((_3720 * _3720) * (_3702 + (-1.0))) + 1.0;
                                float _3725 = _3662 * _3701;
                                float _3726 = _3725 * _3725;
                                float _3732 = ((1.0 - _3726) * dot(vec3(_1088, _1091, _1094), vec3(_3649, _3650, _3651))) + _3726;
                                float _4803 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3734 = 1.0 - _3701;
                                float _3744 = (0.5 / (((_3733 * ((_3716 * _3734) + _3701)) + 9.9999999392252902907785028219223e-09) + (((_3733 * _3734) + _3701) * _3716))) * _3733;
                                float _4814 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3754 = (_3679 * _3656) * (((_3702 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3724 * _3724) * ((_3669 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3754 * _3538.x;
                                frontier_phi_73_pred_1 = _3754 * _3538.y;
                                frontier_phi_73_pred_2 = _3680 * _3526.z;
                                frontier_phi_73_pred_3 = _3680 * _3526.y;
                                frontier_phi_73_pred_4 = _3680 * _3526.x;
                                frontier_phi_73_pred_5 = _3754 * _3538.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3758 = frontier_phi_73_pred;
                            _3759 = frontier_phi_73_pred_1;
                            _3763 = frontier_phi_73_pred_2;
                            _3762 = frontier_phi_73_pred_3;
                            _3761 = frontier_phi_73_pred_4;
                            _3760 = frontier_phi_73_pred_5;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            if (_3485 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3485;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3468;
                        frontier_phi_67_pred_1 = _3469;
                        frontier_phi_67_pred_2 = _3470;
                        frontier_phi_67_pred_3 = _3467;
                        frontier_phi_67_pred_4 = _3466;
                        frontier_phi_67_pred_5 = _3465;
                    }
                    _3133 = frontier_phi_67_pred;
                    _3135 = frontier_phi_67_pred_1;
                    _3137 = frontier_phi_67_pred_2;
                    _3131 = frontier_phi_67_pred_3;
                    _3129 = frontier_phi_67_pred_4;
                    _3127 = frontier_phi_67_pred_5;
                    uint _3272 = _3271 + 1u;
                    if (_3272 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3265 = _3127;
                        _3266 = _3129;
                        _3267 = _3131;
                        _3268 = _3133;
                        _3269 = _3135;
                        _3270 = _3137;
                        _3271 = _3272;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3135;
                frontier_phi_55_56_ladder_1 = _3137;
                frontier_phi_55_56_ladder_2 = _3133;
                frontier_phi_55_56_ladder_3 = _3131;
                frontier_phi_55_56_ladder_4 = _3129;
                frontier_phi_55_56_ladder_5 = _3127;
            }
            else
            {
                frontier_phi_55_56_ladder = _3023;
                frontier_phi_55_56_ladder_1 = _3025;
                frontier_phi_55_56_ladder_2 = _3021;
                frontier_phi_55_56_ladder_3 = _3019;
                frontier_phi_55_56_ladder_4 = _3017;
                frontier_phi_55_56_ladder_5 = _3015;
            }
            _3126 = frontier_phi_55_56_ladder_5;
            _3128 = frontier_phi_55_56_ladder_4;
            _3130 = frontier_phi_55_56_ladder_3;
            _3132 = frontier_phi_55_56_ladder_2;
            _3134 = frontier_phi_55_56_ladder;
            _3136 = frontier_phi_55_56_ladder_1;
        }
        float _3141 = isnan(1.0) ? _1147 : (isnan(_1147) ? 1.0 : min(_1147, 1.0));
        _2904 = (_3141 * _3132) + _2337;
        _2906 = (_3141 * _3134) + _2339;
        _2908 = (_3141 * _3136) + _2341;
        _2910 = ((_3126 * _1132) * _3141) + _2685;
        _2912 = ((_3128 * _1134) * _3141) + _2687;
        _2914 = ((_3130 * _1135) * _3141) + _2689;
    }
    else
    {
        _2904 = _2337;
        _2906 = _2339;
        _2908 = _2341;
        _2910 = _2685;
        _2912 = _2687;
        _2914 = _2689;
    }
    uint _2920 = _1108 + uint(cbMatDynParam._m0[0u].w);
    float _2926 = (isnan(cbMtdParam._m0[24u].y) ? _825 : (isnan(_825) ? cbMtdParam._m0[24u].y : min(_825, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4830 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _4841 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _4852 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _2949 = (((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2904 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1147))) + ((_2910 + ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _1956)) * cbPerFrame._m0[3u].x)) + ((_2926 * (((((_892.x - _889) * _871) + _889) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _817) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2920].x);
    float _2951 = (((_2926 * (((((_892.y - _890) * _871) + _890) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_806.y - _804) * _785) + _804)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2920].y) + ((_2912 + ((isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0))) * _1956)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2906 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1147)));
    float _2953 = (((_2926 * (((((_892.z - _891) * _871) + _891) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_806.z - _805) * _785) + _805)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2920].z) + ((_2914 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1956)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2908 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1147)));
    uint _2957 = _1107 + 6u;
    float _2965 = _1069 / cbSceneParam._m0[86u].x;
    float _2966 = _1070 / cbSceneParam._m0[86u].y;
    vec4 _2980 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, (log2((isnan(cbSceneParam._m0[77u].w) ? _1003 : (isnan(_1003) ? cbSceneParam._m0[77u].w : min(_1003, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2982 = _2980.x;
    float _2983 = _2980.y;
    float _2984 = _2980.z;
    float _2985 = _2980.w;
    float _3077;
    float _3079;
    float _3081;
    float _3083;
    if (_1003 > cbSceneParam._m0[78u].w)
    {
        float _3040 = isnan(_1003) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1003 : min(cbSceneParam._m0[80u].w, _1003));
        float _3041 = _3040 / _1003;
        float _3052 = _3041 * _1054;
        float _3053 = _1055 * _3041;
        float _3054 = (-0.0) - _3053;
        float _3055 = _3041 * _1056;
        float _3057 = (cbSceneParam._m0[77u].w * _3054) / _3040;
        float _3058 = _3057 + cbSceneParam._m0[79u].w;
        float _3059 = cbSceneParam._m0[79u].w - _3053;
        float _3065 = sqrt(((_3052 * _3052) + (_3053 * _3053)) + (_3055 * _3055));
        float _3068 = (1.0 - (cbSceneParam._m0[77u].w / _3040)) * _3065;
        float _3073 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3075 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3227;
        if (abs((_3054 - _3057) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3227 = ((((_3058 > 0.0) ? exp2(_3073 * _3058) : (2.0 - exp2(_3075 * _3058))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3068;
        }
        else
        {
            float _3187 = 1.0 / cbSceneParam._m0[80u].x;
            float _3188 = isnan(_3059) ? _3058 : (isnan(_3058) ? _3059 : max(_3058, _3059));
            float _3189 = isnan(_3059) ? _3058 : (isnan(_3058) ? _3059 : min(_3058, _3059));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            _3227 = ((abs(_3065 / _3054) * cbSceneParam._m0[80u].y) * ((((_3198 - _3199) * 2.0) - ((exp2(_3073 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0)))) - exp2(_3073 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))))) * _3187)) - ((exp2(_3075 * _3198) - exp2(_3075 * _3199)) * _3187))) + (_3068 * cbSceneParam._m0[80u].z);
        }
        vec4 _3229 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, 1.0), 0.0);
        float _3238 = exp2((_3227 * (-1.44269502162933349609375)) * (1.0 - _3229.w));
        float _3239 = log2(_3238);
        float _3255 = log2(_2985);
        _3077 = (exp2(_3255 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3239 * cbSceneParam._m0[78u].x)) * _3229.x) / cbSceneParam._m0[78u].x)) + _2982;
        _3079 = (exp2(_3255 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3239 * cbSceneParam._m0[78u].y)) * _3229.y) / cbSceneParam._m0[78u].y)) + _2983;
        _3081 = (exp2(_3255 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3239 * cbSceneParam._m0[78u].z)) * _3229.z) / cbSceneParam._m0[78u].z)) + _2984;
        _3083 = _3238 * _2985;
    }
    else
    {
        _3077 = _2982;
        _3079 = _2983;
        _3081 = _2984;
        _3083 = _2985;
    }
    float _3094 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3095 = _3094 == 3.0;
    float _3096 = log2(_3083);
    float _3103 = exp2(_3096 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0)));
    float _3104 = exp2(_3096 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0)));
    float _3105 = exp2(_3096 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0)));
    float _3114 = (_3094 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3114 * (_3095 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3077)));
    SV_Target.y = _3114 * (_3095 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3079)));
    SV_Target.z = _3114 * (_3095 ? _3105 : (_3105 + (cbSceneParam._m0[72u].w * _3081)));
    SV_Target.w = cbInstanceData._m0[_2957].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2957].w;
}


