#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1446;
float _3872;
float _3873;
float _3874;
float _3875;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _280 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _289 = log2(0.0);
    float _291 = exp2(_289 * cbMtdParam._m0[18u].w);
    float _292 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _293 = isnan(1.0) ? _292 : (isnan(_292) ? 1.0 : min(_292, 1.0));
    vec4 _309 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _313 = _309.z;
    float _318 = exp2(log2(_313 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(1.0) ? _319 : (isnan(_319) ? 1.0 : min(_319, 1.0));
    vec4 _332 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _357 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _368 = cbMtdParam._m0[9u].x * _357.x;
    float _369 = cbMtdParam._m0[9u].y * _357.y;
    float _370 = cbMtdParam._m0[9u].z * _357.z;
    float _377 = (((cbMtdParam._m0[10u].x * _332.x) - _368) * _320) + _368;
    float _378 = (((cbMtdParam._m0[10u].y * _332.y) - _369) * _320) + _369;
    float _379 = (((cbMtdParam._m0[10u].z * _332.z) - _370) * _320) + _370;
    vec4 _392 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _394 = _392.x;
    float _398 = exp2(log2(_394) * cbMtdParam._m0[19u].z);
    vec4 _411 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _431 = (((cbMtdParam._m0[12u].x * _411.x) - _377) * _398) + _377;
    float _432 = (((cbMtdParam._m0[12u].y * _411.y) - _378) * _398) + _378;
    float _433 = (((cbMtdParam._m0[12u].z * _411.z) - _379) * _398) + _379;
    vec4 _446 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _471 = (_280.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _446.x) - _431) * _293) + _431);
    float _473 = (_280.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _446.y) - _432) * _293) + _432);
    float _475 = (_280.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _446.z) - _433) * _293) + _433);
    float _477 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _486 = (_477 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _477))) * (cbMtdParam._m0[22u].y + 1.0);
    float _3904 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _494 = ((cbMtdParam._m0[14u].x - _471) * _487) + _471;
    float _495 = ((cbMtdParam._m0[14u].y - _473) * _487) + _473;
    float _496 = ((cbMtdParam._m0[14u].z - _475) * _487) + _475;
    float _498 = _394 - (_477 * _394);
    vec4 _514 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _532 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _538 = cbMtdParam._m0[18u].x + _532.z;
    float _541 = (((cbMtdParam._m0[18u].z + _514.z) - _538) * _320) + _538;
    vec4 _553 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _565 = (((_553.z - _541) + cbMtdParam._m0[24u].z) * _398) + _541;
    float _571 = ((((_313 * 2.0) * _565) - _565) * cbMtdParam._m0[20u].z) + _565;
    vec4 _584 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _593 = (((cbMtdParam._m0[19u].y + _584.z) - _571) * _293) + _571;
    vec4 _609 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _624 = ((cbMtdParam._m0[21u].w * _477) * ((_609.z * cbMtdParam._m0[21u].z) - _593)) + _593;
    float _635 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _659 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_635 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_635 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _663 = cbPerFrame._m0[22u].x * 2.0;
    float _664 = _663 * cbMtdParam._m0[25u].y;
    float _667 = (_659.x * 0.5) + (-0.25);
    float _670 = (_659.y * 0.5) + (-0.25);
    float _671 = _670 * cbMtdParam._m0[25u].x;
    float _673 = (-0.0) - (cbMtdParam._m0[25u].x * _667);
    float _675 = fract(_664);
    float _677 = fract(_664 + 0.5);
    float _688 = abs((_675 * 2.0) + (-1.0));
    vec4 _705 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_675 * _673) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_671 * _675) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _707 = _705.x;
    float _708 = _705.y;
    float _709 = _705.z;
    vec4 _710 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_677 * _673) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_671 * _677) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _721 = ((_710.x - _707) * _688) + _707;
    float _728 = exp2(log2(_721 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _729 = isnan(cbMtdParam._m0[24u].x) ? _728 : (isnan(_728) ? cbMtdParam._m0[24u].x : max(_728, cbMtdParam._m0[24u].x));
    float _750 = _663 * cbMtdParam._m0[25u].w;
    float _751 = _670 * cbMtdParam._m0[25u].z;
    float _753 = (-0.0) - (cbMtdParam._m0[25u].z * _667);
    float _754 = fract(_750);
    float _756 = fract(_750 + 0.5);
    float _767 = abs((_754 * 2.0) + (-1.0));
    vec4 _783 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_754 * _753) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_751 * _754) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _785 = _783.x;
    float _786 = _783.y;
    float _787 = _783.z;
    vec4 _788 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_756 * _753) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_751 * _756) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _817 = ((_514.x - _534) * _320) + _534;
    float _818 = ((_514.y - _535) * _320) + _535;
    float _823 = ((_553.x - _817) * _398) + _817;
    float _824 = ((_553.y - _818) * _398) + _818;
    float _833 = ((((_584.x - _823) * _293) + _823) * 2.0) + (-1.0);
    float _834 = ((((_584.y - _824) * _293) + _824) * 2.0) + (-1.0);
    float _835 = dot(vec2(_833, _834), vec2(_833, _834));
    float _3925 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _840 = sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))));
    float _850 = ((cbMtdParam._m0[20u].w * ((_309.x * 2.0) + (-1.0))) + _833) + ((((_609.x * 2.0) + (-1.0)) * _477) * cbMtdParam._m0[21u].y);
    float _851 = ((cbMtdParam._m0[20u].w * ((_309.y * 2.0) + (-1.0))) + _834) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_609.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _854 = fma(_840, _230 * NORMAL.x, fma(_851, _237 * TANGENT.x, (_223 * _215) * _850));
    float _857 = fma(_840, _230 * NORMAL.y, fma(_851, _237 * TANGENT.y, (_223 * _216) * _850));
    float _860 = fma(_840, _230 * NORMAL.z, fma(_851, _237 * TANGENT.z, (_223 * _217) * _850));
    float _864 = inversesqrt(dot(vec3(_854, _857, _860), vec3(_854, _857, _860)));
    float _865 = _864 * _854;
    float _866 = _864 * _857;
    float _867 = _864 * _860;
    float _3936 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _868 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3958 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3969 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3980 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _872 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _939 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _929);
    float _940 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _929);
    float _941 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _929);
    float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
    float _946 = _939 * _945;
    float _947 = _940 * _945;
    float _948 = _941 * _945;
    vec4 _953 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _955 = _953.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1127 = sqrt(((_939 * _939) + (_940 * _940)) + (_941 * _941));
        float _1133 = (cbMatDynParam._m0[5u].x * _1127) + cbMatDynParam._m0[5u].y;
        float _3991 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1138 = (cbMatDynParam._m0[5u].z * _1127) + cbMatDynParam._m0[5u].w;
        float _4002 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) - _1134)) + _1134) < ((_955 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _966 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _967 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _985 = fma(_867, cbSceneParam._m0[5u].z, fma(_866, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _865));
    float _988 = fma(_867, cbSceneParam._m0[6u].z, fma(_866, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _865));
    float _991 = fma(_867, cbSceneParam._m0[7u].z, fma(_866, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _865));
    uint _1004 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1005 = _1004 + 9u;
    uint _1006 = _1005 + uint(cbMatDynParam._m0[0u].w);
    float _1012 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * cbInstanceData._m0[_1006].x;
    float _1013 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * cbInstanceData._m0[_1006].y;
    float _1014 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * cbInstanceData._m0[_1006].z;
    float _4013 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1018 = 1.0 - _872;
    float _1019 = _1015 * _1018;
    float _1020 = _1016 * _1018;
    float _1021 = _1017 * _1018;
    float _1026 = (_1015 + (-0.039999999105930328369140625)) * _872;
    float _1027 = (_1016 + (-0.039999999105930328369140625)) * _872;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _872;
    float _1029 = _1026 + 0.039999999105930328369140625;
    float _1031 = _1027 + 0.039999999105930328369140625;
    float _1032 = _1028 + 0.039999999105930328369140625;
    vec4 _1041 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _966, cbSceneParam._m0[86u].y * _967));
    float _1044 = _1041.x * TEXCOORD_3.w;
    float _1045 = dot(vec3(_865, _866, _867), vec3(_946, _947, _948));
    float _1048 = _1045 * 2.0;
    float _1052 = (_1048 * _865) - _946;
    float _1053 = (_1048 * _866) - _947;
    float _1054 = (_1048 * _867) - _948;
    float _1058 = abs(dot(vec3(_946, _947, _948), vec3(_865, _866, _867)));
    float _4046 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1060 = sqrt(_868);
    float _1073 = exp2((_1060 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1060 * 3.0));
    float _1079 = (1.0 - _1073) * ((_1060 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1080 = _1073 * _1060;
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1445;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1171 = fma(_1116, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108));
        float _1175 = fma(_1116, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108));
        float _1179 = fma(_1116, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108));
        float _1203 = _1108 + _865;
        float _1204 = _1112 + _866;
        float _1205 = _1116 + _867;
        float _1215 = fma(_1205, cbModelParam._m0[26u].z, fma(_1204, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1203)) - _1171;
        float _1216 = fma(_1205, cbModelParam._m0[27u].z, fma(_1204, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1203)) - _1175;
        float _1217 = fma(_1205, cbModelParam._m0[28u].z, fma(_1204, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1203)) - _1179;
        float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
        float _1234 = ((_1221 * _1215) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1171 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1221 * _1216) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1175 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1221 * _1217) / cbModelParam._m0[34u].z) + ((((((_1179 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1273 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1239.x + (-0.5));
        float _1275 = _1273 * (_1239.y + (-0.5));
        float _1276 = _1273 * (_1239.z + (-0.5));
        float _1283 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1246.x + (-0.5));
        float _1285 = _1283 * (_1246.y + (-0.5));
        float _1286 = _1283 * (_1246.z + (-0.5));
        float _1293 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1253.x + (-0.5));
        float _1295 = _1293 * (_1253.y + (-0.5));
        float _1296 = _1293 * (_1253.z + (-0.5));
        float _1303 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1260.x + (-0.5));
        float _1305 = _1303 * (_1260.y + (-0.5));
        float _1306 = _1303 * (_1260.z + (-0.5));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = _1274 * 0.5;
        float _1311 = _1284 * 0.5;
        float _1312 = _1294 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1327 = (dot(vec3(_865, _866, _867), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1337 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4094 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1339 + 1.0))) + _1344) * _1307;
        float _1354 = _1275 * 0.5;
        float _1355 = _1285 * 0.5;
        float _1356 = _1295 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_865, _866, _867), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4127 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1381 + 1.0))) + _1386) * _1308;
        float _1396 = _1276 * 0.5;
        float _1397 = _1286 * 0.5;
        float _1398 = _1296 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_865, _866, _867), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4160 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1423 + 1.0))) + _1428) * _1309;
        _1445 = _1276;
        _1447 = _1275;
        _1448 = _1274;
        _1449 = _1286;
        _1450 = _1285;
        _1451 = _1284;
        _1452 = _1296;
        _1453 = _1295;
        _1454 = _1294;
        _1455 = _1309;
        _1456 = _1308;
        _1457 = _1307;
        _1458 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1459 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
    }
    else
    {
        _1445 = _1446;
        _1447 = _1446;
        _1448 = _1446;
        _1449 = _1446;
        _1450 = _1446;
        _1451 = _1446;
        _1452 = _1446;
        _1453 = _1446;
        _1454 = _1446;
        _1455 = _1446;
        _1456 = _1446;
        _1457 = _1446;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1489 = fma(_1116, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1108));
        float _1493 = fma(_1116, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1108));
        float _1497 = fma(_1116, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1108));
        float _1520 = _1108 + _865;
        float _1521 = _1112 + _866;
        float _1522 = _1116 + _867;
        float _1532 = fma(_1522, cbModelParam._m0[30u].z, fma(_1521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1520)) - _1489;
        float _1533 = fma(_1522, cbModelParam._m0[31u].z, fma(_1521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1520)) - _1493;
        float _1534 = fma(_1522, cbModelParam._m0[32u].z, fma(_1521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1520)) - _1497;
        float _1538 = inversesqrt(dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534)));
        float _1551 = ((_1538 * _1532) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1489 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1552 = ((_1538 * _1533) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1493 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1538 * _1534) / cbModelParam._m0[35u].z) + ((((((_1497 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1551, _1552, _1553), 0.0);
        float _1588 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1555.x + (-0.5));
        float _1590 = _1588 * (_1555.y + (-0.5));
        float _1591 = _1588 * (_1555.z + (-0.5));
        float _1598 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1562.x + (-0.5));
        float _1600 = _1598 * (_1562.y + (-0.5));
        float _1601 = _1598 * (_1562.z + (-0.5));
        float _1608 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1569.x + (-0.5));
        float _1610 = _1608 * (_1569.y + (-0.5));
        float _1611 = _1608 * (_1569.z + (-0.5));
        float _1618 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1576.x + (-0.5));
        float _1620 = _1618 * (_1576.y + (-0.5));
        float _1621 = _1618 * (_1576.z + (-0.5));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = _1589 * 0.5;
        float _1626 = _1599 * 0.5;
        float _1627 = _1609 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_865, _866, _867), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4223 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1652 + 1.0))) + _1657) * _1622;
        float _1667 = _1590 * 0.5;
        float _1668 = _1600 * 0.5;
        float _1669 = _1610 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_865, _866, _867), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4256 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1694 + 1.0))) + _1699) * _1623;
        float _1709 = _1591 * 0.5;
        float _1710 = _1601 * 0.5;
        float _1711 = _1611 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_865, _866, _867), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4289 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1736 + 1.0))) + _1741) * _1624;
        _1758 = _1591;
        _1759 = _1590;
        _1760 = _1589;
        _1761 = _1601;
        _1762 = _1600;
        _1763 = _1599;
        _1764 = _1611;
        _1765 = _1610;
        _1766 = _1609;
        _1767 = _1624;
        _1768 = _1623;
        _1769 = _1622;
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
    }
    else
    {
        _1758 = _1446;
        _1759 = _1446;
        _1760 = _1446;
        _1761 = _1446;
        _1762 = _1446;
        _1763 = _1446;
        _1764 = _1446;
        _1765 = _1446;
        _1766 = _1446;
        _1767 = _1446;
        _1768 = _1446;
        _1769 = _1446;
        _1770 = 0.0;
        _1771 = 0.0;
        _1772 = 0.0;
    }
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1458)) + _1458;
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1459)) + _1459;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1460)) + _1460;
    float _1805 = fma(_1784, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1782 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1784, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1782 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1784, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1782));
    float _1826 = _1052 * 0.5;
    float _1827 = _1053 * 0.5;
    float _1828 = _1054 * 0.5;
    float _1829 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1832 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1835 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1869;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1842 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1445, _1449, _1452, _1455));
        float _1846 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1447, _1450, _1453, _1456));
        float _1850 = dot(vec4(_1826, _1827, _1828, 1.0), vec4(_1448, _1451, _1454, _1457));
        float _1857 = dot(vec4(cbModelParam._m0[39u]), vec4(_1826, _1827, _1828, 1.0));
        _1869 = dot(vec3(isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1869 = 1.0;
    }
    float _1880;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1871 = dot(vec4(cbModelParam._m0[40u]), vec4(_1826, _1827, _1828, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1884 = (_1880 * cbModelParam._m0[1u].x) + (_1869 * (1.0 - cbModelParam._m0[1u].x));
    float _1894 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _868);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1894 : min(cbModelParam._m0[25u].z, _1894));
    float _1975;
    float _1977;
    float _1979;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1942 = fma(_1116, cbModelParam._m0[13u].z, fma(_1112, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108)) + cbModelParam._m0[13u].w;
        float _1946 = fma(_1116, cbModelParam._m0[14u].z, fma(_1112, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108)) + cbModelParam._m0[14u].w;
        float _1950 = fma(_1116, cbModelParam._m0[15u].z, fma(_1112, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108)) + cbModelParam._m0[15u].w;
        float _1953 = fma(_1054, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1052));
        float _1956 = fma(_1054, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1052));
        float _1959 = fma(_1054, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1052));
        float _1987;
        if (_1953 > 0.0)
        {
            _1987 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1987 = frontier_phi_17_15_ladder;
        }
        float _2211;
        if (_1956 > 0.0)
        {
            _2211 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2211 = frontier_phi_26_22_ladder;
        }
        float _2468;
        if (_1959 > 0.0)
        {
            _2468 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2468 = frontier_phi_38_33_ladder;
        }
        float _2470 = isnan(_2211) ? _1987 : (isnan(_1987) ? _2211 : min(_1987, _2211));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1953) + _1942;
        float _2476 = (_2471 * _1956) + _1946;
        float _2477 = (_2471 * _1959) + _1950;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2478;
        float _2482 = _2478 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 > _2482) || ((_2476 < _2480) || ((_2475 < _2480) || (_2475 > _2482))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2477, cbModelParam._m0[9u].z, fma(_2476, cbModelParam._m0[9u].y, _2475 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2477, cbModelParam._m0[10u].z, fma(_2476, cbModelParam._m0[10u].y, _2475 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2477, cbModelParam._m0[11u].z, fma(_2476, cbModelParam._m0[11u].y, _2475 * cbModelParam._m0[11u].x))), _1895);
            frontier_phi_16_38_ladder = _2605.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2605.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2605.x * cbModelParam._m0[1u].y;
        }
        _1975 = frontier_phi_16_38_ladder_2;
        _1977 = frontier_phi_16_38_ladder_1;
        _1979 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1963 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1052, _1053, _1054), _1895);
        _1975 = _1963.x * cbModelParam._m0[1u].y;
        _1977 = _1963.y * cbModelParam._m0[1u].y;
        _1979 = _1963.z * cbModelParam._m0[1u].y;
    }
    float _1983 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _868);
    float _1984 = isnan(_1983) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1983 : min(cbModelParam._m0[25u].w, _1983));
    float _2073;
    float _2075;
    float _2077;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2037 = fma(_1116, cbModelParam._m0[21u].z, fma(_1112, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108)) + cbModelParam._m0[21u].w;
        float _2041 = fma(_1116, cbModelParam._m0[22u].z, fma(_1112, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108)) + cbModelParam._m0[22u].w;
        float _2045 = fma(_1116, cbModelParam._m0[23u].z, fma(_1112, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108)) + cbModelParam._m0[23u].w;
        float _2048 = fma(_1054, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1052));
        float _2051 = fma(_1054, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1052));
        float _2054 = fma(_1054, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1052));
        float _2216;
        if (_2048 > 0.0)
        {
            _2216 = abs((1.0 - _2037) / _2048);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2037 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2216 = frontier_phi_28_24_ladder;
        }
        float _2495;
        if (_2051 > 0.0)
        {
            _2495 = abs((1.0 - _2041) / _2051);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2041 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2495 = frontier_phi_40_35_ladder;
        }
        float _2708;
        if (_2054 > 0.0)
        {
            _2708 = abs((1.0 - _2045) / _2054);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2045 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2708 = frontier_phi_49_46_ladder;
        }
        float _2710 = isnan(_2495) ? _2216 : (isnan(_2216) ? _2495 : min(_2216, _2495));
        float _2711 = isnan(_2708) ? _2710 : (isnan(_2710) ? _2708 : min(_2710, _2708));
        float _2715 = (_2711 * _2048) + _2037;
        float _2716 = (_2711 * _2051) + _2041;
        float _2717 = (_2711 * _2054) + _2045;
        float _2718 = _2711 * 9.9999997473787516355514526367188e-05;
        float _2719 = (-1.0) - _2718;
        float _2721 = _2718 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2717 > _2721) || ((_2717 < _2719) || ((_2716 > _2721) || ((_2716 < _2719) || ((_2715 < _2719) || (_2715 > _2721))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2717, cbModelParam._m0[17u].z, fma(_2716, cbModelParam._m0[17u].y, _2715 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2717, cbModelParam._m0[18u].z, fma(_2716, cbModelParam._m0[18u].y, _2715 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2717, cbModelParam._m0[19u].z, fma(_2716, cbModelParam._m0[19u].y, _2715 * cbModelParam._m0[19u].x))), _1984);
            frontier_phi_25_49_ladder = _2939.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2939.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2939.x * cbModelParam._m0[1u].z;
        }
        _2073 = frontier_phi_25_49_ladder_2;
        _2075 = frontier_phi_25_49_ladder_1;
        _2077 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2057 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1052, _1053, _1054), _1984);
        _2073 = _2057.x * cbModelParam._m0[1u].z;
        _2075 = _2057.y * cbModelParam._m0[1u].z;
        _2077 = _2057.z * cbModelParam._m0[1u].z;
    }
    float _2090 = (((_1079 * _1029) + _1080) * _1044) * ((cbModelParam._m0[1u].w * (_2073 - _1975)) + _1975);
    float _2092 = (((_1079 * _1031) + _1080) * _1044) * ((cbModelParam._m0[1u].w * (_2075 - _1977)) + _1977);
    float _2094 = (((_1079 * _1032) + _1080) * _1044) * ((cbModelParam._m0[1u].w * (_2077 - _1979)) + _1979);
    float _2097 = fma(_2094, cbSceneParam._m0[89u].z, fma(_2092, cbSceneParam._m0[89u].y, _2090 * cbSceneParam._m0[89u].x));
    float _2100 = fma(_2094, cbSceneParam._m0[90u].z, fma(_2092, cbSceneParam._m0[90u].y, _2090 * cbSceneParam._m0[90u].x));
    float _2103 = fma(_2094, cbSceneParam._m0[91u].z, fma(_2092, cbSceneParam._m0[91u].y, _2090 * cbSceneParam._m0[91u].x));
    vec4 _2111 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_966, _967));
    float _2113 = _2111.w;
    float _2125 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2113);
    float _2126 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2113);
    float _2127 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2113);
    uvec4 _2131 = floatBitsToUint(cbInstanceData._m0[_1004 + 5u]);
    uint _2133 = _2131.x * 14u;
    uint _2134 = _2133 + 13u;
    float _2141 = _1044 + (-1.0);
    float _2146 = (cbLight._m0[_2134].x * _2141) + 1.0;
    float _2147 = (cbLight._m0[_2134].y * _2141) + 1.0;
    float _2148 = (cbLight._m0[_2134].z * _2141) + 1.0;
    float _2149 = (cbLight._m0[_2134].w * _2141) + 1.0;
    uint _2150 = _2133 + 5u;
    float _2156 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
    uint _2160 = _2133 + 4u;
    float _2170 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
    uint _2174 = _2133 | 1u;
    float _2185 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_865, _866, _867));
    float _2188 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_865, _866, _867));
    float _4425 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _4436 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2193 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * 0.3183098733425140380859375;
    float _2195 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * 0.3183098733425140380859375;
    float _2202 = ((cbLight._m0[_2150].x * _2156) * _2195) + (((cbLight._m0[_2160].x * _2125) * _2170) * _2193);
    float _2203 = ((_2156 * cbLight._m0[_2150].y) * _2195) + (((cbLight._m0[_2160].y * _2126) * _2170) * _2193);
    float _2204 = ((_2156 * cbLight._m0[_2150].z) * _2195) + (((cbLight._m0[_2160].z * _2127) * _2170) * _2193);
    uvec4 _2208 = floatBitsToUint(cbLight._m0[_2133 + 12u]);
    bool _2210 = _2208.x == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2210)
    {
        _2221 = _2202;
        _2223 = _2203;
        _2225 = _2204;
    }
    else
    {
        uint _2229 = _2133 + 6u;
        float _2245 = (dot(vec3(cbLight._m0[_2133 + 2u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4447 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2248 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2221 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2202;
        _2223 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2203;
        _2225 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2204;
    }
    bool _2228 = _2208.y == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2228)
    {
        _2266 = _2221;
        _2268 = _2223;
        _2270 = _2225;
    }
    else
    {
        uint _2439 = _2133 + 7u;
        float _2455 = (dot(vec3(cbLight._m0[_2133 + 3u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2456 = _2455 * _2455;
        float _4463 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2457 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2458 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2266 = (((cbLight._m0[_2439].x * 0.3183098733425140380859375) * _2457) * _2458) + _2221;
        _2268 = (((cbLight._m0[_2439].y * 0.3183098733425140380859375) * _2457) * _2458) + _2223;
        _2270 = (((cbLight._m0[_2439].z * 0.3183098733425140380859375) * _2457) * _2458) + _2225;
    }
    uint _2273 = _2133 + 8u;
    float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _868) * 0.949999988079071044921875);
    float _2287 = _2286 * _2286;
    float _2288 = cbLight._m0[_2133].x + _946;
    float _2289 = cbLight._m0[_2133].y + _947;
    float _2290 = cbLight._m0[_2133].z + _948;
    float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
    float _2295 = _2294 * _2288;
    float _2296 = _2294 * _2289;
    float _2297 = _2294 * _2290;
    float _2298 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2133].xyz));
    float _4479 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _4490 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _2302 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2303 = dot(vec3(_865, _866, _867), vec3(_2295, _2296, _2297));
    float _4501 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2307 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2295, _2296, _2297));
    float _4512 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2311 = _2287 * _2287;
    float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
    float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
    float _2324 = 0.959999978542327880859375 - _1026;
    float _2326 = 0.959999978542327880859375 - _1027;
    float _2327 = 0.959999978542327880859375 - _1028;
    float _2334 = 1.0 - _2287;
    float _2345 = (0.5 / (((_2302 * ((_2301 * _2334) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2334) + _2287) * _2301))) * _2301;
    float _4523 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
    uint _2361 = _2133 + 9u;
    float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _868) * 0.949999988079071044921875);
    float _2373 = _2372 * _2372;
    float _2374 = cbLight._m0[_2174].x + _946;
    float _2375 = cbLight._m0[_2174].y + _947;
    float _2376 = cbLight._m0[_2174].z + _948;
    float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
    float _2381 = _2380 * _2374;
    float _2382 = _2380 * _2375;
    float _2383 = _2380 * _2376;
    float _2384 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2174].xyz));
    float _4534 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2388 = dot(vec3(_865, _866, _867), vec3(_2381, _2382, _2383));
    float _4545 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2392 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2381, _2382, _2383));
    float _4556 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2396 = _2373 * _2373;
    float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
    float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0);
    float _2414 = 1.0 - _2373;
    float _2424 = (0.5 / (((_2302 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2414) + _2373) * _2387))) * _2387;
    float _4567 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
    float _2436 = (((((_2407 * _2324) + _1029) * cbLight._m0[_2361].x) * _2426) * _2156) + ((((cbLight._m0[_2273].x * _2125) * ((_2323 * _2324) + _1029)) * _2347) * _2170);
    float _2437 = (((((_2407 * _2326) + _1031) * cbLight._m0[_2361].y) * _2426) * _2156) + ((((cbLight._m0[_2273].y * _2126) * ((_2323 * _2326) + _1031)) * _2347) * _2170);
    float _2438 = (((((_2407 * _2327) + _1032) * cbLight._m0[_2361].z) * _2426) * _2156) + ((((cbLight._m0[_2273].z * _2127) * ((_2323 * _2327) + _1032)) * _2347) * _2170);
    float _2500;
    float _2502;
    float _2504;
    if (_2210)
    {
        _2500 = _2436;
        _2502 = _2437;
        _2504 = _2438;
    }
    else
    {
        uint _2506 = _2133 + 2u;
        uint _2510 = _2133 + 10u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _868) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _946;
        float _2527 = cbLight._m0[_2506].y + _947;
        float _2528 = cbLight._m0[_2506].z + _948;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2506].xyz));
        float _4578 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2540 = dot(vec3(_865, _866, _867), vec3(_2533, _2534, _2535));
        float _4589 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4600 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0);
        float _2566 = 1.0 - _2525;
        float _2576 = (0.5 / (((_2302 * ((_2539 * _2566) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2566) + _2525) * _2539))) * _2539;
        float _4611 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2500 = (((((_2559 * _2324) + _1029) * cbLight._m0[_2510].x) * _2578) * _2579) + _2436;
        _2502 = (((((_2559 * _2326) + _1031) * cbLight._m0[_2510].y) * _2578) * _2579) + _2437;
        _2504 = (((((_2559 * _2327) + _1032) * cbLight._m0[_2510].z) * _2578) * _2579) + _2438;
    }
    float _2614;
    float _2616;
    float _2618;
    if (_2228)
    {
        _2614 = _2500;
        _2616 = _2502;
        _2618 = _2504;
    }
    else
    {
        uint _2625 = _2133 + 3u;
        uint _2629 = _2133 + 11u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _868) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _946;
        float _2646 = cbLight._m0[_2625].y + _947;
        float _2647 = cbLight._m0[_2625].z + _948;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2625].xyz));
        float _4627 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2659 = dot(vec3(_865, _866, _867), vec3(_2652, _2653, _2654));
        float _4638 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4649 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
        float _2685 = 1.0 - _2644;
        float _2695 = (0.5 / (((_2302 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2685) + _2644) * _2658))) * _2658;
        float _4660 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2614 = (((((_2678 * _2324) + _1029) * cbLight._m0[_2629].x) * _2697) * _2698) + _2500;
        _2616 = (((((_2678 * _2326) + _1031) * cbLight._m0[_2629].y) * _2697) * _2698) + _2502;
        _2618 = (((((_2678 * _2327) + _1032) * cbLight._m0[_2629].z) * _2697) * _2698) + _2504;
    }
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_2131.y == 0u)
    {
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2773;
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2773;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2773;
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.x;
        uint _2800 = uint((float(_2788.y) * floor(float(uint(cbSceneParam._m0[85u].y * _967) / _2789))) + floor(float(uint(cbSceneParam._m0[85u].x * _966) / _2789)));
        float _2810 = (log2(_2776 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2811 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        uint _2814 = uint(isnan(14.0) ? _2811 : (isnan(_2811) ? 14.0 : min(_2811, 14.0)));
        uvec4 _2819 = texelFetch(g_lightClusterGridBuffer, int(((_2814 << 2u) + (_2800 << 6u)) >> 2u));
        uint _2820 = _2819.x;
        uint _2821 = _2788.z;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((((1u << ((_2821 >> 4u) & 15u)) + 4294967295u) & _2820) == 0u) || ((_2821 & 240u) == 0u))
        {
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
        }
        else
        {
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            uint _3101 = 0u;
            uint _3110;
            bool _3111;
            for (;;)
            {
                _3110 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3101 << 2u)) >> 2u)).x;
                _3111 = _3110 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3111)
                {
                    frontier_phi_66_pred = _3095;
                    frontier_phi_66_pred_1 = _3100;
                    frontier_phi_66_pred_2 = _3099;
                    frontier_phi_66_pred_3 = _3098;
                    frontier_phi_66_pred_4 = _3097;
                    frontier_phi_66_pred_5 = _3096;
                }
                else
                {
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    uint _3246;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3110;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    for (;;)
                    {
                        uint _3250 = uint(findLSB(_3246)) + (_3101 << 5u);
                        uint _3247 = (_3246 + 4294967295u) & _3246;
                        uint _3252 = _3250 * 48u;
                        vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3272 = (_3250 * 48u) + 4u;
                        vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 3u)).x));
                        uint _3291 = (_3250 * 48u) + 8u;
                        vec3 _3302 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x));
                        float _3306 = _3266.x - _2774;
                        float _3307 = _3266.y - _2775;
                        float _3308 = _3266.z - _2776;
                        float _3309 = dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308));
                        float _3312 = inversesqrt(_3309);
                        float _3313 = _3312 * _3306;
                        float _3314 = _3312 * _3307;
                        float _3315 = _3312 * _3308;
                        float _3316 = dot(vec3(_985, _988, _991), vec3(_3313, _3314, _3315));
                        float _3321 = 1.0 - (_3309 * _3266.w);
                        float _4686 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3323 = sqrt(_3309) * _3285.w;
                        float _3326 = 1.39999997615814208984375 / (_3323 + 1.39999997615814208984375);
                        float _3327 = _3326 * _3326;
                        float _3330 = ((1.0 - _3327) * _3316) + _3327;
                        float _3333 = _3323 * _3323;
                        float _3337 = ((isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))) * _3322) / ((_3333 * 0.699999988079071044921875) + 1.0);
                        float _3341 = (-0.0) - _2774;
                        float _3342 = (-0.0) - _2775;
                        float _3343 = (-0.0) - _2776;
                        float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                        float _3348 = _3347 * _3341;
                        float _3349 = _3347 * _3342;
                        float _3350 = _3347 * _3343;
                        float _3358 = exp2(log2(1.0 / ((_3333 * 3.5) + 5.0)) * 0.25);
                        float _3359 = 1.0 - _1060;
                        float _3366 = sqrt(1.0 - ((1.0 - (_3359 * _3359)) * (1.0 - (_3358 * _3358))));
                        float _3367 = _3366 * _3366;
                        float _3368 = _3367 * _3367;
                        float _3369 = _3348 + _3313;
                        float _3370 = _3349 + _3314;
                        float _3371 = _3350 + _3315;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3379 = dot(vec3(_985, _988, _991), vec3(_3348, _3349, _3350));
                        float _4702 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3382 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3383 = dot(vec3(_985, _988, _991), vec3(_3375 * _3369, _3375 * _3370, _3375 * _3371));
                        float _4713 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3386 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3390 = ((_3386 * _3386) * (_3368 + (-1.0))) + 1.0;
                        float _3391 = _3326 * _3367;
                        float _3392 = _3391 * _3391;
                        float _3395 = ((1.0 - _3392) * _3316) + _3392;
                        float _4724 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3396 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                        float _3397 = 1.0 - _3367;
                        float _3407 = (0.5 / (((_3396 * ((_3382 * _3397) + _3367)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3367) * _3382))) * _3396;
                        float _4735 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3418 = (((_3368 * 3.1415927410125732421875) * (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) / ((_3390 * _3390) * ((_3333 * 2.1991131305694580078125) + 3.141590118408203125))) * _3322;
                        _3170 = (_3337 * _3285.x) + _3243;
                        _3171 = (_3337 * _3285.y) + _3244;
                        _3172 = (_3337 * _3285.z) + _3245;
                        _3167 = (_3418 * _3302.x) + _3240;
                        _3168 = (_3418 * _3302.y) + _3241;
                        _3169 = (_3418 * _3302.z) + _3242;
                        if (_3247 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3247;
                        }
                    }
                    frontier_phi_66_pred = _3167;
                    frontier_phi_66_pred_1 = _3172;
                    frontier_phi_66_pred_2 = _3171;
                    frontier_phi_66_pred_3 = _3170;
                    frontier_phi_66_pred_4 = _3169;
                    frontier_phi_66_pred_5 = _3168;
                }
                _2945 = frontier_phi_66_pred;
                _2955 = frontier_phi_66_pred_1;
                _2953 = frontier_phi_66_pred_2;
                _2951 = frontier_phi_66_pred_3;
                _2949 = frontier_phi_66_pred_4;
                _2947 = frontier_phi_66_pred_5;
                uint _3102 = _3101 + 1u;
                if (_3102 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3095 = _2945;
                    _3096 = _2947;
                    _3097 = _2949;
                    _3098 = _2951;
                    _3099 = _2953;
                    _3100 = _2955;
                    _3101 = _3102;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
        }
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.z;
        uint _2961 = (_2959 >> 8u) & 15u;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        if (((4294967295u << _2961) & _2820) == 0u)
        {
            _3063 = _2944;
            _3065 = _2946;
            _3067 = _2948;
            _3069 = _2950;
            _3071 = _2952;
            _3073 = _2954;
        }
        else
        {
            float _3088 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
            float _3089 = _3088 * _2774;
            float _3090 = _3088 * _2775;
            float _3091 = _3088 * _2776;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2961 < ((_2959 >> 12u) & 15u))
            {
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3223 = _2944;
                float _3224 = _2946;
                float _3225 = _2948;
                float _3226 = _2950;
                float _3227 = _2952;
                float _3228 = _2954;
                uint _3229 = _2961;
                uint _3238;
                bool _3239;
                for (;;)
                {
                    _3238 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3229 << 2u)) >> 2u)).x;
                    _3239 = _3238 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3239)
                    {
                        frontier_phi_77_pred = _3228;
                        frontier_phi_77_pred_1 = _3227;
                        frontier_phi_77_pred_2 = _3226;
                        frontier_phi_77_pred_3 = _3225;
                        frontier_phi_77_pred_4 = _3224;
                        frontier_phi_77_pred_5 = _3223;
                    }
                    else
                    {
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3445 = _3223;
                        float _3446 = _3224;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        uint _3451 = _3238;
                        uint _3452;
                        vec4 _3477;
                        float _3478;
                        vec4 _3493;
                        vec3 _3505;
                        vec4 _3520;
                        vec4 _3535;
                        float _3581;
                        bool _3582;
                        for (;;)
                        {
                            uint _3462 = ((_3229 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3451));
                            _3452 = (_3451 + 4294967295u) & _3451;
                            uint _3464 = _3462 * 40u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3478 = _3477.w;
                            uint _3480 = (_3462 * 40u) + 4u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3462 * 40u) + 8u;
                            _3505 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x));
                            uint _3507 = (_3462 * 40u) + 16u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3462 * 40u) + 20u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3462 * 40u) + 24u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3556 = (_3462 * 40u) + 28u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3581 = fma(_2776, _3569.z, fma(_2775, _3569.y, _3569.x * _2774)) + _3569.w;
                            _3582 = !((fma(_2776, _3550.z, fma(_2775, _3550.y, _3550.x * _2774)) + _3550.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3582)
                            {
                                float _3609 = _3477.x - _2774;
                                float _3610 = _3477.y - _2775;
                                float _3611 = _3477.z - _2776;
                                float _3612 = dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611));
                                float _3615 = inversesqrt(_3612);
                                float _3616 = _3615 * _3609;
                                float _3617 = _3615 * _3610;
                                float _3618 = _3615 * _3611;
                                float _3622 = 1.0 - (_3612 / (_3478 * _3478));
                                float _4746 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3627 = sqrt(_3612) * _3493.w;
                                float _3629 = 1.39999997615814208984375 / (_3627 + 1.39999997615814208984375);
                                float _3630 = _3629 * _3629;
                                float _3633 = ((1.0 - _3630) * dot(vec3(_3616, _3617, _3618), vec3(_985, _988, _991))) + _3630;
                                float _3636 = _3627 * _3627;
                                float _3640 = (fma(_2776, _3520.z, fma(_2775, _3520.y, _3520.x * _2774)) + _3520.w) / _3581;
                                float _3641 = (fma(_2776, _3535.z, fma(_2775, _3535.y, _3535.x * _2774)) + _3535.w) / _3581;
                                float _3645 = 1.0 - dot(vec2(_3640, _3641), vec2(_3640, _3641));
                                float _4762 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3647 = _3646 * (((isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0))) * _3623) / ((_3636 * 0.699999988079071044921875) + 1.0));
                                float _3659 = exp2(log2(1.0 / ((_3636 * 3.5) + 5.0)) * 0.25);
                                float _3660 = 1.0 - _1060;
                                float _3667 = sqrt(1.0 - ((1.0 - (_3660 * _3660)) * (1.0 - (_3659 * _3659))));
                                float _3668 = _3667 * _3667;
                                float _3669 = _3668 * _3668;
                                float _3670 = _3616 - _3089;
                                float _3671 = _3617 - _3090;
                                float _3672 = _3618 - _3091;
                                float _3676 = inversesqrt(dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672)));
                                float _3680 = dot(vec3(_985, _988, _991), vec3((-0.0) - _3089, (-0.0) - _3090, (-0.0) - _3091));
                                float _4773 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3684 = dot(vec3(_985, _988, _991), vec3(_3676 * _3670, _3676 * _3671, _3676 * _3672));
                                float _4784 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3691 = ((_3687 * _3687) * (_3669 + (-1.0))) + 1.0;
                                float _3692 = _3629 * _3668;
                                float _3693 = _3692 * _3692;
                                float _3699 = ((1.0 - _3693) * dot(vec3(_985, _988, _991), vec3(_3616, _3617, _3618))) + _3693;
                                float _4795 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3701 = 1.0 - _3668;
                                float _3711 = (0.5 / (((_3700 * ((_3683 * _3701) + _3668)) + 9.9999999392252902907785028219223e-09) + (((_3700 * _3701) + _3668) * _3683))) * _3700;
                                float _4806 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3721 = (_3646 * _3623) * (((_3669 * 3.1415927410125732421875) * (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) / ((_3691 * _3691) * ((_3636 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3647 * _3493.y;
                                frontier_phi_83_pred_1 = _3647 * _3493.x;
                                frontier_phi_83_pred_2 = _3721 * _3505.z;
                                frontier_phi_83_pred_3 = _3721 * _3505.y;
                                frontier_phi_83_pred_4 = _3721 * _3505.x;
                                frontier_phi_83_pred_5 = _3647 * _3493.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3729 = frontier_phi_83_pred;
                            _3728 = frontier_phi_83_pred_1;
                            _3727 = frontier_phi_83_pred_2;
                            _3726 = frontier_phi_83_pred_3;
                            _3725 = frontier_phi_83_pred_4;
                            _3730 = frontier_phi_83_pred_5;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            if (_3452 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3452;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3437;
                        frontier_phi_77_pred_1 = _3436;
                        frontier_phi_77_pred_2 = _3435;
                        frontier_phi_77_pred_3 = _3434;
                        frontier_phi_77_pred_4 = _3433;
                        frontier_phi_77_pred_5 = _3432;
                    }
                    _3074 = frontier_phi_77_pred;
                    _3072 = frontier_phi_77_pred_1;
                    _3070 = frontier_phi_77_pred_2;
                    _3068 = frontier_phi_77_pred_3;
                    _3066 = frontier_phi_77_pred_4;
                    _3064 = frontier_phi_77_pred_5;
                    uint _3230 = _3229 + 1u;
                    if (_3230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3223 = _3064;
                        _3224 = _3066;
                        _3225 = _3068;
                        _3226 = _3070;
                        _3227 = _3072;
                        _3228 = _3074;
                        _3229 = _3230;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3068;
                frontier_phi_58_59_ladder_1 = _3074;
                frontier_phi_58_59_ladder_2 = _3072;
                frontier_phi_58_59_ladder_3 = _3070;
                frontier_phi_58_59_ladder_4 = _3066;
                frontier_phi_58_59_ladder_5 = _3064;
            }
            else
            {
                frontier_phi_58_59_ladder = _2948;
                frontier_phi_58_59_ladder_1 = _2954;
                frontier_phi_58_59_ladder_2 = _2952;
                frontier_phi_58_59_ladder_3 = _2950;
                frontier_phi_58_59_ladder_4 = _2946;
                frontier_phi_58_59_ladder_5 = _2944;
            }
            _3063 = frontier_phi_58_59_ladder_5;
            _3065 = frontier_phi_58_59_ladder_4;
            _3067 = frontier_phi_58_59_ladder;
            _3069 = frontier_phi_58_59_ladder_3;
            _3071 = frontier_phi_58_59_ladder_2;
            _3073 = frontier_phi_58_59_ladder_1;
        }
        float _3078 = isnan(1.0) ? _1044 : (isnan(_1044) ? 1.0 : min(_1044, 1.0));
        _2833 = (_3078 * _3069) + _2266;
        _2835 = (_3078 * _3071) + _2268;
        _2837 = (_3078 * _3073) + _2270;
        _2839 = ((_3063 * _1029) * _3078) + _2614;
        _2841 = ((_3065 * _1031) * _3078) + _2616;
        _2843 = ((_3067 * _1032) * _3078) + _2618;
    }
    else
    {
        _2833 = _2266;
        _2835 = _2268;
        _2837 = _2270;
        _2839 = _2614;
        _2841 = _2616;
        _2843 = _2618;
    }
    uint _2849 = _1005 + uint(cbMatDynParam._m0[0u].w);
    float _2855 = (isnan(cbMtdParam._m0[24u].y) ? _729 : (isnan(_729) ? cbMtdParam._m0[24u].y : min(_729, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4822 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _4833 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4844 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2878 = (((isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2833 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1044))) + ((_2839 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1884)) * cbPerFrame._m0[3u].x)) + ((_2855 * (((((_788.x - _785) * _767) + _785) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _721) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2849].x);
    float _2880 = (((_2855 * (((((_788.y - _786) * _767) + _786) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_710.y - _708) * _688) + _708)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2849].y) + ((_2841 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1884)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2835 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1044)));
    float _2882 = (((_2855 * (((((_788.z - _787) * _767) + _787) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_710.z - _709) * _688) + _709)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2849].z) + ((_2843 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1884)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2837 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1044)));
    float _2883 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
    float _2884 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
    float _2885 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
    uint _2886 = _1004 + 6u;
    float _2894 = _966 / cbSceneParam._m0[86u].x;
    float _2895 = _967 / cbSceneParam._m0[86u].y;
    vec4 _2909 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2911 = _2909.x;
    float _2912 = _2909.y;
    float _2913 = _2909.z;
    float _2914 = _2909.w;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _2969 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _2970 = _2969 / _888;
        float _2981 = _2970 * _939;
        float _2982 = _940 * _2970;
        float _2983 = (-0.0) - _2982;
        float _2984 = _2970 * _941;
        float _2986 = (cbSceneParam._m0[77u].w * _2983) / _2969;
        float _2987 = _2986 + cbSceneParam._m0[79u].w;
        float _2988 = cbSceneParam._m0[79u].w - _2982;
        float _2994 = sqrt(((_2981 * _2981) + (_2982 * _2982)) + (_2984 * _2984));
        float _2997 = (1.0 - (cbSceneParam._m0[77u].w / _2969)) * _2994;
        float _3002 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3004 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3180;
        if (abs((_2983 - _2986) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3180 = ((((_2987 > 0.0) ? exp2(_3002 * _2987) : (2.0 - exp2(_3004 * _2987))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2997;
        }
        else
        {
            float _3124 = 1.0 / cbSceneParam._m0[80u].x;
            float _3125 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : max(_2987, _2988));
            float _3126 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : min(_2987, _2988));
            float _3135 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : min(_3125, 0.0));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            _3180 = ((abs(_2994 / _2983) * cbSceneParam._m0[80u].y) * ((((_3135 - _3136) * 2.0) - ((exp2(_3002 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0)))) - exp2(_3002 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))))) * _3124)) - ((exp2(_3004 * _3135) - exp2(_3004 * _3136)) * _3124))) + (_2997 * cbSceneParam._m0[80u].z);
        }
        vec4 _3182 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, 1.0), 0.0);
        float _3191 = exp2((_3180 * (-1.44269502162933349609375)) * (1.0 - _3182.w));
        float _3192 = log2(_3191);
        float _3208 = log2(_2914);
        _3006 = (exp2(_3208 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3192 * cbSceneParam._m0[78u].x)) * _3182.x) / cbSceneParam._m0[78u].x)) + _2911;
        _3008 = (exp2(_3208 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3192 * cbSceneParam._m0[78u].y)) * _3182.y) / cbSceneParam._m0[78u].y)) + _2912;
        _3010 = (exp2(_3208 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3192 * cbSceneParam._m0[78u].z)) * _3182.z) / cbSceneParam._m0[78u].z)) + _2913;
        _3012 = _3191 * _2914;
    }
    else
    {
        _3006 = _2911;
        _3008 = _2912;
        _3010 = _2913;
        _3012 = _2914;
    }
    bool _3218;
    vec4 _3021;
    vec4 _3043;
    float _3045;
    float _3049;
    float _3050;
    float _3051;
    float _3052;
    bool _3062;
    for (;;)
    {
        _3021 = cbMatDynParam._m0[0u];
        float _3023 = roundEven(_3021.y);
        bool _3024 = _3023 == 3.0;
        float _3025 = log2(_3012);
        float _3032 = exp2(_3025 * cbSceneParam._m0[78u].x) * _2883;
        float _3033 = exp2(_3025 * cbSceneParam._m0[78u].y) * _2884;
        float _3034 = exp2(_3025 * cbSceneParam._m0[78u].z) * _2885;
        float _3041 = _955 + (-0.5);
        _3043 = cbMtdParam._m0[1u];
        _3045 = _3043.y * _3041;
        float _3048 = (_3023 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3049 = _3048 * (_3024 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3006)));
        _3050 = _3048 * (_3024 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3008)));
        _3051 = _3048 * (_3024 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3010)));
        _3052 = _3041 * 0.999000012874603271484375;
        _3062 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3062)
        {
            if ((cbInstanceData._m0[_1004 + 7u].x + _3052) < 0.5)
            {
                _3218 = true;
                break;
            }
        }
        uint _3159 = _1005 + uint(_3021.w);
        if ((cbInstanceData._m0[_3159].w < 1.0) && ((cbInstanceData._m0[_3159].w + _3052) < 0.5))
        {
            _3218 = true;
            break;
        }
        if ((_3045 + 1.0) < _3043.x)
        {
            _3218 = true;
            break;
        }
        _3218 = false;
        break;
    }
    float _3423;
    if (_3218)
    {
        discard_state = true;
        _3423 = 0.0;
    }
    else
    {
        _3423 = cbInstanceData._m0[_2886].w;
    }
    SV_Target.x = _3049;
    SV_Target.y = _3050;
    SV_Target.z = _3051;
    SV_Target.w = _3423;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2886].w;
    discard_exit();
}


