#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1447;
float _3849;
float _3850;
float _3851;
float _3852;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _281 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _294 = exp2(log2(_281.w * cbMtdParam._m0[26u].x) * cbMtdParam._m0[18u].w);
    float _295 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _296 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    vec4 _312 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _316 = _312.z;
    float _321 = exp2(log2(_316 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    vec4 _335 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _360 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _371 = cbMtdParam._m0[9u].x * _360.x;
    float _372 = cbMtdParam._m0[9u].y * _360.y;
    float _373 = cbMtdParam._m0[9u].z * _360.z;
    float _380 = (((cbMtdParam._m0[10u].x * _335.x) - _371) * _323) + _371;
    float _381 = (((cbMtdParam._m0[10u].y * _335.y) - _372) * _323) + _372;
    float _382 = (((cbMtdParam._m0[10u].z * _335.z) - _373) * _323) + _373;
    vec4 _395 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _397 = _395.x;
    float _401 = exp2(log2(_397) * cbMtdParam._m0[19u].z);
    vec4 _414 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _434 = (((cbMtdParam._m0[12u].x * _414.x) - _380) * _401) + _380;
    float _435 = (((cbMtdParam._m0[12u].y * _414.y) - _381) * _401) + _381;
    float _436 = (((cbMtdParam._m0[12u].z * _414.z) - _382) * _401) + _382;
    vec4 _449 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _474 = (_281.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _449.x) - _434) * _296) + _434);
    float _476 = (_281.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _449.y) - _435) * _296) + _435);
    float _478 = (_281.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _449.z) - _436) * _296) + _436);
    float _480 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _489 = (_480 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _480))) * (cbMtdParam._m0[22u].y + 1.0);
    float _3881 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _497 = ((cbMtdParam._m0[14u].x - _474) * _490) + _474;
    float _498 = ((cbMtdParam._m0[14u].y - _476) * _490) + _476;
    float _499 = ((cbMtdParam._m0[14u].z - _478) * _490) + _478;
    float _501 = _397 - (_480 * _397);
    vec4 _517 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _535 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _541 = cbMtdParam._m0[18u].x + _535.z;
    float _544 = (((cbMtdParam._m0[18u].z + _517.z) - _541) * _323) + _541;
    vec4 _556 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _568 = (((_556.z - _544) + cbMtdParam._m0[24u].z) * _401) + _544;
    float _574 = ((((_316 * 2.0) * _568) - _568) * cbMtdParam._m0[20u].z) + _568;
    vec4 _587 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _596 = (((cbMtdParam._m0[19u].y + _587.z) - _574) * _296) + _574;
    vec4 _612 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _627 = ((cbMtdParam._m0[21u].w * _480) * ((_612.z * cbMtdParam._m0[21u].z) - _596)) + _596;
    float _638 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _660 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_638 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_638 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _664 = cbPerFrame._m0[22u].x * 2.0;
    float _665 = _664 * cbMtdParam._m0[25u].y;
    float _668 = (_660.x * 0.5) + (-0.25);
    float _671 = (_660.y * 0.5) + (-0.25);
    float _672 = _671 * cbMtdParam._m0[25u].x;
    float _674 = (-0.0) - (cbMtdParam._m0[25u].x * _668);
    float _676 = fract(_665);
    float _678 = fract(_665 + 0.5);
    float _689 = abs((_676 * 2.0) + (-1.0));
    vec4 _706 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_676 * _674) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_672 * _676) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _708 = _706.x;
    float _709 = _706.y;
    float _710 = _706.z;
    vec4 _711 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_678 * _674) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_672 * _678) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _722 = ((_711.x - _708) * _689) + _708;
    float _729 = exp2(log2(_722 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _730 = isnan(cbMtdParam._m0[24u].x) ? _729 : (isnan(_729) ? cbMtdParam._m0[24u].x : max(_729, cbMtdParam._m0[24u].x));
    float _751 = _664 * cbMtdParam._m0[25u].w;
    float _752 = _671 * cbMtdParam._m0[25u].z;
    float _754 = (-0.0) - (cbMtdParam._m0[25u].z * _668);
    float _755 = fract(_751);
    float _757 = fract(_751 + 0.5);
    float _768 = abs((_755 * 2.0) + (-1.0));
    vec4 _784 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_755 * _754) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_752 * _755) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _786 = _784.x;
    float _787 = _784.y;
    float _788 = _784.z;
    vec4 _789 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_757 * _754) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_752 * _757) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _818 = ((_517.x - _537) * _323) + _537;
    float _819 = ((_517.y - _538) * _323) + _538;
    float _824 = ((_556.x - _818) * _401) + _818;
    float _825 = ((_556.y - _819) * _401) + _819;
    float _834 = ((((_587.x - _824) * _296) + _824) * 2.0) + (-1.0);
    float _835 = ((((_587.y - _825) * _296) + _825) * 2.0) + (-1.0);
    float _836 = dot(vec2(_834, _835), vec2(_834, _835));
    float _3902 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _841 = sqrt(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))));
    float _851 = ((cbMtdParam._m0[20u].w * ((_312.x * 2.0) + (-1.0))) + _834) + ((((_612.x * 2.0) + (-1.0)) * _480) * cbMtdParam._m0[21u].y);
    float _852 = ((cbMtdParam._m0[20u].w * ((_312.y * 2.0) + (-1.0))) + _835) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_612.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _855 = fma(_841, _228 * NORMAL.x, fma(_852, _235 * TANGENT.x, (_221 * _213) * _851));
    float _858 = fma(_841, _228 * NORMAL.y, fma(_852, _235 * TANGENT.y, (_221 * _214) * _851));
    float _861 = fma(_841, _228 * NORMAL.z, fma(_852, _235 * TANGENT.z, (_221 * _215) * _851));
    float _865 = inversesqrt(dot(vec3(_855, _858, _861), vec3(_855, _858, _861)));
    float _866 = _865 * _855;
    float _867 = _865 * _858;
    float _868 = _865 * _861;
    float _3913 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _869 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3935 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3946 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3957 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _873 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _889 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _940 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _930);
    float _941 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _930);
    float _942 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _930);
    float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
    float _947 = _940 * _946;
    float _948 = _941 * _946;
    float _949 = _942 * _946;
    vec4 _954 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _956 = _954.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1128 = sqrt(((_940 * _940) + (_941 * _941)) + (_942 * _942));
        float _1134 = (cbMatDynParam._m0[5u].x * _1128) + cbMatDynParam._m0[5u].y;
        float _3968 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1139 = (cbMatDynParam._m0[5u].z * _1128) + cbMatDynParam._m0[5u].w;
        float _3979 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) - _1135)) + _1135) < ((_956 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _967 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _968 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _986 = fma(_868, cbSceneParam._m0[5u].z, fma(_867, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _866));
    float _989 = fma(_868, cbSceneParam._m0[6u].z, fma(_867, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _866));
    float _992 = fma(_868, cbSceneParam._m0[7u].z, fma(_867, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _866));
    uint _1005 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1006 = _1005 + 9u;
    uint _1007 = _1006 + uint(cbMatDynParam._m0[0u].w);
    float _1013 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_1007].x;
    float _1014 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_1007].y;
    float _1015 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_1007].z;
    float _3990 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1019 = 1.0 - _873;
    float _1020 = _1016 * _1019;
    float _1021 = _1017 * _1019;
    float _1022 = _1018 * _1019;
    float _1027 = (_1016 + (-0.039999999105930328369140625)) * _873;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _873;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _873;
    float _1030 = _1027 + 0.039999999105930328369140625;
    float _1032 = _1028 + 0.039999999105930328369140625;
    float _1033 = _1029 + 0.039999999105930328369140625;
    vec4 _1042 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _967, cbSceneParam._m0[86u].y * _968));
    float _1045 = _1042.x * TEXCOORD_3.w;
    float _1046 = dot(vec3(_866, _867, _868), vec3(_947, _948, _949));
    float _1049 = _1046 * 2.0;
    float _1053 = (_1049 * _866) - _947;
    float _1054 = (_1049 * _867) - _948;
    float _1055 = (_1049 * _868) - _949;
    float _1059 = abs(dot(vec3(_947, _948, _949), vec3(_866, _867, _868)));
    float _4023 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1061 = sqrt(_869);
    float _1074 = exp2((_1061 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1061 * 3.0));
    float _1080 = (1.0 - _1074) * ((_1061 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1081 = _1074 * _1061;
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1446;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1172 = fma(_1117, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109));
        float _1176 = fma(_1117, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109));
        float _1180 = fma(_1117, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109));
        float _1204 = _1109 + _866;
        float _1205 = _1113 + _867;
        float _1206 = _1117 + _868;
        float _1216 = fma(_1206, cbModelParam._m0[26u].z, fma(_1205, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1204)) - _1172;
        float _1217 = fma(_1206, cbModelParam._m0[27u].z, fma(_1205, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1204)) - _1176;
        float _1218 = fma(_1206, cbModelParam._m0[28u].z, fma(_1205, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1204)) - _1180;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1172 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1176 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[34u].z) + ((((((_1180 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1274 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1240.x + (-0.5));
        float _1276 = _1274 * (_1240.y + (-0.5));
        float _1277 = _1274 * (_1240.z + (-0.5));
        float _1284 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1247.x + (-0.5));
        float _1286 = _1284 * (_1247.y + (-0.5));
        float _1287 = _1284 * (_1247.z + (-0.5));
        float _1294 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1254.x + (-0.5));
        float _1296 = _1294 * (_1254.y + (-0.5));
        float _1297 = _1294 * (_1254.z + (-0.5));
        float _1304 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1261.x + (-0.5));
        float _1306 = _1304 * (_1261.y + (-0.5));
        float _1307 = _1304 * (_1261.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1328 = (dot(vec3(_866, _867, _868), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1338 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4071 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1340 + 1.0))) + _1345) * _1308;
        float _1355 = _1276 * 0.5;
        float _1356 = _1286 * 0.5;
        float _1357 = _1296 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_866, _867, _868), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4104 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1382 + 1.0))) + _1387) * _1309;
        float _1397 = _1277 * 0.5;
        float _1398 = _1287 * 0.5;
        float _1399 = _1297 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_866, _867, _868), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4137 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1424 + 1.0))) + _1429) * _1310;
        _1446 = _1277;
        _1448 = _1276;
        _1449 = _1275;
        _1450 = _1287;
        _1451 = _1286;
        _1452 = _1285;
        _1453 = _1297;
        _1454 = _1296;
        _1455 = _1295;
        _1456 = _1310;
        _1457 = _1309;
        _1458 = _1308;
        _1459 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1447;
        _1448 = _1447;
        _1449 = _1447;
        _1450 = _1447;
        _1451 = _1447;
        _1452 = _1447;
        _1453 = _1447;
        _1454 = _1447;
        _1455 = _1447;
        _1456 = _1447;
        _1457 = _1447;
        _1458 = _1447;
        _1459 = 0.0;
        _1460 = 0.0;
        _1461 = 0.0;
    }
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1490 = fma(_1117, cbModelParam._m0[30u].z, fma(_1113, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109));
        float _1494 = fma(_1117, cbModelParam._m0[31u].z, fma(_1113, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109));
        float _1498 = fma(_1117, cbModelParam._m0[32u].z, fma(_1113, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109));
        float _1521 = _1109 + _866;
        float _1522 = _1113 + _867;
        float _1523 = _1117 + _868;
        float _1533 = fma(_1523, cbModelParam._m0[30u].z, fma(_1522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1521)) - _1490;
        float _1534 = fma(_1523, cbModelParam._m0[31u].z, fma(_1522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1521)) - _1494;
        float _1535 = fma(_1523, cbModelParam._m0[32u].z, fma(_1522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1521)) - _1498;
        float _1539 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
        float _1552 = ((_1539 * _1533) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1490 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1539 * _1534) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1494 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1539 * _1535) / cbModelParam._m0[35u].z) + ((((((_1498 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        float _1589 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1556.x + (-0.5));
        float _1591 = _1589 * (_1556.y + (-0.5));
        float _1592 = _1589 * (_1556.z + (-0.5));
        float _1599 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1563.x + (-0.5));
        float _1601 = _1599 * (_1563.y + (-0.5));
        float _1602 = _1599 * (_1563.z + (-0.5));
        float _1609 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1570.x + (-0.5));
        float _1611 = _1609 * (_1570.y + (-0.5));
        float _1612 = _1609 * (_1570.z + (-0.5));
        float _1619 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1577.x + (-0.5));
        float _1621 = _1619 * (_1577.y + (-0.5));
        float _1622 = _1619 * (_1577.z + (-0.5));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = _1590 * 0.5;
        float _1627 = _1600 * 0.5;
        float _1628 = _1610 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_866, _867, _868), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4200 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1653 + 1.0))) + _1658) * _1623;
        float _1668 = _1591 * 0.5;
        float _1669 = _1601 * 0.5;
        float _1670 = _1611 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_866, _867, _868), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4233 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1695 + 1.0))) + _1700) * _1624;
        float _1710 = _1592 * 0.5;
        float _1711 = _1602 * 0.5;
        float _1712 = _1612 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_866, _867, _868), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4266 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1737 + 1.0))) + _1742) * _1625;
        _1759 = _1592;
        _1760 = _1591;
        _1761 = _1590;
        _1762 = _1602;
        _1763 = _1601;
        _1764 = _1600;
        _1765 = _1612;
        _1766 = _1611;
        _1767 = _1610;
        _1768 = _1625;
        _1769 = _1624;
        _1770 = _1623;
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
    }
    else
    {
        _1759 = _1447;
        _1760 = _1447;
        _1761 = _1447;
        _1762 = _1447;
        _1763 = _1447;
        _1764 = _1447;
        _1765 = _1447;
        _1766 = _1447;
        _1767 = _1447;
        _1768 = _1447;
        _1769 = _1447;
        _1770 = _1447;
        _1771 = 0.0;
        _1772 = 0.0;
        _1773 = 0.0;
    }
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1459)) + _1459;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1460)) + _1460;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1461)) + _1461;
    float _1806 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1783));
    float _1827 = _1053 * 0.5;
    float _1828 = _1054 * 0.5;
    float _1829 = _1055 * 0.5;
    float _1830 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1833 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1836 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1870;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1843 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1446, _1450, _1453, _1456));
        float _1847 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1448, _1451, _1454, _1457));
        float _1851 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1449, _1452, _1455, _1458));
        float _1858 = dot(vec4(cbModelParam._m0[39u]), vec4(_1827, _1828, _1829, 1.0));
        _1870 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1870 = 1.0;
    }
    float _1881;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1872 = dot(vec4(cbModelParam._m0[40u]), vec4(_1827, _1828, _1829, 1.0));
        _1881 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1881 = 1.0;
    }
    float _1885 = (_1881 * cbModelParam._m0[1u].x) + (_1870 * (1.0 - cbModelParam._m0[1u].x));
    float _1895 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _869);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1895 : min(cbModelParam._m0[25u].z, _1895));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1943 = fma(_1117, cbModelParam._m0[13u].z, fma(_1113, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1109)) + cbModelParam._m0[13u].w;
        float _1947 = fma(_1117, cbModelParam._m0[14u].z, fma(_1113, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1109)) + cbModelParam._m0[14u].w;
        float _1951 = fma(_1117, cbModelParam._m0[15u].z, fma(_1113, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1109)) + cbModelParam._m0[15u].w;
        float _1954 = fma(_1055, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053));
        float _1957 = fma(_1055, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053));
        float _1960 = fma(_1055, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053));
        float _1988;
        if (_1954 > 0.0)
        {
            _1988 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1988 = frontier_phi_17_15_ladder;
        }
        float _2191;
        if (_1957 > 0.0)
        {
            _2191 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2191 = frontier_phi_26_22_ladder;
        }
        float _2445;
        if (_1960 > 0.0)
        {
            _2445 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2445 = frontier_phi_38_33_ladder;
        }
        float _2447 = isnan(_2191) ? _1988 : (isnan(_1988) ? _2191 : min(_1988, _2191));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1954) + _1943;
        float _2453 = (_2448 * _1957) + _1947;
        float _2454 = (_2448 * _1960) + _1951;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2457 = (-1.0) - _2455;
        float _2459 = _2455 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2454 > _2459) || ((_2454 < _2457) || ((_2453 > _2459) || ((_2453 < _2457) || ((_2452 < _2457) || (_2452 > _2459))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2454, cbModelParam._m0[9u].z, fma(_2453, cbModelParam._m0[9u].y, _2452 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2454, cbModelParam._m0[10u].z, fma(_2453, cbModelParam._m0[10u].y, _2452 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2454, cbModelParam._m0[11u].z, fma(_2453, cbModelParam._m0[11u].y, _2452 * cbModelParam._m0[11u].x))), _1896);
            frontier_phi_16_38_ladder = _2582.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2582.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2582.x * cbModelParam._m0[1u].y;
        }
        _1976 = frontier_phi_16_38_ladder_2;
        _1978 = frontier_phi_16_38_ladder_1;
        _1980 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1053, _1054, _1055), _1896);
        _1976 = _1964.x * cbModelParam._m0[1u].y;
        _1978 = _1964.y * cbModelParam._m0[1u].y;
        _1980 = _1964.z * cbModelParam._m0[1u].y;
    }
    float _1984 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _869);
    float _1985 = isnan(_1984) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1984 : min(cbModelParam._m0[25u].w, _1984));
    float _2074;
    float _2076;
    float _2078;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2038 = fma(_1117, cbModelParam._m0[21u].z, fma(_1113, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1109)) + cbModelParam._m0[21u].w;
        float _2042 = fma(_1117, cbModelParam._m0[22u].z, fma(_1113, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1109)) + cbModelParam._m0[22u].w;
        float _2046 = fma(_1117, cbModelParam._m0[23u].z, fma(_1113, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1109)) + cbModelParam._m0[23u].w;
        float _2049 = fma(_1055, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053));
        float _2052 = fma(_1055, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053));
        float _2055 = fma(_1055, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053));
        float _2196;
        if (_2049 > 0.0)
        {
            _2196 = abs((1.0 - _2038) / _2049);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2038 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2196 = frontier_phi_28_24_ladder;
        }
        float _2472;
        if (_2052 > 0.0)
        {
            _2472 = abs((1.0 - _2042) / _2052);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2042 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2472 = frontier_phi_40_35_ladder;
        }
        float _2685;
        if (_2055 > 0.0)
        {
            _2685 = abs((1.0 - _2046) / _2055);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2046 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2685 = frontier_phi_49_46_ladder;
        }
        float _2687 = isnan(_2472) ? _2196 : (isnan(_2196) ? _2472 : min(_2196, _2472));
        float _2688 = isnan(_2685) ? _2687 : (isnan(_2687) ? _2685 : min(_2687, _2685));
        float _2692 = (_2688 * _2049) + _2038;
        float _2693 = (_2688 * _2052) + _2042;
        float _2694 = (_2688 * _2055) + _2046;
        float _2695 = _2688 * 9.9999997473787516355514526367188e-05;
        float _2696 = (-1.0) - _2695;
        float _2698 = _2695 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2694 > _2698) || ((_2694 < _2696) || ((_2693 > _2698) || ((_2693 < _2696) || ((_2692 < _2696) || (_2692 > _2698))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2694, cbModelParam._m0[17u].z, fma(_2693, cbModelParam._m0[17u].y, _2692 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2694, cbModelParam._m0[18u].z, fma(_2693, cbModelParam._m0[18u].y, _2692 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2694, cbModelParam._m0[19u].z, fma(_2693, cbModelParam._m0[19u].y, _2692 * cbModelParam._m0[19u].x))), _1985);
            frontier_phi_25_49_ladder = _2916.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2916.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2916.x * cbModelParam._m0[1u].z;
        }
        _2074 = frontier_phi_25_49_ladder_2;
        _2076 = frontier_phi_25_49_ladder_1;
        _2078 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2058 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1053, _1054, _1055), _1985);
        _2074 = _2058.x * cbModelParam._m0[1u].z;
        _2076 = _2058.y * cbModelParam._m0[1u].z;
        _2078 = _2058.z * cbModelParam._m0[1u].z;
    }
    float _2091 = (((_1080 * _1030) + _1081) * _1045) * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2093 = (((_1080 * _1032) + _1081) * _1045) * ((cbModelParam._m0[1u].w * (_2076 - _1978)) + _1978);
    float _2095 = (((_1080 * _1033) + _1081) * _1045) * ((cbModelParam._m0[1u].w * (_2078 - _1980)) + _1980);
    float _2098 = fma(_2095, cbSceneParam._m0[89u].z, fma(_2093, cbSceneParam._m0[89u].y, _2091 * cbSceneParam._m0[89u].x));
    float _2101 = fma(_2095, cbSceneParam._m0[90u].z, fma(_2093, cbSceneParam._m0[90u].y, _2091 * cbSceneParam._m0[90u].x));
    float _2104 = fma(_2095, cbSceneParam._m0[91u].z, fma(_2093, cbSceneParam._m0[91u].y, _2091 * cbSceneParam._m0[91u].x));
    uvec4 _2114 = floatBitsToUint(cbInstanceData._m0[_1005 + 5u]);
    uint _2116 = _2114.x * 14u;
    uint _2117 = _2116 + 13u;
    float _2124 = _1045 + (-1.0);
    float _2129 = (cbLight._m0[_2117].x * _2124) + 1.0;
    float _2130 = (cbLight._m0[_2117].y * _2124) + 1.0;
    float _2131 = (cbLight._m0[_2117].z * _2124) + 1.0;
    float _2132 = (cbLight._m0[_2117].w * _2124) + 1.0;
    uint _2133 = _2116 + 5u;
    float _2139 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2143 = _2116 + 4u;
    float _2150 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2154 = _2116 | 1u;
    float _2165 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_866, _867, _868));
    float _2168 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_866, _867, _868));
    float _4402 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _4413 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2173 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2175 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.3183098733425140380859375;
    float _2182 = ((cbLight._m0[_2133].x * _2139) * _2175) + ((cbLight._m0[_2143].x * _2150) * _2173);
    float _2183 = ((_2139 * cbLight._m0[_2133].y) * _2175) + ((_2150 * cbLight._m0[_2143].y) * _2173);
    float _2184 = ((_2139 * cbLight._m0[_2133].z) * _2175) + ((_2150 * cbLight._m0[_2143].z) * _2173);
    uvec4 _2188 = floatBitsToUint(cbLight._m0[_2116 + 12u]);
    bool _2190 = _2188.x == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2190)
    {
        _2201 = _2182;
        _2203 = _2183;
        _2205 = _2184;
    }
    else
    {
        uint _2209 = _2116 + 6u;
        float _2225 = (dot(vec3(cbLight._m0[_2116 + 2u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4424 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2228 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2201 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _2182;
        _2203 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _2183;
        _2205 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _2184;
    }
    bool _2208 = _2188.y == 0u;
    float _2246;
    float _2248;
    float _2250;
    if (_2208)
    {
        _2246 = _2201;
        _2248 = _2203;
        _2250 = _2205;
    }
    else
    {
        uint _2416 = _2116 + 7u;
        float _2432 = (dot(vec3(cbLight._m0[_2116 + 3u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2433 = _2432 * _2432;
        float _4440 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2434 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2435 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2246 = (((cbLight._m0[_2416].x * 0.3183098733425140380859375) * _2434) * _2435) + _2201;
        _2248 = (((cbLight._m0[_2416].y * 0.3183098733425140380859375) * _2434) * _2435) + _2203;
        _2250 = (((cbLight._m0[_2416].z * 0.3183098733425140380859375) * _2434) * _2435) + _2205;
    }
    uint _2253 = _2116 + 8u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _869) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2116].x + _947;
    float _2269 = cbLight._m0[_2116].y + _948;
    float _2270 = cbLight._m0[_2116].z + _949;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2116].xyz));
    float _4456 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _4467 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _2282 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2283 = dot(vec3(_866, _867, _868), vec3(_2275, _2276, _2277));
    float _4478 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2287 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2275, _2276, _2277));
    float _4489 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2291 = _2267 * _2267;
    float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
    float _2303 = exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0);
    float _2304 = 0.959999978542327880859375 - _1027;
    float _2306 = 0.959999978542327880859375 - _1028;
    float _2307 = 0.959999978542327880859375 - _1029;
    float _2314 = 1.0 - _2267;
    float _2325 = (0.5 / (((_2282 * ((_2281 * _2314) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2314) + _2267) * _2281))) * _2281;
    float _4500 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
    uint _2338 = _2116 + 9u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _869) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2154].x + _947;
    float _2352 = cbLight._m0[_2154].y + _948;
    float _2353 = cbLight._m0[_2154].z + _949;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2154].xyz));
    float _4511 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2365 = dot(vec3(_866, _867, _868), vec3(_2358, _2359, _2360));
    float _4522 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2358, _2359, _2360));
    float _4533 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2350 * _2350;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0);
    float _2391 = 1.0 - _2350;
    float _2401 = (0.5 / (((_2282 * ((_2364 * _2391) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2391) + _2350) * _2364))) * _2364;
    float _4544 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    float _2413 = (((((_2384 * _2304) + _1030) * cbLight._m0[_2338].x) * _2403) * _2139) + (((((_2303 * _2304) + _1030) * cbLight._m0[_2253].x) * _2327) * _2150);
    float _2414 = (((((_2384 * _2306) + _1032) * cbLight._m0[_2338].y) * _2403) * _2139) + (((((_2303 * _2306) + _1032) * cbLight._m0[_2253].y) * _2327) * _2150);
    float _2415 = (((((_2384 * _2307) + _1033) * cbLight._m0[_2338].z) * _2403) * _2139) + (((((_2303 * _2307) + _1033) * cbLight._m0[_2253].z) * _2327) * _2150);
    float _2477;
    float _2479;
    float _2481;
    if (_2190)
    {
        _2477 = _2413;
        _2479 = _2414;
        _2481 = _2415;
    }
    else
    {
        uint _2483 = _2116 + 2u;
        uint _2487 = _2116 + 10u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _869) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _947;
        float _2504 = cbLight._m0[_2483].y + _948;
        float _2505 = cbLight._m0[_2483].z + _949;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2483].xyz));
        float _4555 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2517 = dot(vec3(_866, _867, _868), vec3(_2510, _2511, _2512));
        float _4566 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4577 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0);
        float _2543 = 1.0 - _2502;
        float _2553 = (0.5 / (((_2282 * ((_2516 * _2543) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2543) + _2502) * _2516))) * _2516;
        float _4588 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2477 = (((((_2536 * _2304) + _1030) * cbLight._m0[_2487].x) * _2555) * _2556) + _2413;
        _2479 = (((((_2536 * _2306) + _1032) * cbLight._m0[_2487].y) * _2555) * _2556) + _2414;
        _2481 = (((((_2536 * _2307) + _1033) * cbLight._m0[_2487].z) * _2555) * _2556) + _2415;
    }
    float _2591;
    float _2593;
    float _2595;
    if (_2208)
    {
        _2591 = _2477;
        _2593 = _2479;
        _2595 = _2481;
    }
    else
    {
        uint _2602 = _2116 + 3u;
        uint _2606 = _2116 + 11u;
        float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2602].w)) * _869) * 0.949999988079071044921875);
        float _2621 = _2620 * _2620;
        float _2622 = cbLight._m0[_2602].x + _947;
        float _2623 = cbLight._m0[_2602].y + _948;
        float _2624 = cbLight._m0[_2602].z + _949;
        float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
        float _2629 = _2628 * _2622;
        float _2630 = _2628 * _2623;
        float _2631 = _2628 * _2624;
        float _2632 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2602].xyz));
        float _4604 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2636 = dot(vec3(_866, _867, _868), vec3(_2629, _2630, _2631));
        float _4615 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2640 = dot(vec3(cbLight._m0[_2602].xyz), vec3(_2629, _2630, _2631));
        float _4626 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2644 = _2621 * _2621;
        float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
        float _2655 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
        float _2662 = 1.0 - _2621;
        float _2672 = (0.5 / (((_2282 * ((_2635 * _2662) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2662) + _2621) * _2635))) * _2635;
        float _4637 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2674 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
        float _2675 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2591 = (((((_2655 * _2304) + _1030) * cbLight._m0[_2606].x) * _2674) * _2675) + _2477;
        _2593 = (((((_2655 * _2306) + _1032) * cbLight._m0[_2606].y) * _2674) * _2675) + _2479;
        _2595 = (((((_2655 * _2307) + _1033) * cbLight._m0[_2606].z) * _2674) * _2675) + _2481;
    }
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_2114.y == 0u)
    {
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2750;
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2750;
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2750;
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.x;
        uint _2777 = uint((float(_2765.y) * floor(float(uint(cbSceneParam._m0[85u].y * _968) / _2766))) + floor(float(uint(cbSceneParam._m0[85u].x * _967) / _2766)));
        float _2787 = (log2(_2753 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2788 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        uint _2791 = uint(isnan(14.0) ? _2788 : (isnan(_2788) ? 14.0 : min(_2788, 14.0)));
        uvec4 _2796 = texelFetch(g_lightClusterGridBuffer, int(((_2791 << 2u) + (_2777 << 6u)) >> 2u));
        uint _2797 = _2796.x;
        uint _2798 = _2765.z;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((((1u << ((_2798 >> 4u) & 15u)) + 4294967295u) & _2797) == 0u) || ((_2798 & 240u) == 0u))
        {
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
        }
        else
        {
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            uint _3078 = 0u;
            uint _3087;
            bool _3088;
            for (;;)
            {
                _3087 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                _3088 = _3087 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3088)
                {
                    frontier_phi_66_pred = _3072;
                    frontier_phi_66_pred_1 = _3077;
                    frontier_phi_66_pred_2 = _3076;
                    frontier_phi_66_pred_3 = _3075;
                    frontier_phi_66_pred_4 = _3074;
                    frontier_phi_66_pred_5 = _3073;
                }
                else
                {
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    uint _3223;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3074;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3087;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    for (;;)
                    {
                        uint _3227 = uint(findLSB(_3223)) + (_3078 << 5u);
                        uint _3224 = (_3223 + 4294967295u) & _3223;
                        uint _3229 = _3227 * 48u;
                        vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3229)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 3u)).x));
                        uint _3249 = (_3227 * 48u) + 4u;
                        vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3249)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 3u)).x));
                        uint _3268 = (_3227 * 48u) + 8u;
                        vec3 _3279 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x));
                        float _3283 = _3243.x - _2751;
                        float _3284 = _3243.y - _2752;
                        float _3285 = _3243.z - _2753;
                        float _3286 = dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285));
                        float _3289 = inversesqrt(_3286);
                        float _3290 = _3289 * _3283;
                        float _3291 = _3289 * _3284;
                        float _3292 = _3289 * _3285;
                        float _3293 = dot(vec3(_986, _989, _992), vec3(_3290, _3291, _3292));
                        float _3298 = 1.0 - (_3286 * _3243.w);
                        float _4663 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3299 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3300 = sqrt(_3286) * _3262.w;
                        float _3303 = 1.39999997615814208984375 / (_3300 + 1.39999997615814208984375);
                        float _3304 = _3303 * _3303;
                        float _3307 = ((1.0 - _3304) * _3293) + _3304;
                        float _3310 = _3300 * _3300;
                        float _3314 = ((isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))) * _3299) / ((_3310 * 0.699999988079071044921875) + 1.0);
                        float _3318 = (-0.0) - _2751;
                        float _3319 = (-0.0) - _2752;
                        float _3320 = (-0.0) - _2753;
                        float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                        float _3325 = _3324 * _3318;
                        float _3326 = _3324 * _3319;
                        float _3327 = _3324 * _3320;
                        float _3335 = exp2(log2(1.0 / ((_3310 * 3.5) + 5.0)) * 0.25);
                        float _3336 = 1.0 - _1061;
                        float _3343 = sqrt(1.0 - ((1.0 - (_3336 * _3336)) * (1.0 - (_3335 * _3335))));
                        float _3344 = _3343 * _3343;
                        float _3345 = _3344 * _3344;
                        float _3346 = _3325 + _3290;
                        float _3347 = _3326 + _3291;
                        float _3348 = _3327 + _3292;
                        float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                        float _3356 = dot(vec3(_986, _989, _992), vec3(_3325, _3326, _3327));
                        float _4679 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3359 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3360 = dot(vec3(_986, _989, _992), vec3(_3352 * _3346, _3352 * _3347, _3352 * _3348));
                        float _4690 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3363 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3367 = ((_3363 * _3363) * (_3345 + (-1.0))) + 1.0;
                        float _3368 = _3303 * _3344;
                        float _3369 = _3368 * _3368;
                        float _3372 = ((1.0 - _3369) * _3293) + _3369;
                        float _4701 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3373 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3374 = 1.0 - _3344;
                        float _3384 = (0.5 / (((_3373 * ((_3359 * _3374) + _3344)) + 9.9999999392252902907785028219223e-09) + (((_3373 * _3374) + _3344) * _3359))) * _3373;
                        float _4712 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3395 = (((_3345 * 3.1415927410125732421875) * (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) / ((_3367 * _3367) * ((_3310 * 2.1991131305694580078125) + 3.141590118408203125))) * _3299;
                        _3147 = (_3314 * _3262.x) + _3220;
                        _3148 = (_3314 * _3262.y) + _3221;
                        _3149 = (_3314 * _3262.z) + _3222;
                        _3144 = (_3395 * _3279.x) + _3217;
                        _3145 = (_3395 * _3279.y) + _3218;
                        _3146 = (_3395 * _3279.z) + _3219;
                        if (_3224 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3146;
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3224;
                        }
                    }
                    frontier_phi_66_pred = _3144;
                    frontier_phi_66_pred_1 = _3149;
                    frontier_phi_66_pred_2 = _3148;
                    frontier_phi_66_pred_3 = _3147;
                    frontier_phi_66_pred_4 = _3146;
                    frontier_phi_66_pred_5 = _3145;
                }
                _2922 = frontier_phi_66_pred;
                _2932 = frontier_phi_66_pred_1;
                _2930 = frontier_phi_66_pred_2;
                _2928 = frontier_phi_66_pred_3;
                _2926 = frontier_phi_66_pred_4;
                _2924 = frontier_phi_66_pred_5;
                uint _3079 = _3078 + 1u;
                if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3072 = _2922;
                    _3073 = _2924;
                    _3074 = _2926;
                    _3075 = _2928;
                    _3076 = _2930;
                    _3077 = _2932;
                    _3078 = _3079;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
        }
        uvec4 _2935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2936 = _2935.z;
        uint _2938 = (_2936 >> 8u) & 15u;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((4294967295u << _2938) & _2797) == 0u)
        {
            _3040 = _2921;
            _3042 = _2923;
            _3044 = _2925;
            _3046 = _2927;
            _3048 = _2929;
            _3050 = _2931;
        }
        else
        {
            float _3065 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
            float _3066 = _3065 * _2751;
            float _3067 = _3065 * _2752;
            float _3068 = _3065 * _2753;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2938 < ((_2936 >> 12u) & 15u))
            {
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3200 = _2921;
                float _3201 = _2923;
                float _3202 = _2925;
                float _3203 = _2927;
                float _3204 = _2929;
                float _3205 = _2931;
                uint _3206 = _2938;
                uint _3215;
                bool _3216;
                for (;;)
                {
                    _3215 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3206 << 2u)) >> 2u)).x;
                    _3216 = _3215 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3216)
                    {
                        frontier_phi_77_pred = _3205;
                        frontier_phi_77_pred_1 = _3204;
                        frontier_phi_77_pred_2 = _3203;
                        frontier_phi_77_pred_3 = _3202;
                        frontier_phi_77_pred_4 = _3201;
                        frontier_phi_77_pred_5 = _3200;
                    }
                    else
                    {
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3422 = _3200;
                        float _3423 = _3201;
                        float _3424 = _3202;
                        float _3425 = _3203;
                        float _3426 = _3204;
                        float _3427 = _3205;
                        uint _3428 = _3215;
                        uint _3429;
                        vec4 _3454;
                        float _3455;
                        vec4 _3470;
                        vec3 _3482;
                        vec4 _3497;
                        vec4 _3512;
                        float _3558;
                        bool _3559;
                        for (;;)
                        {
                            uint _3439 = ((_3206 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3428));
                            _3429 = (_3428 + 4294967295u) & _3428;
                            uint _3441 = _3439 * 40u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3455 = _3454.w;
                            uint _3457 = (_3439 * 40u) + 4u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3439 * 40u) + 8u;
                            _3482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x));
                            uint _3484 = (_3439 * 40u) + 16u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3439 * 40u) + 20u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3439 * 40u) + 24u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3533 = (_3439 * 40u) + 28u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3558 = fma(_2753, _3546.z, fma(_2752, _3546.y, _3546.x * _2751)) + _3546.w;
                            _3559 = !((fma(_2753, _3527.z, fma(_2752, _3527.y, _3527.x * _2751)) + _3527.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3559)
                            {
                                float _3586 = _3454.x - _2751;
                                float _3587 = _3454.y - _2752;
                                float _3588 = _3454.z - _2753;
                                float _3589 = dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588));
                                float _3592 = inversesqrt(_3589);
                                float _3593 = _3592 * _3586;
                                float _3594 = _3592 * _3587;
                                float _3595 = _3592 * _3588;
                                float _3599 = 1.0 - (_3589 / (_3455 * _3455));
                                float _4723 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3604 = sqrt(_3589) * _3470.w;
                                float _3606 = 1.39999997615814208984375 / (_3604 + 1.39999997615814208984375);
                                float _3607 = _3606 * _3606;
                                float _3610 = ((1.0 - _3607) * dot(vec3(_3593, _3594, _3595), vec3(_986, _989, _992))) + _3607;
                                float _3613 = _3604 * _3604;
                                float _3617 = (fma(_2753, _3497.z, fma(_2752, _3497.y, _3497.x * _2751)) + _3497.w) / _3558;
                                float _3618 = (fma(_2753, _3512.z, fma(_2752, _3512.y, _3512.x * _2751)) + _3512.w) / _3558;
                                float _3622 = 1.0 - dot(vec2(_3617, _3618), vec2(_3617, _3618));
                                float _4739 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3624 = _3623 * (((isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0))) * _3600) / ((_3613 * 0.699999988079071044921875) + 1.0));
                                float _3636 = exp2(log2(1.0 / ((_3613 * 3.5) + 5.0)) * 0.25);
                                float _3637 = 1.0 - _1061;
                                float _3644 = sqrt(1.0 - ((1.0 - (_3637 * _3637)) * (1.0 - (_3636 * _3636))));
                                float _3645 = _3644 * _3644;
                                float _3646 = _3645 * _3645;
                                float _3647 = _3593 - _3066;
                                float _3648 = _3594 - _3067;
                                float _3649 = _3595 - _3068;
                                float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                                float _3657 = dot(vec3(_986, _989, _992), vec3((-0.0) - _3066, (-0.0) - _3067, (-0.0) - _3068));
                                float _4750 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3661 = dot(vec3(_986, _989, _992), vec3(_3653 * _3647, _3653 * _3648, _3653 * _3649));
                                float _4761 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3668 = ((_3664 * _3664) * (_3646 + (-1.0))) + 1.0;
                                float _3669 = _3606 * _3645;
                                float _3670 = _3669 * _3669;
                                float _3676 = ((1.0 - _3670) * dot(vec3(_986, _989, _992), vec3(_3593, _3594, _3595))) + _3670;
                                float _4772 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3678 = 1.0 - _3645;
                                float _3688 = (0.5 / (((_3677 * ((_3660 * _3678) + _3645)) + 9.9999999392252902907785028219223e-09) + (((_3677 * _3678) + _3645) * _3660))) * _3677;
                                float _4783 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3698 = (_3623 * _3600) * (((_3646 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3668 * _3668) * ((_3613 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3624 * _3470.y;
                                frontier_phi_83_pred_1 = _3624 * _3470.x;
                                frontier_phi_83_pred_2 = _3698 * _3482.z;
                                frontier_phi_83_pred_3 = _3698 * _3482.y;
                                frontier_phi_83_pred_4 = _3698 * _3482.x;
                                frontier_phi_83_pred_5 = _3624 * _3470.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3706 = frontier_phi_83_pred;
                            _3705 = frontier_phi_83_pred_1;
                            _3704 = frontier_phi_83_pred_2;
                            _3703 = frontier_phi_83_pred_3;
                            _3702 = frontier_phi_83_pred_4;
                            _3707 = frontier_phi_83_pred_5;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            if (_3429 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3429;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3414;
                        frontier_phi_77_pred_1 = _3413;
                        frontier_phi_77_pred_2 = _3412;
                        frontier_phi_77_pred_3 = _3411;
                        frontier_phi_77_pred_4 = _3410;
                        frontier_phi_77_pred_5 = _3409;
                    }
                    _3051 = frontier_phi_77_pred;
                    _3049 = frontier_phi_77_pred_1;
                    _3047 = frontier_phi_77_pred_2;
                    _3045 = frontier_phi_77_pred_3;
                    _3043 = frontier_phi_77_pred_4;
                    _3041 = frontier_phi_77_pred_5;
                    uint _3207 = _3206 + 1u;
                    if (_3207 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3200 = _3041;
                        _3201 = _3043;
                        _3202 = _3045;
                        _3203 = _3047;
                        _3204 = _3049;
                        _3205 = _3051;
                        _3206 = _3207;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3045;
                frontier_phi_58_59_ladder_1 = _3051;
                frontier_phi_58_59_ladder_2 = _3049;
                frontier_phi_58_59_ladder_3 = _3047;
                frontier_phi_58_59_ladder_4 = _3043;
                frontier_phi_58_59_ladder_5 = _3041;
            }
            else
            {
                frontier_phi_58_59_ladder = _2925;
                frontier_phi_58_59_ladder_1 = _2931;
                frontier_phi_58_59_ladder_2 = _2929;
                frontier_phi_58_59_ladder_3 = _2927;
                frontier_phi_58_59_ladder_4 = _2923;
                frontier_phi_58_59_ladder_5 = _2921;
            }
            _3040 = frontier_phi_58_59_ladder_5;
            _3042 = frontier_phi_58_59_ladder_4;
            _3044 = frontier_phi_58_59_ladder;
            _3046 = frontier_phi_58_59_ladder_3;
            _3048 = frontier_phi_58_59_ladder_2;
            _3050 = frontier_phi_58_59_ladder_1;
        }
        float _3055 = isnan(1.0) ? _1045 : (isnan(_1045) ? 1.0 : min(_1045, 1.0));
        _2810 = (_3055 * _3046) + _2246;
        _2812 = (_3055 * _3048) + _2248;
        _2814 = (_3055 * _3050) + _2250;
        _2816 = ((_3040 * _1030) * _3055) + _2591;
        _2818 = ((_3042 * _1032) * _3055) + _2593;
        _2820 = ((_3044 * _1033) * _3055) + _2595;
    }
    else
    {
        _2810 = _2246;
        _2812 = _2248;
        _2814 = _2250;
        _2816 = _2591;
        _2818 = _2593;
        _2820 = _2595;
    }
    uint _2826 = _1006 + uint(cbMatDynParam._m0[0u].w);
    float _2832 = (isnan(cbMtdParam._m0[24u].y) ? _730 : (isnan(_730) ? cbMtdParam._m0[24u].y : min(_730, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4799 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4810 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _4821 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _2855 = (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2810 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1045))) + ((_2816 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1885)) * cbPerFrame._m0[3u].x)) + ((_2832 * (((((_789.x - _786) * _768) + _786) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _722) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2826].x);
    float _2857 = (((_2832 * (((((_789.y - _787) * _768) + _787) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_711.y - _709) * _689) + _709)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2826].y) + ((_2818 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1885)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2812 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1045)));
    float _2859 = (((_2832 * (((((_789.z - _788) * _768) + _788) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_711.z - _710) * _689) + _710)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2826].z) + ((_2820 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1885)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2814 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1045)));
    float _2860 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2861 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
    float _2862 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
    uint _2863 = _1005 + 6u;
    float _2871 = _967 / cbSceneParam._m0[86u].x;
    float _2872 = _968 / cbSceneParam._m0[86u].y;
    vec4 _2886 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, (log2((isnan(cbSceneParam._m0[77u].w) ? _889 : (isnan(_889) ? cbSceneParam._m0[77u].w : min(_889, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2888 = _2886.x;
    float _2889 = _2886.y;
    float _2890 = _2886.z;
    float _2891 = _2886.w;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_889 > cbSceneParam._m0[78u].w)
    {
        float _2946 = isnan(_889) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _889 : min(cbSceneParam._m0[80u].w, _889));
        float _2947 = _2946 / _889;
        float _2958 = _2947 * _940;
        float _2959 = _941 * _2947;
        float _2960 = (-0.0) - _2959;
        float _2961 = _2947 * _942;
        float _2963 = (cbSceneParam._m0[77u].w * _2960) / _2946;
        float _2964 = _2963 + cbSceneParam._m0[79u].w;
        float _2965 = cbSceneParam._m0[79u].w - _2959;
        float _2971 = sqrt(((_2958 * _2958) + (_2959 * _2959)) + (_2961 * _2961));
        float _2974 = (1.0 - (cbSceneParam._m0[77u].w / _2946)) * _2971;
        float _2979 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2981 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3157;
        if (abs((_2960 - _2963) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3157 = ((((_2964 > 0.0) ? exp2(_2979 * _2964) : (2.0 - exp2(_2981 * _2964))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2974;
        }
        else
        {
            float _3101 = 1.0 / cbSceneParam._m0[80u].x;
            float _3102 = isnan(_2965) ? _2964 : (isnan(_2964) ? _2965 : max(_2964, _2965));
            float _3103 = isnan(_2965) ? _2964 : (isnan(_2964) ? _2965 : min(_2964, _2965));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            float _3113 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : min(_3103, 0.0));
            _3157 = ((abs(_2971 / _2960) * cbSceneParam._m0[80u].y) * ((((_3112 - _3113) * 2.0) - ((exp2(_2979 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0)))) - exp2(_2979 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))))) * _3101)) - ((exp2(_2981 * _3112) - exp2(_2981 * _3113)) * _3101))) + (_2974 * cbSceneParam._m0[80u].z);
        }
        vec4 _3159 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, 1.0), 0.0);
        float _3168 = exp2((_3157 * (-1.44269502162933349609375)) * (1.0 - _3159.w));
        float _3169 = log2(_3168);
        float _3185 = log2(_2891);
        _2983 = (exp2(_3185 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].x)) * _3159.x) / cbSceneParam._m0[78u].x)) + _2888;
        _2985 = (exp2(_3185 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].y)) * _3159.y) / cbSceneParam._m0[78u].y)) + _2889;
        _2987 = (exp2(_3185 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].z)) * _3159.z) / cbSceneParam._m0[78u].z)) + _2890;
        _2989 = _3168 * _2891;
    }
    else
    {
        _2983 = _2888;
        _2985 = _2889;
        _2987 = _2890;
        _2989 = _2891;
    }
    bool _3195;
    vec4 _2998;
    vec4 _3020;
    float _3022;
    float _3026;
    float _3027;
    float _3028;
    float _3029;
    bool _3039;
    for (;;)
    {
        _2998 = cbMatDynParam._m0[0u];
        float _3000 = roundEven(_2998.y);
        bool _3001 = _3000 == 3.0;
        float _3002 = log2(_2989);
        float _3009 = exp2(_3002 * cbSceneParam._m0[78u].x) * _2860;
        float _3010 = exp2(_3002 * cbSceneParam._m0[78u].y) * _2861;
        float _3011 = exp2(_3002 * cbSceneParam._m0[78u].z) * _2862;
        float _3018 = _956 + (-0.5);
        _3020 = cbMtdParam._m0[1u];
        _3022 = _3020.y * _3018;
        float _3025 = (_3000 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3026 = _3025 * (_3001 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
        _3027 = _3025 * (_3001 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
        _3028 = _3025 * (_3001 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2987)));
        _3029 = _3018 * 0.999000012874603271484375;
        _3039 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3039)
        {
            if ((cbInstanceData._m0[_1005 + 7u].x + _3029) < 0.5)
            {
                _3195 = true;
                break;
            }
        }
        uint _3136 = _1006 + uint(_2998.w);
        if ((cbInstanceData._m0[_3136].w < 1.0) && ((cbInstanceData._m0[_3136].w + _3029) < 0.5))
        {
            _3195 = true;
            break;
        }
        if ((_3022 + 1.0) < _3020.x)
        {
            _3195 = true;
            break;
        }
        _3195 = false;
        break;
    }
    float _3400;
    if (_3195)
    {
        discard_state = true;
        _3400 = 0.0;
    }
    else
    {
        _3400 = cbInstanceData._m0[_2863].w;
    }
    SV_Target.x = _3026;
    SV_Target.y = _3027;
    SV_Target.z = _3028;
    SV_Target.w = _3400;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2863].w;
    discard_exit();
}


