#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1403;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _277 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _290 = exp2(log2(_277.w * cbMtdParam._m0[26u].x) * cbMtdParam._m0[18u].w);
    float _291 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _292 = isnan(1.0) ? _291 : (isnan(_291) ? 1.0 : min(_291, 1.0));
    vec4 _308 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _312 = _308.z;
    float _317 = exp2(log2(_312 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _318 : (isnan(_318) ? 1.0 : min(_318, 1.0));
    vec4 _331 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _356 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _367 = cbMtdParam._m0[9u].x * _356.x;
    float _368 = cbMtdParam._m0[9u].y * _356.y;
    float _369 = cbMtdParam._m0[9u].z * _356.z;
    float _376 = (((cbMtdParam._m0[10u].x * _331.x) - _367) * _319) + _367;
    float _377 = (((cbMtdParam._m0[10u].y * _331.y) - _368) * _319) + _368;
    float _378 = (((cbMtdParam._m0[10u].z * _331.z) - _369) * _319) + _369;
    vec4 _391 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _393 = _391.x;
    float _397 = exp2(log2(_393) * cbMtdParam._m0[19u].z);
    vec4 _410 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _430 = (((cbMtdParam._m0[12u].x * _410.x) - _376) * _397) + _376;
    float _431 = (((cbMtdParam._m0[12u].y * _410.y) - _377) * _397) + _377;
    float _432 = (((cbMtdParam._m0[12u].z * _410.z) - _378) * _397) + _378;
    vec4 _445 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _470 = (_277.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _445.x) - _430) * _292) + _430);
    float _472 = (_277.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _445.y) - _431) * _292) + _431);
    float _474 = (_277.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _445.z) - _432) * _292) + _432);
    float _476 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _485 = (_476 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _476))) * (cbMtdParam._m0[22u].y + 1.0);
    float _3771 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _493 = ((cbMtdParam._m0[14u].x - _470) * _486) + _470;
    float _494 = ((cbMtdParam._m0[14u].y - _472) * _486) + _472;
    float _495 = ((cbMtdParam._m0[14u].z - _474) * _486) + _474;
    float _497 = _393 - (_476 * _393);
    vec4 _513 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _531 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _537 = cbMtdParam._m0[18u].x + _531.z;
    float _540 = (((cbMtdParam._m0[18u].z + _513.z) - _537) * _319) + _537;
    vec4 _552 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _564 = (((_552.z - _540) + cbMtdParam._m0[24u].z) * _397) + _540;
    float _570 = ((((_312 * 2.0) * _564) - _564) * cbMtdParam._m0[20u].z) + _564;
    vec4 _583 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _592 = (((cbMtdParam._m0[19u].y + _583.z) - _570) * _292) + _570;
    vec4 _608 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _623 = ((cbMtdParam._m0[21u].w * _476) * ((_608.z * cbMtdParam._m0[21u].z) - _592)) + _592;
    float _634 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _656 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_634 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_634 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _660 = cbPerFrame._m0[22u].x * 2.0;
    float _661 = _660 * cbMtdParam._m0[25u].y;
    float _664 = (_656.x * 0.5) + (-0.25);
    float _667 = (_656.y * 0.5) + (-0.25);
    float _668 = _667 * cbMtdParam._m0[25u].x;
    float _670 = (-0.0) - (cbMtdParam._m0[25u].x * _664);
    float _672 = fract(_661);
    float _674 = fract(_661 + 0.5);
    float _685 = abs((_672 * 2.0) + (-1.0));
    vec4 _702 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_672 * _670) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_668 * _672) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _704 = _702.x;
    float _705 = _702.y;
    float _706 = _702.z;
    vec4 _707 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_674 * _670) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_668 * _674) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _718 = ((_707.x - _704) * _685) + _704;
    float _725 = exp2(log2(_718 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _726 = isnan(cbMtdParam._m0[24u].x) ? _725 : (isnan(_725) ? cbMtdParam._m0[24u].x : max(_725, cbMtdParam._m0[24u].x));
    float _747 = _660 * cbMtdParam._m0[25u].w;
    float _748 = _667 * cbMtdParam._m0[25u].z;
    float _750 = (-0.0) - (cbMtdParam._m0[25u].z * _664);
    float _751 = fract(_747);
    float _753 = fract(_747 + 0.5);
    float _764 = abs((_751 * 2.0) + (-1.0));
    vec4 _780 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_751 * _750) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_748 * _751) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _782 = _780.x;
    float _783 = _780.y;
    float _784 = _780.z;
    vec4 _785 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_753 * _750) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_748 * _753) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _814 = ((_513.x - _533) * _319) + _533;
    float _815 = ((_513.y - _534) * _319) + _534;
    float _820 = ((_552.x - _814) * _397) + _814;
    float _821 = ((_552.y - _815) * _397) + _815;
    float _830 = ((((_583.x - _820) * _292) + _820) * 2.0) + (-1.0);
    float _831 = ((((_583.y - _821) * _292) + _821) * 2.0) + (-1.0);
    float _832 = dot(vec2(_830, _831), vec2(_830, _831));
    float _3792 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _837 = sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))));
    float _847 = ((cbMtdParam._m0[20u].w * ((_308.x * 2.0) + (-1.0))) + _830) + ((((_608.x * 2.0) + (-1.0)) * _476) * cbMtdParam._m0[21u].y);
    float _848 = ((cbMtdParam._m0[20u].w * ((_308.y * 2.0) + (-1.0))) + _831) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_608.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _851 = fma(_837, _224 * NORMAL.x, fma(_848, _231 * TANGENT.x, (_217 * _209) * _847));
    float _854 = fma(_837, _224 * NORMAL.y, fma(_848, _231 * TANGENT.y, (_217 * _210) * _847));
    float _857 = fma(_837, _224 * NORMAL.z, fma(_848, _231 * TANGENT.z, (_217 * _211) * _847));
    float _861 = inversesqrt(dot(vec3(_851, _854, _857), vec3(_851, _854, _857)));
    float _862 = _861 * _851;
    float _863 = _861 * _854;
    float _864 = _861 * _857;
    float _3803 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _865 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3825 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3836 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3847 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _869 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _885 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _936 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _926);
    float _937 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _926);
    float _938 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _926);
    float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
    float _943 = _936 * _942;
    float _944 = _937 * _942;
    float _945 = _938 * _942;
    float _951 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _952 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _970 = fma(_864, cbSceneParam._m0[5u].z, fma(_863, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _862));
    float _973 = fma(_864, cbSceneParam._m0[6u].z, fma(_863, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _862));
    float _976 = fma(_864, cbSceneParam._m0[7u].z, fma(_863, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _862));
    uint _989 = uint(roundEven(NORMAL.w)) * 13u;
    uint _990 = _989 + 9u;
    uint _991 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _997 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_991].x;
    float _998 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_991].y;
    float _999 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_991].z;
    float _3858 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1003 = 1.0 - _869;
    float _1004 = _1000 * _1003;
    float _1005 = _1001 * _1003;
    float _1006 = _1002 * _1003;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _869;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _869;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _869;
    float _1014 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    float _1017 = _1013 + 0.039999999105930328369140625;
    vec4 _1026 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _951, cbSceneParam._m0[86u].y * _952));
    float _1029 = _1026.x * TEXCOORD_3.w;
    float _1030 = dot(vec3(_862, _863, _864), vec3(_943, _944, _945));
    float _1033 = _1030 * 2.0;
    float _1037 = (_1033 * _862) - _943;
    float _1038 = (_1033 * _863) - _944;
    float _1039 = (_1033 * _864) - _945;
    float _1043 = abs(dot(vec3(_943, _944, _945), vec3(_862, _863, _864)));
    float _3891 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1045 = sqrt(_865);
    float _1058 = exp2((_1045 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1045 * 3.0));
    float _1064 = (1.0 - _1058) * ((_1045 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1065 = _1058 * _1045;
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1402;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1128 = fma(_1101, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093));
        float _1132 = fma(_1101, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093));
        float _1136 = fma(_1101, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093));
        float _1160 = _1093 + _862;
        float _1161 = _1097 + _863;
        float _1162 = _1101 + _864;
        float _1172 = fma(_1162, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160)) - _1128;
        float _1173 = fma(_1162, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160)) - _1132;
        float _1174 = fma(_1162, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160)) - _1136;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1128 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1132 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[34u].z) + ((((((_1136 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1230 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1196.x + (-0.5));
        float _1232 = _1230 * (_1196.y + (-0.5));
        float _1233 = _1230 * (_1196.z + (-0.5));
        float _1240 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1203.x + (-0.5));
        float _1242 = _1240 * (_1203.y + (-0.5));
        float _1243 = _1240 * (_1203.z + (-0.5));
        float _1250 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1210.x + (-0.5));
        float _1252 = _1250 * (_1210.y + (-0.5));
        float _1253 = _1250 * (_1210.z + (-0.5));
        float _1260 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1217.x + (-0.5));
        float _1262 = _1260 * (_1217.y + (-0.5));
        float _1263 = _1260 * (_1217.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1284 = (dot(vec3(_862, _863, _864), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1294 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3939 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1296 + 1.0))) + _1301) * _1264;
        float _1311 = _1232 * 0.5;
        float _1312 = _1242 * 0.5;
        float _1313 = _1252 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_862, _863, _864), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3972 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1338 + 1.0))) + _1343) * _1265;
        float _1353 = _1233 * 0.5;
        float _1354 = _1243 * 0.5;
        float _1355 = _1253 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_862, _863, _864), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4005 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1380 + 1.0))) + _1385) * _1266;
        _1402 = _1233;
        _1404 = _1232;
        _1405 = _1231;
        _1406 = _1243;
        _1407 = _1242;
        _1408 = _1241;
        _1409 = _1253;
        _1410 = _1252;
        _1411 = _1251;
        _1412 = _1266;
        _1413 = _1265;
        _1414 = _1264;
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1403;
        _1404 = _1403;
        _1405 = _1403;
        _1406 = _1403;
        _1407 = _1403;
        _1408 = _1403;
        _1409 = _1403;
        _1410 = _1403;
        _1411 = _1403;
        _1412 = _1403;
        _1413 = _1403;
        _1414 = _1403;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1443 = fma(_1101, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093));
        float _1447 = fma(_1101, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093));
        float _1451 = fma(_1101, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093));
        float _1474 = _1093 + _862;
        float _1475 = _1097 + _863;
        float _1476 = _1101 + _864;
        float _1486 = fma(_1476, cbModelParam._m0[30u].z, fma(_1475, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1474)) - _1443;
        float _1487 = fma(_1476, cbModelParam._m0[31u].z, fma(_1475, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1474)) - _1447;
        float _1488 = fma(_1476, cbModelParam._m0[32u].z, fma(_1475, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1474)) - _1451;
        float _1492 = inversesqrt(dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488)));
        float _1505 = ((_1492 * _1486) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1443 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1492 * _1487) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1447 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1492 * _1488) / cbModelParam._m0[35u].z) + ((((((_1451 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1505, _1506, _1507), 0.0);
        float _1542 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1509.x + (-0.5));
        float _1544 = _1542 * (_1509.y + (-0.5));
        float _1545 = _1542 * (_1509.z + (-0.5));
        float _1552 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1516.x + (-0.5));
        float _1554 = _1552 * (_1516.y + (-0.5));
        float _1555 = _1552 * (_1516.z + (-0.5));
        float _1562 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1523.x + (-0.5));
        float _1564 = _1562 * (_1523.y + (-0.5));
        float _1565 = _1562 * (_1523.z + (-0.5));
        float _1572 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1530.x + (-0.5));
        float _1574 = _1572 * (_1530.y + (-0.5));
        float _1575 = _1572 * (_1530.z + (-0.5));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = _1543 * 0.5;
        float _1580 = _1553 * 0.5;
        float _1581 = _1563 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_862, _863, _864), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4068 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1606 + 1.0))) + _1611) * _1576;
        float _1621 = _1544 * 0.5;
        float _1622 = _1554 * 0.5;
        float _1623 = _1564 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_862, _863, _864), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4101 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1648 + 1.0))) + _1653) * _1577;
        float _1663 = _1545 * 0.5;
        float _1664 = _1555 * 0.5;
        float _1665 = _1565 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_862, _863, _864), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4134 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1690 + 1.0))) + _1695) * _1578;
        _1712 = _1545;
        _1713 = _1544;
        _1714 = _1543;
        _1715 = _1555;
        _1716 = _1554;
        _1717 = _1553;
        _1718 = _1565;
        _1719 = _1564;
        _1720 = _1563;
        _1721 = _1578;
        _1722 = _1577;
        _1723 = _1576;
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
    }
    else
    {
        _1712 = _1403;
        _1713 = _1403;
        _1714 = _1403;
        _1715 = _1403;
        _1716 = _1403;
        _1717 = _1403;
        _1718 = _1403;
        _1719 = _1403;
        _1720 = _1403;
        _1721 = _1403;
        _1722 = _1403;
        _1723 = _1403;
        _1724 = 0.0;
        _1725 = 0.0;
        _1726 = 0.0;
    }
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1415)) + _1415;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1416)) + _1416;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1417)) + _1417;
    float _1759 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1736));
    float _1780 = _1037 * 0.5;
    float _1781 = _1038 * 0.5;
    float _1782 = _1039 * 0.5;
    float _1783 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1786 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1789 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1823;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1796 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1402, _1406, _1409, _1412));
        float _1800 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1804 = dot(vec4(_1780, _1781, _1782, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1811 = dot(vec4(cbModelParam._m0[39u]), vec4(_1780, _1781, _1782, 1.0));
        _1823 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1823 = 1.0;
    }
    float _1834;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1825 = dot(vec4(cbModelParam._m0[40u]), vec4(_1780, _1781, _1782, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1838 = (_1834 * cbModelParam._m0[1u].x) + (_1823 * (1.0 - cbModelParam._m0[1u].x));
    float _1848 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _865);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1848 : min(cbModelParam._m0[25u].z, _1848));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1896 = fma(_1101, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093)) + cbModelParam._m0[13u].w;
        float _1900 = fma(_1101, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093)) + cbModelParam._m0[14u].w;
        float _1904 = fma(_1101, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093)) + cbModelParam._m0[15u].w;
        float _1907 = fma(_1039, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037));
        float _1910 = fma(_1039, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037));
        float _1913 = fma(_1039, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037));
        float _1941;
        if (_1907 > 0.0)
        {
            _1941 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1941 = frontier_phi_14_12_ladder;
        }
        float _2144;
        if (_1910 > 0.0)
        {
            _2144 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2144 = frontier_phi_23_19_ladder;
        }
        float _2398;
        if (_1913 > 0.0)
        {
            _2398 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2398 = frontier_phi_35_30_ladder;
        }
        float _2400 = isnan(_2144) ? _1941 : (isnan(_1941) ? _2144 : min(_1941, _2144));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1907) + _1896;
        float _2406 = (_2401 * _1910) + _1900;
        float _2407 = (_2401 * _1913) + _1904;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2408;
        float _2412 = _2408 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 > _2412) || ((_2406 < _2410) || ((_2405 < _2410) || (_2405 > _2412))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2407, cbModelParam._m0[9u].z, fma(_2406, cbModelParam._m0[9u].y, _2405 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2407, cbModelParam._m0[10u].z, fma(_2406, cbModelParam._m0[10u].y, _2405 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2407, cbModelParam._m0[11u].z, fma(_2406, cbModelParam._m0[11u].y, _2405 * cbModelParam._m0[11u].x))), _1849);
            frontier_phi_13_35_ladder = _2535.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2535.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2535.x * cbModelParam._m0[1u].y;
        }
        _1929 = frontier_phi_13_35_ladder_2;
        _1931 = frontier_phi_13_35_ladder_1;
        _1933 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1037, _1038, _1039), _1849);
        _1929 = _1917.x * cbModelParam._m0[1u].y;
        _1931 = _1917.y * cbModelParam._m0[1u].y;
        _1933 = _1917.z * cbModelParam._m0[1u].y;
    }
    float _1937 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _865);
    float _1938 = isnan(_1937) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1937 : min(cbModelParam._m0[25u].w, _1937));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1991 = fma(_1101, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093)) + cbModelParam._m0[21u].w;
        float _1995 = fma(_1101, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093)) + cbModelParam._m0[22u].w;
        float _1999 = fma(_1101, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093)) + cbModelParam._m0[23u].w;
        float _2002 = fma(_1039, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037));
        float _2005 = fma(_1039, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037));
        float _2008 = fma(_1039, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037));
        float _2149;
        if (_2002 > 0.0)
        {
            _2149 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2149 = frontier_phi_25_21_ladder;
        }
        float _2425;
        if (_2005 > 0.0)
        {
            _2425 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2425 = frontier_phi_37_32_ladder;
        }
        float _2638;
        if (_2008 > 0.0)
        {
            _2638 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2638 = frontier_phi_46_43_ladder;
        }
        float _2640 = isnan(_2425) ? _2149 : (isnan(_2149) ? _2425 : min(_2149, _2425));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _2002) + _1991;
        float _2646 = (_2641 * _2005) + _1995;
        float _2647 = (_2641 * _2008) + _1999;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2648;
        float _2651 = _2648 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2647 > _2651) || ((_2647 < _2649) || ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 < _2649) || (_2645 > _2651))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2647, cbModelParam._m0[17u].z, fma(_2646, cbModelParam._m0[17u].y, _2645 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2647, cbModelParam._m0[18u].z, fma(_2646, cbModelParam._m0[18u].y, _2645 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2647, cbModelParam._m0[19u].z, fma(_2646, cbModelParam._m0[19u].y, _2645 * cbModelParam._m0[19u].x))), _1938);
            frontier_phi_22_46_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _2027 = frontier_phi_22_46_ladder_2;
        _2029 = frontier_phi_22_46_ladder_1;
        _2031 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1037, _1038, _1039), _1938);
        _2027 = _2011.x * cbModelParam._m0[1u].z;
        _2029 = _2011.y * cbModelParam._m0[1u].z;
        _2031 = _2011.z * cbModelParam._m0[1u].z;
    }
    float _2044 = (((_1064 * _1014) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2046 = (((_1064 * _1016) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2029 - _1931)) + _1931);
    float _2048 = (((_1064 * _1017) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2051 = fma(_2048, cbSceneParam._m0[89u].z, fma(_2046, cbSceneParam._m0[89u].y, _2044 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2048, cbSceneParam._m0[90u].z, fma(_2046, cbSceneParam._m0[90u].y, _2044 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2048, cbSceneParam._m0[91u].z, fma(_2046, cbSceneParam._m0[91u].y, _2044 * cbSceneParam._m0[91u].x));
    uvec4 _2067 = floatBitsToUint(cbInstanceData._m0[_989 + 5u]);
    uint _2069 = _2067.x * 14u;
    uint _2070 = _2069 + 13u;
    float _2077 = _1029 + (-1.0);
    float _2082 = (cbLight._m0[_2070].x * _2077) + 1.0;
    float _2083 = (cbLight._m0[_2070].y * _2077) + 1.0;
    float _2084 = (cbLight._m0[_2070].z * _2077) + 1.0;
    float _2085 = (cbLight._m0[_2070].w * _2077) + 1.0;
    uint _2086 = _2069 + 5u;
    float _2092 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2096 = _2069 + 4u;
    float _2103 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    uint _2107 = _2069 | 1u;
    float _2118 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_862, _863, _864));
    float _2121 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_862, _863, _864));
    float _4270 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _4281 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2126 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.3183098733425140380859375;
    float _2128 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.3183098733425140380859375;
    float _2135 = ((cbLight._m0[_2086].x * _2092) * _2128) + ((cbLight._m0[_2096].x * _2103) * _2126);
    float _2136 = ((_2092 * cbLight._m0[_2086].y) * _2128) + ((_2103 * cbLight._m0[_2096].y) * _2126);
    float _2137 = ((_2092 * cbLight._m0[_2086].z) * _2128) + ((_2103 * cbLight._m0[_2096].z) * _2126);
    uvec4 _2141 = floatBitsToUint(cbLight._m0[_2069 + 12u]);
    bool _2143 = _2141.x == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2143)
    {
        _2154 = _2135;
        _2156 = _2136;
        _2158 = _2137;
    }
    else
    {
        uint _2162 = _2069 + 6u;
        float _2178 = (dot(vec3(cbLight._m0[_2069 + 2u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4292 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2181 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2154 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _2135;
        _2156 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _2136;
        _2158 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _2137;
    }
    bool _2161 = _2141.y == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2161)
    {
        _2199 = _2154;
        _2201 = _2156;
        _2203 = _2158;
    }
    else
    {
        uint _2369 = _2069 + 7u;
        float _2385 = (dot(vec3(cbLight._m0[_2069 + 3u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2386 = _2385 * _2385;
        float _4308 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2387 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2388 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2199 = (((cbLight._m0[_2369].x * 0.3183098733425140380859375) * _2387) * _2388) + _2154;
        _2201 = (((cbLight._m0[_2369].y * 0.3183098733425140380859375) * _2387) * _2388) + _2156;
        _2203 = (((cbLight._m0[_2369].z * 0.3183098733425140380859375) * _2387) * _2388) + _2158;
    }
    uint _2206 = _2069 + 8u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _865) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_2069].x + _943;
    float _2222 = cbLight._m0[_2069].y + _944;
    float _2223 = cbLight._m0[_2069].z + _945;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2069].xyz));
    float _4324 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _2235 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2236 = dot(vec3(_862, _863, _864), vec3(_2228, _2229, _2230));
    float _4346 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2228, _2229, _2230));
    float _4357 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2220 * _2220;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
    float _2257 = 0.959999978542327880859375 - _1011;
    float _2259 = 0.959999978542327880859375 - _1012;
    float _2260 = 0.959999978542327880859375 - _1013;
    float _2267 = 1.0 - _2220;
    float _2278 = (0.5 / (((_2235 * ((_2234 * _2267) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2267) + _2220) * _2234))) * _2234;
    float _4368 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2280 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    uint _2291 = _2069 + 9u;
    float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _865) * 0.949999988079071044921875);
    float _2303 = _2302 * _2302;
    float _2304 = cbLight._m0[_2107].x + _943;
    float _2305 = cbLight._m0[_2107].y + _944;
    float _2306 = cbLight._m0[_2107].z + _945;
    float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
    float _2311 = _2310 * _2304;
    float _2312 = _2310 * _2305;
    float _2313 = _2310 * _2306;
    float _2314 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2107].xyz));
    float _4379 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2318 = dot(vec3(_862, _863, _864), vec3(_2311, _2312, _2313));
    float _4390 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2311, _2312, _2313));
    float _4401 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2303 * _2303;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0);
    float _2344 = 1.0 - _2303;
    float _2354 = (0.5 / (((_2235 * ((_2317 * _2344) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2344) + _2303) * _2317))) * _2317;
    float _4412 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    float _2366 = (((((_2337 * _2257) + _1014) * cbLight._m0[_2291].x) * _2356) * _2092) + (((((_2256 * _2257) + _1014) * cbLight._m0[_2206].x) * _2280) * _2103);
    float _2367 = (((((_2337 * _2259) + _1016) * cbLight._m0[_2291].y) * _2356) * _2092) + (((((_2256 * _2259) + _1016) * cbLight._m0[_2206].y) * _2280) * _2103);
    float _2368 = (((((_2337 * _2260) + _1017) * cbLight._m0[_2291].z) * _2356) * _2092) + (((((_2256 * _2260) + _1017) * cbLight._m0[_2206].z) * _2280) * _2103);
    float _2430;
    float _2432;
    float _2434;
    if (_2143)
    {
        _2430 = _2366;
        _2432 = _2367;
        _2434 = _2368;
    }
    else
    {
        uint _2436 = _2069 + 2u;
        uint _2440 = _2069 + 10u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _865) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _943;
        float _2457 = cbLight._m0[_2436].y + _944;
        float _2458 = cbLight._m0[_2436].z + _945;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2436].xyz));
        float _4423 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2470 = dot(vec3(_862, _863, _864), vec3(_2463, _2464, _2465));
        float _4434 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4445 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
        float _2496 = 1.0 - _2455;
        float _2506 = (0.5 / (((_2235 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2496) + _2455) * _2469))) * _2469;
        float _4456 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2430 = (((((_2489 * _2257) + _1014) * cbLight._m0[_2440].x) * _2508) * _2509) + _2366;
        _2432 = (((((_2489 * _2259) + _1016) * cbLight._m0[_2440].y) * _2508) * _2509) + _2367;
        _2434 = (((((_2489 * _2260) + _1017) * cbLight._m0[_2440].z) * _2508) * _2509) + _2368;
    }
    float _2544;
    float _2546;
    float _2548;
    if (_2161)
    {
        _2544 = _2430;
        _2546 = _2432;
        _2548 = _2434;
    }
    else
    {
        uint _2555 = _2069 + 3u;
        uint _2559 = _2069 + 11u;
        float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2555].w)) * _865) * 0.949999988079071044921875);
        float _2574 = _2573 * _2573;
        float _2575 = cbLight._m0[_2555].x + _943;
        float _2576 = cbLight._m0[_2555].y + _944;
        float _2577 = cbLight._m0[_2555].z + _945;
        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
        float _2582 = _2581 * _2575;
        float _2583 = _2581 * _2576;
        float _2584 = _2581 * _2577;
        float _2585 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2555].xyz));
        float _4472 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2589 = dot(vec3(_862, _863, _864), vec3(_2582, _2583, _2584));
        float _4483 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2593 = dot(vec3(cbLight._m0[_2555].xyz), vec3(_2582, _2583, _2584));
        float _4494 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2597 = _2574 * _2574;
        float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
        float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
        float _2615 = 1.0 - _2574;
        float _2625 = (0.5 / (((_2235 * ((_2588 * _2615) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2615) + _2574) * _2588))) * _2588;
        float _4505 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2627 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
        float _2628 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2544 = (((((_2608 * _2257) + _1014) * cbLight._m0[_2559].x) * _2627) * _2628) + _2430;
        _2546 = (((((_2608 * _2259) + _1016) * cbLight._m0[_2559].y) * _2627) * _2628) + _2432;
        _2548 = (((((_2608 * _2260) + _1017) * cbLight._m0[_2559].z) * _2627) * _2628) + _2434;
    }
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_2067.y == 0u)
    {
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2703;
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2703;
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2703;
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.x;
        uint _2730 = uint((float(_2718.y) * floor(float(uint(cbSceneParam._m0[85u].y * _952) / _2719))) + floor(float(uint(cbSceneParam._m0[85u].x * _951) / _2719)));
        float _2740 = (log2(_2706 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2741 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        uint _2744 = uint(isnan(14.0) ? _2741 : (isnan(_2741) ? 14.0 : min(_2741, 14.0)));
        uvec4 _2749 = texelFetch(g_lightClusterGridBuffer, int(((_2744 << 2u) + (_2730 << 6u)) >> 2u));
        uint _2750 = _2749.x;
        uint _2751 = _2718.z;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((((1u << ((_2751 >> 4u) & 15u)) + 4294967295u) & _2750) == 0u) || ((_2751 & 240u) == 0u))
        {
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
        }
        else
        {
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            uint _3023 = 0u;
            uint _3032;
            bool _3033;
            for (;;)
            {
                _3032 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                _3033 = _3032 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3033)
                {
                    frontier_phi_61_pred = _3017;
                    frontier_phi_61_pred_1 = _3022;
                    frontier_phi_61_pred_2 = _3021;
                    frontier_phi_61_pred_3 = _3020;
                    frontier_phi_61_pred_4 = _3019;
                    frontier_phi_61_pred_5 = _3018;
                }
                else
                {
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    uint _3147;
                    _3141 = _3017;
                    _3142 = _3018;
                    _3143 = _3019;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3032;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    for (;;)
                    {
                        uint _3151 = uint(findLSB(_3147)) + (_3023 << 5u);
                        uint _3148 = (_3147 + 4294967295u) & _3147;
                        uint _3153 = _3151 * 48u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3153)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 3u)).x));
                        uint _3173 = (_3151 * 48u) + 4u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3192 = (_3151 * 48u) + 8u;
                        vec3 _3203 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x));
                        float _3207 = _3167.x - _2704;
                        float _3208 = _3167.y - _2705;
                        float _3209 = _3167.z - _2706;
                        float _3210 = dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209));
                        float _3213 = inversesqrt(_3210);
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3217 = dot(vec3(_970, _973, _976), vec3(_3214, _3215, _3216));
                        float _3222 = 1.0 - (_3210 * _3167.w);
                        float _4531 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3223 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3224 = sqrt(_3210) * _3186.w;
                        float _3227 = 1.39999997615814208984375 / (_3224 + 1.39999997615814208984375);
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3217) + _3228;
                        float _3234 = _3224 * _3224;
                        float _3238 = ((isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))) * _3223) / ((_3234 * 0.699999988079071044921875) + 1.0);
                        float _3242 = (-0.0) - _2704;
                        float _3243 = (-0.0) - _2705;
                        float _3244 = (-0.0) - _2706;
                        float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3259 = exp2(log2(1.0 / ((_3234 * 3.5) + 5.0)) * 0.25);
                        float _3260 = 1.0 - _1045;
                        float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                        float _3268 = _3267 * _3267;
                        float _3269 = _3268 * _3268;
                        float _3270 = _3249 + _3214;
                        float _3271 = _3250 + _3215;
                        float _3272 = _3251 + _3216;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3280 = dot(vec3(_970, _973, _976), vec3(_3249, _3250, _3251));
                        float _4547 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3284 = dot(vec3(_970, _973, _976), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                        float _4558 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                        float _3292 = _3227 * _3268;
                        float _3293 = _3292 * _3292;
                        float _3296 = ((1.0 - _3293) * _3217) + _3293;
                        float _4569 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3297 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3298 = 1.0 - _3268;
                        float _3308 = (0.5 / (((_3297 * ((_3283 * _3298) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3268) * _3283))) * _3297;
                        float _4580 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3319 = (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) / ((_3291 * _3291) * ((_3234 * 2.1991131305694580078125) + 3.141590118408203125))) * _3223;
                        _3076 = (_3238 * _3186.x) + _3144;
                        _3077 = (_3238 * _3186.y) + _3145;
                        _3078 = (_3238 * _3186.z) + _3146;
                        _3073 = (_3319 * _3203.x) + _3141;
                        _3074 = (_3319 * _3203.y) + _3142;
                        _3075 = (_3319 * _3203.z) + _3143;
                        if (_3148 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3141 = _3073;
                            _3142 = _3074;
                            _3143 = _3075;
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3148;
                        }
                    }
                    frontier_phi_61_pred = _3073;
                    frontier_phi_61_pred_1 = _3078;
                    frontier_phi_61_pred_2 = _3077;
                    frontier_phi_61_pred_3 = _3076;
                    frontier_phi_61_pred_4 = _3075;
                    frontier_phi_61_pred_5 = _3074;
                }
                _2875 = frontier_phi_61_pred;
                _2885 = frontier_phi_61_pred_1;
                _2883 = frontier_phi_61_pred_2;
                _2881 = frontier_phi_61_pred_3;
                _2879 = frontier_phi_61_pred_4;
                _2877 = frontier_phi_61_pred_5;
                uint _3024 = _3023 + 1u;
                if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3017 = _2875;
                    _3018 = _2877;
                    _3019 = _2879;
                    _3020 = _2881;
                    _3021 = _2883;
                    _3022 = _2885;
                    _3023 = _3024;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
        }
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.z;
        uint _2891 = (_2889 >> 8u) & 15u;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((4294967295u << _2891) & _2750) == 0u)
        {
            _2985 = _2874;
            _2987 = _2876;
            _2989 = _2878;
            _2991 = _2880;
            _2993 = _2882;
            _2995 = _2884;
        }
        else
        {
            float _3010 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
            float _3011 = _3010 * _2704;
            float _3012 = _3010 * _2705;
            float _3013 = _3010 * _2706;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2891 < ((_2889 >> 12u) & 15u))
            {
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _3124 = _2874;
                float _3125 = _2876;
                float _3126 = _2878;
                float _3127 = _2880;
                float _3128 = _2882;
                float _3129 = _2884;
                uint _3130 = _2891;
                uint _3139;
                bool _3140;
                for (;;)
                {
                    _3139 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3130 << 2u)) >> 2u)).x;
                    _3140 = _3139 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3140)
                    {
                        frontier_phi_67_pred = _3127;
                        frontier_phi_67_pred_1 = _3128;
                        frontier_phi_67_pred_2 = _3129;
                        frontier_phi_67_pred_3 = _3126;
                        frontier_phi_67_pred_4 = _3125;
                        frontier_phi_67_pred_5 = _3124;
                    }
                    else
                    {
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3337 = _3124;
                        float _3338 = _3125;
                        float _3339 = _3126;
                        float _3340 = _3127;
                        float _3341 = _3128;
                        float _3342 = _3129;
                        uint _3343 = _3139;
                        uint _3344;
                        vec4 _3369;
                        float _3370;
                        vec4 _3385;
                        vec3 _3397;
                        vec4 _3412;
                        vec4 _3427;
                        float _3473;
                        bool _3474;
                        for (;;)
                        {
                            uint _3354 = ((_3130 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3343));
                            _3344 = (_3343 + 4294967295u) & _3343;
                            uint _3356 = _3354 * 40u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3370 = _3369.w;
                            uint _3372 = (_3354 * 40u) + 4u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3354 * 40u) + 8u;
                            _3397 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x));
                            uint _3399 = (_3354 * 40u) + 16u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3354 * 40u) + 20u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3354 * 40u) + 24u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3448 = (_3354 * 40u) + 28u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3473 = fma(_2706, _3461.z, fma(_2705, _3461.y, _3461.x * _2704)) + _3461.w;
                            _3474 = !((fma(_2706, _3442.z, fma(_2705, _3442.y, _3442.x * _2704)) + _3442.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3474)
                            {
                                float _3501 = _3369.x - _2704;
                                float _3502 = _3369.y - _2705;
                                float _3503 = _3369.z - _2706;
                                float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                                float _3507 = inversesqrt(_3504);
                                float _3508 = _3507 * _3501;
                                float _3509 = _3507 * _3502;
                                float _3510 = _3507 * _3503;
                                float _3514 = 1.0 - (_3504 / (_3370 * _3370));
                                float _4591 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3519 = sqrt(_3504) * _3385.w;
                                float _3521 = 1.39999997615814208984375 / (_3519 + 1.39999997615814208984375);
                                float _3522 = _3521 * _3521;
                                float _3525 = ((1.0 - _3522) * dot(vec3(_3508, _3509, _3510), vec3(_970, _973, _976))) + _3522;
                                float _3528 = _3519 * _3519;
                                float _3532 = (fma(_2706, _3412.z, fma(_2705, _3412.y, _3412.x * _2704)) + _3412.w) / _3473;
                                float _3533 = (fma(_2706, _3427.z, fma(_2705, _3427.y, _3427.x * _2704)) + _3427.w) / _3473;
                                float _3537 = 1.0 - dot(vec2(_3532, _3533), vec2(_3532, _3533));
                                float _4607 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3539 = _3538 * (((isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))) * _3515) / ((_3528 * 0.699999988079071044921875) + 1.0));
                                float _3551 = exp2(log2(1.0 / ((_3528 * 3.5) + 5.0)) * 0.25);
                                float _3552 = 1.0 - _1045;
                                float _3559 = sqrt(1.0 - ((1.0 - (_3552 * _3552)) * (1.0 - (_3551 * _3551))));
                                float _3560 = _3559 * _3559;
                                float _3561 = _3560 * _3560;
                                float _3562 = _3508 - _3011;
                                float _3563 = _3509 - _3012;
                                float _3564 = _3510 - _3013;
                                float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                                float _3572 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3011, (-0.0) - _3012, (-0.0) - _3013));
                                float _4618 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3576 = dot(vec3(_970, _973, _976), vec3(_3568 * _3562, _3568 * _3563, _3568 * _3564));
                                float _4629 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3583 = ((_3579 * _3579) * (_3561 + (-1.0))) + 1.0;
                                float _3584 = _3521 * _3560;
                                float _3585 = _3584 * _3584;
                                float _3591 = ((1.0 - _3585) * dot(vec3(_970, _973, _976), vec3(_3508, _3509, _3510))) + _3585;
                                float _4640 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3593 = 1.0 - _3560;
                                float _3603 = (0.5 / (((_3592 * ((_3575 * _3593) + _3560)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3560) * _3575))) * _3592;
                                float _4651 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3613 = (_3538 * _3515) * (((_3561 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3583 * _3583) * ((_3528 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3613 * _3397.x;
                                frontier_phi_73_pred_1 = _3613 * _3397.y;
                                frontier_phi_73_pred_2 = _3539 * _3385.z;
                                frontier_phi_73_pred_3 = _3539 * _3385.y;
                                frontier_phi_73_pred_4 = _3539 * _3385.x;
                                frontier_phi_73_pred_5 = _3613 * _3397.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3617 = frontier_phi_73_pred;
                            _3618 = frontier_phi_73_pred_1;
                            _3622 = frontier_phi_73_pred_2;
                            _3621 = frontier_phi_73_pred_3;
                            _3620 = frontier_phi_73_pred_4;
                            _3619 = frontier_phi_73_pred_5;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            _3324 = _3617 + _3337;
                            _3325 = _3618 + _3338;
                            _3326 = _3619 + _3339;
                            if (_3344 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3344;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3327;
                        frontier_phi_67_pred_1 = _3328;
                        frontier_phi_67_pred_2 = _3329;
                        frontier_phi_67_pred_3 = _3326;
                        frontier_phi_67_pred_4 = _3325;
                        frontier_phi_67_pred_5 = _3324;
                    }
                    _2992 = frontier_phi_67_pred;
                    _2994 = frontier_phi_67_pred_1;
                    _2996 = frontier_phi_67_pred_2;
                    _2990 = frontier_phi_67_pred_3;
                    _2988 = frontier_phi_67_pred_4;
                    _2986 = frontier_phi_67_pred_5;
                    uint _3131 = _3130 + 1u;
                    if (_3131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3124 = _2986;
                        _3125 = _2988;
                        _3126 = _2990;
                        _3127 = _2992;
                        _3128 = _2994;
                        _3129 = _2996;
                        _3130 = _3131;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2994;
                frontier_phi_55_56_ladder_1 = _2996;
                frontier_phi_55_56_ladder_2 = _2992;
                frontier_phi_55_56_ladder_3 = _2990;
                frontier_phi_55_56_ladder_4 = _2988;
                frontier_phi_55_56_ladder_5 = _2986;
            }
            else
            {
                frontier_phi_55_56_ladder = _2882;
                frontier_phi_55_56_ladder_1 = _2884;
                frontier_phi_55_56_ladder_2 = _2880;
                frontier_phi_55_56_ladder_3 = _2878;
                frontier_phi_55_56_ladder_4 = _2876;
                frontier_phi_55_56_ladder_5 = _2874;
            }
            _2985 = frontier_phi_55_56_ladder_5;
            _2987 = frontier_phi_55_56_ladder_4;
            _2989 = frontier_phi_55_56_ladder_3;
            _2991 = frontier_phi_55_56_ladder_2;
            _2993 = frontier_phi_55_56_ladder;
            _2995 = frontier_phi_55_56_ladder_1;
        }
        float _3000 = isnan(1.0) ? _1029 : (isnan(_1029) ? 1.0 : min(_1029, 1.0));
        _2763 = (_3000 * _2991) + _2199;
        _2765 = (_3000 * _2993) + _2201;
        _2767 = (_3000 * _2995) + _2203;
        _2769 = ((_2985 * _1014) * _3000) + _2544;
        _2771 = ((_2987 * _1016) * _3000) + _2546;
        _2773 = ((_2989 * _1017) * _3000) + _2548;
    }
    else
    {
        _2763 = _2199;
        _2765 = _2201;
        _2767 = _2203;
        _2769 = _2544;
        _2771 = _2546;
        _2773 = _2548;
    }
    uint _2779 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _2785 = (isnan(cbMtdParam._m0[24u].y) ? _726 : (isnan(_726) ? cbMtdParam._m0[24u].y : min(_726, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4667 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4678 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4689 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _2808 = (((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2763 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1029))) + ((_2769 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1838)) * cbPerFrame._m0[3u].x)) + ((_2785 * (((((_785.x - _782) * _764) + _782) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _718) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2779].x);
    float _2810 = (((_2785 * (((((_785.y - _783) * _764) + _783) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_707.y - _705) * _685) + _705)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2779].y) + ((_2771 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1838)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2765 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1029)));
    float _2812 = (((_2785 * (((((_785.z - _784) * _764) + _784) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_707.z - _706) * _685) + _706)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2779].z) + ((_2773 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1838)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2767 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1029)));
    uint _2816 = _989 + 6u;
    float _2824 = _951 / cbSceneParam._m0[86u].x;
    float _2825 = _952 / cbSceneParam._m0[86u].y;
    vec4 _2839 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, (log2((isnan(cbSceneParam._m0[77u].w) ? _885 : (isnan(_885) ? cbSceneParam._m0[77u].w : min(_885, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2841 = _2839.x;
    float _2842 = _2839.y;
    float _2843 = _2839.z;
    float _2844 = _2839.w;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_885 > cbSceneParam._m0[78u].w)
    {
        float _2899 = isnan(_885) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _885 : min(cbSceneParam._m0[80u].w, _885));
        float _2900 = _2899 / _885;
        float _2911 = _2900 * _936;
        float _2912 = _937 * _2900;
        float _2913 = (-0.0) - _2912;
        float _2914 = _2900 * _938;
        float _2916 = (cbSceneParam._m0[77u].w * _2913) / _2899;
        float _2917 = _2916 + cbSceneParam._m0[79u].w;
        float _2918 = cbSceneParam._m0[79u].w - _2912;
        float _2924 = sqrt(((_2911 * _2911) + (_2912 * _2912)) + (_2914 * _2914));
        float _2927 = (1.0 - (cbSceneParam._m0[77u].w / _2899)) * _2924;
        float _2932 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2934 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3086;
        if (abs((_2913 - _2916) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3086 = ((((_2917 > 0.0) ? exp2(_2932 * _2917) : (2.0 - exp2(_2934 * _2917))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2927;
        }
        else
        {
            float _3046 = 1.0 / cbSceneParam._m0[80u].x;
            float _3047 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : max(_2917, _2918));
            float _3048 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : min(_2917, _2918));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            float _3058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : min(_3048, 0.0));
            _3086 = ((abs(_2924 / _2913) * cbSceneParam._m0[80u].y) * ((((_3057 - _3058) * 2.0) - ((exp2(_2932 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0)))) - exp2(_2932 * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0))))) * _3046)) - ((exp2(_2934 * _3057) - exp2(_2934 * _3058)) * _3046))) + (_2927 * cbSceneParam._m0[80u].z);
        }
        vec4 _3088 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, 1.0), 0.0);
        float _3097 = exp2((_3086 * (-1.44269502162933349609375)) * (1.0 - _3088.w));
        float _3098 = log2(_3097);
        float _3114 = log2(_2844);
        _2936 = (exp2(_3114 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].x)) * _3088.x) / cbSceneParam._m0[78u].x)) + _2841;
        _2938 = (exp2(_3114 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].y)) * _3088.y) / cbSceneParam._m0[78u].y)) + _2842;
        _2940 = (exp2(_3114 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].z)) * _3088.z) / cbSceneParam._m0[78u].z)) + _2843;
        _2942 = _3097 * _2844;
    }
    else
    {
        _2936 = _2841;
        _2938 = _2842;
        _2940 = _2843;
        _2942 = _2844;
    }
    float _2953 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2954 = _2953 == 3.0;
    float _2955 = log2(_2942);
    float _2962 = exp2(_2955 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0)));
    float _2963 = exp2(_2955 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)));
    float _2964 = exp2(_2955 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0)));
    float _2973 = (_2953 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2973 * (_2954 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2936)));
    SV_Target.y = _2973 * (_2954 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.z = _2973 * (_2954 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.w = cbInstanceData._m0[_2816].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2816].w;
}


