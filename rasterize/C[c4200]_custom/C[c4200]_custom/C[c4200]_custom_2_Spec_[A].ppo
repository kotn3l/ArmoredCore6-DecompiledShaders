#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 10) uniform texture2D C_c4200_custom_snp_0_Texture2D_26;
layout(set = 0, binding = 8) uniform texture2D C_c4200_custom_snp_0_Texture2D_24;
layout(set = 0, binding = 9) uniform texture2D C_c4200_custom_snp_0_Texture2D_25;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

float _718;
uint _2205;
uint _2206;
uint _2207;
uint _2474;
uint _2475;
uint _2476;
float _2733;
float _2734;
float _2735;
float _2736;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _175 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _176 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _177 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _215 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_26, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _228 = cbMtdParam._m0[15u].x * _215.x;
    float _229 = cbMtdParam._m0[15u].y * _215.y;
    float _230 = cbMtdParam._m0[15u].z * _215.z;
    float _236 = cbMtdParam._m0[22u].w - (cbMtdParam._m0[22u].w * _215.w);
    float _240 = _228 - (_236 * _228);
    float _241 = _229 - (_236 * _229);
    float _242 = _230 - (_236 * _230);
    vec4 _258 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_25, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _2745 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _2745 : (isnan(_2745) ? 1.0 : min(_2745, 1.0))));
    float _276 = _258.z * cbMtdParam._m0[23u].x;
    vec4 _289 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _291 = _289.x;
    float _294 = fma(_275, _190 * NORMAL.x, fma(_268, _197 * TANGENT.x, (_183 * _175) * _266));
    float _297 = fma(_275, _190 * NORMAL.y, fma(_268, _197 * TANGENT.y, (_183 * _176) * _266));
    float _300 = fma(_275, _190 * NORMAL.z, fma(_268, _197 * TANGENT.z, (_183 * _177) * _266));
    float _304 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _305 = _304 * _294;
    float _306 = _304 * _297;
    float _307 = _304 * _300;
    float _2756 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _308 = isnan(1.0) ? _2756 : (isnan(_2756) ? 1.0 : min(_2756, 1.0));
    float _2767 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _309 = isnan(1.0) ? _2767 : (isnan(_2767) ? 1.0 : min(_2767, 1.0));
    float _2778 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _310 = isnan(1.0) ? _2778 : (isnan(_2778) ? 1.0 : min(_2778, 1.0));
    float _2789 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _311 = isnan(1.0) ? _2789 : (isnan(_2789) ? 1.0 : min(_2789, 1.0));
    float _327 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _532 = sqrt(((_378 * _378) + (_379 * _379)) + (_380 * _380));
        float _538 = (cbMatDynParam._m0[5u].x * _532) + cbMatDynParam._m0[5u].y;
        float _2800 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
        float _539 = isnan(1.0) ? _2800 : (isnan(_2800) ? 1.0 : min(_2800, 1.0));
        float _543 = (cbMatDynParam._m0[5u].z * _532) + cbMatDynParam._m0[5u].w;
        float _2811 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2811 : (isnan(_2811) ? 1.0 : min(_2811, 1.0))) - _539)) + _539) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _427 = fma(_307, cbSceneParam._m0[5u].z, fma(_306, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _305));
    float _430 = fma(_307, cbSceneParam._m0[6u].z, fma(_306, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _305));
    float _433 = fma(_307, cbSceneParam._m0[7u].z, fma(_306, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _305));
    vec4 _442 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _445 = _442.x * TEXCOORD_3.w;
    float _446 = dot(vec3(_305, _306, _307), vec3(_385, _386, _387));
    float _449 = _446 * 2.0;
    float _453 = (_449 * _305) - _385;
    float _454 = (_449 * _306) - _386;
    float _455 = (_449 * _307) - _387;
    float _459 = abs(dot(vec3(_385, _386, _387), vec3(_305, _306, _307)));
    float _2822 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0));
    float _466 = sqrt(_311);
    float _478 = exp2((_466 * 5.0) * log2(1.0 - (_460 * 0.999000012874603271484375))) / (4.0 - (_466 * 3.0));
    float _484 = (1.0 - _478) * ((_466 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _485 = _478 * _466;
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _717;
    float _719;
    float _720;
    float _721;
    float _722;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _577 = fma(_521, cbModelParam._m0[26u].z, fma(_517, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _513));
        float _581 = fma(_521, cbModelParam._m0[27u].z, fma(_517, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _513));
        float _585 = fma(_521, cbModelParam._m0[28u].z, fma(_517, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _513));
        float _610 = _513 + _305;
        float _611 = _517 + _306;
        float _612 = _521 + _307;
        float _622 = fma(_612, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610)) - _577;
        float _623 = fma(_612, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610)) - _581;
        float _624 = fma(_612, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610)) - _585;
        float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
        float _641 = ((_628 * _622) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_577 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_628 * _623) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_581 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_628 * _624) / cbModelParam._m0[34u].z) + ((((((_585 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        float _680 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _690 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _700 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _710 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_667.x + (-0.5));
        float _712 = _710 * (_667.y + (-0.5));
        float _713 = _710 * (_667.z + (-0.5));
        _717 = _680 * (_646.z + (-0.5));
        _719 = _680 * (_646.y + (-0.5));
        _720 = _680 * (_646.x + (-0.5));
        _721 = _690 * (_653.z + (-0.5));
        _722 = _690 * (_653.y + (-0.5));
        _723 = _690 * (_653.x + (-0.5));
        _724 = _700 * (_660.z + (-0.5));
        _725 = _700 * (_660.y + (-0.5));
        _726 = _700 * (_660.x + (-0.5));
        _727 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        _728 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        _729 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    }
    else
    {
        _717 = _718;
        _719 = _718;
        _720 = _718;
        _721 = _718;
        _722 = _718;
        _723 = _718;
        _724 = _718;
        _725 = _718;
        _726 = _718;
        _727 = _718;
        _728 = _718;
        _729 = _718;
    }
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _758 = fma(_521, cbModelParam._m0[30u].z, fma(_517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _513));
        float _762 = fma(_521, cbModelParam._m0[31u].z, fma(_517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _513));
        float _766 = fma(_521, cbModelParam._m0[32u].z, fma(_517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _513));
        float _789 = _513 + _305;
        float _790 = _517 + _306;
        float _791 = _521 + _307;
        float _801 = fma(_791, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _789)) - _758;
        float _802 = fma(_791, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _789)) - _762;
        float _803 = fma(_791, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _789)) - _766;
        float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
        float _820 = ((_807 * _801) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_758 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_807 * _802) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_762 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_807 * _803) / cbModelParam._m0[35u].z) + ((((((_766 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _857 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _867 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _877 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _887 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_845.x + (-0.5));
        float _889 = _887 * (_845.y + (-0.5));
        float _890 = _887 * (_845.z + (-0.5));
        _894 = _857 * (_824.z + (-0.5));
        _895 = _857 * (_824.y + (-0.5));
        _896 = _857 * (_824.x + (-0.5));
        _897 = _867 * (_831.z + (-0.5));
        _898 = _867 * (_831.y + (-0.5));
        _899 = _867 * (_831.x + (-0.5));
        _900 = _877 * (_838.z + (-0.5));
        _901 = _877 * (_838.y + (-0.5));
        _902 = _877 * (_838.x + (-0.5));
        _903 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        _904 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        _905 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    }
    else
    {
        _894 = _718;
        _895 = _718;
        _896 = _718;
        _897 = _718;
        _898 = _718;
        _899 = _718;
        _900 = _718;
        _901 = _718;
        _902 = _718;
        _903 = _718;
        _904 = _718;
        _905 = _718;
    }
    float _920 = _453 * 0.5;
    float _921 = _454 * 0.5;
    float _922 = _455 * 0.5;
    float _923 = dot(vec4(_920, _921, _922, 1.0), vec4(_896, _899, _902, _905));
    float _926 = dot(vec4(_920, _921, _922, 1.0), vec4(_895, _898, _901, _904));
    float _929 = dot(vec4(_920, _921, _922, 1.0), vec4(_894, _897, _900, _903));
    float _964;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _936 = dot(vec4(_920, _921, _922, 1.0), vec4(_717, _721, _724, _727));
        float _940 = dot(vec4(_920, _921, _922, 1.0), vec4(_719, _722, _725, _728));
        float _944 = dot(vec4(_920, _921, _922, 1.0), vec4(_720, _723, _726, _729));
        float _951 = dot(vec4(cbModelParam._m0[39u]), vec4(_920, _921, _922, 1.0));
        _964 = dot(vec3(isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)), isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)), isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_951) ? 0.0 : (isnan(0.0) ? _951 : max(0.0, _951))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _964 = 1.0;
    }
    float _975;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _966 = dot(vec4(cbModelParam._m0[40u]), vec4(_920, _921, _922, 1.0));
        _975 = dot(vec3(isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)), isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)), isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_966) ? 0.0 : (isnan(0.0) ? _966 : max(0.0, _966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _975 = 1.0;
    }
    float _979 = (_975 * cbModelParam._m0[1u].x) + (_964 * (1.0 - cbModelParam._m0[1u].x));
    float _986 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _311);
    float _987 = isnan(_986) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _986 : min(cbModelParam._m0[25u].z, _986));
    float _1069;
    float _1071;
    float _1073;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1036 = fma(_521, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513)) + cbModelParam._m0[13u].w;
        float _1040 = fma(_521, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513)) + cbModelParam._m0[14u].w;
        float _1044 = fma(_521, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513)) + cbModelParam._m0[15u].w;
        float _1047 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _1050 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _1053 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _1081;
        if (_1047 > 0.0)
        {
            _1081 = abs((1.0 - _1036) / _1047);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1047 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1036 + 1.0) / _1047);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1081 = frontier_phi_17_15_ladder;
        }
        float _1428;
        if (_1050 > 0.0)
        {
            _1428 = abs((1.0 - _1040) / _1050);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1050 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1040 + 1.0) / _1050);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1428 = frontier_phi_26_22_ladder;
        }
        float _1634;
        if (_1053 > 0.0)
        {
            _1634 = abs((1.0 - _1044) / _1053);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1053 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1044 + 1.0) / _1053);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1634 = frontier_phi_38_33_ladder;
        }
        float _1636 = isnan(_1428) ? _1081 : (isnan(_1081) ? _1428 : min(_1081, _1428));
        float _1637 = isnan(_1634) ? _1636 : (isnan(_1636) ? _1634 : min(_1636, _1634));
        float _1641 = (_1637 * _1047) + _1036;
        float _1642 = (_1637 * _1050) + _1040;
        float _1643 = (_1637 * _1053) + _1044;
        float _1644 = _1637 * 9.9999997473787516355514526367188e-05;
        float _1646 = (-1.0) - _1644;
        float _1648 = _1644 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1643 > _1648) || ((_1643 < _1646) || ((_1642 > _1648) || ((_1642 < _1646) || ((_1641 < _1646) || (_1641 > _1648))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1836 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1643, cbModelParam._m0[9u].z, fma(_1642, cbModelParam._m0[9u].y, _1641 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1643, cbModelParam._m0[10u].z, fma(_1642, cbModelParam._m0[10u].y, _1641 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1643, cbModelParam._m0[11u].z, fma(_1642, cbModelParam._m0[11u].y, _1641 * cbModelParam._m0[11u].x))), _987);
            frontier_phi_16_38_ladder = _1836.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1836.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1836.x * cbModelParam._m0[1u].y;
        }
        _1069 = frontier_phi_16_38_ladder_2;
        _1071 = frontier_phi_16_38_ladder_1;
        _1073 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1057 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _987);
        _1069 = _1057.x * cbModelParam._m0[1u].y;
        _1071 = _1057.y * cbModelParam._m0[1u].y;
        _1073 = _1057.z * cbModelParam._m0[1u].y;
    }
    float _1077 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _311);
    float _1078 = isnan(_1077) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1077 : min(cbModelParam._m0[25u].w, _1077));
    float _1170;
    float _1172;
    float _1174;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1134 = fma(_521, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513)) + cbModelParam._m0[21u].w;
        float _1138 = fma(_521, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513)) + cbModelParam._m0[22u].w;
        float _1142 = fma(_521, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513)) + cbModelParam._m0[23u].w;
        float _1145 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1148 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1151 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1433;
        if (_1145 > 0.0)
        {
            _1433 = abs((1.0 - _1134) / _1145);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1145 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1134 + 1.0) / _1145);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1433 = frontier_phi_28_24_ladder;
        }
        float _1661;
        if (_1148 > 0.0)
        {
            _1661 = abs((1.0 - _1138) / _1148);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1148 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1138 + 1.0) / _1148);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1661 = frontier_phi_40_35_ladder;
        }
        float _1968;
        if (_1151 > 0.0)
        {
            _1968 = abs((1.0 - _1142) / _1151);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1151 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1142 + 1.0) / _1151);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _1968 = frontier_phi_51_46_ladder;
        }
        float _1970 = isnan(_1661) ? _1433 : (isnan(_1433) ? _1661 : min(_1433, _1661));
        float _1971 = isnan(_1968) ? _1970 : (isnan(_1970) ? _1968 : min(_1970, _1968));
        float _1975 = (_1971 * _1145) + _1134;
        float _1976 = (_1971 * _1148) + _1138;
        float _1977 = (_1971 * _1151) + _1142;
        float _1978 = _1971 * 9.9999997473787516355514526367188e-05;
        float _1979 = (-1.0) - _1978;
        float _1981 = _1978 + 1.0;
        float frontier_phi_25_51_ladder;
        float frontier_phi_25_51_ladder_1;
        float frontier_phi_25_51_ladder_2;
        if ((_1977 > _1981) || ((_1977 < _1979) || ((_1976 > _1981) || ((_1976 < _1979) || ((_1975 < _1979) || (_1975 > _1981))))))
        {
            frontier_phi_25_51_ladder = 0.0;
            frontier_phi_25_51_ladder_1 = 0.0;
            frontier_phi_25_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2103 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1977, cbModelParam._m0[17u].z, fma(_1976, cbModelParam._m0[17u].y, _1975 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1977, cbModelParam._m0[18u].z, fma(_1976, cbModelParam._m0[18u].y, _1975 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1977, cbModelParam._m0[19u].z, fma(_1976, cbModelParam._m0[19u].y, _1975 * cbModelParam._m0[19u].x))), _1078);
            frontier_phi_25_51_ladder = _2103.z * cbModelParam._m0[1u].z;
            frontier_phi_25_51_ladder_1 = _2103.y * cbModelParam._m0[1u].z;
            frontier_phi_25_51_ladder_2 = _2103.x * cbModelParam._m0[1u].z;
        }
        _1170 = frontier_phi_25_51_ladder_2;
        _1172 = frontier_phi_25_51_ladder_1;
        _1174 = frontier_phi_25_51_ladder;
    }
    else
    {
        vec4 _1154 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _1078);
        _1170 = _1154.x * cbModelParam._m0[1u].z;
        _1172 = _1154.y * cbModelParam._m0[1u].z;
        _1174 = _1154.z * cbModelParam._m0[1u].z;
    }
    float _1187 = (((_484 * _308) + _485) * _445) * ((cbModelParam._m0[1u].w * (_1170 - _1069)) + _1069);
    float _1189 = (((_484 * _309) + _485) * _445) * ((cbModelParam._m0[1u].w * (_1172 - _1071)) + _1071);
    float _1191 = (((_484 * _310) + _485) * _445) * ((cbModelParam._m0[1u].w * (_1174 - _1073)) + _1073);
    float _1212 = fma(_1191, cbSceneParam._m0[89u].z, fma(_1189, cbSceneParam._m0[89u].y, _1187 * cbSceneParam._m0[89u].x));
    float _1215 = fma(_1191, cbSceneParam._m0[90u].z, fma(_1189, cbSceneParam._m0[90u].y, _1187 * cbSceneParam._m0[90u].x));
    float _1218 = fma(_1191, cbSceneParam._m0[91u].z, fma(_1189, cbSceneParam._m0[91u].y, _1187 * cbSceneParam._m0[91u].x));
    uint _1225 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1229 = floatBitsToUint(cbInstanceData._m0[_1225 + 5u]);
    uint _1231 = _1229.x * 14u;
    uint _1232 = _1231 + 13u;
    float _1238 = _445 + (-1.0);
    float _1242 = (cbLight._m0[_1232].x * _1238) + 1.0;
    float _1243 = (cbLight._m0[_1232].y * _1238) + 1.0;
    float _1244 = (cbLight._m0[_1232].w * _1238) + 1.0;
    uint _1248 = _1231 + 8u;
    float _1264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1231].w)) * _311) * 0.949999988079071044921875);
    float _1265 = _1264 * _1264;
    float _1266 = cbLight._m0[_1231].x + _385;
    float _1267 = cbLight._m0[_1231].y + _386;
    float _1268 = cbLight._m0[_1231].z + _387;
    float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
    float _1273 = _1272 * _1266;
    float _1274 = _1272 * _1267;
    float _1275 = _1272 * _1268;
    float _1276 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1231].xyz));
    float _2948 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
    float _1279 = isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0));
    float _2959 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _1280 = isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0));
    float _1281 = dot(vec3(_305, _306, _307), vec3(_1273, _1274, _1275));
    float _2970 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
    float _1284 = isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0));
    float _1285 = dot(vec3(cbLight._m0[_1231].xyz), vec3(_1273, _1274, _1275));
    float _2981 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
    float _1289 = _1265 * _1265;
    float _1293 = ((_1284 * _1284) * (_1289 + (-1.0))) + 1.0;
    float _1301 = exp2(log2(1.0 - (isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0)))) * 5.0);
    float _1302 = 1.0 - _308;
    float _1303 = 1.0 - _309;
    float _1304 = 1.0 - _310;
    float _1311 = 1.0 - _1265;
    float _1322 = (0.5 / (((_1280 * ((_1279 * _1311) + _1265)) + 9.9999999392252902907785028219223e-09) + (((_1280 * _1311) + _1265) * _1279))) * _1279;
    float _2992 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _1324 = (isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0))) * (_1289 / ((_1293 * _1293) * 3.141590118408203125));
    float _1325 = isnan(1.0) ? _1242 : (isnan(_1242) ? 1.0 : min(_1242, 1.0));
    uint _1335 = _1231 | 1u;
    uint _1339 = _1231 + 9u;
    float _1353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1335].w)) * _311) * 0.949999988079071044921875);
    float _1354 = _1353 * _1353;
    float _1355 = cbLight._m0[_1335].x + _385;
    float _1356 = cbLight._m0[_1335].y + _386;
    float _1357 = cbLight._m0[_1335].z + _387;
    float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
    float _1362 = _1361 * _1355;
    float _1363 = _1361 * _1356;
    float _1364 = _1361 * _1357;
    float _1365 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1335].xyz));
    float _3008 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
    float _1368 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
    float _1369 = dot(vec3(_305, _306, _307), vec3(_1362, _1363, _1364));
    float _3019 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
    float _1372 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
    float _1373 = dot(vec3(cbLight._m0[_1335].xyz), vec3(_1362, _1363, _1364));
    float _3030 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
    float _1377 = _1354 * _1354;
    float _1381 = ((_1372 * _1372) * (_1377 + (-1.0))) + 1.0;
    float _1388 = exp2(log2(1.0 - (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0)))) * 5.0);
    float _1395 = 1.0 - _1354;
    float _1405 = (0.5 / (((_1280 * ((_1368 * _1395) + _1354)) + 9.9999999392252902907785028219223e-09) + (((_1280 * _1395) + _1354) * _1368))) * _1368;
    float _3041 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1407 = (isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0))) * (_1377 / ((_1381 * _1381) * 3.141590118408203125));
    float _1408 = isnan(1.0) ? _1243 : (isnan(_1243) ? 1.0 : min(_1243, 1.0));
    float _1418 = (((((_1388 * _1302) + _308) * cbLight._m0[_1339].x) * _1407) * _1408) + (((((_1301 * _1302) + _308) * cbLight._m0[_1248].x) * _1324) * _1325);
    float _1419 = (((((_1388 * _1303) + _309) * cbLight._m0[_1339].y) * _1407) * _1408) + (((((_1301 * _1303) + _309) * cbLight._m0[_1248].y) * _1324) * _1325);
    float _1420 = (((((_1388 * _1304) + _310) * cbLight._m0[_1339].z) * _1407) * _1408) + (((((_1301 * _1304) + _310) * cbLight._m0[_1248].z) * _1324) * _1325);
    uvec4 _1425 = floatBitsToUint(cbLight._m0[_1231 + 12u]);
    float _1438;
    float _1440;
    float _1442;
    if (_1425.x == 0u)
    {
        _1438 = _1418;
        _1440 = _1419;
        _1442 = _1420;
    }
    else
    {
        float _1448 = (cbLight._m0[_1232].z * _1238) + 1.0;
        uint _1449 = _1231 + 2u;
        uint _1453 = _1231 + 10u;
        float _1467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1449].w)) * _311) * 0.949999988079071044921875);
        float _1468 = _1467 * _1467;
        float _1469 = cbLight._m0[_1449].x + _385;
        float _1470 = cbLight._m0[_1449].y + _386;
        float _1471 = cbLight._m0[_1449].z + _387;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1476 = _1475 * _1469;
        float _1477 = _1475 * _1470;
        float _1478 = _1475 * _1471;
        float _1479 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1449].xyz));
        float _3057 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1482 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
        float _1483 = dot(vec3(_305, _306, _307), vec3(_1476, _1477, _1478));
        float _3068 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1486 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _1487 = dot(vec3(cbLight._m0[_1449].xyz), vec3(_1476, _1477, _1478));
        float _3079 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = _1468 * _1468;
        float _1495 = ((_1486 * _1486) * (_1491 + (-1.0))) + 1.0;
        float _1502 = exp2(log2(1.0 - (isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0)))) * 5.0);
        float _1509 = 1.0 - _1468;
        float _1519 = (0.5 / (((_1280 * ((_1482 * _1509) + _1468)) + 9.9999999392252902907785028219223e-09) + (((_1280 * _1509) + _1468) * _1482))) * _1482;
        float _3090 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1521 = (isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0))) * (_1491 / ((_1495 * _1495) * 3.141590118408203125));
        float _1522 = isnan(1.0) ? _1448 : (isnan(_1448) ? 1.0 : min(_1448, 1.0));
        _1438 = (((((_1502 * _1302) + _308) * cbLight._m0[_1453].x) * _1521) * _1522) + _1418;
        _1440 = (((((_1502 * _1303) + _309) * cbLight._m0[_1453].y) * _1521) * _1522) + _1419;
        _1442 = (((((_1502 * _1304) + _310) * cbLight._m0[_1453].z) * _1521) * _1522) + _1420;
    }
    float _1540;
    float _1542;
    float _1544;
    if (_1425.y == 0u)
    {
        _1540 = _1438;
        _1542 = _1440;
        _1544 = _1442;
    }
    else
    {
        uint _1551 = _1231 + 3u;
        uint _1555 = _1231 + 11u;
        float _1569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1551].w)) * _311) * 0.949999988079071044921875);
        float _1570 = _1569 * _1569;
        float _1571 = cbLight._m0[_1551].x + _385;
        float _1572 = cbLight._m0[_1551].y + _386;
        float _1573 = cbLight._m0[_1551].z + _387;
        float _1577 = inversesqrt(dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573)));
        float _1578 = _1577 * _1571;
        float _1579 = _1577 * _1572;
        float _1580 = _1577 * _1573;
        float _1581 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1551].xyz));
        float _3106 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1584 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
        float _1585 = dot(vec3(_305, _306, _307), vec3(_1578, _1579, _1580));
        float _3117 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1588 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _1589 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1578, _1579, _1580));
        float _3128 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = _1570 * _1570;
        float _1597 = ((_1588 * _1588) * (_1593 + (-1.0))) + 1.0;
        float _1604 = exp2(log2(1.0 - (isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0)))) * 5.0);
        float _1611 = 1.0 - _1570;
        float _1621 = (0.5 / (((_1280 * ((_1584 * _1611) + _1570)) + 9.9999999392252902907785028219223e-09) + (((_1280 * _1611) + _1570) * _1584))) * _1584;
        float _3139 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1623 = (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0))) * (_1593 / ((_1597 * _1597) * 3.141590118408203125));
        float _1624 = isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0));
        _1540 = (((((_1604 * _1302) + _308) * cbLight._m0[_1555].x) * _1623) * _1624) + _1438;
        _1542 = (((((_1604 * _1303) + _309) * cbLight._m0[_1555].y) * _1623) * _1624) + _1440;
        _1544 = (((((_1604 * _1304) + _310) * cbLight._m0[_1555].z) * _1623) * _1624) + _1442;
    }
    float _1766;
    float _1768;
    float _1770;
    if (_1229.y == 0u)
    {
        float _1705 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1706 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1705;
        float _1707 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1705;
        float _1708 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1705;
        uvec4 _1720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1721 = _1720.x;
        uint _1732 = uint((float(_1720.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _1721))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _1721)));
        float _1742 = (log2(_1708 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1743 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        uint _1746 = uint(isnan(14.0) ? _1743 : (isnan(_1743) ? 14.0 : min(_1743, 14.0)));
        uvec4 _1751 = texelFetch(g_lightClusterGridBuffer, int(((_1746 << 2u) + (_1732 << 6u)) >> 2u));
        uint _1752 = _1751.x;
        uint _1753 = _1720.z;
        float _1845;
        float _1847;
        float _1849;
        if (((((1u << ((_1753 >> 4u) & 15u)) + 4294967295u) & _1752) == 0u) || ((_1753 & 240u) == 0u))
        {
            _1845 = 0.0;
            _1847 = 0.0;
            _1849 = 0.0;
        }
        else
        {
            float _1846;
            float _1848;
            float _1850;
            float _2017 = 0.0;
            float _2018 = 0.0;
            float _2019 = 0.0;
            uint _2020 = 0u;
            uint _2029;
            bool _2030;
            for (;;)
            {
                _2029 = texelFetch(g_lightClassification, int((((_1746 << 5u) + (_1732 << 9u)) + (_2020 << 2u)) >> 2u)).x;
                _2030 = _2029 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_2030)
                {
                    frontier_phi_62_pred = _2019;
                    frontier_phi_62_pred_1 = _2018;
                    frontier_phi_62_pred_2 = _2017;
                }
                else
                {
                    float _2175;
                    float _2176;
                    float _2177;
                    uint _2178;
                    _2175 = _2017;
                    _2176 = _2018;
                    _2177 = _2019;
                    _2178 = _2029;
                    float _2108;
                    float _2109;
                    float _2110;
                    for (;;)
                    {
                        uint _2182 = uint(findLSB(_2178)) + (_2020 << 5u);
                        uint _2179 = (_2178 + 4294967295u) & _2178;
                        uint _2184 = _2182 * 48u;
                        vec4 _2198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2184)).x, texelFetch(g_PointLightRenderingBuffer, int(_2184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2184 + 3u)).x));
                        uint _2215 = (_2182 * 48u) + 8u;
                        vec3 _2226 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2215)).x, texelFetch(g_PointLightRenderingBuffer, int(_2215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2215 + 2u)).x));
                        float _2230 = _2198.x - _1706;
                        float _2231 = _2198.y - _1707;
                        float _2232 = _2198.z - _1708;
                        float _2233 = dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232));
                        float _2236 = inversesqrt(_2233);
                        float _2237 = _2236 * _2230;
                        float _2238 = _2236 * _2231;
                        float _2239 = _2236 * _2232;
                        float _2245 = 1.0 - (_2233 * _2198.w);
                        float _3165 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
                        float _2247 = sqrt(_2233) * uintBitsToFloat(uvec4(_2205, _2206, _2207, texelFetch(g_PointLightRenderingBuffer, int(((_2182 * 48u) + 4u) + 3u)).x)).w;
                        float _2251 = _2247 * _2247;
                        float _2252 = (-0.0) - _1706;
                        float _2253 = (-0.0) - _1707;
                        float _2254 = (-0.0) - _1708;
                        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
                        float _2259 = _2258 * _2252;
                        float _2260 = _2258 * _2253;
                        float _2261 = _2258 * _2254;
                        float _2269 = exp2(log2(1.0 / ((_2251 * 3.5) + 5.0)) * 0.25);
                        float _2270 = 1.0 - _466;
                        float _2277 = sqrt(1.0 - ((1.0 - (_2270 * _2270)) * (1.0 - (_2269 * _2269))));
                        float _2278 = _2277 * _2277;
                        float _2279 = _2278 * _2278;
                        float _2280 = _2259 + _2237;
                        float _2281 = _2260 + _2238;
                        float _2282 = _2261 + _2239;
                        float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
                        float _2290 = dot(vec3(_427, _430, _433), vec3(_2259, _2260, _2261));
                        float _3176 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
                        float _2293 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
                        float _2294 = dot(vec3(_427, _430, _433), vec3(_2286 * _2280, _2286 * _2281, _2286 * _2282));
                        float _3187 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
                        float _2297 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
                        float _2301 = ((_2297 * _2297) * (_2279 + (-1.0))) + 1.0;
                        float _2302 = (1.39999997615814208984375 / (_2247 + 1.39999997615814208984375)) * _2278;
                        float _2303 = _2302 * _2302;
                        float _2306 = ((1.0 - _2303) * dot(vec3(_427, _430, _433), vec3(_2237, _2238, _2239))) + _2303;
                        float _3198 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
                        float _2307 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
                        float _2308 = 1.0 - _2278;
                        float _2318 = (0.5 / (((_2307 * ((_2293 * _2308) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2308) + _2278) * _2293))) * _2307;
                        float _3209 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
                        float _2329 = (((_2279 * 3.1415927410125732421875) * (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0)))) / ((_2301 * _2301) * ((_2251 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0)));
                        _2108 = (_2329 * _2226.x) + _2175;
                        _2109 = (_2329 * _2226.y) + _2176;
                        _2110 = (_2329 * _2226.z) + _2177;
                        if (_2179 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2175 = _2108;
                            _2176 = _2109;
                            _2177 = _2110;
                            _2178 = _2179;
                        }
                    }
                    frontier_phi_62_pred = _2110;
                    frontier_phi_62_pred_1 = _2109;
                    frontier_phi_62_pred_2 = _2108;
                }
                _1850 = frontier_phi_62_pred;
                _1848 = frontier_phi_62_pred_1;
                _1846 = frontier_phi_62_pred_2;
                uint _2021 = _2020 + 1u;
                if (_2021 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2017 = _1846;
                    _2018 = _1848;
                    _2019 = _1850;
                    _2020 = _2021;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1845 = _1846;
            _1847 = _1848;
            _1849 = _1850;
        }
        uvec4 _1853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1854 = _1853.z;
        uint _1856 = (_1854 >> 8u) & 15u;
        float _1994;
        float _1996;
        float _1998;
        if (((4294967295u << _1856) & _1752) == 0u)
        {
            _1994 = _1845;
            _1996 = _1847;
            _1998 = _1849;
        }
        else
        {
            float _2010 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
            float _2011 = _2010 * _1706;
            float _2012 = _2010 * _1707;
            float _2013 = _2010 * _1708;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1856 < ((_1854 >> 12u) & 15u))
            {
                float _1995;
                float _1997;
                float _1999;
                float _2161 = _1845;
                float _2162 = _1847;
                float _2163 = _1849;
                uint _2164 = _1856;
                uint _2173;
                bool _2174;
                for (;;)
                {
                    _2173 = texelFetch(g_lightClassification, int((((_1746 << 5u) + (_1732 << 9u)) + (_2164 << 2u)) >> 2u)).x;
                    _2174 = _2173 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    if (_2174)
                    {
                        frontier_phi_73_pred = _2163;
                        frontier_phi_73_pred_1 = _2162;
                        frontier_phi_73_pred_2 = _2161;
                    }
                    else
                    {
                        float _2339;
                        float _2340;
                        float _2341;
                        float _2605;
                        float _2606;
                        float _2607;
                        float _2349 = _2161;
                        float _2350 = _2162;
                        float _2351 = _2163;
                        uint _2352 = _2173;
                        uint _2353;
                        uint _2363;
                        vec4 _2378;
                        float _2379;
                        vec3 _2391;
                        vec4 _2407;
                        vec4 _2423;
                        float _2470;
                        bool _2471;
                        for (;;)
                        {
                            _2363 = ((_2164 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2352));
                            _2353 = (_2352 + 4294967295u) & _2352;
                            uint _2365 = _2363 * 40u;
                            _2378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2365 + 3u)).x));
                            _2379 = _2378.w;
                            uint _2381 = (_2363 * 40u) + 8u;
                            _2391 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2381 + 2u)).x));
                            uint _2394 = (_2363 * 40u) + 16u;
                            _2407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2394 + 3u)).x));
                            uint _2410 = (_2363 * 40u) + 20u;
                            _2423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2410 + 3u)).x));
                            uint _2426 = (_2363 * 40u) + 24u;
                            vec4 _2439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 3u)).x));
                            uint _2445 = (_2363 * 40u) + 28u;
                            vec4 _2458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 3u)).x));
                            _2470 = fma(_1708, _2458.z, fma(_1707, _2458.y, _2458.x * _1706)) + _2458.w;
                            _2471 = !((fma(_1708, _2439.z, fma(_1707, _2439.y, _2439.x * _1706)) + _2439.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            if (_2471)
                            {
                                float _2505 = _2378.x - _1706;
                                float _2506 = _2378.y - _1707;
                                float _2507 = _2378.z - _1708;
                                float _2508 = dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507));
                                float _2511 = inversesqrt(_2508);
                                float _2512 = _2511 * _2505;
                                float _2513 = _2511 * _2506;
                                float _2514 = _2511 * _2507;
                                float _2518 = 1.0 - (_2508 / (_2379 * _2379));
                                float _3220 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
                                float _2520 = sqrt(_2508) * uintBitsToFloat(uvec4(_2474, _2475, _2476, texelFetch(g_SpotLightRenderingBuffer, int(((_2363 * 40u) + 4u) + 3u)).x)).w;
                                float _2523 = _2520 * _2520;
                                float _2524 = (fma(_1708, _2407.z, fma(_1707, _2407.y, _2407.x * _1706)) + _2407.w) / _2470;
                                float _2525 = (fma(_1708, _2423.z, fma(_1707, _2423.y, _2423.x * _1706)) + _2423.w) / _2470;
                                float _2529 = 1.0 - dot(vec2(_2524, _2525), vec2(_2524, _2525));
                                float _3231 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
                                float _2539 = exp2(log2(1.0 / ((_2523 * 3.5) + 5.0)) * 0.25);
                                float _2540 = 1.0 - _466;
                                float _2547 = sqrt(1.0 - ((1.0 - (_2540 * _2540)) * (1.0 - (_2539 * _2539))));
                                float _2548 = _2547 * _2547;
                                float _2549 = _2548 * _2548;
                                float _2550 = _2512 - _2011;
                                float _2551 = _2513 - _2012;
                                float _2552 = _2514 - _2013;
                                float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
                                float _2560 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2011, (-0.0) - _2012, (-0.0) - _2013));
                                float _3242 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
                                float _2563 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
                                float _2564 = dot(vec3(_427, _430, _433), vec3(_2556 * _2550, _2556 * _2551, _2556 * _2552));
                                float _3253 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                                float _2567 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
                                float _2571 = ((_2567 * _2567) * (_2549 + (-1.0))) + 1.0;
                                float _2572 = (1.39999997615814208984375 / (_2520 + 1.39999997615814208984375)) * _2548;
                                float _2573 = _2572 * _2572;
                                float _2579 = ((1.0 - _2573) * dot(vec3(_427, _430, _433), vec3(_2512, _2513, _2514))) + _2573;
                                float _3264 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                                float _2580 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
                                float _2581 = 1.0 - _2548;
                                float _2591 = (0.5 / (((_2580 * ((_2563 * _2581) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2580 * _2581) + _2548) * _2563))) * _2580;
                                float _3275 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                                float _2601 = ((isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0)))) * (((_2549 * 3.1415927410125732421875) * (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0)))) / ((_2571 * _2571) * ((_2523 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _2601 * _2391.z;
                                frontier_phi_79_pred_1 = _2601 * _2391.y;
                                frontier_phi_79_pred_2 = _2601 * _2391.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                            }
                            _2607 = frontier_phi_79_pred;
                            _2606 = frontier_phi_79_pred_1;
                            _2605 = frontier_phi_79_pred_2;
                            _2339 = _2605 + _2349;
                            _2340 = _2606 + _2350;
                            _2341 = _2607 + _2351;
                            if (_2353 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2349 = _2339;
                                _2350 = _2340;
                                _2351 = _2341;
                                _2352 = _2353;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _2341;
                        frontier_phi_73_pred_1 = _2340;
                        frontier_phi_73_pred_2 = _2339;
                    }
                    _1999 = frontier_phi_73_pred;
                    _1997 = frontier_phi_73_pred_1;
                    _1995 = frontier_phi_73_pred_2;
                    uint _2165 = _2164 + 1u;
                    if (_2165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2161 = _1995;
                        _2162 = _1997;
                        _2163 = _1999;
                        _2164 = _2165;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1999;
                frontier_phi_53_54_ladder_1 = _1997;
                frontier_phi_53_54_ladder_2 = _1995;
            }
            else
            {
                frontier_phi_53_54_ladder = _1849;
                frontier_phi_53_54_ladder_1 = _1847;
                frontier_phi_53_54_ladder_2 = _1845;
            }
            _1994 = frontier_phi_53_54_ladder_2;
            _1996 = frontier_phi_53_54_ladder_1;
            _1998 = frontier_phi_53_54_ladder;
        }
        float _2003 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
        _1766 = ((_1994 * _308) * _2003) + _1540;
        _1768 = ((_1996 * _309) * _2003) + _1542;
        _1770 = ((_1998 * _310) * _2003) + _1544;
    }
    else
    {
        _1766 = _1540;
        _1768 = _1542;
        _1770 = _1544;
    }
    float _1772 = dot(vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375), vec3(_308, _309, _310));
    float _1778 = _1766 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _979);
    float _1779 = _1768 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _979);
    float _1780 = _1770 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _979);
    uint _1781 = _1225 + 6u;
    float _1786 = (cbInstanceData._m0[_1781].w * _291) * (((1.0 - _1772) * exp2(log2(1.0 - _460) * 5.0)) + _1772);
    float _1791 = _406 / cbSceneParam._m0[86u].x;
    float _1792 = _407 / cbSceneParam._m0[86u].y;
    vec4 _1806 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1791, _1792, (log2((isnan(cbSceneParam._m0[77u].w) ? _327 : (isnan(_327) ? cbSceneParam._m0[77u].w : min(_327, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1808 = _1806.x;
    float _1809 = _1806.y;
    float _1810 = _1806.z;
    float _1811 = _1806.w;
    float _1902;
    float _1904;
    float _1906;
    float _1908;
    if (_327 > cbSceneParam._m0[78u].w)
    {
        float _1864 = isnan(_327) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _327 : min(cbSceneParam._m0[80u].w, _327));
        float _1865 = _1864 / _327;
        float _1876 = _1865 * _378;
        float _1877 = _379 * _1865;
        float _1878 = (-0.0) - _1877;
        float _1880 = _1865 * _380;
        float _1882 = (cbSceneParam._m0[77u].w * _1878) / _1864;
        float _1883 = _1882 + cbSceneParam._m0[79u].w;
        float _1884 = cbSceneParam._m0[79u].w - _1877;
        float _1890 = sqrt(((_1876 * _1876) + (_1877 * _1877)) + (_1880 * _1880));
        float _1893 = (1.0 - (cbSceneParam._m0[77u].w / _1864)) * _1890;
        float _1898 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1900 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2118;
        if (abs((_1878 - _1882) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2118 = ((((_1883 > 0.0) ? exp2(_1898 * _1883) : (2.0 - exp2(_1900 * _1883))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1893;
        }
        else
        {
            float _2043 = 1.0 / cbSceneParam._m0[80u].x;
            float _2044 = isnan(_1884) ? _1883 : (isnan(_1883) ? _1884 : max(_1883, _1884));
            float _2045 = isnan(_1884) ? _1883 : (isnan(_1883) ? _1884 : min(_1883, _1884));
            float _2054 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : min(_2044, 0.0));
            float _2055 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : min(_2045, 0.0));
            _2118 = ((abs(_1890 / _1878) * cbSceneParam._m0[80u].y) * ((((_2054 - _2055) * 2.0) - ((exp2(_1898 * (isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)))) - exp2(_1898 * (isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))))) * _2043)) - ((exp2(_1900 * _2054) - exp2(_1900 * _2055)) * _2043))) + (_1893 * cbSceneParam._m0[80u].z);
        }
        vec4 _2120 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1791, _1792, 1.0), 0.0);
        float _2129 = exp2((_2118 * (-1.44269502162933349609375)) * (1.0 - _2120.w));
        float _2130 = log2(_2129);
        float _2146 = log2(_1811);
        _1902 = (exp2(_2146 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2130 * cbSceneParam._m0[78u].x)) * _2120.x) / cbSceneParam._m0[78u].x)) + _1808;
        _1904 = (exp2(_2146 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2130 * cbSceneParam._m0[78u].y)) * _2120.y) / cbSceneParam._m0[78u].y)) + _1809;
        _1906 = (exp2(_2146 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2130 * cbSceneParam._m0[78u].z)) * _2120.z) / cbSceneParam._m0[78u].z)) + _1810;
        _1908 = _2129 * _1811;
    }
    else
    {
        _1902 = _1808;
        _1904 = _1809;
        _1906 = _1810;
        _1908 = _1811;
    }
    bool _2156;
    vec4 _1921;
    vec4 _1950;
    float _1952;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    bool _1967;
    for (;;)
    {
        _1921 = cbMatDynParam._m0[0u];
        bool _1924 = roundEven(_1921.y) == 3.0;
        float _1925 = log2(_1908);
        float _1932 = cbPerFrame._m0[3u].x * _291;
        float _1935 = ((_1932 * _1778) * cbInstanceData._m0[_1781].w) * exp2(_1925 * cbSceneParam._m0[78u].x);
        float _1938 = ((_1932 * _1779) * cbInstanceData._m0[_1781].w) * exp2(_1925 * cbSceneParam._m0[78u].y);
        float _1941 = ((_1932 * _1780) * cbInstanceData._m0[_1781].w) * exp2(_1925 * cbSceneParam._m0[78u].z);
        float _1948 = _394 + (-0.5);
        _1950 = cbMtdParam._m0[1u];
        _1952 = _1950.y * _1948;
        _1954 = cbSceneParam._m0[72u].z * (_1924 ? _1935 : (_1935 + ((_1902 * _1786) * cbSceneParam._m0[72u].w)));
        _1955 = cbSceneParam._m0[72u].z * (_1924 ? _1938 : (_1938 + ((_1904 * _1786) * cbSceneParam._m0[72u].w)));
        _1956 = (_1924 ? _1941 : (_1941 + ((_1906 * _1786) * cbSceneParam._m0[72u].w))) * cbSceneParam._m0[72u].z;
        _1957 = _1948 * 0.999000012874603271484375;
        _1967 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1967)
        {
            if ((cbInstanceData._m0[_1225 + 7u].x + _1957) < 0.5)
            {
                _2156 = true;
                break;
            }
        }
        uint _2079 = (_1225 + 9u) + uint(_1921.w);
        if ((cbInstanceData._m0[_2079].w < 1.0) && ((cbInstanceData._m0[_2079].w + _1957) < 0.5))
        {
            _2156 = true;
            break;
        }
        if ((_1952 + 1.0) < _1950.x)
        {
            _2156 = true;
            break;
        }
        _2156 = false;
        break;
    }
    float _2334;
    if (_2156)
    {
        discard_state = true;
        _2334 = 0.0;
    }
    else
    {
        _2334 = _1786;
    }
    SV_Target.x = _1954;
    SV_Target.y = _1955;
    SV_Target.z = _1956;
    SV_Target.w = _2334;
    discard_exit();
}


