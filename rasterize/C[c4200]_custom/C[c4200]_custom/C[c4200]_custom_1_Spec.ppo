#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 10) uniform texture2D C_c4200_custom_snp_0_Texture2D_26;
layout(set = 0, binding = 8) uniform texture2D C_c4200_custom_snp_0_Texture2D_24;
layout(set = 0, binding = 9) uniform texture2D C_c4200_custom_snp_0_Texture2D_25;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;

float _673;
uint _2123;
uint _2124;
uint _2125;
uint _2387;
uint _2388;
uint _2389;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _171 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _172 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _173 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _179 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _186 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _211 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_26, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    float _224 = cbMtdParam._m0[15u].x * _211.x;
    float _225 = cbMtdParam._m0[15u].y * _211.y;
    float _226 = cbMtdParam._m0[15u].z * _211.z;
    float _232 = cbMtdParam._m0[22u].w - (cbMtdParam._m0[22u].w * _211.w);
    float _236 = _224 - (_232 * _224);
    float _237 = _225 - (_232 * _225);
    float _238 = _226 - (_232 * _226);
    vec4 _254 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_25, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _262 = (_254.x * 2.0) + (-1.0);
    float _264 = (_254.y * 2.0) + (-1.0);
    float _265 = dot(vec2(_262, _264), vec2(_262, _264));
    float _2633 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _271 = sqrt(1.0 - (isnan(1.0) ? _2633 : (isnan(_2633) ? 1.0 : min(_2633, 1.0))));
    float _272 = _254.z * cbMtdParam._m0[23u].x;
    vec4 _285 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _287 = _285.x;
    float _290 = fma(_271, _186 * NORMAL.x, fma(_264, _193 * TANGENT.x, (_179 * _171) * _262));
    float _293 = fma(_271, _186 * NORMAL.y, fma(_264, _193 * TANGENT.y, (_179 * _172) * _262));
    float _296 = fma(_271, _186 * NORMAL.z, fma(_264, _193 * TANGENT.z, (_179 * _173) * _262));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _2644 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _304 = isnan(1.0) ? _2644 : (isnan(_2644) ? 1.0 : min(_2644, 1.0));
    float _2655 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _305 = isnan(1.0) ? _2655 : (isnan(_2655) ? 1.0 : min(_2655, 1.0));
    float _2666 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _306 = isnan(1.0) ? _2666 : (isnan(_2666) ? 1.0 : min(_2666, 1.0));
    float _2677 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _307 = isnan(1.0) ? _2677 : (isnan(_2677) ? 1.0 : min(_2677, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _414 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _417 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    vec4 _426 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _429 = _426.x * TEXCOORD_3.w;
    float _430 = dot(vec3(_301, _302, _303), vec3(_381, _382, _383));
    float _433 = _430 * 2.0;
    float _437 = (_433 * _301) - _381;
    float _438 = (_433 * _302) - _382;
    float _439 = (_433 * _303) - _383;
    float _443 = abs(dot(vec3(_381, _382, _383), vec3(_301, _302, _303)));
    float _2688 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _2688 : (isnan(_2688) ? 1.0 : min(_2688, 1.0));
    float _450 = sqrt(_307);
    float _462 = exp2((_450 * 5.0) * log2(1.0 - (_444 * 0.999000012874603271484375))) / (4.0 - (_450 * 3.0));
    float _468 = (1.0 - _462) * ((_450 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _469 = _462 * _450;
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _672;
    float _674;
    float _675;
    float _676;
    float _677;
    float _678;
    float _679;
    float _680;
    float _681;
    float _682;
    float _683;
    float _684;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _532 = fma(_505, cbModelParam._m0[26u].z, fma(_501, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _497));
        float _536 = fma(_505, cbModelParam._m0[27u].z, fma(_501, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _497));
        float _540 = fma(_505, cbModelParam._m0[28u].z, fma(_501, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _497));
        float _565 = _497 + _301;
        float _566 = _501 + _302;
        float _567 = _505 + _303;
        float _577 = fma(_567, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _565)) - _532;
        float _578 = fma(_567, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _565)) - _536;
        float _579 = fma(_567, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _565)) - _540;
        float _583 = inversesqrt(dot(vec3(_577, _578, _579), vec3(_577, _578, _579)));
        float _596 = ((_583 * _577) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_532 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _597 = ((_583 * _578) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_536 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _598 = ((_583 * _579) / cbModelParam._m0[34u].z) + ((((((_540 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        float _635 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _645 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _655 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _665 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_622.x + (-0.5));
        float _667 = _665 * (_622.y + (-0.5));
        float _668 = _665 * (_622.z + (-0.5));
        _672 = _635 * (_601.z + (-0.5));
        _674 = _635 * (_601.y + (-0.5));
        _675 = _635 * (_601.x + (-0.5));
        _676 = _645 * (_608.z + (-0.5));
        _677 = _645 * (_608.y + (-0.5));
        _678 = _645 * (_608.x + (-0.5));
        _679 = _655 * (_615.z + (-0.5));
        _680 = _655 * (_615.y + (-0.5));
        _681 = _655 * (_615.x + (-0.5));
        _682 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        _683 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        _684 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    }
    else
    {
        _672 = _673;
        _674 = _673;
        _675 = _673;
        _676 = _673;
        _677 = _673;
        _678 = _673;
        _679 = _673;
        _680 = _673;
        _681 = _673;
        _682 = _673;
        _683 = _673;
        _684 = _673;
    }
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _710 = fma(_505, cbModelParam._m0[30u].z, fma(_501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _497));
        float _714 = fma(_505, cbModelParam._m0[31u].z, fma(_501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _497));
        float _718 = fma(_505, cbModelParam._m0[32u].z, fma(_501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _497));
        float _741 = _497 + _301;
        float _742 = _501 + _302;
        float _743 = _505 + _303;
        float _753 = fma(_743, cbModelParam._m0[30u].z, fma(_742, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741)) - _710;
        float _754 = fma(_743, cbModelParam._m0[31u].z, fma(_742, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741)) - _714;
        float _755 = fma(_743, cbModelParam._m0[32u].z, fma(_742, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741)) - _718;
        float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
        float _772 = ((_759 * _753) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_710 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_759 * _754) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_714 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_759 * _755) / cbModelParam._m0[35u].z) + ((((((_718 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        float _809 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _819 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _829 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _839 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_797.x + (-0.5));
        float _841 = _839 * (_797.y + (-0.5));
        float _842 = _839 * (_797.z + (-0.5));
        _846 = _809 * (_776.z + (-0.5));
        _847 = _809 * (_776.y + (-0.5));
        _848 = _809 * (_776.x + (-0.5));
        _849 = _819 * (_783.z + (-0.5));
        _850 = _819 * (_783.y + (-0.5));
        _851 = _819 * (_783.x + (-0.5));
        _852 = _829 * (_790.z + (-0.5));
        _853 = _829 * (_790.y + (-0.5));
        _854 = _829 * (_790.x + (-0.5));
        _855 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        _856 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        _857 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    }
    else
    {
        _846 = _673;
        _847 = _673;
        _848 = _673;
        _849 = _673;
        _850 = _673;
        _851 = _673;
        _852 = _673;
        _853 = _673;
        _854 = _673;
        _855 = _673;
        _856 = _673;
        _857 = _673;
    }
    float _872 = _437 * 0.5;
    float _873 = _438 * 0.5;
    float _874 = _439 * 0.5;
    float _875 = dot(vec4(_872, _873, _874, 1.0), vec4(_848, _851, _854, _857));
    float _878 = dot(vec4(_872, _873, _874, 1.0), vec4(_847, _850, _853, _856));
    float _881 = dot(vec4(_872, _873, _874, 1.0), vec4(_846, _849, _852, _855));
    float _916;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _888 = dot(vec4(_872, _873, _874, 1.0), vec4(_672, _676, _679, _682));
        float _892 = dot(vec4(_872, _873, _874, 1.0), vec4(_674, _677, _680, _683));
        float _896 = dot(vec4(_872, _873, _874, 1.0), vec4(_675, _678, _681, _684));
        float _903 = dot(vec4(cbModelParam._m0[39u]), vec4(_872, _873, _874, 1.0));
        _916 = dot(vec3(isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)), isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)), isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_903) ? 0.0 : (isnan(0.0) ? _903 : max(0.0, _903))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _916 = 1.0;
    }
    float _927;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _918 = dot(vec4(cbModelParam._m0[40u]), vec4(_872, _873, _874, 1.0));
        _927 = dot(vec3(isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)), isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)), isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_918) ? 0.0 : (isnan(0.0) ? _918 : max(0.0, _918))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _927 = 1.0;
    }
    float _931 = (_927 * cbModelParam._m0[1u].x) + (_916 * (1.0 - cbModelParam._m0[1u].x));
    float _938 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _939 = isnan(_938) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _938 : min(cbModelParam._m0[25u].z, _938));
    float _1021;
    float _1023;
    float _1025;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _988 = fma(_505, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497)) + cbModelParam._m0[13u].w;
        float _992 = fma(_505, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497)) + cbModelParam._m0[14u].w;
        float _996 = fma(_505, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497)) + cbModelParam._m0[15u].w;
        float _999 = fma(_439, cbModelParam._m0[13u].z, fma(_438, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437));
        float _1002 = fma(_439, cbModelParam._m0[14u].z, fma(_438, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437));
        float _1005 = fma(_439, cbModelParam._m0[15u].z, fma(_438, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437));
        float _1033;
        if (_999 > 0.0)
        {
            _1033 = abs((1.0 - _988) / _999);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_999 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_988 + 1.0) / _999);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1033 = frontier_phi_14_12_ladder;
        }
        float _1380;
        if (_1002 > 0.0)
        {
            _1380 = abs((1.0 - _992) / _1002);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1002 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_992 + 1.0) / _1002);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1380 = frontier_phi_23_19_ladder;
        }
        float _1586;
        if (_1005 > 0.0)
        {
            _1586 = abs((1.0 - _996) / _1005);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1005 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_996 + 1.0) / _1005);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1586 = frontier_phi_35_30_ladder;
        }
        float _1588 = isnan(_1380) ? _1033 : (isnan(_1033) ? _1380 : min(_1033, _1380));
        float _1589 = isnan(_1586) ? _1588 : (isnan(_1588) ? _1586 : min(_1588, _1586));
        float _1593 = (_1589 * _999) + _988;
        float _1594 = (_1589 * _1002) + _992;
        float _1595 = (_1589 * _1005) + _996;
        float _1596 = _1589 * 9.9999997473787516355514526367188e-05;
        float _1598 = (-1.0) - _1596;
        float _1600 = _1596 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1595 > _1600) || ((_1595 < _1598) || ((_1594 > _1600) || ((_1594 < _1598) || ((_1593 < _1598) || (_1593 > _1600))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1595, cbModelParam._m0[9u].z, fma(_1594, cbModelParam._m0[9u].y, _1593 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1595, cbModelParam._m0[10u].z, fma(_1594, cbModelParam._m0[10u].y, _1593 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1595, cbModelParam._m0[11u].z, fma(_1594, cbModelParam._m0[11u].y, _1593 * cbModelParam._m0[11u].x))), _939);
            frontier_phi_13_35_ladder = _1788.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1788.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1788.x * cbModelParam._m0[1u].y;
        }
        _1021 = frontier_phi_13_35_ladder_2;
        _1023 = frontier_phi_13_35_ladder_1;
        _1025 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_437, _438, _439), _939);
        _1021 = _1009.x * cbModelParam._m0[1u].y;
        _1023 = _1009.y * cbModelParam._m0[1u].y;
        _1025 = _1009.z * cbModelParam._m0[1u].y;
    }
    float _1029 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1030 = isnan(_1029) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1029 : min(cbModelParam._m0[25u].w, _1029));
    float _1122;
    float _1124;
    float _1126;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1086 = fma(_505, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497)) + cbModelParam._m0[21u].w;
        float _1090 = fma(_505, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497)) + cbModelParam._m0[22u].w;
        float _1094 = fma(_505, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497)) + cbModelParam._m0[23u].w;
        float _1097 = fma(_439, cbModelParam._m0[21u].z, fma(_438, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437));
        float _1100 = fma(_439, cbModelParam._m0[22u].z, fma(_438, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437));
        float _1103 = fma(_439, cbModelParam._m0[23u].z, fma(_438, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437));
        float _1385;
        if (_1097 > 0.0)
        {
            _1385 = abs((1.0 - _1086) / _1097);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1097 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1086 + 1.0) / _1097);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1385 = frontier_phi_25_21_ladder;
        }
        float _1613;
        if (_1100 > 0.0)
        {
            _1613 = abs((1.0 - _1090) / _1100);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1100 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1090 + 1.0) / _1100);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1613 = frontier_phi_37_32_ladder;
        }
        float _1908;
        if (_1103 > 0.0)
        {
            _1908 = abs((1.0 - _1094) / _1103);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1103 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1094 + 1.0) / _1103);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1908 = frontier_phi_48_43_ladder;
        }
        float _1910 = isnan(_1613) ? _1385 : (isnan(_1385) ? _1613 : min(_1385, _1613));
        float _1911 = isnan(_1908) ? _1910 : (isnan(_1910) ? _1908 : min(_1910, _1908));
        float _1915 = (_1911 * _1097) + _1086;
        float _1916 = (_1911 * _1100) + _1090;
        float _1917 = (_1911 * _1103) + _1094;
        float _1918 = _1911 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1918;
        float _1921 = _1918 + 1.0;
        float frontier_phi_22_48_ladder;
        float frontier_phi_22_48_ladder_1;
        float frontier_phi_22_48_ladder_2;
        if ((_1917 > _1921) || ((_1917 < _1919) || ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 < _1919) || (_1915 > _1921))))))
        {
            frontier_phi_22_48_ladder = 0.0;
            frontier_phi_22_48_ladder_1 = 0.0;
            frontier_phi_22_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1917, cbModelParam._m0[17u].z, fma(_1916, cbModelParam._m0[17u].y, _1915 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1917, cbModelParam._m0[18u].z, fma(_1916, cbModelParam._m0[18u].y, _1915 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1917, cbModelParam._m0[19u].z, fma(_1916, cbModelParam._m0[19u].y, _1915 * cbModelParam._m0[19u].x))), _1030);
            frontier_phi_22_48_ladder = _2026.z * cbModelParam._m0[1u].z;
            frontier_phi_22_48_ladder_1 = _2026.y * cbModelParam._m0[1u].z;
            frontier_phi_22_48_ladder_2 = _2026.x * cbModelParam._m0[1u].z;
        }
        _1122 = frontier_phi_22_48_ladder_2;
        _1124 = frontier_phi_22_48_ladder_1;
        _1126 = frontier_phi_22_48_ladder;
    }
    else
    {
        vec4 _1106 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_437, _438, _439), _1030);
        _1122 = _1106.x * cbModelParam._m0[1u].z;
        _1124 = _1106.y * cbModelParam._m0[1u].z;
        _1126 = _1106.z * cbModelParam._m0[1u].z;
    }
    float _1139 = (((_468 * _304) + _469) * _429) * ((cbModelParam._m0[1u].w * (_1122 - _1021)) + _1021);
    float _1141 = (((_468 * _305) + _469) * _429) * ((cbModelParam._m0[1u].w * (_1124 - _1023)) + _1023);
    float _1143 = (((_468 * _306) + _469) * _429) * ((cbModelParam._m0[1u].w * (_1126 - _1025)) + _1025);
    float _1164 = fma(_1143, cbSceneParam._m0[89u].z, fma(_1141, cbSceneParam._m0[89u].y, _1139 * cbSceneParam._m0[89u].x));
    float _1167 = fma(_1143, cbSceneParam._m0[90u].z, fma(_1141, cbSceneParam._m0[90u].y, _1139 * cbSceneParam._m0[90u].x));
    float _1170 = fma(_1143, cbSceneParam._m0[91u].z, fma(_1141, cbSceneParam._m0[91u].y, _1139 * cbSceneParam._m0[91u].x));
    uint _1177 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1181 = floatBitsToUint(cbInstanceData._m0[_1177 + 5u]);
    uint _1183 = _1181.x * 14u;
    uint _1184 = _1183 + 13u;
    float _1190 = _429 + (-1.0);
    float _1194 = (cbLight._m0[_1184].x * _1190) + 1.0;
    float _1195 = (cbLight._m0[_1184].y * _1190) + 1.0;
    float _1196 = (cbLight._m0[_1184].w * _1190) + 1.0;
    uint _1200 = _1183 + 8u;
    float _1216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1183].w)) * _307) * 0.949999988079071044921875);
    float _1217 = _1216 * _1216;
    float _1218 = cbLight._m0[_1183].x + _381;
    float _1219 = cbLight._m0[_1183].y + _382;
    float _1220 = cbLight._m0[_1183].z + _383;
    float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
    float _1225 = _1224 * _1218;
    float _1226 = _1224 * _1219;
    float _1227 = _1224 * _1220;
    float _1228 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1183].xyz));
    float _2814 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _1231 = isnan(1.0) ? _2814 : (isnan(_2814) ? 1.0 : min(_2814, 1.0));
    float _2825 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _1232 = isnan(1.0) ? _2825 : (isnan(_2825) ? 1.0 : min(_2825, 1.0));
    float _1233 = dot(vec3(_301, _302, _303), vec3(_1225, _1226, _1227));
    float _2836 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1236 = isnan(1.0) ? _2836 : (isnan(_2836) ? 1.0 : min(_2836, 1.0));
    float _1237 = dot(vec3(cbLight._m0[_1183].xyz), vec3(_1225, _1226, _1227));
    float _2847 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _1241 = _1217 * _1217;
    float _1245 = ((_1236 * _1236) * (_1241 + (-1.0))) + 1.0;
    float _1253 = exp2(log2(1.0 - (isnan(1.0) ? _2847 : (isnan(_2847) ? 1.0 : min(_2847, 1.0)))) * 5.0);
    float _1254 = 1.0 - _304;
    float _1255 = 1.0 - _305;
    float _1256 = 1.0 - _306;
    float _1263 = 1.0 - _1217;
    float _1274 = (0.5 / (((_1232 * ((_1231 * _1263) + _1217)) + 9.9999999392252902907785028219223e-09) + (((_1232 * _1263) + _1217) * _1231))) * _1231;
    float _2858 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
    float _1276 = (isnan(1.0) ? _2858 : (isnan(_2858) ? 1.0 : min(_2858, 1.0))) * (_1241 / ((_1245 * _1245) * 3.141590118408203125));
    float _1277 = isnan(1.0) ? _1194 : (isnan(_1194) ? 1.0 : min(_1194, 1.0));
    uint _1287 = _1183 | 1u;
    uint _1291 = _1183 + 9u;
    float _1305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1287].w)) * _307) * 0.949999988079071044921875);
    float _1306 = _1305 * _1305;
    float _1307 = cbLight._m0[_1287].x + _381;
    float _1308 = cbLight._m0[_1287].y + _382;
    float _1309 = cbLight._m0[_1287].z + _383;
    float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
    float _1314 = _1313 * _1307;
    float _1315 = _1313 * _1308;
    float _1316 = _1313 * _1309;
    float _1317 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1287].xyz));
    float _2874 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _1320 = isnan(1.0) ? _2874 : (isnan(_2874) ? 1.0 : min(_2874, 1.0));
    float _1321 = dot(vec3(_301, _302, _303), vec3(_1314, _1315, _1316));
    float _2885 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1324 = isnan(1.0) ? _2885 : (isnan(_2885) ? 1.0 : min(_2885, 1.0));
    float _1325 = dot(vec3(cbLight._m0[_1287].xyz), vec3(_1314, _1315, _1316));
    float _2896 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _1329 = _1306 * _1306;
    float _1333 = ((_1324 * _1324) * (_1329 + (-1.0))) + 1.0;
    float _1340 = exp2(log2(1.0 - (isnan(1.0) ? _2896 : (isnan(_2896) ? 1.0 : min(_2896, 1.0)))) * 5.0);
    float _1347 = 1.0 - _1306;
    float _1357 = (0.5 / (((_1232 * ((_1320 * _1347) + _1306)) + 9.9999999392252902907785028219223e-09) + (((_1232 * _1347) + _1306) * _1320))) * _1320;
    float _2907 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
    float _1359 = (isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0))) * (_1329 / ((_1333 * _1333) * 3.141590118408203125));
    float _1360 = isnan(1.0) ? _1195 : (isnan(_1195) ? 1.0 : min(_1195, 1.0));
    float _1370 = (((((_1340 * _1254) + _304) * cbLight._m0[_1291].x) * _1359) * _1360) + (((((_1253 * _1254) + _304) * cbLight._m0[_1200].x) * _1276) * _1277);
    float _1371 = (((((_1340 * _1255) + _305) * cbLight._m0[_1291].y) * _1359) * _1360) + (((((_1253 * _1255) + _305) * cbLight._m0[_1200].y) * _1276) * _1277);
    float _1372 = (((((_1340 * _1256) + _306) * cbLight._m0[_1291].z) * _1359) * _1360) + (((((_1253 * _1256) + _306) * cbLight._m0[_1200].z) * _1276) * _1277);
    uvec4 _1377 = floatBitsToUint(cbLight._m0[_1183 + 12u]);
    float _1390;
    float _1392;
    float _1394;
    if (_1377.x == 0u)
    {
        _1390 = _1370;
        _1392 = _1371;
        _1394 = _1372;
    }
    else
    {
        float _1400 = (cbLight._m0[_1184].z * _1190) + 1.0;
        uint _1401 = _1183 + 2u;
        uint _1405 = _1183 + 10u;
        float _1419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1401].w)) * _307) * 0.949999988079071044921875);
        float _1420 = _1419 * _1419;
        float _1421 = cbLight._m0[_1401].x + _381;
        float _1422 = cbLight._m0[_1401].y + _382;
        float _1423 = cbLight._m0[_1401].z + _383;
        float _1427 = inversesqrt(dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423)));
        float _1428 = _1427 * _1421;
        float _1429 = _1427 * _1422;
        float _1430 = _1427 * _1423;
        float _1431 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1401].xyz));
        float _2923 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1434 = isnan(1.0) ? _2923 : (isnan(_2923) ? 1.0 : min(_2923, 1.0));
        float _1435 = dot(vec3(_301, _302, _303), vec3(_1428, _1429, _1430));
        float _2934 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1438 = isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0));
        float _1439 = dot(vec3(cbLight._m0[_1401].xyz), vec3(_1428, _1429, _1430));
        float _2945 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = _1420 * _1420;
        float _1447 = ((_1438 * _1438) * (_1443 + (-1.0))) + 1.0;
        float _1454 = exp2(log2(1.0 - (isnan(1.0) ? _2945 : (isnan(_2945) ? 1.0 : min(_2945, 1.0)))) * 5.0);
        float _1461 = 1.0 - _1420;
        float _1471 = (0.5 / (((_1232 * ((_1434 * _1461) + _1420)) + 9.9999999392252902907785028219223e-09) + (((_1232 * _1461) + _1420) * _1434))) * _1434;
        float _2956 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1473 = (isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0))) * (_1443 / ((_1447 * _1447) * 3.141590118408203125));
        float _1474 = isnan(1.0) ? _1400 : (isnan(_1400) ? 1.0 : min(_1400, 1.0));
        _1390 = (((((_1454 * _1254) + _304) * cbLight._m0[_1405].x) * _1473) * _1474) + _1370;
        _1392 = (((((_1454 * _1255) + _305) * cbLight._m0[_1405].y) * _1473) * _1474) + _1371;
        _1394 = (((((_1454 * _1256) + _306) * cbLight._m0[_1405].z) * _1473) * _1474) + _1372;
    }
    float _1492;
    float _1494;
    float _1496;
    if (_1377.y == 0u)
    {
        _1492 = _1390;
        _1494 = _1392;
        _1496 = _1394;
    }
    else
    {
        uint _1503 = _1183 + 3u;
        uint _1507 = _1183 + 11u;
        float _1521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1503].w)) * _307) * 0.949999988079071044921875);
        float _1522 = _1521 * _1521;
        float _1523 = cbLight._m0[_1503].x + _381;
        float _1524 = cbLight._m0[_1503].y + _382;
        float _1525 = cbLight._m0[_1503].z + _383;
        float _1529 = inversesqrt(dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525)));
        float _1530 = _1529 * _1523;
        float _1531 = _1529 * _1524;
        float _1532 = _1529 * _1525;
        float _1533 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1503].xyz));
        float _2972 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1536 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
        float _1537 = dot(vec3(_301, _302, _303), vec3(_1530, _1531, _1532));
        float _2983 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1540 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
        float _1541 = dot(vec3(cbLight._m0[_1503].xyz), vec3(_1530, _1531, _1532));
        float _2994 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = _1522 * _1522;
        float _1549 = ((_1540 * _1540) * (_1545 + (-1.0))) + 1.0;
        float _1556 = exp2(log2(1.0 - (isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0)))) * 5.0);
        float _1563 = 1.0 - _1522;
        float _1573 = (0.5 / (((_1232 * ((_1536 * _1563) + _1522)) + 9.9999999392252902907785028219223e-09) + (((_1232 * _1563) + _1522) * _1536))) * _1536;
        float _3005 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1575 = (isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0))) * (_1545 / ((_1549 * _1549) * 3.141590118408203125));
        float _1576 = isnan(1.0) ? _1196 : (isnan(_1196) ? 1.0 : min(_1196, 1.0));
        _1492 = (((((_1556 * _1254) + _304) * cbLight._m0[_1507].x) * _1575) * _1576) + _1390;
        _1494 = (((((_1556 * _1255) + _305) * cbLight._m0[_1507].y) * _1575) * _1576) + _1392;
        _1496 = (((((_1556 * _1256) + _306) * cbLight._m0[_1507].z) * _1575) * _1576) + _1394;
    }
    float _1718;
    float _1720;
    float _1722;
    if (_1181.y == 0u)
    {
        float _1657 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1658 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1657;
        float _1659 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1657;
        float _1660 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1657;
        uvec4 _1672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1673 = _1672.x;
        uint _1684 = uint((float(_1672.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _1673))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _1673)));
        float _1694 = (log2(_1660 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1695 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        uint _1698 = uint(isnan(14.0) ? _1695 : (isnan(_1695) ? 14.0 : min(_1695, 14.0)));
        uvec4 _1703 = texelFetch(g_lightClusterGridBuffer, int(((_1698 << 2u) + (_1684 << 6u)) >> 2u));
        uint _1704 = _1703.x;
        uint _1705 = _1672.z;
        float _1797;
        float _1799;
        float _1801;
        if (((((1u << ((_1705 >> 4u) & 15u)) + 4294967295u) & _1704) == 0u) || ((_1705 & 240u) == 0u))
        {
            _1797 = 0.0;
            _1799 = 0.0;
            _1801 = 0.0;
        }
        else
        {
            float _1798;
            float _1800;
            float _1802;
            float _1957 = 0.0;
            float _1958 = 0.0;
            float _1959 = 0.0;
            uint _1960 = 0u;
            uint _1969;
            bool _1970;
            for (;;)
            {
                _1969 = texelFetch(g_lightClassification, int((((_1698 << 5u) + (_1684 << 9u)) + (_1960 << 2u)) >> 2u)).x;
                _1970 = _1969 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                if (_1970)
                {
                    frontier_phi_57_pred = _1959;
                    frontier_phi_57_pred_1 = _1958;
                    frontier_phi_57_pred_2 = _1957;
                }
                else
                {
                    float _2093;
                    float _2094;
                    float _2095;
                    uint _2096;
                    _2093 = _1957;
                    _2094 = _1958;
                    _2095 = _1959;
                    _2096 = _1969;
                    float _2031;
                    float _2032;
                    float _2033;
                    for (;;)
                    {
                        uint _2100 = uint(findLSB(_2096)) + (_1960 << 5u);
                        uint _2097 = (_2096 + 4294967295u) & _2096;
                        uint _2102 = _2100 * 48u;
                        vec4 _2116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2102)).x, texelFetch(g_PointLightRenderingBuffer, int(_2102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2102 + 3u)).x));
                        uint _2133 = (_2100 * 48u) + 8u;
                        vec3 _2144 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2133)).x, texelFetch(g_PointLightRenderingBuffer, int(_2133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2133 + 2u)).x));
                        float _2148 = _2116.x - _1658;
                        float _2149 = _2116.y - _1659;
                        float _2150 = _2116.z - _1660;
                        float _2151 = dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150));
                        float _2154 = inversesqrt(_2151);
                        float _2155 = _2154 * _2148;
                        float _2156 = _2154 * _2149;
                        float _2157 = _2154 * _2150;
                        float _2163 = 1.0 - (_2151 * _2116.w);
                        float _3031 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
                        float _2165 = sqrt(_2151) * uintBitsToFloat(uvec4(_2123, _2124, _2125, texelFetch(g_PointLightRenderingBuffer, int(((_2100 * 48u) + 4u) + 3u)).x)).w;
                        float _2169 = _2165 * _2165;
                        float _2170 = (-0.0) - _1658;
                        float _2171 = (-0.0) - _1659;
                        float _2172 = (-0.0) - _1660;
                        float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
                        float _2177 = _2176 * _2170;
                        float _2178 = _2176 * _2171;
                        float _2179 = _2176 * _2172;
                        float _2187 = exp2(log2(1.0 / ((_2169 * 3.5) + 5.0)) * 0.25);
                        float _2188 = 1.0 - _450;
                        float _2195 = sqrt(1.0 - ((1.0 - (_2188 * _2188)) * (1.0 - (_2187 * _2187))));
                        float _2196 = _2195 * _2195;
                        float _2197 = _2196 * _2196;
                        float _2198 = _2177 + _2155;
                        float _2199 = _2178 + _2156;
                        float _2200 = _2179 + _2157;
                        float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
                        float _2208 = dot(vec3(_411, _414, _417), vec3(_2177, _2178, _2179));
                        float _3042 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
                        float _2211 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
                        float _2212 = dot(vec3(_411, _414, _417), vec3(_2204 * _2198, _2204 * _2199, _2204 * _2200));
                        float _3053 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
                        float _2215 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
                        float _2219 = ((_2215 * _2215) * (_2197 + (-1.0))) + 1.0;
                        float _2220 = (1.39999997615814208984375 / (_2165 + 1.39999997615814208984375)) * _2196;
                        float _2221 = _2220 * _2220;
                        float _2224 = ((1.0 - _2221) * dot(vec3(_411, _414, _417), vec3(_2155, _2156, _2157))) + _2221;
                        float _3064 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
                        float _2225 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
                        float _2226 = 1.0 - _2196;
                        float _2236 = (0.5 / (((_2225 * ((_2211 * _2226) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2226) + _2196) * _2211))) * _2225;
                        float _3075 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
                        float _2247 = (((_2197 * 3.1415927410125732421875) * (isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0)))) / ((_2219 * _2219) * ((_2169 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0)));
                        _2031 = (_2247 * _2144.x) + _2093;
                        _2032 = (_2247 * _2144.y) + _2094;
                        _2033 = (_2247 * _2144.z) + _2095;
                        if (_2097 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2093 = _2031;
                            _2094 = _2032;
                            _2095 = _2033;
                            _2096 = _2097;
                        }
                    }
                    frontier_phi_57_pred = _2033;
                    frontier_phi_57_pred_1 = _2032;
                    frontier_phi_57_pred_2 = _2031;
                }
                _1802 = frontier_phi_57_pred;
                _1800 = frontier_phi_57_pred_1;
                _1798 = frontier_phi_57_pred_2;
                uint _1961 = _1960 + 1u;
                if (_1961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1957 = _1798;
                    _1958 = _1800;
                    _1959 = _1802;
                    _1960 = _1961;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1797 = _1798;
            _1799 = _1800;
            _1801 = _1802;
        }
        uvec4 _1805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1806 = _1805.z;
        uint _1808 = (_1806 >> 8u) & 15u;
        float _1934;
        float _1936;
        float _1938;
        if (((4294967295u << _1808) & _1704) == 0u)
        {
            _1934 = _1797;
            _1936 = _1799;
            _1938 = _1801;
        }
        else
        {
            float _1950 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
            float _1951 = _1950 * _1658;
            float _1952 = _1950 * _1659;
            float _1953 = _1950 * _1660;
            float frontier_phi_50_51_ladder;
            float frontier_phi_50_51_ladder_1;
            float frontier_phi_50_51_ladder_2;
            if (_1808 < ((_1806 >> 12u) & 15u))
            {
                float _1935;
                float _1937;
                float _1939;
                float _2079 = _1797;
                float _2080 = _1799;
                float _2081 = _1801;
                uint _2082 = _1808;
                uint _2091;
                bool _2092;
                for (;;)
                {
                    _2091 = texelFetch(g_lightClassification, int((((_1698 << 5u) + (_1684 << 9u)) + (_2082 << 2u)) >> 2u)).x;
                    _2092 = _2091 == 0u;
                    float frontier_phi_63_pred;
                    float frontier_phi_63_pred_1;
                    float frontier_phi_63_pred_2;
                    if (_2092)
                    {
                        frontier_phi_63_pred = _2081;
                        frontier_phi_63_pred_1 = _2080;
                        frontier_phi_63_pred_2 = _2079;
                    }
                    else
                    {
                        float _2252;
                        float _2253;
                        float _2254;
                        float _2518;
                        float _2519;
                        float _2520;
                        float _2262 = _2079;
                        float _2263 = _2080;
                        float _2264 = _2081;
                        uint _2265 = _2091;
                        uint _2266;
                        uint _2276;
                        vec4 _2291;
                        float _2292;
                        vec3 _2304;
                        vec4 _2320;
                        vec4 _2336;
                        float _2383;
                        bool _2384;
                        for (;;)
                        {
                            _2276 = ((_2082 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2265));
                            _2266 = (_2265 + 4294967295u) & _2265;
                            uint _2278 = _2276 * 40u;
                            _2291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2278 + 3u)).x));
                            _2292 = _2291.w;
                            uint _2294 = (_2276 * 40u) + 8u;
                            _2304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 2u)).x));
                            uint _2307 = (_2276 * 40u) + 16u;
                            _2320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2307 + 3u)).x));
                            uint _2323 = (_2276 * 40u) + 20u;
                            _2336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2323 + 3u)).x));
                            uint _2339 = (_2276 * 40u) + 24u;
                            vec4 _2352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2339 + 3u)).x));
                            uint _2358 = (_2276 * 40u) + 28u;
                            vec4 _2371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2358 + 3u)).x));
                            _2383 = fma(_1660, _2371.z, fma(_1659, _2371.y, _2371.x * _1658)) + _2371.w;
                            _2384 = !((fma(_1660, _2352.z, fma(_1659, _2352.y, _2352.x * _1658)) + _2352.w) <= 0.0);
                            float frontier_phi_69_pred;
                            float frontier_phi_69_pred_1;
                            float frontier_phi_69_pred_2;
                            if (_2384)
                            {
                                float _2418 = _2291.x - _1658;
                                float _2419 = _2291.y - _1659;
                                float _2420 = _2291.z - _1660;
                                float _2421 = dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420));
                                float _2424 = inversesqrt(_2421);
                                float _2425 = _2424 * _2418;
                                float _2426 = _2424 * _2419;
                                float _2427 = _2424 * _2420;
                                float _2431 = 1.0 - (_2421 / (_2292 * _2292));
                                float _3086 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
                                float _2433 = sqrt(_2421) * uintBitsToFloat(uvec4(_2387, _2388, _2389, texelFetch(g_SpotLightRenderingBuffer, int(((_2276 * 40u) + 4u) + 3u)).x)).w;
                                float _2436 = _2433 * _2433;
                                float _2437 = (fma(_1660, _2320.z, fma(_1659, _2320.y, _2320.x * _1658)) + _2320.w) / _2383;
                                float _2438 = (fma(_1660, _2336.z, fma(_1659, _2336.y, _2336.x * _1658)) + _2336.w) / _2383;
                                float _2442 = 1.0 - dot(vec2(_2437, _2438), vec2(_2437, _2438));
                                float _3097 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
                                float _2452 = exp2(log2(1.0 / ((_2436 * 3.5) + 5.0)) * 0.25);
                                float _2453 = 1.0 - _450;
                                float _2460 = sqrt(1.0 - ((1.0 - (_2453 * _2453)) * (1.0 - (_2452 * _2452))));
                                float _2461 = _2460 * _2460;
                                float _2462 = _2461 * _2461;
                                float _2463 = _2425 - _1951;
                                float _2464 = _2426 - _1952;
                                float _2465 = _2427 - _1953;
                                float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
                                float _2473 = dot(vec3(_411, _414, _417), vec3((-0.0) - _1951, (-0.0) - _1952, (-0.0) - _1953));
                                float _3108 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
                                float _2476 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
                                float _2477 = dot(vec3(_411, _414, _417), vec3(_2469 * _2463, _2469 * _2464, _2469 * _2465));
                                float _3119 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
                                float _2480 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
                                float _2484 = ((_2480 * _2480) * (_2462 + (-1.0))) + 1.0;
                                float _2485 = (1.39999997615814208984375 / (_2433 + 1.39999997615814208984375)) * _2461;
                                float _2486 = _2485 * _2485;
                                float _2492 = ((1.0 - _2486) * dot(vec3(_411, _414, _417), vec3(_2425, _2426, _2427))) + _2486;
                                float _3130 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
                                float _2493 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
                                float _2494 = 1.0 - _2461;
                                float _2504 = (0.5 / (((_2493 * ((_2476 * _2494) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2494) + _2461) * _2476))) * _2493;
                                float _3141 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                                float _2514 = ((isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0)))) * (((_2462 * 3.1415927410125732421875) * (isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0)))) / ((_2484 * _2484) * ((_2436 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_69_pred = _2514 * _2304.x;
                                frontier_phi_69_pred_1 = _2514 * _2304.z;
                                frontier_phi_69_pred_2 = _2514 * _2304.y;
                            }
                            else
                            {
                                frontier_phi_69_pred = 0.0;
                                frontier_phi_69_pred_1 = 0.0;
                                frontier_phi_69_pred_2 = 0.0;
                            }
                            _2518 = frontier_phi_69_pred;
                            _2520 = frontier_phi_69_pred_1;
                            _2519 = frontier_phi_69_pred_2;
                            _2252 = _2518 + _2262;
                            _2253 = _2519 + _2263;
                            _2254 = _2520 + _2264;
                            if (_2266 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2262 = _2252;
                                _2263 = _2253;
                                _2264 = _2254;
                                _2265 = _2266;
                                continue;
                            }
                        }
                        frontier_phi_63_pred = _2254;
                        frontier_phi_63_pred_1 = _2253;
                        frontier_phi_63_pred_2 = _2252;
                    }
                    _1939 = frontier_phi_63_pred;
                    _1937 = frontier_phi_63_pred_1;
                    _1935 = frontier_phi_63_pred_2;
                    uint _2083 = _2082 + 1u;
                    if (_2083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2079 = _1935;
                        _2080 = _1937;
                        _2081 = _1939;
                        _2082 = _2083;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_50_51_ladder = _1937;
                frontier_phi_50_51_ladder_1 = _1935;
                frontier_phi_50_51_ladder_2 = _1939;
            }
            else
            {
                frontier_phi_50_51_ladder = _1799;
                frontier_phi_50_51_ladder_1 = _1797;
                frontier_phi_50_51_ladder_2 = _1801;
            }
            _1934 = frontier_phi_50_51_ladder_1;
            _1936 = frontier_phi_50_51_ladder;
            _1938 = frontier_phi_50_51_ladder_2;
        }
        float _1943 = isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0));
        _1718 = ((_1934 * _304) * _1943) + _1492;
        _1720 = ((_1936 * _305) * _1943) + _1494;
        _1722 = ((_1938 * _306) * _1943) + _1496;
    }
    else
    {
        _1718 = _1492;
        _1720 = _1494;
        _1722 = _1496;
    }
    float _1724 = dot(vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375), vec3(_304, _305, _306));
    uint _1733 = _1177 + 6u;
    float _1738 = (cbInstanceData._m0[_1733].w * _287) * (((1.0 - _1724) * exp2(log2(1.0 - _444) * 5.0)) + _1724);
    float _1743 = _389 / cbSceneParam._m0[86u].x;
    float _1744 = _390 / cbSceneParam._m0[86u].y;
    vec4 _1758 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1743, _1744, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1760 = _1758.x;
    float _1761 = _1758.y;
    float _1762 = _1758.z;
    float _1763 = _1758.w;
    float _1854;
    float _1856;
    float _1858;
    float _1860;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _1816 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _1817 = _1816 / _323;
        float _1828 = _1817 * _374;
        float _1829 = _375 * _1817;
        float _1830 = (-0.0) - _1829;
        float _1832 = _1817 * _376;
        float _1834 = (cbSceneParam._m0[77u].w * _1830) / _1816;
        float _1835 = _1834 + cbSceneParam._m0[79u].w;
        float _1836 = cbSceneParam._m0[79u].w - _1829;
        float _1842 = sqrt(((_1828 * _1828) + (_1829 * _1829)) + (_1832 * _1832));
        float _1845 = (1.0 - (cbSceneParam._m0[77u].w / _1816)) * _1842;
        float _1850 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1852 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2041;
        if (abs((_1830 - _1834) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2041 = ((((_1835 > 0.0) ? exp2(_1850 * _1835) : (2.0 - exp2(_1852 * _1835))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1845;
        }
        else
        {
            float _1983 = 1.0 / cbSceneParam._m0[80u].x;
            float _1984 = isnan(_1836) ? _1835 : (isnan(_1835) ? _1836 : max(_1835, _1836));
            float _1985 = isnan(_1836) ? _1835 : (isnan(_1835) ? _1836 : min(_1835, _1836));
            float _1994 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : min(_1984, 0.0));
            float _1995 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : min(_1985, 0.0));
            _2041 = ((abs(_1842 / _1830) * cbSceneParam._m0[80u].y) * ((((_1994 - _1995) * 2.0) - ((exp2(_1850 * (isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)))) - exp2(_1850 * (isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))))) * _1983)) - ((exp2(_1852 * _1994) - exp2(_1852 * _1995)) * _1983))) + (_1845 * cbSceneParam._m0[80u].z);
        }
        vec4 _2043 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1743, _1744, 1.0), 0.0);
        float _2052 = exp2((_2041 * (-1.44269502162933349609375)) * (1.0 - _2043.w));
        float _2053 = log2(_2052);
        float _2069 = log2(_1763);
        _1854 = (exp2(_2069 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2053 * cbSceneParam._m0[78u].x)) * _2043.x) / cbSceneParam._m0[78u].x)) + _1760;
        _1856 = (exp2(_2069 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2053 * cbSceneParam._m0[78u].y)) * _2043.y) / cbSceneParam._m0[78u].y)) + _1761;
        _1858 = (exp2(_2069 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2053 * cbSceneParam._m0[78u].z)) * _2043.z) / cbSceneParam._m0[78u].z)) + _1762;
        _1860 = _2052 * _1763;
    }
    else
    {
        _1854 = _1760;
        _1856 = _1761;
        _1858 = _1762;
        _1860 = _1763;
    }
    bool _1876 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _1877 = log2(_1860);
    float _1884 = cbPerFrame._m0[3u].x * _287;
    float _1887 = ((_1884 * (_1718 + ((isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))) * _931))) * cbInstanceData._m0[_1733].w) * exp2(_1877 * cbSceneParam._m0[78u].x);
    float _1890 = ((_1884 * (_1720 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _931))) * cbInstanceData._m0[_1733].w) * exp2(_1877 * cbSceneParam._m0[78u].y);
    float _1893 = ((_1884 * (_1722 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _931))) * cbInstanceData._m0[_1733].w) * exp2(_1877 * cbSceneParam._m0[78u].z);
    SV_Target.x = cbSceneParam._m0[72u].z * (_1876 ? _1887 : (_1887 + ((_1854 * _1738) * cbSceneParam._m0[72u].w)));
    SV_Target.y = (_1876 ? _1890 : (_1890 + ((_1856 * _1738) * cbSceneParam._m0[72u].w))) * cbSceneParam._m0[72u].z;
    SV_Target.z = (_1876 ? _1893 : (_1893 + ((_1858 * _1738) * cbSceneParam._m0[72u].w))) * cbSceneParam._m0[72u].z;
    SV_Target.w = _1738;
}


