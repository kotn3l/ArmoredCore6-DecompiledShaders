#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_c4200_custom_snp_0_Texture2D_16;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_c4200_custom_snp_0_Texture2D_17;
layout(set = 0, binding = 4) uniform texture2D C_c4200_custom_snp_0_Texture2D_18;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1565;
float _3990;
float _3991;
float _3992;
float _3993;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    vec4 _315 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _328 = exp2(log2(_315.w * cbMtdParam._m0[26u].x) * cbMtdParam._m0[18u].w);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    vec4 _344 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _348 = _344.z;
    float _353 = exp2(log2(_348 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _355 = isnan(1.0) ? _354 : (isnan(_354) ? 1.0 : min(_354, 1.0));
    vec4 _367 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _392 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _403 = cbMtdParam._m0[9u].x * _392.x;
    float _404 = cbMtdParam._m0[9u].y * _392.y;
    float _405 = cbMtdParam._m0[9u].z * _392.z;
    float _412 = (((cbMtdParam._m0[10u].x * _367.x) - _403) * _355) + _403;
    float _413 = (((cbMtdParam._m0[10u].y * _367.y) - _404) * _355) + _404;
    float _414 = (((cbMtdParam._m0[10u].z * _367.z) - _405) * _355) + _405;
    vec4 _427 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _429 = _427.x;
    float _433 = exp2(log2(_429) * cbMtdParam._m0[19u].z);
    vec4 _446 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _466 = (((cbMtdParam._m0[12u].x * _446.x) - _412) * _433) + _412;
    float _467 = (((cbMtdParam._m0[12u].y * _446.y) - _413) * _433) + _413;
    float _468 = (((cbMtdParam._m0[12u].z * _446.z) - _414) * _433) + _414;
    vec4 _481 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _506 = (_315.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _481.x) - _466) * _330) + _466);
    float _508 = (_315.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _481.y) - _467) * _330) + _467);
    float _510 = (_315.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _481.z) - _468) * _330) + _468);
    vec4 _522 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _541 = TEXCOORD_3.x - ((cbMtdParam._m0[19u].w * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_c4200_custom_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w)).x + 0.00999999977648258209228515625));
    float _543 = _541 * (cbMtdParam._m0[20u].y + 1.0);
    float _4022 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _551 = (_544 * ((cbMtdParam._m0[11u].x * _522.x) - _506)) + _506;
    float _552 = (((cbMtdParam._m0[11u].y * _522.y) - _508) * _544) + _508;
    float _553 = (((cbMtdParam._m0[11u].z * _522.z) - _510) * _544) + _510;
    float _555 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _563 = (_555 - (((_274.x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _555))) * (cbMtdParam._m0[22u].y + 1.0);
    float _4033 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _571 = ((cbMtdParam._m0[14u].x - _551) * _564) + _551;
    float _572 = ((cbMtdParam._m0[14u].y - _552) * _564) + _552;
    float _573 = ((cbMtdParam._m0[14u].z - _553) * _564) + _553;
    float _576 = (cbMtdParam._m0[20u].x + 1.0) * _541;
    float _4044 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _579 = _429 - (_577 * _429);
    float _581 = _579 - (_579 * _555);
    vec4 _594 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _612 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _614 = _612.x;
    float _615 = _612.y;
    float _618 = cbMtdParam._m0[18u].x + _612.z;
    float _621 = (((cbMtdParam._m0[18u].z + _594.z) - _618) * _355) + _618;
    vec4 _633 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _645 = (((_633.z - _621) + cbMtdParam._m0[24u].z) * _433) + _621;
    float _651 = ((((_348 * 2.0) * _645) - _645) * cbMtdParam._m0[20u].z) + _645;
    vec4 _664 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _673 = (((cbMtdParam._m0[19u].y + _664.z) - _651) * _330) + _651;
    vec4 _685 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _697 = ((_685.z - _673) * _577) + _673;
    vec4 _713 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _727 = ((cbMtdParam._m0[21u].w * _555) * ((_713.z * cbMtdParam._m0[21u].z) - _697)) + _697;
    float _738 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    float _757 = (cbTextureTilingScale._m0[12u].x * ((_738 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z;
    float _758 = (cbTextureTilingScale._m0[12u].y * ((_738 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w;
    vec4 _760 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2(_757, _758));
    float _764 = cbPerFrame._m0[22u].x * 2.0;
    float _765 = _764 * cbMtdParam._m0[25u].y;
    float _772 = ((_760.y * 0.5) + (-0.25)) * cbMtdParam._m0[25u].x;
    float _774 = (-0.0) - (cbMtdParam._m0[25u].x * ((_760.x * 0.5) + (-0.25)));
    float _776 = fract(_765);
    float _778 = fract(_765 + 0.5);
    float _789 = abs((_776 * 2.0) + (-1.0));
    vec4 _805 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_776 * _774) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_772 * _776) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _807 = _805.x;
    float _808 = _805.y;
    float _809 = _805.z;
    vec4 _810 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_778 * _774) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_772 * _778) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _821 = ((_810.x - _807) * _789) + _807;
    float _828 = exp2(log2(_821 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _829 = isnan(cbMtdParam._m0[24u].x) ? _828 : (isnan(_828) ? cbMtdParam._m0[24u].x : max(_828, cbMtdParam._m0[24u].x));
    vec4 _850 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2(_757, _758));
    float _854 = _764 * cbMtdParam._m0[25u].w;
    float _859 = ((_850.y * 0.5) + (-0.25)) * cbMtdParam._m0[25u].z;
    float _861 = (-0.0) - (cbMtdParam._m0[25u].z * ((_850.x * 0.5) + (-0.25)));
    float _862 = fract(_854);
    float _864 = fract(_854 + 0.5);
    float _875 = abs((_862 * 2.0) + (-1.0));
    vec4 _891 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_862 * _861) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_859 * _862) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _893 = _891.x;
    float _894 = _891.y;
    float _895 = _891.z;
    vec4 _896 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_864 * _861) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_859 * _864) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _930 = ((_594.x - _614) * _355) + _614;
    float _931 = ((_594.y - _615) * _355) + _615;
    float _936 = ((_633.x - _930) * _433) + _930;
    float _937 = ((_633.y - _931) * _433) + _931;
    float _946 = ((((_664.x - _936) * _330) + _936) * 2.0) + (-1.0);
    float _947 = ((((_664.y - _937) * _330) + _937) * 2.0) + (-1.0);
    float _948 = dot(vec2(_946, _947), vec2(_946, _947));
    float _4065 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _953 = sqrt(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))));
    float _969 = (((cbMtdParam._m0[20u].w * ((_344.x * 2.0) + (-1.0))) + _946) + (((((_685.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[21u].x) * _577)) + ((((_713.x * 2.0) + (-1.0)) * _555) * cbMtdParam._m0[21u].y);
    float _970 = (((cbMtdParam._m0[20u].w * ((_344.y * 2.0) + (-1.0))) + _947) + (((((_685.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[21u].x) * _577)) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_713.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _973 = fma(_953, _240 * NORMAL.x, fma(_970, _247 * TANGENT.x, (_233 * _225) * _969));
    float _976 = fma(_953, _240 * NORMAL.y, fma(_970, _247 * TANGENT.y, (_233 * _226) * _969));
    float _979 = fma(_953, _240 * NORMAL.z, fma(_970, _247 * TANGENT.z, (_233 * _227) * _969));
    float _983 = inversesqrt(dot(vec3(_973, _976, _979), vec3(_973, _976, _979)));
    float _984 = _983 * _973;
    float _985 = _983 * _976;
    float _986 = _983 * _979;
    float _4076 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _987 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4098 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4109 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4120 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _991 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1007 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1058 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1048);
    float _1059 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1048);
    float _1060 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1048);
    float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
    float _1065 = _1058 * _1064;
    float _1066 = _1059 * _1064;
    float _1067 = _1060 * _1064;
    vec4 _1072 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1074 = _1072.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1246 = sqrt(((_1058 * _1058) + (_1059 * _1059)) + (_1060 * _1060));
        float _1252 = (cbMatDynParam._m0[5u].x * _1246) + cbMatDynParam._m0[5u].y;
        float _4131 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1257 = (cbMatDynParam._m0[5u].z * _1246) + cbMatDynParam._m0[5u].w;
        float _4142 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) - _1253)) + _1253) < ((_1074 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1085 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1086 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1104 = fma(_986, cbSceneParam._m0[5u].z, fma(_985, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _984));
    float _1107 = fma(_986, cbSceneParam._m0[6u].z, fma(_985, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _984));
    float _1110 = fma(_986, cbSceneParam._m0[7u].z, fma(_985, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _984));
    uint _1123 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1124 = _1123 + 9u;
    uint _1125 = _1124 + uint(cbMatDynParam._m0[0u].w);
    float _1131 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_1125].x;
    float _1132 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_1125].y;
    float _1133 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_1125].z;
    float _4153 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1134 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _1135 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _1136 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _1137 = 1.0 - _991;
    float _1138 = _1134 * _1137;
    float _1139 = _1135 * _1137;
    float _1140 = _1136 * _1137;
    float _1145 = (_1134 + (-0.039999999105930328369140625)) * _991;
    float _1146 = (_1135 + (-0.039999999105930328369140625)) * _991;
    float _1147 = (_1136 + (-0.039999999105930328369140625)) * _991;
    float _1148 = _1145 + 0.039999999105930328369140625;
    float _1150 = _1146 + 0.039999999105930328369140625;
    float _1151 = _1147 + 0.039999999105930328369140625;
    vec4 _1160 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1085, cbSceneParam._m0[86u].y * _1086));
    float _1163 = _1160.x * TEXCOORD_3.w;
    float _1164 = dot(vec3(_984, _985, _986), vec3(_1065, _1066, _1067));
    float _1167 = _1164 * 2.0;
    float _1171 = (_1167 * _984) - _1065;
    float _1172 = (_1167 * _985) - _1066;
    float _1173 = (_1167 * _986) - _1067;
    float _1177 = abs(dot(vec3(_1065, _1066, _1067), vec3(_984, _985, _986)));
    float _4186 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1179 = sqrt(_987);
    float _1192 = exp2((_1179 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1179 * 3.0));
    float _1198 = (1.0 - _1192) * ((_1179 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1199 = _1192 * _1179;
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1231 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1564;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1290 = fma(_1235, cbModelParam._m0[26u].z, fma(_1231, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1227));
        float _1294 = fma(_1235, cbModelParam._m0[27u].z, fma(_1231, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1227));
        float _1298 = fma(_1235, cbModelParam._m0[28u].z, fma(_1231, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1227));
        float _1322 = _1227 + _984;
        float _1323 = _1231 + _985;
        float _1324 = _1235 + _986;
        float _1334 = fma(_1324, cbModelParam._m0[26u].z, fma(_1323, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1322)) - _1290;
        float _1335 = fma(_1324, cbModelParam._m0[27u].z, fma(_1323, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1322)) - _1294;
        float _1336 = fma(_1324, cbModelParam._m0[28u].z, fma(_1323, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1322)) - _1298;
        float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
        float _1353 = ((_1340 * _1334) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1290 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1340 * _1335) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1294 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1340 * _1336) / cbModelParam._m0[34u].z) + ((((((_1298 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        float _1392 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1358.x + (-0.5));
        float _1394 = _1392 * (_1358.y + (-0.5));
        float _1395 = _1392 * (_1358.z + (-0.5));
        float _1402 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1365.x + (-0.5));
        float _1404 = _1402 * (_1365.y + (-0.5));
        float _1405 = _1402 * (_1365.z + (-0.5));
        float _1412 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1372.x + (-0.5));
        float _1414 = _1412 * (_1372.y + (-0.5));
        float _1415 = _1412 * (_1372.z + (-0.5));
        float _1422 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1379.x + (-0.5));
        float _1424 = _1422 * (_1379.y + (-0.5));
        float _1425 = _1422 * (_1379.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1446 = (dot(vec3(_984, _985, _986), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1456 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4234 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1458 + 1.0))) + _1463) * _1426;
        float _1473 = _1394 * 0.5;
        float _1474 = _1404 * 0.5;
        float _1475 = _1414 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_984, _985, _986), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4267 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1500 + 1.0))) + _1505) * _1427;
        float _1515 = _1395 * 0.5;
        float _1516 = _1405 * 0.5;
        float _1517 = _1415 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_984, _985, _986), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4300 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1542 + 1.0))) + _1547) * _1428;
        _1564 = _1395;
        _1566 = _1394;
        _1567 = _1393;
        _1568 = _1405;
        _1569 = _1404;
        _1570 = _1403;
        _1571 = _1415;
        _1572 = _1414;
        _1573 = _1413;
        _1574 = _1428;
        _1575 = _1427;
        _1576 = _1426;
        _1577 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1578 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1579 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1565;
        _1566 = _1565;
        _1567 = _1565;
        _1568 = _1565;
        _1569 = _1565;
        _1570 = _1565;
        _1571 = _1565;
        _1572 = _1565;
        _1573 = _1565;
        _1574 = _1565;
        _1575 = _1565;
        _1576 = _1565;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1608 = fma(_1235, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1227));
        float _1612 = fma(_1235, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1227));
        float _1616 = fma(_1235, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1227));
        float _1639 = _1227 + _984;
        float _1640 = _1231 + _985;
        float _1641 = _1235 + _986;
        float _1651 = fma(_1641, cbModelParam._m0[30u].z, fma(_1640, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1639)) - _1608;
        float _1652 = fma(_1641, cbModelParam._m0[31u].z, fma(_1640, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1639)) - _1612;
        float _1653 = fma(_1641, cbModelParam._m0[32u].z, fma(_1640, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1639)) - _1616;
        float _1657 = inversesqrt(dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653)));
        float _1670 = ((_1657 * _1651) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1608 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1671 = ((_1657 * _1652) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1612 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1672 = ((_1657 * _1653) / cbModelParam._m0[35u].z) + ((((((_1616 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1674 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1670, _1671, _1672), 0.0);
        vec4 _1681 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1670, _1671, _1672), 0.0);
        vec4 _1688 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1670, _1671, _1672), 0.0);
        vec4 _1695 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1670, _1671, _1672), 0.0);
        float _1707 = exp2((_1674.w + (-0.5)) * 20.0) * 2.0;
        float _1708 = _1707 * (_1674.x + (-0.5));
        float _1709 = _1707 * (_1674.y + (-0.5));
        float _1710 = _1707 * (_1674.z + (-0.5));
        float _1717 = exp2((_1681.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1681.x + (-0.5));
        float _1719 = _1717 * (_1681.y + (-0.5));
        float _1720 = _1717 * (_1681.z + (-0.5));
        float _1727 = exp2((_1688.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1688.x + (-0.5));
        float _1729 = _1727 * (_1688.y + (-0.5));
        float _1730 = _1727 * (_1688.z + (-0.5));
        float _1737 = exp2((_1695.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1695.x + (-0.5));
        float _1739 = _1737 * (_1695.y + (-0.5));
        float _1740 = _1737 * (_1695.z + (-0.5));
        float _1741 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1742 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1743 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1744 = _1708 * 0.5;
        float _1745 = _1718 * 0.5;
        float _1746 = _1728 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_984, _985, _986), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1741 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4363 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1771 + 1.0))) + _1776) * _1741;
        float _1786 = _1709 * 0.5;
        float _1787 = _1719 * 0.5;
        float _1788 = _1729 * 0.5;
        float _1789 = dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788));
        float _1794 = (_1789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1789);
        float _1802 = (dot(vec3(_984, _985, _986), vec3(_1794 * _1786, _1794 * _1787, _1794 * _1788)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788)) / (_1742 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1813 = _1812 * 2.0;
        float _1817 = (1.0 - _1812) / (_1812 + 1.0);
        float _4396 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1827 = ((((1.0 - _1818) * (_1813 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1813 + 1.0))) + _1818) * _1742;
        float _1828 = _1710 * 0.5;
        float _1829 = _1720 * 0.5;
        float _1830 = _1730 * 0.5;
        float _1831 = dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830));
        float _1836 = (_1831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1831);
        float _1844 = (dot(vec3(_984, _985, _986), vec3(_1836 * _1828, _1836 * _1829, _1836 * _1830)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1853 = sqrt(((_1829 * _1829) + (_1828 * _1828)) + (_1830 * _1830)) / (_1743 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1855 = _1854 * 2.0;
        float _1859 = (1.0 - _1854) / (_1854 + 1.0);
        float _4429 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1869 = ((((1.0 - _1860) * (_1855 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1855 + 1.0))) + _1860) * _1743;
        _1877 = _1710;
        _1878 = _1709;
        _1879 = _1708;
        _1880 = _1720;
        _1881 = _1719;
        _1882 = _1718;
        _1883 = _1730;
        _1884 = _1729;
        _1885 = _1728;
        _1886 = _1743;
        _1887 = _1742;
        _1888 = _1741;
        _1889 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
        _1890 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)));
        _1891 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)));
    }
    else
    {
        _1877 = _1565;
        _1878 = _1565;
        _1879 = _1565;
        _1880 = _1565;
        _1881 = _1565;
        _1882 = _1565;
        _1883 = _1565;
        _1884 = _1565;
        _1885 = _1565;
        _1886 = _1565;
        _1887 = _1565;
        _1888 = _1565;
        _1889 = 0.0;
        _1890 = 0.0;
        _1891 = 0.0;
    }
    float _1901 = (cbModelParam._m0[1u].x * (_1889 - _1577)) + _1577;
    float _1902 = (cbModelParam._m0[1u].x * (_1890 - _1578)) + _1578;
    float _1903 = (cbModelParam._m0[1u].x * (_1891 - _1579)) + _1579;
    float _1924 = fma(_1903, cbSceneParam._m0[89u].z, fma(_1902, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1903, cbSceneParam._m0[90u].z, fma(_1902, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1903, cbSceneParam._m0[91u].z, fma(_1902, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1901));
    float _1945 = _1171 * 0.5;
    float _1946 = _1172 * 0.5;
    float _1947 = _1173 * 0.5;
    float _1948 = dot(vec4(_1945, _1946, _1947, 1.0), vec4(_1879, _1882, _1885, _1888));
    float _1951 = dot(vec4(_1945, _1946, _1947, 1.0), vec4(_1878, _1881, _1884, _1887));
    float _1954 = dot(vec4(_1945, _1946, _1947, 1.0), vec4(_1877, _1880, _1883, _1886));
    float _1988;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1961 = dot(vec4(_1945, _1946, _1947, 1.0), vec4(_1564, _1568, _1571, _1574));
        float _1965 = dot(vec4(_1945, _1946, _1947, 1.0), vec4(_1566, _1569, _1572, _1575));
        float _1969 = dot(vec4(_1945, _1946, _1947, 1.0), vec4(_1567, _1570, _1573, _1576));
        float _1976 = dot(vec4(cbModelParam._m0[39u]), vec4(_1945, _1946, _1947, 1.0));
        _1988 = dot(vec3(isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)), isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1976) ? 0.0 : (isnan(0.0) ? _1976 : max(0.0, _1976))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1988 = 1.0;
    }
    float _1999;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1990 = dot(vec4(cbModelParam._m0[40u]), vec4(_1945, _1946, _1947, 1.0));
        _1999 = dot(vec3(isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0)), isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)), isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1990) ? 0.0 : (isnan(0.0) ? _1990 : max(0.0, _1990))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1999 = 1.0;
    }
    float _2003 = (_1999 * cbModelParam._m0[1u].x) + (_1988 * (1.0 - cbModelParam._m0[1u].x));
    float _2013 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _987);
    float _2014 = isnan(_2013) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2013 : min(cbModelParam._m0[25u].z, _2013));
    float _2094;
    float _2096;
    float _2098;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2061 = fma(_1235, cbModelParam._m0[13u].z, fma(_1231, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1227)) + cbModelParam._m0[13u].w;
        float _2065 = fma(_1235, cbModelParam._m0[14u].z, fma(_1231, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1227)) + cbModelParam._m0[14u].w;
        float _2069 = fma(_1235, cbModelParam._m0[15u].z, fma(_1231, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1227)) + cbModelParam._m0[15u].w;
        float _2072 = fma(_1173, cbModelParam._m0[13u].z, fma(_1172, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1171));
        float _2075 = fma(_1173, cbModelParam._m0[14u].z, fma(_1172, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1171));
        float _2078 = fma(_1173, cbModelParam._m0[15u].z, fma(_1172, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1171));
        float _2106;
        if (_2072 > 0.0)
        {
            _2106 = abs((1.0 - _2061) / _2072);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2061 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2106 = frontier_phi_17_15_ladder;
        }
        float _2329;
        if (_2075 > 0.0)
        {
            _2329 = abs((1.0 - _2065) / _2075);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2065 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2329 = frontier_phi_26_22_ladder;
        }
        float _2586;
        if (_2078 > 0.0)
        {
            _2586 = abs((1.0 - _2069) / _2078);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2069 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2586 = frontier_phi_38_33_ladder;
        }
        float _2588 = isnan(_2329) ? _2106 : (isnan(_2106) ? _2329 : min(_2106, _2329));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _2072) + _2061;
        float _2594 = (_2589 * _2075) + _2065;
        float _2595 = (_2589 * _2078) + _2069;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2596;
        float _2600 = _2596 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 > _2600) || ((_2594 < _2598) || ((_2593 < _2598) || (_2593 > _2600))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2723 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2595, cbModelParam._m0[9u].z, fma(_2594, cbModelParam._m0[9u].y, _2593 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2595, cbModelParam._m0[10u].z, fma(_2594, cbModelParam._m0[10u].y, _2593 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2595, cbModelParam._m0[11u].z, fma(_2594, cbModelParam._m0[11u].y, _2593 * cbModelParam._m0[11u].x))), _2014);
            frontier_phi_16_38_ladder = _2723.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2723.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2723.x * cbModelParam._m0[1u].y;
        }
        _2094 = frontier_phi_16_38_ladder_2;
        _2096 = frontier_phi_16_38_ladder_1;
        _2098 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2082 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1171, _1172, _1173), _2014);
        _2094 = _2082.x * cbModelParam._m0[1u].y;
        _2096 = _2082.y * cbModelParam._m0[1u].y;
        _2098 = _2082.z * cbModelParam._m0[1u].y;
    }
    float _2102 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _987);
    float _2103 = isnan(_2102) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2102 : min(cbModelParam._m0[25u].w, _2102));
    float _2192;
    float _2194;
    float _2196;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2156 = fma(_1235, cbModelParam._m0[21u].z, fma(_1231, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1227)) + cbModelParam._m0[21u].w;
        float _2160 = fma(_1235, cbModelParam._m0[22u].z, fma(_1231, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1227)) + cbModelParam._m0[22u].w;
        float _2164 = fma(_1235, cbModelParam._m0[23u].z, fma(_1231, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1227)) + cbModelParam._m0[23u].w;
        float _2167 = fma(_1173, cbModelParam._m0[21u].z, fma(_1172, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1171));
        float _2170 = fma(_1173, cbModelParam._m0[22u].z, fma(_1172, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1171));
        float _2173 = fma(_1173, cbModelParam._m0[23u].z, fma(_1172, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1171));
        float _2334;
        if (_2167 > 0.0)
        {
            _2334 = abs((1.0 - _2156) / _2167);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2167 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2156 + 1.0) / _2167);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2334 = frontier_phi_28_24_ladder;
        }
        float _2613;
        if (_2170 > 0.0)
        {
            _2613 = abs((1.0 - _2160) / _2170);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2170 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2160 + 1.0) / _2170);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2613 = frontier_phi_40_35_ladder;
        }
        float _2826;
        if (_2173 > 0.0)
        {
            _2826 = abs((1.0 - _2164) / _2173);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2173 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2164 + 1.0) / _2173);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2826 = frontier_phi_49_46_ladder;
        }
        float _2828 = isnan(_2613) ? _2334 : (isnan(_2334) ? _2613 : min(_2334, _2613));
        float _2829 = isnan(_2826) ? _2828 : (isnan(_2828) ? _2826 : min(_2828, _2826));
        float _2833 = (_2829 * _2167) + _2156;
        float _2834 = (_2829 * _2170) + _2160;
        float _2835 = (_2829 * _2173) + _2164;
        float _2836 = _2829 * 9.9999997473787516355514526367188e-05;
        float _2837 = (-1.0) - _2836;
        float _2839 = _2836 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2835 > _2839) || ((_2835 < _2837) || ((_2834 > _2839) || ((_2834 < _2837) || ((_2833 < _2837) || (_2833 > _2839))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3057 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2835, cbModelParam._m0[17u].z, fma(_2834, cbModelParam._m0[17u].y, _2833 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2835, cbModelParam._m0[18u].z, fma(_2834, cbModelParam._m0[18u].y, _2833 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2835, cbModelParam._m0[19u].z, fma(_2834, cbModelParam._m0[19u].y, _2833 * cbModelParam._m0[19u].x))), _2103);
            frontier_phi_25_49_ladder = _3057.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3057.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3057.x * cbModelParam._m0[1u].z;
        }
        _2192 = frontier_phi_25_49_ladder_2;
        _2194 = frontier_phi_25_49_ladder_1;
        _2196 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2176 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1171, _1172, _1173), _2103);
        _2192 = _2176.x * cbModelParam._m0[1u].z;
        _2194 = _2176.y * cbModelParam._m0[1u].z;
        _2196 = _2176.z * cbModelParam._m0[1u].z;
    }
    float _2209 = (((_1198 * _1148) + _1199) * _1163) * ((cbModelParam._m0[1u].w * (_2192 - _2094)) + _2094);
    float _2211 = (((_1198 * _1150) + _1199) * _1163) * ((cbModelParam._m0[1u].w * (_2194 - _2096)) + _2096);
    float _2213 = (((_1198 * _1151) + _1199) * _1163) * ((cbModelParam._m0[1u].w * (_2196 - _2098)) + _2098);
    float _2216 = fma(_2213, cbSceneParam._m0[89u].z, fma(_2211, cbSceneParam._m0[89u].y, _2209 * cbSceneParam._m0[89u].x));
    float _2219 = fma(_2213, cbSceneParam._m0[90u].z, fma(_2211, cbSceneParam._m0[90u].y, _2209 * cbSceneParam._m0[90u].x));
    float _2222 = fma(_2213, cbSceneParam._m0[91u].z, fma(_2211, cbSceneParam._m0[91u].y, _2209 * cbSceneParam._m0[91u].x));
    vec4 _2230 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1085, _1086));
    float _2232 = _2230.w;
    float _2244 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2232);
    float _2245 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2232);
    float _2246 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2232);
    uvec4 _2250 = floatBitsToUint(cbInstanceData._m0[_1123 + 5u]);
    uint _2252 = _2250.x * 14u;
    uint _2253 = _2252 + 13u;
    float _2260 = _1163 + (-1.0);
    float _2265 = (cbLight._m0[_2253].x * _2260) + 1.0;
    float _2266 = (cbLight._m0[_2253].y * _2260) + 1.0;
    float _2267 = (cbLight._m0[_2253].z * _2260) + 1.0;
    float _2268 = (cbLight._m0[_2253].w * _2260) + 1.0;
    uint _2269 = _2252 + 5u;
    float _2275 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
    uint _2279 = _2252 + 4u;
    float _2288 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
    uint _2292 = _2252 | 1u;
    float _2303 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_984, _985, _986));
    float _2306 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_984, _985, _986));
    float _4565 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _4576 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2311 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * 0.3183098733425140380859375;
    float _2313 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * 0.3183098733425140380859375;
    float _2320 = ((cbLight._m0[_2269].x * _2275) * _2313) + (((cbLight._m0[_2279].x * _2244) * _2288) * _2311);
    float _2321 = ((_2275 * cbLight._m0[_2269].y) * _2313) + (((cbLight._m0[_2279].y * _2245) * _2288) * _2311);
    float _2322 = ((_2275 * cbLight._m0[_2269].z) * _2313) + (((cbLight._m0[_2279].z * _2246) * _2288) * _2311);
    uvec4 _2326 = floatBitsToUint(cbLight._m0[_2252 + 12u]);
    bool _2328 = _2326.x == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2328)
    {
        _2339 = _2320;
        _2341 = _2321;
        _2343 = _2322;
    }
    else
    {
        uint _2347 = _2252 + 6u;
        float _2363 = (dot(vec3(cbLight._m0[_2252 + 2u].xyz), vec3(_984, _985, _986)) * 0.5) + 0.5;
        float _2364 = _2363 * _2363;
        float _4587 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2365 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2366 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2339 = (((cbLight._m0[_2347].x * 0.3183098733425140380859375) * _2365) * _2366) + _2320;
        _2341 = (((cbLight._m0[_2347].y * 0.3183098733425140380859375) * _2365) * _2366) + _2321;
        _2343 = (((cbLight._m0[_2347].z * 0.3183098733425140380859375) * _2365) * _2366) + _2322;
    }
    bool _2346 = _2326.y == 0u;
    float _2384;
    float _2386;
    float _2388;
    if (_2346)
    {
        _2384 = _2339;
        _2386 = _2341;
        _2388 = _2343;
    }
    else
    {
        uint _2557 = _2252 + 7u;
        float _2573 = (dot(vec3(cbLight._m0[_2252 + 3u].xyz), vec3(_984, _985, _986)) * 0.5) + 0.5;
        float _2574 = _2573 * _2573;
        float _4603 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2575 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2576 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2384 = (((cbLight._m0[_2557].x * 0.3183098733425140380859375) * _2575) * _2576) + _2339;
        _2386 = (((cbLight._m0[_2557].y * 0.3183098733425140380859375) * _2575) * _2576) + _2341;
        _2388 = (((cbLight._m0[_2557].z * 0.3183098733425140380859375) * _2575) * _2576) + _2343;
    }
    uint _2391 = _2252 + 8u;
    float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _987) * 0.949999988079071044921875);
    float _2405 = _2404 * _2404;
    float _2406 = cbLight._m0[_2252].x + _1065;
    float _2407 = cbLight._m0[_2252].y + _1066;
    float _2408 = cbLight._m0[_2252].z + _1067;
    float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
    float _2413 = _2412 * _2406;
    float _2414 = _2412 * _2407;
    float _2415 = _2412 * _2408;
    float _2416 = dot(vec3(_984, _985, _986), vec3(cbLight._m0[_2252].xyz));
    float _4619 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _4630 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _2420 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2421 = dot(vec3(_984, _985, _986), vec3(_2413, _2414, _2415));
    float _4641 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2425 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2413, _2414, _2415));
    float _4652 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2429 = _2405 * _2405;
    float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
    float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
    float _2442 = 0.959999978542327880859375 - _1145;
    float _2444 = 0.959999978542327880859375 - _1146;
    float _2445 = 0.959999978542327880859375 - _1147;
    float _2452 = 1.0 - _2405;
    float _2463 = (0.5 / (((_2420 * ((_2419 * _2452) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2452) + _2405) * _2419))) * _2419;
    float _4663 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2465 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
    uint _2479 = _2252 + 9u;
    float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _987) * 0.949999988079071044921875);
    float _2491 = _2490 * _2490;
    float _2492 = cbLight._m0[_2292].x + _1065;
    float _2493 = cbLight._m0[_2292].y + _1066;
    float _2494 = cbLight._m0[_2292].z + _1067;
    float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
    float _2499 = _2498 * _2492;
    float _2500 = _2498 * _2493;
    float _2501 = _2498 * _2494;
    float _2502 = dot(vec3(_984, _985, _986), vec3(cbLight._m0[_2292].xyz));
    float _4674 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2506 = dot(vec3(_984, _985, _986), vec3(_2499, _2500, _2501));
    float _4685 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2510 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2499, _2500, _2501));
    float _4696 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2514 = _2491 * _2491;
    float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
    float _2525 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
    float _2532 = 1.0 - _2491;
    float _2542 = (0.5 / (((_2420 * ((_2505 * _2532) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2532) + _2491) * _2505))) * _2505;
    float _4707 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2544 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
    float _2554 = (((((_2525 * _2442) + _1148) * cbLight._m0[_2479].x) * _2544) * _2275) + ((((cbLight._m0[_2391].x * _2244) * ((_2441 * _2442) + _1148)) * _2465) * _2288);
    float _2555 = (((((_2525 * _2444) + _1150) * cbLight._m0[_2479].y) * _2544) * _2275) + ((((cbLight._m0[_2391].y * _2245) * ((_2441 * _2444) + _1150)) * _2465) * _2288);
    float _2556 = (((((_2525 * _2445) + _1151) * cbLight._m0[_2479].z) * _2544) * _2275) + ((((cbLight._m0[_2391].z * _2246) * ((_2441 * _2445) + _1151)) * _2465) * _2288);
    float _2618;
    float _2620;
    float _2622;
    if (_2328)
    {
        _2618 = _2554;
        _2620 = _2555;
        _2622 = _2556;
    }
    else
    {
        uint _2624 = _2252 + 2u;
        uint _2628 = _2252 + 10u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _987) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _1065;
        float _2645 = cbLight._m0[_2624].y + _1066;
        float _2646 = cbLight._m0[_2624].z + _1067;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_984, _985, _986), vec3(cbLight._m0[_2624].xyz));
        float _4718 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2658 = dot(vec3(_984, _985, _986), vec3(_2651, _2652, _2653));
        float _4729 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4740 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
        float _2684 = 1.0 - _2643;
        float _2694 = (0.5 / (((_2420 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2684) + _2643) * _2657))) * _2657;
        float _4751 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2696 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2697 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2618 = (((((_2677 * _2442) + _1148) * cbLight._m0[_2628].x) * _2696) * _2697) + _2554;
        _2620 = (((((_2677 * _2444) + _1150) * cbLight._m0[_2628].y) * _2696) * _2697) + _2555;
        _2622 = (((((_2677 * _2445) + _1151) * cbLight._m0[_2628].z) * _2696) * _2697) + _2556;
    }
    float _2732;
    float _2734;
    float _2736;
    if (_2346)
    {
        _2732 = _2618;
        _2734 = _2620;
        _2736 = _2622;
    }
    else
    {
        uint _2743 = _2252 + 3u;
        uint _2747 = _2252 + 11u;
        float _2761 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2743].w)) * _987) * 0.949999988079071044921875);
        float _2762 = _2761 * _2761;
        float _2763 = cbLight._m0[_2743].x + _1065;
        float _2764 = cbLight._m0[_2743].y + _1066;
        float _2765 = cbLight._m0[_2743].z + _1067;
        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
        float _2770 = _2769 * _2763;
        float _2771 = _2769 * _2764;
        float _2772 = _2769 * _2765;
        float _2773 = dot(vec3(_984, _985, _986), vec3(cbLight._m0[_2743].xyz));
        float _4767 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2777 = dot(vec3(_984, _985, _986), vec3(_2770, _2771, _2772));
        float _4778 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2781 = dot(vec3(cbLight._m0[_2743].xyz), vec3(_2770, _2771, _2772));
        float _4789 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2785 = _2762 * _2762;
        float _2789 = ((_2780 * _2780) * (_2785 + (-1.0))) + 1.0;
        float _2796 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
        float _2803 = 1.0 - _2762;
        float _2813 = (0.5 / (((_2420 * ((_2776 * _2803) + _2762)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2803) + _2762) * _2776))) * _2776;
        float _4800 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2815 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2785 / ((_2789 * _2789) * 3.141590118408203125));
        float _2816 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2732 = (((((_2796 * _2442) + _1148) * cbLight._m0[_2747].x) * _2815) * _2816) + _2618;
        _2734 = (((((_2796 * _2444) + _1150) * cbLight._m0[_2747].y) * _2815) * _2816) + _2620;
        _2736 = (((((_2796 * _2445) + _1151) * cbLight._m0[_2747].z) * _2815) * _2816) + _2622;
    }
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    if (_2250.y == 0u)
    {
        float _2891 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2892 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2891;
        float _2893 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2891;
        float _2894 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2891;
        uvec4 _2906 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2907 = _2906.x;
        uint _2918 = uint((float(_2906.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1086) / _2907))) + floor(float(uint(cbSceneParam._m0[85u].x * _1085) / _2907)));
        float _2928 = (log2(_2894 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2929 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        uint _2932 = uint(isnan(14.0) ? _2929 : (isnan(_2929) ? 14.0 : min(_2929, 14.0)));
        uvec4 _2937 = texelFetch(g_lightClusterGridBuffer, int(((_2932 << 2u) + (_2918 << 6u)) >> 2u));
        uint _2938 = _2937.x;
        uint _2939 = _2906.z;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        if (((((1u << ((_2939 >> 4u) & 15u)) + 4294967295u) & _2938) == 0u) || ((_2939 & 240u) == 0u))
        {
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
        }
        else
        {
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            uint _3219 = 0u;
            uint _3228;
            bool _3229;
            for (;;)
            {
                _3228 = texelFetch(g_lightClassification, int((((_2932 << 5u) + (_2918 << 9u)) + (_3219 << 2u)) >> 2u)).x;
                _3229 = _3228 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3229)
                {
                    frontier_phi_66_pred = _3213;
                    frontier_phi_66_pred_1 = _3218;
                    frontier_phi_66_pred_2 = _3217;
                    frontier_phi_66_pred_3 = _3216;
                    frontier_phi_66_pred_4 = _3215;
                    frontier_phi_66_pred_5 = _3214;
                }
                else
                {
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    uint _3364;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3228;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    for (;;)
                    {
                        uint _3368 = uint(findLSB(_3364)) + (_3219 << 5u);
                        uint _3365 = (_3364 + 4294967295u) & _3364;
                        uint _3370 = _3368 * 48u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3390 = (_3368 * 48u) + 4u;
                        vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 3u)).x));
                        uint _3409 = (_3368 * 48u) + 8u;
                        vec3 _3420 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x));
                        float _3424 = _3384.x - _2892;
                        float _3425 = _3384.y - _2893;
                        float _3426 = _3384.z - _2894;
                        float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                        float _3430 = inversesqrt(_3427);
                        float _3431 = _3430 * _3424;
                        float _3432 = _3430 * _3425;
                        float _3433 = _3430 * _3426;
                        float _3434 = dot(vec3(_1104, _1107, _1110), vec3(_3431, _3432, _3433));
                        float _3439 = 1.0 - (_3427 * _3384.w);
                        float _4826 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3440 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3441 = sqrt(_3427) * _3403.w;
                        float _3444 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                        float _3445 = _3444 * _3444;
                        float _3448 = ((1.0 - _3445) * _3434) + _3445;
                        float _3451 = _3441 * _3441;
                        float _3455 = ((isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))) * _3440) / ((_3451 * 0.699999988079071044921875) + 1.0);
                        float _3459 = (-0.0) - _2892;
                        float _3460 = (-0.0) - _2893;
                        float _3461 = (-0.0) - _2894;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3466 = _3465 * _3459;
                        float _3467 = _3465 * _3460;
                        float _3468 = _3465 * _3461;
                        float _3476 = exp2(log2(1.0 / ((_3451 * 3.5) + 5.0)) * 0.25);
                        float _3477 = 1.0 - _1179;
                        float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                        float _3485 = _3484 * _3484;
                        float _3486 = _3485 * _3485;
                        float _3487 = _3466 + _3431;
                        float _3488 = _3467 + _3432;
                        float _3489 = _3468 + _3433;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3497 = dot(vec3(_1104, _1107, _1110), vec3(_3466, _3467, _3468));
                        float _4842 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3500 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3501 = dot(vec3(_1104, _1107, _1110), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                        float _4853 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                        float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                        float _3509 = _3444 * _3485;
                        float _3510 = _3509 * _3509;
                        float _3513 = ((1.0 - _3510) * _3434) + _3510;
                        float _4864 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3514 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3515 = 1.0 - _3485;
                        float _3525 = (0.5 / (((_3514 * ((_3500 * _3515) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3485) * _3500))) * _3514;
                        float _4875 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3536 = (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) / ((_3508 * _3508) * ((_3451 * 2.1991131305694580078125) + 3.141590118408203125))) * _3440;
                        _3288 = (_3455 * _3403.x) + _3361;
                        _3289 = (_3455 * _3403.y) + _3362;
                        _3290 = (_3455 * _3403.z) + _3363;
                        _3285 = (_3536 * _3420.x) + _3358;
                        _3286 = (_3536 * _3420.y) + _3359;
                        _3287 = (_3536 * _3420.z) + _3360;
                        if (_3365 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3365;
                        }
                    }
                    frontier_phi_66_pred = _3285;
                    frontier_phi_66_pred_1 = _3290;
                    frontier_phi_66_pred_2 = _3289;
                    frontier_phi_66_pred_3 = _3288;
                    frontier_phi_66_pred_4 = _3287;
                    frontier_phi_66_pred_5 = _3286;
                }
                _3063 = frontier_phi_66_pred;
                _3073 = frontier_phi_66_pred_1;
                _3071 = frontier_phi_66_pred_2;
                _3069 = frontier_phi_66_pred_3;
                _3067 = frontier_phi_66_pred_4;
                _3065 = frontier_phi_66_pred_5;
                uint _3220 = _3219 + 1u;
                if (_3220 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3213 = _3063;
                    _3214 = _3065;
                    _3215 = _3067;
                    _3216 = _3069;
                    _3217 = _3071;
                    _3218 = _3073;
                    _3219 = _3220;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
        }
        uvec4 _3076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3077 = _3076.z;
        uint _3079 = (_3077 >> 8u) & 15u;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        if (((4294967295u << _3079) & _2938) == 0u)
        {
            _3181 = _3062;
            _3183 = _3064;
            _3185 = _3066;
            _3187 = _3068;
            _3189 = _3070;
            _3191 = _3072;
        }
        else
        {
            float _3206 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
            float _3207 = _3206 * _2892;
            float _3208 = _3206 * _2893;
            float _3209 = _3206 * _2894;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3079 < ((_3077 >> 12u) & 15u))
            {
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3341 = _3062;
                float _3342 = _3064;
                float _3343 = _3066;
                float _3344 = _3068;
                float _3345 = _3070;
                float _3346 = _3072;
                uint _3347 = _3079;
                uint _3356;
                bool _3357;
                for (;;)
                {
                    _3356 = texelFetch(g_lightClassification, int((((_2932 << 5u) + (_2918 << 9u)) + (_3347 << 2u)) >> 2u)).x;
                    _3357 = _3356 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3357)
                    {
                        frontier_phi_77_pred = _3346;
                        frontier_phi_77_pred_1 = _3345;
                        frontier_phi_77_pred_2 = _3344;
                        frontier_phi_77_pred_3 = _3343;
                        frontier_phi_77_pred_4 = _3342;
                        frontier_phi_77_pred_5 = _3341;
                    }
                    else
                    {
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3563 = _3341;
                        float _3564 = _3342;
                        float _3565 = _3343;
                        float _3566 = _3344;
                        float _3567 = _3345;
                        float _3568 = _3346;
                        uint _3569 = _3356;
                        uint _3570;
                        vec4 _3595;
                        float _3596;
                        vec4 _3611;
                        vec3 _3623;
                        vec4 _3638;
                        vec4 _3653;
                        float _3699;
                        bool _3700;
                        for (;;)
                        {
                            uint _3580 = ((_3347 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3569));
                            _3570 = (_3569 + 4294967295u) & _3569;
                            uint _3582 = _3580 * 40u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            _3596 = _3595.w;
                            uint _3598 = (_3580 * 40u) + 4u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3613 = (_3580 * 40u) + 8u;
                            _3623 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x));
                            uint _3625 = (_3580 * 40u) + 16u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3580 * 40u) + 20u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3580 * 40u) + 24u;
                            vec4 _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3674 = (_3580 * 40u) + 28u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            _3699 = fma(_2894, _3687.z, fma(_2893, _3687.y, _3687.x * _2892)) + _3687.w;
                            _3700 = !((fma(_2894, _3668.z, fma(_2893, _3668.y, _3668.x * _2892)) + _3668.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3700)
                            {
                                float _3727 = _3595.x - _2892;
                                float _3728 = _3595.y - _2893;
                                float _3729 = _3595.z - _2894;
                                float _3730 = dot(vec3(_3727, _3728, _3729), vec3(_3727, _3728, _3729));
                                float _3733 = inversesqrt(_3730);
                                float _3734 = _3733 * _3727;
                                float _3735 = _3733 * _3728;
                                float _3736 = _3733 * _3729;
                                float _3740 = 1.0 - (_3730 / (_3596 * _3596));
                                float _4886 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3745 = sqrt(_3730) * _3611.w;
                                float _3747 = 1.39999997615814208984375 / (_3745 + 1.39999997615814208984375);
                                float _3748 = _3747 * _3747;
                                float _3751 = ((1.0 - _3748) * dot(vec3(_3734, _3735, _3736), vec3(_1104, _1107, _1110))) + _3748;
                                float _3754 = _3745 * _3745;
                                float _3758 = (fma(_2894, _3638.z, fma(_2893, _3638.y, _3638.x * _2892)) + _3638.w) / _3699;
                                float _3759 = (fma(_2894, _3653.z, fma(_2893, _3653.y, _3653.x * _2892)) + _3653.w) / _3699;
                                float _3763 = 1.0 - dot(vec2(_3758, _3759), vec2(_3758, _3759));
                                float _4902 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3765 = _3764 * (((isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0))) * _3741) / ((_3754 * 0.699999988079071044921875) + 1.0));
                                float _3777 = exp2(log2(1.0 / ((_3754 * 3.5) + 5.0)) * 0.25);
                                float _3778 = 1.0 - _1179;
                                float _3785 = sqrt(1.0 - ((1.0 - (_3778 * _3778)) * (1.0 - (_3777 * _3777))));
                                float _3786 = _3785 * _3785;
                                float _3787 = _3786 * _3786;
                                float _3788 = _3734 - _3207;
                                float _3789 = _3735 - _3208;
                                float _3790 = _3736 - _3209;
                                float _3794 = inversesqrt(dot(vec3(_3788, _3789, _3790), vec3(_3788, _3789, _3790)));
                                float _3798 = dot(vec3(_1104, _1107, _1110), vec3((-0.0) - _3207, (-0.0) - _3208, (-0.0) - _3209));
                                float _4913 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3801 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                                float _3802 = dot(vec3(_1104, _1107, _1110), vec3(_3794 * _3788, _3794 * _3789, _3794 * _3790));
                                float _4924 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3809 = ((_3805 * _3805) * (_3787 + (-1.0))) + 1.0;
                                float _3810 = _3747 * _3786;
                                float _3811 = _3810 * _3810;
                                float _3817 = ((1.0 - _3811) * dot(vec3(_1104, _1107, _1110), vec3(_3734, _3735, _3736))) + _3811;
                                float _4935 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3819 = 1.0 - _3786;
                                float _3829 = (0.5 / (((_3818 * ((_3801 * _3819) + _3786)) + 9.9999999392252902907785028219223e-09) + (((_3818 * _3819) + _3786) * _3801))) * _3818;
                                float _4946 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3839 = (_3764 * _3741) * (((_3787 * 3.1415927410125732421875) * (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) / ((_3809 * _3809) * ((_3754 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3765 * _3611.y;
                                frontier_phi_83_pred_1 = _3765 * _3611.x;
                                frontier_phi_83_pred_2 = _3839 * _3623.z;
                                frontier_phi_83_pred_3 = _3839 * _3623.y;
                                frontier_phi_83_pred_4 = _3839 * _3623.x;
                                frontier_phi_83_pred_5 = _3765 * _3611.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3847 = frontier_phi_83_pred;
                            _3846 = frontier_phi_83_pred_1;
                            _3845 = frontier_phi_83_pred_2;
                            _3844 = frontier_phi_83_pred_3;
                            _3843 = frontier_phi_83_pred_4;
                            _3848 = frontier_phi_83_pred_5;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            if (_3570 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3570;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3555;
                        frontier_phi_77_pred_1 = _3554;
                        frontier_phi_77_pred_2 = _3553;
                        frontier_phi_77_pred_3 = _3552;
                        frontier_phi_77_pred_4 = _3551;
                        frontier_phi_77_pred_5 = _3550;
                    }
                    _3192 = frontier_phi_77_pred;
                    _3190 = frontier_phi_77_pred_1;
                    _3188 = frontier_phi_77_pred_2;
                    _3186 = frontier_phi_77_pred_3;
                    _3184 = frontier_phi_77_pred_4;
                    _3182 = frontier_phi_77_pred_5;
                    uint _3348 = _3347 + 1u;
                    if (_3348 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3341 = _3182;
                        _3342 = _3184;
                        _3343 = _3186;
                        _3344 = _3188;
                        _3345 = _3190;
                        _3346 = _3192;
                        _3347 = _3348;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3186;
                frontier_phi_58_59_ladder_1 = _3192;
                frontier_phi_58_59_ladder_2 = _3190;
                frontier_phi_58_59_ladder_3 = _3188;
                frontier_phi_58_59_ladder_4 = _3184;
                frontier_phi_58_59_ladder_5 = _3182;
            }
            else
            {
                frontier_phi_58_59_ladder = _3066;
                frontier_phi_58_59_ladder_1 = _3072;
                frontier_phi_58_59_ladder_2 = _3070;
                frontier_phi_58_59_ladder_3 = _3068;
                frontier_phi_58_59_ladder_4 = _3064;
                frontier_phi_58_59_ladder_5 = _3062;
            }
            _3181 = frontier_phi_58_59_ladder_5;
            _3183 = frontier_phi_58_59_ladder_4;
            _3185 = frontier_phi_58_59_ladder;
            _3187 = frontier_phi_58_59_ladder_3;
            _3189 = frontier_phi_58_59_ladder_2;
            _3191 = frontier_phi_58_59_ladder_1;
        }
        float _3196 = isnan(1.0) ? _1163 : (isnan(_1163) ? 1.0 : min(_1163, 1.0));
        _2951 = (_3196 * _3187) + _2384;
        _2953 = (_3196 * _3189) + _2386;
        _2955 = (_3196 * _3191) + _2388;
        _2957 = ((_3181 * _1148) * _3196) + _2732;
        _2959 = ((_3183 * _1150) * _3196) + _2734;
        _2961 = ((_3185 * _1151) * _3196) + _2736;
    }
    else
    {
        _2951 = _2384;
        _2953 = _2386;
        _2955 = _2388;
        _2957 = _2732;
        _2959 = _2734;
        _2961 = _2736;
    }
    uint _2967 = _1124 + uint(cbMatDynParam._m0[0u].w);
    float _2973 = (isnan(cbMtdParam._m0[24u].y) ? _829 : (isnan(_829) ? cbMtdParam._m0[24u].y : min(_829, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4962 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _4973 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _4984 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _2996 = (((isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_2951 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1163))) + ((_2957 + ((isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0))) * _2003)) * cbPerFrame._m0[3u].x)) + ((_2973 * (((((_896.x - _893) * _875) + _893) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _821) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2967].x);
    float _2998 = (((_2973 * (((((_896.y - _894) * _875) + _894) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_810.y - _808) * _789) + _808)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2967].y) + ((_2959 + ((isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0))) * _2003)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_2953 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1163)));
    float _3000 = (((_2973 * (((((_896.z - _895) * _875) + _895) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_810.z - _809) * _789) + _809)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2967].z) + ((_2961 + ((isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0))) * _2003)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2955 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1163)));
    float _3001 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
    float _3002 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
    float _3003 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
    uint _3004 = _1123 + 6u;
    float _3012 = _1085 / cbSceneParam._m0[86u].x;
    float _3013 = _1086 / cbSceneParam._m0[86u].y;
    vec4 _3027 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, (log2((isnan(cbSceneParam._m0[77u].w) ? _1007 : (isnan(_1007) ? cbSceneParam._m0[77u].w : min(_1007, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3029 = _3027.x;
    float _3030 = _3027.y;
    float _3031 = _3027.z;
    float _3032 = _3027.w;
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    if (_1007 > cbSceneParam._m0[78u].w)
    {
        float _3087 = isnan(_1007) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1007 : min(cbSceneParam._m0[80u].w, _1007));
        float _3088 = _3087 / _1007;
        float _3099 = _3088 * _1058;
        float _3100 = _1059 * _3088;
        float _3101 = (-0.0) - _3100;
        float _3102 = _3088 * _1060;
        float _3104 = (cbSceneParam._m0[77u].w * _3101) / _3087;
        float _3105 = _3104 + cbSceneParam._m0[79u].w;
        float _3106 = cbSceneParam._m0[79u].w - _3100;
        float _3112 = sqrt(((_3099 * _3099) + (_3100 * _3100)) + (_3102 * _3102));
        float _3115 = (1.0 - (cbSceneParam._m0[77u].w / _3087)) * _3112;
        float _3120 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3122 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3298;
        if (abs((_3101 - _3104) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3298 = ((((_3105 > 0.0) ? exp2(_3120 * _3105) : (2.0 - exp2(_3122 * _3105))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3115;
        }
        else
        {
            float _3242 = 1.0 / cbSceneParam._m0[80u].x;
            float _3243 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : max(_3105, _3106));
            float _3244 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : min(_3105, _3106));
            float _3253 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : min(_3243, 0.0));
            float _3254 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : min(_3244, 0.0));
            _3298 = ((abs(_3112 / _3101) * cbSceneParam._m0[80u].y) * ((((_3253 - _3254) * 2.0) - ((exp2(_3120 * (isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0)))) - exp2(_3120 * (isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))))) * _3242)) - ((exp2(_3122 * _3253) - exp2(_3122 * _3254)) * _3242))) + (_3115 * cbSceneParam._m0[80u].z);
        }
        vec4 _3300 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, 1.0), 0.0);
        float _3309 = exp2((_3298 * (-1.44269502162933349609375)) * (1.0 - _3300.w));
        float _3310 = log2(_3309);
        float _3326 = log2(_3032);
        _3124 = (exp2(_3326 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].x)) * _3300.x) / cbSceneParam._m0[78u].x)) + _3029;
        _3126 = (exp2(_3326 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].y)) * _3300.y) / cbSceneParam._m0[78u].y)) + _3030;
        _3128 = (exp2(_3326 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].z)) * _3300.z) / cbSceneParam._m0[78u].z)) + _3031;
        _3130 = _3309 * _3032;
    }
    else
    {
        _3124 = _3029;
        _3126 = _3030;
        _3128 = _3031;
        _3130 = _3032;
    }
    bool _3336;
    vec4 _3139;
    vec4 _3161;
    float _3163;
    float _3167;
    float _3168;
    float _3169;
    float _3170;
    bool _3180;
    for (;;)
    {
        _3139 = cbMatDynParam._m0[0u];
        float _3141 = roundEven(_3139.y);
        bool _3142 = _3141 == 3.0;
        float _3143 = log2(_3130);
        float _3150 = exp2(_3143 * cbSceneParam._m0[78u].x) * _3001;
        float _3151 = exp2(_3143 * cbSceneParam._m0[78u].y) * _3002;
        float _3152 = exp2(_3143 * cbSceneParam._m0[78u].z) * _3003;
        float _3159 = _1074 + (-0.5);
        _3161 = cbMtdParam._m0[1u];
        _3163 = _3161.y * _3159;
        float _3166 = (_3141 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3167 = _3166 * (_3142 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3124)));
        _3168 = _3166 * (_3142 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3126)));
        _3169 = _3166 * (_3142 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3128)));
        _3170 = _3159 * 0.999000012874603271484375;
        _3180 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3180)
        {
            if ((cbInstanceData._m0[_1123 + 7u].x + _3170) < 0.5)
            {
                _3336 = true;
                break;
            }
        }
        uint _3277 = _1124 + uint(_3139.w);
        if ((cbInstanceData._m0[_3277].w < 1.0) && ((cbInstanceData._m0[_3277].w + _3170) < 0.5))
        {
            _3336 = true;
            break;
        }
        if ((_3163 + 1.0) < _3161.x)
        {
            _3336 = true;
            break;
        }
        _3336 = false;
        break;
    }
    float _3541;
    if (_3336)
    {
        discard_state = true;
        _3541 = 0.0;
    }
    else
    {
        _3541 = cbInstanceData._m0[_3004].w;
    }
    SV_Target.x = _3167;
    SV_Target.y = _3168;
    SV_Target.z = _3169;
    SV_Target.w = _3541;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3004].w;
    discard_exit();
}


