#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[28];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_custom_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_custom_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D C_c4200_custom_snp_0_Texture2D_27;
layout(set = 0, binding = 12) uniform texture2D C_c4200_custom_snp_0_Texture2D_28;
layout(set = 0, binding = 13) uniform texture2D C_c4200_custom_snp_0_Texture2D_29;
layout(set = 0, binding = 14) uniform texture2D C_c4200_custom_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_c4200_custom_snp_0_Texture2D_30;
layout(set = 0, binding = 16) uniform texture2D C_c4200_custom_snp_0_Texture2D_4;
layout(set = 0, binding = 17) uniform texture2D C_c4200_custom_snp_0_Texture2D_5;
layout(set = 0, binding = 18) uniform texture2D C_c4200_custom_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_c4200_custom_snp_0_Texture2D_7;
layout(set = 0, binding = 20) uniform texture2D C_c4200_custom_snp_0_Texture2D_8;
layout(set = 0, binding = 21) uniform texture2D C_c4200_custom_snp_0_Texture2D_9;
layout(set = 0, binding = 5) uniform texture2D C_c4200_custom_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_c4200_custom_snp_0_Texture2D_22;
layout(set = 0, binding = 7) uniform texture2D C_c4200_custom_snp_0_Texture2D_23;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1444;
float _3846;
float _3847;
float _3848;
float _3849;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _278 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD_1) + cbTextureTilingScale._m0[19u].w));
    float _287 = log2(0.0);
    float _289 = exp2(_287 * cbMtdParam._m0[18u].w);
    float _290 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _291 = isnan(1.0) ? _290 : (isnan(_290) ? 1.0 : min(_290, 1.0));
    vec4 _307 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _311 = _307.z;
    float _316 = exp2(log2(_311 * cbMtdParam._m0[19u].x) * cbMtdParam._m0[18u].y);
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(1.0) ? _317 : (isnan(_317) ? 1.0 : min(_317, 1.0));
    vec4 _330 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    vec4 _355 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _366 = cbMtdParam._m0[9u].x * _355.x;
    float _367 = cbMtdParam._m0[9u].y * _355.y;
    float _368 = cbMtdParam._m0[9u].z * _355.z;
    float _375 = (((cbMtdParam._m0[10u].x * _330.x) - _366) * _318) + _366;
    float _376 = (((cbMtdParam._m0[10u].y * _330.y) - _367) * _318) + _367;
    float _377 = (((cbMtdParam._m0[10u].z * _330.z) - _368) * _318) + _368;
    vec4 _390 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_30, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _392 = _390.x;
    float _396 = exp2(log2(_392) * cbMtdParam._m0[19u].z);
    vec4 _409 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    float _429 = (((cbMtdParam._m0[12u].x * _409.x) - _375) * _396) + _375;
    float _430 = (((cbMtdParam._m0[12u].y * _409.y) - _376) * _396) + _376;
    float _431 = (((cbMtdParam._m0[12u].z * _409.z) - _377) * _396) + _377;
    vec4 _444 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w));
    float _469 = (_278.x * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].x * _444.x) - _429) * _291) + _429);
    float _471 = (_278.y * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].y * _444.y) - _430) * _291) + _430);
    float _473 = (_278.z * 4.55000019073486328125) * ((((cbMtdParam._m0[13u].z * _444.z) - _431) * _291) + _431);
    float _475 = cbMtdParam._m0[22u].z * TEXCOORD_6;
    float _484 = (_475 - (((texture(sampler2D(C_c4200_custom_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[22u].x) * (1.0 - _475))) * (cbMtdParam._m0[22u].y + 1.0);
    float _3878 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _492 = ((cbMtdParam._m0[14u].x - _469) * _485) + _469;
    float _493 = ((cbMtdParam._m0[14u].y - _471) * _485) + _471;
    float _494 = ((cbMtdParam._m0[14u].z - _473) * _485) + _473;
    float _496 = _392 - (_475 * _392);
    vec4 _512 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w));
    vec4 _530 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD_1) + cbTextureTilingScale._m0[18u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _536 = cbMtdParam._m0[18u].x + _530.z;
    float _539 = (((cbMtdParam._m0[18u].z + _512.z) - _536) * _318) + _536;
    vec4 _551 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD_1) + cbTextureTilingScale._m0[20u].w));
    float _563 = (((_551.z - _539) + cbMtdParam._m0[24u].z) * _396) + _539;
    float _569 = ((((_311 * 2.0) * _563) - _563) * cbMtdParam._m0[20u].z) + _563;
    vec4 _582 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[21u].x * TEXCOORD) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * TEXCOORD_1) + cbTextureTilingScale._m0[21u].w));
    float _591 = (((cbMtdParam._m0[19u].y + _582.z) - _569) * _291) + _569;
    vec4 _607 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _622 = ((cbMtdParam._m0[21u].w * _475) * ((_607.z * cbMtdParam._m0[21u].z) - _591)) + _591;
    float _633 = cbMtdParam._m0[23u].y * cbPerFrame._m0[22u].x;
    vec4 _657 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_28, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * ((_633 * cbMtdParam._m0[26u].y) + TEXCOORD)) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * ((_633 * cbMtdParam._m0[26u].z) + TEXCOORD_1)) + cbTextureTilingScale._m0[12u].w));
    float _661 = cbPerFrame._m0[22u].x * 2.0;
    float _662 = _661 * cbMtdParam._m0[25u].y;
    float _665 = (_657.x * 0.5) + (-0.25);
    float _668 = (_657.y * 0.5) + (-0.25);
    float _669 = _668 * cbMtdParam._m0[25u].x;
    float _671 = (-0.0) - (cbMtdParam._m0[25u].x * _665);
    float _673 = fract(_662);
    float _675 = fract(_662 + 0.5);
    float _686 = abs((_673 * 2.0) + (-1.0));
    vec4 _703 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_673 * _671) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_669 * _673) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _707 = _703.z;
    vec4 _708 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_27, SS_DiffuseMap), vec2((((_675 * _671) + TEXCOORD) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((_669 * _675) + TEXCOORD_1) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _719 = ((_708.x - _705) * _686) + _705;
    float _726 = exp2(log2(_719 * cbMtdParam._m0[23u].z) * cbMtdParam._m0[23u].w);
    float _727 = isnan(cbMtdParam._m0[24u].x) ? _726 : (isnan(_726) ? cbMtdParam._m0[24u].x : max(_726, cbMtdParam._m0[24u].x));
    float _748 = _661 * cbMtdParam._m0[25u].w;
    float _749 = _668 * cbMtdParam._m0[25u].z;
    float _751 = (-0.0) - (cbMtdParam._m0[25u].z * _665);
    float _752 = fract(_748);
    float _754 = fract(_748 + 0.5);
    float _765 = abs((_752 * 2.0) + (-1.0));
    vec4 _781 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_752 * _751) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_749 * _752) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _783 = _781.x;
    float _784 = _781.y;
    float _785 = _781.z;
    vec4 _786 = texture(sampler2D(C_c4200_custom_snp_0_Texture2D_29, SS_DiffuseMap), vec2((((_754 * _751) + TEXCOORD) * cbTextureTilingScale._m0[13u].x) + cbTextureTilingScale._m0[13u].z, (((_749 * _754) + TEXCOORD_1) * cbTextureTilingScale._m0[13u].y) + cbTextureTilingScale._m0[13u].w));
    float _815 = ((_512.x - _532) * _318) + _532;
    float _816 = ((_512.y - _533) * _318) + _533;
    float _821 = ((_551.x - _815) * _396) + _815;
    float _822 = ((_551.y - _816) * _396) + _816;
    float _831 = ((((_582.x - _821) * _291) + _821) * 2.0) + (-1.0);
    float _832 = ((((_582.y - _822) * _291) + _822) * 2.0) + (-1.0);
    float _833 = dot(vec2(_831, _832), vec2(_831, _832));
    float _3899 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _838 = sqrt(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))));
    float _848 = ((cbMtdParam._m0[20u].w * ((_307.x * 2.0) + (-1.0))) + _831) + ((((_607.x * 2.0) + (-1.0)) * _475) * cbMtdParam._m0[21u].y);
    float _849 = ((cbMtdParam._m0[20u].w * ((_307.y * 2.0) + (-1.0))) + _832) + (((cbMtdParam._m0[22u].z * TEXCOORD_7) * ((_607.y * 2.0) + (-1.0))) * cbMtdParam._m0[21u].y);
    float _852 = fma(_838, _228 * NORMAL.x, fma(_849, _235 * TANGENT.x, (_221 * _213) * _848));
    float _855 = fma(_838, _228 * NORMAL.y, fma(_849, _235 * TANGENT.y, (_221 * _214) * _848));
    float _858 = fma(_838, _228 * NORMAL.z, fma(_849, _235 * TANGENT.z, (_221 * _215) * _848));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    float _863 = _862 * _852;
    float _864 = _862 * _855;
    float _865 = _862 * _858;
    float _3910 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _866 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3932 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3943 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3954 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _870 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _937 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _927);
    float _938 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _927);
    float _939 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _927);
    float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
    float _944 = _937 * _943;
    float _945 = _938 * _943;
    float _946 = _939 * _943;
    vec4 _951 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _953 = _951.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1125 = sqrt(((_937 * _937) + (_938 * _938)) + (_939 * _939));
        float _1131 = (cbMatDynParam._m0[5u].x * _1125) + cbMatDynParam._m0[5u].y;
        float _3965 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1136 = (cbMatDynParam._m0[5u].z * _1125) + cbMatDynParam._m0[5u].w;
        float _3976 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) - _1132)) + _1132) < ((_953 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _964 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _965 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _983 = fma(_865, cbSceneParam._m0[5u].z, fma(_864, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _863));
    float _986 = fma(_865, cbSceneParam._m0[6u].z, fma(_864, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _863));
    float _989 = fma(_865, cbSceneParam._m0[7u].z, fma(_864, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _863));
    uint _1002 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1003 = _1002 + 9u;
    uint _1004 = _1003 + uint(cbMatDynParam._m0[0u].w);
    float _1010 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_1004].x;
    float _1011 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_1004].y;
    float _1012 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * cbInstanceData._m0[_1004].z;
    float _3987 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1016 = 1.0 - _870;
    float _1017 = _1013 * _1016;
    float _1018 = _1014 * _1016;
    float _1019 = _1015 * _1016;
    float _1024 = (_1013 + (-0.039999999105930328369140625)) * _870;
    float _1025 = (_1014 + (-0.039999999105930328369140625)) * _870;
    float _1026 = (_1015 + (-0.039999999105930328369140625)) * _870;
    float _1027 = _1024 + 0.039999999105930328369140625;
    float _1029 = _1025 + 0.039999999105930328369140625;
    float _1030 = _1026 + 0.039999999105930328369140625;
    vec4 _1039 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _964, cbSceneParam._m0[86u].y * _965));
    float _1042 = _1039.x * TEXCOORD_3.w;
    float _1043 = dot(vec3(_863, _864, _865), vec3(_944, _945, _946));
    float _1046 = _1043 * 2.0;
    float _1050 = (_1046 * _863) - _944;
    float _1051 = (_1046 * _864) - _945;
    float _1052 = (_1046 * _865) - _946;
    float _1056 = abs(dot(vec3(_944, _945, _946), vec3(_863, _864, _865)));
    float _4020 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1058 = sqrt(_866);
    float _1071 = exp2((_1058 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1058 * 3.0));
    float _1077 = (1.0 - _1071) * ((_1058 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1078 = _1071 * _1058;
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1443;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1169 = fma(_1114, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106));
        float _1173 = fma(_1114, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106));
        float _1177 = fma(_1114, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106));
        float _1201 = _1106 + _863;
        float _1202 = _1110 + _864;
        float _1203 = _1114 + _865;
        float _1213 = fma(_1203, cbModelParam._m0[26u].z, fma(_1202, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1201)) - _1169;
        float _1214 = fma(_1203, cbModelParam._m0[27u].z, fma(_1202, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1201)) - _1173;
        float _1215 = fma(_1203, cbModelParam._m0[28u].z, fma(_1202, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1201)) - _1177;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1169 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1173 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[34u].z) + ((((((_1177 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1271 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1237.x + (-0.5));
        float _1273 = _1271 * (_1237.y + (-0.5));
        float _1274 = _1271 * (_1237.z + (-0.5));
        float _1281 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1244.x + (-0.5));
        float _1283 = _1281 * (_1244.y + (-0.5));
        float _1284 = _1281 * (_1244.z + (-0.5));
        float _1291 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1251.x + (-0.5));
        float _1293 = _1291 * (_1251.y + (-0.5));
        float _1294 = _1291 * (_1251.z + (-0.5));
        float _1301 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1258.x + (-0.5));
        float _1303 = _1301 * (_1258.y + (-0.5));
        float _1304 = _1301 * (_1258.z + (-0.5));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = _1272 * 0.5;
        float _1309 = _1282 * 0.5;
        float _1310 = _1292 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1325 = (dot(vec3(_863, _864, _865), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1335 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4068 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1337 + 1.0))) + _1342) * _1305;
        float _1352 = _1273 * 0.5;
        float _1353 = _1283 * 0.5;
        float _1354 = _1293 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_863, _864, _865), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4101 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1379 + 1.0))) + _1384) * _1306;
        float _1394 = _1274 * 0.5;
        float _1395 = _1284 * 0.5;
        float _1396 = _1294 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_863, _864, _865), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4134 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1421 + 1.0))) + _1426) * _1307;
        _1443 = _1274;
        _1445 = _1273;
        _1446 = _1272;
        _1447 = _1284;
        _1448 = _1283;
        _1449 = _1282;
        _1450 = _1294;
        _1451 = _1293;
        _1452 = _1292;
        _1453 = _1307;
        _1454 = _1306;
        _1455 = _1305;
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1457 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1458 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
    }
    else
    {
        _1443 = _1444;
        _1445 = _1444;
        _1446 = _1444;
        _1447 = _1444;
        _1448 = _1444;
        _1449 = _1444;
        _1450 = _1444;
        _1451 = _1444;
        _1452 = _1444;
        _1453 = _1444;
        _1454 = _1444;
        _1455 = _1444;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1487 = fma(_1114, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1106));
        float _1491 = fma(_1114, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1106));
        float _1495 = fma(_1114, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1106));
        float _1518 = _1106 + _863;
        float _1519 = _1110 + _864;
        float _1520 = _1114 + _865;
        float _1530 = fma(_1520, cbModelParam._m0[30u].z, fma(_1519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1518)) - _1487;
        float _1531 = fma(_1520, cbModelParam._m0[31u].z, fma(_1519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1518)) - _1491;
        float _1532 = fma(_1520, cbModelParam._m0[32u].z, fma(_1519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1518)) - _1495;
        float _1536 = inversesqrt(dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532)));
        float _1549 = ((_1536 * _1530) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1487 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1550 = ((_1536 * _1531) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1491 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1551 = ((_1536 * _1532) / cbModelParam._m0[35u].z) + ((((((_1495 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        float _1586 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1553.x + (-0.5));
        float _1588 = _1586 * (_1553.y + (-0.5));
        float _1589 = _1586 * (_1553.z + (-0.5));
        float _1596 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1560.x + (-0.5));
        float _1598 = _1596 * (_1560.y + (-0.5));
        float _1599 = _1596 * (_1560.z + (-0.5));
        float _1606 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1567.x + (-0.5));
        float _1608 = _1606 * (_1567.y + (-0.5));
        float _1609 = _1606 * (_1567.z + (-0.5));
        float _1616 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1574.x + (-0.5));
        float _1618 = _1616 * (_1574.y + (-0.5));
        float _1619 = _1616 * (_1574.z + (-0.5));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = _1587 * 0.5;
        float _1624 = _1597 * 0.5;
        float _1625 = _1607 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_863, _864, _865), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4197 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1650 + 1.0))) + _1655) * _1620;
        float _1665 = _1588 * 0.5;
        float _1666 = _1598 * 0.5;
        float _1667 = _1608 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_863, _864, _865), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4230 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1692 + 1.0))) + _1697) * _1621;
        float _1707 = _1589 * 0.5;
        float _1708 = _1599 * 0.5;
        float _1709 = _1609 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_863, _864, _865), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4263 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1734 + 1.0))) + _1739) * _1622;
        _1756 = _1589;
        _1757 = _1588;
        _1758 = _1587;
        _1759 = _1599;
        _1760 = _1598;
        _1761 = _1597;
        _1762 = _1609;
        _1763 = _1608;
        _1764 = _1607;
        _1765 = _1622;
        _1766 = _1621;
        _1767 = _1620;
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
    }
    else
    {
        _1756 = _1444;
        _1757 = _1444;
        _1758 = _1444;
        _1759 = _1444;
        _1760 = _1444;
        _1761 = _1444;
        _1762 = _1444;
        _1763 = _1444;
        _1764 = _1444;
        _1765 = _1444;
        _1766 = _1444;
        _1767 = _1444;
        _1768 = 0.0;
        _1769 = 0.0;
        _1770 = 0.0;
    }
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1456)) + _1456;
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1457)) + _1457;
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1458)) + _1458;
    float _1803 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1780));
    float _1824 = _1050 * 0.5;
    float _1825 = _1051 * 0.5;
    float _1826 = _1052 * 0.5;
    float _1827 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1830 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1833 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1867;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1840 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1443, _1447, _1450, _1453));
        float _1844 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1445, _1448, _1451, _1454));
        float _1848 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1446, _1449, _1452, _1455));
        float _1855 = dot(vec4(cbModelParam._m0[39u]), vec4(_1824, _1825, _1826, 1.0));
        _1867 = dot(vec3(isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1867 = 1.0;
    }
    float _1878;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1869 = dot(vec4(cbModelParam._m0[40u]), vec4(_1824, _1825, _1826, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1869) ? 0.0 : (isnan(0.0) ? _1869 : max(0.0, _1869))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1882 = (_1878 * cbModelParam._m0[1u].x) + (_1867 * (1.0 - cbModelParam._m0[1u].x));
    float _1892 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _866);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1892 : min(cbModelParam._m0[25u].z, _1892));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1940 = fma(_1114, cbModelParam._m0[13u].z, fma(_1110, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1106)) + cbModelParam._m0[13u].w;
        float _1944 = fma(_1114, cbModelParam._m0[14u].z, fma(_1110, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1106)) + cbModelParam._m0[14u].w;
        float _1948 = fma(_1114, cbModelParam._m0[15u].z, fma(_1110, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1106)) + cbModelParam._m0[15u].w;
        float _1951 = fma(_1052, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050));
        float _1954 = fma(_1052, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050));
        float _1957 = fma(_1052, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050));
        float _1985;
        if (_1951 > 0.0)
        {
            _1985 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1985 = frontier_phi_17_15_ladder;
        }
        float _2188;
        if (_1954 > 0.0)
        {
            _2188 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2188 = frontier_phi_26_22_ladder;
        }
        float _2442;
        if (_1957 > 0.0)
        {
            _2442 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2442 = frontier_phi_38_33_ladder;
        }
        float _2444 = isnan(_2188) ? _1985 : (isnan(_1985) ? _2188 : min(_1985, _2188));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1951) + _1940;
        float _2450 = (_2445 * _1954) + _1944;
        float _2451 = (_2445 * _1957) + _1948;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2452;
        float _2456 = _2452 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 > _2456) || ((_2450 < _2454) || ((_2449 < _2454) || (_2449 > _2456))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2451, cbModelParam._m0[9u].z, fma(_2450, cbModelParam._m0[9u].y, _2449 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2451, cbModelParam._m0[10u].z, fma(_2450, cbModelParam._m0[10u].y, _2449 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2451, cbModelParam._m0[11u].z, fma(_2450, cbModelParam._m0[11u].y, _2449 * cbModelParam._m0[11u].x))), _1893);
            frontier_phi_16_38_ladder = _2579.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2579.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2579.x * cbModelParam._m0[1u].y;
        }
        _1973 = frontier_phi_16_38_ladder_2;
        _1975 = frontier_phi_16_38_ladder_1;
        _1977 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1050, _1051, _1052), _1893);
        _1973 = _1961.x * cbModelParam._m0[1u].y;
        _1975 = _1961.y * cbModelParam._m0[1u].y;
        _1977 = _1961.z * cbModelParam._m0[1u].y;
    }
    float _1981 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _866);
    float _1982 = isnan(_1981) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1981 : min(cbModelParam._m0[25u].w, _1981));
    float _2071;
    float _2073;
    float _2075;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2035 = fma(_1114, cbModelParam._m0[21u].z, fma(_1110, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1106)) + cbModelParam._m0[21u].w;
        float _2039 = fma(_1114, cbModelParam._m0[22u].z, fma(_1110, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1106)) + cbModelParam._m0[22u].w;
        float _2043 = fma(_1114, cbModelParam._m0[23u].z, fma(_1110, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1106)) + cbModelParam._m0[23u].w;
        float _2046 = fma(_1052, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050));
        float _2049 = fma(_1052, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050));
        float _2052 = fma(_1052, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050));
        float _2193;
        if (_2046 > 0.0)
        {
            _2193 = abs((1.0 - _2035) / _2046);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2035 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2193 = frontier_phi_28_24_ladder;
        }
        float _2469;
        if (_2049 > 0.0)
        {
            _2469 = abs((1.0 - _2039) / _2049);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2039 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2469 = frontier_phi_40_35_ladder;
        }
        float _2682;
        if (_2052 > 0.0)
        {
            _2682 = abs((1.0 - _2043) / _2052);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2043 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2682 = frontier_phi_49_46_ladder;
        }
        float _2684 = isnan(_2469) ? _2193 : (isnan(_2193) ? _2469 : min(_2193, _2469));
        float _2685 = isnan(_2682) ? _2684 : (isnan(_2684) ? _2682 : min(_2684, _2682));
        float _2689 = (_2685 * _2046) + _2035;
        float _2690 = (_2685 * _2049) + _2039;
        float _2691 = (_2685 * _2052) + _2043;
        float _2692 = _2685 * 9.9999997473787516355514526367188e-05;
        float _2693 = (-1.0) - _2692;
        float _2695 = _2692 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2691 > _2695) || ((_2691 < _2693) || ((_2690 > _2695) || ((_2690 < _2693) || ((_2689 < _2693) || (_2689 > _2695))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2691, cbModelParam._m0[17u].z, fma(_2690, cbModelParam._m0[17u].y, _2689 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2691, cbModelParam._m0[18u].z, fma(_2690, cbModelParam._m0[18u].y, _2689 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2691, cbModelParam._m0[19u].z, fma(_2690, cbModelParam._m0[19u].y, _2689 * cbModelParam._m0[19u].x))), _1982);
            frontier_phi_25_49_ladder = _2913.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2913.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2913.x * cbModelParam._m0[1u].z;
        }
        _2071 = frontier_phi_25_49_ladder_2;
        _2073 = frontier_phi_25_49_ladder_1;
        _2075 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2055 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1050, _1051, _1052), _1982);
        _2071 = _2055.x * cbModelParam._m0[1u].z;
        _2073 = _2055.y * cbModelParam._m0[1u].z;
        _2075 = _2055.z * cbModelParam._m0[1u].z;
    }
    float _2088 = (((_1077 * _1027) + _1078) * _1042) * ((cbModelParam._m0[1u].w * (_2071 - _1973)) + _1973);
    float _2090 = (((_1077 * _1029) + _1078) * _1042) * ((cbModelParam._m0[1u].w * (_2073 - _1975)) + _1975);
    float _2092 = (((_1077 * _1030) + _1078) * _1042) * ((cbModelParam._m0[1u].w * (_2075 - _1977)) + _1977);
    float _2095 = fma(_2092, cbSceneParam._m0[89u].z, fma(_2090, cbSceneParam._m0[89u].y, _2088 * cbSceneParam._m0[89u].x));
    float _2098 = fma(_2092, cbSceneParam._m0[90u].z, fma(_2090, cbSceneParam._m0[90u].y, _2088 * cbSceneParam._m0[90u].x));
    float _2101 = fma(_2092, cbSceneParam._m0[91u].z, fma(_2090, cbSceneParam._m0[91u].y, _2088 * cbSceneParam._m0[91u].x));
    uvec4 _2111 = floatBitsToUint(cbInstanceData._m0[_1002 + 5u]);
    uint _2113 = _2111.x * 14u;
    uint _2114 = _2113 + 13u;
    float _2121 = _1042 + (-1.0);
    float _2126 = (cbLight._m0[_2114].x * _2121) + 1.0;
    float _2127 = (cbLight._m0[_2114].y * _2121) + 1.0;
    float _2128 = (cbLight._m0[_2114].z * _2121) + 1.0;
    float _2129 = (cbLight._m0[_2114].w * _2121) + 1.0;
    uint _2130 = _2113 + 5u;
    float _2136 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2140 = _2113 + 4u;
    float _2147 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2151 = _2113 | 1u;
    float _2162 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_863, _864, _865));
    float _2165 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_863, _864, _865));
    float _4399 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _4410 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2170 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2172 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.3183098733425140380859375;
    float _2179 = ((cbLight._m0[_2130].x * _2136) * _2172) + ((cbLight._m0[_2140].x * _2147) * _2170);
    float _2180 = ((_2136 * cbLight._m0[_2130].y) * _2172) + ((_2147 * cbLight._m0[_2140].y) * _2170);
    float _2181 = ((_2136 * cbLight._m0[_2130].z) * _2172) + ((_2147 * cbLight._m0[_2140].z) * _2170);
    uvec4 _2185 = floatBitsToUint(cbLight._m0[_2113 + 12u]);
    bool _2187 = _2185.x == 0u;
    float _2198;
    float _2200;
    float _2202;
    if (_2187)
    {
        _2198 = _2179;
        _2200 = _2180;
        _2202 = _2181;
    }
    else
    {
        uint _2206 = _2113 + 6u;
        float _2222 = (dot(vec3(cbLight._m0[_2113 + 2u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4421 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2225 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2198 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _2179;
        _2200 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _2180;
        _2202 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _2181;
    }
    bool _2205 = _2185.y == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2205)
    {
        _2243 = _2198;
        _2245 = _2200;
        _2247 = _2202;
    }
    else
    {
        uint _2413 = _2113 + 7u;
        float _2429 = (dot(vec3(cbLight._m0[_2113 + 3u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4437 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2432 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2243 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2198;
        _2245 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2200;
        _2247 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2202;
    }
    uint _2250 = _2113 + 8u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _866) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2113].x + _944;
    float _2266 = cbLight._m0[_2113].y + _945;
    float _2267 = cbLight._m0[_2113].z + _946;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2113].xyz));
    float _4453 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _4464 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _2279 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2280 = dot(vec3(_863, _864, _865), vec3(_2272, _2273, _2274));
    float _4475 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2284 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2272, _2273, _2274));
    float _4486 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2288 = _2264 * _2264;
    float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
    float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
    float _2301 = 0.959999978542327880859375 - _1024;
    float _2303 = 0.959999978542327880859375 - _1025;
    float _2304 = 0.959999978542327880859375 - _1026;
    float _2311 = 1.0 - _2264;
    float _2322 = (0.5 / (((_2279 * ((_2278 * _2311) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2311) + _2264) * _2278))) * _2278;
    float _4497 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2324 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
    uint _2335 = _2113 + 9u;
    float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _866) * 0.949999988079071044921875);
    float _2347 = _2346 * _2346;
    float _2348 = cbLight._m0[_2151].x + _944;
    float _2349 = cbLight._m0[_2151].y + _945;
    float _2350 = cbLight._m0[_2151].z + _946;
    float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
    float _2355 = _2354 * _2348;
    float _2356 = _2354 * _2349;
    float _2357 = _2354 * _2350;
    float _2358 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2151].xyz));
    float _4508 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2362 = dot(vec3(_863, _864, _865), vec3(_2355, _2356, _2357));
    float _4519 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2366 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2355, _2356, _2357));
    float _4530 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2370 = _2347 * _2347;
    float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0);
    float _2388 = 1.0 - _2347;
    float _2398 = (0.5 / (((_2279 * ((_2361 * _2388) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2388) + _2347) * _2361))) * _2361;
    float _4541 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2400 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
    float _2410 = (((((_2381 * _2301) + _1027) * cbLight._m0[_2335].x) * _2400) * _2136) + (((((_2300 * _2301) + _1027) * cbLight._m0[_2250].x) * _2324) * _2147);
    float _2411 = (((((_2381 * _2303) + _1029) * cbLight._m0[_2335].y) * _2400) * _2136) + (((((_2300 * _2303) + _1029) * cbLight._m0[_2250].y) * _2324) * _2147);
    float _2412 = (((((_2381 * _2304) + _1030) * cbLight._m0[_2335].z) * _2400) * _2136) + (((((_2300 * _2304) + _1030) * cbLight._m0[_2250].z) * _2324) * _2147);
    float _2474;
    float _2476;
    float _2478;
    if (_2187)
    {
        _2474 = _2410;
        _2476 = _2411;
        _2478 = _2412;
    }
    else
    {
        uint _2480 = _2113 + 2u;
        uint _2484 = _2113 + 10u;
        float _2498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2480].w)) * _866) * 0.949999988079071044921875);
        float _2499 = _2498 * _2498;
        float _2500 = cbLight._m0[_2480].x + _944;
        float _2501 = cbLight._m0[_2480].y + _945;
        float _2502 = cbLight._m0[_2480].z + _946;
        float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
        float _2507 = _2506 * _2500;
        float _2508 = _2506 * _2501;
        float _2509 = _2506 * _2502;
        float _2510 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2480].xyz));
        float _4552 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2514 = dot(vec3(_863, _864, _865), vec3(_2507, _2508, _2509));
        float _4563 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2518 = dot(vec3(cbLight._m0[_2480].xyz), vec3(_2507, _2508, _2509));
        float _4574 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2522 = _2499 * _2499;
        float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
        float _2533 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
        float _2540 = 1.0 - _2499;
        float _2550 = (0.5 / (((_2279 * ((_2513 * _2540) + _2499)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2540) + _2499) * _2513))) * _2513;
        float _4585 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2552 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
        float _2553 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2474 = (((((_2533 * _2301) + _1027) * cbLight._m0[_2484].x) * _2552) * _2553) + _2410;
        _2476 = (((((_2533 * _2303) + _1029) * cbLight._m0[_2484].y) * _2552) * _2553) + _2411;
        _2478 = (((((_2533 * _2304) + _1030) * cbLight._m0[_2484].z) * _2552) * _2553) + _2412;
    }
    float _2588;
    float _2590;
    float _2592;
    if (_2205)
    {
        _2588 = _2474;
        _2590 = _2476;
        _2592 = _2478;
    }
    else
    {
        uint _2599 = _2113 + 3u;
        uint _2603 = _2113 + 11u;
        float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _866) * 0.949999988079071044921875);
        float _2618 = _2617 * _2617;
        float _2619 = cbLight._m0[_2599].x + _944;
        float _2620 = cbLight._m0[_2599].y + _945;
        float _2621 = cbLight._m0[_2599].z + _946;
        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
        float _2626 = _2625 * _2619;
        float _2627 = _2625 * _2620;
        float _2628 = _2625 * _2621;
        float _2629 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2599].xyz));
        float _4601 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2633 = dot(vec3(_863, _864, _865), vec3(_2626, _2627, _2628));
        float _4612 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2637 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2626, _2627, _2628));
        float _4623 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2641 = _2618 * _2618;
        float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
        float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
        float _2659 = 1.0 - _2618;
        float _2669 = (0.5 / (((_2279 * ((_2632 * _2659) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2279 * _2659) + _2618) * _2632))) * _2632;
        float _4634 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2671 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
        float _2672 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2588 = (((((_2652 * _2301) + _1027) * cbLight._m0[_2603].x) * _2671) * _2672) + _2474;
        _2590 = (((((_2652 * _2303) + _1029) * cbLight._m0[_2603].y) * _2671) * _2672) + _2476;
        _2592 = (((((_2652 * _2304) + _1030) * cbLight._m0[_2603].z) * _2671) * _2672) + _2478;
    }
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_2111.y == 0u)
    {
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2747;
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2747;
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2747;
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.x;
        uint _2774 = uint((float(_2762.y) * floor(float(uint(cbSceneParam._m0[85u].y * _965) / _2763))) + floor(float(uint(cbSceneParam._m0[85u].x * _964) / _2763)));
        float _2784 = (log2(_2750 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2785 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        uint _2788 = uint(isnan(14.0) ? _2785 : (isnan(_2785) ? 14.0 : min(_2785, 14.0)));
        uvec4 _2793 = texelFetch(g_lightClusterGridBuffer, int(((_2788 << 2u) + (_2774 << 6u)) >> 2u));
        uint _2794 = _2793.x;
        uint _2795 = _2762.z;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((((1u << ((_2795 >> 4u) & 15u)) + 4294967295u) & _2794) == 0u) || ((_2795 & 240u) == 0u))
        {
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
        }
        else
        {
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            uint _3075 = 0u;
            uint _3084;
            bool _3085;
            for (;;)
            {
                _3084 = texelFetch(g_lightClassification, int((((_2788 << 5u) + (_2774 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                _3085 = _3084 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3085)
                {
                    frontier_phi_66_pred = _3069;
                    frontier_phi_66_pred_1 = _3074;
                    frontier_phi_66_pred_2 = _3073;
                    frontier_phi_66_pred_3 = _3072;
                    frontier_phi_66_pred_4 = _3071;
                    frontier_phi_66_pred_5 = _3070;
                }
                else
                {
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    uint _3220;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3074;
                    _3220 = _3084;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    for (;;)
                    {
                        uint _3224 = uint(findLSB(_3220)) + (_3075 << 5u);
                        uint _3221 = (_3220 + 4294967295u) & _3220;
                        uint _3226 = _3224 * 48u;
                        vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3246 = (_3224 * 48u) + 4u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3246)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 3u)).x));
                        uint _3265 = (_3224 * 48u) + 8u;
                        vec3 _3276 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x));
                        float _3280 = _3240.x - _2748;
                        float _3281 = _3240.y - _2749;
                        float _3282 = _3240.z - _2750;
                        float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                        float _3286 = inversesqrt(_3283);
                        float _3287 = _3286 * _3280;
                        float _3288 = _3286 * _3281;
                        float _3289 = _3286 * _3282;
                        float _3290 = dot(vec3(_983, _986, _989), vec3(_3287, _3288, _3289));
                        float _3295 = 1.0 - (_3283 * _3240.w);
                        float _4660 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3296 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3297 = sqrt(_3283) * _3259.w;
                        float _3300 = 1.39999997615814208984375 / (_3297 + 1.39999997615814208984375);
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3290) + _3301;
                        float _3307 = _3297 * _3297;
                        float _3311 = ((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3296) / ((_3307 * 0.699999988079071044921875) + 1.0);
                        float _3315 = (-0.0) - _2748;
                        float _3316 = (-0.0) - _2749;
                        float _3317 = (-0.0) - _2750;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3322 = _3321 * _3315;
                        float _3323 = _3321 * _3316;
                        float _3324 = _3321 * _3317;
                        float _3332 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                        float _3333 = 1.0 - _1058;
                        float _3340 = sqrt(1.0 - ((1.0 - (_3333 * _3333)) * (1.0 - (_3332 * _3332))));
                        float _3341 = _3340 * _3340;
                        float _3342 = _3341 * _3341;
                        float _3343 = _3322 + _3287;
                        float _3344 = _3323 + _3288;
                        float _3345 = _3324 + _3289;
                        float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                        float _3353 = dot(vec3(_983, _986, _989), vec3(_3322, _3323, _3324));
                        float _4676 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3356 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3357 = dot(vec3(_983, _986, _989), vec3(_3349 * _3343, _3349 * _3344, _3349 * _3345));
                        float _4687 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3360 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3364 = ((_3360 * _3360) * (_3342 + (-1.0))) + 1.0;
                        float _3365 = _3300 * _3341;
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3290) + _3366;
                        float _4698 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3371 = 1.0 - _3341;
                        float _3381 = (0.5 / (((_3370 * ((_3356 * _3371) + _3341)) + 9.9999999392252902907785028219223e-09) + (((_3370 * _3371) + _3341) * _3356))) * _3370;
                        float _4709 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3392 = (((_3342 * 3.1415927410125732421875) * (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) / ((_3364 * _3364) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125))) * _3296;
                        _3144 = (_3311 * _3259.x) + _3217;
                        _3145 = (_3311 * _3259.y) + _3218;
                        _3146 = (_3311 * _3259.z) + _3219;
                        _3141 = (_3392 * _3276.x) + _3214;
                        _3142 = (_3392 * _3276.y) + _3215;
                        _3143 = (_3392 * _3276.z) + _3216;
                        if (_3221 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3146;
                            _3220 = _3221;
                        }
                    }
                    frontier_phi_66_pred = _3141;
                    frontier_phi_66_pred_1 = _3146;
                    frontier_phi_66_pred_2 = _3145;
                    frontier_phi_66_pred_3 = _3144;
                    frontier_phi_66_pred_4 = _3143;
                    frontier_phi_66_pred_5 = _3142;
                }
                _2919 = frontier_phi_66_pred;
                _2929 = frontier_phi_66_pred_1;
                _2927 = frontier_phi_66_pred_2;
                _2925 = frontier_phi_66_pred_3;
                _2923 = frontier_phi_66_pred_4;
                _2921 = frontier_phi_66_pred_5;
                uint _3076 = _3075 + 1u;
                if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3069 = _2919;
                    _3070 = _2921;
                    _3071 = _2923;
                    _3072 = _2925;
                    _3073 = _2927;
                    _3074 = _2929;
                    _3075 = _3076;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
        }
        uvec4 _2932 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2933 = _2932.z;
        uint _2935 = (_2933 >> 8u) & 15u;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((4294967295u << _2935) & _2794) == 0u)
        {
            _3037 = _2918;
            _3039 = _2920;
            _3041 = _2922;
            _3043 = _2924;
            _3045 = _2926;
            _3047 = _2928;
        }
        else
        {
            float _3062 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
            float _3063 = _3062 * _2748;
            float _3064 = _3062 * _2749;
            float _3065 = _3062 * _2750;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2935 < ((_2933 >> 12u) & 15u))
            {
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3197 = _2918;
                float _3198 = _2920;
                float _3199 = _2922;
                float _3200 = _2924;
                float _3201 = _2926;
                float _3202 = _2928;
                uint _3203 = _2935;
                uint _3212;
                bool _3213;
                for (;;)
                {
                    _3212 = texelFetch(g_lightClassification, int((((_2788 << 5u) + (_2774 << 9u)) + (_3203 << 2u)) >> 2u)).x;
                    _3213 = _3212 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3213)
                    {
                        frontier_phi_77_pred = _3202;
                        frontier_phi_77_pred_1 = _3201;
                        frontier_phi_77_pred_2 = _3200;
                        frontier_phi_77_pred_3 = _3199;
                        frontier_phi_77_pred_4 = _3198;
                        frontier_phi_77_pred_5 = _3197;
                    }
                    else
                    {
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3419 = _3197;
                        float _3420 = _3198;
                        float _3421 = _3199;
                        float _3422 = _3200;
                        float _3423 = _3201;
                        float _3424 = _3202;
                        uint _3425 = _3212;
                        uint _3426;
                        vec4 _3451;
                        float _3452;
                        vec4 _3467;
                        vec3 _3479;
                        vec4 _3494;
                        vec4 _3509;
                        float _3555;
                        bool _3556;
                        for (;;)
                        {
                            uint _3436 = ((_3203 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3425));
                            _3426 = (_3425 + 4294967295u) & _3425;
                            uint _3438 = _3436 * 40u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3452 = _3451.w;
                            uint _3454 = (_3436 * 40u) + 4u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3436 * 40u) + 8u;
                            _3479 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x));
                            uint _3481 = (_3436 * 40u) + 16u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3436 * 40u) + 20u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3436 * 40u) + 24u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3530 = (_3436 * 40u) + 28u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            _3555 = fma(_2750, _3543.z, fma(_2749, _3543.y, _3543.x * _2748)) + _3543.w;
                            _3556 = !((fma(_2750, _3524.z, fma(_2749, _3524.y, _3524.x * _2748)) + _3524.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3556)
                            {
                                float _3583 = _3451.x - _2748;
                                float _3584 = _3451.y - _2749;
                                float _3585 = _3451.z - _2750;
                                float _3586 = dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585));
                                float _3589 = inversesqrt(_3586);
                                float _3590 = _3589 * _3583;
                                float _3591 = _3589 * _3584;
                                float _3592 = _3589 * _3585;
                                float _3596 = 1.0 - (_3586 / (_3452 * _3452));
                                float _4720 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3601 = sqrt(_3586) * _3467.w;
                                float _3603 = 1.39999997615814208984375 / (_3601 + 1.39999997615814208984375);
                                float _3604 = _3603 * _3603;
                                float _3607 = ((1.0 - _3604) * dot(vec3(_3590, _3591, _3592), vec3(_983, _986, _989))) + _3604;
                                float _3610 = _3601 * _3601;
                                float _3614 = (fma(_2750, _3494.z, fma(_2749, _3494.y, _3494.x * _2748)) + _3494.w) / _3555;
                                float _3615 = (fma(_2750, _3509.z, fma(_2749, _3509.y, _3509.x * _2748)) + _3509.w) / _3555;
                                float _3619 = 1.0 - dot(vec2(_3614, _3615), vec2(_3614, _3615));
                                float _4736 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3621 = _3620 * (((isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0))) * _3597) / ((_3610 * 0.699999988079071044921875) + 1.0));
                                float _3633 = exp2(log2(1.0 / ((_3610 * 3.5) + 5.0)) * 0.25);
                                float _3634 = 1.0 - _1058;
                                float _3641 = sqrt(1.0 - ((1.0 - (_3634 * _3634)) * (1.0 - (_3633 * _3633))));
                                float _3642 = _3641 * _3641;
                                float _3643 = _3642 * _3642;
                                float _3644 = _3590 - _3063;
                                float _3645 = _3591 - _3064;
                                float _3646 = _3592 - _3065;
                                float _3650 = inversesqrt(dot(vec3(_3644, _3645, _3646), vec3(_3644, _3645, _3646)));
                                float _3654 = dot(vec3(_983, _986, _989), vec3((-0.0) - _3063, (-0.0) - _3064, (-0.0) - _3065));
                                float _4747 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3658 = dot(vec3(_983, _986, _989), vec3(_3650 * _3644, _3650 * _3645, _3650 * _3646));
                                float _4758 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3661 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3665 = ((_3661 * _3661) * (_3643 + (-1.0))) + 1.0;
                                float _3666 = _3603 * _3642;
                                float _3667 = _3666 * _3666;
                                float _3673 = ((1.0 - _3667) * dot(vec3(_983, _986, _989), vec3(_3590, _3591, _3592))) + _3667;
                                float _4769 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3674 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3675 = 1.0 - _3642;
                                float _3685 = (0.5 / (((_3674 * ((_3657 * _3675) + _3642)) + 9.9999999392252902907785028219223e-09) + (((_3674 * _3675) + _3642) * _3657))) * _3674;
                                float _4780 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3695 = (_3620 * _3597) * (((_3643 * 3.1415927410125732421875) * (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) / ((_3665 * _3665) * ((_3610 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3621 * _3467.y;
                                frontier_phi_83_pred_1 = _3621 * _3467.x;
                                frontier_phi_83_pred_2 = _3695 * _3479.z;
                                frontier_phi_83_pred_3 = _3695 * _3479.y;
                                frontier_phi_83_pred_4 = _3695 * _3479.x;
                                frontier_phi_83_pred_5 = _3621 * _3467.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3703 = frontier_phi_83_pred;
                            _3702 = frontier_phi_83_pred_1;
                            _3701 = frontier_phi_83_pred_2;
                            _3700 = frontier_phi_83_pred_3;
                            _3699 = frontier_phi_83_pred_4;
                            _3704 = frontier_phi_83_pred_5;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            if (_3426 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3426;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3411;
                        frontier_phi_77_pred_1 = _3410;
                        frontier_phi_77_pred_2 = _3409;
                        frontier_phi_77_pred_3 = _3408;
                        frontier_phi_77_pred_4 = _3407;
                        frontier_phi_77_pred_5 = _3406;
                    }
                    _3048 = frontier_phi_77_pred;
                    _3046 = frontier_phi_77_pred_1;
                    _3044 = frontier_phi_77_pred_2;
                    _3042 = frontier_phi_77_pred_3;
                    _3040 = frontier_phi_77_pred_4;
                    _3038 = frontier_phi_77_pred_5;
                    uint _3204 = _3203 + 1u;
                    if (_3204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3197 = _3038;
                        _3198 = _3040;
                        _3199 = _3042;
                        _3200 = _3044;
                        _3201 = _3046;
                        _3202 = _3048;
                        _3203 = _3204;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3042;
                frontier_phi_58_59_ladder_1 = _3048;
                frontier_phi_58_59_ladder_2 = _3046;
                frontier_phi_58_59_ladder_3 = _3044;
                frontier_phi_58_59_ladder_4 = _3040;
                frontier_phi_58_59_ladder_5 = _3038;
            }
            else
            {
                frontier_phi_58_59_ladder = _2922;
                frontier_phi_58_59_ladder_1 = _2928;
                frontier_phi_58_59_ladder_2 = _2926;
                frontier_phi_58_59_ladder_3 = _2924;
                frontier_phi_58_59_ladder_4 = _2920;
                frontier_phi_58_59_ladder_5 = _2918;
            }
            _3037 = frontier_phi_58_59_ladder_5;
            _3039 = frontier_phi_58_59_ladder_4;
            _3041 = frontier_phi_58_59_ladder;
            _3043 = frontier_phi_58_59_ladder_3;
            _3045 = frontier_phi_58_59_ladder_2;
            _3047 = frontier_phi_58_59_ladder_1;
        }
        float _3052 = isnan(1.0) ? _1042 : (isnan(_1042) ? 1.0 : min(_1042, 1.0));
        _2807 = (_3052 * _3043) + _2243;
        _2809 = (_3052 * _3045) + _2245;
        _2811 = (_3052 * _3047) + _2247;
        _2813 = ((_3037 * _1027) * _3052) + _2588;
        _2815 = ((_3039 * _1029) * _3052) + _2590;
        _2817 = ((_3041 * _1030) * _3052) + _2592;
    }
    else
    {
        _2807 = _2243;
        _2809 = _2245;
        _2811 = _2247;
        _2813 = _2588;
        _2815 = _2590;
        _2817 = _2592;
    }
    uint _2823 = _1003 + uint(cbMatDynParam._m0[0u].w);
    float _2829 = (isnan(cbMtdParam._m0[24u].y) ? _727 : (isnan(_727) ? cbMtdParam._m0[24u].y : min(_727, cbMtdParam._m0[24u].y))) * cbSceneParam._m0[72u].y;
    float _4796 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _4807 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _4818 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _2852 = (((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2807 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1042))) + ((_2813 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1882)) * cbPerFrame._m0[3u].x)) + ((_2829 * (((((_786.x - _783) * _765) + _783) * cbMtdParam._m0[17u].x) + ((cbMtdParam._m0[24u].w * _719) * cbMtdParam._m0[16u].x))) * cbInstanceData._m0[_2823].x);
    float _2854 = (((_2829 * (((((_786.y - _784) * _765) + _784) * cbMtdParam._m0[17u].y) + ((cbMtdParam._m0[24u].w * (((_708.y - _706) * _686) + _706)) * cbMtdParam._m0[16u].y))) * cbInstanceData._m0[_2823].y) + ((_2815 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1882)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2809 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1042)));
    float _2856 = (((_2829 * (((((_786.z - _785) * _765) + _785) * cbMtdParam._m0[17u].z) + ((cbMtdParam._m0[24u].w * (((_708.z - _707) * _686) + _707)) * cbMtdParam._m0[16u].z))) * cbInstanceData._m0[_2823].z) + ((_2817 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1882)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2811 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1042)));
    float _2857 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
    float _2858 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
    float _2859 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
    uint _2860 = _1002 + 6u;
    float _2868 = _964 / cbSceneParam._m0[86u].x;
    float _2869 = _965 / cbSceneParam._m0[86u].y;
    vec4 _2883 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2885 = _2883.x;
    float _2886 = _2883.y;
    float _2887 = _2883.z;
    float _2888 = _2883.w;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _2943 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _2944 = _2943 / _886;
        float _2955 = _2944 * _937;
        float _2956 = _938 * _2944;
        float _2957 = (-0.0) - _2956;
        float _2958 = _2944 * _939;
        float _2960 = (cbSceneParam._m0[77u].w * _2957) / _2943;
        float _2961 = _2960 + cbSceneParam._m0[79u].w;
        float _2962 = cbSceneParam._m0[79u].w - _2956;
        float _2968 = sqrt(((_2955 * _2955) + (_2956 * _2956)) + (_2958 * _2958));
        float _2971 = (1.0 - (cbSceneParam._m0[77u].w / _2943)) * _2968;
        float _2976 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2978 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3154;
        if (abs((_2957 - _2960) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3154 = ((((_2961 > 0.0) ? exp2(_2976 * _2961) : (2.0 - exp2(_2978 * _2961))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2971;
        }
        else
        {
            float _3098 = 1.0 / cbSceneParam._m0[80u].x;
            float _3099 = isnan(_2962) ? _2961 : (isnan(_2961) ? _2962 : max(_2961, _2962));
            float _3100 = isnan(_2962) ? _2961 : (isnan(_2961) ? _2962 : min(_2961, _2962));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            float _3110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : min(_3100, 0.0));
            _3154 = ((abs(_2968 / _2957) * cbSceneParam._m0[80u].y) * ((((_3109 - _3110) * 2.0) - ((exp2(_2976 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0)))) - exp2(_2976 * (isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))))) * _3098)) - ((exp2(_2978 * _3109) - exp2(_2978 * _3110)) * _3098))) + (_2971 * cbSceneParam._m0[80u].z);
        }
        vec4 _3156 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, 1.0), 0.0);
        float _3165 = exp2((_3154 * (-1.44269502162933349609375)) * (1.0 - _3156.w));
        float _3166 = log2(_3165);
        float _3182 = log2(_2888);
        _2980 = (exp2(_3182 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].x)) * _3156.x) / cbSceneParam._m0[78u].x)) + _2885;
        _2982 = (exp2(_3182 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].y)) * _3156.y) / cbSceneParam._m0[78u].y)) + _2886;
        _2984 = (exp2(_3182 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].z)) * _3156.z) / cbSceneParam._m0[78u].z)) + _2887;
        _2986 = _3165 * _2888;
    }
    else
    {
        _2980 = _2885;
        _2982 = _2886;
        _2984 = _2887;
        _2986 = _2888;
    }
    bool _3192;
    vec4 _2995;
    vec4 _3017;
    float _3019;
    float _3023;
    float _3024;
    float _3025;
    float _3026;
    bool _3036;
    for (;;)
    {
        _2995 = cbMatDynParam._m0[0u];
        float _2997 = roundEven(_2995.y);
        bool _2998 = _2997 == 3.0;
        float _2999 = log2(_2986);
        float _3006 = exp2(_2999 * cbSceneParam._m0[78u].x) * _2857;
        float _3007 = exp2(_2999 * cbSceneParam._m0[78u].y) * _2858;
        float _3008 = exp2(_2999 * cbSceneParam._m0[78u].z) * _2859;
        float _3015 = _953 + (-0.5);
        _3017 = cbMtdParam._m0[1u];
        _3019 = _3017.y * _3015;
        float _3022 = (_2997 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3023 = _3022 * (_2998 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2980)));
        _3024 = _3022 * (_2998 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2982)));
        _3025 = _3022 * (_2998 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2984)));
        _3026 = _3015 * 0.999000012874603271484375;
        _3036 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3036)
        {
            if ((cbInstanceData._m0[_1002 + 7u].x + _3026) < 0.5)
            {
                _3192 = true;
                break;
            }
        }
        uint _3133 = _1003 + uint(_2995.w);
        if ((cbInstanceData._m0[_3133].w < 1.0) && ((cbInstanceData._m0[_3133].w + _3026) < 0.5))
        {
            _3192 = true;
            break;
        }
        if ((_3019 + 1.0) < _3017.x)
        {
            _3192 = true;
            break;
        }
        _3192 = false;
        break;
    }
    float _3397;
    if (_3192)
    {
        discard_state = true;
        _3397 = 0.0;
    }
    else
    {
        _3397 = cbInstanceData._m0[_2860].w;
    }
    SV_Target.x = _3023;
    SV_Target.y = _3024;
    SV_Target.z = _3025;
    SV_Target.w = _3397;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2860].w;
    discard_exit();
}


