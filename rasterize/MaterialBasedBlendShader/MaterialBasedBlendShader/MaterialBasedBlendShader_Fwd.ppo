#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[24];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1302;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    vec4 _275 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _303 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = _329.x * cbMatDynParam._m0[17u].x;
    float _335 = _329.y * cbMatDynParam._m0[17u].y;
    float _336 = _329.z * cbMatDynParam._m0[17u].z;
    vec4 _355 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _374 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _385 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _387 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (_374.x + 0.00999999977648258209228515625))) * _385;
    float _3628 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _395 = (_388 * ((_355.x * cbMatDynParam._m0[18u].x) - _334)) + _334;
    float _396 = (_388 * ((_355.y * cbMatDynParam._m0[18u].y) - _335)) + _335;
    float _397 = (_388 * ((_355.z * cbMatDynParam._m0[18u].z) - _336)) + _336;
    float _402 = (0.5 - ((cbMatDynParam._m0[22u].z * 0.5) * (_374.y + 0.00999999977648258209228515625))) * _385;
    float _3639 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _410 = (((_303.x * cbMatDynParam._m0[19u].x) - _395) * _403) + _395;
    float _411 = (((_303.y * cbMatDynParam._m0[19u].y) - _396) * _403) + _396;
    float _412 = (((_303.z * cbMatDynParam._m0[19u].z) - _397) * _403) + _397;
    float _417 = (0.5 - ((cbMatDynParam._m0[22u].w * 0.5) * (_374.z + 0.00999999977648258209228515625))) * _385;
    float _3650 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _425 = (((_275.x * cbMatDynParam._m0[20u].x) - _410) * _418) + _410;
    float _426 = (((_275.y * cbMatDynParam._m0[20u].y) - _411) * _418) + _411;
    float _427 = (((_275.z * cbMatDynParam._m0[20u].z) - _412) * _418) + _412;
    vec4 _439 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    vec4 _456 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w));
    float _467 = ((_456.x - _441) * _388) + _441;
    float _468 = ((_456.y - _442) * _388) + _442;
    float _469 = ((_456.z - _443) * _388) + _443;
    vec4 _482 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _493 = ((_482.x - _467) * _403) + _467;
    float _494 = ((_482.y - _468) * _403) + _468;
    float _495 = ((_482.z - _469) * _403) + _469;
    vec4 _507 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _518 = ((_507.x - _493) * _418) + _493;
    float _519 = ((_507.y - _494) * _418) + _494;
    float _520 = ((_507.z - _495) * _418) + _495;
    vec4 _536 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _555 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _574 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _576 = _574.x;
    float _577 = _574.y;
    float _579 = _574.z * cbMatDynParam._m0[22u].x;
    vec4 _593 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _601 = (((_593.z * cbMatDynParam._m0[21u].w) - _579) * _388) + _579;
    float _604 = (((_555.z * cbMatDynParam._m0[21u].z) - _601) * _403) + _601;
    float _607 = (((_536.z * cbMatDynParam._m0[23u].x) - _604) * _418) + _604;
    vec4 _620 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _634 = (_388 * (_593.x - _576)) + _576;
    float _635 = (_388 * (_593.y - _577)) + _577;
    float _640 = ((_555.x - _634) * _403) + _634;
    float _641 = ((_555.y - _635) * _403) + _635;
    float _650 = ((((_536.x - _640) * _418) + _640) * 2.0) + (-1.0);
    float _651 = ((((_536.y - _641) * _418) + _641) * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3661 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _657 = sqrt(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))));
    float _661 = _650 + (cbMatDynParam._m0[22u].y * ((_620.x * 2.0) + (-1.0)));
    float _662 = _651 + (cbMatDynParam._m0[22u].y * ((_620.y * 2.0) + (-1.0)));
    float _665 = fma(_657, _243, fma(_662, _235 * TANGENT.x, (_221 * _213) * _661));
    float _668 = fma(_657, _244, fma(_662, _235 * TANGENT.y, (_221 * _214) * _661));
    float _671 = fma(_657, _245, fma(_662, _235 * TANGENT.z, (_221 * _215) * _661));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3672 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3683 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3694 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3705 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _682 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _683 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _3727 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _684 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _3738 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _685 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    float _766 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _767 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _769 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _771 = _769.w;
    float _789 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _792 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _795 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    vec4 _797 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _799 = _797.x;
    float _801 = _797.w;
    float _802 = _799 * _799;
    float _822 = (((_802 - _682) + (_801 * _682)) * cbMtdParam._m0[3u].x) + _682;
    float _823 = (((_802 - _683) + (_801 * _683)) * cbMtdParam._m0[3u].x) + _683;
    float _824 = (((_802 - _684) + (_801 * _684)) * cbMtdParam._m0[3u].x) + _684;
    float _825 = (((_797.y - _685) + (_801 * _685)) * cbMtdParam._m0[3u].x) + _685;
    vec4 _826 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _842 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(_822, _823, _824), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _826.z;
    float _851 = (((cbMatDynParam._m0[16u].x - _825) * cbMatDynParam._m0[16u].z) * _842) + _825;
    uint _864 = uint(roundEven(NORMAL.w)) * 13u;
    uint _866 = (_864 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _872 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_866].x;
    float _873 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_866].y;
    float _874 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_866].z;
    float _3749 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    vec4 _884 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _898 = ((((_875 * _771) - _875) + _884.x) * cbMtdParam._m0[3u].x) + _875;
    float _899 = ((((_876 * _771) - _876) + _884.y) * cbMtdParam._m0[3u].x) + _876;
    float _900 = ((((_877 * _771) - _877) + _884.z) * cbMtdParam._m0[3u].x) + _877;
    float _904 = cbMatDynParam._m0[13u].w * _842;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _766, cbSceneParam._m0[86u].y * _767));
    float _928 = _925.x * TEXCOORD_8;
    float _929 = dot(vec3(_676, _677, _678), vec3(_758, _759, _760));
    float _932 = _929 * 2.0;
    float _936 = (_932 * _676) - _758;
    float _937 = (_932 * _677) - _759;
    float _938 = (_932 * _678) - _760;
    float _942 = abs(dot(vec3(_758, _759, _760), vec3(_676, _677, _678)));
    float _3782 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _944 = sqrt(_851);
    float _957 = exp2((_944 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_944 * 3.0));
    float _963 = (1.0 - _957) * ((_944 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _964 = _957 * _944;
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1301;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_1000, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992));
        float _1031 = fma(_1000, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992));
        float _1035 = fma(_1000, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992));
        float _1059 = _992 + _676;
        float _1060 = _996 + _677;
        float _1061 = _1000 + _678;
        float _1071 = fma(_1061, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059)) - _1027;
        float _1072 = fma(_1061, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059)) - _1031;
        float _1073 = fma(_1061, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059)) - _1035;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1129 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1095.x + (-0.5));
        float _1131 = _1129 * (_1095.y + (-0.5));
        float _1132 = _1129 * (_1095.z + (-0.5));
        float _1139 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1102.x + (-0.5));
        float _1141 = _1139 * (_1102.y + (-0.5));
        float _1142 = _1139 * (_1102.z + (-0.5));
        float _1149 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1109.x + (-0.5));
        float _1151 = _1149 * (_1109.y + (-0.5));
        float _1152 = _1149 * (_1109.z + (-0.5));
        float _1159 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1116.x + (-0.5));
        float _1161 = _1159 * (_1116.y + (-0.5));
        float _1162 = _1159 * (_1116.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1183 = (dot(vec3(_676, _677, _678), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1193 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3830 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1195 + 1.0))) + _1200) * _1163;
        float _1210 = _1131 * 0.5;
        float _1211 = _1141 * 0.5;
        float _1212 = _1151 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_676, _677, _678), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3863 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1237 + 1.0))) + _1242) * _1164;
        float _1252 = _1132 * 0.5;
        float _1253 = _1142 * 0.5;
        float _1254 = _1152 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_676, _677, _678), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3896 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1279 + 1.0))) + _1284) * _1165;
        _1301 = _1132;
        _1303 = _1131;
        _1304 = _1130;
        _1305 = _1142;
        _1306 = _1141;
        _1307 = _1140;
        _1308 = _1152;
        _1309 = _1151;
        _1310 = _1150;
        _1311 = _1165;
        _1312 = _1164;
        _1313 = _1163;
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _1302;
        _1303 = _1302;
        _1304 = _1302;
        _1305 = _1302;
        _1306 = _1302;
        _1307 = _1302;
        _1308 = _1302;
        _1309 = _1302;
        _1310 = _1302;
        _1311 = _1302;
        _1312 = _1302;
        _1313 = _1302;
        _1314 = 0.0;
        _1315 = 0.0;
        _1316 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_1000, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992));
        float _1346 = fma(_1000, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992));
        float _1350 = fma(_1000, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992));
        float _1373 = _992 + _676;
        float _1374 = _996 + _677;
        float _1375 = _1000 + _678;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_676, _677, _678), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _3959 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_676, _677, _678), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _3992 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_676, _677, _678), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4025 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1302;
        _1612 = _1302;
        _1613 = _1302;
        _1614 = _1302;
        _1615 = _1302;
        _1616 = _1302;
        _1617 = _1302;
        _1618 = _1302;
        _1619 = _1302;
        _1620 = _1302;
        _1621 = _1302;
        _1622 = _1302;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1314)) + _1314;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1315)) + _1315;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1316)) + _1316;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _936 * 0.5;
    float _1680 = _937 * 0.5;
    float _1681 = _938 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1301, _1305, _1308, _1311));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _851);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1793 = fma(_1000, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992)) + cbModelParam._m0[13u].w;
        float _1797 = fma(_1000, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992)) + cbModelParam._m0[14u].w;
        float _1801 = fma(_1000, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992)) + cbModelParam._m0[15u].w;
        float _1804 = fma(_938, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936));
        float _1807 = fma(_938, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936));
        float _1810 = fma(_938, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936));
        float _1838;
        if (_1804 > 0.0)
        {
            _1838 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1838 = frontier_phi_16_14_ladder;
        }
        float _2040;
        if (_1807 > 0.0)
        {
            _2040 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2040 = frontier_phi_25_21_ladder;
        }
        float _2293;
        if (_1810 > 0.0)
        {
            _2293 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2293 = frontier_phi_37_32_ladder;
        }
        float _2295 = isnan(_2040) ? _1838 : (isnan(_1838) ? _2040 : min(_1838, _2040));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1804) + _1793;
        float _2301 = (_2296 * _1807) + _1797;
        float _2302 = (_2296 * _1810) + _1801;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2303;
        float _2307 = _2303 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 > _2307) || ((_2301 < _2305) || ((_2300 < _2305) || (_2300 > _2307))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2302, cbModelParam._m0[9u].z, fma(_2301, cbModelParam._m0[9u].y, _2300 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2302, cbModelParam._m0[10u].z, fma(_2301, cbModelParam._m0[10u].y, _2300 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2302, cbModelParam._m0[11u].z, fma(_2301, cbModelParam._m0[11u].y, _2300 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_15_37_ladder = _2430.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2430.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2430.x * cbModelParam._m0[1u].y;
        }
        _1826 = frontier_phi_15_37_ladder_2;
        _1828 = frontier_phi_15_37_ladder_1;
        _1830 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_936, _937, _938), _1745);
        _1826 = _1814.x * cbModelParam._m0[1u].y;
        _1828 = _1814.y * cbModelParam._m0[1u].y;
        _1830 = _1814.z * cbModelParam._m0[1u].y;
    }
    float _1834 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _851);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1834 : min(cbModelParam._m0[25u].w, _1834));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1888 = fma(_1000, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992)) + cbModelParam._m0[21u].w;
        float _1892 = fma(_1000, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992)) + cbModelParam._m0[22u].w;
        float _1896 = fma(_1000, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992)) + cbModelParam._m0[23u].w;
        float _1899 = fma(_938, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936));
        float _1902 = fma(_938, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936));
        float _1905 = fma(_938, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936));
        float _2045;
        if (_1899 > 0.0)
        {
            _2045 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2045 = frontier_phi_27_23_ladder;
        }
        float _2320;
        if (_1902 > 0.0)
        {
            _2320 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2320 = frontier_phi_39_34_ladder;
        }
        float _2533;
        if (_1905 > 0.0)
        {
            _2533 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2533 = frontier_phi_48_45_ladder;
        }
        float _2535 = isnan(_2320) ? _2045 : (isnan(_2045) ? _2320 : min(_2045, _2320));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1899) + _1888;
        float _2541 = (_2536 * _1902) + _1892;
        float _2542 = (_2536 * _1905) + _1896;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2542, cbModelParam._m0[17u].z, fma(_2541, cbModelParam._m0[17u].y, _2540 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2542, cbModelParam._m0[18u].z, fma(_2541, cbModelParam._m0[18u].y, _2540 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2542, cbModelParam._m0[19u].z, fma(_2541, cbModelParam._m0[19u].y, _2540 * cbModelParam._m0[19u].x))), _1835);
            frontier_phi_24_48_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1924 = frontier_phi_24_48_ladder_2;
        _1926 = frontier_phi_24_48_ladder_1;
        _1928 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_936, _937, _938), _1835);
        _1924 = _1908.x * cbModelParam._m0[1u].z;
        _1926 = _1908.y * cbModelParam._m0[1u].z;
        _1928 = _1908.z * cbModelParam._m0[1u].z;
    }
    float _1941 = (((_963 * _822) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1924 - _1826)) + _1826);
    float _1943 = (((_963 * _823) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1926 - _1828)) + _1828);
    float _1945 = (((_963 * _824) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1948 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1941 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1941 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, _1941 * cbSceneParam._m0[91u].x));
    uvec4 _1964 = floatBitsToUint(cbInstanceData._m0[_864 + 5u]);
    uint _1966 = _1964.x * 14u;
    uint _1967 = _1966 + 13u;
    float _1974 = _928 + (-1.0);
    float _1979 = (cbLight._m0[_1967].x * _1974) + 1.0;
    float _1980 = (cbLight._m0[_1967].y * _1974) + 1.0;
    float _1981 = (cbLight._m0[_1967].z * _1974) + 1.0;
    float _1982 = (cbLight._m0[_1967].w * _1974) + 1.0;
    uint _1983 = _1966 + 5u;
    float _1989 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _1993 = _1966 + 4u;
    float _1999 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
    uint _2003 = _1966 | 1u;
    float _2014 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_676, _677, _678));
    float _2017 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_676, _677, _678));
    float _4161 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _4172 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2022 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _2024 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.3183098733425140380859375;
    float _2031 = ((cbLight._m0[_1983].x * _1989) * _2024) + ((cbLight._m0[_1993].x * _1999) * _2022);
    float _2032 = ((_1989 * cbLight._m0[_1983].y) * _2024) + ((_1999 * cbLight._m0[_1993].y) * _2022);
    float _2033 = ((_1989 * cbLight._m0[_1983].z) * _2024) + ((_1999 * cbLight._m0[_1993].z) * _2022);
    uvec4 _2037 = floatBitsToUint(cbLight._m0[_1966 + 12u]);
    bool _2039 = _2037.x == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_2039)
    {
        _2050 = _2031;
        _2052 = _2032;
        _2054 = _2033;
    }
    else
    {
        uint _2058 = _1966 + 6u;
        float _2074 = (dot(vec3(cbLight._m0[_1966 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4183 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2077 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2050 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _2031;
        _2052 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _2032;
        _2054 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _2033;
    }
    bool _2057 = _2037.y == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2057)
    {
        _2095 = _2050;
        _2097 = _2052;
        _2099 = _2054;
    }
    else
    {
        uint _2264 = _1966 + 7u;
        float _2280 = (dot(vec3(cbLight._m0[_1966 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4199 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2283 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2095 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2050;
        _2097 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2052;
        _2099 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2054;
    }
    uint _2102 = _1966 + 8u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _851) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1966].x + _758;
    float _2118 = cbLight._m0[_1966].y + _759;
    float _2119 = cbLight._m0[_1966].z + _760;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1966].xyz));
    float _4215 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _2131 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2132 = dot(vec3(_676, _677, _678), vec3(_2124, _2125, _2126));
    float _4237 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2136 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2124, _2125, _2126));
    float _4248 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = _2116 * _2116;
    float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
    float _2152 = exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0);
    float _2153 = 1.0 - _822;
    float _2154 = 1.0 - _823;
    float _2155 = 1.0 - _824;
    float _2162 = 1.0 - _2116;
    float _2173 = (0.5 / (((_2131 * ((_2130 * _2162) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2162) + _2116) * _2130))) * _2130;
    float _4259 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
    uint _2186 = _1966 + 9u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _851) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_2003].x + _758;
    float _2200 = cbLight._m0[_2003].y + _759;
    float _2201 = cbLight._m0[_2003].z + _760;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2003].xyz));
    float _4270 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2213 = dot(vec3(_676, _677, _678), vec3(_2206, _2207, _2208));
    float _4281 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2206, _2207, _2208));
    float _4292 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2198 * _2198;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0);
    float _2239 = 1.0 - _2198;
    float _2249 = (0.5 / (((_2131 * ((_2212 * _2239) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2239) + _2198) * _2212))) * _2212;
    float _4303 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    float _2261 = (((((_2232 * _2153) + _822) * cbLight._m0[_2186].x) * _2251) * _1989) + (((((_2152 * _2153) + _822) * cbLight._m0[_2102].x) * _2175) * _1999);
    float _2262 = (((((_2232 * _2154) + _823) * cbLight._m0[_2186].y) * _2251) * _1989) + (((((_2152 * _2154) + _823) * cbLight._m0[_2102].y) * _2175) * _1999);
    float _2263 = (((((_2232 * _2155) + _824) * cbLight._m0[_2186].z) * _2251) * _1989) + (((((_2152 * _2155) + _824) * cbLight._m0[_2102].z) * _2175) * _1999);
    float _2325;
    float _2327;
    float _2329;
    if (_2039)
    {
        _2325 = _2261;
        _2327 = _2262;
        _2329 = _2263;
    }
    else
    {
        uint _2331 = _1966 + 2u;
        uint _2335 = _1966 + 10u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _851) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _758;
        float _2352 = cbLight._m0[_2331].y + _759;
        float _2353 = cbLight._m0[_2331].z + _760;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2331].xyz));
        float _4314 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2365 = dot(vec3(_676, _677, _678), vec3(_2358, _2359, _2360));
        float _4325 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4336 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0);
        float _2391 = 1.0 - _2350;
        float _2401 = (0.5 / (((_2131 * ((_2364 * _2391) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2391) + _2350) * _2364))) * _2364;
        float _4347 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2403 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2404 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2325 = (((((_2384 * _2153) + _822) * cbLight._m0[_2335].x) * _2403) * _2404) + _2261;
        _2327 = (((((_2384 * _2154) + _823) * cbLight._m0[_2335].y) * _2403) * _2404) + _2262;
        _2329 = (((((_2384 * _2155) + _824) * cbLight._m0[_2335].z) * _2403) * _2404) + _2263;
    }
    float _2439;
    float _2441;
    float _2443;
    if (_2057)
    {
        _2439 = _2325;
        _2441 = _2327;
        _2443 = _2329;
    }
    else
    {
        uint _2450 = _1966 + 3u;
        uint _2454 = _1966 + 11u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _851) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _758;
        float _2471 = cbLight._m0[_2450].y + _759;
        float _2472 = cbLight._m0[_2450].z + _760;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2450].xyz));
        float _4363 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2484 = dot(vec3(_676, _677, _678), vec3(_2477, _2478, _2479));
        float _4374 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4385 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
        float _2510 = 1.0 - _2469;
        float _2520 = (0.5 / (((_2131 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2510) + _2469) * _2483))) * _2483;
        float _4396 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2522 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2523 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2439 = (((((_2503 * _2153) + _822) * cbLight._m0[_2454].x) * _2522) * _2523) + _2325;
        _2441 = (((((_2503 * _2154) + _823) * cbLight._m0[_2454].y) * _2522) * _2523) + _2327;
        _2443 = (((((_2503 * _2155) + _824) * cbLight._m0[_2454].z) * _2522) * _2523) + _2329;
    }
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_1964.y == 0u)
    {
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2598;
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2598;
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2598;
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.x;
        uint _2625 = uint((float(_2613.y) * floor(float(uint(cbSceneParam._m0[85u].y * _767) / _2614))) + floor(float(uint(cbSceneParam._m0[85u].x * _766) / _2614)));
        float _2635 = (log2(_2601 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2636 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        uint _2639 = uint(isnan(14.0) ? _2636 : (isnan(_2636) ? 14.0 : min(_2636, 14.0)));
        uvec4 _2644 = texelFetch(g_lightClusterGridBuffer, int(((_2639 << 2u) + (_2625 << 6u)) >> 2u));
        uint _2645 = _2644.x;
        uint _2646 = _2613.z;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((((1u << ((_2646 >> 4u) & 15u)) + 4294967295u) & _2645) == 0u) || ((_2646 & 240u) == 0u))
        {
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
        }
        else
        {
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            uint _2898 = 0u;
            uint _2907;
            bool _2908;
            for (;;)
            {
                _2907 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_2898 << 2u)) >> 2u)).x;
                _2908 = _2907 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2908)
                {
                    frontier_phi_63_pred = _2897;
                    frontier_phi_63_pred_1 = _2896;
                    frontier_phi_63_pred_2 = _2895;
                    frontier_phi_63_pred_3 = _2894;
                    frontier_phi_63_pred_4 = _2893;
                    frontier_phi_63_pred_5 = _2892;
                }
                else
                {
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    uint _3022;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2907;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    for (;;)
                    {
                        uint _3026 = uint(findLSB(_3022)) + (_2898 << 5u);
                        uint _3023 = (_3022 + 4294967295u) & _3022;
                        uint _3028 = _3026 * 48u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3048 = (_3026 * 48u) + 4u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3067 = (_3026 * 48u) + 8u;
                        vec3 _3078 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x));
                        float _3082 = _3042.x - _2599;
                        float _3083 = _3042.y - _2600;
                        float _3084 = _3042.z - _2601;
                        float _3085 = dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084));
                        float _3088 = inversesqrt(_3085);
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3092 = dot(vec3(_789, _792, _795), vec3(_3089, _3090, _3091));
                        float _3097 = 1.0 - (_3085 * _3042.w);
                        float _4422 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3098 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3099 = sqrt(_3085) * _3061.w;
                        float _3102 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                        float _3103 = _3102 * _3102;
                        float _3106 = ((1.0 - _3103) * _3092) + _3103;
                        float _3109 = _3099 * _3099;
                        float _3113 = ((isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))) * _3098) / ((_3109 * 0.699999988079071044921875) + 1.0);
                        float _3117 = (-0.0) - _2599;
                        float _3118 = (-0.0) - _2600;
                        float _3119 = (-0.0) - _2601;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3134 = exp2(log2(1.0 / ((_3109 * 3.5) + 5.0)) * 0.25);
                        float _3135 = 1.0 - _944;
                        float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                        float _3143 = _3142 * _3142;
                        float _3144 = _3143 * _3143;
                        float _3145 = _3124 + _3089;
                        float _3146 = _3125 + _3090;
                        float _3147 = _3126 + _3091;
                        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                        float _3155 = dot(vec3(_789, _792, _795), vec3(_3124, _3125, _3126));
                        float _4438 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3158 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3159 = dot(vec3(_789, _792, _795), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                        float _4449 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3162 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                        float _3167 = _3102 * _3143;
                        float _3168 = _3167 * _3167;
                        float _3171 = ((1.0 - _3168) * _3092) + _3168;
                        float _4460 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3173 = 1.0 - _3143;
                        float _3183 = (0.5 / (((_3172 * ((_3158 * _3173) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3143) * _3158))) * _3172;
                        float _4471 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3194 = (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) / ((_3166 * _3166) * ((_3109 * 2.1991131305694580078125) + 3.141590118408203125))) * _3098;
                        _2951 = (_3113 * _3061.x) + _3019;
                        _2952 = (_3113 * _3061.y) + _3020;
                        _2953 = (_3113 * _3061.z) + _3021;
                        _2948 = (_3194 * _3078.x) + _3016;
                        _2949 = (_3194 * _3078.y) + _3017;
                        _2950 = (_3194 * _3078.z) + _3018;
                        if (_3023 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _3023;
                        }
                    }
                    frontier_phi_63_pred = _2953;
                    frontier_phi_63_pred_1 = _2952;
                    frontier_phi_63_pred_2 = _2951;
                    frontier_phi_63_pred_3 = _2950;
                    frontier_phi_63_pred_4 = _2949;
                    frontier_phi_63_pred_5 = _2948;
                }
                _2759 = frontier_phi_63_pred;
                _2757 = frontier_phi_63_pred_1;
                _2755 = frontier_phi_63_pred_2;
                _2753 = frontier_phi_63_pred_3;
                _2751 = frontier_phi_63_pred_4;
                _2749 = frontier_phi_63_pred_5;
                uint _2899 = _2898 + 1u;
                if (_2899 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2892 = _2749;
                    _2893 = _2751;
                    _2894 = _2753;
                    _2895 = _2755;
                    _2896 = _2757;
                    _2897 = _2759;
                    _2898 = _2899;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
        }
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.z;
        uint _2765 = (_2763 >> 8u) & 15u;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((4294967295u << _2765) & _2645) == 0u)
        {
            _2860 = _2748;
            _2862 = _2750;
            _2864 = _2752;
            _2866 = _2754;
            _2868 = _2756;
            _2870 = _2758;
        }
        else
        {
            float _2885 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
            float _2886 = _2885 * _2599;
            float _2887 = _2885 * _2600;
            float _2888 = _2885 * _2601;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2765 < ((_2763 >> 12u) & 15u))
            {
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2999 = _2748;
                float _3000 = _2750;
                float _3001 = _2752;
                float _3002 = _2754;
                float _3003 = _2756;
                float _3004 = _2758;
                uint _3005 = _2765;
                uint _3014;
                bool _3015;
                for (;;)
                {
                    _3014 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                    _3015 = _3014 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3015)
                    {
                        frontier_phi_69_pred = _3004;
                        frontier_phi_69_pred_1 = _3003;
                        frontier_phi_69_pred_2 = _3002;
                        frontier_phi_69_pred_3 = _3001;
                        frontier_phi_69_pred_4 = _3000;
                        frontier_phi_69_pred_5 = _2999;
                    }
                    else
                    {
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3212 = _2999;
                        float _3213 = _3000;
                        float _3214 = _3001;
                        float _3215 = _3002;
                        float _3216 = _3003;
                        float _3217 = _3004;
                        uint _3218 = _3014;
                        uint _3219;
                        vec4 _3244;
                        float _3245;
                        vec4 _3260;
                        vec3 _3272;
                        vec4 _3287;
                        vec4 _3302;
                        float _3348;
                        bool _3349;
                        for (;;)
                        {
                            uint _3229 = ((_3005 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3218));
                            _3219 = (_3218 + 4294967295u) & _3218;
                            uint _3231 = _3229 * 40u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            _3245 = _3244.w;
                            uint _3247 = (_3229 * 40u) + 4u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3262 = (_3229 * 40u) + 8u;
                            _3272 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x));
                            uint _3274 = (_3229 * 40u) + 16u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3289 = (_3229 * 40u) + 20u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3304 = (_3229 * 40u) + 24u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3323 = (_3229 * 40u) + 28u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3348 = fma(_2601, _3336.z, fma(_2600, _3336.y, _3336.x * _2599)) + _3336.w;
                            _3349 = !((fma(_2601, _3317.z, fma(_2600, _3317.y, _3317.x * _2599)) + _3317.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3349)
                            {
                                float _3376 = _3244.x - _2599;
                                float _3377 = _3244.y - _2600;
                                float _3378 = _3244.z - _2601;
                                float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                                float _3382 = inversesqrt(_3379);
                                float _3383 = _3382 * _3376;
                                float _3384 = _3382 * _3377;
                                float _3385 = _3382 * _3378;
                                float _3389 = 1.0 - (_3379 / (_3245 * _3245));
                                float _4482 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3394 = sqrt(_3379) * _3260.w;
                                float _3396 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                                float _3397 = _3396 * _3396;
                                float _3400 = ((1.0 - _3397) * dot(vec3(_3383, _3384, _3385), vec3(_789, _792, _795))) + _3397;
                                float _3403 = _3394 * _3394;
                                float _3407 = (fma(_2601, _3287.z, fma(_2600, _3287.y, _3287.x * _2599)) + _3287.w) / _3348;
                                float _3408 = (fma(_2601, _3302.z, fma(_2600, _3302.y, _3302.x * _2599)) + _3302.w) / _3348;
                                float _3412 = 1.0 - dot(vec2(_3407, _3408), vec2(_3407, _3408));
                                float _4498 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3414 = _3413 * (((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3390) / ((_3403 * 0.699999988079071044921875) + 1.0));
                                float _3426 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                                float _3427 = 1.0 - _944;
                                float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                                float _3435 = _3434 * _3434;
                                float _3436 = _3435 * _3435;
                                float _3437 = _3383 - _2886;
                                float _3438 = _3384 - _2887;
                                float _3439 = _3385 - _2888;
                                float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                                float _3447 = dot(vec3(_789, _792, _795), vec3((-0.0) - _2886, (-0.0) - _2887, (-0.0) - _2888));
                                float _4509 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3451 = dot(vec3(_789, _792, _795), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                                float _4520 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                                float _3459 = _3396 * _3435;
                                float _3460 = _3459 * _3459;
                                float _3466 = ((1.0 - _3460) * dot(vec3(_789, _792, _795), vec3(_3383, _3384, _3385))) + _3460;
                                float _4531 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3468 = 1.0 - _3435;
                                float _3478 = (0.5 / (((_3467 * ((_3450 * _3468) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3467 * _3468) + _3435) * _3450))) * _3467;
                                float _4542 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3488 = (_3413 * _3390) * (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) / ((_3458 * _3458) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3414 * _3260.z;
                                frontier_phi_75_pred_1 = _3414 * _3260.y;
                                frontier_phi_75_pred_2 = _3414 * _3260.x;
                                frontier_phi_75_pred_3 = _3488 * _3272.z;
                                frontier_phi_75_pred_4 = _3488 * _3272.y;
                                frontier_phi_75_pred_5 = _3488 * _3272.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3497 = frontier_phi_75_pred;
                            _3496 = frontier_phi_75_pred_1;
                            _3495 = frontier_phi_75_pred_2;
                            _3494 = frontier_phi_75_pred_3;
                            _3493 = frontier_phi_75_pred_4;
                            _3492 = frontier_phi_75_pred_5;
                            _3202 = _3495 + _3215;
                            _3203 = _3496 + _3216;
                            _3204 = _3497 + _3217;
                            _3199 = _3492 + _3212;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            if (_3219 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3219;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3204;
                        frontier_phi_69_pred_1 = _3203;
                        frontier_phi_69_pred_2 = _3202;
                        frontier_phi_69_pred_3 = _3201;
                        frontier_phi_69_pred_4 = _3200;
                        frontier_phi_69_pred_5 = _3199;
                    }
                    _2871 = frontier_phi_69_pred;
                    _2869 = frontier_phi_69_pred_1;
                    _2867 = frontier_phi_69_pred_2;
                    _2865 = frontier_phi_69_pred_3;
                    _2863 = frontier_phi_69_pred_4;
                    _2861 = frontier_phi_69_pred_5;
                    uint _3006 = _3005 + 1u;
                    if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2999 = _2861;
                        _3000 = _2863;
                        _3001 = _2865;
                        _3002 = _2867;
                        _3003 = _2869;
                        _3004 = _2871;
                        _3005 = _3006;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2871;
                frontier_phi_57_58_ladder_1 = _2869;
                frontier_phi_57_58_ladder_2 = _2867;
                frontier_phi_57_58_ladder_3 = _2865;
                frontier_phi_57_58_ladder_4 = _2863;
                frontier_phi_57_58_ladder_5 = _2861;
            }
            else
            {
                frontier_phi_57_58_ladder = _2758;
                frontier_phi_57_58_ladder_1 = _2756;
                frontier_phi_57_58_ladder_2 = _2754;
                frontier_phi_57_58_ladder_3 = _2752;
                frontier_phi_57_58_ladder_4 = _2750;
                frontier_phi_57_58_ladder_5 = _2748;
            }
            _2860 = frontier_phi_57_58_ladder_5;
            _2862 = frontier_phi_57_58_ladder_4;
            _2864 = frontier_phi_57_58_ladder_3;
            _2866 = frontier_phi_57_58_ladder_2;
            _2868 = frontier_phi_57_58_ladder_1;
            _2870 = frontier_phi_57_58_ladder;
        }
        float _2875 = isnan(1.0) ? _928 : (isnan(_928) ? 1.0 : min(_928, 1.0));
        _2657 = (_2875 * _2866) + _2095;
        _2659 = (_2875 * _2868) + _2097;
        _2661 = (_2875 * _2870) + _2099;
        _2663 = ((_2860 * _822) * _2875) + _2439;
        _2665 = ((_2862 * _823) * _2875) + _2441;
        _2667 = ((_2864 * _824) * _2875) + _2443;
    }
    else
    {
        _2657 = _2095;
        _2659 = _2097;
        _2661 = _2099;
        _2663 = _2439;
        _2665 = _2441;
        _2667 = _2443;
    }
    float _2669 = (((cbMatDynParam._m0[13u].x - _898) * _904) + _898) * _2153;
    float _2670 = (((cbMatDynParam._m0[13u].y - _899) * _904) + _899) * _2154;
    float _2671 = (((cbMatDynParam._m0[13u].z - _900) * _904) + _900) * _2155;
    float _4558 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _4569 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _4580 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    uint _2690 = _864 + 6u;
    float _2698 = _766 / cbSceneParam._m0[86u].x;
    float _2699 = _767 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2773 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2774 = _2773 / _701;
        float _2785 = _2774 * _751;
        float _2786 = _752 * _2774;
        float _2787 = (-0.0) - _2786;
        float _2788 = _2774 * _753;
        float _2790 = (cbSceneParam._m0[77u].w * _2787) / _2773;
        float _2791 = _2790 + cbSceneParam._m0[79u].w;
        float _2792 = cbSceneParam._m0[79u].w - _2786;
        float _2798 = sqrt(((_2785 * _2785) + (_2786 * _2786)) + (_2788 * _2788));
        float _2801 = (1.0 - (cbSceneParam._m0[77u].w / _2773)) * _2798;
        float _2806 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2808 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2961;
        if (abs((_2787 - _2790) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2961 = ((((_2791 > 0.0) ? exp2(_2806 * _2791) : (2.0 - exp2(_2808 * _2791))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2801;
        }
        else
        {
            float _2921 = 1.0 / cbSceneParam._m0[80u].x;
            float _2922 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : max(_2791, _2792));
            float _2923 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : min(_2791, _2792));
            float _2932 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : min(_2922, 0.0));
            float _2933 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : min(_2923, 0.0));
            _2961 = ((abs(_2798 / _2787) * cbSceneParam._m0[80u].y) * ((((_2932 - _2933) * 2.0) - ((exp2(_2806 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0)))) - exp2(_2806 * (isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))))) * _2921)) - ((exp2(_2808 * _2932) - exp2(_2808 * _2933)) * _2921))) + (_2801 * cbSceneParam._m0[80u].z);
        }
        vec4 _2963 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2972 = exp2((_2961 * (-1.44269502162933349609375)) * (1.0 - _2963.w));
        float _2973 = log2(_2972);
        float _2989 = log2(_2718);
        _2810 = (exp2(_2989 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].x)) * _2963.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2812 = (exp2(_2989 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].y)) * _2963.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2814 = (exp2(_2989 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].z)) * _2963.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2816 = _2972 * _2718;
    }
    else
    {
        _2810 = _2715;
        _2812 = _2716;
        _2814 = _2717;
        _2816 = _2718;
    }
    float _2828 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2829 = _2828 == 3.0;
    float _2830 = log2(_2816);
    float _2837 = exp2(_2830 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2657 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _928))) + ((_2663 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _2838 = exp2(_2830 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2659 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _928))) + ((_2665 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _2839 = exp2(_2830 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2661 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _928))) + ((_2667 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _2848 = (_2828 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2848 * (_2829 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.y = _2848 * (_2829 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2812)));
    SV_Target.z = _2848 * (_2829 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2814)));
    SV_Target.w = cbInstanceData._m0[_2690].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2690].w;
}


