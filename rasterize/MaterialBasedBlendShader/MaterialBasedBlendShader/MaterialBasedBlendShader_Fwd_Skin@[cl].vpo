#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec4 TEXCOORD;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_1;
layout(location = 5) out vec4 TEXCOORD_4;
layout(location = 6) out float TEXCOORD_8;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_1.w = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_4.z = 0.0;
    TEXCOORD_4.w = 0.0;
    TEXCOORD_8 = 0.0;
    float _193 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _195 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _205 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _206 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _207 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _217 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _219 = texelFetch(g_InstanceIndexBuffer, int(_217));
    uint _220 = _219.x;
    precise float _221 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _226 = isnan(_221) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _221 : max(0.001000000047497451305389404296875, _221));
    precise float _228 = BLENDWEIGHT.x / _226;
    precise float _229 = BLENDWEIGHT.y / _226;
    precise float _230 = BLENDWEIGHT.z / _226;
    precise float _231 = BLENDWEIGHT.w / _226;
    uvec4 _238 = floatBitsToUint(cbInstanceData._m0[(_220 * 13u) + 4u]);
    uint _239 = _238.x;
    uint _241 = (_239 + uint(float(BLENDINDICES.x))) * 3u;
    uint _248 = _241 + 1u;
    uint _255 = _241 + 2u;
    precise float _262 = _228 * cbObjMatrix._m0[_241].x;
    precise float _263 = _228 * cbObjMatrix._m0[_248].x;
    precise float _264 = _228 * cbObjMatrix._m0[_255].x;
    precise float _265 = _228 * cbObjMatrix._m0[_241].y;
    precise float _266 = _228 * cbObjMatrix._m0[_248].y;
    precise float _267 = _228 * cbObjMatrix._m0[_255].y;
    precise float _268 = _228 * cbObjMatrix._m0[_241].z;
    precise float _269 = _228 * cbObjMatrix._m0[_248].z;
    precise float _270 = _228 * cbObjMatrix._m0[_255].z;
    precise float _271 = _228 * cbObjMatrix._m0[_241].w;
    precise float _272 = _228 * cbObjMatrix._m0[_248].w;
    precise float _273 = _228 * cbObjMatrix._m0[_255].w;
    uint _276 = (_239 + uint(float(BLENDINDICES.y))) * 3u;
    uint _283 = _276 + 1u;
    uint _290 = _276 + 2u;
    precise float _297 = _229 * cbObjMatrix._m0[_276].x;
    precise float _298 = _229 * cbObjMatrix._m0[_283].x;
    precise float _299 = _229 * cbObjMatrix._m0[_290].x;
    precise float _300 = _229 * cbObjMatrix._m0[_276].y;
    precise float _301 = _229 * cbObjMatrix._m0[_283].y;
    precise float _302 = _229 * cbObjMatrix._m0[_290].y;
    precise float _303 = _229 * cbObjMatrix._m0[_276].z;
    precise float _304 = _229 * cbObjMatrix._m0[_283].z;
    precise float _305 = _229 * cbObjMatrix._m0[_290].z;
    precise float _306 = _229 * cbObjMatrix._m0[_276].w;
    precise float _307 = _229 * cbObjMatrix._m0[_283].w;
    precise float _308 = _229 * cbObjMatrix._m0[_290].w;
    precise float _309 = _262 + _297;
    precise float _310 = _263 + _298;
    precise float _311 = _264 + _299;
    precise float _312 = _265 + _300;
    precise float _313 = _266 + _301;
    precise float _314 = _267 + _302;
    precise float _315 = _268 + _303;
    precise float _316 = _269 + _304;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    uint _323 = (_239 + uint(float(BLENDINDICES.z))) * 3u;
    uint _330 = _323 + 1u;
    uint _337 = _323 + 2u;
    precise float _344 = _230 * cbObjMatrix._m0[_323].x;
    precise float _345 = _230 * cbObjMatrix._m0[_330].x;
    precise float _346 = _230 * cbObjMatrix._m0[_337].x;
    precise float _347 = _230 * cbObjMatrix._m0[_323].y;
    precise float _348 = _230 * cbObjMatrix._m0[_330].y;
    precise float _349 = _230 * cbObjMatrix._m0[_337].y;
    precise float _350 = _230 * cbObjMatrix._m0[_323].z;
    precise float _351 = _230 * cbObjMatrix._m0[_330].z;
    precise float _352 = _230 * cbObjMatrix._m0[_337].z;
    precise float _353 = _230 * cbObjMatrix._m0[_323].w;
    precise float _354 = _230 * cbObjMatrix._m0[_330].w;
    precise float _355 = _230 * cbObjMatrix._m0[_337].w;
    precise float _356 = _309 + _344;
    precise float _357 = _310 + _345;
    precise float _358 = _311 + _346;
    precise float _359 = _312 + _347;
    precise float _360 = _313 + _348;
    precise float _361 = _314 + _349;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    uint _370 = (_239 + uint(float(BLENDINDICES.w))) * 3u;
    uint _377 = _370 + 1u;
    uint _384 = _370 + 2u;
    precise float _391 = _231 * cbObjMatrix._m0[_370].x;
    precise float _392 = _231 * cbObjMatrix._m0[_377].x;
    precise float _393 = _231 * cbObjMatrix._m0[_384].x;
    precise float _394 = _231 * cbObjMatrix._m0[_370].y;
    precise float _395 = _231 * cbObjMatrix._m0[_377].y;
    precise float _396 = _231 * cbObjMatrix._m0[_384].y;
    precise float _397 = _231 * cbObjMatrix._m0[_370].z;
    precise float _398 = _231 * cbObjMatrix._m0[_377].z;
    precise float _399 = _231 * cbObjMatrix._m0[_384].z;
    precise float _400 = _231 * cbObjMatrix._m0[_370].w;
    precise float _401 = _231 * cbObjMatrix._m0[_377].w;
    precise float _402 = _231 * cbObjMatrix._m0[_384].w;
    precise float _403 = _356 + _391;
    precise float _404 = _357 + _392;
    precise float _405 = _358 + _393;
    precise float _406 = _359 + _394;
    precise float _407 = _360 + _395;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = POSITION.x * _403;
    precise float _416 = POSITION.y * _406;
    precise float _417 = _416 + _415;
    precise float _418 = POSITION.z * _409;
    precise float _419 = _418 + _417;
    precise float _420 = 1.0 * _412;
    precise float _421 = _420 + _419;
    precise float _422 = POSITION.x * _404;
    precise float _423 = POSITION.y * _407;
    precise float _424 = _423 + _422;
    precise float _425 = POSITION.z * _410;
    precise float _426 = _425 + _424;
    precise float _427 = 1.0 * _413;
    precise float _428 = _427 + _426;
    precise float _429 = POSITION.x * _405;
    precise float _430 = POSITION.y * _408;
    precise float _431 = _430 + _429;
    precise float _432 = POSITION.z * _411;
    precise float _433 = _432 + _431;
    precise float _434 = 1.0 * _414;
    precise float _435 = _434 + _433;
    precise float _460 = _421 - cbSceneParam._m0[3u].x;
    precise float _461 = _428 - cbSceneParam._m0[3u].y;
    precise float _462 = _435 - cbSceneParam._m0[3u].z;
    precise float _490 = _460 * cbSceneParam._m0[24u].x;
    precise float _491 = _461 * cbSceneParam._m0[24u].y;
    precise float _492 = _491 + _490;
    precise float _493 = _462 * cbSceneParam._m0[24u].z;
    precise float _494 = _493 + _492;
    precise float _495 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _496 = _495 + _494;
    precise float _497 = _460 * cbSceneParam._m0[25u].x;
    precise float _498 = _461 * cbSceneParam._m0[25u].y;
    precise float _499 = _498 + _497;
    precise float _500 = _462 * cbSceneParam._m0[25u].z;
    precise float _501 = _500 + _499;
    precise float _502 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _503 = _502 + _501;
    precise float _504 = _460 * cbSceneParam._m0[26u].x;
    precise float _505 = _461 * cbSceneParam._m0[26u].y;
    precise float _506 = _505 + _504;
    precise float _507 = _462 * cbSceneParam._m0[26u].z;
    precise float _508 = _507 + _506;
    precise float _509 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _510 = _509 + _508;
    precise float _511 = _460 * cbSceneParam._m0[27u].x;
    precise float _512 = _461 * cbSceneParam._m0[27u].y;
    precise float _513 = _512 + _511;
    precise float _514 = _462 * cbSceneParam._m0[27u].z;
    precise float _515 = _514 + _513;
    precise float _516 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _517 = _516 + _515;
    gl_Position.x = _496;
    gl_Position.y = _503;
    gl_Position.z = _510;
    gl_Position.w = _517;
    POSITION_1.x = _496;
    POSITION_1.y = _503;
    POSITION_1.z = _510;
    POSITION_1.w = _517;
    NORMAL_1.x = fma(_196, _409, fma(_195, _406, _403 * _193));
    NORMAL_1.y = fma(_196, _410, fma(_195, _407, _404 * _193));
    NORMAL_1.z = fma(_196, _411, fma(_195, _408, _405 * _193));
    NORMAL_1.w = float(_220);
    TANGENT_1.x = fma(_207, _409, fma(_206, _406, _403 * _205));
    TANGENT_1.y = fma(_207, _410, fma(_206, _407, _404 * _205));
    TANGENT_1.z = fma(_207, _411, fma(_206, _408, _405 * _205));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = COLOR.x;
    TEXCOORD_1.y = COLOR.y;
    TEXCOORD_1.z = COLOR.z;
    TEXCOORD_1.w = COLOR.w;
    TEXCOORD_4.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_4.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_4.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_4.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_8 = COLOR_1.x;
}


