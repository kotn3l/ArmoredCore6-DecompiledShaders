#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[24];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1364;
float _3744;
float _3745;
float _3746;
float _3747;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    vec4 _281 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _309 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _341 = _335.x * cbMatDynParam._m0[17u].x;
    float _342 = _335.y * cbMatDynParam._m0[17u].y;
    float _343 = _335.z * cbMatDynParam._m0[17u].z;
    vec4 _362 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _381 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _392 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _394 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (_381.x + 0.00999999977648258209228515625))) * _392;
    float _3756 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _402 = (_395 * ((_362.x * cbMatDynParam._m0[18u].x) - _341)) + _341;
    float _403 = (_395 * ((_362.y * cbMatDynParam._m0[18u].y) - _342)) + _342;
    float _404 = (_395 * ((_362.z * cbMatDynParam._m0[18u].z) - _343)) + _343;
    float _409 = (0.5 - ((cbMatDynParam._m0[22u].z * 0.5) * (_381.y + 0.00999999977648258209228515625))) * _392;
    float _3767 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _417 = (((_309.x * cbMatDynParam._m0[19u].x) - _402) * _410) + _402;
    float _418 = (((_309.y * cbMatDynParam._m0[19u].y) - _403) * _410) + _403;
    float _419 = (((_309.z * cbMatDynParam._m0[19u].z) - _404) * _410) + _404;
    float _424 = (0.5 - ((cbMatDynParam._m0[22u].w * 0.5) * (_381.z + 0.00999999977648258209228515625))) * _392;
    float _3778 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _432 = (((_281.x * cbMatDynParam._m0[20u].x) - _417) * _425) + _417;
    float _433 = (((_281.y * cbMatDynParam._m0[20u].y) - _418) * _425) + _418;
    float _434 = (((_281.z * cbMatDynParam._m0[20u].z) - _419) * _425) + _419;
    vec4 _446 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _449 = _446.x * _335.w;
    vec4 _461 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    vec4 _478 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w));
    float _489 = ((_478.x - _463) * _395) + _463;
    float _490 = ((_478.y - _464) * _395) + _464;
    float _491 = ((_478.z - _465) * _395) + _465;
    vec4 _504 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _515 = ((_504.x - _489) * _410) + _489;
    float _516 = ((_504.y - _490) * _410) + _490;
    float _517 = ((_504.z - _491) * _410) + _491;
    vec4 _529 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _540 = ((_529.x - _515) * _425) + _515;
    float _541 = ((_529.y - _516) * _425) + _516;
    float _542 = ((_529.z - _517) * _425) + _517;
    vec4 _558 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _577 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _596 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _598 = _596.x;
    float _599 = _596.y;
    float _601 = _596.z * cbMatDynParam._m0[22u].x;
    vec4 _615 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _623 = (((_615.z * cbMatDynParam._m0[21u].w) - _601) * _395) + _601;
    float _626 = (((_577.z * cbMatDynParam._m0[21u].z) - _623) * _410) + _623;
    float _629 = (((_558.z * cbMatDynParam._m0[23u].x) - _626) * _425) + _626;
    vec4 _642 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _656 = (_395 * (_615.x - _598)) + _598;
    float _657 = (_395 * (_615.y - _599)) + _599;
    float _662 = ((_577.x - _656) * _410) + _656;
    float _663 = ((_577.y - _657) * _410) + _657;
    float _672 = ((((_558.x - _662) * _425) + _662) * 2.0) + (-1.0);
    float _673 = ((((_558.y - _663) * _425) + _663) * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3789 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _679 = sqrt(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))));
    float _683 = _672 + (cbMatDynParam._m0[22u].y * ((_642.x * 2.0) + (-1.0)));
    float _684 = _673 + (cbMatDynParam._m0[22u].y * ((_642.y * 2.0) + (-1.0)));
    float _687 = fma(_679, _249, fma(_684, _241 * TANGENT.x, (_227 * _219) * _683));
    float _690 = fma(_679, _250, fma(_684, _241 * TANGENT.y, (_227 * _220) * _683));
    float _693 = fma(_679, _251, fma(_684, _241 * TANGENT.z, (_227 * _221) * _683));
    float _697 = inversesqrt(dot(vec3(_687, _690, _693), vec3(_687, _690, _693)));
    float _698 = _697 * _687;
    float _699 = _697 * _690;
    float _700 = _697 * _693;
    float _3800 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3811 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3822 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3833 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _704 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _705 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _706 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _707 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _723 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _773 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _763);
    float _774 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _763);
    float _775 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _763);
    float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
    float _780 = _773 * _779;
    float _781 = _774 * _779;
    float _782 = _775 * _779;
    vec4 _787 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _789 = _787.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1045 = sqrt(((_773 * _773) + (_774 * _774)) + (_775 * _775));
        float _1051 = (cbMatDynParam._m0[5u].x * _1045) + cbMatDynParam._m0[5u].y;
        float _3877 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1056 = (cbMatDynParam._m0[5u].z * _1045) + cbMatDynParam._m0[5u].w;
        float _3888 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) - _1052)) + _1052) < ((_789 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _803 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _805 = _803.w;
    float _823 = fma(_700, cbSceneParam._m0[5u].z, fma(_699, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _698));
    float _826 = fma(_700, cbSceneParam._m0[6u].z, fma(_699, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _698));
    float _829 = fma(_700, cbSceneParam._m0[7u].z, fma(_699, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _698));
    vec4 _831 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _833 = _831.x;
    float _835 = _831.w;
    float _836 = _833 * _833;
    float _856 = (((_836 - _704) + (_835 * _704)) * cbMtdParam._m0[3u].x) + _704;
    float _857 = (((_836 - _705) + (_835 * _705)) * cbMtdParam._m0[3u].x) + _705;
    float _858 = (((_836 - _706) + (_835 * _706)) * cbMtdParam._m0[3u].x) + _706;
    float _859 = (((_831.y - _707) + (_835 * _707)) * cbMtdParam._m0[3u].x) + _707;
    vec4 _860 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _876 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(_856, _857, _858), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _860.z;
    float _885 = (((cbMatDynParam._m0[16u].x - _859) * cbMatDynParam._m0[16u].z) * _876) + _859;
    uint _898 = uint(roundEven(NORMAL.w)) * 13u;
    uint _899 = _898 + 9u;
    uint _900 = _899 + uint(cbMatDynParam._m0[0u].w);
    float _906 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_900].x;
    float _907 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_900].y;
    float _908 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_900].z;
    float _3899 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    vec4 _918 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _932 = ((((_909 * _805) - _909) + _918.x) * cbMtdParam._m0[3u].x) + _909;
    float _933 = ((((_910 * _805) - _910) + _918.y) * cbMtdParam._m0[3u].x) + _910;
    float _934 = ((((_911 * _805) - _911) + _918.z) * cbMtdParam._m0[3u].x) + _911;
    float _938 = cbMatDynParam._m0[13u].w * _876;
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _962 = _959.x * TEXCOORD_8;
    float _963 = dot(vec3(_698, _699, _700), vec3(_780, _781, _782));
    float _966 = _963 * 2.0;
    float _970 = (_966 * _698) - _780;
    float _971 = (_966 * _699) - _781;
    float _972 = (_966 * _700) - _782;
    float _976 = abs(dot(vec3(_780, _781, _782), vec3(_698, _699, _700)));
    float _3932 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _978 = sqrt(_885);
    float _991 = exp2((_978 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_978 * 3.0));
    float _997 = (1.0 - _991) * ((_978 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _998 = _991 * _978;
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1363;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1089 = fma(_1034, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026));
        float _1093 = fma(_1034, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026));
        float _1097 = fma(_1034, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026));
        float _1121 = _1026 + _698;
        float _1122 = _1030 + _699;
        float _1123 = _1034 + _700;
        float _1133 = fma(_1123, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121)) - _1089;
        float _1134 = fma(_1123, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121)) - _1093;
        float _1135 = fma(_1123, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121)) - _1097;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1089 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1093 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[34u].z) + ((((((_1097 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1191 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1157.x + (-0.5));
        float _1193 = _1191 * (_1157.y + (-0.5));
        float _1194 = _1191 * (_1157.z + (-0.5));
        float _1201 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1164.x + (-0.5));
        float _1203 = _1201 * (_1164.y + (-0.5));
        float _1204 = _1201 * (_1164.z + (-0.5));
        float _1211 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1171.x + (-0.5));
        float _1213 = _1211 * (_1171.y + (-0.5));
        float _1214 = _1211 * (_1171.z + (-0.5));
        float _1221 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1178.x + (-0.5));
        float _1223 = _1221 * (_1178.y + (-0.5));
        float _1224 = _1221 * (_1178.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1245 = (dot(vec3(_698, _699, _700), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1255 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3980 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1257 + 1.0))) + _1262) * _1225;
        float _1272 = _1193 * 0.5;
        float _1273 = _1203 * 0.5;
        float _1274 = _1213 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_698, _699, _700), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4013 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1299 + 1.0))) + _1304) * _1226;
        float _1314 = _1194 * 0.5;
        float _1315 = _1204 * 0.5;
        float _1316 = _1214 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_698, _699, _700), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4046 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1341 + 1.0))) + _1346) * _1227;
        _1363 = _1194;
        _1365 = _1193;
        _1366 = _1192;
        _1367 = _1204;
        _1368 = _1203;
        _1369 = _1202;
        _1370 = _1214;
        _1371 = _1213;
        _1372 = _1212;
        _1373 = _1227;
        _1374 = _1226;
        _1375 = _1225;
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1364;
        _1365 = _1364;
        _1366 = _1364;
        _1367 = _1364;
        _1368 = _1364;
        _1369 = _1364;
        _1370 = _1364;
        _1371 = _1364;
        _1372 = _1364;
        _1373 = _1364;
        _1374 = _1364;
        _1375 = _1364;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1407 = fma(_1034, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026));
        float _1411 = fma(_1034, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026));
        float _1415 = fma(_1034, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026));
        float _1438 = _1026 + _698;
        float _1439 = _1030 + _699;
        float _1440 = _1034 + _700;
        float _1450 = fma(_1440, cbModelParam._m0[30u].z, fma(_1439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1438)) - _1407;
        float _1451 = fma(_1440, cbModelParam._m0[31u].z, fma(_1439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1438)) - _1411;
        float _1452 = fma(_1440, cbModelParam._m0[32u].z, fma(_1439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1438)) - _1415;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1469 = ((_1456 * _1450) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1407 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1456 * _1451) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1411 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1456 * _1452) / cbModelParam._m0[35u].z) + ((((((_1415 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        float _1506 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1473.x + (-0.5));
        float _1508 = _1506 * (_1473.y + (-0.5));
        float _1509 = _1506 * (_1473.z + (-0.5));
        float _1516 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1480.x + (-0.5));
        float _1518 = _1516 * (_1480.y + (-0.5));
        float _1519 = _1516 * (_1480.z + (-0.5));
        float _1526 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1487.x + (-0.5));
        float _1528 = _1526 * (_1487.y + (-0.5));
        float _1529 = _1526 * (_1487.z + (-0.5));
        float _1536 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1494.x + (-0.5));
        float _1538 = _1536 * (_1494.y + (-0.5));
        float _1539 = _1536 * (_1494.z + (-0.5));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = _1507 * 0.5;
        float _1544 = _1517 * 0.5;
        float _1545 = _1527 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_698, _699, _700), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4109 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1570 + 1.0))) + _1575) * _1540;
        float _1585 = _1508 * 0.5;
        float _1586 = _1518 * 0.5;
        float _1587 = _1528 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_698, _699, _700), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4142 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1612 + 1.0))) + _1617) * _1541;
        float _1627 = _1509 * 0.5;
        float _1628 = _1519 * 0.5;
        float _1629 = _1529 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_698, _699, _700), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4175 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1654 + 1.0))) + _1659) * _1542;
        _1676 = _1509;
        _1677 = _1508;
        _1678 = _1507;
        _1679 = _1519;
        _1680 = _1518;
        _1681 = _1517;
        _1682 = _1529;
        _1683 = _1528;
        _1684 = _1527;
        _1685 = _1542;
        _1686 = _1541;
        _1687 = _1540;
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
    }
    else
    {
        _1676 = _1364;
        _1677 = _1364;
        _1678 = _1364;
        _1679 = _1364;
        _1680 = _1364;
        _1681 = _1364;
        _1682 = _1364;
        _1683 = _1364;
        _1684 = _1364;
        _1685 = _1364;
        _1686 = _1364;
        _1687 = _1364;
        _1688 = 0.0;
        _1689 = 0.0;
        _1690 = 0.0;
    }
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1376)) + _1376;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1377)) + _1377;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1378)) + _1378;
    float _1723 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1700));
    float _1744 = _970 * 0.5;
    float _1745 = _971 * 0.5;
    float _1746 = _972 * 0.5;
    float _1747 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1750 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1753 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1760 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1363, _1367, _1370, _1373));
        float _1764 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1768 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1775 = dot(vec4(cbModelParam._m0[39u]), vec4(_1744, _1745, _1746, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1744, _1745, _1746, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _885);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1858 = fma(_1034, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026)) + cbModelParam._m0[13u].w;
        float _1862 = fma(_1034, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026)) + cbModelParam._m0[14u].w;
        float _1866 = fma(_1034, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026)) + cbModelParam._m0[15u].w;
        float _1869 = fma(_972, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970));
        float _1872 = fma(_972, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970));
        float _1875 = fma(_972, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970));
        float _1903;
        if (_1869 > 0.0)
        {
            _1903 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1903 = frontier_phi_19_17_ladder;
        }
        float _2105;
        if (_1872 > 0.0)
        {
            _2105 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2105 = frontier_phi_28_24_ladder;
        }
        float _2358;
        if (_1875 > 0.0)
        {
            _2358 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2358 = frontier_phi_40_35_ladder;
        }
        float _2360 = isnan(_2105) ? _1903 : (isnan(_1903) ? _2105 : min(_1903, _2105));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1869) + _1858;
        float _2366 = (_2361 * _1872) + _1862;
        float _2367 = (_2361 * _1875) + _1866;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2368;
        float _2372 = _2368 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 > _2372) || ((_2366 < _2370) || ((_2365 < _2370) || (_2365 > _2372))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2367, cbModelParam._m0[9u].z, fma(_2366, cbModelParam._m0[9u].y, _2365 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2367, cbModelParam._m0[10u].z, fma(_2366, cbModelParam._m0[10u].y, _2365 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2367, cbModelParam._m0[11u].z, fma(_2366, cbModelParam._m0[11u].y, _2365 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_18_40_ladder = _2495.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2495.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2495.x * cbModelParam._m0[1u].y;
        }
        _1891 = frontier_phi_18_40_ladder_2;
        _1893 = frontier_phi_18_40_ladder_1;
        _1895 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_970, _971, _972), _1810);
        _1891 = _1879.x * cbModelParam._m0[1u].y;
        _1893 = _1879.y * cbModelParam._m0[1u].y;
        _1895 = _1879.z * cbModelParam._m0[1u].y;
    }
    float _1899 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _885);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1899 : min(cbModelParam._m0[25u].w, _1899));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1034, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1034, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1034, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_972, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970));
        float _1967 = fma(_972, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970));
        float _1970 = fma(_972, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970));
        float _2110;
        if (_1964 > 0.0)
        {
            _2110 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2110 = frontier_phi_30_26_ladder;
        }
        float _2385;
        if (_1967 > 0.0)
        {
            _2385 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2385 = frontier_phi_42_37_ladder;
        }
        float _2598;
        if (_1970 > 0.0)
        {
            _2598 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2598 = frontier_phi_51_48_ladder;
        }
        float _2600 = isnan(_2385) ? _2110 : (isnan(_2110) ? _2385 : min(_2110, _2385));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _1964) + _1953;
        float _2606 = (_2601 * _1967) + _1957;
        float _2607 = (_2601 * _1970) + _1961;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2609 = (-1.0) - _2608;
        float _2611 = _2608 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2607 > _2611) || ((_2607 < _2609) || ((_2606 > _2611) || ((_2606 < _2609) || ((_2605 < _2609) || (_2605 > _2611))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2607, cbModelParam._m0[17u].z, fma(_2606, cbModelParam._m0[17u].y, _2605 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2607, cbModelParam._m0[18u].z, fma(_2606, cbModelParam._m0[18u].y, _2605 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2607, cbModelParam._m0[19u].z, fma(_2606, cbModelParam._m0[19u].y, _2605 * cbModelParam._m0[19u].x))), _1900);
            frontier_phi_27_51_ladder = _2808.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2808.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2808.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_27_51_ladder_2;
        _1991 = frontier_phi_27_51_ladder_1;
        _1993 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_970, _971, _972), _1900);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2006 = (((_997 * _856) + _998) * _962) * ((cbModelParam._m0[1u].w * (_1989 - _1891)) + _1891);
    float _2008 = (((_997 * _857) + _998) * _962) * ((cbModelParam._m0[1u].w * (_1991 - _1893)) + _1893);
    float _2010 = (((_997 * _858) + _998) * _962) * ((cbModelParam._m0[1u].w * (_1993 - _1895)) + _1895);
    float _2013 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    uvec4 _2029 = floatBitsToUint(cbInstanceData._m0[_898 + 5u]);
    uint _2031 = _2029.x * 14u;
    uint _2032 = _2031 + 13u;
    float _2039 = _962 + (-1.0);
    float _2044 = (cbLight._m0[_2032].x * _2039) + 1.0;
    float _2045 = (cbLight._m0[_2032].y * _2039) + 1.0;
    float _2046 = (cbLight._m0[_2032].z * _2039) + 1.0;
    float _2047 = (cbLight._m0[_2032].w * _2039) + 1.0;
    uint _2048 = _2031 + 5u;
    float _2054 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2058 = _2031 + 4u;
    float _2064 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2068 = _2031 | 1u;
    float _2079 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_698, _699, _700));
    float _2082 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_698, _699, _700));
    float _4311 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _4322 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2087 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * 0.3183098733425140380859375;
    float _2089 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.3183098733425140380859375;
    float _2096 = ((cbLight._m0[_2048].x * _2054) * _2089) + ((cbLight._m0[_2058].x * _2064) * _2087);
    float _2097 = ((_2054 * cbLight._m0[_2048].y) * _2089) + ((_2064 * cbLight._m0[_2058].y) * _2087);
    float _2098 = ((_2054 * cbLight._m0[_2048].z) * _2089) + ((_2064 * cbLight._m0[_2058].z) * _2087);
    uvec4 _2102 = floatBitsToUint(cbLight._m0[_2031 + 12u]);
    bool _2104 = _2102.x == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2104)
    {
        _2115 = _2096;
        _2117 = _2097;
        _2119 = _2098;
    }
    else
    {
        uint _2123 = _2031 + 6u;
        float _2139 = (dot(vec3(cbLight._m0[_2031 + 2u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2140 = _2139 * _2139;
        float _4333 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2141 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2142 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2115 = (((cbLight._m0[_2123].x * 0.3183098733425140380859375) * _2141) * _2142) + _2096;
        _2117 = (((cbLight._m0[_2123].y * 0.3183098733425140380859375) * _2141) * _2142) + _2097;
        _2119 = (((cbLight._m0[_2123].z * 0.3183098733425140380859375) * _2141) * _2142) + _2098;
    }
    bool _2122 = _2102.y == 0u;
    float _2160;
    float _2162;
    float _2164;
    if (_2122)
    {
        _2160 = _2115;
        _2162 = _2117;
        _2164 = _2119;
    }
    else
    {
        uint _2329 = _2031 + 7u;
        float _2345 = (dot(vec3(cbLight._m0[_2031 + 3u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4349 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2348 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2160 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2115;
        _2162 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2117;
        _2164 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2119;
    }
    uint _2167 = _2031 + 8u;
    float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _885) * 0.949999988079071044921875);
    float _2181 = _2180 * _2180;
    float _2182 = cbLight._m0[_2031].x + _780;
    float _2183 = cbLight._m0[_2031].y + _781;
    float _2184 = cbLight._m0[_2031].z + _782;
    float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
    float _2189 = _2188 * _2182;
    float _2190 = _2188 * _2183;
    float _2191 = _2188 * _2184;
    float _2192 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2031].xyz));
    float _4365 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _4376 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _2196 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2197 = dot(vec3(_698, _699, _700), vec3(_2189, _2190, _2191));
    float _4387 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2189, _2190, _2191));
    float _4398 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2181 * _2181;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
    float _2218 = 1.0 - _856;
    float _2219 = 1.0 - _857;
    float _2220 = 1.0 - _858;
    float _2227 = 1.0 - _2181;
    float _2238 = (0.5 / (((_2196 * ((_2195 * _2227) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2227) + _2181) * _2195))) * _2195;
    float _4409 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    uint _2251 = _2031 + 9u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _885) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2068].x + _780;
    float _2265 = cbLight._m0[_2068].y + _781;
    float _2266 = cbLight._m0[_2068].z + _782;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2068].xyz));
    float _4420 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2278 = dot(vec3(_698, _699, _700), vec3(_2271, _2272, _2273));
    float _4431 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2271, _2272, _2273));
    float _4442 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2263 * _2263;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
    float _2304 = 1.0 - _2263;
    float _2314 = (0.5 / (((_2196 * ((_2277 * _2304) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2304) + _2263) * _2277))) * _2277;
    float _4453 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2316 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    float _2326 = (((((_2297 * _2218) + _856) * cbLight._m0[_2251].x) * _2316) * _2054) + (((((_2217 * _2218) + _856) * cbLight._m0[_2167].x) * _2240) * _2064);
    float _2327 = (((((_2297 * _2219) + _857) * cbLight._m0[_2251].y) * _2316) * _2054) + (((((_2217 * _2219) + _857) * cbLight._m0[_2167].y) * _2240) * _2064);
    float _2328 = (((((_2297 * _2220) + _858) * cbLight._m0[_2251].z) * _2316) * _2054) + (((((_2217 * _2220) + _858) * cbLight._m0[_2167].z) * _2240) * _2064);
    float _2390;
    float _2392;
    float _2394;
    if (_2104)
    {
        _2390 = _2326;
        _2392 = _2327;
        _2394 = _2328;
    }
    else
    {
        uint _2396 = _2031 + 2u;
        uint _2400 = _2031 + 10u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _885) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _780;
        float _2417 = cbLight._m0[_2396].y + _781;
        float _2418 = cbLight._m0[_2396].z + _782;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2396].xyz));
        float _4464 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2430 = dot(vec3(_698, _699, _700), vec3(_2423, _2424, _2425));
        float _4475 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4486 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
        float _2456 = 1.0 - _2415;
        float _2466 = (0.5 / (((_2196 * ((_2429 * _2456) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2456) + _2415) * _2429))) * _2429;
        float _4497 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2390 = (((((_2449 * _2218) + _856) * cbLight._m0[_2400].x) * _2468) * _2469) + _2326;
        _2392 = (((((_2449 * _2219) + _857) * cbLight._m0[_2400].y) * _2468) * _2469) + _2327;
        _2394 = (((((_2449 * _2220) + _858) * cbLight._m0[_2400].z) * _2468) * _2469) + _2328;
    }
    float _2504;
    float _2506;
    float _2508;
    if (_2122)
    {
        _2504 = _2390;
        _2506 = _2392;
        _2508 = _2394;
    }
    else
    {
        uint _2515 = _2031 + 3u;
        uint _2519 = _2031 + 11u;
        float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2515].w)) * _885) * 0.949999988079071044921875);
        float _2534 = _2533 * _2533;
        float _2535 = cbLight._m0[_2515].x + _780;
        float _2536 = cbLight._m0[_2515].y + _781;
        float _2537 = cbLight._m0[_2515].z + _782;
        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
        float _2542 = _2541 * _2535;
        float _2543 = _2541 * _2536;
        float _2544 = _2541 * _2537;
        float _2545 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2515].xyz));
        float _4513 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2549 = dot(vec3(_698, _699, _700), vec3(_2542, _2543, _2544));
        float _4524 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2553 = dot(vec3(cbLight._m0[_2515].xyz), vec3(_2542, _2543, _2544));
        float _4535 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2557 = _2534 * _2534;
        float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
        float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
        float _2575 = 1.0 - _2534;
        float _2585 = (0.5 / (((_2196 * ((_2548 * _2575) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2575) + _2534) * _2548))) * _2548;
        float _4546 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2504 = (((((_2568 * _2218) + _856) * cbLight._m0[_2519].x) * _2587) * _2588) + _2390;
        _2506 = (((((_2568 * _2219) + _857) * cbLight._m0[_2519].y) * _2587) * _2588) + _2392;
        _2508 = (((((_2568 * _2220) + _858) * cbLight._m0[_2519].z) * _2587) * _2588) + _2394;
    }
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_2029.y == 0u)
    {
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2663;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2663;
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2663;
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.x;
        uint _2690 = uint((float(_2678.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2679))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2679)));
        float _2700 = (log2(_2666 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2701 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        uint _2704 = uint(isnan(14.0) ? _2701 : (isnan(_2701) ? 14.0 : min(_2701, 14.0)));
        uvec4 _2709 = texelFetch(g_lightClusterGridBuffer, int(((_2704 << 2u) + (_2690 << 6u)) >> 2u));
        uint _2710 = _2709.x;
        uint _2711 = _2678.z;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((((1u << ((_2711 >> 4u) & 15u)) + 4294967295u) & _2710) == 0u) || ((_2711 & 240u) == 0u))
        {
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
        }
        else
        {
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            uint _2971 = 0u;
            uint _2980;
            bool _2981;
            for (;;)
            {
                _2980 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                _2981 = _2980 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2981)
                {
                    frontier_phi_68_pred = _2967;
                    frontier_phi_68_pred_1 = _2970;
                    frontier_phi_68_pred_2 = _2969;
                    frontier_phi_68_pred_3 = _2968;
                    frontier_phi_68_pred_4 = _2966;
                    frontier_phi_68_pred_5 = _2965;
                }
                else
                {
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    uint _3116;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2980;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    for (;;)
                    {
                        uint _3120 = uint(findLSB(_3116)) + (_2971 << 5u);
                        uint _3117 = (_3116 + 4294967295u) & _3116;
                        uint _3122 = _3120 * 48u;
                        vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 3u)).x));
                        uint _3142 = (_3120 * 48u) + 4u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3161 = (_3120 * 48u) + 8u;
                        vec3 _3172 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x));
                        float _3176 = _3136.x - _2664;
                        float _3177 = _3136.y - _2665;
                        float _3178 = _3136.z - _2666;
                        float _3179 = dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178));
                        float _3182 = inversesqrt(_3179);
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3186 = dot(vec3(_823, _826, _829), vec3(_3183, _3184, _3185));
                        float _3191 = 1.0 - (_3179 * _3136.w);
                        float _4572 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3192 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3193 = sqrt(_3179) * _3155.w;
                        float _3196 = 1.39999997615814208984375 / (_3193 + 1.39999997615814208984375);
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3186) + _3197;
                        float _3203 = _3193 * _3193;
                        float _3207 = ((isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))) * _3192) / ((_3203 * 0.699999988079071044921875) + 1.0);
                        float _3211 = (-0.0) - _2664;
                        float _3212 = (-0.0) - _2665;
                        float _3213 = (-0.0) - _2666;
                        float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                        float _3218 = _3217 * _3211;
                        float _3219 = _3217 * _3212;
                        float _3220 = _3217 * _3213;
                        float _3228 = exp2(log2(1.0 / ((_3203 * 3.5) + 5.0)) * 0.25);
                        float _3229 = 1.0 - _978;
                        float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                        float _3237 = _3236 * _3236;
                        float _3238 = _3237 * _3237;
                        float _3239 = _3218 + _3183;
                        float _3240 = _3219 + _3184;
                        float _3241 = _3220 + _3185;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3249 = dot(vec3(_823, _826, _829), vec3(_3218, _3219, _3220));
                        float _4588 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3253 = dot(vec3(_823, _826, _829), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                        float _4599 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                        float _3261 = _3196 * _3237;
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3186) + _3262;
                        float _4610 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3267 = 1.0 - _3237;
                        float _3277 = (0.5 / (((_3266 * ((_3252 * _3267) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3237) * _3252))) * _3266;
                        float _4621 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3288 = (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) / ((_3260 * _3260) * ((_3203 * 2.1991131305694580078125) + 3.141590118408203125))) * _3192;
                        _3040 = (_3207 * _3155.x) + _3113;
                        _3041 = (_3207 * _3155.y) + _3114;
                        _3042 = (_3207 * _3155.z) + _3115;
                        _3037 = (_3288 * _3172.x) + _3110;
                        _3038 = (_3288 * _3172.y) + _3111;
                        _3039 = (_3288 * _3172.z) + _3112;
                        if (_3117 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3117;
                        }
                    }
                    frontier_phi_68_pred = _3039;
                    frontier_phi_68_pred_1 = _3042;
                    frontier_phi_68_pred_2 = _3041;
                    frontier_phi_68_pred_3 = _3040;
                    frontier_phi_68_pred_4 = _3038;
                    frontier_phi_68_pred_5 = _3037;
                }
                _2818 = frontier_phi_68_pred;
                _2824 = frontier_phi_68_pred_1;
                _2822 = frontier_phi_68_pred_2;
                _2820 = frontier_phi_68_pred_3;
                _2816 = frontier_phi_68_pred_4;
                _2814 = frontier_phi_68_pred_5;
                uint _2972 = _2971 + 1u;
                if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2965 = _2814;
                    _2966 = _2816;
                    _2967 = _2818;
                    _2968 = _2820;
                    _2969 = _2822;
                    _2970 = _2824;
                    _2971 = _2972;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
        }
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.z;
        uint _2830 = (_2828 >> 8u) & 15u;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((4294967295u << _2830) & _2710) == 0u)
        {
            _2933 = _2813;
            _2935 = _2815;
            _2937 = _2817;
            _2939 = _2819;
            _2941 = _2821;
            _2943 = _2823;
        }
        else
        {
            float _2958 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
            float _2959 = _2958 * _2664;
            float _2960 = _2958 * _2665;
            float _2961 = _2958 * _2666;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2830 < ((_2828 >> 12u) & 15u))
            {
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _3093 = _2813;
                float _3094 = _2815;
                float _3095 = _2817;
                float _3096 = _2819;
                float _3097 = _2821;
                float _3098 = _2823;
                uint _3099 = _2830;
                uint _3108;
                bool _3109;
                for (;;)
                {
                    _3108 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3099 << 2u)) >> 2u)).x;
                    _3109 = _3108 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3109)
                    {
                        frontier_phi_79_pred = _3098;
                        frontier_phi_79_pred_1 = _3097;
                        frontier_phi_79_pred_2 = _3096;
                        frontier_phi_79_pred_3 = _3095;
                        frontier_phi_79_pred_4 = _3094;
                        frontier_phi_79_pred_5 = _3093;
                    }
                    else
                    {
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3315 = _3093;
                        float _3316 = _3094;
                        float _3317 = _3095;
                        float _3318 = _3096;
                        float _3319 = _3097;
                        float _3320 = _3098;
                        uint _3321 = _3108;
                        uint _3322;
                        vec4 _3347;
                        float _3348;
                        vec4 _3363;
                        vec3 _3375;
                        vec4 _3390;
                        vec4 _3405;
                        float _3451;
                        bool _3452;
                        for (;;)
                        {
                            uint _3332 = ((_3099 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3321));
                            _3322 = (_3321 + 4294967295u) & _3321;
                            uint _3334 = _3332 * 40u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3348 = _3347.w;
                            uint _3350 = (_3332 * 40u) + 4u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3332 * 40u) + 8u;
                            _3375 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x));
                            uint _3377 = (_3332 * 40u) + 16u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3332 * 40u) + 20u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3332 * 40u) + 24u;
                            vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3426 = (_3332 * 40u) + 28u;
                            vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            _3451 = fma(_2666, _3439.z, fma(_2665, _3439.y, _3439.x * _2664)) + _3439.w;
                            _3452 = !((fma(_2666, _3420.z, fma(_2665, _3420.y, _3420.x * _2664)) + _3420.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3452)
                            {
                                float _3479 = _3347.x - _2664;
                                float _3480 = _3347.y - _2665;
                                float _3481 = _3347.z - _2666;
                                float _3482 = dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481));
                                float _3485 = inversesqrt(_3482);
                                float _3486 = _3485 * _3479;
                                float _3487 = _3485 * _3480;
                                float _3488 = _3485 * _3481;
                                float _3492 = 1.0 - (_3482 / (_3348 * _3348));
                                float _4632 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3497 = sqrt(_3482) * _3363.w;
                                float _3499 = 1.39999997615814208984375 / (_3497 + 1.39999997615814208984375);
                                float _3500 = _3499 * _3499;
                                float _3503 = ((1.0 - _3500) * dot(vec3(_3486, _3487, _3488), vec3(_823, _826, _829))) + _3500;
                                float _3506 = _3497 * _3497;
                                float _3510 = (fma(_2666, _3390.z, fma(_2665, _3390.y, _3390.x * _2664)) + _3390.w) / _3451;
                                float _3511 = (fma(_2666, _3405.z, fma(_2665, _3405.y, _3405.x * _2664)) + _3405.w) / _3451;
                                float _3515 = 1.0 - dot(vec2(_3510, _3511), vec2(_3510, _3511));
                                float _4648 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3517 = _3516 * (((isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0))) * _3493) / ((_3506 * 0.699999988079071044921875) + 1.0));
                                float _3529 = exp2(log2(1.0 / ((_3506 * 3.5) + 5.0)) * 0.25);
                                float _3530 = 1.0 - _978;
                                float _3537 = sqrt(1.0 - ((1.0 - (_3530 * _3530)) * (1.0 - (_3529 * _3529))));
                                float _3538 = _3537 * _3537;
                                float _3539 = _3538 * _3538;
                                float _3540 = _3486 - _2959;
                                float _3541 = _3487 - _2960;
                                float _3542 = _3488 - _2961;
                                float _3546 = inversesqrt(dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542)));
                                float _3550 = dot(vec3(_823, _826, _829), vec3((-0.0) - _2959, (-0.0) - _2960, (-0.0) - _2961));
                                float _4659 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3554 = dot(vec3(_823, _826, _829), vec3(_3546 * _3540, _3546 * _3541, _3546 * _3542));
                                float _4670 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3557 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3561 = ((_3557 * _3557) * (_3539 + (-1.0))) + 1.0;
                                float _3562 = _3499 * _3538;
                                float _3563 = _3562 * _3562;
                                float _3569 = ((1.0 - _3563) * dot(vec3(_823, _826, _829), vec3(_3486, _3487, _3488))) + _3563;
                                float _4681 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3571 = 1.0 - _3538;
                                float _3581 = (0.5 / (((_3570 * ((_3553 * _3571) + _3538)) + 9.9999999392252902907785028219223e-09) + (((_3570 * _3571) + _3538) * _3553))) * _3570;
                                float _4692 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3591 = (_3516 * _3493) * (((_3539 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3561 * _3561) * ((_3506 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3517 * _3363.z;
                                frontier_phi_85_pred_1 = _3517 * _3363.y;
                                frontier_phi_85_pred_2 = _3517 * _3363.x;
                                frontier_phi_85_pred_3 = _3591 * _3375.z;
                                frontier_phi_85_pred_4 = _3591 * _3375.y;
                                frontier_phi_85_pred_5 = _3591 * _3375.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3600 = frontier_phi_85_pred;
                            _3599 = frontier_phi_85_pred_1;
                            _3598 = frontier_phi_85_pred_2;
                            _3597 = frontier_phi_85_pred_3;
                            _3596 = frontier_phi_85_pred_4;
                            _3595 = frontier_phi_85_pred_5;
                            _3305 = _3598 + _3318;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            _3304 = _3597 + _3317;
                            if (_3322 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3322;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3307;
                        frontier_phi_79_pred_1 = _3306;
                        frontier_phi_79_pred_2 = _3305;
                        frontier_phi_79_pred_3 = _3304;
                        frontier_phi_79_pred_4 = _3303;
                        frontier_phi_79_pred_5 = _3302;
                    }
                    _2944 = frontier_phi_79_pred;
                    _2942 = frontier_phi_79_pred_1;
                    _2940 = frontier_phi_79_pred_2;
                    _2938 = frontier_phi_79_pred_3;
                    _2936 = frontier_phi_79_pred_4;
                    _2934 = frontier_phi_79_pred_5;
                    uint _3100 = _3099 + 1u;
                    if (_3100 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3093 = _2934;
                        _3094 = _2936;
                        _3095 = _2938;
                        _3096 = _2940;
                        _3097 = _2942;
                        _3098 = _2944;
                        _3099 = _3100;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2940;
                frontier_phi_60_61_ladder_1 = _2944;
                frontier_phi_60_61_ladder_2 = _2942;
                frontier_phi_60_61_ladder_3 = _2938;
                frontier_phi_60_61_ladder_4 = _2936;
                frontier_phi_60_61_ladder_5 = _2934;
            }
            else
            {
                frontier_phi_60_61_ladder = _2819;
                frontier_phi_60_61_ladder_1 = _2823;
                frontier_phi_60_61_ladder_2 = _2821;
                frontier_phi_60_61_ladder_3 = _2817;
                frontier_phi_60_61_ladder_4 = _2815;
                frontier_phi_60_61_ladder_5 = _2813;
            }
            _2933 = frontier_phi_60_61_ladder_5;
            _2935 = frontier_phi_60_61_ladder_4;
            _2937 = frontier_phi_60_61_ladder_3;
            _2939 = frontier_phi_60_61_ladder;
            _2941 = frontier_phi_60_61_ladder_2;
            _2943 = frontier_phi_60_61_ladder_1;
        }
        float _2948 = isnan(1.0) ? _962 : (isnan(_962) ? 1.0 : min(_962, 1.0));
        _2722 = (_2948 * _2939) + _2160;
        _2724 = (_2948 * _2941) + _2162;
        _2726 = (_2948 * _2943) + _2164;
        _2728 = ((_2933 * _856) * _2948) + _2504;
        _2730 = ((_2935 * _857) * _2948) + _2506;
        _2732 = ((_2937 * _858) * _2948) + _2508;
    }
    else
    {
        _2722 = _2160;
        _2724 = _2162;
        _2726 = _2164;
        _2728 = _2504;
        _2730 = _2506;
        _2732 = _2508;
    }
    float _2734 = (((cbMatDynParam._m0[13u].x - _932) * _938) + _932) * _2218;
    float _2735 = (((cbMatDynParam._m0[13u].y - _933) * _938) + _933) * _2219;
    float _2736 = (((cbMatDynParam._m0[13u].z - _934) * _938) + _934) * _2220;
    float _4708 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _4719 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _4730 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2752 = ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2722 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _962))) + ((_2728 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _2753 = ((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2724 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _962))) + ((_2730 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    float _2754 = ((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2726 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _962))) + ((_2732 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1799)) * cbPerFrame._m0[3u].x);
    uint _2755 = _898 + 6u;
    float _2763 = _800 / cbSceneParam._m0[86u].x;
    float _2764 = _801 / cbSceneParam._m0[86u].y;
    vec4 _2778 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, (log2((isnan(cbSceneParam._m0[77u].w) ? _723 : (isnan(_723) ? cbSceneParam._m0[77u].w : min(_723, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2780 = _2778.x;
    float _2781 = _2778.y;
    float _2782 = _2778.z;
    float _2783 = _2778.w;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_723 > cbSceneParam._m0[78u].w)
    {
        float _2838 = isnan(_723) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _723 : min(cbSceneParam._m0[80u].w, _723));
        float _2839 = _2838 / _723;
        float _2850 = _2839 * _773;
        float _2851 = _774 * _2839;
        float _2852 = (-0.0) - _2851;
        float _2853 = _2839 * _775;
        float _2855 = (cbSceneParam._m0[77u].w * _2852) / _2838;
        float _2856 = _2855 + cbSceneParam._m0[79u].w;
        float _2857 = cbSceneParam._m0[79u].w - _2851;
        float _2863 = sqrt(((_2850 * _2850) + (_2851 * _2851)) + (_2853 * _2853));
        float _2866 = (1.0 - (cbSceneParam._m0[77u].w / _2838)) * _2863;
        float _2871 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2873 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3050;
        if (abs((_2852 - _2855) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3050 = ((((_2856 > 0.0) ? exp2(_2871 * _2856) : (2.0 - exp2(_2873 * _2856))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2866;
        }
        else
        {
            float _2994 = 1.0 / cbSceneParam._m0[80u].x;
            float _2995 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : max(_2856, _2857));
            float _2996 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : min(_2856, _2857));
            float _3005 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : min(_2995, 0.0));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            _3050 = ((abs(_2863 / _2852) * cbSceneParam._m0[80u].y) * ((((_3005 - _3006) * 2.0) - ((exp2(_2871 * (isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0)))) - exp2(_2871 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))))) * _2994)) - ((exp2(_2873 * _3005) - exp2(_2873 * _3006)) * _2994))) + (_2866 * cbSceneParam._m0[80u].z);
        }
        vec4 _3052 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, 1.0), 0.0);
        float _3061 = exp2((_3050 * (-1.44269502162933349609375)) * (1.0 - _3052.w));
        float _3062 = log2(_3061);
        float _3078 = log2(_2783);
        _2875 = (exp2(_3078 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].x)) * _3052.x) / cbSceneParam._m0[78u].x)) + _2780;
        _2877 = (exp2(_3078 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].y)) * _3052.y) / cbSceneParam._m0[78u].y)) + _2781;
        _2879 = (exp2(_3078 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].z)) * _3052.z) / cbSceneParam._m0[78u].z)) + _2782;
        _2881 = _3061 * _2783;
    }
    else
    {
        _2875 = _2780;
        _2877 = _2781;
        _2879 = _2782;
        _2881 = _2783;
    }
    bool _3088;
    vec4 _2891;
    vec4 _2913;
    float _2915;
    float _2919;
    float _2920;
    float _2921;
    float _2922;
    bool _2932;
    for (;;)
    {
        _2891 = cbMatDynParam._m0[0u];
        float _2893 = roundEven(_2891.y);
        bool _2894 = _2893 == 3.0;
        float _2895 = log2(_2881);
        float _2902 = exp2(_2895 * cbSceneParam._m0[78u].x) * _2752;
        float _2903 = exp2(_2895 * cbSceneParam._m0[78u].y) * _2753;
        float _2904 = exp2(_2895 * cbSceneParam._m0[78u].z) * _2754;
        float _2911 = _789 + (-0.5);
        _2913 = cbMtdParam._m0[1u];
        _2915 = _2913.y * _2911;
        float _2918 = (_2893 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2919 = _2918 * (_2894 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2875)));
        _2920 = _2918 * (_2894 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2877)));
        _2921 = _2918 * (_2894 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2879)));
        _2922 = _2911 * 0.999000012874603271484375;
        _2932 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2932)
        {
            if ((cbInstanceData._m0[_898 + 7u].x + _2922) < 0.5)
            {
                _3088 = true;
                break;
            }
        }
        uint _3029 = _899 + uint(_2891.w);
        if ((cbInstanceData._m0[_3029].w < 1.0) && ((cbInstanceData._m0[_3029].w + _2922) < 0.5))
        {
            _3088 = true;
            break;
        }
        if ((_2915 + _449) < _2913.x)
        {
            _3088 = true;
            break;
        }
        _3088 = false;
        break;
    }
    float _3293;
    if (_3088)
    {
        discard_state = true;
        _3293 = 0.0;
    }
    else
    {
        _3293 = cbInstanceData._m0[_2755].w;
    }
    SV_Target.x = _2919;
    SV_Target.y = _2920;
    SV_Target.z = _2921;
    SV_Target.w = _3293;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2755].w;
    discard_exit();
}


