#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[24];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1304;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    vec4 _277 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _305 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _336 = _331.x * cbMatDynParam._m0[17u].x;
    float _337 = _331.y * cbMatDynParam._m0[17u].y;
    float _338 = _331.z * cbMatDynParam._m0[17u].z;
    vec4 _357 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _376 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _387 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _389 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (_376.x + 0.00999999977648258209228515625))) * _387;
    float _3654 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _397 = (_390 * ((_357.x * cbMatDynParam._m0[18u].x) - _336)) + _336;
    float _398 = (_390 * ((_357.y * cbMatDynParam._m0[18u].y) - _337)) + _337;
    float _399 = (_390 * ((_357.z * cbMatDynParam._m0[18u].z) - _338)) + _338;
    float _404 = (0.5 - ((cbMatDynParam._m0[22u].z * 0.5) * (_376.y + 0.00999999977648258209228515625))) * _387;
    float _3665 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _412 = (((_305.x * cbMatDynParam._m0[19u].x) - _397) * _405) + _397;
    float _413 = (((_305.y * cbMatDynParam._m0[19u].y) - _398) * _405) + _398;
    float _414 = (((_305.z * cbMatDynParam._m0[19u].z) - _399) * _405) + _399;
    float _419 = (0.5 - ((cbMatDynParam._m0[22u].w * 0.5) * (_376.z + 0.00999999977648258209228515625))) * _387;
    float _3676 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _427 = (((_277.x * cbMatDynParam._m0[20u].x) - _412) * _420) + _412;
    float _428 = (((_277.y * cbMatDynParam._m0[20u].y) - _413) * _420) + _413;
    float _429 = (((_277.z * cbMatDynParam._m0[20u].z) - _414) * _420) + _414;
    vec4 _441 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    vec4 _458 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w));
    float _469 = ((_458.x - _443) * _390) + _443;
    float _470 = ((_458.y - _444) * _390) + _444;
    float _471 = ((_458.z - _445) * _390) + _445;
    vec4 _484 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _495 = ((_484.x - _469) * _405) + _469;
    float _496 = ((_484.y - _470) * _405) + _470;
    float _497 = ((_484.z - _471) * _405) + _471;
    vec4 _509 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _520 = ((_509.x - _495) * _420) + _495;
    float _521 = ((_509.y - _496) * _420) + _496;
    float _522 = ((_509.z - _497) * _420) + _497;
    vec4 _538 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _557 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _576 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _578 = _576.x;
    float _579 = _576.y;
    float _581 = _576.z * cbMatDynParam._m0[22u].x;
    vec4 _595 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _603 = (((_595.z * cbMatDynParam._m0[21u].w) - _581) * _390) + _581;
    float _606 = (((_557.z * cbMatDynParam._m0[21u].z) - _603) * _405) + _603;
    float _609 = (((_538.z * cbMatDynParam._m0[23u].x) - _606) * _420) + _606;
    vec4 _622 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _636 = (_390 * (_595.x - _578)) + _578;
    float _637 = (_390 * (_595.y - _579)) + _579;
    float _642 = ((_557.x - _636) * _405) + _636;
    float _643 = ((_557.y - _637) * _405) + _637;
    float _652 = ((((_538.x - _642) * _420) + _642) * 2.0) + (-1.0);
    float _653 = ((((_538.y - _643) * _420) + _643) * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3687 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))));
    float _663 = _652 + (cbMatDynParam._m0[22u].y * ((_622.x * 2.0) + (-1.0)));
    float _664 = _653 + (cbMatDynParam._m0[22u].y * ((_622.y * 2.0) + (-1.0)));
    float _667 = fma(_659, _245, fma(_664, _237 * TANGENT.x, (_223 * _215) * _663));
    float _670 = fma(_659, _246, fma(_664, _237 * TANGENT.y, (_223 * _216) * _663));
    float _673 = fma(_659, _247, fma(_664, _237 * TANGENT.z, (_223 * _217) * _663));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3698 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3709 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3720 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3731 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _684 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _685 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _686 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _687 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _703 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _753 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _743);
    float _754 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _743);
    float _755 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _743);
    float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
    float _760 = _753 * _759;
    float _761 = _754 * _759;
    float _762 = _755 * _759;
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _771 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _773 = _771.w;
    float _791 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _794 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _797 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    vec4 _799 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _801 = _799.x;
    float _803 = _799.w;
    float _804 = _801 * _801;
    float _824 = (((_804 - _684) + (_803 * _684)) * cbMtdParam._m0[3u].x) + _684;
    float _825 = (((_804 - _685) + (_803 * _685)) * cbMtdParam._m0[3u].x) + _685;
    float _826 = (((_804 - _686) + (_803 * _686)) * cbMtdParam._m0[3u].x) + _686;
    float _827 = (((_799.y - _687) + (_803 * _687)) * cbMtdParam._m0[3u].x) + _687;
    vec4 _828 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _844 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(_824, _825, _826), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _828.z;
    float _853 = (((cbMatDynParam._m0[16u].x - _827) * cbMatDynParam._m0[16u].z) * _844) + _827;
    uint _866 = uint(roundEven(NORMAL.w)) * 13u;
    uint _868 = (_866 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _874 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_868].x;
    float _875 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_868].y;
    float _876 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_868].z;
    float _3775 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    vec4 _886 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _900 = ((((_877 * _773) - _877) + _886.x) * cbMtdParam._m0[3u].x) + _877;
    float _901 = ((((_878 * _773) - _878) + _886.y) * cbMtdParam._m0[3u].x) + _878;
    float _902 = ((((_879 * _773) - _879) + _886.z) * cbMtdParam._m0[3u].x) + _879;
    float _906 = cbMatDynParam._m0[13u].w * _844;
    vec4 _927 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _930 = _927.x * TEXCOORD_8;
    float _931 = dot(vec3(_678, _679, _680), vec3(_760, _761, _762));
    float _934 = _931 * 2.0;
    float _938 = (_934 * _678) - _760;
    float _939 = (_934 * _679) - _761;
    float _940 = (_934 * _680) - _762;
    float _944 = abs(dot(vec3(_760, _761, _762), vec3(_678, _679, _680)));
    float _3808 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _946 = sqrt(_853);
    float _959 = exp2((_946 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_946 * 3.0));
    float _965 = (1.0 - _959) * ((_946 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _966 = _959 * _946;
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1303;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1029 = fma(_1002, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994));
        float _1033 = fma(_1002, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994));
        float _1037 = fma(_1002, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994));
        float _1061 = _994 + _678;
        float _1062 = _998 + _679;
        float _1063 = _1002 + _680;
        float _1073 = fma(_1063, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061)) - _1029;
        float _1074 = fma(_1063, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061)) - _1033;
        float _1075 = fma(_1063, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061)) - _1037;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1029 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1033 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[34u].z) + ((((((_1037 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1131 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1097.x + (-0.5));
        float _1133 = _1131 * (_1097.y + (-0.5));
        float _1134 = _1131 * (_1097.z + (-0.5));
        float _1141 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1104.x + (-0.5));
        float _1143 = _1141 * (_1104.y + (-0.5));
        float _1144 = _1141 * (_1104.z + (-0.5));
        float _1151 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1111.x + (-0.5));
        float _1153 = _1151 * (_1111.y + (-0.5));
        float _1154 = _1151 * (_1111.z + (-0.5));
        float _1161 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1118.x + (-0.5));
        float _1163 = _1161 * (_1118.y + (-0.5));
        float _1164 = _1161 * (_1118.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1185 = (dot(vec3(_678, _679, _680), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1195 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3856 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1197 + 1.0))) + _1202) * _1165;
        float _1212 = _1133 * 0.5;
        float _1213 = _1143 * 0.5;
        float _1214 = _1153 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_678, _679, _680), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3889 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1239 + 1.0))) + _1244) * _1166;
        float _1254 = _1134 * 0.5;
        float _1255 = _1144 * 0.5;
        float _1256 = _1154 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_678, _679, _680), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3922 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1281 + 1.0))) + _1286) * _1167;
        _1303 = _1134;
        _1305 = _1133;
        _1306 = _1132;
        _1307 = _1144;
        _1308 = _1143;
        _1309 = _1142;
        _1310 = _1154;
        _1311 = _1153;
        _1312 = _1152;
        _1313 = _1167;
        _1314 = _1166;
        _1315 = _1165;
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _1304;
        _1305 = _1304;
        _1306 = _1304;
        _1307 = _1304;
        _1308 = _1304;
        _1309 = _1304;
        _1310 = _1304;
        _1311 = _1304;
        _1312 = _1304;
        _1313 = _1304;
        _1314 = _1304;
        _1315 = _1304;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1344 = fma(_1002, cbModelParam._m0[30u].z, fma(_998, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994));
        float _1348 = fma(_1002, cbModelParam._m0[31u].z, fma(_998, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994));
        float _1352 = fma(_1002, cbModelParam._m0[32u].z, fma(_998, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994));
        float _1375 = _994 + _678;
        float _1376 = _998 + _679;
        float _1377 = _1002 + _680;
        float _1387 = fma(_1377, cbModelParam._m0[30u].z, fma(_1376, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1375)) - _1344;
        float _1388 = fma(_1377, cbModelParam._m0[31u].z, fma(_1376, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1375)) - _1348;
        float _1389 = fma(_1377, cbModelParam._m0[32u].z, fma(_1376, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1375)) - _1352;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1344 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1348 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[35u].z) + ((((((_1352 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1443 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1410.x + (-0.5));
        float _1445 = _1443 * (_1410.y + (-0.5));
        float _1446 = _1443 * (_1410.z + (-0.5));
        float _1453 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1417.x + (-0.5));
        float _1455 = _1453 * (_1417.y + (-0.5));
        float _1456 = _1453 * (_1417.z + (-0.5));
        float _1463 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1424.x + (-0.5));
        float _1465 = _1463 * (_1424.y + (-0.5));
        float _1466 = _1463 * (_1424.z + (-0.5));
        float _1473 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1431.x + (-0.5));
        float _1475 = _1473 * (_1431.y + (-0.5));
        float _1476 = _1473 * (_1431.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_678, _679, _680), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _3985 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1507 + 1.0))) + _1512) * _1477;
        float _1522 = _1445 * 0.5;
        float _1523 = _1455 * 0.5;
        float _1524 = _1465 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_678, _679, _680), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4018 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1549 + 1.0))) + _1554) * _1478;
        float _1564 = _1446 * 0.5;
        float _1565 = _1456 * 0.5;
        float _1566 = _1466 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_678, _679, _680), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4051 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1591 + 1.0))) + _1596) * _1479;
        _1613 = _1446;
        _1614 = _1445;
        _1615 = _1444;
        _1616 = _1456;
        _1617 = _1455;
        _1618 = _1454;
        _1619 = _1466;
        _1620 = _1465;
        _1621 = _1464;
        _1622 = _1479;
        _1623 = _1478;
        _1624 = _1477;
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1304;
        _1614 = _1304;
        _1615 = _1304;
        _1616 = _1304;
        _1617 = _1304;
        _1618 = _1304;
        _1619 = _1304;
        _1620 = _1304;
        _1621 = _1304;
        _1622 = _1304;
        _1623 = _1304;
        _1624 = _1304;
        _1625 = 0.0;
        _1626 = 0.0;
        _1627 = 0.0;
    }
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1316)) + _1316;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1317)) + _1317;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1318)) + _1318;
    float _1660 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1637));
    float _1681 = _938 * 0.5;
    float _1682 = _939 * 0.5;
    float _1683 = _940 * 0.5;
    float _1684 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1687 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1690 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1721;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1697 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1303, _1307, _1310, _1313));
        float _1701 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1705 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1712 = dot(vec4(cbModelParam._m0[39u]), vec4(_1681, _1682, _1683, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1732;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1723 = dot(vec4(cbModelParam._m0[40u]), vec4(_1681, _1682, _1683, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1736 = (_1732 * cbModelParam._m0[1u].x) + (_1721 * (1.0 - cbModelParam._m0[1u].x));
    float _1746 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _853);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1746 : min(cbModelParam._m0[25u].z, _1746));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1795 = fma(_1002, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994)) + cbModelParam._m0[13u].w;
        float _1799 = fma(_1002, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994)) + cbModelParam._m0[14u].w;
        float _1803 = fma(_1002, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994)) + cbModelParam._m0[15u].w;
        float _1806 = fma(_940, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938));
        float _1809 = fma(_940, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938));
        float _1812 = fma(_940, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938));
        float _1840;
        if (_1806 > 0.0)
        {
            _1840 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1840 = frontier_phi_16_14_ladder;
        }
        float _2063;
        if (_1809 > 0.0)
        {
            _2063 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2063 = frontier_phi_25_21_ladder;
        }
        float _2319;
        if (_1812 > 0.0)
        {
            _2319 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2319 = frontier_phi_37_32_ladder;
        }
        float _2321 = isnan(_2063) ? _1840 : (isnan(_1840) ? _2063 : min(_1840, _2063));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1806) + _1795;
        float _2327 = (_2322 * _1809) + _1799;
        float _2328 = (_2322 * _1812) + _1803;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2329;
        float _2333 = _2329 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 > _2333) || ((_2327 < _2331) || ((_2326 < _2331) || (_2326 > _2333))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2328, cbModelParam._m0[9u].z, fma(_2327, cbModelParam._m0[9u].y, _2326 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2328, cbModelParam._m0[10u].z, fma(_2327, cbModelParam._m0[10u].y, _2326 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2328, cbModelParam._m0[11u].z, fma(_2327, cbModelParam._m0[11u].y, _2326 * cbModelParam._m0[11u].x))), _1747);
            frontier_phi_15_37_ladder = _2456.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2456.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2456.x * cbModelParam._m0[1u].y;
        }
        _1828 = frontier_phi_15_37_ladder_2;
        _1830 = frontier_phi_15_37_ladder_1;
        _1832 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_938, _939, _940), _1747);
        _1828 = _1816.x * cbModelParam._m0[1u].y;
        _1830 = _1816.y * cbModelParam._m0[1u].y;
        _1832 = _1816.z * cbModelParam._m0[1u].y;
    }
    float _1836 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _853);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1836 : min(cbModelParam._m0[25u].w, _1836));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1890 = fma(_1002, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994)) + cbModelParam._m0[21u].w;
        float _1894 = fma(_1002, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994)) + cbModelParam._m0[22u].w;
        float _1898 = fma(_1002, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994)) + cbModelParam._m0[23u].w;
        float _1901 = fma(_940, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938));
        float _1904 = fma(_940, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938));
        float _1907 = fma(_940, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938));
        float _2068;
        if (_1901 > 0.0)
        {
            _2068 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2068 = frontier_phi_27_23_ladder;
        }
        float _2346;
        if (_1904 > 0.0)
        {
            _2346 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2346 = frontier_phi_39_34_ladder;
        }
        float _2559;
        if (_1907 > 0.0)
        {
            _2559 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2559 = frontier_phi_48_45_ladder;
        }
        float _2561 = isnan(_2346) ? _2068 : (isnan(_2068) ? _2346 : min(_2068, _2346));
        float _2562 = isnan(_2559) ? _2561 : (isnan(_2561) ? _2559 : min(_2561, _2559));
        float _2566 = (_2562 * _1901) + _1890;
        float _2567 = (_2562 * _1904) + _1894;
        float _2568 = (_2562 * _1907) + _1898;
        float _2569 = _2562 * 9.9999997473787516355514526367188e-05;
        float _2570 = (-1.0) - _2569;
        float _2572 = _2569 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2568 > _2572) || ((_2568 < _2570) || ((_2567 > _2572) || ((_2567 < _2570) || ((_2566 < _2570) || (_2566 > _2572))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2568, cbModelParam._m0[17u].z, fma(_2567, cbModelParam._m0[17u].y, _2566 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2568, cbModelParam._m0[18u].z, fma(_2567, cbModelParam._m0[18u].y, _2566 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2568, cbModelParam._m0[19u].z, fma(_2567, cbModelParam._m0[19u].y, _2566 * cbModelParam._m0[19u].x))), _1837);
            frontier_phi_24_48_ladder = _2769.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2769.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2769.x * cbModelParam._m0[1u].z;
        }
        _1926 = frontier_phi_24_48_ladder_2;
        _1928 = frontier_phi_24_48_ladder_1;
        _1930 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_938, _939, _940), _1837);
        _1926 = _1910.x * cbModelParam._m0[1u].z;
        _1928 = _1910.y * cbModelParam._m0[1u].z;
        _1930 = _1910.z * cbModelParam._m0[1u].z;
    }
    float _1943 = (((_965 * _824) + _966) * _930) * ((cbModelParam._m0[1u].w * (_1926 - _1828)) + _1828);
    float _1945 = (((_965 * _825) + _966) * _930) * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1947 = (((_965 * _826) + _966) * _930) * ((cbModelParam._m0[1u].w * (_1930 - _1832)) + _1832);
    float _1950 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1945, cbSceneParam._m0[89u].y, _1943 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1945, cbSceneParam._m0[90u].y, _1943 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1945, cbSceneParam._m0[91u].y, _1943 * cbSceneParam._m0[91u].x));
    vec4 _1964 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_768, _769));
    float _1966 = _1964.w;
    float _1978 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1966);
    float _1979 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1966);
    float _1980 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1966);
    uvec4 _1984 = floatBitsToUint(cbInstanceData._m0[_866 + 5u]);
    uint _1986 = _1984.x * 14u;
    uint _1987 = _1986 + 13u;
    float _1994 = _930 + (-1.0);
    float _1999 = (cbLight._m0[_1987].x * _1994) + 1.0;
    float _2000 = (cbLight._m0[_1987].y * _1994) + 1.0;
    float _2001 = (cbLight._m0[_1987].z * _1994) + 1.0;
    float _2002 = (cbLight._m0[_1987].w * _1994) + 1.0;
    uint _2003 = _1986 + 5u;
    float _2009 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2013 = _1986 + 4u;
    float _2022 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    uint _2026 = _1986 | 1u;
    float _2037 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_678, _679, _680));
    float _2040 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_678, _679, _680));
    float _4187 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _4198 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2045 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _2047 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _2054 = ((cbLight._m0[_2003].x * _2009) * _2047) + (((cbLight._m0[_2013].x * _1978) * _2022) * _2045);
    float _2055 = ((_2009 * cbLight._m0[_2003].y) * _2047) + (((cbLight._m0[_2013].y * _1979) * _2022) * _2045);
    float _2056 = ((_2009 * cbLight._m0[_2003].z) * _2047) + (((cbLight._m0[_2013].z * _1980) * _2022) * _2045);
    uvec4 _2060 = floatBitsToUint(cbLight._m0[_1986 + 12u]);
    bool _2062 = _2060.x == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2062)
    {
        _2073 = _2054;
        _2075 = _2055;
        _2077 = _2056;
    }
    else
    {
        uint _2081 = _1986 + 6u;
        float _2097 = (dot(vec3(cbLight._m0[_1986 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _4209 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2100 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2073 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _2054;
        _2075 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _2055;
        _2077 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _2056;
    }
    bool _2080 = _2060.y == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2080)
    {
        _2118 = _2073;
        _2120 = _2075;
        _2122 = _2077;
    }
    else
    {
        uint _2290 = _1986 + 7u;
        float _2306 = (dot(vec3(cbLight._m0[_1986 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4225 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2309 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2118 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2073;
        _2120 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2075;
        _2122 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2077;
    }
    uint _2125 = _1986 + 8u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _853) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_1986].x + _760;
    float _2141 = cbLight._m0[_1986].y + _761;
    float _2142 = cbLight._m0[_1986].z + _762;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1986].xyz));
    float _4241 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _2154 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2155 = dot(vec3(_678, _679, _680), vec3(_2147, _2148, _2149));
    float _4263 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2159 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2147, _2148, _2149));
    float _4274 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = _2139 * _2139;
    float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
    float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0);
    float _2176 = 1.0 - _824;
    float _2177 = 1.0 - _825;
    float _2178 = 1.0 - _826;
    float _2185 = 1.0 - _2139;
    float _2196 = (0.5 / (((_2154 * ((_2153 * _2185) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2185) + _2139) * _2153))) * _2153;
    float _4285 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
    uint _2212 = _1986 + 9u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _853) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2026].x + _760;
    float _2226 = cbLight._m0[_2026].y + _761;
    float _2227 = cbLight._m0[_2026].z + _762;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2026].xyz));
    float _4296 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2239 = dot(vec3(_678, _679, _680), vec3(_2232, _2233, _2234));
    float _4307 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2232, _2233, _2234));
    float _4318 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2224 * _2224;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2258 = exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0);
    float _2265 = 1.0 - _2224;
    float _2275 = (0.5 / (((_2154 * ((_2238 * _2265) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2265) + _2224) * _2238))) * _2238;
    float _4329 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    float _2287 = (((((_2258 * _2176) + _824) * cbLight._m0[_2212].x) * _2277) * _2009) + ((((cbLight._m0[_2125].x * _1978) * ((_2175 * _2176) + _824)) * _2198) * _2022);
    float _2288 = (((((_2258 * _2177) + _825) * cbLight._m0[_2212].y) * _2277) * _2009) + ((((cbLight._m0[_2125].y * _1979) * ((_2175 * _2177) + _825)) * _2198) * _2022);
    float _2289 = (((((_2258 * _2178) + _826) * cbLight._m0[_2212].z) * _2277) * _2009) + ((((cbLight._m0[_2125].z * _1980) * ((_2175 * _2178) + _826)) * _2198) * _2022);
    float _2351;
    float _2353;
    float _2355;
    if (_2062)
    {
        _2351 = _2287;
        _2353 = _2288;
        _2355 = _2289;
    }
    else
    {
        uint _2357 = _1986 + 2u;
        uint _2361 = _1986 + 10u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _853) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _760;
        float _2378 = cbLight._m0[_2357].y + _761;
        float _2379 = cbLight._m0[_2357].z + _762;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2357].xyz));
        float _4340 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2391 = dot(vec3(_678, _679, _680), vec3(_2384, _2385, _2386));
        float _4351 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4362 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0);
        float _2417 = 1.0 - _2376;
        float _2427 = (0.5 / (((_2154 * ((_2390 * _2417) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2417) + _2376) * _2390))) * _2390;
        float _4373 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2429 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2430 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2351 = (((((_2410 * _2176) + _824) * cbLight._m0[_2361].x) * _2429) * _2430) + _2287;
        _2353 = (((((_2410 * _2177) + _825) * cbLight._m0[_2361].y) * _2429) * _2430) + _2288;
        _2355 = (((((_2410 * _2178) + _826) * cbLight._m0[_2361].z) * _2429) * _2430) + _2289;
    }
    float _2465;
    float _2467;
    float _2469;
    if (_2080)
    {
        _2465 = _2351;
        _2467 = _2353;
        _2469 = _2355;
    }
    else
    {
        uint _2476 = _1986 + 3u;
        uint _2480 = _1986 + 11u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _853) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _760;
        float _2497 = cbLight._m0[_2476].y + _761;
        float _2498 = cbLight._m0[_2476].z + _762;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2476].xyz));
        float _4389 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2510 = dot(vec3(_678, _679, _680), vec3(_2503, _2504, _2505));
        float _4400 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4411 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2529 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2536 = 1.0 - _2495;
        float _2546 = (0.5 / (((_2154 * ((_2509 * _2536) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2536) + _2495) * _2509))) * _2509;
        float _4422 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2548 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2549 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2465 = (((((_2529 * _2176) + _824) * cbLight._m0[_2480].x) * _2548) * _2549) + _2351;
        _2467 = (((((_2529 * _2177) + _825) * cbLight._m0[_2480].y) * _2548) * _2549) + _2353;
        _2469 = (((((_2529 * _2178) + _826) * cbLight._m0[_2480].z) * _2548) * _2549) + _2355;
    }
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_1984.y == 0u)
    {
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2624;
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2624;
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2624;
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.x;
        uint _2651 = uint((float(_2639.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2640))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2640)));
        float _2661 = (log2(_2627 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2662 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        uint _2665 = uint(isnan(14.0) ? _2662 : (isnan(_2662) ? 14.0 : min(_2662, 14.0)));
        uvec4 _2670 = texelFetch(g_lightClusterGridBuffer, int(((_2665 << 2u) + (_2651 << 6u)) >> 2u));
        uint _2671 = _2670.x;
        uint _2672 = _2639.z;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((((1u << ((_2672 >> 4u) & 15u)) + 4294967295u) & _2671) == 0u) || ((_2672 & 240u) == 0u))
        {
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
        }
        else
        {
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            uint _2924 = 0u;
            uint _2933;
            bool _2934;
            for (;;)
            {
                _2933 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                _2934 = _2933 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2934)
                {
                    frontier_phi_63_pred = _2923;
                    frontier_phi_63_pred_1 = _2922;
                    frontier_phi_63_pred_2 = _2921;
                    frontier_phi_63_pred_3 = _2920;
                    frontier_phi_63_pred_4 = _2919;
                    frontier_phi_63_pred_5 = _2918;
                }
                else
                {
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    uint _3048;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2920;
                    _3045 = _2921;
                    _3046 = _2922;
                    _3047 = _2923;
                    _3048 = _2933;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    for (;;)
                    {
                        uint _3052 = uint(findLSB(_3048)) + (_2924 << 5u);
                        uint _3049 = (_3048 + 4294967295u) & _3048;
                        uint _3054 = _3052 * 48u;
                        vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 3u)).x));
                        uint _3074 = (_3052 * 48u) + 4u;
                        vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3093 = (_3052 * 48u) + 8u;
                        vec3 _3104 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x));
                        float _3108 = _3068.x - _2625;
                        float _3109 = _3068.y - _2626;
                        float _3110 = _3068.z - _2627;
                        float _3111 = dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110));
                        float _3114 = inversesqrt(_3111);
                        float _3115 = _3114 * _3108;
                        float _3116 = _3114 * _3109;
                        float _3117 = _3114 * _3110;
                        float _3118 = dot(vec3(_791, _794, _797), vec3(_3115, _3116, _3117));
                        float _3123 = 1.0 - (_3111 * _3068.w);
                        float _4448 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3124 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3125 = sqrt(_3111) * _3087.w;
                        float _3128 = 1.39999997615814208984375 / (_3125 + 1.39999997615814208984375);
                        float _3129 = _3128 * _3128;
                        float _3132 = ((1.0 - _3129) * _3118) + _3129;
                        float _3135 = _3125 * _3125;
                        float _3139 = ((isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))) * _3124) / ((_3135 * 0.699999988079071044921875) + 1.0);
                        float _3143 = (-0.0) - _2625;
                        float _3144 = (-0.0) - _2626;
                        float _3145 = (-0.0) - _2627;
                        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3160 = exp2(log2(1.0 / ((_3135 * 3.5) + 5.0)) * 0.25);
                        float _3161 = 1.0 - _946;
                        float _3168 = sqrt(1.0 - ((1.0 - (_3161 * _3161)) * (1.0 - (_3160 * _3160))));
                        float _3169 = _3168 * _3168;
                        float _3170 = _3169 * _3169;
                        float _3171 = _3150 + _3115;
                        float _3172 = _3151 + _3116;
                        float _3173 = _3152 + _3117;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3181 = dot(vec3(_791, _794, _797), vec3(_3150, _3151, _3152));
                        float _4464 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3185 = dot(vec3(_791, _794, _797), vec3(_3177 * _3171, _3177 * _3172, _3177 * _3173));
                        float _4475 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3188 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3192 = ((_3188 * _3188) * (_3170 + (-1.0))) + 1.0;
                        float _3193 = _3128 * _3169;
                        float _3194 = _3193 * _3193;
                        float _3197 = ((1.0 - _3194) * _3118) + _3194;
                        float _4486 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3198 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3199 = 1.0 - _3169;
                        float _3209 = (0.5 / (((_3198 * ((_3184 * _3199) + _3169)) + 9.9999999392252902907785028219223e-09) + (((_3198 * _3199) + _3169) * _3184))) * _3198;
                        float _4497 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3220 = (((_3170 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3192 * _3192) * ((_3135 * 2.1991131305694580078125) + 3.141590118408203125))) * _3124;
                        _2977 = (_3139 * _3087.x) + _3045;
                        _2978 = (_3139 * _3087.y) + _3046;
                        _2979 = (_3139 * _3087.z) + _3047;
                        _2974 = (_3220 * _3104.x) + _3042;
                        _2975 = (_3220 * _3104.y) + _3043;
                        _2976 = (_3220 * _3104.z) + _3044;
                        if (_3049 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _2976;
                            _3045 = _2977;
                            _3046 = _2978;
                            _3047 = _2979;
                            _3048 = _3049;
                        }
                    }
                    frontier_phi_63_pred = _2979;
                    frontier_phi_63_pred_1 = _2978;
                    frontier_phi_63_pred_2 = _2977;
                    frontier_phi_63_pred_3 = _2976;
                    frontier_phi_63_pred_4 = _2975;
                    frontier_phi_63_pred_5 = _2974;
                }
                _2785 = frontier_phi_63_pred;
                _2783 = frontier_phi_63_pred_1;
                _2781 = frontier_phi_63_pred_2;
                _2779 = frontier_phi_63_pred_3;
                _2777 = frontier_phi_63_pred_4;
                _2775 = frontier_phi_63_pred_5;
                uint _2925 = _2924 + 1u;
                if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2918 = _2775;
                    _2919 = _2777;
                    _2920 = _2779;
                    _2921 = _2781;
                    _2922 = _2783;
                    _2923 = _2785;
                    _2924 = _2925;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
        }
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.z;
        uint _2791 = (_2789 >> 8u) & 15u;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((4294967295u << _2791) & _2671) == 0u)
        {
            _2886 = _2774;
            _2888 = _2776;
            _2890 = _2778;
            _2892 = _2780;
            _2894 = _2782;
            _2896 = _2784;
        }
        else
        {
            float _2911 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
            float _2912 = _2911 * _2625;
            float _2913 = _2911 * _2626;
            float _2914 = _2911 * _2627;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2791 < ((_2789 >> 12u) & 15u))
            {
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _3025 = _2774;
                float _3026 = _2776;
                float _3027 = _2778;
                float _3028 = _2780;
                float _3029 = _2782;
                float _3030 = _2784;
                uint _3031 = _2791;
                uint _3040;
                bool _3041;
                for (;;)
                {
                    _3040 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                    _3041 = _3040 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3041)
                    {
                        frontier_phi_69_pred = _3030;
                        frontier_phi_69_pred_1 = _3029;
                        frontier_phi_69_pred_2 = _3028;
                        frontier_phi_69_pred_3 = _3027;
                        frontier_phi_69_pred_4 = _3026;
                        frontier_phi_69_pred_5 = _3025;
                    }
                    else
                    {
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3238 = _3025;
                        float _3239 = _3026;
                        float _3240 = _3027;
                        float _3241 = _3028;
                        float _3242 = _3029;
                        float _3243 = _3030;
                        uint _3244 = _3040;
                        uint _3245;
                        vec4 _3270;
                        float _3271;
                        vec4 _3286;
                        vec3 _3298;
                        vec4 _3313;
                        vec4 _3328;
                        float _3374;
                        bool _3375;
                        for (;;)
                        {
                            uint _3255 = ((_3031 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3244));
                            _3245 = (_3244 + 4294967295u) & _3244;
                            uint _3257 = _3255 * 40u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3271 = _3270.w;
                            uint _3273 = (_3255 * 40u) + 4u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3255 * 40u) + 8u;
                            _3298 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x));
                            uint _3300 = (_3255 * 40u) + 16u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3255 * 40u) + 20u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3255 * 40u) + 24u;
                            vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3349 = (_3255 * 40u) + 28u;
                            vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3374 = fma(_2627, _3362.z, fma(_2626, _3362.y, _3362.x * _2625)) + _3362.w;
                            _3375 = !((fma(_2627, _3343.z, fma(_2626, _3343.y, _3343.x * _2625)) + _3343.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3375)
                            {
                                float _3402 = _3270.x - _2625;
                                float _3403 = _3270.y - _2626;
                                float _3404 = _3270.z - _2627;
                                float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                                float _3408 = inversesqrt(_3405);
                                float _3409 = _3408 * _3402;
                                float _3410 = _3408 * _3403;
                                float _3411 = _3408 * _3404;
                                float _3415 = 1.0 - (_3405 / (_3271 * _3271));
                                float _4508 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3420 = sqrt(_3405) * _3286.w;
                                float _3422 = 1.39999997615814208984375 / (_3420 + 1.39999997615814208984375);
                                float _3423 = _3422 * _3422;
                                float _3426 = ((1.0 - _3423) * dot(vec3(_3409, _3410, _3411), vec3(_791, _794, _797))) + _3423;
                                float _3429 = _3420 * _3420;
                                float _3433 = (fma(_2627, _3313.z, fma(_2626, _3313.y, _3313.x * _2625)) + _3313.w) / _3374;
                                float _3434 = (fma(_2627, _3328.z, fma(_2626, _3328.y, _3328.x * _2625)) + _3328.w) / _3374;
                                float _3438 = 1.0 - dot(vec2(_3433, _3434), vec2(_3433, _3434));
                                float _4524 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3440 = _3439 * (((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3416) / ((_3429 * 0.699999988079071044921875) + 1.0));
                                float _3452 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                                float _3453 = 1.0 - _946;
                                float _3460 = sqrt(1.0 - ((1.0 - (_3453 * _3453)) * (1.0 - (_3452 * _3452))));
                                float _3461 = _3460 * _3460;
                                float _3462 = _3461 * _3461;
                                float _3463 = _3409 - _2912;
                                float _3464 = _3410 - _2913;
                                float _3465 = _3411 - _2914;
                                float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                                float _3473 = dot(vec3(_791, _794, _797), vec3((-0.0) - _2912, (-0.0) - _2913, (-0.0) - _2914));
                                float _4535 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3476 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3477 = dot(vec3(_791, _794, _797), vec3(_3469 * _3463, _3469 * _3464, _3469 * _3465));
                                float _4546 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3480 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3484 = ((_3480 * _3480) * (_3462 + (-1.0))) + 1.0;
                                float _3485 = _3422 * _3461;
                                float _3486 = _3485 * _3485;
                                float _3492 = ((1.0 - _3486) * dot(vec3(_791, _794, _797), vec3(_3409, _3410, _3411))) + _3486;
                                float _4557 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3494 = 1.0 - _3461;
                                float _3504 = (0.5 / (((_3493 * ((_3476 * _3494) + _3461)) + 9.9999999392252902907785028219223e-09) + (((_3493 * _3494) + _3461) * _3476))) * _3493;
                                float _4568 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3514 = (_3439 * _3416) * (((_3462 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3484 * _3484) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3440 * _3286.z;
                                frontier_phi_75_pred_1 = _3440 * _3286.y;
                                frontier_phi_75_pred_2 = _3440 * _3286.x;
                                frontier_phi_75_pred_3 = _3514 * _3298.z;
                                frontier_phi_75_pred_4 = _3514 * _3298.y;
                                frontier_phi_75_pred_5 = _3514 * _3298.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3523 = frontier_phi_75_pred;
                            _3522 = frontier_phi_75_pred_1;
                            _3521 = frontier_phi_75_pred_2;
                            _3520 = frontier_phi_75_pred_3;
                            _3519 = frontier_phi_75_pred_4;
                            _3518 = frontier_phi_75_pred_5;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            _3225 = _3518 + _3238;
                            _3226 = _3519 + _3239;
                            _3227 = _3520 + _3240;
                            if (_3245 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3245;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3230;
                        frontier_phi_69_pred_1 = _3229;
                        frontier_phi_69_pred_2 = _3228;
                        frontier_phi_69_pred_3 = _3227;
                        frontier_phi_69_pred_4 = _3226;
                        frontier_phi_69_pred_5 = _3225;
                    }
                    _2897 = frontier_phi_69_pred;
                    _2895 = frontier_phi_69_pred_1;
                    _2893 = frontier_phi_69_pred_2;
                    _2891 = frontier_phi_69_pred_3;
                    _2889 = frontier_phi_69_pred_4;
                    _2887 = frontier_phi_69_pred_5;
                    uint _3032 = _3031 + 1u;
                    if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3025 = _2887;
                        _3026 = _2889;
                        _3027 = _2891;
                        _3028 = _2893;
                        _3029 = _2895;
                        _3030 = _2897;
                        _3031 = _3032;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2897;
                frontier_phi_57_58_ladder_1 = _2895;
                frontier_phi_57_58_ladder_2 = _2893;
                frontier_phi_57_58_ladder_3 = _2891;
                frontier_phi_57_58_ladder_4 = _2889;
                frontier_phi_57_58_ladder_5 = _2887;
            }
            else
            {
                frontier_phi_57_58_ladder = _2784;
                frontier_phi_57_58_ladder_1 = _2782;
                frontier_phi_57_58_ladder_2 = _2780;
                frontier_phi_57_58_ladder_3 = _2778;
                frontier_phi_57_58_ladder_4 = _2776;
                frontier_phi_57_58_ladder_5 = _2774;
            }
            _2886 = frontier_phi_57_58_ladder_5;
            _2888 = frontier_phi_57_58_ladder_4;
            _2890 = frontier_phi_57_58_ladder_3;
            _2892 = frontier_phi_57_58_ladder_2;
            _2894 = frontier_phi_57_58_ladder_1;
            _2896 = frontier_phi_57_58_ladder;
        }
        float _2901 = isnan(1.0) ? _930 : (isnan(_930) ? 1.0 : min(_930, 1.0));
        _2683 = (_2901 * _2892) + _2118;
        _2685 = (_2901 * _2894) + _2120;
        _2687 = (_2901 * _2896) + _2122;
        _2689 = ((_2886 * _824) * _2901) + _2465;
        _2691 = ((_2888 * _825) * _2901) + _2467;
        _2693 = ((_2890 * _826) * _2901) + _2469;
    }
    else
    {
        _2683 = _2118;
        _2685 = _2120;
        _2687 = _2122;
        _2689 = _2465;
        _2691 = _2467;
        _2693 = _2469;
    }
    float _2695 = (((cbMatDynParam._m0[13u].x - _900) * _906) + _900) * _2176;
    float _2696 = (((cbMatDynParam._m0[13u].y - _901) * _906) + _901) * _2177;
    float _2697 = (((cbMatDynParam._m0[13u].z - _902) * _906) + _902) * _2178;
    float _4584 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _4595 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _4606 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    uint _2716 = _866 + 6u;
    float _2724 = _768 / cbSceneParam._m0[86u].x;
    float _2725 = _769 / cbSceneParam._m0[86u].y;
    vec4 _2739 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, (log2((isnan(cbSceneParam._m0[77u].w) ? _703 : (isnan(_703) ? cbSceneParam._m0[77u].w : min(_703, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2741 = _2739.x;
    float _2742 = _2739.y;
    float _2743 = _2739.z;
    float _2744 = _2739.w;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_703 > cbSceneParam._m0[78u].w)
    {
        float _2799 = isnan(_703) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _703 : min(cbSceneParam._m0[80u].w, _703));
        float _2800 = _2799 / _703;
        float _2811 = _2800 * _753;
        float _2812 = _754 * _2800;
        float _2813 = (-0.0) - _2812;
        float _2814 = _2800 * _755;
        float _2816 = (cbSceneParam._m0[77u].w * _2813) / _2799;
        float _2817 = _2816 + cbSceneParam._m0[79u].w;
        float _2818 = cbSceneParam._m0[79u].w - _2812;
        float _2824 = sqrt(((_2811 * _2811) + (_2812 * _2812)) + (_2814 * _2814));
        float _2827 = (1.0 - (cbSceneParam._m0[77u].w / _2799)) * _2824;
        float _2832 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2834 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2987;
        if (abs((_2813 - _2816) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2987 = ((((_2817 > 0.0) ? exp2(_2832 * _2817) : (2.0 - exp2(_2834 * _2817))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2827;
        }
        else
        {
            float _2947 = 1.0 / cbSceneParam._m0[80u].x;
            float _2948 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : max(_2817, _2818));
            float _2949 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : min(_2817, _2818));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            float _2959 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : min(_2949, 0.0));
            _2987 = ((abs(_2824 / _2813) * cbSceneParam._m0[80u].y) * ((((_2958 - _2959) * 2.0) - ((exp2(_2832 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0)))) - exp2(_2832 * (isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))))) * _2947)) - ((exp2(_2834 * _2958) - exp2(_2834 * _2959)) * _2947))) + (_2827 * cbSceneParam._m0[80u].z);
        }
        vec4 _2989 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2724, _2725, 1.0), 0.0);
        float _2998 = exp2((_2987 * (-1.44269502162933349609375)) * (1.0 - _2989.w));
        float _2999 = log2(_2998);
        float _3015 = log2(_2744);
        _2836 = (exp2(_3015 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].x)) * _2989.x) / cbSceneParam._m0[78u].x)) + _2741;
        _2838 = (exp2(_3015 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].y)) * _2989.y) / cbSceneParam._m0[78u].y)) + _2742;
        _2840 = (exp2(_3015 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].z)) * _2989.z) / cbSceneParam._m0[78u].z)) + _2743;
        _2842 = _2998 * _2744;
    }
    else
    {
        _2836 = _2741;
        _2838 = _2742;
        _2840 = _2743;
        _2842 = _2744;
    }
    float _2854 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2855 = _2854 == 3.0;
    float _2856 = log2(_2842);
    float _2863 = exp2(_2856 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2683 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _930))) + ((_2689 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1736)) * cbPerFrame._m0[3u].x));
    float _2864 = exp2(_2856 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2685 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _930))) + ((_2691 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1736)) * cbPerFrame._m0[3u].x));
    float _2865 = exp2(_2856 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2687 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _930))) + ((_2693 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1736)) * cbPerFrame._m0[3u].x));
    float _2874 = (_2854 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2874 * (_2855 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.y = _2874 * (_2855 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2838)));
    SV_Target.z = _2874 * (_2855 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2840)));
    SV_Target.w = cbInstanceData._m0[_2716].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2716].w;
}


