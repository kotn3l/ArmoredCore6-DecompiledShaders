#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[24];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1302;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    vec4 _275 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _303 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = _329.x * cbMatDynParam._m0[17u].x;
    float _335 = _329.y * cbMatDynParam._m0[17u].y;
    float _336 = _329.z * cbMatDynParam._m0[17u].z;
    vec4 _355 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _374 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _385 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _387 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (_374.x + 0.00999999977648258209228515625))) * _385;
    float _3711 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _395 = (_388 * ((_355.x * cbMatDynParam._m0[18u].x) - _334)) + _334;
    float _396 = (_388 * ((_355.y * cbMatDynParam._m0[18u].y) - _335)) + _335;
    float _397 = (_388 * ((_355.z * cbMatDynParam._m0[18u].z) - _336)) + _336;
    float _402 = (0.5 - ((cbMatDynParam._m0[22u].z * 0.5) * (_374.y + 0.00999999977648258209228515625))) * _385;
    float _3722 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _410 = (((_303.x * cbMatDynParam._m0[19u].x) - _395) * _403) + _395;
    float _411 = (((_303.y * cbMatDynParam._m0[19u].y) - _396) * _403) + _396;
    float _412 = (((_303.z * cbMatDynParam._m0[19u].z) - _397) * _403) + _397;
    float _417 = (0.5 - ((cbMatDynParam._m0[22u].w * 0.5) * (_374.z + 0.00999999977648258209228515625))) * _385;
    float _3733 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _425 = (((_275.x * cbMatDynParam._m0[20u].x) - _410) * _418) + _410;
    float _426 = (((_275.y * cbMatDynParam._m0[20u].y) - _411) * _418) + _411;
    float _427 = (((_275.z * cbMatDynParam._m0[20u].z) - _412) * _418) + _412;
    vec4 _439 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    vec4 _456 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w));
    float _467 = ((_456.x - _441) * _388) + _441;
    float _468 = ((_456.y - _442) * _388) + _442;
    float _469 = ((_456.z - _443) * _388) + _443;
    vec4 _482 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _493 = ((_482.x - _467) * _403) + _467;
    float _494 = ((_482.y - _468) * _403) + _468;
    float _495 = ((_482.z - _469) * _403) + _469;
    vec4 _507 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _518 = ((_507.x - _493) * _418) + _493;
    float _519 = ((_507.y - _494) * _418) + _494;
    float _520 = ((_507.z - _495) * _418) + _495;
    vec4 _536 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _555 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _574 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _576 = _574.x;
    float _577 = _574.y;
    float _579 = _574.z * cbMatDynParam._m0[22u].x;
    vec4 _593 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _601 = (((_593.z * cbMatDynParam._m0[21u].w) - _579) * _388) + _579;
    float _604 = (((_555.z * cbMatDynParam._m0[21u].z) - _601) * _403) + _601;
    float _607 = (((_536.z * cbMatDynParam._m0[23u].x) - _604) * _418) + _604;
    vec4 _620 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _634 = (_388 * (_593.x - _576)) + _576;
    float _635 = (_388 * (_593.y - _577)) + _577;
    float _640 = ((_555.x - _634) * _403) + _634;
    float _641 = ((_555.y - _635) * _403) + _635;
    float _650 = ((((_536.x - _640) * _418) + _640) * 2.0) + (-1.0);
    float _651 = ((((_536.y - _641) * _418) + _641) * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3744 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _657 = sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))));
    float _661 = _650 + (cbMatDynParam._m0[22u].y * ((_620.x * 2.0) + (-1.0)));
    float _662 = _651 + (cbMatDynParam._m0[22u].y * ((_620.y * 2.0) + (-1.0)));
    float _665 = fma(_657, _243, fma(_662, _235 * TANGENT.x, (_221 * _213) * _661));
    float _668 = fma(_657, _244, fma(_662, _235 * TANGENT.y, (_221 * _214) * _661));
    float _671 = fma(_657, _245, fma(_662, _235 * TANGENT.z, (_221 * _215) * _661));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3755 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3766 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3777 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3788 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _682 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _683 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _684 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _685 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    float _766 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _767 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _769 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _771 = _769.w;
    float _789 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _792 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _795 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    vec4 _797 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _799 = _797.x;
    float _801 = _797.w;
    float _802 = _799 * _799;
    float _822 = (((_802 - _682) + (_801 * _682)) * cbMtdParam._m0[3u].x) + _682;
    float _823 = (((_802 - _683) + (_801 * _683)) * cbMtdParam._m0[3u].x) + _683;
    float _824 = (((_802 - _684) + (_801 * _684)) * cbMtdParam._m0[3u].x) + _684;
    float _825 = (((_797.y - _685) + (_801 * _685)) * cbMtdParam._m0[3u].x) + _685;
    vec4 _826 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _842 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(_822, _823, _824), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _826.z;
    float _851 = (((cbMatDynParam._m0[16u].x - _825) * cbMatDynParam._m0[16u].z) * _842) + _825;
    uint _864 = uint(roundEven(NORMAL.w)) * 13u;
    uint _866 = (_864 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _872 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_866].x;
    float _873 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_866].y;
    float _874 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_866].z;
    float _3832 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    vec4 _884 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _898 = ((((_875 * _771) - _875) + _884.x) * cbMtdParam._m0[3u].x) + _875;
    float _899 = ((((_876 * _771) - _876) + _884.y) * cbMtdParam._m0[3u].x) + _876;
    float _900 = ((((_877 * _771) - _877) + _884.z) * cbMtdParam._m0[3u].x) + _877;
    float _904 = cbMatDynParam._m0[13u].w * _842;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _766, cbSceneParam._m0[86u].y * _767));
    float _928 = _925.x * TEXCOORD_8;
    float _929 = dot(vec3(_676, _677, _678), vec3(_758, _759, _760));
    float _932 = _929 * 2.0;
    float _936 = (_932 * _676) - _758;
    float _937 = (_932 * _677) - _759;
    float _938 = (_932 * _678) - _760;
    float _942 = abs(dot(vec3(_758, _759, _760), vec3(_676, _677, _678)));
    float _3865 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _944 = sqrt(_851);
    float _957 = exp2((_944 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_944 * 3.0));
    float _963 = (1.0 - _957) * ((_944 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _964 = _957 * _944;
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1301;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_1000, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992));
        float _1031 = fma(_1000, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992));
        float _1035 = fma(_1000, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992));
        float _1059 = _992 + _676;
        float _1060 = _996 + _677;
        float _1061 = _1000 + _678;
        float _1071 = fma(_1061, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059)) - _1027;
        float _1072 = fma(_1061, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059)) - _1031;
        float _1073 = fma(_1061, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059)) - _1035;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1129 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1095.x + (-0.5));
        float _1131 = _1129 * (_1095.y + (-0.5));
        float _1132 = _1129 * (_1095.z + (-0.5));
        float _1139 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1102.x + (-0.5));
        float _1141 = _1139 * (_1102.y + (-0.5));
        float _1142 = _1139 * (_1102.z + (-0.5));
        float _1149 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1109.x + (-0.5));
        float _1151 = _1149 * (_1109.y + (-0.5));
        float _1152 = _1149 * (_1109.z + (-0.5));
        float _1159 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1116.x + (-0.5));
        float _1161 = _1159 * (_1116.y + (-0.5));
        float _1162 = _1159 * (_1116.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1183 = (dot(vec3(_676, _677, _678), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1193 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3913 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1195 + 1.0))) + _1200) * _1163;
        float _1210 = _1131 * 0.5;
        float _1211 = _1141 * 0.5;
        float _1212 = _1151 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_676, _677, _678), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3946 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1237 + 1.0))) + _1242) * _1164;
        float _1252 = _1132 * 0.5;
        float _1253 = _1142 * 0.5;
        float _1254 = _1152 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_676, _677, _678), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3979 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1279 + 1.0))) + _1284) * _1165;
        _1301 = _1132;
        _1303 = _1131;
        _1304 = _1130;
        _1305 = _1142;
        _1306 = _1141;
        _1307 = _1140;
        _1308 = _1152;
        _1309 = _1151;
        _1310 = _1150;
        _1311 = _1165;
        _1312 = _1164;
        _1313 = _1163;
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _1302;
        _1303 = _1302;
        _1304 = _1302;
        _1305 = _1302;
        _1306 = _1302;
        _1307 = _1302;
        _1308 = _1302;
        _1309 = _1302;
        _1310 = _1302;
        _1311 = _1302;
        _1312 = _1302;
        _1313 = _1302;
        _1314 = 0.0;
        _1315 = 0.0;
        _1316 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_1000, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992));
        float _1346 = fma(_1000, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992));
        float _1350 = fma(_1000, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992));
        float _1373 = _992 + _676;
        float _1374 = _996 + _677;
        float _1375 = _1000 + _678;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_676, _677, _678), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4042 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_676, _677, _678), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4075 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_676, _677, _678), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4108 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1302;
        _1612 = _1302;
        _1613 = _1302;
        _1614 = _1302;
        _1615 = _1302;
        _1616 = _1302;
        _1617 = _1302;
        _1618 = _1302;
        _1619 = _1302;
        _1620 = _1302;
        _1621 = _1302;
        _1622 = _1302;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1314)) + _1314;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1315)) + _1315;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1316)) + _1316;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _936 * 0.5;
    float _1680 = _937 * 0.5;
    float _1681 = _938 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1301, _1305, _1308, _1311));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _851);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1793 = fma(_1000, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992)) + cbModelParam._m0[13u].w;
        float _1797 = fma(_1000, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992)) + cbModelParam._m0[14u].w;
        float _1801 = fma(_1000, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992)) + cbModelParam._m0[15u].w;
        float _1804 = fma(_938, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936));
        float _1807 = fma(_938, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936));
        float _1810 = fma(_938, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936));
        float _1838;
        if (_1804 > 0.0)
        {
            _1838 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1838 = frontier_phi_16_14_ladder;
        }
        float _2040;
        if (_1807 > 0.0)
        {
            _2040 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2040 = frontier_phi_25_21_ladder;
        }
        float _2293;
        if (_1810 > 0.0)
        {
            _2293 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2293 = frontier_phi_37_32_ladder;
        }
        float _2295 = isnan(_2040) ? _1838 : (isnan(_1838) ? _2040 : min(_1838, _2040));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1804) + _1793;
        float _2301 = (_2296 * _1807) + _1797;
        float _2302 = (_2296 * _1810) + _1801;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2303;
        float _2307 = _2303 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 > _2307) || ((_2301 < _2305) || ((_2300 < _2305) || (_2300 > _2307))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2302, cbModelParam._m0[9u].z, fma(_2301, cbModelParam._m0[9u].y, _2300 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2302, cbModelParam._m0[10u].z, fma(_2301, cbModelParam._m0[10u].y, _2300 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2302, cbModelParam._m0[11u].z, fma(_2301, cbModelParam._m0[11u].y, _2300 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_15_37_ladder = _2430.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2430.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2430.x * cbModelParam._m0[1u].y;
        }
        _1826 = frontier_phi_15_37_ladder_2;
        _1828 = frontier_phi_15_37_ladder_1;
        _1830 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_936, _937, _938), _1745);
        _1826 = _1814.x * cbModelParam._m0[1u].y;
        _1828 = _1814.y * cbModelParam._m0[1u].y;
        _1830 = _1814.z * cbModelParam._m0[1u].y;
    }
    float _1834 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _851);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1834 : min(cbModelParam._m0[25u].w, _1834));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1888 = fma(_1000, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992)) + cbModelParam._m0[21u].w;
        float _1892 = fma(_1000, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992)) + cbModelParam._m0[22u].w;
        float _1896 = fma(_1000, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992)) + cbModelParam._m0[23u].w;
        float _1899 = fma(_938, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936));
        float _1902 = fma(_938, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936));
        float _1905 = fma(_938, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936));
        float _2045;
        if (_1899 > 0.0)
        {
            _2045 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2045 = frontier_phi_27_23_ladder;
        }
        float _2320;
        if (_1902 > 0.0)
        {
            _2320 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2320 = frontier_phi_39_34_ladder;
        }
        float _2533;
        if (_1905 > 0.0)
        {
            _2533 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2533 = frontier_phi_48_45_ladder;
        }
        float _2535 = isnan(_2320) ? _2045 : (isnan(_2045) ? _2320 : min(_2045, _2320));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1899) + _1888;
        float _2541 = (_2536 * _1902) + _1892;
        float _2542 = (_2536 * _1905) + _1896;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2542, cbModelParam._m0[17u].z, fma(_2541, cbModelParam._m0[17u].y, _2540 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2542, cbModelParam._m0[18u].z, fma(_2541, cbModelParam._m0[18u].y, _2540 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2542, cbModelParam._m0[19u].z, fma(_2541, cbModelParam._m0[19u].y, _2540 * cbModelParam._m0[19u].x))), _1835);
            frontier_phi_24_48_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1924 = frontier_phi_24_48_ladder_2;
        _1926 = frontier_phi_24_48_ladder_1;
        _1928 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_936, _937, _938), _1835);
        _1924 = _1908.x * cbModelParam._m0[1u].z;
        _1926 = _1908.y * cbModelParam._m0[1u].z;
        _1928 = _1908.z * cbModelParam._m0[1u].z;
    }
    float _1941 = (((_963 * _822) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1924 - _1826)) + _1826);
    float _1943 = (((_963 * _823) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1926 - _1828)) + _1828);
    float _1945 = (((_963 * _824) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1948 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1941 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1941 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, _1941 * cbSceneParam._m0[91u].x));
    uvec4 _1964 = floatBitsToUint(cbInstanceData._m0[_864 + 5u]);
    uint _1966 = _1964.x * 14u;
    uint _1967 = _1966 + 13u;
    float _1974 = _928 + (-1.0);
    float _1979 = (cbLight._m0[_1967].x * _1974) + 1.0;
    float _1980 = (cbLight._m0[_1967].y * _1974) + 1.0;
    float _1981 = (cbLight._m0[_1967].z * _1974) + 1.0;
    float _1982 = (cbLight._m0[_1967].w * _1974) + 1.0;
    uint _1983 = _1966 + 5u;
    float _1989 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _1993 = _1966 + 4u;
    float _1999 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
    uint _2003 = _1966 | 1u;
    float _2014 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_676, _677, _678));
    float _2017 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_676, _677, _678));
    float _4244 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _4255 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2022 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2024 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2031 = ((cbLight._m0[_1983].x * _1989) * _2024) + ((cbLight._m0[_1993].x * _1999) * _2022);
    float _2032 = ((_1989 * cbLight._m0[_1983].y) * _2024) + ((_1999 * cbLight._m0[_1993].y) * _2022);
    float _2033 = ((_1989 * cbLight._m0[_1983].z) * _2024) + ((_1999 * cbLight._m0[_1993].z) * _2022);
    uvec4 _2037 = floatBitsToUint(cbLight._m0[_1966 + 12u]);
    bool _2039 = _2037.x == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_2039)
    {
        _2050 = _2031;
        _2052 = _2032;
        _2054 = _2033;
    }
    else
    {
        uint _2058 = _1966 + 6u;
        float _2074 = (dot(vec3(cbLight._m0[_1966 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4266 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2077 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2050 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _2031;
        _2052 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _2032;
        _2054 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _2033;
    }
    bool _2057 = _2037.y == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2057)
    {
        _2095 = _2050;
        _2097 = _2052;
        _2099 = _2054;
    }
    else
    {
        uint _2264 = _1966 + 7u;
        float _2280 = (dot(vec3(cbLight._m0[_1966 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4282 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2283 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2095 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2050;
        _2097 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2052;
        _2099 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2054;
    }
    uint _2102 = _1966 + 8u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _851) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1966].x + _758;
    float _2118 = cbLight._m0[_1966].y + _759;
    float _2119 = cbLight._m0[_1966].z + _760;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1966].xyz));
    float _4298 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _4309 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _2131 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2132 = dot(vec3(_676, _677, _678), vec3(_2124, _2125, _2126));
    float _4320 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2136 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2124, _2125, _2126));
    float _4331 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = _2116 * _2116;
    float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
    float _2152 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2153 = 1.0 - _822;
    float _2154 = 1.0 - _823;
    float _2155 = 1.0 - _824;
    float _2162 = 1.0 - _2116;
    float _2173 = (0.5 / (((_2131 * ((_2130 * _2162) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2162) + _2116) * _2130))) * _2130;
    float _4342 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
    uint _2186 = _1966 + 9u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _851) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_2003].x + _758;
    float _2200 = cbLight._m0[_2003].y + _759;
    float _2201 = cbLight._m0[_2003].z + _760;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2003].xyz));
    float _4353 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2213 = dot(vec3(_676, _677, _678), vec3(_2206, _2207, _2208));
    float _4364 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2206, _2207, _2208));
    float _4375 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2198 * _2198;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
    float _2239 = 1.0 - _2198;
    float _2249 = (0.5 / (((_2131 * ((_2212 * _2239) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2239) + _2198) * _2212))) * _2212;
    float _4386 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    float _2261 = (((((_2232 * _2153) + _822) * cbLight._m0[_2186].x) * _2251) * _1989) + (((((_2152 * _2153) + _822) * cbLight._m0[_2102].x) * _2175) * _1999);
    float _2262 = (((((_2232 * _2154) + _823) * cbLight._m0[_2186].y) * _2251) * _1989) + (((((_2152 * _2154) + _823) * cbLight._m0[_2102].y) * _2175) * _1999);
    float _2263 = (((((_2232 * _2155) + _824) * cbLight._m0[_2186].z) * _2251) * _1989) + (((((_2152 * _2155) + _824) * cbLight._m0[_2102].z) * _2175) * _1999);
    float _2325;
    float _2327;
    float _2329;
    if (_2039)
    {
        _2325 = _2261;
        _2327 = _2262;
        _2329 = _2263;
    }
    else
    {
        uint _2331 = _1966 + 2u;
        uint _2335 = _1966 + 10u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _851) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _758;
        float _2352 = cbLight._m0[_2331].y + _759;
        float _2353 = cbLight._m0[_2331].z + _760;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2331].xyz));
        float _4397 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2365 = dot(vec3(_676, _677, _678), vec3(_2358, _2359, _2360));
        float _4408 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4419 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
        float _2391 = 1.0 - _2350;
        float _2401 = (0.5 / (((_2131 * ((_2364 * _2391) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2391) + _2350) * _2364))) * _2364;
        float _4430 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2403 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2404 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2325 = (((((_2384 * _2153) + _822) * cbLight._m0[_2335].x) * _2403) * _2404) + _2261;
        _2327 = (((((_2384 * _2154) + _823) * cbLight._m0[_2335].y) * _2403) * _2404) + _2262;
        _2329 = (((((_2384 * _2155) + _824) * cbLight._m0[_2335].z) * _2403) * _2404) + _2263;
    }
    float _2439;
    float _2441;
    float _2443;
    if (_2057)
    {
        _2439 = _2325;
        _2441 = _2327;
        _2443 = _2329;
    }
    else
    {
        uint _2450 = _1966 + 3u;
        uint _2454 = _1966 + 11u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _851) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _758;
        float _2471 = cbLight._m0[_2450].y + _759;
        float _2472 = cbLight._m0[_2450].z + _760;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2450].xyz));
        float _4446 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2484 = dot(vec3(_676, _677, _678), vec3(_2477, _2478, _2479));
        float _4457 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4468 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
        float _2510 = 1.0 - _2469;
        float _2520 = (0.5 / (((_2131 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2131 * _2510) + _2469) * _2483))) * _2483;
        float _4479 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2522 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2523 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2439 = (((((_2503 * _2153) + _822) * cbLight._m0[_2454].x) * _2522) * _2523) + _2325;
        _2441 = (((((_2503 * _2154) + _823) * cbLight._m0[_2454].y) * _2522) * _2523) + _2327;
        _2443 = (((((_2503 * _2155) + _824) * cbLight._m0[_2454].z) * _2522) * _2523) + _2329;
    }
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_1964.y == 0u)
    {
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2598;
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2598;
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2598;
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.x;
        uint _2625 = uint((float(_2613.y) * floor(float(uint(cbSceneParam._m0[85u].y * _767) / _2614))) + floor(float(uint(cbSceneParam._m0[85u].x * _766) / _2614)));
        float _2635 = (log2(_2601 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2636 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        uint _2639 = uint(isnan(14.0) ? _2636 : (isnan(_2636) ? 14.0 : min(_2636, 14.0)));
        uvec4 _2644 = texelFetch(g_lightClusterGridBuffer, int(((_2639 << 2u) + (_2625 << 6u)) >> 2u));
        uint _2645 = _2644.x;
        uint _2646 = _2613.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2646 >> 4u) & 15u)) + 4294967295u) & _2645) == 0u) || ((_2646 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            uint _2982 = 0u;
            uint _2991;
            bool _2992;
            for (;;)
            {
                _2991 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                _2992 = _2991 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2992)
                {
                    frontier_phi_63_pred = _2981;
                    frontier_phi_63_pred_1 = _2980;
                    frontier_phi_63_pred_2 = _2979;
                    frontier_phi_63_pred_3 = _2978;
                    frontier_phi_63_pred_4 = _2977;
                    frontier_phi_63_pred_5 = _2976;
                }
                else
                {
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    uint _3106;
                    _3100 = _2976;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2991;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    for (;;)
                    {
                        uint _3110 = uint(findLSB(_3106)) + (_2982 << 5u);
                        uint _3107 = (_3106 + 4294967295u) & _3106;
                        uint _3112 = _3110 * 48u;
                        vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 3u)).x));
                        uint _3132 = (_3110 * 48u) + 4u;
                        vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 3u)).x));
                        uint _3151 = (_3110 * 48u) + 8u;
                        vec3 _3162 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x));
                        float _3166 = _3126.x - _2599;
                        float _3167 = _3126.y - _2600;
                        float _3168 = _3126.z - _2601;
                        float _3169 = dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168));
                        float _3172 = inversesqrt(_3169);
                        float _3173 = _3172 * _3166;
                        float _3174 = _3172 * _3167;
                        float _3175 = _3172 * _3168;
                        float _3176 = dot(vec3(_789, _792, _795), vec3(_3173, _3174, _3175));
                        float _3181 = 1.0 - (_3169 * _3126.w);
                        float _4505 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3183 = sqrt(_3169) * _3145.w;
                        float _3186 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                        float _3187 = _3186 * _3186;
                        float _3190 = ((1.0 - _3187) * _3176) + _3187;
                        float _3193 = _3183 * _3183;
                        float _3196 = ((isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))) * _3182) / ((_3193 * 0.699999988079071044921875) + 1.0);
                        float _3200 = (-0.0) - _2599;
                        float _3201 = (-0.0) - _2600;
                        float _3202 = (-0.0) - _2601;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3207 = _3206 * _3200;
                        float _3208 = _3206 * _3201;
                        float _3209 = _3206 * _3202;
                        float _3217 = exp2(log2(1.0 / ((_3193 * 3.5) + 5.0)) * 0.25);
                        float _3218 = 1.0 - _944;
                        float _3225 = sqrt(1.0 - ((1.0 - (_3218 * _3218)) * (1.0 - (_3217 * _3217))));
                        float _3226 = _3225 * _3225;
                        float _3227 = _3226 * _3226;
                        float _3228 = _3207 + _3173;
                        float _3229 = _3208 + _3174;
                        float _3230 = _3209 + _3175;
                        float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                        float _3238 = dot(vec3(_789, _792, _795), vec3(_3207, _3208, _3209));
                        float _4521 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3241 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3242 = dot(vec3(_789, _792, _795), vec3(_3234 * _3228, _3234 * _3229, _3234 * _3230));
                        float _4532 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3249 = ((_3245 * _3245) * (_3227 + (-1.0))) + 1.0;
                        float _3250 = _3186 * _3226;
                        float _3251 = _3250 * _3250;
                        float _3254 = ((1.0 - _3251) * _3176) + _3251;
                        float _4543 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3255 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3256 = 1.0 - _3226;
                        float _3266 = (0.5 / (((_3255 * ((_3241 * _3256) + _3226)) + 9.9999999392252902907785028219223e-09) + (((_3255 * _3256) + _3226) * _3241))) * _3255;
                        float _4554 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3277 = (((_3227 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3249 * _3249) * ((_3193 * 2.1991131305694580078125) + 3.141590118408203125))) * _3182;
                        _3035 = (_3196 * _3145.x) + _3103;
                        _3036 = (_3196 * _3145.y) + _3104;
                        _3037 = (_3196 * _3145.z) + _3105;
                        _3032 = (_3277 * _3162.x) + _3100;
                        _3033 = (_3277 * _3162.y) + _3101;
                        _3034 = (_3277 * _3162.z) + _3102;
                        if (_3107 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3100 = _3032;
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3107;
                        }
                    }
                    frontier_phi_63_pred = _3037;
                    frontier_phi_63_pred_1 = _3036;
                    frontier_phi_63_pred_2 = _3035;
                    frontier_phi_63_pred_3 = _3034;
                    frontier_phi_63_pred_4 = _3033;
                    frontier_phi_63_pred_5 = _3032;
                }
                _2843 = frontier_phi_63_pred;
                _2841 = frontier_phi_63_pred_1;
                _2839 = frontier_phi_63_pred_2;
                _2837 = frontier_phi_63_pred_3;
                _2835 = frontier_phi_63_pred_4;
                _2833 = frontier_phi_63_pred_5;
                uint _2983 = _2982 + 1u;
                if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2976 = _2833;
                    _2977 = _2835;
                    _2978 = _2837;
                    _2979 = _2839;
                    _2980 = _2841;
                    _2981 = _2843;
                    _2982 = _2983;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((4294967295u << _2849) & _2645) == 0u)
        {
            _2944 = _2832;
            _2946 = _2834;
            _2948 = _2836;
            _2950 = _2838;
            _2952 = _2840;
            _2954 = _2842;
        }
        else
        {
            float _2969 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
            float _2970 = _2969 * _2599;
            float _2971 = _2969 * _2600;
            float _2972 = _2969 * _2601;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _3083 = _2832;
                float _3084 = _2834;
                float _3085 = _2836;
                float _3086 = _2838;
                float _3087 = _2840;
                float _3088 = _2842;
                uint _3089 = _2849;
                uint _3098;
                bool _3099;
                for (;;)
                {
                    _3098 = texelFetch(g_lightClassification, int((((_2639 << 5u) + (_2625 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                    _3099 = _3098 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3099)
                    {
                        frontier_phi_69_pred = _3088;
                        frontier_phi_69_pred_1 = _3087;
                        frontier_phi_69_pred_2 = _3086;
                        frontier_phi_69_pred_3 = _3085;
                        frontier_phi_69_pred_4 = _3084;
                        frontier_phi_69_pred_5 = _3083;
                    }
                    else
                    {
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3295 = _3083;
                        float _3296 = _3084;
                        float _3297 = _3085;
                        float _3298 = _3086;
                        float _3299 = _3087;
                        float _3300 = _3088;
                        uint _3301 = _3098;
                        uint _3302;
                        vec4 _3327;
                        float _3328;
                        vec4 _3343;
                        vec3 _3355;
                        vec4 _3370;
                        vec4 _3385;
                        float _3431;
                        bool _3432;
                        for (;;)
                        {
                            uint _3312 = ((_3089 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3301));
                            _3302 = (_3301 + 4294967295u) & _3301;
                            uint _3314 = _3312 * 40u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            _3328 = _3327.w;
                            uint _3330 = (_3312 * 40u) + 4u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3312 * 40u) + 8u;
                            _3355 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x));
                            uint _3357 = (_3312 * 40u) + 16u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3372 = (_3312 * 40u) + 20u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3312 * 40u) + 24u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3406 = (_3312 * 40u) + 28u;
                            vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            _3431 = fma(_2601, _3419.z, fma(_2600, _3419.y, _3419.x * _2599)) + _3419.w;
                            _3432 = !((fma(_2601, _3400.z, fma(_2600, _3400.y, _3400.x * _2599)) + _3400.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3432)
                            {
                                float _3459 = _3327.x - _2599;
                                float _3460 = _3327.y - _2600;
                                float _3461 = _3327.z - _2601;
                                float _3462 = dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461));
                                float _3465 = inversesqrt(_3462);
                                float _3466 = _3465 * _3459;
                                float _3467 = _3465 * _3460;
                                float _3468 = _3465 * _3461;
                                float _3472 = 1.0 - (_3462 / (_3328 * _3328));
                                float _4565 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3477 = sqrt(_3462) * _3343.w;
                                float _3479 = 1.39999997615814208984375 / (_3477 + 1.39999997615814208984375);
                                float _3480 = _3479 * _3479;
                                float _3483 = ((1.0 - _3480) * dot(vec3(_3466, _3467, _3468), vec3(_789, _792, _795))) + _3480;
                                float _3486 = _3477 * _3477;
                                float _3490 = (fma(_2601, _3370.z, fma(_2600, _3370.y, _3370.x * _2599)) + _3370.w) / _3431;
                                float _3491 = (fma(_2601, _3385.z, fma(_2600, _3385.y, _3385.x * _2599)) + _3385.w) / _3431;
                                float _3495 = 1.0 - dot(vec2(_3490, _3491), vec2(_3490, _3491));
                                float _4581 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3497 = _3496 * (((isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))) * _3473) / ((_3486 * 0.699999988079071044921875) + 1.0));
                                float _3509 = exp2(log2(1.0 / ((_3486 * 3.5) + 5.0)) * 0.25);
                                float _3510 = 1.0 - _944;
                                float _3517 = sqrt(1.0 - ((1.0 - (_3510 * _3510)) * (1.0 - (_3509 * _3509))));
                                float _3518 = _3517 * _3517;
                                float _3519 = _3518 * _3518;
                                float _3520 = _3466 - _2970;
                                float _3521 = _3467 - _2971;
                                float _3522 = _3468 - _2972;
                                float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                                float _3530 = dot(vec3(_789, _792, _795), vec3((-0.0) - _2970, (-0.0) - _2971, (-0.0) - _2972));
                                float _4592 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3534 = dot(vec3(_789, _792, _795), vec3(_3526 * _3520, _3526 * _3521, _3526 * _3522));
                                float _4603 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3541 = ((_3537 * _3537) * (_3519 + (-1.0))) + 1.0;
                                float _3542 = _3479 * _3518;
                                float _3543 = _3542 * _3542;
                                float _3549 = ((1.0 - _3543) * dot(vec3(_789, _792, _795), vec3(_3466, _3467, _3468))) + _3543;
                                float _4614 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3551 = 1.0 - _3518;
                                float _3561 = (0.5 / (((_3550 * ((_3533 * _3551) + _3518)) + 9.9999999392252902907785028219223e-09) + (((_3550 * _3551) + _3518) * _3533))) * _3550;
                                float _4625 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3571 = (_3496 * _3473) * (((_3519 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3541 * _3541) * ((_3486 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3497 * _3343.z;
                                frontier_phi_75_pred_1 = _3497 * _3343.y;
                                frontier_phi_75_pred_2 = _3497 * _3343.x;
                                frontier_phi_75_pred_3 = _3571 * _3355.z;
                                frontier_phi_75_pred_4 = _3571 * _3355.y;
                                frontier_phi_75_pred_5 = _3571 * _3355.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3580 = frontier_phi_75_pred;
                            _3579 = frontier_phi_75_pred_1;
                            _3578 = frontier_phi_75_pred_2;
                            _3577 = frontier_phi_75_pred_3;
                            _3576 = frontier_phi_75_pred_4;
                            _3575 = frontier_phi_75_pred_5;
                            _3285 = _3578 + _3298;
                            _3286 = _3579 + _3299;
                            _3287 = _3580 + _3300;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            _3284 = _3577 + _3297;
                            if (_3302 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3302;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3287;
                        frontier_phi_69_pred_1 = _3286;
                        frontier_phi_69_pred_2 = _3285;
                        frontier_phi_69_pred_3 = _3284;
                        frontier_phi_69_pred_4 = _3283;
                        frontier_phi_69_pred_5 = _3282;
                    }
                    _2955 = frontier_phi_69_pred;
                    _2953 = frontier_phi_69_pred_1;
                    _2951 = frontier_phi_69_pred_2;
                    _2949 = frontier_phi_69_pred_3;
                    _2947 = frontier_phi_69_pred_4;
                    _2945 = frontier_phi_69_pred_5;
                    uint _3090 = _3089 + 1u;
                    if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3083 = _2945;
                        _3084 = _2947;
                        _3085 = _2949;
                        _3086 = _2951;
                        _3087 = _2953;
                        _3088 = _2955;
                        _3089 = _3090;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2955;
                frontier_phi_57_58_ladder_1 = _2953;
                frontier_phi_57_58_ladder_2 = _2951;
                frontier_phi_57_58_ladder_3 = _2949;
                frontier_phi_57_58_ladder_4 = _2947;
                frontier_phi_57_58_ladder_5 = _2945;
            }
            else
            {
                frontier_phi_57_58_ladder = _2842;
                frontier_phi_57_58_ladder_1 = _2840;
                frontier_phi_57_58_ladder_2 = _2838;
                frontier_phi_57_58_ladder_3 = _2836;
                frontier_phi_57_58_ladder_4 = _2834;
                frontier_phi_57_58_ladder_5 = _2832;
            }
            _2944 = frontier_phi_57_58_ladder_5;
            _2946 = frontier_phi_57_58_ladder_4;
            _2948 = frontier_phi_57_58_ladder_3;
            _2950 = frontier_phi_57_58_ladder_2;
            _2952 = frontier_phi_57_58_ladder_1;
            _2954 = frontier_phi_57_58_ladder;
        }
        float _2959 = isnan(1.0) ? _928 : (isnan(_928) ? 1.0 : min(_928, 1.0));
        _2657 = (_2959 * _2950) + _2095;
        _2659 = (_2959 * _2952) + _2097;
        _2661 = (_2959 * _2954) + _2099;
        _2663 = ((_2944 * _822) * _2959) + _2439;
        _2665 = ((_2946 * _823) * _2959) + _2441;
        _2667 = ((_2948 * _824) * _2959) + _2443;
    }
    else
    {
        _2657 = _2095;
        _2659 = _2097;
        _2661 = _2099;
        _2663 = _2439;
        _2665 = _2441;
        _2667 = _2443;
    }
    float _2677 = ((((cbMatDynParam._m0[13u].x - _898) * _904) + _898) * _2153) * cbMatDynParam._m0[9u].x;
    float _2678 = ((((cbMatDynParam._m0[13u].y - _899) * _904) + _899) * _2154) * cbMatDynParam._m0[9u].y;
    float _2679 = ((((cbMatDynParam._m0[13u].z - _900) * _904) + _900) * _2155) * cbMatDynParam._m0[9u].z;
    float _2690 = dot(vec3(_676, _677, _678), vec3(0.0, -1.0, 0.0));
    float _4641 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2693 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2697 = dot(vec3(_936, _937, _938), vec3(0.0, -1.0, 0.0));
    float _4652 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2703 = exp2(log2(isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * 4.0);
    float _4663 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _4674 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _4685 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2747 = abs(exp2(log2(_929) * cbMatDynParam._m0[12u].x));
    float _2748 = isnan(0.100000001490116119384765625) ? _2747 : (isnan(_2747) ? 0.100000001490116119384765625 : max(_2747, 0.100000001490116119384765625));
    float _2754 = ((isnan(0.699999988079071044921875) ? _2748 : (isnan(_2748) ? 0.699999988079071044921875 : min(_2748, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _2764 = ((((cbMatDynParam._m0[10u].x * cbPerFrame._m0[3u].x) * ((_2663 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1734)) + (_2703 * cbMatDynParam._m0[11u].x))) + ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * ((_2657 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _928)) + (_2693 * cbMatDynParam._m0[11u].x)))) + cbMatDynParam._m0[7u].x) + (_2754 * (cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x));
    float _2767 = ((((cbMatDynParam._m0[10u].y * cbPerFrame._m0[3u].x) * ((_2665 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1734)) + (_2703 * cbMatDynParam._m0[11u].y))) + ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * ((_2659 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _928)) + (_2693 * cbMatDynParam._m0[11u].y)))) + cbMatDynParam._m0[7u].y) + (_2754 * (cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y));
    float _2770 = ((((cbMatDynParam._m0[10u].z * cbPerFrame._m0[3u].x) * ((_2667 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1734)) + (_2703 * cbMatDynParam._m0[11u].z))) + ((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * ((_2661 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _928)) + (_2693 * cbMatDynParam._m0[11u].z)))) + cbMatDynParam._m0[7u].z) + (_2754 * (cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z));
    uint _2774 = _864 + 6u;
    float _2782 = _766 / cbSceneParam._m0[86u].x;
    float _2783 = _767 / cbSceneParam._m0[86u].y;
    vec4 _2797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2799 = _2797.x;
    float _2800 = _2797.y;
    float _2801 = _2797.z;
    float _2802 = _2797.w;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2858 = _2857 / _701;
        float _2869 = _2858 * _751;
        float _2870 = _752 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2872 = _2858 * _753;
        float _2874 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2875 = _2874 + cbSceneParam._m0[79u].w;
        float _2876 = cbSceneParam._m0[79u].w - _2870;
        float _2882 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2872 * _2872));
        float _2885 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2882;
        float _2890 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2892 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3045;
        if (abs((_2871 - _2874) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3045 = ((((_2875 > 0.0) ? exp2(_2890 * _2875) : (2.0 - exp2(_2892 * _2875))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2885;
        }
        else
        {
            float _3005 = 1.0 / cbSceneParam._m0[80u].x;
            float _3006 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : max(_2875, _2876));
            float _3007 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : min(_2875, _2876));
            float _3016 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : min(_3006, 0.0));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            _3045 = ((abs(_2882 / _2871) * cbSceneParam._m0[80u].y) * ((((_3016 - _3017) * 2.0) - ((exp2(_2890 * (isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0)))) - exp2(_2890 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))))) * _3005)) - ((exp2(_2892 * _3016) - exp2(_2892 * _3017)) * _3005))) + (_2885 * cbSceneParam._m0[80u].z);
        }
        vec4 _3047 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, 1.0), 0.0);
        float _3056 = exp2((_3045 * (-1.44269502162933349609375)) * (1.0 - _3047.w));
        float _3057 = log2(_3056);
        float _3073 = log2(_2802);
        _2894 = (exp2(_3073 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].x)) * _3047.x) / cbSceneParam._m0[78u].x)) + _2799;
        _2896 = (exp2(_3073 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].y)) * _3047.y) / cbSceneParam._m0[78u].y)) + _2800;
        _2898 = (exp2(_3073 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].z)) * _3047.z) / cbSceneParam._m0[78u].z)) + _2801;
        _2900 = _3056 * _2802;
    }
    else
    {
        _2894 = _2799;
        _2896 = _2800;
        _2898 = _2801;
        _2900 = _2802;
    }
    float _2912 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2913 = _2912 == 3.0;
    float _2914 = log2(_2900);
    float _2921 = exp2(_2914 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)));
    float _2922 = exp2(_2914 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0)));
    float _2923 = exp2(_2914 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0)));
    float _2932 = (_2912 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2932 * (_2913 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2894)));
    SV_Target.y = _2932 * (_2913 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2896)));
    SV_Target.z = _2932 * (_2913 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2898)));
    SV_Target.w = cbInstanceData._m0[_2774].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2774].w;
}


