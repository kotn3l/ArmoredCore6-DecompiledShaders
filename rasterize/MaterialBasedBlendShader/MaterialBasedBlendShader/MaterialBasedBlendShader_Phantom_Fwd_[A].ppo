#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[24];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1364;
float _3827;
float _3828;
float _3829;
float _3830;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    vec4 _281 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _309 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _341 = _335.x * cbMatDynParam._m0[17u].x;
    float _342 = _335.y * cbMatDynParam._m0[17u].y;
    float _343 = _335.z * cbMatDynParam._m0[17u].z;
    vec4 _362 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _381 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _392 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _394 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (_381.x + 0.00999999977648258209228515625))) * _392;
    float _3839 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _402 = (_395 * ((_362.x * cbMatDynParam._m0[18u].x) - _341)) + _341;
    float _403 = (_395 * ((_362.y * cbMatDynParam._m0[18u].y) - _342)) + _342;
    float _404 = (_395 * ((_362.z * cbMatDynParam._m0[18u].z) - _343)) + _343;
    float _409 = (0.5 - ((cbMatDynParam._m0[22u].z * 0.5) * (_381.y + 0.00999999977648258209228515625))) * _392;
    float _3850 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _417 = (((_309.x * cbMatDynParam._m0[19u].x) - _402) * _410) + _402;
    float _418 = (((_309.y * cbMatDynParam._m0[19u].y) - _403) * _410) + _403;
    float _419 = (((_309.z * cbMatDynParam._m0[19u].z) - _404) * _410) + _404;
    float _424 = (0.5 - ((cbMatDynParam._m0[22u].w * 0.5) * (_381.z + 0.00999999977648258209228515625))) * _392;
    float _3861 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _432 = (((_281.x * cbMatDynParam._m0[20u].x) - _417) * _425) + _417;
    float _433 = (((_281.y * cbMatDynParam._m0[20u].y) - _418) * _425) + _418;
    float _434 = (((_281.z * cbMatDynParam._m0[20u].z) - _419) * _425) + _419;
    vec4 _446 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _449 = _446.x * _335.w;
    vec4 _461 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    vec4 _478 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w));
    float _489 = ((_478.x - _463) * _395) + _463;
    float _490 = ((_478.y - _464) * _395) + _464;
    float _491 = ((_478.z - _465) * _395) + _465;
    vec4 _504 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _515 = ((_504.x - _489) * _410) + _489;
    float _516 = ((_504.y - _490) * _410) + _490;
    float _517 = ((_504.z - _491) * _410) + _491;
    vec4 _529 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _540 = ((_529.x - _515) * _425) + _515;
    float _541 = ((_529.y - _516) * _425) + _516;
    float _542 = ((_529.z - _517) * _425) + _517;
    vec4 _558 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _577 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _596 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _598 = _596.x;
    float _599 = _596.y;
    float _601 = _596.z * cbMatDynParam._m0[22u].x;
    vec4 _615 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _623 = (((_615.z * cbMatDynParam._m0[21u].w) - _601) * _395) + _601;
    float _626 = (((_577.z * cbMatDynParam._m0[21u].z) - _623) * _410) + _623;
    float _629 = (((_558.z * cbMatDynParam._m0[23u].x) - _626) * _425) + _626;
    vec4 _642 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _656 = (_395 * (_615.x - _598)) + _598;
    float _657 = (_395 * (_615.y - _599)) + _599;
    float _662 = ((_577.x - _656) * _410) + _656;
    float _663 = ((_577.y - _657) * _410) + _657;
    float _672 = ((((_558.x - _662) * _425) + _662) * 2.0) + (-1.0);
    float _673 = ((((_558.y - _663) * _425) + _663) * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3872 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _679 = sqrt(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))));
    float _683 = _672 + (cbMatDynParam._m0[22u].y * ((_642.x * 2.0) + (-1.0)));
    float _684 = _673 + (cbMatDynParam._m0[22u].y * ((_642.y * 2.0) + (-1.0)));
    float _687 = fma(_679, _249, fma(_684, _241 * TANGENT.x, (_227 * _219) * _683));
    float _690 = fma(_679, _250, fma(_684, _241 * TANGENT.y, (_227 * _220) * _683));
    float _693 = fma(_679, _251, fma(_684, _241 * TANGENT.z, (_227 * _221) * _683));
    float _697 = inversesqrt(dot(vec3(_687, _690, _693), vec3(_687, _690, _693)));
    float _698 = _697 * _687;
    float _699 = _697 * _690;
    float _700 = _697 * _693;
    float _3883 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3894 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3905 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3916 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _704 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _705 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _706 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _707 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _723 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _773 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _763);
    float _774 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _763);
    float _775 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _763);
    float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
    float _780 = _773 * _779;
    float _781 = _774 * _779;
    float _782 = _775 * _779;
    vec4 _787 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _789 = _787.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1045 = sqrt(((_773 * _773) + (_774 * _774)) + (_775 * _775));
        float _1051 = (cbMatDynParam._m0[5u].x * _1045) + cbMatDynParam._m0[5u].y;
        float _3960 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1056 = (cbMatDynParam._m0[5u].z * _1045) + cbMatDynParam._m0[5u].w;
        float _3971 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) - _1052)) + _1052) < ((_789 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _803 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _805 = _803.w;
    float _823 = fma(_700, cbSceneParam._m0[5u].z, fma(_699, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _698));
    float _826 = fma(_700, cbSceneParam._m0[6u].z, fma(_699, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _698));
    float _829 = fma(_700, cbSceneParam._m0[7u].z, fma(_699, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _698));
    vec4 _831 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _833 = _831.x;
    float _835 = _831.w;
    float _836 = _833 * _833;
    float _856 = (((_836 - _704) + (_835 * _704)) * cbMtdParam._m0[3u].x) + _704;
    float _857 = (((_836 - _705) + (_835 * _705)) * cbMtdParam._m0[3u].x) + _705;
    float _858 = (((_836 - _706) + (_835 * _706)) * cbMtdParam._m0[3u].x) + _706;
    float _859 = (((_831.y - _707) + (_835 * _707)) * cbMtdParam._m0[3u].x) + _707;
    vec4 _860 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _876 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(_856, _857, _858), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _860.z;
    float _885 = (((cbMatDynParam._m0[16u].x - _859) * cbMatDynParam._m0[16u].z) * _876) + _859;
    uint _898 = uint(roundEven(NORMAL.w)) * 13u;
    uint _899 = _898 + 9u;
    uint _900 = _899 + uint(cbMatDynParam._m0[0u].w);
    float _906 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_900].x;
    float _907 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_900].y;
    float _908 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_900].z;
    float _3982 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    vec4 _918 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _932 = ((((_909 * _805) - _909) + _918.x) * cbMtdParam._m0[3u].x) + _909;
    float _933 = ((((_910 * _805) - _910) + _918.y) * cbMtdParam._m0[3u].x) + _910;
    float _934 = ((((_911 * _805) - _911) + _918.z) * cbMtdParam._m0[3u].x) + _911;
    float _938 = cbMatDynParam._m0[13u].w * _876;
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _962 = _959.x * TEXCOORD_8;
    float _963 = dot(vec3(_698, _699, _700), vec3(_780, _781, _782));
    float _966 = _963 * 2.0;
    float _970 = (_966 * _698) - _780;
    float _971 = (_966 * _699) - _781;
    float _972 = (_966 * _700) - _782;
    float _976 = abs(dot(vec3(_780, _781, _782), vec3(_698, _699, _700)));
    float _4015 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _978 = sqrt(_885);
    float _991 = exp2((_978 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_978 * 3.0));
    float _997 = (1.0 - _991) * ((_978 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _998 = _991 * _978;
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1363;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1089 = fma(_1034, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026));
        float _1093 = fma(_1034, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026));
        float _1097 = fma(_1034, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026));
        float _1121 = _1026 + _698;
        float _1122 = _1030 + _699;
        float _1123 = _1034 + _700;
        float _1133 = fma(_1123, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121)) - _1089;
        float _1134 = fma(_1123, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121)) - _1093;
        float _1135 = fma(_1123, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121)) - _1097;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1089 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1093 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[34u].z) + ((((((_1097 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1191 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1157.x + (-0.5));
        float _1193 = _1191 * (_1157.y + (-0.5));
        float _1194 = _1191 * (_1157.z + (-0.5));
        float _1201 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1164.x + (-0.5));
        float _1203 = _1201 * (_1164.y + (-0.5));
        float _1204 = _1201 * (_1164.z + (-0.5));
        float _1211 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1171.x + (-0.5));
        float _1213 = _1211 * (_1171.y + (-0.5));
        float _1214 = _1211 * (_1171.z + (-0.5));
        float _1221 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1178.x + (-0.5));
        float _1223 = _1221 * (_1178.y + (-0.5));
        float _1224 = _1221 * (_1178.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1245 = (dot(vec3(_698, _699, _700), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1255 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4063 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1257 + 1.0))) + _1262) * _1225;
        float _1272 = _1193 * 0.5;
        float _1273 = _1203 * 0.5;
        float _1274 = _1213 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_698, _699, _700), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4096 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1299 + 1.0))) + _1304) * _1226;
        float _1314 = _1194 * 0.5;
        float _1315 = _1204 * 0.5;
        float _1316 = _1214 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_698, _699, _700), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4129 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1341 + 1.0))) + _1346) * _1227;
        _1363 = _1194;
        _1365 = _1193;
        _1366 = _1192;
        _1367 = _1204;
        _1368 = _1203;
        _1369 = _1202;
        _1370 = _1214;
        _1371 = _1213;
        _1372 = _1212;
        _1373 = _1227;
        _1374 = _1226;
        _1375 = _1225;
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1364;
        _1365 = _1364;
        _1366 = _1364;
        _1367 = _1364;
        _1368 = _1364;
        _1369 = _1364;
        _1370 = _1364;
        _1371 = _1364;
        _1372 = _1364;
        _1373 = _1364;
        _1374 = _1364;
        _1375 = _1364;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1407 = fma(_1034, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026));
        float _1411 = fma(_1034, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026));
        float _1415 = fma(_1034, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026));
        float _1438 = _1026 + _698;
        float _1439 = _1030 + _699;
        float _1440 = _1034 + _700;
        float _1450 = fma(_1440, cbModelParam._m0[30u].z, fma(_1439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1438)) - _1407;
        float _1451 = fma(_1440, cbModelParam._m0[31u].z, fma(_1439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1438)) - _1411;
        float _1452 = fma(_1440, cbModelParam._m0[32u].z, fma(_1439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1438)) - _1415;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1469 = ((_1456 * _1450) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1407 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1456 * _1451) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1411 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1456 * _1452) / cbModelParam._m0[35u].z) + ((((((_1415 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        float _1506 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1473.x + (-0.5));
        float _1508 = _1506 * (_1473.y + (-0.5));
        float _1509 = _1506 * (_1473.z + (-0.5));
        float _1516 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1480.x + (-0.5));
        float _1518 = _1516 * (_1480.y + (-0.5));
        float _1519 = _1516 * (_1480.z + (-0.5));
        float _1526 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1487.x + (-0.5));
        float _1528 = _1526 * (_1487.y + (-0.5));
        float _1529 = _1526 * (_1487.z + (-0.5));
        float _1536 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1494.x + (-0.5));
        float _1538 = _1536 * (_1494.y + (-0.5));
        float _1539 = _1536 * (_1494.z + (-0.5));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = _1507 * 0.5;
        float _1544 = _1517 * 0.5;
        float _1545 = _1527 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_698, _699, _700), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4192 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1570 + 1.0))) + _1575) * _1540;
        float _1585 = _1508 * 0.5;
        float _1586 = _1518 * 0.5;
        float _1587 = _1528 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_698, _699, _700), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4225 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1612 + 1.0))) + _1617) * _1541;
        float _1627 = _1509 * 0.5;
        float _1628 = _1519 * 0.5;
        float _1629 = _1529 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_698, _699, _700), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4258 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1654 + 1.0))) + _1659) * _1542;
        _1676 = _1509;
        _1677 = _1508;
        _1678 = _1507;
        _1679 = _1519;
        _1680 = _1518;
        _1681 = _1517;
        _1682 = _1529;
        _1683 = _1528;
        _1684 = _1527;
        _1685 = _1542;
        _1686 = _1541;
        _1687 = _1540;
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
    }
    else
    {
        _1676 = _1364;
        _1677 = _1364;
        _1678 = _1364;
        _1679 = _1364;
        _1680 = _1364;
        _1681 = _1364;
        _1682 = _1364;
        _1683 = _1364;
        _1684 = _1364;
        _1685 = _1364;
        _1686 = _1364;
        _1687 = _1364;
        _1688 = 0.0;
        _1689 = 0.0;
        _1690 = 0.0;
    }
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1376)) + _1376;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1377)) + _1377;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1378)) + _1378;
    float _1723 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1700));
    float _1744 = _970 * 0.5;
    float _1745 = _971 * 0.5;
    float _1746 = _972 * 0.5;
    float _1747 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1750 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1753 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1760 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1363, _1367, _1370, _1373));
        float _1764 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1768 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1775 = dot(vec4(cbModelParam._m0[39u]), vec4(_1744, _1745, _1746, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1744, _1745, _1746, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _885);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1858 = fma(_1034, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026)) + cbModelParam._m0[13u].w;
        float _1862 = fma(_1034, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026)) + cbModelParam._m0[14u].w;
        float _1866 = fma(_1034, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026)) + cbModelParam._m0[15u].w;
        float _1869 = fma(_972, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970));
        float _1872 = fma(_972, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970));
        float _1875 = fma(_972, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970));
        float _1903;
        if (_1869 > 0.0)
        {
            _1903 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1903 = frontier_phi_19_17_ladder;
        }
        float _2105;
        if (_1872 > 0.0)
        {
            _2105 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2105 = frontier_phi_28_24_ladder;
        }
        float _2358;
        if (_1875 > 0.0)
        {
            _2358 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2358 = frontier_phi_40_35_ladder;
        }
        float _2360 = isnan(_2105) ? _1903 : (isnan(_1903) ? _2105 : min(_1903, _2105));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1869) + _1858;
        float _2366 = (_2361 * _1872) + _1862;
        float _2367 = (_2361 * _1875) + _1866;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2368;
        float _2372 = _2368 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 > _2372) || ((_2366 < _2370) || ((_2365 < _2370) || (_2365 > _2372))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2367, cbModelParam._m0[9u].z, fma(_2366, cbModelParam._m0[9u].y, _2365 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2367, cbModelParam._m0[10u].z, fma(_2366, cbModelParam._m0[10u].y, _2365 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2367, cbModelParam._m0[11u].z, fma(_2366, cbModelParam._m0[11u].y, _2365 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_18_40_ladder = _2495.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2495.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2495.x * cbModelParam._m0[1u].y;
        }
        _1891 = frontier_phi_18_40_ladder_2;
        _1893 = frontier_phi_18_40_ladder_1;
        _1895 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_970, _971, _972), _1810);
        _1891 = _1879.x * cbModelParam._m0[1u].y;
        _1893 = _1879.y * cbModelParam._m0[1u].y;
        _1895 = _1879.z * cbModelParam._m0[1u].y;
    }
    float _1899 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _885);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1899 : min(cbModelParam._m0[25u].w, _1899));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1034, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1034, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1034, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_972, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970));
        float _1967 = fma(_972, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970));
        float _1970 = fma(_972, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970));
        float _2110;
        if (_1964 > 0.0)
        {
            _2110 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2110 = frontier_phi_30_26_ladder;
        }
        float _2385;
        if (_1967 > 0.0)
        {
            _2385 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2385 = frontier_phi_42_37_ladder;
        }
        float _2598;
        if (_1970 > 0.0)
        {
            _2598 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2598 = frontier_phi_51_48_ladder;
        }
        float _2600 = isnan(_2385) ? _2110 : (isnan(_2110) ? _2385 : min(_2110, _2385));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _1964) + _1953;
        float _2606 = (_2601 * _1967) + _1957;
        float _2607 = (_2601 * _1970) + _1961;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2609 = (-1.0) - _2608;
        float _2611 = _2608 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2607 > _2611) || ((_2607 < _2609) || ((_2606 > _2611) || ((_2606 < _2609) || ((_2605 < _2609) || (_2605 > _2611))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2607, cbModelParam._m0[17u].z, fma(_2606, cbModelParam._m0[17u].y, _2605 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2607, cbModelParam._m0[18u].z, fma(_2606, cbModelParam._m0[18u].y, _2605 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2607, cbModelParam._m0[19u].z, fma(_2606, cbModelParam._m0[19u].y, _2605 * cbModelParam._m0[19u].x))), _1900);
            frontier_phi_27_51_ladder = _2892.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2892.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2892.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_27_51_ladder_2;
        _1991 = frontier_phi_27_51_ladder_1;
        _1993 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_970, _971, _972), _1900);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2006 = (((_997 * _856) + _998) * _962) * ((cbModelParam._m0[1u].w * (_1989 - _1891)) + _1891);
    float _2008 = (((_997 * _857) + _998) * _962) * ((cbModelParam._m0[1u].w * (_1991 - _1893)) + _1893);
    float _2010 = (((_997 * _858) + _998) * _962) * ((cbModelParam._m0[1u].w * (_1993 - _1895)) + _1895);
    float _2013 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    uvec4 _2029 = floatBitsToUint(cbInstanceData._m0[_898 + 5u]);
    uint _2031 = _2029.x * 14u;
    uint _2032 = _2031 + 13u;
    float _2039 = _962 + (-1.0);
    float _2044 = (cbLight._m0[_2032].x * _2039) + 1.0;
    float _2045 = (cbLight._m0[_2032].y * _2039) + 1.0;
    float _2046 = (cbLight._m0[_2032].z * _2039) + 1.0;
    float _2047 = (cbLight._m0[_2032].w * _2039) + 1.0;
    uint _2048 = _2031 + 5u;
    float _2054 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2058 = _2031 + 4u;
    float _2064 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2068 = _2031 | 1u;
    float _2079 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_698, _699, _700));
    float _2082 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_698, _699, _700));
    float _4394 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _4405 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2087 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2089 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2096 = ((cbLight._m0[_2048].x * _2054) * _2089) + ((cbLight._m0[_2058].x * _2064) * _2087);
    float _2097 = ((_2054 * cbLight._m0[_2048].y) * _2089) + ((_2064 * cbLight._m0[_2058].y) * _2087);
    float _2098 = ((_2054 * cbLight._m0[_2048].z) * _2089) + ((_2064 * cbLight._m0[_2058].z) * _2087);
    uvec4 _2102 = floatBitsToUint(cbLight._m0[_2031 + 12u]);
    bool _2104 = _2102.x == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2104)
    {
        _2115 = _2096;
        _2117 = _2097;
        _2119 = _2098;
    }
    else
    {
        uint _2123 = _2031 + 6u;
        float _2139 = (dot(vec3(cbLight._m0[_2031 + 2u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2140 = _2139 * _2139;
        float _4416 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2141 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2142 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2115 = (((cbLight._m0[_2123].x * 0.3183098733425140380859375) * _2141) * _2142) + _2096;
        _2117 = (((cbLight._m0[_2123].y * 0.3183098733425140380859375) * _2141) * _2142) + _2097;
        _2119 = (((cbLight._m0[_2123].z * 0.3183098733425140380859375) * _2141) * _2142) + _2098;
    }
    bool _2122 = _2102.y == 0u;
    float _2160;
    float _2162;
    float _2164;
    if (_2122)
    {
        _2160 = _2115;
        _2162 = _2117;
        _2164 = _2119;
    }
    else
    {
        uint _2329 = _2031 + 7u;
        float _2345 = (dot(vec3(cbLight._m0[_2031 + 3u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4432 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2348 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2160 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2115;
        _2162 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2117;
        _2164 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2119;
    }
    uint _2167 = _2031 + 8u;
    float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _885) * 0.949999988079071044921875);
    float _2181 = _2180 * _2180;
    float _2182 = cbLight._m0[_2031].x + _780;
    float _2183 = cbLight._m0[_2031].y + _781;
    float _2184 = cbLight._m0[_2031].z + _782;
    float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
    float _2189 = _2188 * _2182;
    float _2190 = _2188 * _2183;
    float _2191 = _2188 * _2184;
    float _2192 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2031].xyz));
    float _4448 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _4459 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _2196 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2197 = dot(vec3(_698, _699, _700), vec3(_2189, _2190, _2191));
    float _4470 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2189, _2190, _2191));
    float _4481 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2181 * _2181;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2218 = 1.0 - _856;
    float _2219 = 1.0 - _857;
    float _2220 = 1.0 - _858;
    float _2227 = 1.0 - _2181;
    float _2238 = (0.5 / (((_2196 * ((_2195 * _2227) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2227) + _2181) * _2195))) * _2195;
    float _4492 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    uint _2251 = _2031 + 9u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _885) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2068].x + _780;
    float _2265 = cbLight._m0[_2068].y + _781;
    float _2266 = cbLight._m0[_2068].z + _782;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2068].xyz));
    float _4503 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2278 = dot(vec3(_698, _699, _700), vec3(_2271, _2272, _2273));
    float _4514 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2271, _2272, _2273));
    float _4525 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2263 * _2263;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
    float _2304 = 1.0 - _2263;
    float _2314 = (0.5 / (((_2196 * ((_2277 * _2304) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2304) + _2263) * _2277))) * _2277;
    float _4536 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2316 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    float _2326 = (((((_2297 * _2218) + _856) * cbLight._m0[_2251].x) * _2316) * _2054) + (((((_2217 * _2218) + _856) * cbLight._m0[_2167].x) * _2240) * _2064);
    float _2327 = (((((_2297 * _2219) + _857) * cbLight._m0[_2251].y) * _2316) * _2054) + (((((_2217 * _2219) + _857) * cbLight._m0[_2167].y) * _2240) * _2064);
    float _2328 = (((((_2297 * _2220) + _858) * cbLight._m0[_2251].z) * _2316) * _2054) + (((((_2217 * _2220) + _858) * cbLight._m0[_2167].z) * _2240) * _2064);
    float _2390;
    float _2392;
    float _2394;
    if (_2104)
    {
        _2390 = _2326;
        _2392 = _2327;
        _2394 = _2328;
    }
    else
    {
        uint _2396 = _2031 + 2u;
        uint _2400 = _2031 + 10u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _885) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _780;
        float _2417 = cbLight._m0[_2396].y + _781;
        float _2418 = cbLight._m0[_2396].z + _782;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2396].xyz));
        float _4547 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2430 = dot(vec3(_698, _699, _700), vec3(_2423, _2424, _2425));
        float _4558 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4569 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2456 = 1.0 - _2415;
        float _2466 = (0.5 / (((_2196 * ((_2429 * _2456) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2456) + _2415) * _2429))) * _2429;
        float _4580 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2390 = (((((_2449 * _2218) + _856) * cbLight._m0[_2400].x) * _2468) * _2469) + _2326;
        _2392 = (((((_2449 * _2219) + _857) * cbLight._m0[_2400].y) * _2468) * _2469) + _2327;
        _2394 = (((((_2449 * _2220) + _858) * cbLight._m0[_2400].z) * _2468) * _2469) + _2328;
    }
    float _2504;
    float _2506;
    float _2508;
    if (_2122)
    {
        _2504 = _2390;
        _2506 = _2392;
        _2508 = _2394;
    }
    else
    {
        uint _2515 = _2031 + 3u;
        uint _2519 = _2031 + 11u;
        float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2515].w)) * _885) * 0.949999988079071044921875);
        float _2534 = _2533 * _2533;
        float _2535 = cbLight._m0[_2515].x + _780;
        float _2536 = cbLight._m0[_2515].y + _781;
        float _2537 = cbLight._m0[_2515].z + _782;
        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
        float _2542 = _2541 * _2535;
        float _2543 = _2541 * _2536;
        float _2544 = _2541 * _2537;
        float _2545 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2515].xyz));
        float _4596 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2549 = dot(vec3(_698, _699, _700), vec3(_2542, _2543, _2544));
        float _4607 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2553 = dot(vec3(cbLight._m0[_2515].xyz), vec3(_2542, _2543, _2544));
        float _4618 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2557 = _2534 * _2534;
        float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
        float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
        float _2575 = 1.0 - _2534;
        float _2585 = (0.5 / (((_2196 * ((_2548 * _2575) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2575) + _2534) * _2548))) * _2548;
        float _4629 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2504 = (((((_2568 * _2218) + _856) * cbLight._m0[_2519].x) * _2587) * _2588) + _2390;
        _2506 = (((((_2568 * _2219) + _857) * cbLight._m0[_2519].y) * _2587) * _2588) + _2392;
        _2508 = (((((_2568 * _2220) + _858) * cbLight._m0[_2519].z) * _2587) * _2588) + _2394;
    }
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_2029.y == 0u)
    {
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2663;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2663;
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2663;
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.x;
        uint _2690 = uint((float(_2678.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2679))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2679)));
        float _2700 = (log2(_2666 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2701 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        uint _2704 = uint(isnan(14.0) ? _2701 : (isnan(_2701) ? 14.0 : min(_2701, 14.0)));
        uvec4 _2709 = texelFetch(g_lightClusterGridBuffer, int(((_2704 << 2u) + (_2690 << 6u)) >> 2u));
        uint _2710 = _2709.x;
        uint _2711 = _2678.z;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((((1u << ((_2711 >> 4u) & 15u)) + 4294967295u) & _2710) == 0u) || ((_2711 & 240u) == 0u))
        {
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
        }
        else
        {
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            uint _3055 = 0u;
            uint _3064;
            bool _3065;
            for (;;)
            {
                _3064 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                _3065 = _3064 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3065)
                {
                    frontier_phi_68_pred = _3051;
                    frontier_phi_68_pred_1 = _3054;
                    frontier_phi_68_pred_2 = _3053;
                    frontier_phi_68_pred_3 = _3052;
                    frontier_phi_68_pred_4 = _3050;
                    frontier_phi_68_pred_5 = _3049;
                }
                else
                {
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    uint _3200;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3051;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3064;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    for (;;)
                    {
                        uint _3204 = uint(findLSB(_3200)) + (_3055 << 5u);
                        uint _3201 = (_3200 + 4294967295u) & _3200;
                        uint _3206 = _3204 * 48u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3226 = (_3204 * 48u) + 4u;
                        vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3245 = (_3204 * 48u) + 8u;
                        vec3 _3256 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x));
                        float _3260 = _3220.x - _2664;
                        float _3261 = _3220.y - _2665;
                        float _3262 = _3220.z - _2666;
                        float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                        float _3266 = inversesqrt(_3263);
                        float _3267 = _3266 * _3260;
                        float _3268 = _3266 * _3261;
                        float _3269 = _3266 * _3262;
                        float _3270 = dot(vec3(_823, _826, _829), vec3(_3267, _3268, _3269));
                        float _3275 = 1.0 - (_3263 * _3220.w);
                        float _4655 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3277 = sqrt(_3263) * _3239.w;
                        float _3280 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3270) + _3281;
                        float _3287 = _3277 * _3277;
                        float _3290 = ((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3276) / ((_3287 * 0.699999988079071044921875) + 1.0);
                        float _3294 = (-0.0) - _2664;
                        float _3295 = (-0.0) - _2665;
                        float _3296 = (-0.0) - _2666;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3311 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                        float _3312 = 1.0 - _978;
                        float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                        float _3320 = _3319 * _3319;
                        float _3321 = _3320 * _3320;
                        float _3322 = _3301 + _3267;
                        float _3323 = _3302 + _3268;
                        float _3324 = _3303 + _3269;
                        float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                        float _3332 = dot(vec3(_823, _826, _829), vec3(_3301, _3302, _3303));
                        float _4671 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3336 = dot(vec3(_823, _826, _829), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                        float _4682 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3339 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                        float _3344 = _3280 * _3320;
                        float _3345 = _3344 * _3344;
                        float _3348 = ((1.0 - _3345) * _3270) + _3345;
                        float _4693 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3350 = 1.0 - _3320;
                        float _3360 = (0.5 / (((_3349 * ((_3335 * _3350) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3349 * _3350) + _3320) * _3335))) * _3349;
                        float _4704 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3371 = (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3343 * _3343) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125))) * _3276;
                        _3124 = (_3290 * _3239.x) + _3197;
                        _3125 = (_3290 * _3239.y) + _3198;
                        _3126 = (_3290 * _3239.z) + _3199;
                        _3121 = (_3371 * _3256.x) + _3194;
                        _3122 = (_3371 * _3256.y) + _3195;
                        _3123 = (_3371 * _3256.z) + _3196;
                        if (_3201 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3123;
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3201;
                        }
                    }
                    frontier_phi_68_pred = _3123;
                    frontier_phi_68_pred_1 = _3126;
                    frontier_phi_68_pred_2 = _3125;
                    frontier_phi_68_pred_3 = _3124;
                    frontier_phi_68_pred_4 = _3122;
                    frontier_phi_68_pred_5 = _3121;
                }
                _2902 = frontier_phi_68_pred;
                _2908 = frontier_phi_68_pred_1;
                _2906 = frontier_phi_68_pred_2;
                _2904 = frontier_phi_68_pred_3;
                _2900 = frontier_phi_68_pred_4;
                _2898 = frontier_phi_68_pred_5;
                uint _3056 = _3055 + 1u;
                if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3049 = _2898;
                    _3050 = _2900;
                    _3051 = _2902;
                    _3052 = _2904;
                    _3053 = _2906;
                    _3054 = _2908;
                    _3055 = _3056;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
        }
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.z;
        uint _2914 = (_2912 >> 8u) & 15u;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((4294967295u << _2914) & _2710) == 0u)
        {
            _3017 = _2897;
            _3019 = _2899;
            _3021 = _2901;
            _3023 = _2903;
            _3025 = _2905;
            _3027 = _2907;
        }
        else
        {
            float _3042 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
            float _3043 = _3042 * _2664;
            float _3044 = _3042 * _2665;
            float _3045 = _3042 * _2666;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2914 < ((_2912 >> 12u) & 15u))
            {
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3177 = _2897;
                float _3178 = _2899;
                float _3179 = _2901;
                float _3180 = _2903;
                float _3181 = _2905;
                float _3182 = _2907;
                uint _3183 = _2914;
                uint _3192;
                bool _3193;
                for (;;)
                {
                    _3192 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                    _3193 = _3192 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3193)
                    {
                        frontier_phi_79_pred = _3182;
                        frontier_phi_79_pred_1 = _3181;
                        frontier_phi_79_pred_2 = _3180;
                        frontier_phi_79_pred_3 = _3179;
                        frontier_phi_79_pred_4 = _3178;
                        frontier_phi_79_pred_5 = _3177;
                    }
                    else
                    {
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3398 = _3177;
                        float _3399 = _3178;
                        float _3400 = _3179;
                        float _3401 = _3180;
                        float _3402 = _3181;
                        float _3403 = _3182;
                        uint _3404 = _3192;
                        uint _3405;
                        vec4 _3430;
                        float _3431;
                        vec4 _3446;
                        vec3 _3458;
                        vec4 _3473;
                        vec4 _3488;
                        float _3534;
                        bool _3535;
                        for (;;)
                        {
                            uint _3415 = ((_3183 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3404));
                            _3405 = (_3404 + 4294967295u) & _3404;
                            uint _3417 = _3415 * 40u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3431 = _3430.w;
                            uint _3433 = (_3415 * 40u) + 4u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3415 * 40u) + 8u;
                            _3458 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x));
                            uint _3460 = (_3415 * 40u) + 16u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3415 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3415 * 40u) + 24u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3509 = (_3415 * 40u) + 28u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3534 = fma(_2666, _3522.z, fma(_2665, _3522.y, _3522.x * _2664)) + _3522.w;
                            _3535 = !((fma(_2666, _3503.z, fma(_2665, _3503.y, _3503.x * _2664)) + _3503.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3535)
                            {
                                float _3562 = _3430.x - _2664;
                                float _3563 = _3430.y - _2665;
                                float _3564 = _3430.z - _2666;
                                float _3565 = dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564));
                                float _3568 = inversesqrt(_3565);
                                float _3569 = _3568 * _3562;
                                float _3570 = _3568 * _3563;
                                float _3571 = _3568 * _3564;
                                float _3575 = 1.0 - (_3565 / (_3431 * _3431));
                                float _4715 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3580 = sqrt(_3565) * _3446.w;
                                float _3582 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                                float _3583 = _3582 * _3582;
                                float _3586 = ((1.0 - _3583) * dot(vec3(_3569, _3570, _3571), vec3(_823, _826, _829))) + _3583;
                                float _3589 = _3580 * _3580;
                                float _3593 = (fma(_2666, _3473.z, fma(_2665, _3473.y, _3473.x * _2664)) + _3473.w) / _3534;
                                float _3594 = (fma(_2666, _3488.z, fma(_2665, _3488.y, _3488.x * _2664)) + _3488.w) / _3534;
                                float _3598 = 1.0 - dot(vec2(_3593, _3594), vec2(_3593, _3594));
                                float _4731 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3600 = _3599 * (((isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0))) * _3576) / ((_3589 * 0.699999988079071044921875) + 1.0));
                                float _3612 = exp2(log2(1.0 / ((_3589 * 3.5) + 5.0)) * 0.25);
                                float _3613 = 1.0 - _978;
                                float _3620 = sqrt(1.0 - ((1.0 - (_3613 * _3613)) * (1.0 - (_3612 * _3612))));
                                float _3621 = _3620 * _3620;
                                float _3622 = _3621 * _3621;
                                float _3623 = _3569 - _3043;
                                float _3624 = _3570 - _3044;
                                float _3625 = _3571 - _3045;
                                float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                                float _3633 = dot(vec3(_823, _826, _829), vec3((-0.0) - _3043, (-0.0) - _3044, (-0.0) - _3045));
                                float _4742 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3637 = dot(vec3(_823, _826, _829), vec3(_3629 * _3623, _3629 * _3624, _3629 * _3625));
                                float _4753 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3644 = ((_3640 * _3640) * (_3622 + (-1.0))) + 1.0;
                                float _3645 = _3582 * _3621;
                                float _3646 = _3645 * _3645;
                                float _3652 = ((1.0 - _3646) * dot(vec3(_823, _826, _829), vec3(_3569, _3570, _3571))) + _3646;
                                float _4764 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3654 = 1.0 - _3621;
                                float _3664 = (0.5 / (((_3653 * ((_3636 * _3654) + _3621)) + 9.9999999392252902907785028219223e-09) + (((_3653 * _3654) + _3621) * _3636))) * _3653;
                                float _4775 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3674 = (_3599 * _3576) * (((_3622 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3644 * _3644) * ((_3589 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3600 * _3446.z;
                                frontier_phi_85_pred_1 = _3600 * _3446.y;
                                frontier_phi_85_pred_2 = _3600 * _3446.x;
                                frontier_phi_85_pred_3 = _3674 * _3458.z;
                                frontier_phi_85_pred_4 = _3674 * _3458.y;
                                frontier_phi_85_pred_5 = _3674 * _3458.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3683 = frontier_phi_85_pred;
                            _3682 = frontier_phi_85_pred_1;
                            _3681 = frontier_phi_85_pred_2;
                            _3680 = frontier_phi_85_pred_3;
                            _3679 = frontier_phi_85_pred_4;
                            _3678 = frontier_phi_85_pred_5;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            if (_3405 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3405;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3390;
                        frontier_phi_79_pred_1 = _3389;
                        frontier_phi_79_pred_2 = _3388;
                        frontier_phi_79_pred_3 = _3387;
                        frontier_phi_79_pred_4 = _3386;
                        frontier_phi_79_pred_5 = _3385;
                    }
                    _3028 = frontier_phi_79_pred;
                    _3026 = frontier_phi_79_pred_1;
                    _3024 = frontier_phi_79_pred_2;
                    _3022 = frontier_phi_79_pred_3;
                    _3020 = frontier_phi_79_pred_4;
                    _3018 = frontier_phi_79_pred_5;
                    uint _3184 = _3183 + 1u;
                    if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3177 = _3018;
                        _3178 = _3020;
                        _3179 = _3022;
                        _3180 = _3024;
                        _3181 = _3026;
                        _3182 = _3028;
                        _3183 = _3184;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3024;
                frontier_phi_60_61_ladder_1 = _3028;
                frontier_phi_60_61_ladder_2 = _3026;
                frontier_phi_60_61_ladder_3 = _3022;
                frontier_phi_60_61_ladder_4 = _3020;
                frontier_phi_60_61_ladder_5 = _3018;
            }
            else
            {
                frontier_phi_60_61_ladder = _2903;
                frontier_phi_60_61_ladder_1 = _2907;
                frontier_phi_60_61_ladder_2 = _2905;
                frontier_phi_60_61_ladder_3 = _2901;
                frontier_phi_60_61_ladder_4 = _2899;
                frontier_phi_60_61_ladder_5 = _2897;
            }
            _3017 = frontier_phi_60_61_ladder_5;
            _3019 = frontier_phi_60_61_ladder_4;
            _3021 = frontier_phi_60_61_ladder_3;
            _3023 = frontier_phi_60_61_ladder;
            _3025 = frontier_phi_60_61_ladder_2;
            _3027 = frontier_phi_60_61_ladder_1;
        }
        float _3032 = isnan(1.0) ? _962 : (isnan(_962) ? 1.0 : min(_962, 1.0));
        _2722 = (_3032 * _3023) + _2160;
        _2724 = (_3032 * _3025) + _2162;
        _2726 = (_3032 * _3027) + _2164;
        _2728 = ((_3017 * _856) * _3032) + _2504;
        _2730 = ((_3019 * _857) * _3032) + _2506;
        _2732 = ((_3021 * _858) * _3032) + _2508;
    }
    else
    {
        _2722 = _2160;
        _2724 = _2162;
        _2726 = _2164;
        _2728 = _2504;
        _2730 = _2506;
        _2732 = _2508;
    }
    float _2742 = ((((cbMatDynParam._m0[13u].x - _932) * _938) + _932) * _2218) * cbMatDynParam._m0[9u].x;
    float _2743 = ((((cbMatDynParam._m0[13u].y - _933) * _938) + _933) * _2219) * cbMatDynParam._m0[9u].y;
    float _2744 = ((((cbMatDynParam._m0[13u].z - _934) * _938) + _934) * _2220) * cbMatDynParam._m0[9u].z;
    float _2755 = dot(vec3(_698, _699, _700), vec3(0.0, -1.0, 0.0));
    float _4791 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2758 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2762 = dot(vec3(_970, _971, _972), vec3(0.0, -1.0, 0.0));
    float _4802 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2768 = exp2(log2(isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * 4.0);
    float _4813 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _4824 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _4835 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2812 = abs(exp2(log2(_963) * cbMatDynParam._m0[12u].x));
    float _2813 = isnan(0.100000001490116119384765625) ? _2812 : (isnan(_2812) ? 0.100000001490116119384765625 : max(_2812, 0.100000001490116119384765625));
    float _2819 = ((isnan(0.699999988079071044921875) ? _2813 : (isnan(_2813) ? 0.699999988079071044921875 : min(_2813, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _2829 = ((((cbMatDynParam._m0[10u].x * cbPerFrame._m0[3u].x) * ((_2728 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1799)) + (_2768 * cbMatDynParam._m0[11u].x))) + ((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * ((_2722 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _962)) + (_2758 * cbMatDynParam._m0[11u].x)))) + cbMatDynParam._m0[7u].x) + (_2819 * (cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x));
    float _2832 = ((((cbMatDynParam._m0[10u].y * cbPerFrame._m0[3u].x) * ((_2730 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1799)) + (_2768 * cbMatDynParam._m0[11u].y))) + ((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * ((_2724 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _962)) + (_2758 * cbMatDynParam._m0[11u].y)))) + cbMatDynParam._m0[7u].y) + (_2819 * (cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y));
    float _2835 = ((((cbMatDynParam._m0[10u].z * cbPerFrame._m0[3u].x) * ((_2732 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1799)) + (_2768 * cbMatDynParam._m0[11u].z))) + ((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * ((_2726 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _962)) + (_2758 * cbMatDynParam._m0[11u].z)))) + cbMatDynParam._m0[7u].z) + (_2819 * (cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z));
    float _2836 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2837 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
    float _2838 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
    uint _2839 = _898 + 6u;
    float _2847 = _800 / cbSceneParam._m0[86u].x;
    float _2848 = _801 / cbSceneParam._m0[86u].y;
    vec4 _2862 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, (log2((isnan(cbSceneParam._m0[77u].w) ? _723 : (isnan(_723) ? cbSceneParam._m0[77u].w : min(_723, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2864 = _2862.x;
    float _2865 = _2862.y;
    float _2866 = _2862.z;
    float _2867 = _2862.w;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_723 > cbSceneParam._m0[78u].w)
    {
        float _2922 = isnan(_723) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _723 : min(cbSceneParam._m0[80u].w, _723));
        float _2923 = _2922 / _723;
        float _2934 = _2923 * _773;
        float _2935 = _774 * _2923;
        float _2936 = (-0.0) - _2935;
        float _2937 = _2923 * _775;
        float _2939 = (cbSceneParam._m0[77u].w * _2936) / _2922;
        float _2940 = _2939 + cbSceneParam._m0[79u].w;
        float _2941 = cbSceneParam._m0[79u].w - _2935;
        float _2947 = sqrt(((_2934 * _2934) + (_2935 * _2935)) + (_2937 * _2937));
        float _2950 = (1.0 - (cbSceneParam._m0[77u].w / _2922)) * _2947;
        float _2955 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2957 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3134;
        if (abs((_2936 - _2939) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3134 = ((((_2940 > 0.0) ? exp2(_2955 * _2940) : (2.0 - exp2(_2957 * _2940))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2950;
        }
        else
        {
            float _3078 = 1.0 / cbSceneParam._m0[80u].x;
            float _3079 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : max(_2940, _2941));
            float _3080 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : min(_2940, _2941));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            _3134 = ((abs(_2947 / _2936) * cbSceneParam._m0[80u].y) * ((((_3089 - _3090) * 2.0) - ((exp2(_2955 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0)))) - exp2(_2955 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))))) * _3078)) - ((exp2(_2957 * _3089) - exp2(_2957 * _3090)) * _3078))) + (_2950 * cbSceneParam._m0[80u].z);
        }
        vec4 _3136 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, 1.0), 0.0);
        float _3145 = exp2((_3134 * (-1.44269502162933349609375)) * (1.0 - _3136.w));
        float _3146 = log2(_3145);
        float _3162 = log2(_2867);
        _2959 = (exp2(_3162 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].x)) * _3136.x) / cbSceneParam._m0[78u].x)) + _2864;
        _2961 = (exp2(_3162 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].y)) * _3136.y) / cbSceneParam._m0[78u].y)) + _2865;
        _2963 = (exp2(_3162 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].z)) * _3136.z) / cbSceneParam._m0[78u].z)) + _2866;
        _2965 = _3145 * _2867;
    }
    else
    {
        _2959 = _2864;
        _2961 = _2865;
        _2963 = _2866;
        _2965 = _2867;
    }
    bool _3172;
    vec4 _2975;
    vec4 _2997;
    float _2999;
    float _3003;
    float _3004;
    float _3005;
    float _3006;
    bool _3016;
    for (;;)
    {
        _2975 = cbMatDynParam._m0[0u];
        float _2977 = roundEven(_2975.y);
        bool _2978 = _2977 == 3.0;
        float _2979 = log2(_2965);
        float _2986 = exp2(_2979 * cbSceneParam._m0[78u].x) * _2836;
        float _2987 = exp2(_2979 * cbSceneParam._m0[78u].y) * _2837;
        float _2988 = exp2(_2979 * cbSceneParam._m0[78u].z) * _2838;
        float _2995 = _789 + (-0.5);
        _2997 = cbMtdParam._m0[1u];
        _2999 = _2997.y * _2995;
        float _3002 = (_2977 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3003 = _3002 * (_2978 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2959)));
        _3004 = _3002 * (_2978 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2961)));
        _3005 = _3002 * (_2978 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2963)));
        _3006 = _2995 * 0.999000012874603271484375;
        _3016 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3016)
        {
            if ((cbInstanceData._m0[_898 + 7u].x + _3006) < 0.5)
            {
                _3172 = true;
                break;
            }
        }
        uint _3113 = _899 + uint(_2975.w);
        if ((cbInstanceData._m0[_3113].w < 1.0) && ((cbInstanceData._m0[_3113].w + _3006) < 0.5))
        {
            _3172 = true;
            break;
        }
        if ((_2999 + _449) < _2997.x)
        {
            _3172 = true;
            break;
        }
        _3172 = false;
        break;
    }
    float _3376;
    if (_3172)
    {
        discard_state = true;
        _3376 = 0.0;
    }
    else
    {
        _3376 = cbInstanceData._m0[_2839].w;
    }
    SV_Target.x = _3003;
    SV_Target.y = _3004;
    SV_Target.z = _3005;
    SV_Target.w = _3376;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2839].w;
    discard_exit();
}


