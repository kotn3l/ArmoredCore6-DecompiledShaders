#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[24];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1366;
float _3770;
float _3771;
float _3772;
float _3773;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251;
    float _252;
    float _253;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
    }
    else
    {
        _251 = _237;
        _252 = _238;
        _253 = _239;
    }
    vec4 _283 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _311 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _343 = _337.x * cbMatDynParam._m0[17u].x;
    float _344 = _337.y * cbMatDynParam._m0[17u].y;
    float _345 = _337.z * cbMatDynParam._m0[17u].z;
    vec4 _364 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _383 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _394 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _396 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (_383.x + 0.00999999977648258209228515625))) * _394;
    float _3782 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _404 = (_397 * ((_364.x * cbMatDynParam._m0[18u].x) - _343)) + _343;
    float _405 = (_397 * ((_364.y * cbMatDynParam._m0[18u].y) - _344)) + _344;
    float _406 = (_397 * ((_364.z * cbMatDynParam._m0[18u].z) - _345)) + _345;
    float _411 = (0.5 - ((cbMatDynParam._m0[22u].z * 0.5) * (_383.y + 0.00999999977648258209228515625))) * _394;
    float _3793 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _419 = (((_311.x * cbMatDynParam._m0[19u].x) - _404) * _412) + _404;
    float _420 = (((_311.y * cbMatDynParam._m0[19u].y) - _405) * _412) + _405;
    float _421 = (((_311.z * cbMatDynParam._m0[19u].z) - _406) * _412) + _406;
    float _426 = (0.5 - ((cbMatDynParam._m0[22u].w * 0.5) * (_383.z + 0.00999999977648258209228515625))) * _394;
    float _3804 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _434 = (((_283.x * cbMatDynParam._m0[20u].x) - _419) * _427) + _419;
    float _435 = (((_283.y * cbMatDynParam._m0[20u].y) - _420) * _427) + _420;
    float _436 = (((_283.z * cbMatDynParam._m0[20u].z) - _421) * _427) + _421;
    vec4 _448 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _451 = _448.x * _337.w;
    vec4 _463 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _467 = _463.z;
    vec4 _480 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w));
    float _491 = ((_480.x - _465) * _397) + _465;
    float _492 = ((_480.y - _466) * _397) + _466;
    float _493 = ((_480.z - _467) * _397) + _467;
    vec4 _506 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _517 = ((_506.x - _491) * _412) + _491;
    float _518 = ((_506.y - _492) * _412) + _492;
    float _519 = ((_506.z - _493) * _412) + _493;
    vec4 _531 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _542 = ((_531.x - _517) * _427) + _517;
    float _543 = ((_531.y - _518) * _427) + _518;
    float _544 = ((_531.z - _519) * _427) + _519;
    vec4 _560 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _579 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _598 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _600 = _598.x;
    float _601 = _598.y;
    float _603 = _598.z * cbMatDynParam._m0[22u].x;
    vec4 _617 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _625 = (((_617.z * cbMatDynParam._m0[21u].w) - _603) * _397) + _603;
    float _628 = (((_579.z * cbMatDynParam._m0[21u].z) - _625) * _412) + _625;
    float _631 = (((_560.z * cbMatDynParam._m0[23u].x) - _628) * _427) + _628;
    vec4 _644 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _658 = (_397 * (_617.x - _600)) + _600;
    float _659 = (_397 * (_617.y - _601)) + _601;
    float _664 = ((_579.x - _658) * _412) + _658;
    float _665 = ((_579.y - _659) * _412) + _659;
    float _674 = ((((_560.x - _664) * _427) + _664) * 2.0) + (-1.0);
    float _675 = ((((_560.y - _665) * _427) + _665) * 2.0) + (-1.0);
    float _676 = dot(vec2(_674, _675), vec2(_674, _675));
    float _3815 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _681 = sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))));
    float _685 = _674 + (cbMatDynParam._m0[22u].y * ((_644.x * 2.0) + (-1.0)));
    float _686 = _675 + (cbMatDynParam._m0[22u].y * ((_644.y * 2.0) + (-1.0)));
    float _689 = fma(_681, _251, fma(_686, _243 * TANGENT.x, (_229 * _221) * _685));
    float _692 = fma(_681, _252, fma(_686, _243 * TANGENT.y, (_229 * _222) * _685));
    float _695 = fma(_681, _253, fma(_686, _243 * TANGENT.z, (_229 * _223) * _685));
    float _699 = inversesqrt(dot(vec3(_689, _692, _695), vec3(_689, _692, _695)));
    float _700 = _699 * _689;
    float _701 = _699 * _692;
    float _702 = _699 * _695;
    float _3826 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3837 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3848 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3859 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _706 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _707 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _708 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _709 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    vec4 _789 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _791 = _789.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1047 = sqrt(((_775 * _775) + (_776 * _776)) + (_777 * _777));
        float _1053 = (cbMatDynParam._m0[5u].x * _1047) + cbMatDynParam._m0[5u].y;
        float _3903 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1058 = (cbMatDynParam._m0[5u].z * _1047) + cbMatDynParam._m0[5u].w;
        float _3914 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) - _1054)) + _1054) < ((_791 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _802 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _803 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _805 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _807 = _805.w;
    float _825 = fma(_702, cbSceneParam._m0[5u].z, fma(_701, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _700));
    float _828 = fma(_702, cbSceneParam._m0[6u].z, fma(_701, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _700));
    float _831 = fma(_702, cbSceneParam._m0[7u].z, fma(_701, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _700));
    vec4 _833 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _835 = _833.x;
    float _837 = _833.w;
    float _838 = _835 * _835;
    float _858 = (((_838 - _706) + (_837 * _706)) * cbMtdParam._m0[3u].x) + _706;
    float _859 = (((_838 - _707) + (_837 * _707)) * cbMtdParam._m0[3u].x) + _707;
    float _860 = (((_838 - _708) + (_837 * _708)) * cbMtdParam._m0[3u].x) + _708;
    float _861 = (((_833.y - _709) + (_837 * _709)) * cbMtdParam._m0[3u].x) + _709;
    vec4 _862 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _878 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(_858, _859, _860), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _862.z;
    float _887 = (((cbMatDynParam._m0[16u].x - _861) * cbMatDynParam._m0[16u].z) * _878) + _861;
    uint _900 = uint(roundEven(NORMAL.w)) * 13u;
    uint _901 = _900 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_902].z;
    float _3925 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    vec4 _920 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _934 = ((((_911 * _807) - _911) + _920.x) * cbMtdParam._m0[3u].x) + _911;
    float _935 = ((((_912 * _807) - _912) + _920.y) * cbMtdParam._m0[3u].x) + _912;
    float _936 = ((((_913 * _807) - _913) + _920.z) * cbMtdParam._m0[3u].x) + _913;
    float _940 = cbMatDynParam._m0[13u].w * _878;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _802, cbSceneParam._m0[86u].y * _803));
    float _964 = _961.x * TEXCOORD_8;
    float _965 = dot(vec3(_700, _701, _702), vec3(_782, _783, _784));
    float _968 = _965 * 2.0;
    float _972 = (_968 * _700) - _782;
    float _973 = (_968 * _701) - _783;
    float _974 = (_968 * _702) - _784;
    float _978 = abs(dot(vec3(_782, _783, _784), vec3(_700, _701, _702)));
    float _3958 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _980 = sqrt(_887);
    float _993 = exp2((_980 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_980 * 3.0));
    float _999 = (1.0 - _993) * ((_980 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1000 = _993 * _980;
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1365;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1091 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1095 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1099 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1123 = _1028 + _700;
        float _1124 = _1032 + _701;
        float _1125 = _1036 + _702;
        float _1135 = fma(_1125, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123)) - _1091;
        float _1136 = fma(_1125, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123)) - _1095;
        float _1137 = fma(_1125, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123)) - _1099;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1091 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1095 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[34u].z) + ((((((_1099 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1193 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1159.x + (-0.5));
        float _1195 = _1193 * (_1159.y + (-0.5));
        float _1196 = _1193 * (_1159.z + (-0.5));
        float _1203 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1166.x + (-0.5));
        float _1205 = _1203 * (_1166.y + (-0.5));
        float _1206 = _1203 * (_1166.z + (-0.5));
        float _1213 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1173.x + (-0.5));
        float _1215 = _1213 * (_1173.y + (-0.5));
        float _1216 = _1213 * (_1173.z + (-0.5));
        float _1223 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1180.x + (-0.5));
        float _1225 = _1223 * (_1180.y + (-0.5));
        float _1226 = _1223 * (_1180.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1247 = (dot(vec3(_700, _701, _702), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1257 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4006 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1259 + 1.0))) + _1264) * _1227;
        float _1274 = _1195 * 0.5;
        float _1275 = _1205 * 0.5;
        float _1276 = _1215 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_700, _701, _702), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4039 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1301 + 1.0))) + _1306) * _1228;
        float _1316 = _1196 * 0.5;
        float _1317 = _1206 * 0.5;
        float _1318 = _1216 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_700, _701, _702), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4072 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1343 + 1.0))) + _1348) * _1229;
        _1365 = _1196;
        _1367 = _1195;
        _1368 = _1194;
        _1369 = _1206;
        _1370 = _1205;
        _1371 = _1204;
        _1372 = _1216;
        _1373 = _1215;
        _1374 = _1214;
        _1375 = _1229;
        _1376 = _1228;
        _1377 = _1227;
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1366;
        _1367 = _1366;
        _1368 = _1366;
        _1369 = _1366;
        _1370 = _1366;
        _1371 = _1366;
        _1372 = _1366;
        _1373 = _1366;
        _1374 = _1366;
        _1375 = _1366;
        _1376 = _1366;
        _1377 = _1366;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1409 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1413 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1417 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1440 = _1028 + _700;
        float _1441 = _1032 + _701;
        float _1442 = _1036 + _702;
        float _1452 = fma(_1442, cbModelParam._m0[30u].z, fma(_1441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1440)) - _1409;
        float _1453 = fma(_1442, cbModelParam._m0[31u].z, fma(_1441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1440)) - _1413;
        float _1454 = fma(_1442, cbModelParam._m0[32u].z, fma(_1441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1440)) - _1417;
        float _1458 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
        float _1471 = ((_1458 * _1452) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1409 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1458 * _1453) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1413 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1458 * _1454) / cbModelParam._m0[35u].z) + ((((((_1417 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1471, _1472, _1473), 0.0);
        float _1508 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1475.x + (-0.5));
        float _1510 = _1508 * (_1475.y + (-0.5));
        float _1511 = _1508 * (_1475.z + (-0.5));
        float _1518 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1482.x + (-0.5));
        float _1520 = _1518 * (_1482.y + (-0.5));
        float _1521 = _1518 * (_1482.z + (-0.5));
        float _1528 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1489.x + (-0.5));
        float _1530 = _1528 * (_1489.y + (-0.5));
        float _1531 = _1528 * (_1489.z + (-0.5));
        float _1538 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1496.x + (-0.5));
        float _1540 = _1538 * (_1496.y + (-0.5));
        float _1541 = _1538 * (_1496.z + (-0.5));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = _1509 * 0.5;
        float _1546 = _1519 * 0.5;
        float _1547 = _1529 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_700, _701, _702), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4135 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1572 + 1.0))) + _1577) * _1542;
        float _1587 = _1510 * 0.5;
        float _1588 = _1520 * 0.5;
        float _1589 = _1530 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_700, _701, _702), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4168 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1614 + 1.0))) + _1619) * _1543;
        float _1629 = _1511 * 0.5;
        float _1630 = _1521 * 0.5;
        float _1631 = _1531 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_700, _701, _702), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4201 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1656 + 1.0))) + _1661) * _1544;
        _1678 = _1511;
        _1679 = _1510;
        _1680 = _1509;
        _1681 = _1521;
        _1682 = _1520;
        _1683 = _1519;
        _1684 = _1531;
        _1685 = _1530;
        _1686 = _1529;
        _1687 = _1544;
        _1688 = _1543;
        _1689 = _1542;
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
    }
    else
    {
        _1678 = _1366;
        _1679 = _1366;
        _1680 = _1366;
        _1681 = _1366;
        _1682 = _1366;
        _1683 = _1366;
        _1684 = _1366;
        _1685 = _1366;
        _1686 = _1366;
        _1687 = _1366;
        _1688 = _1366;
        _1689 = _1366;
        _1690 = 0.0;
        _1691 = 0.0;
        _1692 = 0.0;
    }
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1378)) + _1378;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1379)) + _1379;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1380)) + _1380;
    float _1725 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1702));
    float _1746 = _972 * 0.5;
    float _1747 = _973 * 0.5;
    float _1748 = _974 * 0.5;
    float _1749 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1752 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1755 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1786;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1762 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1365, _1369, _1372, _1375));
        float _1766 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1770 = dot(vec4(_1746, _1747, _1748, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1777 = dot(vec4(cbModelParam._m0[39u]), vec4(_1746, _1747, _1748, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1797;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1788 = dot(vec4(cbModelParam._m0[40u]), vec4(_1746, _1747, _1748, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1801 = (_1797 * cbModelParam._m0[1u].x) + (_1786 * (1.0 - cbModelParam._m0[1u].x));
    float _1811 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _887);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1811 : min(cbModelParam._m0[25u].z, _1811));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1860 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1864 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1868 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1871 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1874 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1877 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1905;
        if (_1871 > 0.0)
        {
            _1905 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1905 = frontier_phi_19_17_ladder;
        }
        float _2128;
        if (_1874 > 0.0)
        {
            _2128 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2128 = frontier_phi_28_24_ladder;
        }
        float _2384;
        if (_1877 > 0.0)
        {
            _2384 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2384 = frontier_phi_40_35_ladder;
        }
        float _2386 = isnan(_2128) ? _1905 : (isnan(_1905) ? _2128 : min(_1905, _2128));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1871) + _1860;
        float _2392 = (_2387 * _1874) + _1864;
        float _2393 = (_2387 * _1877) + _1868;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2394;
        float _2398 = _2394 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 > _2398) || ((_2392 < _2396) || ((_2391 < _2396) || (_2391 > _2398))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2393, cbModelParam._m0[9u].z, fma(_2392, cbModelParam._m0[9u].y, _2391 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2393, cbModelParam._m0[10u].z, fma(_2392, cbModelParam._m0[10u].y, _2391 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2393, cbModelParam._m0[11u].z, fma(_2392, cbModelParam._m0[11u].y, _2391 * cbModelParam._m0[11u].x))), _1812);
            frontier_phi_18_40_ladder = _2521.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2521.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2521.x * cbModelParam._m0[1u].y;
        }
        _1893 = frontier_phi_18_40_ladder_2;
        _1895 = frontier_phi_18_40_ladder_1;
        _1897 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1812);
        _1893 = _1881.x * cbModelParam._m0[1u].y;
        _1895 = _1881.y * cbModelParam._m0[1u].y;
        _1897 = _1881.z * cbModelParam._m0[1u].y;
    }
    float _1901 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _887);
    float _1902 = isnan(_1901) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1901 : min(cbModelParam._m0[25u].w, _1901));
    float _1991;
    float _1993;
    float _1995;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1955 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1959 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1963 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1966 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1969 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1972 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _2133;
        if (_1966 > 0.0)
        {
            _2133 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2133 = frontier_phi_30_26_ladder;
        }
        float _2411;
        if (_1969 > 0.0)
        {
            _2411 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2411 = frontier_phi_42_37_ladder;
        }
        float _2624;
        if (_1972 > 0.0)
        {
            _2624 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2624 = frontier_phi_51_48_ladder;
        }
        float _2626 = isnan(_2411) ? _2133 : (isnan(_2133) ? _2411 : min(_2133, _2411));
        float _2627 = isnan(_2624) ? _2626 : (isnan(_2626) ? _2624 : min(_2626, _2624));
        float _2631 = (_2627 * _1966) + _1955;
        float _2632 = (_2627 * _1969) + _1959;
        float _2633 = (_2627 * _1972) + _1963;
        float _2634 = _2627 * 9.9999997473787516355514526367188e-05;
        float _2635 = (-1.0) - _2634;
        float _2637 = _2634 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2633 > _2637) || ((_2633 < _2635) || ((_2632 > _2637) || ((_2632 < _2635) || ((_2631 < _2635) || (_2631 > _2637))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2633, cbModelParam._m0[17u].z, fma(_2632, cbModelParam._m0[17u].y, _2631 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2633, cbModelParam._m0[18u].z, fma(_2632, cbModelParam._m0[18u].y, _2631 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2633, cbModelParam._m0[19u].z, fma(_2632, cbModelParam._m0[19u].y, _2631 * cbModelParam._m0[19u].x))), _1902);
            frontier_phi_27_51_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _1991 = frontier_phi_27_51_ladder_2;
        _1993 = frontier_phi_27_51_ladder_1;
        _1995 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1975 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1902);
        _1991 = _1975.x * cbModelParam._m0[1u].z;
        _1993 = _1975.y * cbModelParam._m0[1u].z;
        _1995 = _1975.z * cbModelParam._m0[1u].z;
    }
    float _2008 = (((_999 * _858) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1991 - _1893)) + _1893);
    float _2010 = (((_999 * _859) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1993 - _1895)) + _1895);
    float _2012 = (((_999 * _860) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1995 - _1897)) + _1897);
    float _2015 = fma(_2012, cbSceneParam._m0[89u].z, fma(_2010, cbSceneParam._m0[89u].y, _2008 * cbSceneParam._m0[89u].x));
    float _2018 = fma(_2012, cbSceneParam._m0[90u].z, fma(_2010, cbSceneParam._m0[90u].y, _2008 * cbSceneParam._m0[90u].x));
    float _2021 = fma(_2012, cbSceneParam._m0[91u].z, fma(_2010, cbSceneParam._m0[91u].y, _2008 * cbSceneParam._m0[91u].x));
    vec4 _2029 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_802, _803));
    float _2031 = _2029.w;
    float _2043 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2031);
    float _2044 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2031);
    float _2045 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2031);
    uvec4 _2049 = floatBitsToUint(cbInstanceData._m0[_900 + 5u]);
    uint _2051 = _2049.x * 14u;
    uint _2052 = _2051 + 13u;
    float _2059 = _964 + (-1.0);
    float _2064 = (cbLight._m0[_2052].x * _2059) + 1.0;
    float _2065 = (cbLight._m0[_2052].y * _2059) + 1.0;
    float _2066 = (cbLight._m0[_2052].z * _2059) + 1.0;
    float _2067 = (cbLight._m0[_2052].w * _2059) + 1.0;
    uint _2068 = _2051 + 5u;
    float _2074 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2078 = _2051 + 4u;
    float _2087 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2091 = _2051 | 1u;
    float _2102 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_700, _701, _702));
    float _2105 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_700, _701, _702));
    float _4337 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _4348 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2110 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 0.3183098733425140380859375;
    float _2112 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
    float _2119 = ((cbLight._m0[_2068].x * _2074) * _2112) + (((cbLight._m0[_2078].x * _2043) * _2087) * _2110);
    float _2120 = ((_2074 * cbLight._m0[_2068].y) * _2112) + (((cbLight._m0[_2078].y * _2044) * _2087) * _2110);
    float _2121 = ((_2074 * cbLight._m0[_2068].z) * _2112) + (((cbLight._m0[_2078].z * _2045) * _2087) * _2110);
    uvec4 _2125 = floatBitsToUint(cbLight._m0[_2051 + 12u]);
    bool _2127 = _2125.x == 0u;
    float _2138;
    float _2140;
    float _2142;
    if (_2127)
    {
        _2138 = _2119;
        _2140 = _2120;
        _2142 = _2121;
    }
    else
    {
        uint _2146 = _2051 + 6u;
        float _2162 = (dot(vec3(cbLight._m0[_2051 + 2u].xyz), vec3(_700, _701, _702)) * 0.5) + 0.5;
        float _2163 = _2162 * _2162;
        float _4359 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2164 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2165 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2138 = (((cbLight._m0[_2146].x * 0.3183098733425140380859375) * _2164) * _2165) + _2119;
        _2140 = (((cbLight._m0[_2146].y * 0.3183098733425140380859375) * _2164) * _2165) + _2120;
        _2142 = (((cbLight._m0[_2146].z * 0.3183098733425140380859375) * _2164) * _2165) + _2121;
    }
    bool _2145 = _2125.y == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2145)
    {
        _2183 = _2138;
        _2185 = _2140;
        _2187 = _2142;
    }
    else
    {
        uint _2355 = _2051 + 7u;
        float _2371 = (dot(vec3(cbLight._m0[_2051 + 3u].xyz), vec3(_700, _701, _702)) * 0.5) + 0.5;
        float _2372 = _2371 * _2371;
        float _4375 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2373 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2374 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2183 = (((cbLight._m0[_2355].x * 0.3183098733425140380859375) * _2373) * _2374) + _2138;
        _2185 = (((cbLight._m0[_2355].y * 0.3183098733425140380859375) * _2373) * _2374) + _2140;
        _2187 = (((cbLight._m0[_2355].z * 0.3183098733425140380859375) * _2373) * _2374) + _2142;
    }
    uint _2190 = _2051 + 8u;
    float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _887) * 0.949999988079071044921875);
    float _2204 = _2203 * _2203;
    float _2205 = cbLight._m0[_2051].x + _782;
    float _2206 = cbLight._m0[_2051].y + _783;
    float _2207 = cbLight._m0[_2051].z + _784;
    float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
    float _2212 = _2211 * _2205;
    float _2213 = _2211 * _2206;
    float _2214 = _2211 * _2207;
    float _2215 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2051].xyz));
    float _4391 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _4402 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2219 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2220 = dot(vec3(_700, _701, _702), vec3(_2212, _2213, _2214));
    float _4413 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2224 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2212, _2213, _2214));
    float _4424 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2228 = _2204 * _2204;
    float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
    float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * 5.0);
    float _2241 = 1.0 - _858;
    float _2242 = 1.0 - _859;
    float _2243 = 1.0 - _860;
    float _2250 = 1.0 - _2204;
    float _2261 = (0.5 / (((_2219 * ((_2218 * _2250) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2250) + _2204) * _2218))) * _2218;
    float _4435 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2263 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
    uint _2277 = _2051 + 9u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _887) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_2091].x + _782;
    float _2291 = cbLight._m0[_2091].y + _783;
    float _2292 = cbLight._m0[_2091].z + _784;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2091].xyz));
    float _4446 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2304 = dot(vec3(_700, _701, _702), vec3(_2297, _2298, _2299));
    float _4457 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2297, _2298, _2299));
    float _4468 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2289 * _2289;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
    float _2330 = 1.0 - _2289;
    float _2340 = (0.5 / (((_2219 * ((_2303 * _2330) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2330) + _2289) * _2303))) * _2303;
    float _4479 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2342 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    float _2352 = (((((_2323 * _2241) + _858) * cbLight._m0[_2277].x) * _2342) * _2074) + ((((cbLight._m0[_2190].x * _2043) * ((_2240 * _2241) + _858)) * _2263) * _2087);
    float _2353 = (((((_2323 * _2242) + _859) * cbLight._m0[_2277].y) * _2342) * _2074) + ((((cbLight._m0[_2190].y * _2044) * ((_2240 * _2242) + _859)) * _2263) * _2087);
    float _2354 = (((((_2323 * _2243) + _860) * cbLight._m0[_2277].z) * _2342) * _2074) + ((((cbLight._m0[_2190].z * _2045) * ((_2240 * _2243) + _860)) * _2263) * _2087);
    float _2416;
    float _2418;
    float _2420;
    if (_2127)
    {
        _2416 = _2352;
        _2418 = _2353;
        _2420 = _2354;
    }
    else
    {
        uint _2422 = _2051 + 2u;
        uint _2426 = _2051 + 10u;
        float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _887) * 0.949999988079071044921875);
        float _2441 = _2440 * _2440;
        float _2442 = cbLight._m0[_2422].x + _782;
        float _2443 = cbLight._m0[_2422].y + _783;
        float _2444 = cbLight._m0[_2422].z + _784;
        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
        float _2449 = _2448 * _2442;
        float _2450 = _2448 * _2443;
        float _2451 = _2448 * _2444;
        float _2452 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2422].xyz));
        float _4490 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2456 = dot(vec3(_700, _701, _702), vec3(_2449, _2450, _2451));
        float _4501 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2460 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2449, _2450, _2451));
        float _4512 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2464 = _2441 * _2441;
        float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
        float _2475 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
        float _2482 = 1.0 - _2441;
        float _2492 = (0.5 / (((_2219 * ((_2455 * _2482) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2482) + _2441) * _2455))) * _2455;
        float _4523 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2494 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
        float _2495 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2416 = (((((_2475 * _2241) + _858) * cbLight._m0[_2426].x) * _2494) * _2495) + _2352;
        _2418 = (((((_2475 * _2242) + _859) * cbLight._m0[_2426].y) * _2494) * _2495) + _2353;
        _2420 = (((((_2475 * _2243) + _860) * cbLight._m0[_2426].z) * _2494) * _2495) + _2354;
    }
    float _2530;
    float _2532;
    float _2534;
    if (_2145)
    {
        _2530 = _2416;
        _2532 = _2418;
        _2534 = _2420;
    }
    else
    {
        uint _2541 = _2051 + 3u;
        uint _2545 = _2051 + 11u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _887) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _782;
        float _2562 = cbLight._m0[_2541].y + _783;
        float _2563 = cbLight._m0[_2541].z + _784;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_700, _701, _702), vec3(cbLight._m0[_2541].xyz));
        float _4539 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2575 = dot(vec3(_700, _701, _702), vec3(_2568, _2569, _2570));
        float _4550 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4561 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
        float _2601 = 1.0 - _2560;
        float _2611 = (0.5 / (((_2219 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2601) + _2560) * _2574))) * _2574;
        float _4572 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2530 = (((((_2594 * _2241) + _858) * cbLight._m0[_2545].x) * _2613) * _2614) + _2416;
        _2532 = (((((_2594 * _2242) + _859) * cbLight._m0[_2545].y) * _2613) * _2614) + _2418;
        _2534 = (((((_2594 * _2243) + _860) * cbLight._m0[_2545].z) * _2613) * _2614) + _2420;
    }
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    if (_2049.y == 0u)
    {
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2689;
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2689;
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2689;
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.x;
        uint _2716 = uint((float(_2704.y) * floor(float(uint(cbSceneParam._m0[85u].y * _803) / _2705))) + floor(float(uint(cbSceneParam._m0[85u].x * _802) / _2705)));
        float _2726 = (log2(_2692 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2727 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        uint _2730 = uint(isnan(14.0) ? _2727 : (isnan(_2727) ? 14.0 : min(_2727, 14.0)));
        uvec4 _2735 = texelFetch(g_lightClusterGridBuffer, int(((_2730 << 2u) + (_2716 << 6u)) >> 2u));
        uint _2736 = _2735.x;
        uint _2737 = _2704.z;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((((1u << ((_2737 >> 4u) & 15u)) + 4294967295u) & _2736) == 0u) || ((_2737 & 240u) == 0u))
        {
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
        }
        else
        {
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            uint _2997 = 0u;
            uint _3006;
            bool _3007;
            for (;;)
            {
                _3006 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                _3007 = _3006 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3007)
                {
                    frontier_phi_68_pred = _2993;
                    frontier_phi_68_pred_1 = _2996;
                    frontier_phi_68_pred_2 = _2995;
                    frontier_phi_68_pred_3 = _2994;
                    frontier_phi_68_pred_4 = _2992;
                    frontier_phi_68_pred_5 = _2991;
                }
                else
                {
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    uint _3142;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _3006;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    for (;;)
                    {
                        uint _3146 = uint(findLSB(_3142)) + (_2997 << 5u);
                        uint _3143 = (_3142 + 4294967295u) & _3142;
                        uint _3148 = _3146 * 48u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3168 = (_3146 * 48u) + 4u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 3u)).x));
                        uint _3187 = (_3146 * 48u) + 8u;
                        vec3 _3198 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x));
                        float _3202 = _3162.x - _2690;
                        float _3203 = _3162.y - _2691;
                        float _3204 = _3162.z - _2692;
                        float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                        float _3208 = inversesqrt(_3205);
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3212 = dot(vec3(_825, _828, _831), vec3(_3209, _3210, _3211));
                        float _3217 = 1.0 - (_3205 * _3162.w);
                        float _4598 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3219 = sqrt(_3205) * _3181.w;
                        float _3222 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3212) + _3223;
                        float _3229 = _3219 * _3219;
                        float _3233 = ((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3218) / ((_3229 * 0.699999988079071044921875) + 1.0);
                        float _3237 = (-0.0) - _2690;
                        float _3238 = (-0.0) - _2691;
                        float _3239 = (-0.0) - _2692;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3254 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                        float _3255 = 1.0 - _980;
                        float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                        float _3263 = _3262 * _3262;
                        float _3264 = _3263 * _3263;
                        float _3265 = _3244 + _3209;
                        float _3266 = _3245 + _3210;
                        float _3267 = _3246 + _3211;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3275 = dot(vec3(_825, _828, _831), vec3(_3244, _3245, _3246));
                        float _4614 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3279 = dot(vec3(_825, _828, _831), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                        float _4625 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                        float _3287 = _3222 * _3263;
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3212) + _3288;
                        float _4636 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3293 = 1.0 - _3263;
                        float _3303 = (0.5 / (((_3292 * ((_3278 * _3293) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3263) * _3278))) * _3292;
                        float _4647 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3314 = (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) / ((_3286 * _3286) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125))) * _3218;
                        _3066 = (_3233 * _3181.x) + _3139;
                        _3067 = (_3233 * _3181.y) + _3140;
                        _3068 = (_3233 * _3181.z) + _3141;
                        _3063 = (_3314 * _3198.x) + _3136;
                        _3064 = (_3314 * _3198.y) + _3137;
                        _3065 = (_3314 * _3198.z) + _3138;
                        if (_3143 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3143;
                        }
                    }
                    frontier_phi_68_pred = _3065;
                    frontier_phi_68_pred_1 = _3068;
                    frontier_phi_68_pred_2 = _3067;
                    frontier_phi_68_pred_3 = _3066;
                    frontier_phi_68_pred_4 = _3064;
                    frontier_phi_68_pred_5 = _3063;
                }
                _2844 = frontier_phi_68_pred;
                _2850 = frontier_phi_68_pred_1;
                _2848 = frontier_phi_68_pred_2;
                _2846 = frontier_phi_68_pred_3;
                _2842 = frontier_phi_68_pred_4;
                _2840 = frontier_phi_68_pred_5;
                uint _2998 = _2997 + 1u;
                if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2991 = _2840;
                    _2992 = _2842;
                    _2993 = _2844;
                    _2994 = _2846;
                    _2995 = _2848;
                    _2996 = _2850;
                    _2997 = _2998;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
        }
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.z;
        uint _2856 = (_2854 >> 8u) & 15u;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((4294967295u << _2856) & _2736) == 0u)
        {
            _2959 = _2839;
            _2961 = _2841;
            _2963 = _2843;
            _2965 = _2845;
            _2967 = _2847;
            _2969 = _2849;
        }
        else
        {
            float _2984 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
            float _2985 = _2984 * _2690;
            float _2986 = _2984 * _2691;
            float _2987 = _2984 * _2692;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2856 < ((_2854 >> 12u) & 15u))
            {
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _3119 = _2839;
                float _3120 = _2841;
                float _3121 = _2843;
                float _3122 = _2845;
                float _3123 = _2847;
                float _3124 = _2849;
                uint _3125 = _2856;
                uint _3134;
                bool _3135;
                for (;;)
                {
                    _3134 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_3125 << 2u)) >> 2u)).x;
                    _3135 = _3134 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3135)
                    {
                        frontier_phi_79_pred = _3124;
                        frontier_phi_79_pred_1 = _3123;
                        frontier_phi_79_pred_2 = _3122;
                        frontier_phi_79_pred_3 = _3121;
                        frontier_phi_79_pred_4 = _3120;
                        frontier_phi_79_pred_5 = _3119;
                    }
                    else
                    {
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3341 = _3119;
                        float _3342 = _3120;
                        float _3343 = _3121;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        uint _3347 = _3134;
                        uint _3348;
                        vec4 _3373;
                        float _3374;
                        vec4 _3389;
                        vec3 _3401;
                        vec4 _3416;
                        vec4 _3431;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3358 = ((_3125 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3347));
                            _3348 = (_3347 + 4294967295u) & _3347;
                            uint _3360 = _3358 * 40u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            _3374 = _3373.w;
                            uint _3376 = (_3358 * 40u) + 4u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3358 * 40u) + 8u;
                            _3401 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x));
                            uint _3403 = (_3358 * 40u) + 16u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3358 * 40u) + 20u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3358 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3358 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_2692, _3465.z, fma(_2691, _3465.y, _3465.x * _2690)) + _3465.w;
                            _3478 = !((fma(_2692, _3446.z, fma(_2691, _3446.y, _3446.x * _2690)) + _3446.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3373.x - _2690;
                                float _3506 = _3373.y - _2691;
                                float _3507 = _3373.z - _2692;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3374 * _3374));
                                float _4658 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3523 = sqrt(_3508) * _3389.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_825, _828, _831))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_2692, _3416.z, fma(_2691, _3416.y, _3416.x * _2690)) + _3416.w) / _3477;
                                float _3537 = (fma(_2692, _3431.z, fma(_2691, _3431.y, _3431.x * _2690)) + _3431.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4674 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _980;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _2985;
                                float _3567 = _3513 - _2986;
                                float _3568 = _3514 - _2987;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_825, _828, _831), vec3((-0.0) - _2985, (-0.0) - _2986, (-0.0) - _2987));
                                float _4685 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3580 = dot(vec3(_825, _828, _831), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4696 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_825, _828, _831), vec3(_3512, _3513, _3514))) + _3589;
                                float _4707 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4718 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3543 * _3389.z;
                                frontier_phi_85_pred_1 = _3543 * _3389.y;
                                frontier_phi_85_pred_2 = _3543 * _3389.x;
                                frontier_phi_85_pred_3 = _3617 * _3401.z;
                                frontier_phi_85_pred_4 = _3617 * _3401.y;
                                frontier_phi_85_pred_5 = _3617 * _3401.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_85_pred;
                            _3625 = frontier_phi_85_pred_1;
                            _3624 = frontier_phi_85_pred_2;
                            _3623 = frontier_phi_85_pred_3;
                            _3622 = frontier_phi_85_pred_4;
                            _3621 = frontier_phi_85_pred_5;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            if (_3348 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3348;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3333;
                        frontier_phi_79_pred_1 = _3332;
                        frontier_phi_79_pred_2 = _3331;
                        frontier_phi_79_pred_3 = _3330;
                        frontier_phi_79_pred_4 = _3329;
                        frontier_phi_79_pred_5 = _3328;
                    }
                    _2970 = frontier_phi_79_pred;
                    _2968 = frontier_phi_79_pred_1;
                    _2966 = frontier_phi_79_pred_2;
                    _2964 = frontier_phi_79_pred_3;
                    _2962 = frontier_phi_79_pred_4;
                    _2960 = frontier_phi_79_pred_5;
                    uint _3126 = _3125 + 1u;
                    if (_3126 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3119 = _2960;
                        _3120 = _2962;
                        _3121 = _2964;
                        _3122 = _2966;
                        _3123 = _2968;
                        _3124 = _2970;
                        _3125 = _3126;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2966;
                frontier_phi_60_61_ladder_1 = _2970;
                frontier_phi_60_61_ladder_2 = _2968;
                frontier_phi_60_61_ladder_3 = _2964;
                frontier_phi_60_61_ladder_4 = _2962;
                frontier_phi_60_61_ladder_5 = _2960;
            }
            else
            {
                frontier_phi_60_61_ladder = _2845;
                frontier_phi_60_61_ladder_1 = _2849;
                frontier_phi_60_61_ladder_2 = _2847;
                frontier_phi_60_61_ladder_3 = _2843;
                frontier_phi_60_61_ladder_4 = _2841;
                frontier_phi_60_61_ladder_5 = _2839;
            }
            _2959 = frontier_phi_60_61_ladder_5;
            _2961 = frontier_phi_60_61_ladder_4;
            _2963 = frontier_phi_60_61_ladder_3;
            _2965 = frontier_phi_60_61_ladder;
            _2967 = frontier_phi_60_61_ladder_2;
            _2969 = frontier_phi_60_61_ladder_1;
        }
        float _2974 = isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0));
        _2748 = (_2974 * _2965) + _2183;
        _2750 = (_2974 * _2967) + _2185;
        _2752 = (_2974 * _2969) + _2187;
        _2754 = ((_2959 * _858) * _2974) + _2530;
        _2756 = ((_2961 * _859) * _2974) + _2532;
        _2758 = ((_2963 * _860) * _2974) + _2534;
    }
    else
    {
        _2748 = _2183;
        _2750 = _2185;
        _2752 = _2187;
        _2754 = _2530;
        _2756 = _2532;
        _2758 = _2534;
    }
    float _2760 = (((cbMatDynParam._m0[13u].x - _934) * _940) + _934) * _2241;
    float _2761 = (((cbMatDynParam._m0[13u].y - _935) * _940) + _935) * _2242;
    float _2762 = (((cbMatDynParam._m0[13u].z - _936) * _940) + _936) * _2243;
    float _4734 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _4745 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _4756 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2778 = ((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2748 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _964))) + ((_2754 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    float _2779 = ((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2750 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _964))) + ((_2756 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    float _2780 = ((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2752 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _964))) + ((_2758 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    uint _2781 = _900 + 6u;
    float _2789 = _802 / cbSceneParam._m0[86u].x;
    float _2790 = _803 / cbSceneParam._m0[86u].y;
    vec4 _2804 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2806 = _2804.x;
    float _2807 = _2804.y;
    float _2808 = _2804.z;
    float _2809 = _2804.w;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _2864 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _2865 = _2864 / _725;
        float _2876 = _2865 * _775;
        float _2877 = _776 * _2865;
        float _2878 = (-0.0) - _2877;
        float _2879 = _2865 * _777;
        float _2881 = (cbSceneParam._m0[77u].w * _2878) / _2864;
        float _2882 = _2881 + cbSceneParam._m0[79u].w;
        float _2883 = cbSceneParam._m0[79u].w - _2877;
        float _2889 = sqrt(((_2876 * _2876) + (_2877 * _2877)) + (_2879 * _2879));
        float _2892 = (1.0 - (cbSceneParam._m0[77u].w / _2864)) * _2889;
        float _2897 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2899 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3076;
        if (abs((_2878 - _2881) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3076 = ((((_2882 > 0.0) ? exp2(_2897 * _2882) : (2.0 - exp2(_2899 * _2882))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2892;
        }
        else
        {
            float _3020 = 1.0 / cbSceneParam._m0[80u].x;
            float _3021 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : max(_2882, _2883));
            float _3022 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : min(_2882, _2883));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            _3076 = ((abs(_2889 / _2878) * cbSceneParam._m0[80u].y) * ((((_3031 - _3032) * 2.0) - ((exp2(_2897 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0)))) - exp2(_2897 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))))) * _3020)) - ((exp2(_2899 * _3031) - exp2(_2899 * _3032)) * _3020))) + (_2892 * cbSceneParam._m0[80u].z);
        }
        vec4 _3078 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2789, _2790, 1.0), 0.0);
        float _3087 = exp2((_3076 * (-1.44269502162933349609375)) * (1.0 - _3078.w));
        float _3088 = log2(_3087);
        float _3104 = log2(_2809);
        _2901 = (exp2(_3104 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].x)) * _3078.x) / cbSceneParam._m0[78u].x)) + _2806;
        _2903 = (exp2(_3104 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].y)) * _3078.y) / cbSceneParam._m0[78u].y)) + _2807;
        _2905 = (exp2(_3104 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].z)) * _3078.z) / cbSceneParam._m0[78u].z)) + _2808;
        _2907 = _3087 * _2809;
    }
    else
    {
        _2901 = _2806;
        _2903 = _2807;
        _2905 = _2808;
        _2907 = _2809;
    }
    bool _3114;
    vec4 _2917;
    vec4 _2939;
    float _2941;
    float _2945;
    float _2946;
    float _2947;
    float _2948;
    bool _2958;
    for (;;)
    {
        _2917 = cbMatDynParam._m0[0u];
        float _2919 = roundEven(_2917.y);
        bool _2920 = _2919 == 3.0;
        float _2921 = log2(_2907);
        float _2928 = exp2(_2921 * cbSceneParam._m0[78u].x) * _2778;
        float _2929 = exp2(_2921 * cbSceneParam._m0[78u].y) * _2779;
        float _2930 = exp2(_2921 * cbSceneParam._m0[78u].z) * _2780;
        float _2937 = _791 + (-0.5);
        _2939 = cbMtdParam._m0[1u];
        _2941 = _2939.y * _2937;
        float _2944 = (_2919 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2945 = _2944 * (_2920 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2901)));
        _2946 = _2944 * (_2920 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2903)));
        _2947 = _2944 * (_2920 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2905)));
        _2948 = _2937 * 0.999000012874603271484375;
        _2958 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2958)
        {
            if ((cbInstanceData._m0[_900 + 7u].x + _2948) < 0.5)
            {
                _3114 = true;
                break;
            }
        }
        uint _3055 = _901 + uint(_2917.w);
        if ((cbInstanceData._m0[_3055].w < 1.0) && ((cbInstanceData._m0[_3055].w + _2948) < 0.5))
        {
            _3114 = true;
            break;
        }
        if ((_2941 + _451) < _2939.x)
        {
            _3114 = true;
            break;
        }
        _3114 = false;
        break;
    }
    float _3319;
    if (_3114)
    {
        discard_state = true;
        _3319 = 0.0;
    }
    else
    {
        _3319 = cbInstanceData._m0[_2781].w;
    }
    SV_Target.x = _2945;
    SV_Target.y = _2946;
    SV_Target.z = _2947;
    SV_Target.w = _3319;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2781].w;
    discard_exit();
}


