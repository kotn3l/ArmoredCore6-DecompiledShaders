#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _946;
float _3340;
float _3341;
float _3342;
float _3343;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = abs(_199);
    float _221 = abs(_200);
    float _222 = abs(_201);
    float _223 = _220 * _220;
    float _224 = _221 * _221;
    float _225 = _222 * _222;
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _252 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _256 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _259 = _252 * 0.0500000007450580596923828125;
    float _269 = (cbTextureTilingScale._m0[3u].x * (_248 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].z;
    vec4 _273 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_269, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    float _283 = (cbTextureTilingScale._m0[3u].y * (_256 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].w;
    vec4 _284 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_269, _283));
    vec4 _297 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _259) + cbTextureTilingScale._m0[3u].z, _283));
    vec4 _325 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _329 = _325.z;
    float _332 = (_325.x * 2.0) + (-1.0);
    float _333 = (_325.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_332, _333), vec2(_332, _333));
    float _3352 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))));
    float _343 = _332 + ((((((_284.x * _224) + (_273.x * _225)) + (_297.x * _223)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _344 = _333 + ((((((_284.y * _224) + (_273.y * _225)) + (_297.y * _223)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _347 = fma(_340, _199, fma(_344, _205 * TANGENT.x, _343 * (_191 * _184)));
    float _350 = fma(_340, _200, fma(_344, _205 * TANGENT.y, _343 * (_191 * _185)));
    float _353 = fma(_340, _201, fma(_344, _205 * TANGENT.z, _343 * (_191 * _186)));
    float _357 = inversesqrt(dot(vec3(_347, _350, _353), vec3(_347, _350, _353)));
    float _358 = _357 * _347;
    float _359 = _357 * _350;
    float _360 = _357 * _353;
    float _365 = cbMtdParam._m0[9u].x + dot(vec4(_358, _359, _360, 0.0), vec4(cbMtdParam._m0[9u].zw, cbMtdParam._m0[10u].x, 0.0));
    float _3363 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    vec4 _378 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _394 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _396 = _394.x;
    float _397 = _394.y;
    float _398 = _394.z;
    float _405 = ((_378.x - _396) * _366) + _396;
    float _406 = ((_378.y - _397) * _366) + _397;
    float _407 = ((_378.z - _398) * _366) + _398;
    float _410 = (((((_284.z * _224) + (_273.z * _225)) + (_297.z * _223)) - _329) * cbMtdParam._m0[9u].y) + _329;
    float _3374 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _3396 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3407 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3418 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _431 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _451 = cbSceneParam._m0[71u].x - (_248 / _441);
    float _452 = cbSceneParam._m0[71u].y - (_252 / _441);
    float _453 = cbSceneParam._m0[71u].z - (_256 / _441);
    float _457 = inversesqrt(dot(vec3(_451, _452, _453), vec3(_451, _452, _453)));
    float _458 = _451 * _457;
    float _459 = _452 * _457;
    float _460 = _453 * _457;
    vec4 _465 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _467 = _465.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _625 = sqrt(((_451 * _451) + (_452 * _452)) + (_453 * _453));
        float _631 = (cbMatDynParam._m0[5u].x * _625) + cbMatDynParam._m0[5u].y;
        float _3429 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _632 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _636 = (cbMatDynParam._m0[5u].z * _625) + cbMatDynParam._m0[5u].w;
        float _3440 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) - _632)) + _632) < ((_467 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _479 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _480 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _500 = fma(_360, cbSceneParam._m0[5u].z, fma(_359, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _358));
    float _503 = fma(_360, cbSceneParam._m0[6u].z, fma(_359, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _358));
    float _506 = fma(_360, cbSceneParam._m0[7u].z, fma(_359, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _358));
    uint _519 = uint(roundEven(NORMAL.w)) * 13u;
    uint _521 = _519 + 9u;
    uint _522 = _521 + uint(cbMatDynParam._m0[0u].w);
    float _528 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_522].x;
    float _529 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_522].y;
    float _530 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_522].z;
    float _3451 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    vec4 _542 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _479, cbSceneParam._m0[86u].y * _480));
    float _545 = _542.x * TEXCOORD.z;
    float _546 = dot(vec3(_358, _359, _360), vec3(_458, _459, _460));
    float _549 = _546 * 2.0;
    float _553 = (_549 * _358) - _458;
    float _554 = (_549 * _359) - _459;
    float _555 = (_549 * _360) - _460;
    float _559 = abs(dot(vec3(_458, _459, _460), vec3(_358, _359, _360)));
    float _3484 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _561 = sqrt(_412);
    float _574 = exp2((_561 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_561 * 3.0));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _945;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _670 = fma(_614, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _606));
        float _674 = fma(_614, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _606));
        float _678 = fma(_614, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _606));
        float _703 = _606 + _358;
        float _704 = _610 + _359;
        float _705 = _614 + _360;
        float _715 = fma(_705, cbModelParam._m0[26u].z, fma(_704, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703)) - _670;
        float _716 = fma(_705, cbModelParam._m0[27u].z, fma(_704, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703)) - _674;
        float _717 = fma(_705, cbModelParam._m0[28u].z, fma(_704, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703)) - _678;
        float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
        float _734 = ((_721 * _715) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_670 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _735 = ((_721 * _716) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_674 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _736 = ((_721 * _717) / cbModelParam._m0[34u].z) + ((((((_678 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        float _773 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_739.x + (-0.5));
        float _775 = _773 * (_739.y + (-0.5));
        float _776 = _773 * (_739.z + (-0.5));
        float _783 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_746.x + (-0.5));
        float _785 = _783 * (_746.y + (-0.5));
        float _786 = _783 * (_746.z + (-0.5));
        float _793 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_753.x + (-0.5));
        float _795 = _793 * (_753.y + (-0.5));
        float _796 = _793 * (_753.z + (-0.5));
        float _803 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_760.x + (-0.5));
        float _805 = _803 * (_760.y + (-0.5));
        float _806 = _803 * (_760.z + (-0.5));
        float _807 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = _774 * 0.5;
        float _811 = _784 * 0.5;
        float _812 = _794 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _827 = (dot(vec3(_358, _359, _360), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _837 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_807 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3532 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_839 + 1.0))) + _844) * _807;
        float _854 = _775 * 0.5;
        float _855 = _785 * 0.5;
        float _856 = _795 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _870 = (dot(vec3(_358, _359, _360), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _879 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3565 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_881 + 1.0))) + _886) * _808;
        float _896 = _776 * 0.5;
        float _897 = _786 * 0.5;
        float _898 = _796 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_358, _359, _360), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3598 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_923 + 1.0))) + _928) * _809;
        _945 = _776;
        _947 = _775;
        _948 = _774;
        _949 = _786;
        _950 = _785;
        _951 = _784;
        _952 = _796;
        _953 = _795;
        _954 = _794;
        _955 = _809;
        _956 = _808;
        _957 = _807;
        _958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
    }
    else
    {
        _945 = _946;
        _947 = _946;
        _948 = _946;
        _949 = _946;
        _950 = _946;
        _951 = _946;
        _952 = _946;
        _953 = _946;
        _954 = _946;
        _955 = _946;
        _956 = _946;
        _957 = _946;
        _958 = 0.0;
        _959 = 0.0;
        _960 = 0.0;
    }
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _989 = fma(_614, cbModelParam._m0[30u].z, fma(_610, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _606));
        float _993 = fma(_614, cbModelParam._m0[31u].z, fma(_610, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _606));
        float _997 = fma(_614, cbModelParam._m0[32u].z, fma(_610, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _606));
        float _1020 = _606 + _358;
        float _1021 = _610 + _359;
        float _1022 = _614 + _360;
        float _1032 = fma(_1022, cbModelParam._m0[30u].z, fma(_1021, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020)) - _989;
        float _1033 = fma(_1022, cbModelParam._m0[31u].z, fma(_1021, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020)) - _993;
        float _1034 = fma(_1022, cbModelParam._m0[32u].z, fma(_1021, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020)) - _997;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_989 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_993 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[35u].z) + ((((((_997 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1088 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1055.x + (-0.5));
        float _1090 = _1088 * (_1055.y + (-0.5));
        float _1091 = _1088 * (_1055.z + (-0.5));
        float _1098 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1062.x + (-0.5));
        float _1100 = _1098 * (_1062.y + (-0.5));
        float _1101 = _1098 * (_1062.z + (-0.5));
        float _1108 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1069.x + (-0.5));
        float _1110 = _1108 * (_1069.y + (-0.5));
        float _1111 = _1108 * (_1069.z + (-0.5));
        float _1118 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1076.x + (-0.5));
        float _1120 = _1118 * (_1076.y + (-0.5));
        float _1121 = _1118 * (_1076.z + (-0.5));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = _1089 * 0.5;
        float _1126 = _1099 * 0.5;
        float _1127 = _1109 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_358, _359, _360), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3661 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1152 + 1.0))) + _1157) * _1122;
        float _1167 = _1090 * 0.5;
        float _1168 = _1100 * 0.5;
        float _1169 = _1110 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_358, _359, _360), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3694 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1194 + 1.0))) + _1199) * _1123;
        float _1209 = _1091 * 0.5;
        float _1210 = _1101 * 0.5;
        float _1211 = _1111 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_358, _359, _360), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3727 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1236 + 1.0))) + _1241) * _1124;
        _1258 = _1091;
        _1259 = _1090;
        _1260 = _1089;
        _1261 = _1101;
        _1262 = _1100;
        _1263 = _1099;
        _1264 = _1111;
        _1265 = _1110;
        _1266 = _1109;
        _1267 = _1124;
        _1268 = _1123;
        _1269 = _1122;
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
    }
    else
    {
        _1258 = _946;
        _1259 = _946;
        _1260 = _946;
        _1261 = _946;
        _1262 = _946;
        _1263 = _946;
        _1264 = _946;
        _1265 = _946;
        _1266 = _946;
        _1267 = _946;
        _1268 = _946;
        _1269 = _946;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _958)) + _958;
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _959)) + _959;
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _960)) + _960;
    float _1305 = fma(_1284, cbSceneParam._m0[89u].z, fma(_1283, cbSceneParam._m0[89u].y, _1282 * cbSceneParam._m0[89u].x));
    float _1308 = fma(_1284, cbSceneParam._m0[90u].z, fma(_1283, cbSceneParam._m0[90u].y, _1282 * cbSceneParam._m0[90u].x));
    float _1311 = fma(_1284, cbSceneParam._m0[91u].z, fma(_1283, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1282));
    float _1326 = _553 * 0.5;
    float _1327 = _554 * 0.5;
    float _1328 = _555 * 0.5;
    float _1329 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1332 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1335 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1369;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1342 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_945, _949, _952, _955));
        float _1346 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_947, _950, _953, _956));
        float _1350 = dot(vec4(_1326, _1327, _1328, 1.0), vec4(_948, _951, _954, _957));
        float _1357 = dot(vec4(cbModelParam._m0[39u]), vec4(_1326, _1327, _1328, 1.0));
        _1369 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1369 = 1.0;
    }
    float _1380;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1371 = dot(vec4(cbModelParam._m0[40u]), vec4(_1326, _1327, _1328, 1.0));
        _1380 = dot(vec3(isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1371) ? 0.0 : (isnan(0.0) ? _1371 : max(0.0, _1371))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1380 = 1.0;
    }
    float _1384 = (_1380 * cbModelParam._m0[1u].x) + (_1369 * (1.0 - cbModelParam._m0[1u].x));
    float _1394 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _412);
    float _1395 = isnan(_1394) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1394 : min(cbModelParam._m0[25u].z, _1394));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1444 = fma(_614, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606)) + cbModelParam._m0[13u].w;
        float _1448 = fma(_614, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606)) + cbModelParam._m0[14u].w;
        float _1452 = fma(_614, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606)) + cbModelParam._m0[15u].w;
        float _1455 = fma(_555, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553));
        float _1458 = fma(_555, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553));
        float _1461 = fma(_555, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553));
        float _1489;
        if (_1455 > 0.0)
        {
            _1489 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1489 = frontier_phi_17_15_ladder;
        }
        float _1716;
        if (_1458 > 0.0)
        {
            _1716 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1716 = frontier_phi_26_22_ladder;
        }
        float _1962;
        if (_1461 > 0.0)
        {
            _1962 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1962 = frontier_phi_38_33_ladder;
        }
        float _1964 = isnan(_1716) ? _1489 : (isnan(_1489) ? _1716 : min(_1489, _1716));
        float _1965 = isnan(_1962) ? _1964 : (isnan(_1964) ? _1962 : min(_1964, _1962));
        float _1969 = (_1965 * _1455) + _1444;
        float _1970 = (_1965 * _1458) + _1448;
        float _1971 = (_1965 * _1461) + _1452;
        float _1972 = _1965 * 9.9999997473787516355514526367188e-05;
        float _1974 = (-1.0) - _1972;
        float _1976 = _1972 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1971 > _1976) || ((_1971 < _1974) || ((_1970 > _1976) || ((_1970 < _1974) || ((_1969 < _1974) || (_1969 > _1976))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2095 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1971, cbModelParam._m0[9u].z, fma(_1970, cbModelParam._m0[9u].y, _1969 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1971, cbModelParam._m0[10u].z, fma(_1970, cbModelParam._m0[10u].y, _1969 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1971, cbModelParam._m0[11u].z, fma(_1970, cbModelParam._m0[11u].y, _1969 * cbModelParam._m0[11u].x))), _1395);
            frontier_phi_16_38_ladder = _2095.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2095.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2095.x * cbModelParam._m0[1u].y;
        }
        _1477 = frontier_phi_16_38_ladder_2;
        _1479 = frontier_phi_16_38_ladder_1;
        _1481 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_553, _554, _555), _1395);
        _1477 = _1465.x * cbModelParam._m0[1u].y;
        _1479 = _1465.y * cbModelParam._m0[1u].y;
        _1481 = _1465.z * cbModelParam._m0[1u].y;
    }
    float _1485 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _412);
    float _1486 = isnan(_1485) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1485 : min(cbModelParam._m0[25u].w, _1485));
    float _1579;
    float _1581;
    float _1583;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1543 = fma(_614, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606)) + cbModelParam._m0[21u].w;
        float _1547 = fma(_614, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606)) + cbModelParam._m0[22u].w;
        float _1551 = fma(_614, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606)) + cbModelParam._m0[23u].w;
        float _1554 = fma(_555, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553));
        float _1557 = fma(_555, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553));
        float _1560 = fma(_555, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553));
        float _1721;
        if (_1554 > 0.0)
        {
            _1721 = abs((1.0 - _1543) / _1554);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1543 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1721 = frontier_phi_28_24_ladder;
        }
        float _1989;
        if (_1557 > 0.0)
        {
            _1989 = abs((1.0 - _1547) / _1557);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1547 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1989 = frontier_phi_40_35_ladder;
        }
        float _2194;
        if (_1560 > 0.0)
        {
            _2194 = abs((1.0 - _1551) / _1560);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1551 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2194 = frontier_phi_49_46_ladder;
        }
        float _2196 = isnan(_1989) ? _1721 : (isnan(_1721) ? _1989 : min(_1721, _1989));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1554) + _1543;
        float _2202 = (_2197 * _1557) + _1547;
        float _2203 = (_2197 * _1560) + _1551;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2204;
        float _2207 = _2204 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2203 > _2207) || ((_2203 < _2205) || ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 < _2205) || (_2201 > _2207))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2203, cbModelParam._m0[17u].z, fma(_2202, cbModelParam._m0[17u].y, _2201 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2203, cbModelParam._m0[18u].z, fma(_2202, cbModelParam._m0[18u].y, _2201 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2203, cbModelParam._m0[19u].z, fma(_2202, cbModelParam._m0[19u].y, _2201 * cbModelParam._m0[19u].x))), _1486);
            frontier_phi_25_49_ladder = _2402.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2402.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2402.x * cbModelParam._m0[1u].z;
        }
        _1579 = frontier_phi_25_49_ladder_2;
        _1581 = frontier_phi_25_49_ladder_1;
        _1583 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_553, _554, _555), _1486);
        _1579 = _1563.x * cbModelParam._m0[1u].z;
        _1581 = _1563.y * cbModelParam._m0[1u].z;
        _1583 = _1563.z * cbModelParam._m0[1u].z;
    }
    float _1595 = ((((1.0 - _574) * ((_561 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_574 * _561)) * _545;
    float _1596 = _1595 * ((cbModelParam._m0[1u].w * (_1579 - _1477)) + _1477);
    float _1597 = _1595 * ((cbModelParam._m0[1u].w * (_1581 - _1479)) + _1479);
    float _1598 = _1595 * ((cbModelParam._m0[1u].w * (_1583 - _1481)) + _1481);
    float _1601 = fma(_1598, cbSceneParam._m0[89u].z, fma(_1597, cbSceneParam._m0[89u].y, _1596 * cbSceneParam._m0[89u].x));
    float _1604 = fma(_1598, cbSceneParam._m0[90u].z, fma(_1597, cbSceneParam._m0[90u].y, _1596 * cbSceneParam._m0[90u].x));
    float _1607 = fma(_1598, cbSceneParam._m0[91u].z, fma(_1597, cbSceneParam._m0[91u].y, _1596 * cbSceneParam._m0[91u].x));
    vec4 _1615 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_479, _480));
    float _1617 = _1615.w;
    float _1629 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1617);
    float _1630 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1617);
    float _1631 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1617);
    uvec4 _1635 = floatBitsToUint(cbInstanceData._m0[_519 + 5u]);
    uint _1637 = _1635.x * 14u;
    uint _1638 = _1637 + 13u;
    float _1645 = _545 + (-1.0);
    float _1650 = (cbLight._m0[_1638].x * _1645) + 1.0;
    float _1651 = (cbLight._m0[_1638].y * _1645) + 1.0;
    float _1652 = (cbLight._m0[_1638].z * _1645) + 1.0;
    float _1653 = (cbLight._m0[_1638].w * _1645) + 1.0;
    uint _1654 = _1637 + 5u;
    float _1660 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
    uint _1664 = _1637 + 4u;
    float _1674 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
    uint _1678 = _1637 | 1u;
    float _1689 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_358, _359, _360));
    float _1692 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_358, _359, _360));
    float _3863 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _3874 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1697 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1699 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.3183098733425140380859375;
    float _1706 = ((cbLight._m0[_1654].x * _1660) * _1699) + (((cbLight._m0[_1664].x * _1629) * _1674) * _1697);
    float _1707 = ((_1660 * cbLight._m0[_1654].y) * _1699) + (((cbLight._m0[_1664].y * _1630) * _1674) * _1697);
    float _1708 = ((_1660 * cbLight._m0[_1654].z) * _1699) + (((cbLight._m0[_1664].z * _1631) * _1674) * _1697);
    uvec4 _1713 = floatBitsToUint(cbLight._m0[_1637 + 12u]);
    bool _1715 = _1713.x == 0u;
    float _1726;
    float _1728;
    float _1730;
    if (_1715)
    {
        _1726 = _1706;
        _1728 = _1707;
        _1730 = _1708;
    }
    else
    {
        uint _1734 = _1637 + 6u;
        float _1750 = (dot(vec3(cbLight._m0[_1637 + 2u].xyz), vec3(_358, _359, _360)) * 0.5) + 0.5;
        float _1751 = _1750 * _1750;
        float _3885 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1753 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _1726 = (((cbLight._m0[_1734].x * 0.3183098733425140380859375) * _1752) * _1753) + _1706;
        _1728 = (((cbLight._m0[_1734].y * 0.3183098733425140380859375) * _1752) * _1753) + _1707;
        _1730 = (((cbLight._m0[_1734].z * 0.3183098733425140380859375) * _1752) * _1753) + _1708;
    }
    bool _1733 = _1713.y == 0u;
    float _1771;
    float _1773;
    float _1775;
    if (_1733)
    {
        _1771 = _1726;
        _1773 = _1728;
        _1775 = _1730;
    }
    else
    {
        uint _1933 = _1637 + 7u;
        float _1949 = (dot(vec3(cbLight._m0[_1637 + 3u].xyz), vec3(_358, _359, _360)) * 0.5) + 0.5;
        float _1950 = _1949 * _1949;
        float _3901 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1952 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1771 = (((cbLight._m0[_1933].x * 0.3183098733425140380859375) * _1951) * _1952) + _1726;
        _1773 = (((cbLight._m0[_1933].y * 0.3183098733425140380859375) * _1951) * _1952) + _1728;
        _1775 = (((cbLight._m0[_1933].z * 0.3183098733425140380859375) * _1951) * _1952) + _1730;
    }
    uint _1778 = _1637 + 8u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1637].w)) * _412) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1637].x + _458;
    float _1794 = cbLight._m0[_1637].y + _459;
    float _1795 = cbLight._m0[_1637].z + _460;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_358, _359, _360), vec3(cbLight._m0[_1637].xyz));
    float _3917 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _1807 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1808 = dot(vec3(_358, _359, _360), vec3(_1800, _1801, _1802));
    float _3939 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_1800, _1801, _1802));
    float _3950 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1792 * _1792;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1832 = 1.0 - _1792;
    float _1843 = (0.5 / (((_1807 * ((_1806 * _1832) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1832) + _1792) * _1806))) * _1806;
    float _3961 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    uint _1859 = _1637 + 9u;
    float _1870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1678].w)) * _412) * 0.949999988079071044921875);
    float _1871 = _1870 * _1870;
    float _1872 = cbLight._m0[_1678].x + _458;
    float _1873 = cbLight._m0[_1678].y + _459;
    float _1874 = cbLight._m0[_1678].z + _460;
    float _1878 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
    float _1879 = _1878 * _1872;
    float _1880 = _1878 * _1873;
    float _1881 = _1878 * _1874;
    float _1882 = dot(vec3(_358, _359, _360), vec3(cbLight._m0[_1678].xyz));
    float _3972 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1886 = dot(vec3(_358, _359, _360), vec3(_1879, _1880, _1881));
    float _3983 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1890 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1879, _1880, _1881));
    float _3994 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1894 = _1871 * _1871;
    float _1898 = ((_1889 * _1889) * (_1894 + (-1.0))) + 1.0;
    float _1907 = (exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1908 = 1.0 - _1871;
    float _1918 = (0.5 / (((_1807 * ((_1885 * _1908) + _1871)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1908) + _1871) * _1885))) * _1885;
    float _4005 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1920 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1894 / ((_1898 * _1898) * 3.141590118408203125));
    float _1930 = (((_1907 * cbLight._m0[_1859].x) * _1920) * _1660) + ((((cbLight._m0[_1778].x * _1629) * _1831) * _1845) * _1674);
    float _1931 = (((_1907 * cbLight._m0[_1859].y) * _1920) * _1660) + ((((cbLight._m0[_1778].y * _1630) * _1831) * _1845) * _1674);
    float _1932 = (((_1907 * cbLight._m0[_1859].z) * _1920) * _1660) + ((((cbLight._m0[_1778].z * _1631) * _1831) * _1845) * _1674);
    float _1994;
    float _1996;
    float _1998;
    if (_1715)
    {
        _1994 = _1930;
        _1996 = _1931;
        _1998 = _1932;
    }
    else
    {
        uint _2000 = _1637 + 2u;
        uint _2004 = _1637 + 10u;
        float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _412) * 0.949999988079071044921875);
        float _2019 = _2018 * _2018;
        float _2020 = cbLight._m0[_2000].x + _458;
        float _2021 = cbLight._m0[_2000].y + _459;
        float _2022 = cbLight._m0[_2000].z + _460;
        float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
        float _2027 = _2026 * _2020;
        float _2028 = _2026 * _2021;
        float _2029 = _2026 * _2022;
        float _2030 = dot(vec3(_358, _359, _360), vec3(cbLight._m0[_2000].xyz));
        float _4016 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2033 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2034 = dot(vec3(_358, _359, _360), vec3(_2027, _2028, _2029));
        float _4027 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2037 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _2038 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2027, _2028, _2029));
        float _4038 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2042 = _2019 * _2019;
        float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
        float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2056 = 1.0 - _2019;
        float _2066 = (0.5 / (((_1807 * ((_2033 * _2056) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _2056) + _2019) * _2033))) * _2033;
        float _4049 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2068 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
        float _2069 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _1994 = (((_2055 * cbLight._m0[_2004].x) * _2068) * _2069) + _1930;
        _1996 = (((_2055 * cbLight._m0[_2004].y) * _2068) * _2069) + _1931;
        _1998 = (((_2055 * cbLight._m0[_2004].z) * _2068) * _2069) + _1932;
    }
    float _2104;
    float _2106;
    float _2108;
    if (_1733)
    {
        _2104 = _1994;
        _2106 = _1996;
        _2108 = _1998;
    }
    else
    {
        uint _2115 = _1637 + 3u;
        uint _2119 = _1637 + 11u;
        float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _412) * 0.949999988079071044921875);
        float _2134 = _2133 * _2133;
        float _2135 = cbLight._m0[_2115].x + _458;
        float _2136 = cbLight._m0[_2115].y + _459;
        float _2137 = cbLight._m0[_2115].z + _460;
        float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
        float _2142 = _2141 * _2135;
        float _2143 = _2141 * _2136;
        float _2144 = _2141 * _2137;
        float _2145 = dot(vec3(_358, _359, _360), vec3(cbLight._m0[_2115].xyz));
        float _4065 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2149 = dot(vec3(_358, _359, _360), vec3(_2142, _2143, _2144));
        float _4076 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2153 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2142, _2143, _2144));
        float _4087 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2157 = _2134 * _2134;
        float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
        float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2171 = 1.0 - _2134;
        float _2181 = (0.5 / (((_1807 * ((_2148 * _2171) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _2171) + _2134) * _2148))) * _2148;
        float _4098 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2183 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
        float _2184 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _2104 = (((_2170 * cbLight._m0[_2119].x) * _2183) * _2184) + _1994;
        _2106 = (((_2170 * cbLight._m0[_2119].y) * _2183) * _2184) + _1996;
        _2108 = (((_2170 * cbLight._m0[_2119].z) * _2183) * _2184) + _1998;
    }
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    if (_1635.y == 0u)
    {
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2259;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2259;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2259;
        uvec4 _2274 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2275 = _2274.x;
        uint _2286 = uint((float(_2274.y) * floor(float(uint(cbSceneParam._m0[85u].y * _480) / _2275))) + floor(float(uint(cbSceneParam._m0[85u].x * _479) / _2275)));
        float _2296 = (log2(_2262 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2297 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        uint _2300 = uint(isnan(14.0) ? _2297 : (isnan(_2297) ? 14.0 : min(_2297, 14.0)));
        uvec4 _2305 = texelFetch(g_lightClusterGridBuffer, int(((_2300 << 2u) + (_2286 << 6u)) >> 2u));
        uint _2306 = _2305.x;
        uint _2307 = _2274.z;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((((1u << ((_2307 >> 4u) & 15u)) + 4294967295u) & _2306) == 0u) || ((_2307 & 240u) == 0u))
        {
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
        }
        else
        {
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            uint _2566 = 0u;
            uint _2575;
            bool _2576;
            for (;;)
            {
                _2575 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2566 << 2u)) >> 2u)).x;
                _2576 = _2575 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2576)
                {
                    frontier_phi_66_pred = _2560;
                    frontier_phi_66_pred_1 = _2565;
                    frontier_phi_66_pred_2 = _2564;
                    frontier_phi_66_pred_3 = _2563;
                    frontier_phi_66_pred_4 = _2562;
                    frontier_phi_66_pred_5 = _2561;
                }
                else
                {
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    uint _2711;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2575;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    for (;;)
                    {
                        uint _2715 = uint(findLSB(_2711)) + (_2566 << 5u);
                        uint _2712 = (_2711 + 4294967295u) & _2711;
                        uint _2717 = _2715 * 48u;
                        vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2717)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 3u)).x));
                        uint _2737 = (_2715 * 48u) + 4u;
                        vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 3u)).x));
                        uint _2756 = (_2715 * 48u) + 8u;
                        vec3 _2767 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x));
                        float _2771 = _2731.x - _2260;
                        float _2772 = _2731.y - _2261;
                        float _2773 = _2731.z - _2262;
                        float _2774 = dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773));
                        float _2777 = inversesqrt(_2774);
                        float _2778 = _2777 * _2771;
                        float _2779 = _2777 * _2772;
                        float _2780 = _2777 * _2773;
                        float _2781 = dot(vec3(_500, _503, _506), vec3(_2778, _2779, _2780));
                        float _2786 = 1.0 - (_2774 * _2731.w);
                        float _4124 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2787 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2788 = sqrt(_2774) * _2750.w;
                        float _2791 = 1.39999997615814208984375 / (_2788 + 1.39999997615814208984375);
                        float _2792 = _2791 * _2791;
                        float _2795 = ((1.0 - _2792) * _2781) + _2792;
                        float _2798 = _2788 * _2788;
                        float _2802 = ((isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))) * _2787) / ((_2798 * 0.699999988079071044921875) + 1.0);
                        float _2806 = (-0.0) - _2260;
                        float _2807 = (-0.0) - _2261;
                        float _2808 = (-0.0) - _2262;
                        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
                        float _2813 = _2812 * _2806;
                        float _2814 = _2812 * _2807;
                        float _2815 = _2812 * _2808;
                        float _2823 = exp2(log2(1.0 / ((_2798 * 3.5) + 5.0)) * 0.25);
                        float _2824 = 1.0 - _561;
                        float _2831 = sqrt(1.0 - ((1.0 - (_2824 * _2824)) * (1.0 - (_2823 * _2823))));
                        float _2832 = _2831 * _2831;
                        float _2833 = _2832 * _2832;
                        float _2834 = _2813 + _2778;
                        float _2835 = _2814 + _2779;
                        float _2836 = _2815 + _2780;
                        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
                        float _2844 = dot(vec3(_500, _503, _506), vec3(_2813, _2814, _2815));
                        float _4140 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2847 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2848 = dot(vec3(_500, _503, _506), vec3(_2840 * _2834, _2840 * _2835, _2840 * _2836));
                        float _4151 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2851 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2855 = ((_2851 * _2851) * (_2833 + (-1.0))) + 1.0;
                        float _2856 = _2791 * _2832;
                        float _2857 = _2856 * _2856;
                        float _2860 = ((1.0 - _2857) * _2781) + _2857;
                        float _4162 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2861 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2862 = 1.0 - _2832;
                        float _2872 = (0.5 / (((_2861 * ((_2847 * _2862) + _2832)) + 9.9999999392252902907785028219223e-09) + (((_2861 * _2862) + _2832) * _2847))) * _2861;
                        float _4173 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2883 = (((_2833 * 3.1415927410125732421875) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) / ((_2855 * _2855) * ((_2798 * 2.1991131305694580078125) + 3.141590118408203125))) * _2787;
                        _2635 = (_2802 * _2750.x) + _2708;
                        _2636 = (_2802 * _2750.y) + _2709;
                        _2637 = (_2802 * _2750.z) + _2710;
                        _2632 = (_2883 * _2767.x) + _2705;
                        _2633 = (_2883 * _2767.y) + _2706;
                        _2634 = (_2883 * _2767.z) + _2707;
                        if (_2712 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2712;
                        }
                    }
                    frontier_phi_66_pred = _2632;
                    frontier_phi_66_pred_1 = _2637;
                    frontier_phi_66_pred_2 = _2636;
                    frontier_phi_66_pred_3 = _2635;
                    frontier_phi_66_pred_4 = _2634;
                    frontier_phi_66_pred_5 = _2633;
                }
                _2408 = frontier_phi_66_pred;
                _2418 = frontier_phi_66_pred_1;
                _2416 = frontier_phi_66_pred_2;
                _2414 = frontier_phi_66_pred_3;
                _2412 = frontier_phi_66_pred_4;
                _2410 = frontier_phi_66_pred_5;
                uint _2567 = _2566 + 1u;
                if (_2567 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2560 = _2408;
                    _2561 = _2410;
                    _2562 = _2412;
                    _2563 = _2414;
                    _2564 = _2416;
                    _2565 = _2418;
                    _2566 = _2567;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
        }
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.z;
        uint _2424 = (_2422 >> 8u) & 15u;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        if (((4294967295u << _2424) & _2306) == 0u)
        {
            _2528 = _2407;
            _2530 = _2409;
            _2532 = _2411;
            _2534 = _2413;
            _2536 = _2415;
            _2538 = _2417;
        }
        else
        {
            float _2553 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
            float _2554 = _2553 * _2260;
            float _2555 = _2553 * _2261;
            float _2556 = _2553 * _2262;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2424 < ((_2422 >> 12u) & 15u))
            {
                float _2529;
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2688 = _2407;
                float _2689 = _2409;
                float _2690 = _2411;
                float _2691 = _2413;
                float _2692 = _2415;
                float _2693 = _2417;
                uint _2694 = _2424;
                uint _2703;
                bool _2704;
                for (;;)
                {
                    _2703 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2694 << 2u)) >> 2u)).x;
                    _2704 = _2703 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2704)
                    {
                        frontier_phi_77_pred = _2693;
                        frontier_phi_77_pred_1 = _2692;
                        frontier_phi_77_pred_2 = _2691;
                        frontier_phi_77_pred_3 = _2690;
                        frontier_phi_77_pred_4 = _2689;
                        frontier_phi_77_pred_5 = _2688;
                    }
                    else
                    {
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        float _2912 = _2690;
                        float _2913 = _2691;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        uint _2916 = _2703;
                        uint _2917;
                        vec4 _2942;
                        float _2943;
                        vec4 _2958;
                        vec3 _2970;
                        vec4 _2986;
                        vec4 _3002;
                        float _3049;
                        bool _3050;
                        for (;;)
                        {
                            uint _2927 = ((_2694 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2916));
                            _2917 = (_2916 + 4294967295u) & _2916;
                            uint _2929 = _2927 * 40u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2943 = _2942.w;
                            uint _2945 = (_2927 * 40u) + 4u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2960 = (_2927 * 40u) + 8u;
                            _2970 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x));
                            uint _2973 = (_2927 * 40u) + 16u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2989 = (_2927 * 40u) + 20u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3005 = (_2927 * 40u) + 24u;
                            vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3024 = (_2927 * 40u) + 28u;
                            vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            _3049 = fma(_2262, _3037.z, fma(_2261, _3037.y, _3037.x * _2260)) + _3037.w;
                            _3050 = !((fma(_2262, _3018.z, fma(_2261, _3018.y, _3018.x * _2260)) + _3018.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3050)
                            {
                                float _3077 = _2942.x - _2260;
                                float _3078 = _2942.y - _2261;
                                float _3079 = _2942.z - _2262;
                                float _3080 = dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079));
                                float _3083 = inversesqrt(_3080);
                                float _3084 = _3083 * _3077;
                                float _3085 = _3083 * _3078;
                                float _3086 = _3083 * _3079;
                                float _3090 = 1.0 - (_3080 / (_2943 * _2943));
                                float _4184 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3095 = sqrt(_3080) * _2958.w;
                                float _3097 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                                float _3098 = _3097 * _3097;
                                float _3101 = ((1.0 - _3098) * dot(vec3(_3084, _3085, _3086), vec3(_500, _503, _506))) + _3098;
                                float _3104 = _3095 * _3095;
                                float _3108 = (fma(_2262, _2986.z, fma(_2261, _2986.y, _2986.x * _2260)) + _2986.w) / _3049;
                                float _3109 = (fma(_2262, _3002.z, fma(_2261, _3002.y, _3002.x * _2260)) + _3002.w) / _3049;
                                float _3113 = 1.0 - dot(vec2(_3108, _3109), vec2(_3108, _3109));
                                float _4200 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3115 = _3114 * (((isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))) * _3091) / ((_3104 * 0.699999988079071044921875) + 1.0));
                                float _3127 = exp2(log2(1.0 / ((_3104 * 3.5) + 5.0)) * 0.25);
                                float _3128 = 1.0 - _561;
                                float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                                float _3136 = _3135 * _3135;
                                float _3137 = _3136 * _3136;
                                float _3138 = _3084 - _2554;
                                float _3139 = _3085 - _2555;
                                float _3140 = _3086 - _2556;
                                float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                                float _3148 = dot(vec3(_500, _503, _506), vec3((-0.0) - _2554, (-0.0) - _2555, (-0.0) - _2556));
                                float _4211 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3151 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3152 = dot(vec3(_500, _503, _506), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                                float _4222 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                                float _3160 = _3097 * _3136;
                                float _3161 = _3160 * _3160;
                                float _3167 = ((1.0 - _3161) * dot(vec3(_500, _503, _506), vec3(_3084, _3085, _3086))) + _3161;
                                float _4233 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3168 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3169 = 1.0 - _3136;
                                float _3179 = (0.5 / (((_3168 * ((_3151 * _3169) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3136) * _3151))) * _3168;
                                float _4244 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3189 = (_3114 * _3091) * (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_3159 * _3159) * ((_3104 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3115 * _2958.y;
                                frontier_phi_83_pred_1 = _3115 * _2958.x;
                                frontier_phi_83_pred_2 = _3189 * _2970.z;
                                frontier_phi_83_pred_3 = _3189 * _2970.y;
                                frontier_phi_83_pred_4 = _3189 * _2970.x;
                                frontier_phi_83_pred_5 = _3115 * _2958.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3197 = frontier_phi_83_pred;
                            _3196 = frontier_phi_83_pred_1;
                            _3195 = frontier_phi_83_pred_2;
                            _3194 = frontier_phi_83_pred_3;
                            _3193 = frontier_phi_83_pred_4;
                            _3198 = frontier_phi_83_pred_5;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            _2902 = _3198 + _2915;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            _2899 = _3195 + _2912;
                            if (_2917 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2917;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2902;
                        frontier_phi_77_pred_1 = _2901;
                        frontier_phi_77_pred_2 = _2900;
                        frontier_phi_77_pred_3 = _2899;
                        frontier_phi_77_pred_4 = _2898;
                        frontier_phi_77_pred_5 = _2897;
                    }
                    _2539 = frontier_phi_77_pred;
                    _2537 = frontier_phi_77_pred_1;
                    _2535 = frontier_phi_77_pred_2;
                    _2533 = frontier_phi_77_pred_3;
                    _2531 = frontier_phi_77_pred_4;
                    _2529 = frontier_phi_77_pred_5;
                    uint _2695 = _2694 + 1u;
                    if (_2695 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2688 = _2529;
                        _2689 = _2531;
                        _2690 = _2533;
                        _2691 = _2535;
                        _2692 = _2537;
                        _2693 = _2539;
                        _2694 = _2695;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2533;
                frontier_phi_58_59_ladder_1 = _2539;
                frontier_phi_58_59_ladder_2 = _2537;
                frontier_phi_58_59_ladder_3 = _2535;
                frontier_phi_58_59_ladder_4 = _2531;
                frontier_phi_58_59_ladder_5 = _2529;
            }
            else
            {
                frontier_phi_58_59_ladder = _2411;
                frontier_phi_58_59_ladder_1 = _2417;
                frontier_phi_58_59_ladder_2 = _2415;
                frontier_phi_58_59_ladder_3 = _2413;
                frontier_phi_58_59_ladder_4 = _2409;
                frontier_phi_58_59_ladder_5 = _2407;
            }
            _2528 = frontier_phi_58_59_ladder_5;
            _2530 = frontier_phi_58_59_ladder_4;
            _2532 = frontier_phi_58_59_ladder;
            _2534 = frontier_phi_58_59_ladder_3;
            _2536 = frontier_phi_58_59_ladder_2;
            _2538 = frontier_phi_58_59_ladder_1;
        }
        float _2543 = isnan(1.0) ? _545 : (isnan(_545) ? 1.0 : min(_545, 1.0));
        _2319 = (_2543 * _2534) + _1771;
        _2321 = (_2543 * _2536) + _1773;
        _2323 = (_2543 * _2538) + _1775;
        _2325 = ((_2528 * 0.039999999105930328369140625) * _2543) + _2104;
        _2327 = ((_2530 * 0.039999999105930328369140625) * _2543) + _2106;
        _2329 = ((_2532 * 0.039999999105930328369140625) * _2543) + _2108;
    }
    else
    {
        _2319 = _1771;
        _2321 = _1773;
        _2323 = _1775;
        _2325 = _2104;
        _2327 = _2106;
        _2329 = _2108;
    }
    float _4260 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4271 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4282 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _2346 = ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2319 + ((isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))) * _545))) + ((_2325 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _1384)) * cbPerFrame._m0[3u].x);
    float _2347 = ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2321 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _545))) + ((_2327 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1384)) * cbPerFrame._m0[3u].x);
    float _2348 = ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2323 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _545))) + ((_2329 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1384)) * cbPerFrame._m0[3u].x);
    uint _2349 = _519 + 6u;
    float _2357 = _479 / cbSceneParam._m0[86u].x;
    float _2358 = _480 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _431 : (isnan(_431) ? cbSceneParam._m0[77u].w : min(_431, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    if (_431 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_431) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _431 : min(cbSceneParam._m0[80u].w, _431));
        float _2433 = _2432 / _431;
        float _2444 = _2433 * _451;
        float _2445 = _452 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2448 = _2433 * _453;
        float _2450 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2451 = _2450 + cbSceneParam._m0[79u].w;
        float _2452 = cbSceneParam._m0[79u].w - _2445;
        float _2458 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2448 * _2448));
        float _2461 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2458;
        float _2466 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2468 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2645;
        if (abs((_2446 - _2450) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2645 = ((((_2451 > 0.0) ? exp2(_2466 * _2451) : (2.0 - exp2(_2468 * _2451))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2461;
        }
        else
        {
            float _2589 = 1.0 / cbSceneParam._m0[80u].x;
            float _2590 = isnan(_2452) ? _2451 : (isnan(_2451) ? _2452 : max(_2451, _2452));
            float _2591 = isnan(_2452) ? _2451 : (isnan(_2451) ? _2452 : min(_2451, _2452));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            float _2601 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : min(_2591, 0.0));
            _2645 = ((abs(_2458 / _2446) * cbSceneParam._m0[80u].y) * ((((_2600 - _2601) * 2.0) - ((exp2(_2466 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0)))) - exp2(_2466 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0))))) * _2589)) - ((exp2(_2468 * _2600) - exp2(_2468 * _2601)) * _2589))) + (_2461 * cbSceneParam._m0[80u].z);
        }
        vec4 _2647 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2656 = exp2((_2645 * (-1.44269502162933349609375)) * (1.0 - _2647.w));
        float _2657 = log2(_2656);
        float _2673 = log2(_2377);
        _2470 = (exp2(_2673 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].x)) * _2647.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2472 = (exp2(_2673 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].y)) * _2647.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2474 = (exp2(_2673 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].z)) * _2647.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2476 = _2656 * _2377;
    }
    else
    {
        _2470 = _2374;
        _2472 = _2375;
        _2474 = _2376;
        _2476 = _2377;
    }
    bool _2683;
    vec4 _2486;
    vec4 _2508;
    float _2510;
    float _2514;
    float _2515;
    float _2516;
    float _2517;
    bool _2527;
    for (;;)
    {
        _2486 = cbMatDynParam._m0[0u];
        float _2488 = roundEven(_2486.y);
        bool _2489 = _2488 == 3.0;
        float _2490 = log2(_2476);
        float _2497 = exp2(_2490 * cbSceneParam._m0[78u].x) * _2346;
        float _2498 = exp2(_2490 * cbSceneParam._m0[78u].y) * _2347;
        float _2499 = exp2(_2490 * cbSceneParam._m0[78u].z) * _2348;
        float _2506 = _467 + (-0.5);
        _2508 = cbMtdParam._m0[1u];
        _2510 = _2508.y * _2506;
        float _2513 = (_2488 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2514 = _2513 * (_2489 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2470)));
        _2515 = _2513 * (_2489 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2472)));
        _2516 = _2513 * (_2489 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2474)));
        _2517 = _2506 * 0.999000012874603271484375;
        _2527 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2527)
        {
            if ((cbInstanceData._m0[_519 + 7u].x + _2517) < 0.5)
            {
                _2683 = true;
                break;
            }
        }
        uint _2624 = _521 + uint(_2486.w);
        if ((cbInstanceData._m0[_2624].w < 1.0) && ((cbInstanceData._m0[_2624].w + _2517) < 0.5))
        {
            _2683 = true;
            break;
        }
        if ((_2510 + 1.0) < _2508.x)
        {
            _2683 = true;
            break;
        }
        _2683 = false;
        break;
    }
    float _2888;
    if (_2683)
    {
        discard_state = true;
        _2888 = 0.0;
    }
    else
    {
        _2888 = cbInstanceData._m0[_2349].w;
    }
    SV_Target.x = _2514;
    SV_Target.y = _2515;
    SV_Target.z = _2516;
    SV_Target.w = _2888;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
    discard_exit();
}


