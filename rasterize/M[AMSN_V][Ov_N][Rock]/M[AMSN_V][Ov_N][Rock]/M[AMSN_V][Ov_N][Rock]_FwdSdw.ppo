#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _903;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = abs(_197);
    float _219 = abs(_198);
    float _220 = abs(_199);
    float _221 = _218 * _218;
    float _222 = _219 * _219;
    float _223 = _220 * _220;
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _257 = _250 * 0.0500000007450580596923828125;
    float _267 = (cbTextureTilingScale._m0[3u].x * (_246 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_267, (cbTextureTilingScale._m0[3u].y * _257) + cbTextureTilingScale._m0[3u].w));
    float _281 = (cbTextureTilingScale._m0[3u].y * (_254 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].w;
    vec4 _282 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_267, _281));
    vec4 _295 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _257) + cbTextureTilingScale._m0[3u].z, _281));
    vec4 _323 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _327 = _323.z;
    float _330 = (_323.x * 2.0) + (-1.0);
    float _331 = (_323.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_330, _331), vec2(_330, _331));
    float _3502 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))));
    float _341 = _330 + ((((((_282.x * _222) + (_271.x * _223)) + (_295.x * _221)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _342 = _331 + ((((((_282.y * _222) + (_271.y * _223)) + (_295.y * _221)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _345 = fma(_338, _197, fma(_342, _203 * TANGENT.x, _341 * (_189 * _182)));
    float _348 = fma(_338, _198, fma(_342, _203 * TANGENT.y, _341 * (_189 * _183)));
    float _351 = fma(_338, _199, fma(_342, _203 * TANGENT.z, _341 * (_189 * _184)));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    float _356 = _355 * _345;
    float _357 = _355 * _348;
    float _358 = _355 * _351;
    float _363 = cbMtdParam._m0[9u].x + dot(vec4(_356, _357, _358, 0.0), vec4(cbMtdParam._m0[9u].zw, cbMtdParam._m0[10u].x, 0.0));
    float _3513 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    vec4 _376 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _392 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _394 = _392.x;
    float _395 = _392.y;
    float _396 = _392.z;
    float _403 = ((_376.x - _394) * _364) + _394;
    float _404 = ((_376.y - _395) * _364) + _395;
    float _405 = ((_376.z - _396) * _364) + _396;
    float _408 = (((((_282.z * _222) + (_271.z * _223)) + (_295.z * _221)) - _327) * cbMtdParam._m0[9u].y) + _327;
    float _3524 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3557 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3568 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _429 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _449 = cbSceneParam._m0[71u].x - (_246 / _439);
    float _450 = cbSceneParam._m0[71u].y - (_250 / _439);
    float _451 = cbSceneParam._m0[71u].z - (_254 / _439);
    float _455 = inversesqrt(dot(vec3(_449, _450, _451), vec3(_449, _450, _451)));
    float _456 = _449 * _455;
    float _457 = _450 * _455;
    float _458 = _451 * _455;
    float _464 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _465 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _486 = fma(_358, cbSceneParam._m0[5u].z, fma(_357, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _356));
    float _489 = fma(_358, cbSceneParam._m0[6u].z, fma(_357, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _356));
    float _492 = fma(_358, cbSceneParam._m0[7u].z, fma(_357, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _356));
    uint _505 = uint(roundEven(NORMAL.w)) * 13u;
    uint _508 = (_505 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _514 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * cbInstanceData._m0[_508].x;
    float _515 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_508].y;
    float _516 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_508].z;
    float _3579 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    vec4 _528 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _464, cbSceneParam._m0[86u].y * _465));
    float _531 = _528.x * TEXCOORD.z;
    float _532 = dot(vec3(_356, _357, _358), vec3(_456, _457, _458));
    float _535 = _532 * 2.0;
    float _539 = (_535 * _356) - _456;
    float _540 = (_535 * _357) - _457;
    float _541 = (_535 * _358) - _458;
    float _545 = abs(dot(vec3(_456, _457, _458), vec3(_356, _357, _358)));
    float _3612 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _547 = sqrt(_410);
    float _560 = exp2((_547 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_547 * 3.0));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _902;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _627 = fma(_600, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592));
        float _631 = fma(_600, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592));
        float _635 = fma(_600, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592));
        float _660 = _592 + _356;
        float _661 = _596 + _357;
        float _662 = _600 + _358;
        float _672 = fma(_662, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660)) - _627;
        float _673 = fma(_662, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660)) - _631;
        float _674 = fma(_662, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660)) - _635;
        float _678 = inversesqrt(dot(vec3(_672, _673, _674), vec3(_672, _673, _674)));
        float _691 = ((_678 * _672) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_627 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_678 * _673) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_631 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_678 * _674) / cbModelParam._m0[34u].z) + ((((((_635 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        float _730 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_696.x + (-0.5));
        float _732 = _730 * (_696.y + (-0.5));
        float _733 = _730 * (_696.z + (-0.5));
        float _740 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_703.x + (-0.5));
        float _742 = _740 * (_703.y + (-0.5));
        float _743 = _740 * (_703.z + (-0.5));
        float _750 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_710.x + (-0.5));
        float _752 = _750 * (_710.y + (-0.5));
        float _753 = _750 * (_710.z + (-0.5));
        float _760 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_717.x + (-0.5));
        float _762 = _760 * (_717.y + (-0.5));
        float _763 = _760 * (_717.z + (-0.5));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = _731 * 0.5;
        float _768 = _741 * 0.5;
        float _769 = _751 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _784 = (dot(vec3(_356, _357, _358), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _794 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3660 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_796 + 1.0))) + _801) * _764;
        float _811 = _732 * 0.5;
        float _812 = _742 * 0.5;
        float _813 = _752 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_356, _357, _358), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3693 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_838 + 1.0))) + _843) * _765;
        float _853 = _733 * 0.5;
        float _854 = _743 * 0.5;
        float _855 = _753 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _869 = (dot(vec3(_356, _357, _358), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _878 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3726 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_880 + 1.0))) + _885) * _766;
        _902 = _733;
        _904 = _732;
        _905 = _731;
        _906 = _743;
        _907 = _742;
        _908 = _741;
        _909 = _753;
        _910 = _752;
        _911 = _751;
        _912 = _766;
        _913 = _765;
        _914 = _764;
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
    }
    else
    {
        _902 = _903;
        _904 = _903;
        _905 = _903;
        _906 = _903;
        _907 = _903;
        _908 = _903;
        _909 = _903;
        _910 = _903;
        _911 = _903;
        _912 = _903;
        _913 = _903;
        _914 = _903;
        _915 = 0.0;
        _916 = 0.0;
        _917 = 0.0;
    }
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _943 = fma(_600, cbModelParam._m0[30u].z, fma(_596, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _592));
        float _947 = fma(_600, cbModelParam._m0[31u].z, fma(_596, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _592));
        float _951 = fma(_600, cbModelParam._m0[32u].z, fma(_596, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _592));
        float _974 = _592 + _356;
        float _975 = _596 + _357;
        float _976 = _600 + _358;
        float _986 = fma(_976, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974)) - _943;
        float _987 = fma(_976, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974)) - _947;
        float _988 = fma(_976, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974)) - _951;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_943 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_947 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[35u].z) + ((((((_951 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1042 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1009.x + (-0.5));
        float _1044 = _1042 * (_1009.y + (-0.5));
        float _1045 = _1042 * (_1009.z + (-0.5));
        float _1052 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1016.x + (-0.5));
        float _1054 = _1052 * (_1016.y + (-0.5));
        float _1055 = _1052 * (_1016.z + (-0.5));
        float _1062 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1023.x + (-0.5));
        float _1064 = _1062 * (_1023.y + (-0.5));
        float _1065 = _1062 * (_1023.z + (-0.5));
        float _1072 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1030.x + (-0.5));
        float _1074 = _1072 * (_1030.y + (-0.5));
        float _1075 = _1072 * (_1030.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_356, _357, _358), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3789 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1106 + 1.0))) + _1111) * _1076;
        float _1121 = _1044 * 0.5;
        float _1122 = _1054 * 0.5;
        float _1123 = _1064 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_356, _357, _358), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3822 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1148 + 1.0))) + _1153) * _1077;
        float _1163 = _1045 * 0.5;
        float _1164 = _1055 * 0.5;
        float _1165 = _1065 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_356, _357, _358), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3855 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1190 + 1.0))) + _1195) * _1078;
        _1212 = _1045;
        _1213 = _1044;
        _1214 = _1043;
        _1215 = _1055;
        _1216 = _1054;
        _1217 = _1053;
        _1218 = _1065;
        _1219 = _1064;
        _1220 = _1063;
        _1221 = _1078;
        _1222 = _1077;
        _1223 = _1076;
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _903;
        _1213 = _903;
        _1214 = _903;
        _1215 = _903;
        _1216 = _903;
        _1217 = _903;
        _1218 = _903;
        _1219 = _903;
        _1220 = _903;
        _1221 = _903;
        _1222 = _903;
        _1223 = _903;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _915)) + _915;
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _916)) + _916;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _917)) + _917;
    float _1259 = fma(_1238, cbSceneParam._m0[89u].z, fma(_1237, cbSceneParam._m0[89u].y, _1236 * cbSceneParam._m0[89u].x));
    float _1262 = fma(_1238, cbSceneParam._m0[90u].z, fma(_1237, cbSceneParam._m0[90u].y, _1236 * cbSceneParam._m0[90u].x));
    float _1265 = fma(_1238, cbSceneParam._m0[91u].z, fma(_1237, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1236));
    float _1280 = _539 * 0.5;
    float _1281 = _540 * 0.5;
    float _1282 = _541 * 0.5;
    float _1283 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1286 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1289 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1323;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1296 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_902, _906, _909, _912));
        float _1300 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_904, _907, _910, _913));
        float _1304 = dot(vec4(_1280, _1281, _1282, 1.0), vec4(_905, _908, _911, _914));
        float _1311 = dot(vec4(cbModelParam._m0[39u]), vec4(_1280, _1281, _1282, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1311) ? 0.0 : (isnan(0.0) ? _1311 : max(0.0, _1311))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1334;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1325 = dot(vec4(cbModelParam._m0[40u]), vec4(_1280, _1281, _1282, 1.0));
        _1334 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1334 = 1.0;
    }
    float _1338 = (_1334 * cbModelParam._m0[1u].x) + (_1323 * (1.0 - cbModelParam._m0[1u].x));
    float _1348 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _410);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1348 : min(cbModelParam._m0[25u].z, _1348));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1398 = fma(_600, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592)) + cbModelParam._m0[13u].w;
        float _1402 = fma(_600, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592)) + cbModelParam._m0[14u].w;
        float _1406 = fma(_600, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592)) + cbModelParam._m0[15u].w;
        float _1409 = fma(_541, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _539));
        float _1412 = fma(_541, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _539));
        float _1415 = fma(_541, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _539));
        float _1443;
        if (_1409 > 0.0)
        {
            _1443 = abs((1.0 - _1398) / _1409);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1398 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1443 = frontier_phi_14_12_ladder;
        }
        float _1617;
        if (_1412 > 0.0)
        {
            _1617 = abs((1.0 - _1402) / _1412);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1402 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1617 = frontier_phi_23_19_ladder;
        }
        float _1913;
        if (_1415 > 0.0)
        {
            _1913 = abs((1.0 - _1406) / _1415);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1406 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1913 = frontier_phi_35_30_ladder;
        }
        float _1915 = isnan(_1617) ? _1443 : (isnan(_1443) ? _1617 : min(_1443, _1617));
        float _1916 = isnan(_1913) ? _1915 : (isnan(_1915) ? _1913 : min(_1915, _1913));
        float _1920 = (_1916 * _1409) + _1398;
        float _1921 = (_1916 * _1412) + _1402;
        float _1922 = (_1916 * _1415) + _1406;
        float _1923 = _1916 * 9.9999997473787516355514526367188e-05;
        float _1925 = (-1.0) - _1923;
        float _1927 = _1923 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1922 > _1927) || ((_1922 < _1925) || ((_1921 > _1927) || ((_1921 < _1925) || ((_1920 < _1925) || (_1920 > _1927))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1922, cbModelParam._m0[9u].z, fma(_1921, cbModelParam._m0[9u].y, _1920 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1922, cbModelParam._m0[10u].z, fma(_1921, cbModelParam._m0[10u].y, _1920 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1922, cbModelParam._m0[11u].z, fma(_1921, cbModelParam._m0[11u].y, _1920 * cbModelParam._m0[11u].x))), _1349);
            frontier_phi_13_35_ladder = _2067.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2067.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2067.x * cbModelParam._m0[1u].y;
        }
        _1431 = frontier_phi_13_35_ladder_2;
        _1433 = frontier_phi_13_35_ladder_1;
        _1435 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_539, _540, _541), _1349);
        _1431 = _1419.x * cbModelParam._m0[1u].y;
        _1433 = _1419.y * cbModelParam._m0[1u].y;
        _1435 = _1419.z * cbModelParam._m0[1u].y;
    }
    float _1439 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _410);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1439 : min(cbModelParam._m0[25u].w, _1439));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1497 = fma(_600, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592)) + cbModelParam._m0[21u].w;
        float _1501 = fma(_600, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592)) + cbModelParam._m0[22u].w;
        float _1505 = fma(_600, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592)) + cbModelParam._m0[23u].w;
        float _1508 = fma(_541, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _539));
        float _1511 = fma(_541, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _539));
        float _1514 = fma(_541, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _539));
        float _1622;
        if (_1508 > 0.0)
        {
            _1622 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1622 = frontier_phi_25_21_ladder;
        }
        float _1940;
        if (_1511 > 0.0)
        {
            _1940 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1940 = frontier_phi_37_32_ladder;
        }
        float _2267;
        if (_1514 > 0.0)
        {
            _2267 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2267 = frontier_phi_47_44_ladder;
        }
        float _2269 = isnan(_1940) ? _1622 : (isnan(_1622) ? _1940 : min(_1622, _1940));
        float _2270 = isnan(_2267) ? _2269 : (isnan(_2269) ? _2267 : min(_2269, _2267));
        float _2274 = (_2270 * _1508) + _1497;
        float _2275 = (_2270 * _1511) + _1501;
        float _2276 = (_2270 * _1514) + _1505;
        float _2277 = _2270 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2277;
        float _2280 = _2277 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2276 > _2280) || ((_2276 < _2278) || ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 < _2278) || (_2274 > _2280))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2276, cbModelParam._m0[17u].z, fma(_2275, cbModelParam._m0[17u].y, _2274 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2276, cbModelParam._m0[18u].z, fma(_2275, cbModelParam._m0[18u].y, _2274 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2276, cbModelParam._m0[19u].z, fma(_2275, cbModelParam._m0[19u].y, _2274 * cbModelParam._m0[19u].x))), _1440);
            frontier_phi_22_47_ladder = _2394.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2394.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2394.x * cbModelParam._m0[1u].z;
        }
        _1533 = frontier_phi_22_47_ladder_2;
        _1535 = frontier_phi_22_47_ladder_1;
        _1537 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_539, _540, _541), _1440);
        _1533 = _1517.x * cbModelParam._m0[1u].z;
        _1535 = _1517.y * cbModelParam._m0[1u].z;
        _1537 = _1517.z * cbModelParam._m0[1u].z;
    }
    float _1549 = ((((1.0 - _560) * ((_547 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_560 * _547)) * _531;
    float _1550 = _1549 * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1551 = _1549 * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1552 = _1549 * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1555 = fma(_1552, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1558 = fma(_1552, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1561 = fma(_1552, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, _1550 * cbSceneParam._m0[91u].x));
    float _1596 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1600 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1604 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1608 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1609 = _1596 / _1608;
    float _1610 = _1600 / _1608;
    float _1611 = _1604 / _1608;
    float _1758;
    float _1759;
    float _1760;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1638 = ((uint(_1611 > cbSceneParam._m0[59u].y) + uint(_1611 > cbSceneParam._m0[59u].x)) + uint(_1611 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1639 = _1638 + 43u;
        uint _1647 = _1638 + 44u;
        uint _1655 = _1638 + 45u;
        uint _1663 = _1638 + 46u;
        float _1674 = fma(_1608, cbSceneParam._m0[_1639].w, fma(_1604, cbSceneParam._m0[_1639].z, fma(_1600, cbSceneParam._m0[_1639].y, _1596 * cbSceneParam._m0[_1639].x)));
        float _1678 = fma(_1608, cbSceneParam._m0[_1647].w, fma(_1604, cbSceneParam._m0[_1647].z, fma(_1600, cbSceneParam._m0[_1647].y, _1596 * cbSceneParam._m0[_1647].x)));
        float _1686 = fma(_1608, cbSceneParam._m0[_1663].w, fma(_1604, cbSceneParam._m0[_1663].z, fma(_1600, cbSceneParam._m0[_1663].y, _1596 * cbSceneParam._m0[_1663].x)));
        float _1691 = cbSceneParam._m0[33u].z * _1686;
        float _1693 = cbSceneParam._m0[33u].w * _1686;
        float _1696 = fma(_1608, cbSceneParam._m0[_1655].w, fma(_1604, cbSceneParam._m0[_1655].z, fma(_1600, cbSceneParam._m0[_1655].y, _1596 * cbSceneParam._m0[_1655].x))) / _1686;
        float _1744 = (cbSceneParam._m0[33u].x - sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611))) * cbSceneParam._m0[33u].y;
        float _3981 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1751 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1691 + _1674) / _1686, (_1693 + _1678) / _1686), _1696), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1693 + _1674) / _1686, (_1678 - _1691) / _1686), _1696), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1674 - _1691) / _1686, (_1678 - _1693) / _1686), _1696), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1674 - _1693) / _1686, (_1691 + _1678) / _1686), _1696), 0.0)).x), vec4(0.25)));
        _1758 = 1.0 - (_1751 * cbSceneParam._m0[34u].x);
        _1759 = 1.0 - (_1751 * cbSceneParam._m0[34u].y);
        _1760 = 1.0 - (_1751 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1758 = 1.0;
        _1759 = 1.0;
        _1760 = 1.0;
    }
    float _1824;
    float _1826;
    float _1828;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1812 = fma(_1608, cbSceneParam._m0[63u].w, fma(_1604, cbSceneParam._m0[63u].z, fma(_1600, cbSceneParam._m0[63u].y, _1596 * cbSceneParam._m0[63u].x)));
        float _1813 = fma(_1608, cbSceneParam._m0[60u].w, fma(_1604, cbSceneParam._m0[60u].z, fma(_1600, cbSceneParam._m0[60u].y, _1596 * cbSceneParam._m0[60u].x))) / _1812;
        float _1814 = fma(_1608, cbSceneParam._m0[61u].w, fma(_1604, cbSceneParam._m0[61u].z, fma(_1600, cbSceneParam._m0[61u].y, _1596 * cbSceneParam._m0[61u].x))) / _1812;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1813 >= cbSceneParam._m0[64u].x) && (_1814 >= cbSceneParam._m0[64u].y)) && (_1813 <= cbSceneParam._m0[64u].z)) && (_1814 <= cbSceneParam._m0[64u].w))
        {
            float _1953 = fma(_1608, cbSceneParam._m0[62u].w, fma(_1604, cbSceneParam._m0[62u].z, fma(_1600, cbSceneParam._m0[62u].y, _1596 * cbSceneParam._m0[62u].x))) / _1812;
            float _1957 = isnan(cbSceneParam._m0[41u].w) ? _1953 : (isnan(_1953) ? cbSceneParam._m0[41u].w : max(_1953, cbSceneParam._m0[41u].w));
            float _2000 = (cbSceneParam._m0[33u].x - sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611))) * cbSceneParam._m0[33u].y;
            float _3997 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
            float _2007 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1813, cbSceneParam._m0[33u].w + _1814), _1957), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1813, _1814 - cbSceneParam._m0[33u].z), _1957), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1813 - cbSceneParam._m0[33u].z, _1814 - cbSceneParam._m0[33u].w), _1957), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1813 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1814), _1957), 0.0)).x), vec4(0.25)));
            float _2011 = 1.0 - (_2007 * cbSceneParam._m0[34u].x);
            float _2012 = 1.0 - (_2007 * cbSceneParam._m0[34u].y);
            float _2013 = 1.0 - (_2007 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2013) ? _1760 : (isnan(_1760) ? _2013 : min(_1760, _2013));
            frontier_phi_34_33_ladder_1 = isnan(_2012) ? _1759 : (isnan(_1759) ? _2012 : min(_1759, _2012));
            frontier_phi_34_33_ladder_2 = isnan(_2011) ? _1758 : (isnan(_1758) ? _2011 : min(_1758, _2011));
        }
        else
        {
            frontier_phi_34_33_ladder = _1760;
            frontier_phi_34_33_ladder_1 = _1759;
            frontier_phi_34_33_ladder_2 = _1758;
        }
        _1824 = frontier_phi_34_33_ladder_2;
        _1826 = frontier_phi_34_33_ladder_1;
        _1828 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1824 = _1758;
        _1826 = _1759;
        _1828 = _1760;
    }
    uvec4 _1833 = floatBitsToUint(cbInstanceData._m0[_505 + 5u]);
    uint _1835 = _1833.x * 14u;
    uint _1836 = _1835 + 13u;
    float _1843 = _531 + (-1.0);
    float _1848 = (cbLight._m0[_1836].x * _1843) + 1.0;
    float _1849 = (cbLight._m0[_1836].y * _1843) + 1.0;
    float _1850 = (cbLight._m0[_1836].z * _1843) + 1.0;
    float _1851 = (cbLight._m0[_1836].w * _1843) + 1.0;
    uint _1852 = _1835 + 5u;
    float _1858 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1862 = _1835 + 4u;
    float _1872 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1876 = _1835 | 1u;
    float _1887 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_356, _357, _358));
    float _1890 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_356, _357, _358));
    float _4033 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _4044 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1895 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _1897 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.3183098733425140380859375;
    float _1904 = ((cbLight._m0[_1852].x * _1858) * _1897) + (((cbLight._m0[_1862].x * _1824) * _1872) * _1895);
    float _1905 = ((_1858 * cbLight._m0[_1852].y) * _1897) + (((cbLight._m0[_1862].y * _1826) * _1872) * _1895);
    float _1906 = ((_1858 * cbLight._m0[_1852].z) * _1897) + (((cbLight._m0[_1862].z * _1828) * _1872) * _1895);
    uvec4 _1910 = floatBitsToUint(cbLight._m0[_1835 + 12u]);
    bool _1912 = _1910.x == 0u;
    float _2014;
    float _2016;
    float _2018;
    if (_1912)
    {
        _2014 = _1904;
        _2016 = _1905;
        _2018 = _1906;
    }
    else
    {
        uint _2022 = _1835 + 6u;
        float _2038 = (dot(vec3(cbLight._m0[_1835 + 2u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _4055 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2041 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2014 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1904;
        _2016 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1905;
        _2018 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1906;
    }
    bool _2021 = _1910.y == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2021)
    {
        _2076 = _2014;
        _2078 = _2016;
        _2080 = _2018;
    }
    else
    {
        uint _2238 = _1835 + 7u;
        float _2254 = (dot(vec3(cbLight._m0[_1835 + 3u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4071 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2257 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2076 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2014;
        _2078 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2016;
        _2080 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2018;
    }
    uint _2083 = _1835 + 8u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _410) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_1835].x + _456;
    float _2099 = cbLight._m0[_1835].y + _457;
    float _2100 = cbLight._m0[_1835].z + _458;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1835].xyz));
    float _4087 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _2112 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _2113 = dot(vec3(_356, _357, _358), vec3(_2105, _2106, _2107));
    float _4109 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_2105, _2106, _2107));
    float _4120 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2097 * _2097;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2136 = (exp2(log2(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2137 = 1.0 - _2097;
    float _2148 = (0.5 / (((_2112 * ((_2111 * _2137) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2137) + _2097) * _2111))) * _2111;
    float _4131 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2150 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    uint _2164 = _1835 + 9u;
    float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _410) * 0.949999988079071044921875);
    float _2176 = _2175 * _2175;
    float _2177 = cbLight._m0[_1876].x + _456;
    float _2178 = cbLight._m0[_1876].y + _457;
    float _2179 = cbLight._m0[_1876].z + _458;
    float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
    float _2184 = _2183 * _2177;
    float _2185 = _2183 * _2178;
    float _2186 = _2183 * _2179;
    float _2187 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1876].xyz));
    float _4142 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2191 = dot(vec3(_356, _357, _358), vec3(_2184, _2185, _2186));
    float _4153 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2184, _2185, _2186));
    float _4164 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2176 * _2176;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2213 = 1.0 - _2176;
    float _2223 = (0.5 / (((_2112 * ((_2190 * _2213) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2213) + _2176) * _2190))) * _2190;
    float _4175 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    float _2235 = (((_2212 * cbLight._m0[_2164].x) * _2225) * _1858) + ((((cbLight._m0[_2083].x * _1824) * _2136) * _2150) * _1872);
    float _2236 = (((_2212 * cbLight._m0[_2164].y) * _2225) * _1858) + ((((cbLight._m0[_2083].y * _1826) * _2136) * _2150) * _1872);
    float _2237 = (((_2212 * cbLight._m0[_2164].z) * _2225) * _1858) + ((((cbLight._m0[_2083].z * _1828) * _2136) * _2150) * _1872);
    float _2293;
    float _2295;
    float _2297;
    if (_1912)
    {
        _2293 = _2235;
        _2295 = _2236;
        _2297 = _2237;
    }
    else
    {
        uint _2299 = _1835 + 2u;
        uint _2303 = _1835 + 10u;
        float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _410) * 0.949999988079071044921875);
        float _2318 = _2317 * _2317;
        float _2319 = cbLight._m0[_2299].x + _456;
        float _2320 = cbLight._m0[_2299].y + _457;
        float _2321 = cbLight._m0[_2299].z + _458;
        float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
        float _2326 = _2325 * _2319;
        float _2327 = _2325 * _2320;
        float _2328 = _2325 * _2321;
        float _2329 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_2299].xyz));
        float _4186 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2333 = dot(vec3(_356, _357, _358), vec3(_2326, _2327, _2328));
        float _4197 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2337 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2326, _2327, _2328));
        float _4208 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2341 = _2318 * _2318;
        float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
        float _2354 = (exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2355 = 1.0 - _2318;
        float _2365 = (0.5 / (((_2112 * ((_2332 * _2355) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2355) + _2318) * _2332))) * _2332;
        float _4219 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2367 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
        float _2368 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2293 = (((_2354 * cbLight._m0[_2303].x) * _2367) * _2368) + _2235;
        _2295 = (((_2354 * cbLight._m0[_2303].y) * _2367) * _2368) + _2236;
        _2297 = (((_2354 * cbLight._m0[_2303].z) * _2367) * _2368) + _2237;
    }
    float _2399;
    float _2401;
    float _2403;
    if (_2021)
    {
        _2399 = _2293;
        _2401 = _2295;
        _2403 = _2297;
    }
    else
    {
        uint _2410 = _1835 + 3u;
        uint _2414 = _1835 + 11u;
        float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _410) * 0.949999988079071044921875);
        float _2429 = _2428 * _2428;
        float _2430 = cbLight._m0[_2410].x + _456;
        float _2431 = cbLight._m0[_2410].y + _457;
        float _2432 = cbLight._m0[_2410].z + _458;
        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
        float _2437 = _2436 * _2430;
        float _2438 = _2436 * _2431;
        float _2439 = _2436 * _2432;
        float _2440 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_2410].xyz));
        float _4235 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2444 = dot(vec3(_356, _357, _358), vec3(_2437, _2438, _2439));
        float _4246 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2448 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2437, _2438, _2439));
        float _4257 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2452 = _2429 * _2429;
        float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
        float _2465 = (exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2466 = 1.0 - _2429;
        float _2476 = (0.5 / (((_2112 * ((_2443 * _2466) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2466) + _2429) * _2443))) * _2443;
        float _4268 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2478 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
        float _2479 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2399 = (((_2465 * cbLight._m0[_2414].x) * _2478) * _2479) + _2293;
        _2401 = (((_2465 * cbLight._m0[_2414].y) * _2478) * _2479) + _2295;
        _2403 = (((_2465 * cbLight._m0[_2414].z) * _2478) * _2479) + _2297;
    }
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    if (_1833.y == 0u)
    {
        uvec4 _2500 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2501 = _2500.x;
        uint _2512 = uint((float(_2500.y) * floor(float(uint(cbSceneParam._m0[85u].y * _465) / _2501))) + floor(float(uint(cbSceneParam._m0[85u].x * _464) / _2501)));
        float _2522 = (log2(_1611 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2523 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        uint _2526 = uint(isnan(14.0) ? _2523 : (isnan(_2523) ? 14.0 : min(_2523, 14.0)));
        uvec4 _2531 = texelFetch(g_lightClusterGridBuffer, int(((_2526 << 2u) + (_2512 << 6u)) >> 2u));
        uint _2532 = _2531.x;
        uint _2533 = _2500.z;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        if (((((1u << ((_2533 >> 4u) & 15u)) + 4294967295u) & _2532) == 0u) || ((_2533 & 240u) == 0u))
        {
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
        }
        else
        {
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            uint _2763 = 0u;
            uint _2772;
            bool _2773;
            for (;;)
            {
                _2772 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                _2773 = _2772 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2773)
                {
                    frontier_phi_66_pred = _2762;
                    frontier_phi_66_pred_1 = _2761;
                    frontier_phi_66_pred_2 = _2760;
                    frontier_phi_66_pred_3 = _2759;
                    frontier_phi_66_pred_4 = _2758;
                    frontier_phi_66_pred_5 = _2757;
                }
                else
                {
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    uint _2887;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2772;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    for (;;)
                    {
                        uint _2891 = uint(findLSB(_2887)) + (_2763 << 5u);
                        uint _2888 = (_2887 + 4294967295u) & _2887;
                        uint _2893 = _2891 * 48u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 3u)).x));
                        uint _2913 = (_2891 * 48u) + 4u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2932 = (_2891 * 48u) + 8u;
                        vec3 _2943 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x));
                        float _2947 = _2907.x - _1609;
                        float _2948 = _2907.y - _1610;
                        float _2949 = _2907.z - _1611;
                        float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                        float _2953 = inversesqrt(_2950);
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2957 = dot(vec3(_486, _489, _492), vec3(_2954, _2955, _2956));
                        float _2962 = 1.0 - (_2950 * _2907.w);
                        float _4294 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _2964 = sqrt(_2950) * _2926.w;
                        float _2967 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2957) + _2968;
                        float _2974 = _2964 * _2964;
                        float _2978 = ((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2963) / ((_2974 * 0.699999988079071044921875) + 1.0);
                        float _2982 = (-0.0) - _1609;
                        float _2983 = (-0.0) - _1610;
                        float _2984 = (-0.0) - _1611;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2998 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                        float _2999 = 1.0 - _547;
                        float _3006 = sqrt(1.0 - ((1.0 - (_2999 * _2999)) * (1.0 - (_2998 * _2998))));
                        float _3007 = _3006 * _3006;
                        float _3008 = _3007 * _3007;
                        float _3009 = _2989 + _2954;
                        float _3010 = _2990 + _2955;
                        float _3011 = _2991 + _2956;
                        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
                        float _3019 = dot(vec3(_486, _489, _492), vec3(_2989, _2990, _2991));
                        float _4310 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3022 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3023 = dot(vec3(_486, _489, _492), vec3(_3015 * _3009, _3015 * _3010, _3015 * _3011));
                        float _4321 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3030 = ((_3026 * _3026) * (_3008 + (-1.0))) + 1.0;
                        float _3031 = _2967 * _3007;
                        float _3032 = _3031 * _3031;
                        float _3035 = ((1.0 - _3032) * _2957) + _3032;
                        float _4332 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3036 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3037 = 1.0 - _3007;
                        float _3047 = (0.5 / (((_3036 * ((_3022 * _3037) + _3007)) + 9.9999999392252902907785028219223e-09) + (((_3036 * _3037) + _3007) * _3022))) * _3036;
                        float _4343 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3058 = (((_3008 * 3.1415927410125732421875) * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) / ((_3030 * _3030) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125))) * _2963;
                        _2816 = (_2978 * _2926.x) + _2884;
                        _2817 = (_2978 * _2926.y) + _2885;
                        _2818 = (_2978 * _2926.z) + _2886;
                        _2813 = (_3058 * _2943.x) + _2881;
                        _2814 = (_3058 * _2943.y) + _2882;
                        _2815 = (_3058 * _2943.z) + _2883;
                        if (_2888 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2888;
                        }
                    }
                    frontier_phi_66_pred = _2818;
                    frontier_phi_66_pred_1 = _2817;
                    frontier_phi_66_pred_2 = _2816;
                    frontier_phi_66_pred_3 = _2815;
                    frontier_phi_66_pred_4 = _2814;
                    frontier_phi_66_pred_5 = _2813;
                }
                _2623 = frontier_phi_66_pred;
                _2621 = frontier_phi_66_pred_1;
                _2619 = frontier_phi_66_pred_2;
                _2617 = frontier_phi_66_pred_3;
                _2615 = frontier_phi_66_pred_4;
                _2613 = frontier_phi_66_pred_5;
                uint _2764 = _2763 + 1u;
                if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2757 = _2613;
                    _2758 = _2615;
                    _2759 = _2617;
                    _2760 = _2619;
                    _2761 = _2621;
                    _2762 = _2623;
                    _2763 = _2764;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
        }
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.z;
        uint _2629 = (_2627 >> 8u) & 15u;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((4294967295u << _2629) & _2532) == 0u)
        {
            _2725 = _2612;
            _2727 = _2614;
            _2729 = _2616;
            _2731 = _2618;
            _2733 = _2620;
            _2735 = _2622;
        }
        else
        {
            float _2750 = inversesqrt(dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611)));
            float _2751 = _2750 * _1609;
            float _2752 = _2750 * _1610;
            float _2753 = _2750 * _1611;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2629 < ((_2627 >> 12u) & 15u))
            {
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2864 = _2612;
                float _2865 = _2614;
                float _2866 = _2616;
                float _2867 = _2618;
                float _2868 = _2620;
                float _2869 = _2622;
                uint _2870 = _2629;
                uint _2879;
                bool _2880;
                for (;;)
                {
                    _2879 = texelFetch(g_lightClassification, int((((_2526 << 5u) + (_2512 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                    _2880 = _2879 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2880)
                    {
                        frontier_phi_72_pred = _2869;
                        frontier_phi_72_pred_1 = _2868;
                        frontier_phi_72_pred_2 = _2867;
                        frontier_phi_72_pred_3 = _2866;
                        frontier_phi_72_pred_4 = _2865;
                        frontier_phi_72_pred_5 = _2864;
                    }
                    else
                    {
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3076 = _2864;
                        float _3077 = _2865;
                        float _3078 = _2866;
                        float _3079 = _2867;
                        float _3080 = _2868;
                        float _3081 = _2869;
                        uint _3082 = _2879;
                        uint _3083;
                        vec4 _3108;
                        float _3109;
                        vec4 _3124;
                        vec3 _3136;
                        vec4 _3152;
                        vec4 _3168;
                        float _3215;
                        bool _3216;
                        for (;;)
                        {
                            uint _3093 = ((_2870 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3082));
                            _3083 = (_3082 + 4294967295u) & _3082;
                            uint _3095 = _3093 * 40u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            _3109 = _3108.w;
                            uint _3111 = (_3093 * 40u) + 4u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3126 = (_3093 * 40u) + 8u;
                            _3136 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x));
                            uint _3139 = (_3093 * 40u) + 16u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3155 = (_3093 * 40u) + 20u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3171 = (_3093 * 40u) + 24u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3190 = (_3093 * 40u) + 28u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3215 = fma(_1611, _3203.z, fma(_1610, _3203.y, _3203.x * _1609)) + _3203.w;
                            _3216 = !((fma(_1611, _3184.z, fma(_1610, _3184.y, _3184.x * _1609)) + _3184.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3216)
                            {
                                float _3243 = _3108.x - _1609;
                                float _3244 = _3108.y - _1610;
                                float _3245 = _3108.z - _1611;
                                float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                                float _3249 = inversesqrt(_3246);
                                float _3250 = _3249 * _3243;
                                float _3251 = _3249 * _3244;
                                float _3252 = _3249 * _3245;
                                float _3256 = 1.0 - (_3246 / (_3109 * _3109));
                                float _4354 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3261 = sqrt(_3246) * _3124.w;
                                float _3263 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                                float _3264 = _3263 * _3263;
                                float _3267 = ((1.0 - _3264) * dot(vec3(_3250, _3251, _3252), vec3(_486, _489, _492))) + _3264;
                                float _3270 = _3261 * _3261;
                                float _3274 = (fma(_1611, _3152.z, fma(_1610, _3152.y, _3152.x * _1609)) + _3152.w) / _3215;
                                float _3275 = (fma(_1611, _3168.z, fma(_1610, _3168.y, _3168.x * _1609)) + _3168.w) / _3215;
                                float _3279 = 1.0 - dot(vec2(_3274, _3275), vec2(_3274, _3275));
                                float _4370 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3281 = _3280 * (((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3257) / ((_3270 * 0.699999988079071044921875) + 1.0));
                                float _3293 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                                float _3294 = 1.0 - _547;
                                float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                                float _3302 = _3301 * _3301;
                                float _3303 = _3302 * _3302;
                                float _3304 = _3250 - _2751;
                                float _3305 = _3251 - _2752;
                                float _3306 = _3252 - _2753;
                                float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                                float _3314 = dot(vec3(_486, _489, _492), vec3((-0.0) - _2751, (-0.0) - _2752, (-0.0) - _2753));
                                float _4381 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3318 = dot(vec3(_486, _489, _492), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                                float _4392 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                                float _3326 = _3263 * _3302;
                                float _3327 = _3326 * _3326;
                                float _3333 = ((1.0 - _3327) * dot(vec3(_486, _489, _492), vec3(_3250, _3251, _3252))) + _3327;
                                float _4403 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3335 = 1.0 - _3302;
                                float _3345 = (0.5 / (((_3334 * ((_3317 * _3335) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3302) * _3317))) * _3334;
                                float _4414 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3355 = (_3280 * _3257) * (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3325 * _3325) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3281 * _3124.y;
                                frontier_phi_78_pred_1 = _3281 * _3124.x;
                                frontier_phi_78_pred_2 = _3355 * _3136.z;
                                frontier_phi_78_pred_3 = _3355 * _3136.y;
                                frontier_phi_78_pred_4 = _3355 * _3136.x;
                                frontier_phi_78_pred_5 = _3281 * _3124.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3363 = frontier_phi_78_pred;
                            _3362 = frontier_phi_78_pred_1;
                            _3361 = frontier_phi_78_pred_2;
                            _3360 = frontier_phi_78_pred_3;
                            _3359 = frontier_phi_78_pred_4;
                            _3364 = frontier_phi_78_pred_5;
                            _3066 = _3362 + _3079;
                            _3067 = _3363 + _3080;
                            _3068 = _3364 + _3081;
                            _3063 = _3359 + _3076;
                            _3064 = _3360 + _3077;
                            _3065 = _3361 + _3078;
                            if (_3083 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3083;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3068;
                        frontier_phi_72_pred_1 = _3067;
                        frontier_phi_72_pred_2 = _3066;
                        frontier_phi_72_pred_3 = _3065;
                        frontier_phi_72_pred_4 = _3064;
                        frontier_phi_72_pred_5 = _3063;
                    }
                    _2736 = frontier_phi_72_pred;
                    _2734 = frontier_phi_72_pred_1;
                    _2732 = frontier_phi_72_pred_2;
                    _2730 = frontier_phi_72_pred_3;
                    _2728 = frontier_phi_72_pred_4;
                    _2726 = frontier_phi_72_pred_5;
                    uint _2871 = _2870 + 1u;
                    if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2864 = _2726;
                        _2865 = _2728;
                        _2866 = _2730;
                        _2867 = _2732;
                        _2868 = _2734;
                        _2869 = _2736;
                        _2870 = _2871;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2736;
                frontier_phi_60_61_ladder_1 = _2734;
                frontier_phi_60_61_ladder_2 = _2730;
                frontier_phi_60_61_ladder_3 = _2728;
                frontier_phi_60_61_ladder_4 = _2726;
                frontier_phi_60_61_ladder_5 = _2732;
            }
            else
            {
                frontier_phi_60_61_ladder = _2622;
                frontier_phi_60_61_ladder_1 = _2620;
                frontier_phi_60_61_ladder_2 = _2616;
                frontier_phi_60_61_ladder_3 = _2614;
                frontier_phi_60_61_ladder_4 = _2612;
                frontier_phi_60_61_ladder_5 = _2618;
            }
            _2725 = frontier_phi_60_61_ladder_4;
            _2727 = frontier_phi_60_61_ladder_3;
            _2729 = frontier_phi_60_61_ladder_2;
            _2731 = frontier_phi_60_61_ladder_5;
            _2733 = frontier_phi_60_61_ladder_1;
            _2735 = frontier_phi_60_61_ladder;
        }
        float _2740 = isnan(1.0) ? _531 : (isnan(_531) ? 1.0 : min(_531, 1.0));
        _2545 = (_2740 * _2731) + _2076;
        _2547 = (_2740 * _2733) + _2078;
        _2549 = (_2740 * _2735) + _2080;
        _2551 = ((_2725 * 0.039999999105930328369140625) * _2740) + _2399;
        _2553 = ((_2727 * 0.039999999105930328369140625) * _2740) + _2401;
        _2555 = ((_2729 * 0.039999999105930328369140625) * _2740) + _2403;
    }
    else
    {
        _2545 = _2076;
        _2547 = _2078;
        _2549 = _2080;
        _2551 = _2399;
        _2553 = _2401;
        _2555 = _2403;
    }
    float _4430 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _4441 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _4452 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    uint _2575 = _505 + 6u;
    float _2583 = _464 / cbSceneParam._m0[86u].x;
    float _2584 = _465 / cbSceneParam._m0[86u].y;
    vec4 _2598 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, (log2((isnan(cbSceneParam._m0[77u].w) ? _429 : (isnan(_429) ? cbSceneParam._m0[77u].w : min(_429, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2600 = _2598.x;
    float _2601 = _2598.y;
    float _2602 = _2598.z;
    float _2603 = _2598.w;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_429 > cbSceneParam._m0[78u].w)
    {
        float _2637 = isnan(_429) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _429 : min(cbSceneParam._m0[80u].w, _429));
        float _2638 = _2637 / _429;
        float _2649 = _2638 * _449;
        float _2650 = _450 * _2638;
        float _2651 = (-0.0) - _2650;
        float _2653 = _2638 * _451;
        float _2655 = (cbSceneParam._m0[77u].w * _2651) / _2637;
        float _2656 = _2655 + cbSceneParam._m0[79u].w;
        float _2657 = cbSceneParam._m0[79u].w - _2650;
        float _2663 = sqrt(((_2649 * _2649) + (_2650 * _2650)) + (_2653 * _2653));
        float _2666 = (1.0 - (cbSceneParam._m0[77u].w / _2637)) * _2663;
        float _2671 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2673 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2826;
        if (abs((_2651 - _2655) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2826 = ((((_2656 > 0.0) ? exp2(_2671 * _2656) : (2.0 - exp2(_2673 * _2656))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2666;
        }
        else
        {
            float _2786 = 1.0 / cbSceneParam._m0[80u].x;
            float _2787 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : max(_2656, _2657));
            float _2788 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : min(_2656, _2657));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            _2826 = ((abs(_2663 / _2651) * cbSceneParam._m0[80u].y) * ((((_2797 - _2798) * 2.0) - ((exp2(_2671 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0)))) - exp2(_2671 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))))) * _2786)) - ((exp2(_2673 * _2797) - exp2(_2673 * _2798)) * _2786))) + (_2666 * cbSceneParam._m0[80u].z);
        }
        vec4 _2828 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2583, _2584, 1.0), 0.0);
        float _2837 = exp2((_2826 * (-1.44269502162933349609375)) * (1.0 - _2828.w));
        float _2838 = log2(_2837);
        float _2854 = log2(_2603);
        _2675 = (exp2(_2854 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].x)) * _2828.x) / cbSceneParam._m0[78u].x)) + _2600;
        _2677 = (exp2(_2854 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].y)) * _2828.y) / cbSceneParam._m0[78u].y)) + _2601;
        _2679 = (exp2(_2854 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].z)) * _2828.z) / cbSceneParam._m0[78u].z)) + _2602;
        _2681 = _2837 * _2603;
    }
    else
    {
        _2675 = _2600;
        _2677 = _2601;
        _2679 = _2602;
        _2681 = _2603;
    }
    float _2693 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2694 = _2693 == 3.0;
    float _2695 = log2(_2681);
    float _2702 = exp2(_2695 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2545 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _531))) + ((_2551 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1338)) * cbPerFrame._m0[3u].x));
    float _2703 = exp2(_2695 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2547 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _531))) + ((_2553 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1338)) * cbPerFrame._m0[3u].x));
    float _2704 = exp2(_2695 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2549 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _531))) + ((_2555 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1338)) * cbPerFrame._m0[3u].x));
    float _2713 = (_2693 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2713 * (_2694 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2675)));
    SV_Target.y = _2713 * (_2694 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2677)));
    SV_Target.z = _2713 * (_2694 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.w = cbInstanceData._m0[_2575].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2575].w;
}


