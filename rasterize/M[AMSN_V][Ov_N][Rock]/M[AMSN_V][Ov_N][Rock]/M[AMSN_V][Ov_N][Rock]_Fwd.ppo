#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _899;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = abs(_193);
    float _215 = abs(_194);
    float _216 = abs(_195);
    float _217 = _214 * _214;
    float _218 = _215 * _215;
    float _219 = _216 * _216;
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _253 = _246 * 0.0500000007450580596923828125;
    float _263 = (cbTextureTilingScale._m0[3u].x * (_242 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].z;
    vec4 _267 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_263, (cbTextureTilingScale._m0[3u].y * _253) + cbTextureTilingScale._m0[3u].w));
    float _277 = (cbTextureTilingScale._m0[3u].y * (_250 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].w;
    vec4 _278 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_263, _277));
    vec4 _291 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _253) + cbTextureTilingScale._m0[3u].z, _277));
    vec4 _319 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _323 = _319.z;
    float _326 = (_319.x * 2.0) + (-1.0);
    float _327 = (_319.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_326, _327), vec2(_326, _327));
    float _3215 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0))));
    float _337 = _326 + ((((((_278.x * _218) + (_267.x * _219)) + (_291.x * _217)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _338 = _327 + ((((((_278.y * _218) + (_267.y * _219)) + (_291.y * _217)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _341 = fma(_334, _193, fma(_338, _199 * TANGENT.x, _337 * (_185 * _178)));
    float _344 = fma(_334, _194, fma(_338, _199 * TANGENT.y, _337 * (_185 * _179)));
    float _347 = fma(_334, _195, fma(_338, _199 * TANGENT.z, _337 * (_185 * _180)));
    float _351 = inversesqrt(dot(vec3(_341, _344, _347), vec3(_341, _344, _347)));
    float _352 = _351 * _341;
    float _353 = _351 * _344;
    float _354 = _351 * _347;
    float _359 = cbMtdParam._m0[9u].x + dot(vec4(_352, _353, _354, 0.0), vec4(cbMtdParam._m0[9u].zw, cbMtdParam._m0[10u].x, 0.0));
    float _3226 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
    vec4 _372 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _388 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _390 = _388.x;
    float _391 = _388.y;
    float _392 = _388.z;
    float _399 = ((_372.x - _390) * _360) + _390;
    float _400 = ((_372.y - _391) * _360) + _391;
    float _401 = ((_372.z - _392) * _360) + _392;
    float _404 = (((((_278.z * _218) + (_267.z * _219)) + (_291.z * _217)) - _323) * cbMtdParam._m0[9u].y) + _323;
    float _3237 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _3248 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _3259 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3270 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3281 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _425 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _445 = cbSceneParam._m0[71u].x - (_242 / _435);
    float _446 = cbSceneParam._m0[71u].y - (_246 / _435);
    float _447 = cbSceneParam._m0[71u].z - (_250 / _435);
    float _451 = inversesqrt(dot(vec3(_445, _446, _447), vec3(_445, _446, _447)));
    float _452 = _445 * _451;
    float _453 = _446 * _451;
    float _454 = _447 * _451;
    float _460 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _461 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _482 = fma(_354, cbSceneParam._m0[5u].z, fma(_353, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _352));
    float _485 = fma(_354, cbSceneParam._m0[6u].z, fma(_353, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _352));
    float _488 = fma(_354, cbSceneParam._m0[7u].z, fma(_353, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _352));
    uint _501 = uint(roundEven(NORMAL.w)) * 13u;
    uint _504 = (_501 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _510 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0)))) * cbInstanceData._m0[_504].x;
    float _511 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0)))) * cbInstanceData._m0[_504].y;
    float _512 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0)))) * cbInstanceData._m0[_504].z;
    float _3292 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    float _3303 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    float _3314 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
    vec4 _524 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _460, cbSceneParam._m0[86u].y * _461));
    float _527 = _524.x * TEXCOORD.z;
    float _528 = dot(vec3(_352, _353, _354), vec3(_452, _453, _454));
    float _531 = _528 * 2.0;
    float _535 = (_531 * _352) - _452;
    float _536 = (_531 * _353) - _453;
    float _537 = (_531 * _354) - _454;
    float _541 = abs(dot(vec3(_452, _453, _454), vec3(_352, _353, _354)));
    float _3325 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _543 = sqrt(_406);
    float _556 = exp2((_543 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_543 * 3.0));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _898;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _623 = fma(_596, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588));
        float _627 = fma(_596, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588));
        float _631 = fma(_596, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588));
        float _656 = _588 + _352;
        float _657 = _592 + _353;
        float _658 = _596 + _354;
        float _668 = fma(_658, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656)) - _623;
        float _669 = fma(_658, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656)) - _627;
        float _670 = fma(_658, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656)) - _631;
        float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
        float _687 = ((_674 * _668) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_623 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _688 = ((_674 * _669) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_627 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _689 = ((_674 * _670) / cbModelParam._m0[34u].z) + ((((((_631 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_687, _688, _689), 0.0);
        float _726 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_692.x + (-0.5));
        float _728 = _726 * (_692.y + (-0.5));
        float _729 = _726 * (_692.z + (-0.5));
        float _736 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_699.x + (-0.5));
        float _738 = _736 * (_699.y + (-0.5));
        float _739 = _736 * (_699.z + (-0.5));
        float _746 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_706.x + (-0.5));
        float _748 = _746 * (_706.y + (-0.5));
        float _749 = _746 * (_706.z + (-0.5));
        float _756 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_713.x + (-0.5));
        float _758 = _756 * (_713.y + (-0.5));
        float _759 = _756 * (_713.z + (-0.5));
        float _760 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _761 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = _727 * 0.5;
        float _764 = _737 * 0.5;
        float _765 = _747 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _780 = (dot(vec3(_352, _353, _354), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _790 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_760 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3373 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_792 + 1.0))) + _797) * _760;
        float _807 = _728 * 0.5;
        float _808 = _738 * 0.5;
        float _809 = _748 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_352, _353, _354), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_761 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3406 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_834 + 1.0))) + _839) * _761;
        float _849 = _729 * 0.5;
        float _850 = _739 * 0.5;
        float _851 = _749 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _865 = (dot(vec3(_352, _353, _354), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3417 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _874 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3428 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3439 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * (_876 + 1.0))) + _881) * _762;
        _898 = _729;
        _900 = _728;
        _901 = _727;
        _902 = _739;
        _903 = _738;
        _904 = _737;
        _905 = _749;
        _906 = _748;
        _907 = _747;
        _908 = _762;
        _909 = _761;
        _910 = _760;
        _911 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
    }
    else
    {
        _898 = _899;
        _900 = _899;
        _901 = _899;
        _902 = _899;
        _903 = _899;
        _904 = _899;
        _905 = _899;
        _906 = _899;
        _907 = _899;
        _908 = _899;
        _909 = _899;
        _910 = _899;
        _911 = 0.0;
        _912 = 0.0;
        _913 = 0.0;
    }
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _939 = fma(_596, cbModelParam._m0[30u].z, fma(_592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _588));
        float _943 = fma(_596, cbModelParam._m0[31u].z, fma(_592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _588));
        float _947 = fma(_596, cbModelParam._m0[32u].z, fma(_592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _588));
        float _970 = _588 + _352;
        float _971 = _592 + _353;
        float _972 = _596 + _354;
        float _982 = fma(_972, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970)) - _939;
        float _983 = fma(_972, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970)) - _943;
        float _984 = fma(_972, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970)) - _947;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_939 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_943 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[35u].z) + ((((((_947 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1038 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1005.x + (-0.5));
        float _1040 = _1038 * (_1005.y + (-0.5));
        float _1041 = _1038 * (_1005.z + (-0.5));
        float _1048 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1012.x + (-0.5));
        float _1050 = _1048 * (_1012.y + (-0.5));
        float _1051 = _1048 * (_1012.z + (-0.5));
        float _1058 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1019.x + (-0.5));
        float _1060 = _1058 * (_1019.y + (-0.5));
        float _1061 = _1058 * (_1019.z + (-0.5));
        float _1068 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1026.x + (-0.5));
        float _1070 = _1068 * (_1026.y + (-0.5));
        float _1071 = _1068 * (_1026.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_352, _353, _354), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3502 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1102 + 1.0))) + _1107) * _1072;
        float _1117 = _1040 * 0.5;
        float _1118 = _1050 * 0.5;
        float _1119 = _1060 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_352, _353, _354), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3535 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1144 + 1.0))) + _1149) * _1073;
        float _1159 = _1041 * 0.5;
        float _1160 = _1051 * 0.5;
        float _1161 = _1061 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_352, _353, _354), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3568 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1186 + 1.0))) + _1191) * _1074;
        _1208 = _1041;
        _1209 = _1040;
        _1210 = _1039;
        _1211 = _1051;
        _1212 = _1050;
        _1213 = _1049;
        _1214 = _1061;
        _1215 = _1060;
        _1216 = _1059;
        _1217 = _1074;
        _1218 = _1073;
        _1219 = _1072;
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _899;
        _1209 = _899;
        _1210 = _899;
        _1211 = _899;
        _1212 = _899;
        _1213 = _899;
        _1214 = _899;
        _1215 = _899;
        _1216 = _899;
        _1217 = _899;
        _1218 = _899;
        _1219 = _899;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _911)) + _911;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _912)) + _912;
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _913)) + _913;
    float _1255 = fma(_1234, cbSceneParam._m0[89u].z, fma(_1233, cbSceneParam._m0[89u].y, _1232 * cbSceneParam._m0[89u].x));
    float _1258 = fma(_1234, cbSceneParam._m0[90u].z, fma(_1233, cbSceneParam._m0[90u].y, _1232 * cbSceneParam._m0[90u].x));
    float _1261 = fma(_1234, cbSceneParam._m0[91u].z, fma(_1233, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1232));
    float _1276 = _535 * 0.5;
    float _1277 = _536 * 0.5;
    float _1278 = _537 * 0.5;
    float _1279 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1282 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1285 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1319;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1292 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_898, _902, _905, _908));
        float _1296 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_900, _903, _906, _909));
        float _1300 = dot(vec4(_1276, _1277, _1278, 1.0), vec4(_901, _904, _907, _910));
        float _1307 = dot(vec4(cbModelParam._m0[39u]), vec4(_1276, _1277, _1278, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1330;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1321 = dot(vec4(cbModelParam._m0[40u]), vec4(_1276, _1277, _1278, 1.0));
        _1330 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1330 = 1.0;
    }
    float _1334 = (_1330 * cbModelParam._m0[1u].x) + (_1319 * (1.0 - cbModelParam._m0[1u].x));
    float _1344 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _406);
    float _1345 = isnan(_1344) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1344 : min(cbModelParam._m0[25u].z, _1344));
    float _1427;
    float _1429;
    float _1431;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1394 = fma(_596, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588)) + cbModelParam._m0[13u].w;
        float _1398 = fma(_596, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588)) + cbModelParam._m0[14u].w;
        float _1402 = fma(_596, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588)) + cbModelParam._m0[15u].w;
        float _1405 = fma(_537, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535));
        float _1408 = fma(_537, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535));
        float _1411 = fma(_537, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535));
        float _1439;
        if (_1405 > 0.0)
        {
            _1439 = abs((1.0 - _1394) / _1405);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1394 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1439 = frontier_phi_14_12_ladder;
        }
        float _1645;
        if (_1408 > 0.0)
        {
            _1645 = abs((1.0 - _1398) / _1408);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1398 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1645 = frontier_phi_23_19_ladder;
        }
        float _1888;
        if (_1411 > 0.0)
        {
            _1888 = abs((1.0 - _1402) / _1411);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1402 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1888 = frontier_phi_35_30_ladder;
        }
        float _1890 = isnan(_1645) ? _1439 : (isnan(_1439) ? _1645 : min(_1439, _1645));
        float _1891 = isnan(_1888) ? _1890 : (isnan(_1890) ? _1888 : min(_1890, _1888));
        float _1895 = (_1891 * _1405) + _1394;
        float _1896 = (_1891 * _1408) + _1398;
        float _1897 = (_1891 * _1411) + _1402;
        float _1898 = _1891 * 9.9999997473787516355514526367188e-05;
        float _1900 = (-1.0) - _1898;
        float _1902 = _1898 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1897 > _1902) || ((_1897 < _1900) || ((_1896 > _1902) || ((_1896 < _1900) || ((_1895 < _1900) || (_1895 > _1902))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2021 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1897, cbModelParam._m0[9u].z, fma(_1896, cbModelParam._m0[9u].y, _1895 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1897, cbModelParam._m0[10u].z, fma(_1896, cbModelParam._m0[10u].y, _1895 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1897, cbModelParam._m0[11u].z, fma(_1896, cbModelParam._m0[11u].y, _1895 * cbModelParam._m0[11u].x))), _1345);
            frontier_phi_13_35_ladder = _2021.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2021.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2021.x * cbModelParam._m0[1u].y;
        }
        _1427 = frontier_phi_13_35_ladder_2;
        _1429 = frontier_phi_13_35_ladder_1;
        _1431 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_535, _536, _537), _1345);
        _1427 = _1415.x * cbModelParam._m0[1u].y;
        _1429 = _1415.y * cbModelParam._m0[1u].y;
        _1431 = _1415.z * cbModelParam._m0[1u].y;
    }
    float _1435 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _406);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1435 : min(cbModelParam._m0[25u].w, _1435));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1493 = fma(_596, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588)) + cbModelParam._m0[21u].w;
        float _1497 = fma(_596, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588)) + cbModelParam._m0[22u].w;
        float _1501 = fma(_596, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588)) + cbModelParam._m0[23u].w;
        float _1504 = fma(_537, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535));
        float _1507 = fma(_537, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535));
        float _1510 = fma(_537, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535));
        float _1650;
        if (_1504 > 0.0)
        {
            _1650 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1650 = frontier_phi_25_21_ladder;
        }
        float _1915;
        if (_1507 > 0.0)
        {
            _1915 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1915 = frontier_phi_37_32_ladder;
        }
        float _2120;
        if (_1510 > 0.0)
        {
            _2120 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2120 = frontier_phi_46_43_ladder;
        }
        float _2122 = isnan(_1915) ? _1650 : (isnan(_1650) ? _1915 : min(_1650, _1915));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1504) + _1493;
        float _2128 = (_2123 * _1507) + _1497;
        float _2129 = (_2123 * _1510) + _1501;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2130;
        float _2133 = _2130 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2129 > _2133) || ((_2129 < _2131) || ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 < _2131) || (_2127 > _2133))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2129, cbModelParam._m0[17u].z, fma(_2128, cbModelParam._m0[17u].y, _2127 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2129, cbModelParam._m0[18u].z, fma(_2128, cbModelParam._m0[18u].y, _2127 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2129, cbModelParam._m0[19u].z, fma(_2128, cbModelParam._m0[19u].y, _2127 * cbModelParam._m0[19u].x))), _1436);
            frontier_phi_22_46_ladder = _2328.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2328.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2328.x * cbModelParam._m0[1u].z;
        }
        _1529 = frontier_phi_22_46_ladder_2;
        _1531 = frontier_phi_22_46_ladder_1;
        _1533 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_535, _536, _537), _1436);
        _1529 = _1513.x * cbModelParam._m0[1u].z;
        _1531 = _1513.y * cbModelParam._m0[1u].z;
        _1533 = _1513.z * cbModelParam._m0[1u].z;
    }
    float _1545 = ((((1.0 - _556) * ((_543 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_556 * _543)) * _527;
    float _1546 = _1545 * ((cbModelParam._m0[1u].w * (_1529 - _1427)) + _1427);
    float _1547 = _1545 * ((cbModelParam._m0[1u].w * (_1531 - _1429)) + _1429);
    float _1548 = _1545 * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1551 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1554 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1557 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, _1546 * cbSceneParam._m0[91u].x));
    uvec4 _1567 = floatBitsToUint(cbInstanceData._m0[_501 + 5u]);
    uint _1569 = _1567.x * 14u;
    uint _1570 = _1569 + 13u;
    float _1577 = _527 + (-1.0);
    float _1582 = (cbLight._m0[_1570].x * _1577) + 1.0;
    float _1583 = (cbLight._m0[_1570].y * _1577) + 1.0;
    float _1584 = (cbLight._m0[_1570].z * _1577) + 1.0;
    float _1585 = (cbLight._m0[_1570].w * _1577) + 1.0;
    uint _1586 = _1569 + 5u;
    float _1592 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
    uint _1596 = _1569 + 4u;
    float _1603 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
    uint _1607 = _1569 | 1u;
    float _1618 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_352, _353, _354));
    float _1621 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_352, _353, _354));
    float _3704 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _3715 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1626 = (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 0.3183098733425140380859375;
    float _1628 = (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * 0.3183098733425140380859375;
    float _1635 = ((cbLight._m0[_1586].x * _1592) * _1628) + ((cbLight._m0[_1596].x * _1603) * _1626);
    float _1636 = ((_1592 * cbLight._m0[_1586].y) * _1628) + ((_1603 * cbLight._m0[_1596].y) * _1626);
    float _1637 = ((_1592 * cbLight._m0[_1586].z) * _1628) + ((_1603 * cbLight._m0[_1596].z) * _1626);
    uvec4 _1642 = floatBitsToUint(cbLight._m0[_1569 + 12u]);
    bool _1644 = _1642.x == 0u;
    float _1655;
    float _1657;
    float _1659;
    if (_1644)
    {
        _1655 = _1635;
        _1657 = _1636;
        _1659 = _1637;
    }
    else
    {
        uint _1663 = _1569 + 6u;
        float _1679 = (dot(vec3(cbLight._m0[_1569 + 2u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _1680 = _1679 * _1679;
        float _3726 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1682 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
        _1655 = (((cbLight._m0[_1663].x * 0.3183098733425140380859375) * _1681) * _1682) + _1635;
        _1657 = (((cbLight._m0[_1663].y * 0.3183098733425140380859375) * _1681) * _1682) + _1636;
        _1659 = (((cbLight._m0[_1663].z * 0.3183098733425140380859375) * _1681) * _1682) + _1637;
    }
    bool _1662 = _1642.y == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1662)
    {
        _1700 = _1655;
        _1702 = _1657;
        _1704 = _1659;
    }
    else
    {
        uint _1859 = _1569 + 7u;
        float _1875 = (dot(vec3(cbLight._m0[_1569 + 3u].xyz), vec3(_352, _353, _354)) * 0.5) + 0.5;
        float _1876 = _1875 * _1875;
        float _3742 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1878 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _1700 = (((cbLight._m0[_1859].x * 0.3183098733425140380859375) * _1877) * _1878) + _1655;
        _1702 = (((cbLight._m0[_1859].y * 0.3183098733425140380859375) * _1877) * _1878) + _1657;
        _1704 = (((cbLight._m0[_1859].z * 0.3183098733425140380859375) * _1877) * _1878) + _1659;
    }
    uint _1707 = _1569 + 8u;
    float _1720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1569].w)) * _406) * 0.949999988079071044921875);
    float _1721 = _1720 * _1720;
    float _1722 = cbLight._m0[_1569].x + _452;
    float _1723 = cbLight._m0[_1569].y + _453;
    float _1724 = cbLight._m0[_1569].z + _454;
    float _1728 = inversesqrt(dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724)));
    float _1729 = _1728 * _1722;
    float _1730 = _1728 * _1723;
    float _1731 = _1728 * _1724;
    float _1732 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1569].xyz));
    float _3758 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1735 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _1736 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _1737 = dot(vec3(_352, _353, _354), vec3(_1729, _1730, _1731));
    float _3780 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1741 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_1729, _1730, _1731));
    float _3791 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1745 = _1721 * _1721;
    float _1749 = ((_1740 * _1740) * (_1745 + (-1.0))) + 1.0;
    float _1760 = (exp2(log2(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1761 = 1.0 - _1721;
    float _1772 = (0.5 / (((_1736 * ((_1735 * _1761) + _1721)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _1761) + _1721) * _1735))) * _1735;
    float _3802 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1774 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1745 / ((_1749 * _1749) * 3.141590118408203125));
    uint _1785 = _1569 + 9u;
    float _1796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1607].w)) * _406) * 0.949999988079071044921875);
    float _1797 = _1796 * _1796;
    float _1798 = cbLight._m0[_1607].x + _452;
    float _1799 = cbLight._m0[_1607].y + _453;
    float _1800 = cbLight._m0[_1607].z + _454;
    float _1804 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
    float _1805 = _1804 * _1798;
    float _1806 = _1804 * _1799;
    float _1807 = _1804 * _1800;
    float _1808 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1607].xyz));
    float _3813 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _1812 = dot(vec3(_352, _353, _354), vec3(_1805, _1806, _1807));
    float _3824 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _1816 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_1805, _1806, _1807));
    float _3835 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1820 = _1797 * _1797;
    float _1824 = ((_1815 * _1815) * (_1820 + (-1.0))) + 1.0;
    float _1833 = (exp2(log2(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1834 = 1.0 - _1797;
    float _1844 = (0.5 / (((_1736 * ((_1811 * _1834) + _1797)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _1834) + _1797) * _1811))) * _1811;
    float _3846 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1846 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1820 / ((_1824 * _1824) * 3.141590118408203125));
    float _1856 = (((_1833 * cbLight._m0[_1785].x) * _1846) * _1592) + (((_1760 * cbLight._m0[_1707].x) * _1774) * _1603);
    float _1857 = (((_1833 * cbLight._m0[_1785].y) * _1846) * _1592) + (((_1760 * cbLight._m0[_1707].y) * _1774) * _1603);
    float _1858 = (((_1833 * cbLight._m0[_1785].z) * _1846) * _1592) + (((_1760 * cbLight._m0[_1707].z) * _1774) * _1603);
    float _1920;
    float _1922;
    float _1924;
    if (_1644)
    {
        _1920 = _1856;
        _1922 = _1857;
        _1924 = _1858;
    }
    else
    {
        uint _1926 = _1569 + 2u;
        uint _1930 = _1569 + 10u;
        float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _406) * 0.949999988079071044921875);
        float _1945 = _1944 * _1944;
        float _1946 = cbLight._m0[_1926].x + _452;
        float _1947 = cbLight._m0[_1926].y + _453;
        float _1948 = cbLight._m0[_1926].z + _454;
        float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
        float _1953 = _1952 * _1946;
        float _1954 = _1952 * _1947;
        float _1955 = _1952 * _1948;
        float _1956 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_1926].xyz));
        float _3857 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1959 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1960 = dot(vec3(_352, _353, _354), vec3(_1953, _1954, _1955));
        float _3868 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1963 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1964 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_1953, _1954, _1955));
        float _3879 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1968 = _1945 * _1945;
        float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
        float _1981 = (exp2(log2(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1982 = 1.0 - _1945;
        float _1992 = (0.5 / (((_1736 * ((_1959 * _1982) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _1982) + _1945) * _1959))) * _1959;
        float _3890 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1994 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
        float _1995 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
        _1920 = (((_1981 * cbLight._m0[_1930].x) * _1994) * _1995) + _1856;
        _1922 = (((_1981 * cbLight._m0[_1930].y) * _1994) * _1995) + _1857;
        _1924 = (((_1981 * cbLight._m0[_1930].z) * _1994) * _1995) + _1858;
    }
    float _2030;
    float _2032;
    float _2034;
    if (_1662)
    {
        _2030 = _1920;
        _2032 = _1922;
        _2034 = _1924;
    }
    else
    {
        uint _2041 = _1569 + 3u;
        uint _2045 = _1569 + 11u;
        float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _406) * 0.949999988079071044921875);
        float _2060 = _2059 * _2059;
        float _2061 = cbLight._m0[_2041].x + _452;
        float _2062 = cbLight._m0[_2041].y + _453;
        float _2063 = cbLight._m0[_2041].z + _454;
        float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
        float _2068 = _2067 * _2061;
        float _2069 = _2067 * _2062;
        float _2070 = _2067 * _2063;
        float _2071 = dot(vec3(_352, _353, _354), vec3(cbLight._m0[_2041].xyz));
        float _3906 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2074 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _2075 = dot(vec3(_352, _353, _354), vec3(_2068, _2069, _2070));
        float _3917 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _2079 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2068, _2069, _2070));
        float _3928 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2083 = _2060 * _2060;
        float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
        float _2096 = (exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2097 = 1.0 - _2060;
        float _2107 = (0.5 / (((_1736 * ((_2074 * _2097) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_1736 * _2097) + _2060) * _2074))) * _2074;
        float _3939 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2109 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
        float _2110 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
        _2030 = (((_2096 * cbLight._m0[_2045].x) * _2109) * _2110) + _1920;
        _2032 = (((_2096 * cbLight._m0[_2045].y) * _2109) * _2110) + _1922;
        _2034 = (((_2096 * cbLight._m0[_2045].z) * _2109) * _2110) + _1924;
    }
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    if (_1567.y == 0u)
    {
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2185;
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2185;
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2185;
        uvec4 _2200 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2201 = _2200.x;
        uint _2212 = uint((float(_2200.y) * floor(float(uint(cbSceneParam._m0[85u].y * _461) / _2201))) + floor(float(uint(cbSceneParam._m0[85u].x * _460) / _2201)));
        float _2222 = (log2(_2188 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2223 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        uint _2226 = uint(isnan(14.0) ? _2223 : (isnan(_2223) ? 14.0 : min(_2223, 14.0)));
        uvec4 _2231 = texelFetch(g_lightClusterGridBuffer, int(((_2226 << 2u) + (_2212 << 6u)) >> 2u));
        uint _2232 = _2231.x;
        uint _2233 = _2200.z;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        if (((((1u << ((_2233 >> 4u) & 15u)) + 4294967295u) & _2232) == 0u) || ((_2233 & 240u) == 0u))
        {
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
        }
        else
        {
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            uint _2484 = 0u;
            uint _2493;
            bool _2494;
            for (;;)
            {
                _2493 = texelFetch(g_lightClassification, int((((_2226 << 5u) + (_2212 << 9u)) + (_2484 << 2u)) >> 2u)).x;
                _2494 = _2493 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2494)
                {
                    frontier_phi_61_pred = _2478;
                    frontier_phi_61_pred_1 = _2483;
                    frontier_phi_61_pred_2 = _2482;
                    frontier_phi_61_pred_3 = _2481;
                    frontier_phi_61_pred_4 = _2480;
                    frontier_phi_61_pred_5 = _2479;
                }
                else
                {
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    uint _2608;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2482;
                    _2607 = _2483;
                    _2608 = _2493;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    for (;;)
                    {
                        uint _2612 = uint(findLSB(_2608)) + (_2484 << 5u);
                        uint _2609 = (_2608 + 4294967295u) & _2608;
                        uint _2614 = _2612 * 48u;
                        vec4 _2628 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2614)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 3u)).x));
                        uint _2634 = (_2612 * 48u) + 4u;
                        vec4 _2647 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2634)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 3u)).x));
                        uint _2653 = (_2612 * 48u) + 8u;
                        vec3 _2664 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x));
                        float _2668 = _2628.x - _2186;
                        float _2669 = _2628.y - _2187;
                        float _2670 = _2628.z - _2188;
                        float _2671 = dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670));
                        float _2674 = inversesqrt(_2671);
                        float _2675 = _2674 * _2668;
                        float _2676 = _2674 * _2669;
                        float _2677 = _2674 * _2670;
                        float _2678 = dot(vec3(_482, _485, _488), vec3(_2675, _2676, _2677));
                        float _2683 = 1.0 - (_2671 * _2628.w);
                        float _3965 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2684 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                        float _2685 = sqrt(_2671) * _2647.w;
                        float _2688 = 1.39999997615814208984375 / (_2685 + 1.39999997615814208984375);
                        float _2689 = _2688 * _2688;
                        float _2692 = ((1.0 - _2689) * _2678) + _2689;
                        float _2695 = _2685 * _2685;
                        float _2699 = ((isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0))) * _2684) / ((_2695 * 0.699999988079071044921875) + 1.0);
                        float _2703 = (-0.0) - _2186;
                        float _2704 = (-0.0) - _2187;
                        float _2705 = (-0.0) - _2188;
                        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
                        float _2710 = _2709 * _2703;
                        float _2711 = _2709 * _2704;
                        float _2712 = _2709 * _2705;
                        float _2720 = exp2(log2(1.0 / ((_2695 * 3.5) + 5.0)) * 0.25);
                        float _2721 = 1.0 - _543;
                        float _2728 = sqrt(1.0 - ((1.0 - (_2721 * _2721)) * (1.0 - (_2720 * _2720))));
                        float _2729 = _2728 * _2728;
                        float _2730 = _2729 * _2729;
                        float _2731 = _2710 + _2675;
                        float _2732 = _2711 + _2676;
                        float _2733 = _2712 + _2677;
                        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
                        float _2741 = dot(vec3(_482, _485, _488), vec3(_2710, _2711, _2712));
                        float _3981 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2744 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
                        float _2745 = dot(vec3(_482, _485, _488), vec3(_2737 * _2731, _2737 * _2732, _2737 * _2733));
                        float _3992 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2748 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
                        float _2752 = ((_2748 * _2748) * (_2730 + (-1.0))) + 1.0;
                        float _2753 = _2688 * _2729;
                        float _2754 = _2753 * _2753;
                        float _2757 = ((1.0 - _2754) * _2678) + _2754;
                        float _4003 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2758 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                        float _2759 = 1.0 - _2729;
                        float _2769 = (0.5 / (((_2758 * ((_2744 * _2759) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2758 * _2759) + _2729) * _2744))) * _2758;
                        float _4014 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2780 = (((_2730 * 3.1415927410125732421875) * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) / ((_2752 * _2752) * ((_2695 * 2.1991131305694580078125) + 3.141590118408203125))) * _2684;
                        _2537 = (_2699 * _2647.x) + _2605;
                        _2538 = (_2699 * _2647.y) + _2606;
                        _2539 = (_2699 * _2647.z) + _2607;
                        _2534 = (_2780 * _2664.x) + _2602;
                        _2535 = (_2780 * _2664.y) + _2603;
                        _2536 = (_2780 * _2664.z) + _2604;
                        if (_2609 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2538;
                            _2607 = _2539;
                            _2608 = _2609;
                        }
                    }
                    frontier_phi_61_pred = _2534;
                    frontier_phi_61_pred_1 = _2539;
                    frontier_phi_61_pred_2 = _2538;
                    frontier_phi_61_pred_3 = _2537;
                    frontier_phi_61_pred_4 = _2536;
                    frontier_phi_61_pred_5 = _2535;
                }
                _2334 = frontier_phi_61_pred;
                _2344 = frontier_phi_61_pred_1;
                _2342 = frontier_phi_61_pred_2;
                _2340 = frontier_phi_61_pred_3;
                _2338 = frontier_phi_61_pred_4;
                _2336 = frontier_phi_61_pred_5;
                uint _2485 = _2484 + 1u;
                if (_2485 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2478 = _2334;
                    _2479 = _2336;
                    _2480 = _2338;
                    _2481 = _2340;
                    _2482 = _2342;
                    _2483 = _2344;
                    _2484 = _2485;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
        }
        uvec4 _2347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2348 = _2347.z;
        uint _2350 = (_2348 >> 8u) & 15u;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        if (((4294967295u << _2350) & _2232) == 0u)
        {
            _2446 = _2333;
            _2448 = _2335;
            _2450 = _2337;
            _2452 = _2339;
            _2454 = _2341;
            _2456 = _2343;
        }
        else
        {
            float _2471 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
            float _2472 = _2471 * _2186;
            float _2473 = _2471 * _2187;
            float _2474 = _2471 * _2188;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2350 < ((_2348 >> 12u) & 15u))
            {
                float _2447;
                float _2449;
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2585 = _2333;
                float _2586 = _2335;
                float _2587 = _2337;
                float _2588 = _2339;
                float _2589 = _2341;
                float _2590 = _2343;
                uint _2591 = _2350;
                uint _2600;
                bool _2601;
                for (;;)
                {
                    _2600 = texelFetch(g_lightClassification, int((((_2226 << 5u) + (_2212 << 9u)) + (_2591 << 2u)) >> 2u)).x;
                    _2601 = _2600 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2601)
                    {
                        frontier_phi_67_pred = _2588;
                        frontier_phi_67_pred_1 = _2589;
                        frontier_phi_67_pred_2 = _2590;
                        frontier_phi_67_pred_3 = _2587;
                        frontier_phi_67_pred_4 = _2586;
                        frontier_phi_67_pred_5 = _2585;
                    }
                    else
                    {
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        float _2800 = _2587;
                        float _2801 = _2588;
                        float _2802 = _2589;
                        float _2803 = _2590;
                        uint _2804 = _2600;
                        uint _2805;
                        vec4 _2830;
                        float _2831;
                        vec4 _2846;
                        vec3 _2858;
                        vec4 _2874;
                        vec4 _2890;
                        float _2937;
                        bool _2938;
                        for (;;)
                        {
                            uint _2815 = ((_2591 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2804));
                            _2805 = (_2804 + 4294967295u) & _2804;
                            uint _2817 = _2815 * 40u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            _2831 = _2830.w;
                            uint _2833 = (_2815 * 40u) + 4u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2815 * 40u) + 8u;
                            _2858 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x));
                            uint _2861 = (_2815 * 40u) + 16u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2877 = (_2815 * 40u) + 20u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2893 = (_2815 * 40u) + 24u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2912 = (_2815 * 40u) + 28u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2937 = fma(_2188, _2925.z, fma(_2187, _2925.y, _2925.x * _2186)) + _2925.w;
                            _2938 = !((fma(_2188, _2906.z, fma(_2187, _2906.y, _2906.x * _2186)) + _2906.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2938)
                            {
                                float _2965 = _2830.x - _2186;
                                float _2966 = _2830.y - _2187;
                                float _2967 = _2830.z - _2188;
                                float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                                float _2971 = inversesqrt(_2968);
                                float _2972 = _2971 * _2965;
                                float _2973 = _2971 * _2966;
                                float _2974 = _2971 * _2967;
                                float _2978 = 1.0 - (_2968 / (_2831 * _2831));
                                float _4025 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                                float _2983 = sqrt(_2968) * _2846.w;
                                float _2985 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                                float _2986 = _2985 * _2985;
                                float _2989 = ((1.0 - _2986) * dot(vec3(_2972, _2973, _2974), vec3(_482, _485, _488))) + _2986;
                                float _2992 = _2983 * _2983;
                                float _2996 = (fma(_2188, _2874.z, fma(_2187, _2874.y, _2874.x * _2186)) + _2874.w) / _2937;
                                float _2997 = (fma(_2188, _2890.z, fma(_2187, _2890.y, _2890.x * _2186)) + _2890.w) / _2937;
                                float _3001 = 1.0 - dot(vec2(_2996, _2997), vec2(_2996, _2997));
                                float _4041 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _3003 = _3002 * (((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2979) / ((_2992 * 0.699999988079071044921875) + 1.0));
                                float _3015 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                                float _3016 = 1.0 - _543;
                                float _3023 = sqrt(1.0 - ((1.0 - (_3016 * _3016)) * (1.0 - (_3015 * _3015))));
                                float _3024 = _3023 * _3023;
                                float _3025 = _3024 * _3024;
                                float _3026 = _2972 - _2472;
                                float _3027 = _2973 - _2473;
                                float _3028 = _2974 - _2474;
                                float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                                float _3036 = dot(vec3(_482, _485, _488), vec3((-0.0) - _2472, (-0.0) - _2473, (-0.0) - _2474));
                                float _4052 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3039 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                                float _3040 = dot(vec3(_482, _485, _488), vec3(_3032 * _3026, _3032 * _3027, _3032 * _3028));
                                float _4063 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3043 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                                float _3047 = ((_3043 * _3043) * (_3025 + (-1.0))) + 1.0;
                                float _3048 = _2985 * _3024;
                                float _3049 = _3048 * _3048;
                                float _3055 = ((1.0 - _3049) * dot(vec3(_482, _485, _488), vec3(_2972, _2973, _2974))) + _3049;
                                float _4074 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                                float _3057 = 1.0 - _3024;
                                float _3067 = (0.5 / (((_3056 * ((_3039 * _3057) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3024) * _3039))) * _3056;
                                float _4085 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3077 = (_3002 * _2979) * (((_3025 * 3.1415927410125732421875) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) / ((_3047 * _3047) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3077 * _2858.x;
                                frontier_phi_73_pred_1 = _3077 * _2858.y;
                                frontier_phi_73_pred_2 = _3003 * _2846.z;
                                frontier_phi_73_pred_3 = _3003 * _2846.y;
                                frontier_phi_73_pred_4 = _3003 * _2846.x;
                                frontier_phi_73_pred_5 = _3077 * _2858.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3081 = frontier_phi_73_pred;
                            _3082 = frontier_phi_73_pred_1;
                            _3086 = frontier_phi_73_pred_2;
                            _3085 = frontier_phi_73_pred_3;
                            _3084 = frontier_phi_73_pred_4;
                            _3083 = frontier_phi_73_pred_5;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            _2790 = _3086 + _2803;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            _2787 = _3083 + _2800;
                            if (_2805 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2805;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2788;
                        frontier_phi_67_pred_1 = _2789;
                        frontier_phi_67_pred_2 = _2790;
                        frontier_phi_67_pred_3 = _2787;
                        frontier_phi_67_pred_4 = _2786;
                        frontier_phi_67_pred_5 = _2785;
                    }
                    _2453 = frontier_phi_67_pred;
                    _2455 = frontier_phi_67_pred_1;
                    _2457 = frontier_phi_67_pred_2;
                    _2451 = frontier_phi_67_pred_3;
                    _2449 = frontier_phi_67_pred_4;
                    _2447 = frontier_phi_67_pred_5;
                    uint _2592 = _2591 + 1u;
                    if (_2592 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2585 = _2447;
                        _2586 = _2449;
                        _2587 = _2451;
                        _2588 = _2453;
                        _2589 = _2455;
                        _2590 = _2457;
                        _2591 = _2592;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2455;
                frontier_phi_55_56_ladder_1 = _2457;
                frontier_phi_55_56_ladder_2 = _2453;
                frontier_phi_55_56_ladder_3 = _2451;
                frontier_phi_55_56_ladder_4 = _2449;
                frontier_phi_55_56_ladder_5 = _2447;
            }
            else
            {
                frontier_phi_55_56_ladder = _2341;
                frontier_phi_55_56_ladder_1 = _2343;
                frontier_phi_55_56_ladder_2 = _2339;
                frontier_phi_55_56_ladder_3 = _2337;
                frontier_phi_55_56_ladder_4 = _2335;
                frontier_phi_55_56_ladder_5 = _2333;
            }
            _2446 = frontier_phi_55_56_ladder_5;
            _2448 = frontier_phi_55_56_ladder_4;
            _2450 = frontier_phi_55_56_ladder_3;
            _2452 = frontier_phi_55_56_ladder_2;
            _2454 = frontier_phi_55_56_ladder;
            _2456 = frontier_phi_55_56_ladder_1;
        }
        float _2461 = isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0));
        _2245 = (_2461 * _2452) + _1700;
        _2247 = (_2461 * _2454) + _1702;
        _2249 = (_2461 * _2456) + _1704;
        _2251 = ((_2446 * 0.039999999105930328369140625) * _2461) + _2030;
        _2253 = ((_2448 * 0.039999999105930328369140625) * _2461) + _2032;
        _2255 = ((_2450 * 0.039999999105930328369140625) * _2461) + _2034;
    }
    else
    {
        _2245 = _1700;
        _2247 = _1702;
        _2249 = _1704;
        _2251 = _2030;
        _2253 = _2032;
        _2255 = _2034;
    }
    float _4101 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4112 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4123 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    uint _2275 = _501 + 6u;
    float _2283 = _460 / cbSceneParam._m0[86u].x;
    float _2284 = _461 / cbSceneParam._m0[86u].y;
    vec4 _2298 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, (log2((isnan(cbSceneParam._m0[77u].w) ? _425 : (isnan(_425) ? cbSceneParam._m0[77u].w : min(_425, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2300 = _2298.x;
    float _2301 = _2298.y;
    float _2302 = _2298.z;
    float _2303 = _2298.w;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    if (_425 > cbSceneParam._m0[78u].w)
    {
        float _2358 = isnan(_425) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _425 : min(cbSceneParam._m0[80u].w, _425));
        float _2359 = _2358 / _425;
        float _2370 = _2359 * _445;
        float _2371 = _446 * _2359;
        float _2372 = (-0.0) - _2371;
        float _2374 = _2359 * _447;
        float _2376 = (cbSceneParam._m0[77u].w * _2372) / _2358;
        float _2377 = _2376 + cbSceneParam._m0[79u].w;
        float _2378 = cbSceneParam._m0[79u].w - _2371;
        float _2384 = sqrt(((_2370 * _2370) + (_2371 * _2371)) + (_2374 * _2374));
        float _2387 = (1.0 - (cbSceneParam._m0[77u].w / _2358)) * _2384;
        float _2392 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2394 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2547;
        if (abs((_2372 - _2376) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2547 = ((((_2377 > 0.0) ? exp2(_2392 * _2377) : (2.0 - exp2(_2394 * _2377))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2387;
        }
        else
        {
            float _2507 = 1.0 / cbSceneParam._m0[80u].x;
            float _2508 = isnan(_2378) ? _2377 : (isnan(_2377) ? _2378 : max(_2377, _2378));
            float _2509 = isnan(_2378) ? _2377 : (isnan(_2377) ? _2378 : min(_2377, _2378));
            float _2518 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : min(_2508, 0.0));
            float _2519 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : min(_2509, 0.0));
            _2547 = ((abs(_2384 / _2372) * cbSceneParam._m0[80u].y) * ((((_2518 - _2519) * 2.0) - ((exp2(_2392 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0)))) - exp2(_2392 * (isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0))))) * _2507)) - ((exp2(_2394 * _2518) - exp2(_2394 * _2519)) * _2507))) + (_2387 * cbSceneParam._m0[80u].z);
        }
        vec4 _2549 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, 1.0), 0.0);
        float _2558 = exp2((_2547 * (-1.44269502162933349609375)) * (1.0 - _2549.w));
        float _2559 = log2(_2558);
        float _2575 = log2(_2303);
        _2396 = (exp2(_2575 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2559 * cbSceneParam._m0[78u].x)) * _2549.x) / cbSceneParam._m0[78u].x)) + _2300;
        _2398 = (exp2(_2575 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2559 * cbSceneParam._m0[78u].y)) * _2549.y) / cbSceneParam._m0[78u].y)) + _2301;
        _2400 = (exp2(_2575 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2559 * cbSceneParam._m0[78u].z)) * _2549.z) / cbSceneParam._m0[78u].z)) + _2302;
        _2402 = _2558 * _2303;
    }
    else
    {
        _2396 = _2300;
        _2398 = _2301;
        _2400 = _2302;
        _2402 = _2303;
    }
    float _2414 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2415 = _2414 == 3.0;
    float _2416 = log2(_2402);
    float _2423 = exp2(_2416 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2245 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _527))) + ((_2251 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1334)) * cbPerFrame._m0[3u].x));
    float _2424 = exp2(_2416 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2247 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _527))) + ((_2253 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1334)) * cbPerFrame._m0[3u].x));
    float _2425 = exp2(_2416 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2249 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _527))) + ((_2255 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _1334)) * cbPerFrame._m0[3u].x));
    float _2434 = (_2414 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2434 * (_2415 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.y = _2434 * (_2415 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2398)));
    SV_Target.z = _2434 * (_2415 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2400)));
    SV_Target.w = cbInstanceData._m0[_2275].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2275].w;
}


