#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _901;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = abs(_195);
    float _217 = abs(_196);
    float _218 = abs(_197);
    float _219 = _216 * _216;
    float _220 = _217 * _217;
    float _221 = _218 * _218;
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _252 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _255 = _248 * 0.0500000007450580596923828125;
    float _265 = (cbTextureTilingScale._m0[3u].x * (_244 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].z;
    vec4 _269 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_265, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    float _279 = (cbTextureTilingScale._m0[3u].y * (_252 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].w;
    vec4 _280 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_265, _279));
    vec4 _293 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _255) + cbTextureTilingScale._m0[3u].z, _279));
    vec4 _321 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _325 = _321.z;
    float _328 = (_321.x * 2.0) + (-1.0);
    float _329 = (_321.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3241 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))));
    float _339 = _328 + ((((((_280.x * _220) + (_269.x * _221)) + (_293.x * _219)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _340 = _329 + ((((((_280.y * _220) + (_269.y * _221)) + (_293.y * _219)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _343 = fma(_336, _195, fma(_340, _201 * TANGENT.x, _339 * (_187 * _180)));
    float _346 = fma(_336, _196, fma(_340, _201 * TANGENT.y, _339 * (_187 * _181)));
    float _349 = fma(_336, _197, fma(_340, _201 * TANGENT.z, _339 * (_187 * _182)));
    float _353 = inversesqrt(dot(vec3(_343, _346, _349), vec3(_343, _346, _349)));
    float _354 = _353 * _343;
    float _355 = _353 * _346;
    float _356 = _353 * _349;
    float _361 = cbMtdParam._m0[9u].x + dot(vec4(_354, _355, _356, 0.0), vec4(cbMtdParam._m0[9u].zw, cbMtdParam._m0[10u].x, 0.0));
    float _3252 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    vec4 _374 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _390 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _392 = _390.x;
    float _393 = _390.y;
    float _394 = _390.z;
    float _401 = ((_374.x - _392) * _362) + _392;
    float _402 = ((_374.y - _393) * _362) + _393;
    float _403 = ((_374.z - _394) * _362) + _394;
    float _406 = (((((_280.z * _220) + (_269.z * _221)) + (_293.z * _219)) - _325) * cbMtdParam._m0[9u].y) + _325;
    float _3263 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _3285 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3296 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3307 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _427 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _447 = cbSceneParam._m0[71u].x - (_244 / _437);
    float _448 = cbSceneParam._m0[71u].y - (_248 / _437);
    float _449 = cbSceneParam._m0[71u].z - (_252 / _437);
    float _453 = inversesqrt(dot(vec3(_447, _448, _449), vec3(_447, _448, _449)));
    float _454 = _447 * _453;
    float _455 = _448 * _453;
    float _456 = _449 * _453;
    float _462 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _463 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _484 = fma(_356, cbSceneParam._m0[5u].z, fma(_355, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _354));
    float _487 = fma(_356, cbSceneParam._m0[6u].z, fma(_355, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _354));
    float _490 = fma(_356, cbSceneParam._m0[7u].z, fma(_355, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _354));
    uint _503 = uint(roundEven(NORMAL.w)) * 13u;
    uint _506 = (_503 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _512 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_506].x;
    float _513 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_506].y;
    float _514 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * cbInstanceData._m0[_506].z;
    float _3318 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _3329 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    vec4 _526 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _462, cbSceneParam._m0[86u].y * _463));
    float _529 = _526.x * TEXCOORD.z;
    float _530 = dot(vec3(_354, _355, _356), vec3(_454, _455, _456));
    float _533 = _530 * 2.0;
    float _537 = (_533 * _354) - _454;
    float _538 = (_533 * _355) - _455;
    float _539 = (_533 * _356) - _456;
    float _543 = abs(dot(vec3(_454, _455, _456), vec3(_354, _355, _356)));
    float _3351 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _545 = sqrt(_408);
    float _558 = exp2((_545 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_545 * 3.0));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _900;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _625 = fma(_598, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590));
        float _629 = fma(_598, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590));
        float _633 = fma(_598, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590));
        float _658 = _590 + _354;
        float _659 = _594 + _355;
        float _660 = _598 + _356;
        float _670 = fma(_660, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658)) - _625;
        float _671 = fma(_660, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658)) - _629;
        float _672 = fma(_660, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658)) - _633;
        float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
        float _689 = ((_676 * _670) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_625 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_676 * _671) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_629 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_676 * _672) / cbModelParam._m0[34u].z) + ((((((_633 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        float _728 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_694.x + (-0.5));
        float _730 = _728 * (_694.y + (-0.5));
        float _731 = _728 * (_694.z + (-0.5));
        float _738 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_701.x + (-0.5));
        float _740 = _738 * (_701.y + (-0.5));
        float _741 = _738 * (_701.z + (-0.5));
        float _748 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_708.x + (-0.5));
        float _750 = _748 * (_708.y + (-0.5));
        float _751 = _748 * (_708.z + (-0.5));
        float _758 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_715.x + (-0.5));
        float _760 = _758 * (_715.y + (-0.5));
        float _761 = _758 * (_715.z + (-0.5));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = _729 * 0.5;
        float _766 = _739 * 0.5;
        float _767 = _749 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _782 = (dot(vec3(_354, _355, _356), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _792 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3399 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_794 + 1.0))) + _799) * _762;
        float _809 = _730 * 0.5;
        float _810 = _740 * 0.5;
        float _811 = _750 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_354, _355, _356), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3432 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_836 + 1.0))) + _841) * _763;
        float _851 = _731 * 0.5;
        float _852 = _741 * 0.5;
        float _853 = _751 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _867 = (dot(vec3(_354, _355, _356), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _876 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3465 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_878 + 1.0))) + _883) * _764;
        _900 = _731;
        _902 = _730;
        _903 = _729;
        _904 = _741;
        _905 = _740;
        _906 = _739;
        _907 = _751;
        _908 = _750;
        _909 = _749;
        _910 = _764;
        _911 = _763;
        _912 = _762;
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
    }
    else
    {
        _900 = _901;
        _902 = _901;
        _903 = _901;
        _904 = _901;
        _905 = _901;
        _906 = _901;
        _907 = _901;
        _908 = _901;
        _909 = _901;
        _910 = _901;
        _911 = _901;
        _912 = _901;
        _913 = 0.0;
        _914 = 0.0;
        _915 = 0.0;
    }
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _941 = fma(_598, cbModelParam._m0[30u].z, fma(_594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _590));
        float _945 = fma(_598, cbModelParam._m0[31u].z, fma(_594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _590));
        float _949 = fma(_598, cbModelParam._m0[32u].z, fma(_594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _590));
        float _972 = _590 + _354;
        float _973 = _594 + _355;
        float _974 = _598 + _356;
        float _984 = fma(_974, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _972)) - _941;
        float _985 = fma(_974, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _972)) - _945;
        float _986 = fma(_974, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _972)) - _949;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_941 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_945 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[35u].z) + ((((((_949 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1040 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1007.x + (-0.5));
        float _1042 = _1040 * (_1007.y + (-0.5));
        float _1043 = _1040 * (_1007.z + (-0.5));
        float _1050 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1014.x + (-0.5));
        float _1052 = _1050 * (_1014.y + (-0.5));
        float _1053 = _1050 * (_1014.z + (-0.5));
        float _1060 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1021.x + (-0.5));
        float _1062 = _1060 * (_1021.y + (-0.5));
        float _1063 = _1060 * (_1021.z + (-0.5));
        float _1070 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1028.x + (-0.5));
        float _1072 = _1070 * (_1028.y + (-0.5));
        float _1073 = _1070 * (_1028.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_354, _355, _356), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3528 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1104 + 1.0))) + _1109) * _1074;
        float _1119 = _1042 * 0.5;
        float _1120 = _1052 * 0.5;
        float _1121 = _1062 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_354, _355, _356), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3561 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1146 + 1.0))) + _1151) * _1075;
        float _1161 = _1043 * 0.5;
        float _1162 = _1053 * 0.5;
        float _1163 = _1063 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_354, _355, _356), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3594 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1188 + 1.0))) + _1193) * _1076;
        _1210 = _1043;
        _1211 = _1042;
        _1212 = _1041;
        _1213 = _1053;
        _1214 = _1052;
        _1215 = _1051;
        _1216 = _1063;
        _1217 = _1062;
        _1218 = _1061;
        _1219 = _1076;
        _1220 = _1075;
        _1221 = _1074;
        _1222 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1223 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1224 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _901;
        _1211 = _901;
        _1212 = _901;
        _1213 = _901;
        _1214 = _901;
        _1215 = _901;
        _1216 = _901;
        _1217 = _901;
        _1218 = _901;
        _1219 = _901;
        _1220 = _901;
        _1221 = _901;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1234 = (cbModelParam._m0[1u].x * (_1222 - _913)) + _913;
    float _1235 = (cbModelParam._m0[1u].x * (_1223 - _914)) + _914;
    float _1236 = (cbModelParam._m0[1u].x * (_1224 - _915)) + _915;
    float _1257 = fma(_1236, cbSceneParam._m0[89u].z, fma(_1235, cbSceneParam._m0[89u].y, _1234 * cbSceneParam._m0[89u].x));
    float _1260 = fma(_1236, cbSceneParam._m0[90u].z, fma(_1235, cbSceneParam._m0[90u].y, _1234 * cbSceneParam._m0[90u].x));
    float _1263 = fma(_1236, cbSceneParam._m0[91u].z, fma(_1235, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1234));
    float _1278 = _537 * 0.5;
    float _1279 = _538 * 0.5;
    float _1280 = _539 * 0.5;
    float _1281 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1212, _1215, _1218, _1221));
    float _1284 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1211, _1214, _1217, _1220));
    float _1287 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_1210, _1213, _1216, _1219));
    float _1321;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1294 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_900, _904, _907, _910));
        float _1298 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_902, _905, _908, _911));
        float _1302 = dot(vec4(_1278, _1279, _1280, 1.0), vec4(_903, _906, _909, _912));
        float _1309 = dot(vec4(cbModelParam._m0[39u]), vec4(_1278, _1279, _1280, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1309) ? 0.0 : (isnan(0.0) ? _1309 : max(0.0, _1309))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1332;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1323 = dot(vec4(cbModelParam._m0[40u]), vec4(_1278, _1279, _1280, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1336 = (_1332 * cbModelParam._m0[1u].x) + (_1321 * (1.0 - cbModelParam._m0[1u].x));
    float _1346 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _408);
    float _1347 = isnan(_1346) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1346 : min(cbModelParam._m0[25u].z, _1346));
    float _1429;
    float _1431;
    float _1433;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1396 = fma(_598, cbModelParam._m0[13u].z, fma(_594, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _590)) + cbModelParam._m0[13u].w;
        float _1400 = fma(_598, cbModelParam._m0[14u].z, fma(_594, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _590)) + cbModelParam._m0[14u].w;
        float _1404 = fma(_598, cbModelParam._m0[15u].z, fma(_594, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _590)) + cbModelParam._m0[15u].w;
        float _1407 = fma(_539, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537));
        float _1410 = fma(_539, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537));
        float _1413 = fma(_539, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537));
        float _1441;
        if (_1407 > 0.0)
        {
            _1441 = abs((1.0 - _1396) / _1407);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1396 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1441 = frontier_phi_14_12_ladder;
        }
        float _1668;
        if (_1410 > 0.0)
        {
            _1668 = abs((1.0 - _1400) / _1410);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1400 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1668 = frontier_phi_23_19_ladder;
        }
        float _1914;
        if (_1413 > 0.0)
        {
            _1914 = abs((1.0 - _1404) / _1413);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1404 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1914 = frontier_phi_35_30_ladder;
        }
        float _1916 = isnan(_1668) ? _1441 : (isnan(_1441) ? _1668 : min(_1441, _1668));
        float _1917 = isnan(_1914) ? _1916 : (isnan(_1916) ? _1914 : min(_1916, _1914));
        float _1921 = (_1917 * _1407) + _1396;
        float _1922 = (_1917 * _1410) + _1400;
        float _1923 = (_1917 * _1413) + _1404;
        float _1924 = _1917 * 9.9999997473787516355514526367188e-05;
        float _1926 = (-1.0) - _1924;
        float _1928 = _1924 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1923 > _1928) || ((_1923 < _1926) || ((_1922 > _1928) || ((_1922 < _1926) || ((_1921 < _1926) || (_1921 > _1928))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1923, cbModelParam._m0[9u].z, fma(_1922, cbModelParam._m0[9u].y, _1921 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1923, cbModelParam._m0[10u].z, fma(_1922, cbModelParam._m0[10u].y, _1921 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1923, cbModelParam._m0[11u].z, fma(_1922, cbModelParam._m0[11u].y, _1921 * cbModelParam._m0[11u].x))), _1347);
            frontier_phi_13_35_ladder = _2047.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2047.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2047.x * cbModelParam._m0[1u].y;
        }
        _1429 = frontier_phi_13_35_ladder_2;
        _1431 = frontier_phi_13_35_ladder_1;
        _1433 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_537, _538, _539), _1347);
        _1429 = _1417.x * cbModelParam._m0[1u].y;
        _1431 = _1417.y * cbModelParam._m0[1u].y;
        _1433 = _1417.z * cbModelParam._m0[1u].y;
    }
    float _1437 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _408);
    float _1438 = isnan(_1437) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1437 : min(cbModelParam._m0[25u].w, _1437));
    float _1531;
    float _1533;
    float _1535;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1495 = fma(_598, cbModelParam._m0[21u].z, fma(_594, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _590)) + cbModelParam._m0[21u].w;
        float _1499 = fma(_598, cbModelParam._m0[22u].z, fma(_594, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _590)) + cbModelParam._m0[22u].w;
        float _1503 = fma(_598, cbModelParam._m0[23u].z, fma(_594, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _590)) + cbModelParam._m0[23u].w;
        float _1506 = fma(_539, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537));
        float _1509 = fma(_539, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537));
        float _1512 = fma(_539, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537));
        float _1673;
        if (_1506 > 0.0)
        {
            _1673 = abs((1.0 - _1495) / _1506);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1495 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1673 = frontier_phi_25_21_ladder;
        }
        float _1941;
        if (_1509 > 0.0)
        {
            _1941 = abs((1.0 - _1499) / _1509);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1499 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1941 = frontier_phi_37_32_ladder;
        }
        float _2146;
        if (_1512 > 0.0)
        {
            _2146 = abs((1.0 - _1503) / _1512);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1503 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2146 = frontier_phi_46_43_ladder;
        }
        float _2148 = isnan(_1941) ? _1673 : (isnan(_1673) ? _1941 : min(_1673, _1941));
        float _2149 = isnan(_2146) ? _2148 : (isnan(_2148) ? _2146 : min(_2148, _2146));
        float _2153 = (_2149 * _1506) + _1495;
        float _2154 = (_2149 * _1509) + _1499;
        float _2155 = (_2149 * _1512) + _1503;
        float _2156 = _2149 * 9.9999997473787516355514526367188e-05;
        float _2157 = (-1.0) - _2156;
        float _2159 = _2156 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2155 > _2159) || ((_2155 < _2157) || ((_2154 > _2159) || ((_2154 < _2157) || ((_2153 < _2157) || (_2153 > _2159))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2155, cbModelParam._m0[17u].z, fma(_2154, cbModelParam._m0[17u].y, _2153 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2155, cbModelParam._m0[18u].z, fma(_2154, cbModelParam._m0[18u].y, _2153 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2155, cbModelParam._m0[19u].z, fma(_2154, cbModelParam._m0[19u].y, _2153 * cbModelParam._m0[19u].x))), _1438);
            frontier_phi_22_46_ladder = _2354.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2354.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2354.x * cbModelParam._m0[1u].z;
        }
        _1531 = frontier_phi_22_46_ladder_2;
        _1533 = frontier_phi_22_46_ladder_1;
        _1535 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_537, _538, _539), _1438);
        _1531 = _1515.x * cbModelParam._m0[1u].z;
        _1533 = _1515.y * cbModelParam._m0[1u].z;
        _1535 = _1515.z * cbModelParam._m0[1u].z;
    }
    float _1547 = ((((1.0 - _558) * ((_545 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_558 * _545)) * _529;
    float _1548 = _1547 * ((cbModelParam._m0[1u].w * (_1531 - _1429)) + _1429);
    float _1549 = _1547 * ((cbModelParam._m0[1u].w * (_1533 - _1431)) + _1431);
    float _1550 = _1547 * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1553 = fma(_1550, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1548 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1550, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1548 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1550, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, _1548 * cbSceneParam._m0[91u].x));
    vec4 _1567 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_462, _463));
    float _1569 = _1567.w;
    float _1581 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1569);
    float _1582 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1569);
    float _1583 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1569);
    uvec4 _1587 = floatBitsToUint(cbInstanceData._m0[_503 + 5u]);
    uint _1589 = _1587.x * 14u;
    uint _1590 = _1589 + 13u;
    float _1597 = _529 + (-1.0);
    float _1602 = (cbLight._m0[_1590].x * _1597) + 1.0;
    float _1603 = (cbLight._m0[_1590].y * _1597) + 1.0;
    float _1604 = (cbLight._m0[_1590].z * _1597) + 1.0;
    float _1605 = (cbLight._m0[_1590].w * _1597) + 1.0;
    uint _1606 = _1589 + 5u;
    float _1612 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
    uint _1616 = _1589 + 4u;
    float _1626 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
    uint _1630 = _1589 | 1u;
    float _1641 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_354, _355, _356));
    float _1644 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_354, _355, _356));
    float _3730 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _3741 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1649 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.3183098733425140380859375;
    float _1651 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.3183098733425140380859375;
    float _1658 = ((cbLight._m0[_1606].x * _1612) * _1651) + (((cbLight._m0[_1616].x * _1581) * _1626) * _1649);
    float _1659 = ((_1612 * cbLight._m0[_1606].y) * _1651) + (((cbLight._m0[_1616].y * _1582) * _1626) * _1649);
    float _1660 = ((_1612 * cbLight._m0[_1606].z) * _1651) + (((cbLight._m0[_1616].z * _1583) * _1626) * _1649);
    uvec4 _1665 = floatBitsToUint(cbLight._m0[_1589 + 12u]);
    bool _1667 = _1665.x == 0u;
    float _1678;
    float _1680;
    float _1682;
    if (_1667)
    {
        _1678 = _1658;
        _1680 = _1659;
        _1682 = _1660;
    }
    else
    {
        uint _1686 = _1589 + 6u;
        float _1702 = (dot(vec3(cbLight._m0[_1589 + 2u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _1703 = _1702 * _1702;
        float _3752 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1705 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _1678 = (((cbLight._m0[_1686].x * 0.3183098733425140380859375) * _1704) * _1705) + _1658;
        _1680 = (((cbLight._m0[_1686].y * 0.3183098733425140380859375) * _1704) * _1705) + _1659;
        _1682 = (((cbLight._m0[_1686].z * 0.3183098733425140380859375) * _1704) * _1705) + _1660;
    }
    bool _1685 = _1665.y == 0u;
    float _1723;
    float _1725;
    float _1727;
    if (_1685)
    {
        _1723 = _1678;
        _1725 = _1680;
        _1727 = _1682;
    }
    else
    {
        uint _1885 = _1589 + 7u;
        float _1901 = (dot(vec3(cbLight._m0[_1589 + 3u].xyz), vec3(_354, _355, _356)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _3768 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1904 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _1723 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1678;
        _1725 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1680;
        _1727 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1682;
    }
    uint _1730 = _1589 + 8u;
    float _1743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1589].w)) * _408) * 0.949999988079071044921875);
    float _1744 = _1743 * _1743;
    float _1745 = cbLight._m0[_1589].x + _454;
    float _1746 = cbLight._m0[_1589].y + _455;
    float _1747 = cbLight._m0[_1589].z + _456;
    float _1751 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
    float _1752 = _1751 * _1745;
    float _1753 = _1751 * _1746;
    float _1754 = _1751 * _1747;
    float _1755 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1589].xyz));
    float _3784 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _1759 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1760 = dot(vec3(_354, _355, _356), vec3(_1752, _1753, _1754));
    float _3806 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1763 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1764 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_1752, _1753, _1754));
    float _3817 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1768 = _1744 * _1744;
    float _1772 = ((_1763 * _1763) * (_1768 + (-1.0))) + 1.0;
    float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1784 = 1.0 - _1744;
    float _1795 = (0.5 / (((_1759 * ((_1758 * _1784) + _1744)) + 9.9999999392252902907785028219223e-09) + (((_1759 * _1784) + _1744) * _1758))) * _1758;
    float _3828 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1797 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1768 / ((_1772 * _1772) * 3.141590118408203125));
    uint _1811 = _1589 + 9u;
    float _1822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1630].w)) * _408) * 0.949999988079071044921875);
    float _1823 = _1822 * _1822;
    float _1824 = cbLight._m0[_1630].x + _454;
    float _1825 = cbLight._m0[_1630].y + _455;
    float _1826 = cbLight._m0[_1630].z + _456;
    float _1830 = inversesqrt(dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826)));
    float _1831 = _1830 * _1824;
    float _1832 = _1830 * _1825;
    float _1833 = _1830 * _1826;
    float _1834 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1630].xyz));
    float _3839 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _1838 = dot(vec3(_354, _355, _356), vec3(_1831, _1832, _1833));
    float _3850 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1841 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _1842 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_1831, _1832, _1833));
    float _3861 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1846 = _1823 * _1823;
    float _1850 = ((_1841 * _1841) * (_1846 + (-1.0))) + 1.0;
    float _1859 = (exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1860 = 1.0 - _1823;
    float _1870 = (0.5 / (((_1759 * ((_1837 * _1860) + _1823)) + 9.9999999392252902907785028219223e-09) + (((_1759 * _1860) + _1823) * _1837))) * _1837;
    float _3872 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1872 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1846 / ((_1850 * _1850) * 3.141590118408203125));
    float _1882 = (((_1859 * cbLight._m0[_1811].x) * _1872) * _1612) + ((((cbLight._m0[_1730].x * _1581) * _1783) * _1797) * _1626);
    float _1883 = (((_1859 * cbLight._m0[_1811].y) * _1872) * _1612) + ((((cbLight._m0[_1730].y * _1582) * _1783) * _1797) * _1626);
    float _1884 = (((_1859 * cbLight._m0[_1811].z) * _1872) * _1612) + ((((cbLight._m0[_1730].z * _1583) * _1783) * _1797) * _1626);
    float _1946;
    float _1948;
    float _1950;
    if (_1667)
    {
        _1946 = _1882;
        _1948 = _1883;
        _1950 = _1884;
    }
    else
    {
        uint _1952 = _1589 + 2u;
        uint _1956 = _1589 + 10u;
        float _1970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _408) * 0.949999988079071044921875);
        float _1971 = _1970 * _1970;
        float _1972 = cbLight._m0[_1952].x + _454;
        float _1973 = cbLight._m0[_1952].y + _455;
        float _1974 = cbLight._m0[_1952].z + _456;
        float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
        float _1979 = _1978 * _1972;
        float _1980 = _1978 * _1973;
        float _1981 = _1978 * _1974;
        float _1982 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_1952].xyz));
        float _3883 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1985 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1986 = dot(vec3(_354, _355, _356), vec3(_1979, _1980, _1981));
        float _3894 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1989 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1990 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_1979, _1980, _1981));
        float _3905 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1994 = _1971 * _1971;
        float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
        float _2007 = (exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2008 = 1.0 - _1971;
        float _2018 = (0.5 / (((_1759 * ((_1985 * _2008) + _1971)) + 9.9999999392252902907785028219223e-09) + (((_1759 * _2008) + _1971) * _1985))) * _1985;
        float _3916 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2020 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
        float _2021 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _1946 = (((_2007 * cbLight._m0[_1956].x) * _2020) * _2021) + _1882;
        _1948 = (((_2007 * cbLight._m0[_1956].y) * _2020) * _2021) + _1883;
        _1950 = (((_2007 * cbLight._m0[_1956].z) * _2020) * _2021) + _1884;
    }
    float _2056;
    float _2058;
    float _2060;
    if (_1685)
    {
        _2056 = _1946;
        _2058 = _1948;
        _2060 = _1950;
    }
    else
    {
        uint _2067 = _1589 + 3u;
        uint _2071 = _1589 + 11u;
        float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _408) * 0.949999988079071044921875);
        float _2086 = _2085 * _2085;
        float _2087 = cbLight._m0[_2067].x + _454;
        float _2088 = cbLight._m0[_2067].y + _455;
        float _2089 = cbLight._m0[_2067].z + _456;
        float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
        float _2094 = _2093 * _2087;
        float _2095 = _2093 * _2088;
        float _2096 = _2093 * _2089;
        float _2097 = dot(vec3(_354, _355, _356), vec3(cbLight._m0[_2067].xyz));
        float _3932 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2101 = dot(vec3(_354, _355, _356), vec3(_2094, _2095, _2096));
        float _3943 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2105 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2094, _2095, _2096));
        float _3954 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2109 = _2086 * _2086;
        float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
        float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2123 = 1.0 - _2086;
        float _2133 = (0.5 / (((_1759 * ((_2100 * _2123) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_1759 * _2123) + _2086) * _2100))) * _2100;
        float _3965 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2135 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
        float _2136 = isnan(1.0) ? _1605 : (isnan(_1605) ? 1.0 : min(_1605, 1.0));
        _2056 = (((_2122 * cbLight._m0[_2071].x) * _2135) * _2136) + _1946;
        _2058 = (((_2122 * cbLight._m0[_2071].y) * _2135) * _2136) + _1948;
        _2060 = (((_2122 * cbLight._m0[_2071].z) * _2135) * _2136) + _1950;
    }
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    if (_1587.y == 0u)
    {
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2211;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2211;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2211;
        uvec4 _2226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2227 = _2226.x;
        uint _2238 = uint((float(_2226.y) * floor(float(uint(cbSceneParam._m0[85u].y * _463) / _2227))) + floor(float(uint(cbSceneParam._m0[85u].x * _462) / _2227)));
        float _2248 = (log2(_2214 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2249 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        uint _2252 = uint(isnan(14.0) ? _2249 : (isnan(_2249) ? 14.0 : min(_2249, 14.0)));
        uvec4 _2257 = texelFetch(g_lightClusterGridBuffer, int(((_2252 << 2u) + (_2238 << 6u)) >> 2u));
        uint _2258 = _2257.x;
        uint _2259 = _2226.z;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((((1u << ((_2259 >> 4u) & 15u)) + 4294967295u) & _2258) == 0u) || ((_2259 & 240u) == 0u))
        {
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
        }
        else
        {
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            uint _2510 = 0u;
            uint _2519;
            bool _2520;
            for (;;)
            {
                _2519 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2510 << 2u)) >> 2u)).x;
                _2520 = _2519 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2520)
                {
                    frontier_phi_61_pred = _2504;
                    frontier_phi_61_pred_1 = _2509;
                    frontier_phi_61_pred_2 = _2508;
                    frontier_phi_61_pred_3 = _2507;
                    frontier_phi_61_pred_4 = _2506;
                    frontier_phi_61_pred_5 = _2505;
                }
                else
                {
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    uint _2634;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2508;
                    _2633 = _2509;
                    _2634 = _2519;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    for (;;)
                    {
                        uint _2638 = uint(findLSB(_2634)) + (_2510 << 5u);
                        uint _2635 = (_2634 + 4294967295u) & _2634;
                        uint _2640 = _2638 * 48u;
                        vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 3u)).x));
                        uint _2660 = (_2638 * 48u) + 4u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 3u)).x));
                        uint _2679 = (_2638 * 48u) + 8u;
                        vec3 _2690 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x));
                        float _2694 = _2654.x - _2212;
                        float _2695 = _2654.y - _2213;
                        float _2696 = _2654.z - _2214;
                        float _2697 = dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696));
                        float _2700 = inversesqrt(_2697);
                        float _2701 = _2700 * _2694;
                        float _2702 = _2700 * _2695;
                        float _2703 = _2700 * _2696;
                        float _2704 = dot(vec3(_484, _487, _490), vec3(_2701, _2702, _2703));
                        float _2709 = 1.0 - (_2697 * _2654.w);
                        float _3991 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2710 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2711 = sqrt(_2697) * _2673.w;
                        float _2714 = 1.39999997615814208984375 / (_2711 + 1.39999997615814208984375);
                        float _2715 = _2714 * _2714;
                        float _2718 = ((1.0 - _2715) * _2704) + _2715;
                        float _2721 = _2711 * _2711;
                        float _2725 = ((isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))) * _2710) / ((_2721 * 0.699999988079071044921875) + 1.0);
                        float _2729 = (-0.0) - _2212;
                        float _2730 = (-0.0) - _2213;
                        float _2731 = (-0.0) - _2214;
                        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
                        float _2736 = _2735 * _2729;
                        float _2737 = _2735 * _2730;
                        float _2738 = _2735 * _2731;
                        float _2746 = exp2(log2(1.0 / ((_2721 * 3.5) + 5.0)) * 0.25);
                        float _2747 = 1.0 - _545;
                        float _2754 = sqrt(1.0 - ((1.0 - (_2747 * _2747)) * (1.0 - (_2746 * _2746))));
                        float _2755 = _2754 * _2754;
                        float _2756 = _2755 * _2755;
                        float _2757 = _2736 + _2701;
                        float _2758 = _2737 + _2702;
                        float _2759 = _2738 + _2703;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2767 = dot(vec3(_484, _487, _490), vec3(_2736, _2737, _2738));
                        float _4007 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2770 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2771 = dot(vec3(_484, _487, _490), vec3(_2763 * _2757, _2763 * _2758, _2763 * _2759));
                        float _4018 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2774 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2778 = ((_2774 * _2774) * (_2756 + (-1.0))) + 1.0;
                        float _2779 = _2714 * _2755;
                        float _2780 = _2779 * _2779;
                        float _2783 = ((1.0 - _2780) * _2704) + _2780;
                        float _4029 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2784 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2785 = 1.0 - _2755;
                        float _2795 = (0.5 / (((_2784 * ((_2770 * _2785) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2784 * _2785) + _2755) * _2770))) * _2784;
                        float _4040 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2806 = (((_2756 * 3.1415927410125732421875) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) / ((_2778 * _2778) * ((_2721 * 2.1991131305694580078125) + 3.141590118408203125))) * _2710;
                        _2563 = (_2725 * _2673.x) + _2631;
                        _2564 = (_2725 * _2673.y) + _2632;
                        _2565 = (_2725 * _2673.z) + _2633;
                        _2560 = (_2806 * _2690.x) + _2628;
                        _2561 = (_2806 * _2690.y) + _2629;
                        _2562 = (_2806 * _2690.z) + _2630;
                        if (_2635 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2564;
                            _2633 = _2565;
                            _2634 = _2635;
                        }
                    }
                    frontier_phi_61_pred = _2560;
                    frontier_phi_61_pred_1 = _2565;
                    frontier_phi_61_pred_2 = _2564;
                    frontier_phi_61_pred_3 = _2563;
                    frontier_phi_61_pred_4 = _2562;
                    frontier_phi_61_pred_5 = _2561;
                }
                _2360 = frontier_phi_61_pred;
                _2370 = frontier_phi_61_pred_1;
                _2368 = frontier_phi_61_pred_2;
                _2366 = frontier_phi_61_pred_3;
                _2364 = frontier_phi_61_pred_4;
                _2362 = frontier_phi_61_pred_5;
                uint _2511 = _2510 + 1u;
                if (_2511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2504 = _2360;
                    _2505 = _2362;
                    _2506 = _2364;
                    _2507 = _2366;
                    _2508 = _2368;
                    _2509 = _2370;
                    _2510 = _2511;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
        }
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.z;
        uint _2376 = (_2374 >> 8u) & 15u;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        if (((4294967295u << _2376) & _2258) == 0u)
        {
            _2472 = _2359;
            _2474 = _2361;
            _2476 = _2363;
            _2478 = _2365;
            _2480 = _2367;
            _2482 = _2369;
        }
        else
        {
            float _2497 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
            float _2498 = _2497 * _2212;
            float _2499 = _2497 * _2213;
            float _2500 = _2497 * _2214;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2376 < ((_2374 >> 12u) & 15u))
            {
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2611 = _2359;
                float _2612 = _2361;
                float _2613 = _2363;
                float _2614 = _2365;
                float _2615 = _2367;
                float _2616 = _2369;
                uint _2617 = _2376;
                uint _2626;
                bool _2627;
                for (;;)
                {
                    _2626 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2617 << 2u)) >> 2u)).x;
                    _2627 = _2626 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2627)
                    {
                        frontier_phi_67_pred = _2614;
                        frontier_phi_67_pred_1 = _2615;
                        frontier_phi_67_pred_2 = _2616;
                        frontier_phi_67_pred_3 = _2613;
                        frontier_phi_67_pred_4 = _2612;
                        frontier_phi_67_pred_5 = _2611;
                    }
                    else
                    {
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        float _2827 = _2614;
                        float _2828 = _2615;
                        float _2829 = _2616;
                        uint _2830 = _2626;
                        uint _2831;
                        vec4 _2856;
                        float _2857;
                        vec4 _2872;
                        vec3 _2884;
                        vec4 _2900;
                        vec4 _2916;
                        float _2963;
                        bool _2964;
                        for (;;)
                        {
                            uint _2841 = ((_2617 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2830));
                            _2831 = (_2830 + 4294967295u) & _2830;
                            uint _2843 = _2841 * 40u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            _2857 = _2856.w;
                            uint _2859 = (_2841 * 40u) + 4u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2874 = (_2841 * 40u) + 8u;
                            _2884 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x));
                            uint _2887 = (_2841 * 40u) + 16u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2903 = (_2841 * 40u) + 20u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2919 = (_2841 * 40u) + 24u;
                            vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2938 = (_2841 * 40u) + 28u;
                            vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2963 = fma(_2214, _2951.z, fma(_2213, _2951.y, _2951.x * _2212)) + _2951.w;
                            _2964 = !((fma(_2214, _2932.z, fma(_2213, _2932.y, _2932.x * _2212)) + _2932.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2964)
                            {
                                float _2991 = _2856.x - _2212;
                                float _2992 = _2856.y - _2213;
                                float _2993 = _2856.z - _2214;
                                float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                                float _2997 = inversesqrt(_2994);
                                float _2998 = _2997 * _2991;
                                float _2999 = _2997 * _2992;
                                float _3000 = _2997 * _2993;
                                float _3004 = 1.0 - (_2994 / (_2857 * _2857));
                                float _4051 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3005 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3009 = sqrt(_2994) * _2872.w;
                                float _3011 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                                float _3012 = _3011 * _3011;
                                float _3015 = ((1.0 - _3012) * dot(vec3(_2998, _2999, _3000), vec3(_484, _487, _490))) + _3012;
                                float _3018 = _3009 * _3009;
                                float _3022 = (fma(_2214, _2900.z, fma(_2213, _2900.y, _2900.x * _2212)) + _2900.w) / _2963;
                                float _3023 = (fma(_2214, _2916.z, fma(_2213, _2916.y, _2916.x * _2212)) + _2916.w) / _2963;
                                float _3027 = 1.0 - dot(vec2(_3022, _3023), vec2(_3022, _3023));
                                float _4067 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3029 = _3028 * (((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3005) / ((_3018 * 0.699999988079071044921875) + 1.0));
                                float _3041 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                                float _3042 = 1.0 - _545;
                                float _3049 = sqrt(1.0 - ((1.0 - (_3042 * _3042)) * (1.0 - (_3041 * _3041))));
                                float _3050 = _3049 * _3049;
                                float _3051 = _3050 * _3050;
                                float _3052 = _2998 - _2498;
                                float _3053 = _2999 - _2499;
                                float _3054 = _3000 - _2500;
                                float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                                float _3062 = dot(vec3(_484, _487, _490), vec3((-0.0) - _2498, (-0.0) - _2499, (-0.0) - _2500));
                                float _4078 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3065 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3066 = dot(vec3(_484, _487, _490), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                                float _4089 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3069 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                                float _3074 = _3011 * _3050;
                                float _3075 = _3074 * _3074;
                                float _3081 = ((1.0 - _3075) * dot(vec3(_484, _487, _490), vec3(_2998, _2999, _3000))) + _3075;
                                float _4100 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3083 = 1.0 - _3050;
                                float _3093 = (0.5 / (((_3082 * ((_3065 * _3083) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3082 * _3083) + _3050) * _3065))) * _3082;
                                float _4111 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3103 = (_3028 * _3005) * (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) / ((_3073 * _3073) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3103 * _2884.x;
                                frontier_phi_73_pred_1 = _3103 * _2884.y;
                                frontier_phi_73_pred_2 = _3029 * _2872.z;
                                frontier_phi_73_pred_3 = _3029 * _2872.y;
                                frontier_phi_73_pred_4 = _3029 * _2872.x;
                                frontier_phi_73_pred_5 = _3103 * _2884.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3107 = frontier_phi_73_pred;
                            _3108 = frontier_phi_73_pred_1;
                            _3112 = frontier_phi_73_pred_2;
                            _3111 = frontier_phi_73_pred_3;
                            _3110 = frontier_phi_73_pred_4;
                            _3109 = frontier_phi_73_pred_5;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            _2816 = _3112 + _2829;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            if (_2831 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2831;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2814;
                        frontier_phi_67_pred_1 = _2815;
                        frontier_phi_67_pred_2 = _2816;
                        frontier_phi_67_pred_3 = _2813;
                        frontier_phi_67_pred_4 = _2812;
                        frontier_phi_67_pred_5 = _2811;
                    }
                    _2479 = frontier_phi_67_pred;
                    _2481 = frontier_phi_67_pred_1;
                    _2483 = frontier_phi_67_pred_2;
                    _2477 = frontier_phi_67_pred_3;
                    _2475 = frontier_phi_67_pred_4;
                    _2473 = frontier_phi_67_pred_5;
                    uint _2618 = _2617 + 1u;
                    if (_2618 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2611 = _2473;
                        _2612 = _2475;
                        _2613 = _2477;
                        _2614 = _2479;
                        _2615 = _2481;
                        _2616 = _2483;
                        _2617 = _2618;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2481;
                frontier_phi_55_56_ladder_1 = _2483;
                frontier_phi_55_56_ladder_2 = _2479;
                frontier_phi_55_56_ladder_3 = _2477;
                frontier_phi_55_56_ladder_4 = _2475;
                frontier_phi_55_56_ladder_5 = _2473;
            }
            else
            {
                frontier_phi_55_56_ladder = _2367;
                frontier_phi_55_56_ladder_1 = _2369;
                frontier_phi_55_56_ladder_2 = _2365;
                frontier_phi_55_56_ladder_3 = _2363;
                frontier_phi_55_56_ladder_4 = _2361;
                frontier_phi_55_56_ladder_5 = _2359;
            }
            _2472 = frontier_phi_55_56_ladder_5;
            _2474 = frontier_phi_55_56_ladder_4;
            _2476 = frontier_phi_55_56_ladder_3;
            _2478 = frontier_phi_55_56_ladder_2;
            _2480 = frontier_phi_55_56_ladder;
            _2482 = frontier_phi_55_56_ladder_1;
        }
        float _2487 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
        _2271 = (_2487 * _2478) + _1723;
        _2273 = (_2487 * _2480) + _1725;
        _2275 = (_2487 * _2482) + _1727;
        _2277 = ((_2472 * 0.039999999105930328369140625) * _2487) + _2056;
        _2279 = ((_2474 * 0.039999999105930328369140625) * _2487) + _2058;
        _2281 = ((_2476 * 0.039999999105930328369140625) * _2487) + _2060;
    }
    else
    {
        _2271 = _1723;
        _2273 = _1725;
        _2275 = _1727;
        _2277 = _2056;
        _2279 = _2058;
        _2281 = _2060;
    }
    float _4127 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4138 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _4149 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    uint _2301 = _503 + 6u;
    float _2309 = _462 / cbSceneParam._m0[86u].x;
    float _2310 = _463 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _427 : (isnan(_427) ? cbSceneParam._m0[77u].w : min(_427, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    if (_427 > cbSceneParam._m0[78u].w)
    {
        float _2384 = isnan(_427) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _427 : min(cbSceneParam._m0[80u].w, _427));
        float _2385 = _2384 / _427;
        float _2396 = _2385 * _447;
        float _2397 = _448 * _2385;
        float _2398 = (-0.0) - _2397;
        float _2400 = _2385 * _449;
        float _2402 = (cbSceneParam._m0[77u].w * _2398) / _2384;
        float _2403 = _2402 + cbSceneParam._m0[79u].w;
        float _2404 = cbSceneParam._m0[79u].w - _2397;
        float _2410 = sqrt(((_2396 * _2396) + (_2397 * _2397)) + (_2400 * _2400));
        float _2413 = (1.0 - (cbSceneParam._m0[77u].w / _2384)) * _2410;
        float _2418 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2420 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2573;
        if (abs((_2398 - _2402) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2573 = ((((_2403 > 0.0) ? exp2(_2418 * _2403) : (2.0 - exp2(_2420 * _2403))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2413;
        }
        else
        {
            float _2533 = 1.0 / cbSceneParam._m0[80u].x;
            float _2534 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : max(_2403, _2404));
            float _2535 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : min(_2403, _2404));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            float _2545 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : min(_2535, 0.0));
            _2573 = ((abs(_2410 / _2398) * cbSceneParam._m0[80u].y) * ((((_2544 - _2545) * 2.0) - ((exp2(_2418 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0)))) - exp2(_2418 * (isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0))))) * _2533)) - ((exp2(_2420 * _2544) - exp2(_2420 * _2545)) * _2533))) + (_2413 * cbSceneParam._m0[80u].z);
        }
        vec4 _2575 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2584 = exp2((_2573 * (-1.44269502162933349609375)) * (1.0 - _2575.w));
        float _2585 = log2(_2584);
        float _2601 = log2(_2329);
        _2422 = (exp2(_2601 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].x)) * _2575.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2424 = (exp2(_2601 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].y)) * _2575.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2426 = (exp2(_2601 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].z)) * _2575.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2428 = _2584 * _2329;
    }
    else
    {
        _2422 = _2326;
        _2424 = _2327;
        _2426 = _2328;
        _2428 = _2329;
    }
    float _2440 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2441 = _2440 == 3.0;
    float _2442 = log2(_2428);
    float _2449 = exp2(_2442 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2271 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _529))) + ((_2277 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1336)) * cbPerFrame._m0[3u].x));
    float _2450 = exp2(_2442 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2273 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _529))) + ((_2279 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1336)) * cbPerFrame._m0[3u].x));
    float _2451 = exp2(_2442 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2275 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _529))) + ((_2281 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1336)) * cbPerFrame._m0[3u].x));
    float _2460 = (_2440 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2460 * (_2441 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2422)));
    SV_Target.y = _2460 * (_2441 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2424)));
    SV_Target.z = _2460 * (_2441 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2426)));
    SV_Target.w = cbInstanceData._m0[_2301].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2301].w;
}


