#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _948;
float _3601;
float _3602;
float _3603;
float _3604;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = abs(_201);
    float _223 = abs(_202);
    float _224 = abs(_203);
    float _225 = _222 * _222;
    float _226 = _223 * _223;
    float _227 = _224 * _224;
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _261 = _254 * 0.0500000007450580596923828125;
    float _271 = (cbTextureTilingScale._m0[3u].x * (_250 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].z;
    vec4 _275 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_271, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    float _285 = (cbTextureTilingScale._m0[3u].y * (_258 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].w;
    vec4 _286 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_271, _285));
    vec4 _299 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _261) + cbTextureTilingScale._m0[3u].z, _285));
    vec4 _327 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _331 = _327.z;
    float _334 = (_327.x * 2.0) + (-1.0);
    float _335 = (_327.y * 2.0) + (-1.0);
    float _336 = dot(vec2(_334, _335), vec2(_334, _335));
    float _3613 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))));
    float _345 = _334 + ((((((_286.x * _226) + (_275.x * _227)) + (_299.x * _225)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _346 = _335 + ((((((_286.y * _226) + (_275.y * _227)) + (_299.y * _225)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _349 = fma(_342, _201, fma(_346, _207 * TANGENT.x, _345 * (_193 * _186)));
    float _352 = fma(_342, _202, fma(_346, _207 * TANGENT.y, _345 * (_193 * _187)));
    float _355 = fma(_342, _203, fma(_346, _207 * TANGENT.z, _345 * (_193 * _188)));
    float _359 = inversesqrt(dot(vec3(_349, _352, _355), vec3(_349, _352, _355)));
    float _360 = _359 * _349;
    float _361 = _359 * _352;
    float _362 = _359 * _355;
    float _367 = cbMtdParam._m0[9u].x + dot(vec4(_360, _361, _362, 0.0), vec4(cbMtdParam._m0[9u].zw, cbMtdParam._m0[10u].x, 0.0));
    float _3624 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    vec4 _380 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _396 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _398 = _396.x;
    float _399 = _396.y;
    float _400 = _396.z;
    float _407 = ((_380.x - _398) * _368) + _398;
    float _408 = ((_380.y - _399) * _368) + _399;
    float _409 = ((_380.z - _400) * _368) + _400;
    float _412 = (((((_286.z * _226) + (_275.z * _227)) + (_299.z * _225)) - _331) * cbMtdParam._m0[9u].y) + _331;
    float _3635 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3668 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3679 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _453 = cbSceneParam._m0[71u].x - (_250 / _443);
    float _454 = cbSceneParam._m0[71u].y - (_254 / _443);
    float _455 = cbSceneParam._m0[71u].z - (_258 / _443);
    float _459 = inversesqrt(dot(vec3(_453, _454, _455), vec3(_453, _454, _455)));
    float _460 = _453 * _459;
    float _461 = _454 * _459;
    float _462 = _455 * _459;
    vec4 _467 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _469 = _467.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _627 = sqrt(((_453 * _453) + (_454 * _454)) + (_455 * _455));
        float _633 = (cbMatDynParam._m0[5u].x * _627) + cbMatDynParam._m0[5u].y;
        float _3690 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _634 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _638 = (cbMatDynParam._m0[5u].z * _627) + cbMatDynParam._m0[5u].w;
        float _3701 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) - _634)) + _634) < ((_469 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _481 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _482 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _502 = fma(_362, cbSceneParam._m0[5u].z, fma(_361, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _360));
    float _505 = fma(_362, cbSceneParam._m0[6u].z, fma(_361, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _360));
    float _508 = fma(_362, cbSceneParam._m0[7u].z, fma(_361, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _360));
    uint _521 = uint(roundEven(NORMAL.w)) * 13u;
    uint _523 = _521 + 9u;
    uint _524 = _523 + uint(cbMatDynParam._m0[0u].w);
    float _530 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_524].x;
    float _531 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_524].y;
    float _532 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_524].z;
    float _3712 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    vec4 _544 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _481, cbSceneParam._m0[86u].y * _482));
    float _547 = _544.x * TEXCOORD.z;
    float _548 = dot(vec3(_360, _361, _362), vec3(_460, _461, _462));
    float _551 = _548 * 2.0;
    float _555 = (_551 * _360) - _460;
    float _556 = (_551 * _361) - _461;
    float _557 = (_551 * _362) - _462;
    float _561 = abs(dot(vec3(_460, _461, _462), vec3(_360, _361, _362)));
    float _3745 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _563 = sqrt(_414);
    float _576 = exp2((_563 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_563 * 3.0));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _947;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _672 = fma(_616, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _608));
        float _676 = fma(_616, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _608));
        float _680 = fma(_616, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _608));
        float _705 = _608 + _360;
        float _706 = _612 + _361;
        float _707 = _616 + _362;
        float _717 = fma(_707, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705)) - _672;
        float _718 = fma(_707, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705)) - _676;
        float _719 = fma(_707, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705)) - _680;
        float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
        float _736 = ((_723 * _717) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_672 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_723 * _718) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_676 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _738 = ((_723 * _719) / cbModelParam._m0[34u].z) + ((((((_680 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        float _775 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_741.x + (-0.5));
        float _777 = _775 * (_741.y + (-0.5));
        float _778 = _775 * (_741.z + (-0.5));
        float _785 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_748.x + (-0.5));
        float _787 = _785 * (_748.y + (-0.5));
        float _788 = _785 * (_748.z + (-0.5));
        float _795 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_755.x + (-0.5));
        float _797 = _795 * (_755.y + (-0.5));
        float _798 = _795 * (_755.z + (-0.5));
        float _805 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_762.x + (-0.5));
        float _807 = _805 * (_762.y + (-0.5));
        float _808 = _805 * (_762.z + (-0.5));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = _776 * 0.5;
        float _813 = _786 * 0.5;
        float _814 = _796 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _829 = (dot(vec3(_360, _361, _362), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _839 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3793 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_841 + 1.0))) + _846) * _809;
        float _856 = _777 * 0.5;
        float _857 = _787 * 0.5;
        float _858 = _797 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_360, _361, _362), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3826 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_883 + 1.0))) + _888) * _810;
        float _898 = _778 * 0.5;
        float _899 = _788 * 0.5;
        float _900 = _798 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_360, _361, _362), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3859 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_925 + 1.0))) + _930) * _811;
        _947 = _778;
        _949 = _777;
        _950 = _776;
        _951 = _788;
        _952 = _787;
        _953 = _786;
        _954 = _798;
        _955 = _797;
        _956 = _796;
        _957 = _811;
        _958 = _810;
        _959 = _809;
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
    }
    else
    {
        _947 = _948;
        _949 = _948;
        _950 = _948;
        _951 = _948;
        _952 = _948;
        _953 = _948;
        _954 = _948;
        _955 = _948;
        _956 = _948;
        _957 = _948;
        _958 = _948;
        _959 = _948;
        _960 = 0.0;
        _961 = 0.0;
        _962 = 0.0;
    }
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _991 = fma(_616, cbModelParam._m0[30u].z, fma(_612, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _608));
        float _995 = fma(_616, cbModelParam._m0[31u].z, fma(_612, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _608));
        float _999 = fma(_616, cbModelParam._m0[32u].z, fma(_612, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _608));
        float _1022 = _608 + _360;
        float _1023 = _612 + _361;
        float _1024 = _616 + _362;
        float _1034 = fma(_1024, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022)) - _991;
        float _1035 = fma(_1024, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022)) - _995;
        float _1036 = fma(_1024, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022)) - _999;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_991 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_995 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[35u].z) + ((((((_999 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1090 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1057.x + (-0.5));
        float _1092 = _1090 * (_1057.y + (-0.5));
        float _1093 = _1090 * (_1057.z + (-0.5));
        float _1100 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1064.x + (-0.5));
        float _1102 = _1100 * (_1064.y + (-0.5));
        float _1103 = _1100 * (_1064.z + (-0.5));
        float _1110 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1071.x + (-0.5));
        float _1112 = _1110 * (_1071.y + (-0.5));
        float _1113 = _1110 * (_1071.z + (-0.5));
        float _1120 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1078.x + (-0.5));
        float _1122 = _1120 * (_1078.y + (-0.5));
        float _1123 = _1120 * (_1078.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_360, _361, _362), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3922 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1154 + 1.0))) + _1159) * _1124;
        float _1169 = _1092 * 0.5;
        float _1170 = _1102 * 0.5;
        float _1171 = _1112 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_360, _361, _362), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3955 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1196 + 1.0))) + _1201) * _1125;
        float _1211 = _1093 * 0.5;
        float _1212 = _1103 * 0.5;
        float _1213 = _1113 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_360, _361, _362), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3988 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1238 + 1.0))) + _1243) * _1126;
        _1260 = _1093;
        _1261 = _1092;
        _1262 = _1091;
        _1263 = _1103;
        _1264 = _1102;
        _1265 = _1101;
        _1266 = _1113;
        _1267 = _1112;
        _1268 = _1111;
        _1269 = _1126;
        _1270 = _1125;
        _1271 = _1124;
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
    }
    else
    {
        _1260 = _948;
        _1261 = _948;
        _1262 = _948;
        _1263 = _948;
        _1264 = _948;
        _1265 = _948;
        _1266 = _948;
        _1267 = _948;
        _1268 = _948;
        _1269 = _948;
        _1270 = _948;
        _1271 = _948;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _960)) + _960;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _961)) + _961;
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _962)) + _962;
    float _1307 = fma(_1286, cbSceneParam._m0[89u].z, fma(_1285, cbSceneParam._m0[89u].y, _1284 * cbSceneParam._m0[89u].x));
    float _1310 = fma(_1286, cbSceneParam._m0[90u].z, fma(_1285, cbSceneParam._m0[90u].y, _1284 * cbSceneParam._m0[90u].x));
    float _1313 = fma(_1286, cbSceneParam._m0[91u].z, fma(_1285, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1284));
    float _1328 = _555 * 0.5;
    float _1329 = _556 * 0.5;
    float _1330 = _557 * 0.5;
    float _1331 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1334 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1337 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1371;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1344 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_947, _951, _954, _957));
        float _1348 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_949, _952, _955, _958));
        float _1352 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_950, _953, _956, _959));
        float _1359 = dot(vec4(cbModelParam._m0[39u]), vec4(_1328, _1329, _1330, 1.0));
        _1371 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1371 = 1.0;
    }
    float _1382;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1373 = dot(vec4(cbModelParam._m0[40u]), vec4(_1328, _1329, _1330, 1.0));
        _1382 = dot(vec3(isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1373) ? 0.0 : (isnan(0.0) ? _1373 : max(0.0, _1373))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1382 = 1.0;
    }
    float _1386 = (_1382 * cbModelParam._m0[1u].x) + (_1371 * (1.0 - cbModelParam._m0[1u].x));
    float _1396 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1396 : min(cbModelParam._m0[25u].z, _1396));
    float _1479;
    float _1481;
    float _1483;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1446 = fma(_616, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _608)) + cbModelParam._m0[13u].w;
        float _1450 = fma(_616, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _608)) + cbModelParam._m0[14u].w;
        float _1454 = fma(_616, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _608)) + cbModelParam._m0[15u].w;
        float _1457 = fma(_557, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _555));
        float _1460 = fma(_557, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _555));
        float _1463 = fma(_557, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _555));
        float _1491;
        if (_1457 > 0.0)
        {
            _1491 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1491 = frontier_phi_17_15_ladder;
        }
        float _1665;
        if (_1460 > 0.0)
        {
            _1665 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1665 = frontier_phi_26_22_ladder;
        }
        float _1961;
        if (_1463 > 0.0)
        {
            _1961 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1961 = frontier_phi_38_33_ladder;
        }
        float _1963 = isnan(_1665) ? _1491 : (isnan(_1491) ? _1665 : min(_1491, _1665));
        float _1964 = isnan(_1961) ? _1963 : (isnan(_1963) ? _1961 : min(_1963, _1961));
        float _1968 = (_1964 * _1457) + _1446;
        float _1969 = (_1964 * _1460) + _1450;
        float _1970 = (_1964 * _1463) + _1454;
        float _1971 = _1964 * 9.9999997473787516355514526367188e-05;
        float _1973 = (-1.0) - _1971;
        float _1975 = _1971 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1970 > _1975) || ((_1970 < _1973) || ((_1969 > _1975) || ((_1969 < _1973) || ((_1968 < _1973) || (_1968 > _1975))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2115 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1970, cbModelParam._m0[9u].z, fma(_1969, cbModelParam._m0[9u].y, _1968 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1970, cbModelParam._m0[10u].z, fma(_1969, cbModelParam._m0[10u].y, _1968 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1970, cbModelParam._m0[11u].z, fma(_1969, cbModelParam._m0[11u].y, _1968 * cbModelParam._m0[11u].x))), _1397);
            frontier_phi_16_38_ladder = _2115.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2115.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2115.x * cbModelParam._m0[1u].y;
        }
        _1479 = frontier_phi_16_38_ladder_2;
        _1481 = frontier_phi_16_38_ladder_1;
        _1483 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_555, _556, _557), _1397);
        _1479 = _1467.x * cbModelParam._m0[1u].y;
        _1481 = _1467.y * cbModelParam._m0[1u].y;
        _1483 = _1467.z * cbModelParam._m0[1u].y;
    }
    float _1487 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1488 = isnan(_1487) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1487 : min(cbModelParam._m0[25u].w, _1487));
    float _1581;
    float _1583;
    float _1585;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1545 = fma(_616, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _608)) + cbModelParam._m0[21u].w;
        float _1549 = fma(_616, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _608)) + cbModelParam._m0[22u].w;
        float _1553 = fma(_616, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _608)) + cbModelParam._m0[23u].w;
        float _1556 = fma(_557, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _555));
        float _1559 = fma(_557, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _555));
        float _1562 = fma(_557, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _555));
        float _1670;
        if (_1556 > 0.0)
        {
            _1670 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1670 = frontier_phi_28_24_ladder;
        }
        float _1988;
        if (_1559 > 0.0)
        {
            _1988 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1988 = frontier_phi_40_35_ladder;
        }
        float _2315;
        if (_1562 > 0.0)
        {
            _2315 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2315 = frontier_phi_50_47_ladder;
        }
        float _2317 = isnan(_1988) ? _1670 : (isnan(_1670) ? _1988 : min(_1670, _1988));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1556) + _1545;
        float _2323 = (_2318 * _1559) + _1549;
        float _2324 = (_2318 * _1562) + _1553;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2325;
        float _2328 = _2325 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2324 > _2328) || ((_2324 < _2326) || ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 < _2326) || (_2322 > _2328))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2442 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2324, cbModelParam._m0[17u].z, fma(_2323, cbModelParam._m0[17u].y, _2322 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2324, cbModelParam._m0[18u].z, fma(_2323, cbModelParam._m0[18u].y, _2322 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2324, cbModelParam._m0[19u].z, fma(_2323, cbModelParam._m0[19u].y, _2322 * cbModelParam._m0[19u].x))), _1488);
            frontier_phi_25_50_ladder = _2442.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2442.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2442.x * cbModelParam._m0[1u].z;
        }
        _1581 = frontier_phi_25_50_ladder_2;
        _1583 = frontier_phi_25_50_ladder_1;
        _1585 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_555, _556, _557), _1488);
        _1581 = _1565.x * cbModelParam._m0[1u].z;
        _1583 = _1565.y * cbModelParam._m0[1u].z;
        _1585 = _1565.z * cbModelParam._m0[1u].z;
    }
    float _1597 = ((((1.0 - _576) * ((_563 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_576 * _563)) * _547;
    float _1598 = _1597 * ((cbModelParam._m0[1u].w * (_1581 - _1479)) + _1479);
    float _1599 = _1597 * ((cbModelParam._m0[1u].w * (_1583 - _1481)) + _1481);
    float _1600 = _1597 * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1603 = fma(_1600, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1598 * cbSceneParam._m0[89u].x));
    float _1606 = fma(_1600, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1598 * cbSceneParam._m0[90u].x));
    float _1609 = fma(_1600, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, _1598 * cbSceneParam._m0[91u].x));
    float _1644 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1648 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1652 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1656 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1657 = _1644 / _1656;
    float _1658 = _1648 / _1656;
    float _1659 = _1652 / _1656;
    float _1806;
    float _1807;
    float _1808;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1686 = ((uint(_1659 > cbSceneParam._m0[59u].y) + uint(_1659 > cbSceneParam._m0[59u].x)) + uint(_1659 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1687 = _1686 + 43u;
        uint _1695 = _1686 + 44u;
        uint _1703 = _1686 + 45u;
        uint _1711 = _1686 + 46u;
        float _1722 = fma(_1656, cbSceneParam._m0[_1687].w, fma(_1652, cbSceneParam._m0[_1687].z, fma(_1648, cbSceneParam._m0[_1687].y, _1644 * cbSceneParam._m0[_1687].x)));
        float _1726 = fma(_1656, cbSceneParam._m0[_1695].w, fma(_1652, cbSceneParam._m0[_1695].z, fma(_1648, cbSceneParam._m0[_1695].y, _1644 * cbSceneParam._m0[_1695].x)));
        float _1734 = fma(_1656, cbSceneParam._m0[_1711].w, fma(_1652, cbSceneParam._m0[_1711].z, fma(_1648, cbSceneParam._m0[_1711].y, _1644 * cbSceneParam._m0[_1711].x)));
        float _1739 = cbSceneParam._m0[33u].z * _1734;
        float _1741 = cbSceneParam._m0[33u].w * _1734;
        float _1744 = fma(_1656, cbSceneParam._m0[_1703].w, fma(_1652, cbSceneParam._m0[_1703].z, fma(_1648, cbSceneParam._m0[_1703].y, _1644 * cbSceneParam._m0[_1703].x))) / _1734;
        float _1792 = (cbSceneParam._m0[33u].x - sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659))) * cbSceneParam._m0[33u].y;
        float _4114 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1799 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1739 + _1722) / _1734, (_1741 + _1726) / _1734), _1744), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1741 + _1722) / _1734, (_1726 - _1739) / _1734), _1744), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1722 - _1739) / _1734, (_1726 - _1741) / _1734), _1744), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1722 - _1741) / _1734, (_1739 + _1726) / _1734), _1744), 0.0)).x), vec4(0.25)));
        _1806 = 1.0 - (_1799 * cbSceneParam._m0[34u].x);
        _1807 = 1.0 - (_1799 * cbSceneParam._m0[34u].y);
        _1808 = 1.0 - (_1799 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1806 = 1.0;
        _1807 = 1.0;
        _1808 = 1.0;
    }
    float _1872;
    float _1874;
    float _1876;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1860 = fma(_1656, cbSceneParam._m0[63u].w, fma(_1652, cbSceneParam._m0[63u].z, fma(_1648, cbSceneParam._m0[63u].y, _1644 * cbSceneParam._m0[63u].x)));
        float _1861 = fma(_1656, cbSceneParam._m0[60u].w, fma(_1652, cbSceneParam._m0[60u].z, fma(_1648, cbSceneParam._m0[60u].y, _1644 * cbSceneParam._m0[60u].x))) / _1860;
        float _1862 = fma(_1656, cbSceneParam._m0[61u].w, fma(_1652, cbSceneParam._m0[61u].z, fma(_1648, cbSceneParam._m0[61u].y, _1644 * cbSceneParam._m0[61u].x))) / _1860;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1861 >= cbSceneParam._m0[64u].x) && (_1862 >= cbSceneParam._m0[64u].y)) && (_1861 <= cbSceneParam._m0[64u].z)) && (_1862 <= cbSceneParam._m0[64u].w))
        {
            float _2001 = fma(_1656, cbSceneParam._m0[62u].w, fma(_1652, cbSceneParam._m0[62u].z, fma(_1648, cbSceneParam._m0[62u].y, _1644 * cbSceneParam._m0[62u].x))) / _1860;
            float _2005 = isnan(cbSceneParam._m0[41u].w) ? _2001 : (isnan(_2001) ? cbSceneParam._m0[41u].w : max(_2001, cbSceneParam._m0[41u].w));
            float _2048 = (cbSceneParam._m0[33u].x - sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659))) * cbSceneParam._m0[33u].y;
            float _4130 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
            float _2055 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1861, cbSceneParam._m0[33u].w + _1862), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1861, _1862 - cbSceneParam._m0[33u].z), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1861 - cbSceneParam._m0[33u].z, _1862 - cbSceneParam._m0[33u].w), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1861 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1862), _2005), 0.0)).x), vec4(0.25)));
            float _2059 = 1.0 - (_2055 * cbSceneParam._m0[34u].x);
            float _2060 = 1.0 - (_2055 * cbSceneParam._m0[34u].y);
            float _2061 = 1.0 - (_2055 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2061) ? _1808 : (isnan(_1808) ? _2061 : min(_1808, _2061));
            frontier_phi_37_36_ladder_1 = isnan(_2060) ? _1807 : (isnan(_1807) ? _2060 : min(_1807, _2060));
            frontier_phi_37_36_ladder_2 = isnan(_2059) ? _1806 : (isnan(_1806) ? _2059 : min(_1806, _2059));
        }
        else
        {
            frontier_phi_37_36_ladder = _1808;
            frontier_phi_37_36_ladder_1 = _1807;
            frontier_phi_37_36_ladder_2 = _1806;
        }
        _1872 = frontier_phi_37_36_ladder_2;
        _1874 = frontier_phi_37_36_ladder_1;
        _1876 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1872 = _1806;
        _1874 = _1807;
        _1876 = _1808;
    }
    uvec4 _1881 = floatBitsToUint(cbInstanceData._m0[_521 + 5u]);
    uint _1883 = _1881.x * 14u;
    uint _1884 = _1883 + 13u;
    float _1891 = _547 + (-1.0);
    float _1896 = (cbLight._m0[_1884].x * _1891) + 1.0;
    float _1897 = (cbLight._m0[_1884].y * _1891) + 1.0;
    float _1898 = (cbLight._m0[_1884].z * _1891) + 1.0;
    float _1899 = (cbLight._m0[_1884].w * _1891) + 1.0;
    uint _1900 = _1883 + 5u;
    float _1906 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1910 = _1883 + 4u;
    float _1920 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1924 = _1883 | 1u;
    float _1935 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_360, _361, _362));
    float _1938 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_360, _361, _362));
    float _4166 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _4177 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1943 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.3183098733425140380859375;
    float _1945 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * 0.3183098733425140380859375;
    float _1952 = ((cbLight._m0[_1900].x * _1906) * _1945) + (((cbLight._m0[_1910].x * _1872) * _1920) * _1943);
    float _1953 = ((_1906 * cbLight._m0[_1900].y) * _1945) + (((cbLight._m0[_1910].y * _1874) * _1920) * _1943);
    float _1954 = ((_1906 * cbLight._m0[_1900].z) * _1945) + (((cbLight._m0[_1910].z * _1876) * _1920) * _1943);
    uvec4 _1958 = floatBitsToUint(cbLight._m0[_1883 + 12u]);
    bool _1960 = _1958.x == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_1960)
    {
        _2062 = _1952;
        _2064 = _1953;
        _2066 = _1954;
    }
    else
    {
        uint _2070 = _1883 + 6u;
        float _2086 = (dot(vec3(cbLight._m0[_1883 + 2u].xyz), vec3(_360, _361, _362)) * 0.5) + 0.5;
        float _2087 = _2086 * _2086;
        float _4188 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2089 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2062 = (((cbLight._m0[_2070].x * 0.3183098733425140380859375) * _2088) * _2089) + _1952;
        _2064 = (((cbLight._m0[_2070].y * 0.3183098733425140380859375) * _2088) * _2089) + _1953;
        _2066 = (((cbLight._m0[_2070].z * 0.3183098733425140380859375) * _2088) * _2089) + _1954;
    }
    bool _2069 = _1958.y == 0u;
    float _2124;
    float _2126;
    float _2128;
    if (_2069)
    {
        _2124 = _2062;
        _2126 = _2064;
        _2128 = _2066;
    }
    else
    {
        uint _2286 = _1883 + 7u;
        float _2302 = (dot(vec3(cbLight._m0[_1883 + 3u].xyz), vec3(_360, _361, _362)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4204 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2305 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2124 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2062;
        _2126 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2064;
        _2128 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2066;
    }
    uint _2131 = _1883 + 8u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _414) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1883].x + _460;
    float _2147 = cbLight._m0[_1883].y + _461;
    float _2148 = cbLight._m0[_1883].z + _462;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1883].xyz));
    float _4220 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _2160 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2161 = dot(vec3(_360, _361, _362), vec3(_2153, _2154, _2155));
    float _4242 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2153, _2154, _2155));
    float _4253 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2145 * _2145;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2185 = 1.0 - _2145;
    float _2196 = (0.5 / (((_2160 * ((_2159 * _2185) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2185) + _2145) * _2159))) * _2159;
    float _4264 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    uint _2212 = _1883 + 9u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _414) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_1924].x + _460;
    float _2226 = cbLight._m0[_1924].y + _461;
    float _2227 = cbLight._m0[_1924].z + _462;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_1924].xyz));
    float _4275 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2239 = dot(vec3(_360, _361, _362), vec3(_2232, _2233, _2234));
    float _4286 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_2232, _2233, _2234));
    float _4297 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2224 * _2224;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2261 = 1.0 - _2224;
    float _2271 = (0.5 / (((_2160 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2261) + _2224) * _2238))) * _2238;
    float _4308 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    float _2283 = (((_2260 * cbLight._m0[_2212].x) * _2273) * _1906) + ((((cbLight._m0[_2131].x * _1872) * _2184) * _2198) * _1920);
    float _2284 = (((_2260 * cbLight._m0[_2212].y) * _2273) * _1906) + ((((cbLight._m0[_2131].y * _1874) * _2184) * _2198) * _1920);
    float _2285 = (((_2260 * cbLight._m0[_2212].z) * _2273) * _1906) + ((((cbLight._m0[_2131].z * _1876) * _2184) * _2198) * _1920);
    float _2341;
    float _2343;
    float _2345;
    if (_1960)
    {
        _2341 = _2283;
        _2343 = _2284;
        _2345 = _2285;
    }
    else
    {
        uint _2347 = _1883 + 2u;
        uint _2351 = _1883 + 10u;
        float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _414) * 0.949999988079071044921875);
        float _2366 = _2365 * _2365;
        float _2367 = cbLight._m0[_2347].x + _460;
        float _2368 = cbLight._m0[_2347].y + _461;
        float _2369 = cbLight._m0[_2347].z + _462;
        float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
        float _2374 = _2373 * _2367;
        float _2375 = _2373 * _2368;
        float _2376 = _2373 * _2369;
        float _2377 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_2347].xyz));
        float _4319 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2381 = dot(vec3(_360, _361, _362), vec3(_2374, _2375, _2376));
        float _4330 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2385 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2374, _2375, _2376));
        float _4341 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2389 = _2366 * _2366;
        float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
        float _2402 = (exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2403 = 1.0 - _2366;
        float _2413 = (0.5 / (((_2160 * ((_2380 * _2403) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2403) + _2366) * _2380))) * _2380;
        float _4352 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2415 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
        float _2416 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2341 = (((_2402 * cbLight._m0[_2351].x) * _2415) * _2416) + _2283;
        _2343 = (((_2402 * cbLight._m0[_2351].y) * _2415) * _2416) + _2284;
        _2345 = (((_2402 * cbLight._m0[_2351].z) * _2415) * _2416) + _2285;
    }
    float _2447;
    float _2449;
    float _2451;
    if (_2069)
    {
        _2447 = _2341;
        _2449 = _2343;
        _2451 = _2345;
    }
    else
    {
        uint _2458 = _1883 + 3u;
        uint _2462 = _1883 + 11u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _414) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _460;
        float _2479 = cbLight._m0[_2458].y + _461;
        float _2480 = cbLight._m0[_2458].z + _462;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_360, _361, _362), vec3(cbLight._m0[_2458].xyz));
        float _4368 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2492 = dot(vec3(_360, _361, _362), vec3(_2485, _2486, _2487));
        float _4379 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4390 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2513 = (exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2514 = 1.0 - _2477;
        float _2524 = (0.5 / (((_2160 * ((_2491 * _2514) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2514) + _2477) * _2491))) * _2491;
        float _4401 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2526 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2527 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2447 = (((_2513 * cbLight._m0[_2462].x) * _2526) * _2527) + _2341;
        _2449 = (((_2513 * cbLight._m0[_2462].y) * _2526) * _2527) + _2343;
        _2451 = (((_2513 * cbLight._m0[_2462].z) * _2526) * _2527) + _2345;
    }
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_1881.y == 0u)
    {
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.x;
        uint _2560 = uint((float(_2548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _482) / _2549))) + floor(float(uint(cbSceneParam._m0[85u].x * _481) / _2549)));
        float _2570 = (log2(_1659 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2571 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        uint _2574 = uint(isnan(14.0) ? _2571 : (isnan(_2571) ? 14.0 : min(_2571, 14.0)));
        uvec4 _2579 = texelFetch(g_lightClusterGridBuffer, int(((_2574 << 2u) + (_2560 << 6u)) >> 2u));
        uint _2580 = _2579.x;
        uint _2581 = _2548.z;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((((1u << ((_2581 >> 4u) & 15u)) + 4294967295u) & _2580) == 0u) || ((_2581 & 240u) == 0u))
        {
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
        }
        else
        {
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            uint _2819 = 0u;
            uint _2828;
            bool _2829;
            for (;;)
            {
                _2828 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2819 << 2u)) >> 2u)).x;
                _2829 = _2828 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2829)
                {
                    frontier_phi_71_pred = _2818;
                    frontier_phi_71_pred_1 = _2817;
                    frontier_phi_71_pred_2 = _2816;
                    frontier_phi_71_pred_3 = _2815;
                    frontier_phi_71_pred_4 = _2814;
                    frontier_phi_71_pred_5 = _2813;
                }
                else
                {
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    uint _2964;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2815;
                    _2961 = _2816;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2828;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    for (;;)
                    {
                        uint _2968 = uint(findLSB(_2964)) + (_2819 << 5u);
                        uint _2965 = (_2964 + 4294967295u) & _2964;
                        uint _2970 = _2968 * 48u;
                        vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2970)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 3u)).x));
                        uint _2990 = (_2968 * 48u) + 4u;
                        vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 3u)).x));
                        uint _3009 = (_2968 * 48u) + 8u;
                        vec3 _3020 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x));
                        float _3024 = _2984.x - _1657;
                        float _3025 = _2984.y - _1658;
                        float _3026 = _2984.z - _1659;
                        float _3027 = dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026));
                        float _3030 = inversesqrt(_3027);
                        float _3031 = _3030 * _3024;
                        float _3032 = _3030 * _3025;
                        float _3033 = _3030 * _3026;
                        float _3034 = dot(vec3(_502, _505, _508), vec3(_3031, _3032, _3033));
                        float _3039 = 1.0 - (_3027 * _2984.w);
                        float _4427 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3041 = sqrt(_3027) * _3003.w;
                        float _3044 = 1.39999997615814208984375 / (_3041 + 1.39999997615814208984375);
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _3034) + _3045;
                        float _3051 = _3041 * _3041;
                        float _3055 = ((isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0))) * _3040) / ((_3051 * 0.699999988079071044921875) + 1.0);
                        float _3059 = (-0.0) - _1657;
                        float _3060 = (-0.0) - _1658;
                        float _3061 = (-0.0) - _1659;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3066 = _3065 * _3059;
                        float _3067 = _3065 * _3060;
                        float _3068 = _3065 * _3061;
                        float _3075 = exp2(log2(1.0 / ((_3051 * 3.5) + 5.0)) * 0.25);
                        float _3076 = 1.0 - _563;
                        float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                        float _3084 = _3083 * _3083;
                        float _3085 = _3084 * _3084;
                        float _3086 = _3066 + _3031;
                        float _3087 = _3067 + _3032;
                        float _3088 = _3068 + _3033;
                        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                        float _3096 = dot(vec3(_502, _505, _508), vec3(_3066, _3067, _3068));
                        float _4443 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3099 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3100 = dot(vec3(_502, _505, _508), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                        float _4454 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                        float _3108 = _3044 * _3084;
                        float _3109 = _3108 * _3108;
                        float _3112 = ((1.0 - _3109) * _3034) + _3109;
                        float _4465 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3113 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3114 = 1.0 - _3084;
                        float _3124 = (0.5 / (((_3113 * ((_3099 * _3114) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3113 * _3114) + _3084) * _3099))) * _3113;
                        float _4476 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3135 = (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) / ((_3107 * _3107) * ((_3051 * 2.1991131305694580078125) + 3.141590118408203125))) * _3040;
                        _2888 = (_3055 * _3003.x) + _2961;
                        _2889 = (_3055 * _3003.y) + _2962;
                        _2890 = (_3055 * _3003.z) + _2963;
                        _2885 = (_3135 * _3020.x) + _2958;
                        _2886 = (_3135 * _3020.y) + _2959;
                        _2887 = (_3135 * _3020.z) + _2960;
                        if (_2965 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2887;
                            _2961 = _2888;
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2965;
                        }
                    }
                    frontier_phi_71_pred = _2890;
                    frontier_phi_71_pred_1 = _2889;
                    frontier_phi_71_pred_2 = _2888;
                    frontier_phi_71_pred_3 = _2887;
                    frontier_phi_71_pred_4 = _2886;
                    frontier_phi_71_pred_5 = _2885;
                }
                _2671 = frontier_phi_71_pred;
                _2669 = frontier_phi_71_pred_1;
                _2667 = frontier_phi_71_pred_2;
                _2665 = frontier_phi_71_pred_3;
                _2663 = frontier_phi_71_pred_4;
                _2661 = frontier_phi_71_pred_5;
                uint _2820 = _2819 + 1u;
                if (_2820 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2813 = _2661;
                    _2814 = _2663;
                    _2815 = _2665;
                    _2816 = _2667;
                    _2817 = _2669;
                    _2818 = _2671;
                    _2819 = _2820;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
        }
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.z;
        uint _2677 = (_2675 >> 8u) & 15u;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((4294967295u << _2677) & _2580) == 0u)
        {
            _2781 = _2660;
            _2783 = _2662;
            _2785 = _2664;
            _2787 = _2666;
            _2789 = _2668;
            _2791 = _2670;
        }
        else
        {
            float _2806 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
            float _2807 = _2806 * _1657;
            float _2808 = _2806 * _1658;
            float _2809 = _2806 * _1659;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2677 < ((_2675 >> 12u) & 15u))
            {
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2941 = _2660;
                float _2942 = _2662;
                float _2943 = _2664;
                float _2944 = _2666;
                float _2945 = _2668;
                float _2946 = _2670;
                uint _2947 = _2677;
                uint _2956;
                bool _2957;
                for (;;)
                {
                    _2956 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                    _2957 = _2956 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2957)
                    {
                        frontier_phi_82_pred = _2946;
                        frontier_phi_82_pred_1 = _2945;
                        frontier_phi_82_pred_2 = _2944;
                        frontier_phi_82_pred_3 = _2943;
                        frontier_phi_82_pred_4 = _2942;
                        frontier_phi_82_pred_5 = _2941;
                    }
                    else
                    {
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3162 = _2941;
                        float _3163 = _2942;
                        float _3164 = _2943;
                        float _3165 = _2944;
                        float _3166 = _2945;
                        float _3167 = _2946;
                        uint _3168 = _2956;
                        uint _3169;
                        vec4 _3194;
                        float _3195;
                        vec4 _3210;
                        vec3 _3222;
                        vec4 _3238;
                        vec4 _3254;
                        float _3301;
                        bool _3302;
                        for (;;)
                        {
                            uint _3179 = ((_2947 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3168));
                            _3169 = (_3168 + 4294967295u) & _3168;
                            uint _3181 = _3179 * 40u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            _3195 = _3194.w;
                            uint _3197 = (_3179 * 40u) + 4u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3212 = (_3179 * 40u) + 8u;
                            _3222 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x));
                            uint _3225 = (_3179 * 40u) + 16u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3241 = (_3179 * 40u) + 20u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3257 = (_3179 * 40u) + 24u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3276 = (_3179 * 40u) + 28u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            _3301 = fma(_1659, _3289.z, fma(_1658, _3289.y, _3289.x * _1657)) + _3289.w;
                            _3302 = !((fma(_1659, _3270.z, fma(_1658, _3270.y, _3270.x * _1657)) + _3270.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3302)
                            {
                                float _3329 = _3194.x - _1657;
                                float _3330 = _3194.y - _1658;
                                float _3331 = _3194.z - _1659;
                                float _3332 = dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331));
                                float _3335 = inversesqrt(_3332);
                                float _3336 = _3335 * _3329;
                                float _3337 = _3335 * _3330;
                                float _3338 = _3335 * _3331;
                                float _3342 = 1.0 - (_3332 / (_3195 * _3195));
                                float _4487 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3347 = sqrt(_3332) * _3210.w;
                                float _3349 = 1.39999997615814208984375 / (_3347 + 1.39999997615814208984375);
                                float _3350 = _3349 * _3349;
                                float _3353 = ((1.0 - _3350) * dot(vec3(_3336, _3337, _3338), vec3(_502, _505, _508))) + _3350;
                                float _3356 = _3347 * _3347;
                                float _3360 = (fma(_1659, _3238.z, fma(_1658, _3238.y, _3238.x * _1657)) + _3238.w) / _3301;
                                float _3361 = (fma(_1659, _3254.z, fma(_1658, _3254.y, _3254.x * _1657)) + _3254.w) / _3301;
                                float _3365 = 1.0 - dot(vec2(_3360, _3361), vec2(_3360, _3361));
                                float _4503 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3367 = _3366 * (((isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))) * _3343) / ((_3356 * 0.699999988079071044921875) + 1.0));
                                float _3379 = exp2(log2(1.0 / ((_3356 * 3.5) + 5.0)) * 0.25);
                                float _3380 = 1.0 - _563;
                                float _3387 = sqrt(1.0 - ((1.0 - (_3380 * _3380)) * (1.0 - (_3379 * _3379))));
                                float _3388 = _3387 * _3387;
                                float _3389 = _3388 * _3388;
                                float _3390 = _3336 - _2807;
                                float _3391 = _3337 - _2808;
                                float _3392 = _3338 - _2809;
                                float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                                float _3400 = dot(vec3(_502, _505, _508), vec3((-0.0) - _2807, (-0.0) - _2808, (-0.0) - _2809));
                                float _4514 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3403 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3404 = dot(vec3(_502, _505, _508), vec3(_3396 * _3390, _3396 * _3391, _3396 * _3392));
                                float _4525 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3411 = ((_3407 * _3407) * (_3389 + (-1.0))) + 1.0;
                                float _3412 = _3349 * _3388;
                                float _3413 = _3412 * _3412;
                                float _3419 = ((1.0 - _3413) * dot(vec3(_502, _505, _508), vec3(_3336, _3337, _3338))) + _3413;
                                float _4536 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3421 = 1.0 - _3388;
                                float _3431 = (0.5 / (((_3420 * ((_3403 * _3421) + _3388)) + 9.9999999392252902907785028219223e-09) + (((_3420 * _3421) + _3388) * _3403))) * _3420;
                                float _4547 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3441 = (_3366 * _3343) * (((_3389 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3411 * _3411) * ((_3356 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3367 * _3210.z;
                                frontier_phi_88_pred_1 = _3367 * _3210.y;
                                frontier_phi_88_pred_2 = _3367 * _3210.x;
                                frontier_phi_88_pred_3 = _3441 * _3222.z;
                                frontier_phi_88_pred_4 = _3441 * _3222.y;
                                frontier_phi_88_pred_5 = _3441 * _3222.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3450 = frontier_phi_88_pred;
                            _3449 = frontier_phi_88_pred_1;
                            _3448 = frontier_phi_88_pred_2;
                            _3447 = frontier_phi_88_pred_3;
                            _3446 = frontier_phi_88_pred_4;
                            _3445 = frontier_phi_88_pred_5;
                            _3152 = _3448 + _3165;
                            _3153 = _3449 + _3166;
                            _3154 = _3450 + _3167;
                            _3149 = _3445 + _3162;
                            _3150 = _3446 + _3163;
                            _3151 = _3447 + _3164;
                            if (_3169 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3169;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3154;
                        frontier_phi_82_pred_1 = _3153;
                        frontier_phi_82_pred_2 = _3152;
                        frontier_phi_82_pred_3 = _3151;
                        frontier_phi_82_pred_4 = _3150;
                        frontier_phi_82_pred_5 = _3149;
                    }
                    _2792 = frontier_phi_82_pred;
                    _2790 = frontier_phi_82_pred_1;
                    _2788 = frontier_phi_82_pred_2;
                    _2786 = frontier_phi_82_pred_3;
                    _2784 = frontier_phi_82_pred_4;
                    _2782 = frontier_phi_82_pred_5;
                    uint _2948 = _2947 + 1u;
                    if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2941 = _2782;
                        _2942 = _2784;
                        _2943 = _2786;
                        _2944 = _2788;
                        _2945 = _2790;
                        _2946 = _2792;
                        _2947 = _2948;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2788;
                frontier_phi_63_64_ladder_1 = _2792;
                frontier_phi_63_64_ladder_2 = _2790;
                frontier_phi_63_64_ladder_3 = _2786;
                frontier_phi_63_64_ladder_4 = _2784;
                frontier_phi_63_64_ladder_5 = _2782;
            }
            else
            {
                frontier_phi_63_64_ladder = _2666;
                frontier_phi_63_64_ladder_1 = _2670;
                frontier_phi_63_64_ladder_2 = _2668;
                frontier_phi_63_64_ladder_3 = _2664;
                frontier_phi_63_64_ladder_4 = _2662;
                frontier_phi_63_64_ladder_5 = _2660;
            }
            _2781 = frontier_phi_63_64_ladder_5;
            _2783 = frontier_phi_63_64_ladder_4;
            _2785 = frontier_phi_63_64_ladder_3;
            _2787 = frontier_phi_63_64_ladder;
            _2789 = frontier_phi_63_64_ladder_2;
            _2791 = frontier_phi_63_64_ladder_1;
        }
        float _2796 = isnan(1.0) ? _547 : (isnan(_547) ? 1.0 : min(_547, 1.0));
        _2593 = (_2796 * _2787) + _2124;
        _2595 = (_2796 * _2789) + _2126;
        _2597 = (_2796 * _2791) + _2128;
        _2599 = ((_2781 * 0.039999999105930328369140625) * _2796) + _2447;
        _2601 = ((_2783 * 0.039999999105930328369140625) * _2796) + _2449;
        _2603 = ((_2785 * 0.039999999105930328369140625) * _2796) + _2451;
    }
    else
    {
        _2593 = _2124;
        _2595 = _2126;
        _2597 = _2128;
        _2599 = _2447;
        _2601 = _2449;
        _2603 = _2451;
    }
    float _4563 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4574 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4585 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _2620 = ((isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2593 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _547))) + ((_2599 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1386)) * cbPerFrame._m0[3u].x);
    float _2621 = ((isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2595 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _547))) + ((_2601 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1386)) * cbPerFrame._m0[3u].x);
    float _2622 = ((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2597 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _547))) + ((_2603 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1386)) * cbPerFrame._m0[3u].x);
    uint _2623 = _521 + 6u;
    float _2631 = _481 / cbSceneParam._m0[86u].x;
    float _2632 = _482 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _2685 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _2686 = _2685 / _433;
        float _2697 = _2686 * _453;
        float _2698 = _454 * _2686;
        float _2699 = (-0.0) - _2698;
        float _2701 = _2686 * _455;
        float _2703 = (cbSceneParam._m0[77u].w * _2699) / _2685;
        float _2704 = _2703 + cbSceneParam._m0[79u].w;
        float _2705 = cbSceneParam._m0[79u].w - _2698;
        float _2711 = sqrt(((_2697 * _2697) + (_2698 * _2698)) + (_2701 * _2701));
        float _2714 = (1.0 - (cbSceneParam._m0[77u].w / _2685)) * _2711;
        float _2719 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2721 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2898;
        if (abs((_2699 - _2703) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2898 = ((((_2704 > 0.0) ? exp2(_2719 * _2704) : (2.0 - exp2(_2721 * _2704))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2714;
        }
        else
        {
            float _2842 = 1.0 / cbSceneParam._m0[80u].x;
            float _2843 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : max(_2704, _2705));
            float _2844 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : min(_2704, _2705));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            float _2854 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : min(_2844, 0.0));
            _2898 = ((abs(_2711 / _2699) * cbSceneParam._m0[80u].y) * ((((_2853 - _2854) * 2.0) - ((exp2(_2719 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)))) - exp2(_2719 * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))))) * _2842)) - ((exp2(_2721 * _2853) - exp2(_2721 * _2854)) * _2842))) + (_2714 * cbSceneParam._m0[80u].z);
        }
        vec4 _2900 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2909 = exp2((_2898 * (-1.44269502162933349609375)) * (1.0 - _2900.w));
        float _2910 = log2(_2909);
        float _2926 = log2(_2651);
        _2723 = (exp2(_2926 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].x)) * _2900.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2725 = (exp2(_2926 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].y)) * _2900.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2727 = (exp2(_2926 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].z)) * _2900.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2729 = _2909 * _2651;
    }
    else
    {
        _2723 = _2648;
        _2725 = _2649;
        _2727 = _2650;
        _2729 = _2651;
    }
    bool _2936;
    vec4 _2739;
    vec4 _2761;
    float _2763;
    float _2767;
    float _2768;
    float _2769;
    float _2770;
    bool _2780;
    for (;;)
    {
        _2739 = cbMatDynParam._m0[0u];
        float _2741 = roundEven(_2739.y);
        bool _2742 = _2741 == 3.0;
        float _2743 = log2(_2729);
        float _2750 = exp2(_2743 * cbSceneParam._m0[78u].x) * _2620;
        float _2751 = exp2(_2743 * cbSceneParam._m0[78u].y) * _2621;
        float _2752 = exp2(_2743 * cbSceneParam._m0[78u].z) * _2622;
        float _2759 = _469 + (-0.5);
        _2761 = cbMtdParam._m0[1u];
        _2763 = _2761.y * _2759;
        float _2766 = (_2741 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2767 = _2766 * (_2742 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2723)));
        _2768 = _2766 * (_2742 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2725)));
        _2769 = _2766 * (_2742 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2727)));
        _2770 = _2759 * 0.999000012874603271484375;
        _2780 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2780)
        {
            if ((cbInstanceData._m0[_521 + 7u].x + _2770) < 0.5)
            {
                _2936 = true;
                break;
            }
        }
        uint _2877 = _523 + uint(_2739.w);
        if ((cbInstanceData._m0[_2877].w < 1.0) && ((cbInstanceData._m0[_2877].w + _2770) < 0.5))
        {
            _2936 = true;
            break;
        }
        if ((_2763 + 1.0) < _2761.x)
        {
            _2936 = true;
            break;
        }
        _2936 = false;
        break;
    }
    float _3140;
    if (_2936)
    {
        discard_state = true;
        _3140 = 0.0;
    }
    else
    {
        _3140 = cbInstanceData._m0[_2623].w;
    }
    SV_Target.x = _2767;
    SV_Target.y = _2768;
    SV_Target.z = _2769;
    SV_Target.w = _3140;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
    discard_exit();
}


