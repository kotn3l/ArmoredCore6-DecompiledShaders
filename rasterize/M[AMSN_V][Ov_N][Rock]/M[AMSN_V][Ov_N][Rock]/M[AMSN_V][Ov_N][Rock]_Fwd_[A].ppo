#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _944;
float _3314;
float _3315;
float _3316;
float _3317;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = abs(_197);
    float _219 = abs(_198);
    float _220 = abs(_199);
    float _221 = _218 * _218;
    float _222 = _219 * _219;
    float _223 = _220 * _220;
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _257 = _250 * 0.0500000007450580596923828125;
    float _267 = (cbTextureTilingScale._m0[3u].x * (_246 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].z;
    vec4 _271 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_267, (cbTextureTilingScale._m0[3u].y * _257) + cbTextureTilingScale._m0[3u].w));
    float _281 = (cbTextureTilingScale._m0[3u].y * (_254 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[3u].w;
    vec4 _282 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2(_267, _281));
    vec4 _295 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * _257) + cbTextureTilingScale._m0[3u].z, _281));
    vec4 _323 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _327 = _323.z;
    float _330 = (_323.x * 2.0) + (-1.0);
    float _331 = (_323.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_330, _331), vec2(_330, _331));
    float _3326 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))));
    float _341 = _330 + ((((((_282.x * _222) + (_271.x * _223)) + (_295.x * _221)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _342 = _331 + ((((((_282.y * _222) + (_271.y * _223)) + (_295.y * _221)) * 2.0) + (-1.0)) * cbMtdParam._m0[9u].y);
    float _345 = fma(_338, _197, fma(_342, _203 * TANGENT.x, _341 * (_189 * _182)));
    float _348 = fma(_338, _198, fma(_342, _203 * TANGENT.y, _341 * (_189 * _183)));
    float _351 = fma(_338, _199, fma(_342, _203 * TANGENT.z, _341 * (_189 * _184)));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    float _356 = _355 * _345;
    float _357 = _355 * _348;
    float _358 = _355 * _351;
    float _363 = cbMtdParam._m0[9u].x + dot(vec4(_356, _357, _358, 0.0), vec4(cbMtdParam._m0[9u].zw, cbMtdParam._m0[10u].x, 0.0));
    float _3337 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    vec4 _376 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _392 = texture(sampler2D(M_AMSN_V_Ov_N_Rock_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _394 = _392.x;
    float _395 = _392.y;
    float _396 = _392.z;
    float _403 = ((_376.x - _394) * _364) + _394;
    float _404 = ((_376.y - _395) * _364) + _395;
    float _405 = ((_376.z - _396) * _364) + _396;
    float _408 = (((((_282.z * _222) + (_271.z * _223)) + (_295.z * _221)) - _327) * cbMtdParam._m0[9u].y) + _327;
    float _3348 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _3359 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _3370 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3381 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3392 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _429 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _449 = cbSceneParam._m0[71u].x - (_246 / _439);
    float _450 = cbSceneParam._m0[71u].y - (_250 / _439);
    float _451 = cbSceneParam._m0[71u].z - (_254 / _439);
    float _455 = inversesqrt(dot(vec3(_449, _450, _451), vec3(_449, _450, _451)));
    float _456 = _449 * _455;
    float _457 = _450 * _455;
    float _458 = _451 * _455;
    vec4 _463 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _465 = _463.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _623 = sqrt(((_449 * _449) + (_450 * _450)) + (_451 * _451));
        float _629 = (cbMatDynParam._m0[5u].x * _623) + cbMatDynParam._m0[5u].y;
        float _3403 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _630 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _634 = (cbMatDynParam._m0[5u].z * _623) + cbMatDynParam._m0[5u].w;
        float _3414 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) - _630)) + _630) < ((_465 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _477 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _478 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _498 = fma(_358, cbSceneParam._m0[5u].z, fma(_357, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _356));
    float _501 = fma(_358, cbSceneParam._m0[6u].z, fma(_357, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _356));
    float _504 = fma(_358, cbSceneParam._m0[7u].z, fma(_357, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _356));
    uint _517 = uint(roundEven(NORMAL.w)) * 13u;
    uint _519 = _517 + 9u;
    uint _520 = _519 + uint(cbMatDynParam._m0[0u].w);
    float _526 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0)))) * cbInstanceData._m0[_520].x;
    float _527 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * cbInstanceData._m0[_520].y;
    float _528 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * cbInstanceData._m0[_520].z;
    float _3425 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _3447 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    vec4 _540 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _477, cbSceneParam._m0[86u].y * _478));
    float _543 = _540.x * TEXCOORD.z;
    float _544 = dot(vec3(_356, _357, _358), vec3(_456, _457, _458));
    float _547 = _544 * 2.0;
    float _551 = (_547 * _356) - _456;
    float _552 = (_547 * _357) - _457;
    float _553 = (_547 * _358) - _458;
    float _557 = abs(dot(vec3(_456, _457, _458), vec3(_356, _357, _358)));
    float _3458 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _559 = sqrt(_410);
    float _572 = exp2((_559 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_559 * 3.0));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _943;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _668 = fma(_612, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604));
        float _672 = fma(_612, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604));
        float _676 = fma(_612, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604));
        float _701 = _604 + _356;
        float _702 = _608 + _357;
        float _703 = _612 + _358;
        float _713 = fma(_703, cbModelParam._m0[26u].z, fma(_702, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _701)) - _668;
        float _714 = fma(_703, cbModelParam._m0[27u].z, fma(_702, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _701)) - _672;
        float _715 = fma(_703, cbModelParam._m0[28u].z, fma(_702, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _701)) - _676;
        float _719 = inversesqrt(dot(vec3(_713, _714, _715), vec3(_713, _714, _715)));
        float _732 = ((_719 * _713) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_668 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _733 = ((_719 * _714) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_672 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _734 = ((_719 * _715) / cbModelParam._m0[34u].z) + ((((((_676 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        float _771 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_737.x + (-0.5));
        float _773 = _771 * (_737.y + (-0.5));
        float _774 = _771 * (_737.z + (-0.5));
        float _781 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_744.x + (-0.5));
        float _783 = _781 * (_744.y + (-0.5));
        float _784 = _781 * (_744.z + (-0.5));
        float _791 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_751.x + (-0.5));
        float _793 = _791 * (_751.y + (-0.5));
        float _794 = _791 * (_751.z + (-0.5));
        float _801 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_758.x + (-0.5));
        float _803 = _801 * (_758.y + (-0.5));
        float _804 = _801 * (_758.z + (-0.5));
        float _805 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _806 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _807 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _808 = _772 * 0.5;
        float _809 = _782 * 0.5;
        float _810 = _792 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _825 = (dot(vec3(_356, _357, _358), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _835 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_805 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3506 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_837 + 1.0))) + _842) * _805;
        float _852 = _773 * 0.5;
        float _853 = _783 * 0.5;
        float _854 = _793 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _868 = (dot(vec3(_356, _357, _358), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _877 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_806 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3539 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_879 + 1.0))) + _884) * _806;
        float _894 = _774 * 0.5;
        float _895 = _784 * 0.5;
        float _896 = _794 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _910 = (dot(vec3(_356, _357, _358), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _919 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_807 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3572 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_921 + 1.0))) + _926) * _807;
        _943 = _774;
        _945 = _773;
        _946 = _772;
        _947 = _784;
        _948 = _783;
        _949 = _782;
        _950 = _794;
        _951 = _793;
        _952 = _792;
        _953 = _807;
        _954 = _806;
        _955 = _805;
        _956 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
        _957 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
        _958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
    }
    else
    {
        _943 = _944;
        _945 = _944;
        _946 = _944;
        _947 = _944;
        _948 = _944;
        _949 = _944;
        _950 = _944;
        _951 = _944;
        _952 = _944;
        _953 = _944;
        _954 = _944;
        _955 = _944;
        _956 = 0.0;
        _957 = 0.0;
        _958 = 0.0;
    }
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _987 = fma(_612, cbModelParam._m0[30u].z, fma(_608, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _604));
        float _991 = fma(_612, cbModelParam._m0[31u].z, fma(_608, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _604));
        float _995 = fma(_612, cbModelParam._m0[32u].z, fma(_608, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _604));
        float _1018 = _604 + _356;
        float _1019 = _608 + _357;
        float _1020 = _612 + _358;
        float _1030 = fma(_1020, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018)) - _987;
        float _1031 = fma(_1020, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018)) - _991;
        float _1032 = fma(_1020, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018)) - _995;
        float _1036 = inversesqrt(dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032)));
        float _1049 = ((_1036 * _1030) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_987 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1036 * _1031) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_991 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1036 * _1032) / cbModelParam._m0[35u].z) + ((((((_995 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        float _1086 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1053.x + (-0.5));
        float _1088 = _1086 * (_1053.y + (-0.5));
        float _1089 = _1086 * (_1053.z + (-0.5));
        float _1096 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1060.x + (-0.5));
        float _1098 = _1096 * (_1060.y + (-0.5));
        float _1099 = _1096 * (_1060.z + (-0.5));
        float _1106 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1067.x + (-0.5));
        float _1108 = _1106 * (_1067.y + (-0.5));
        float _1109 = _1106 * (_1067.z + (-0.5));
        float _1116 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1074.x + (-0.5));
        float _1118 = _1116 * (_1074.y + (-0.5));
        float _1119 = _1116 * (_1074.z + (-0.5));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = _1087 * 0.5;
        float _1124 = _1097 * 0.5;
        float _1125 = _1107 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_356, _357, _358), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3635 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1150 + 1.0))) + _1155) * _1120;
        float _1165 = _1088 * 0.5;
        float _1166 = _1098 * 0.5;
        float _1167 = _1108 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_356, _357, _358), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3668 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1192 + 1.0))) + _1197) * _1121;
        float _1207 = _1089 * 0.5;
        float _1208 = _1099 * 0.5;
        float _1209 = _1109 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_356, _357, _358), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3701 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1234 + 1.0))) + _1239) * _1122;
        _1256 = _1089;
        _1257 = _1088;
        _1258 = _1087;
        _1259 = _1099;
        _1260 = _1098;
        _1261 = _1097;
        _1262 = _1109;
        _1263 = _1108;
        _1264 = _1107;
        _1265 = _1122;
        _1266 = _1121;
        _1267 = _1120;
        _1268 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _944;
        _1257 = _944;
        _1258 = _944;
        _1259 = _944;
        _1260 = _944;
        _1261 = _944;
        _1262 = _944;
        _1263 = _944;
        _1264 = _944;
        _1265 = _944;
        _1266 = _944;
        _1267 = _944;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1280 = (cbModelParam._m0[1u].x * (_1268 - _956)) + _956;
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _957)) + _957;
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _958)) + _958;
    float _1303 = fma(_1282, cbSceneParam._m0[89u].z, fma(_1281, cbSceneParam._m0[89u].y, _1280 * cbSceneParam._m0[89u].x));
    float _1306 = fma(_1282, cbSceneParam._m0[90u].z, fma(_1281, cbSceneParam._m0[90u].y, _1280 * cbSceneParam._m0[90u].x));
    float _1309 = fma(_1282, cbSceneParam._m0[91u].z, fma(_1281, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1280));
    float _1324 = _551 * 0.5;
    float _1325 = _552 * 0.5;
    float _1326 = _553 * 0.5;
    float _1327 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1330 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1333 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_1256, _1259, _1262, _1265));
    float _1367;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1340 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_943, _947, _950, _953));
        float _1344 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_945, _948, _951, _954));
        float _1348 = dot(vec4(_1324, _1325, _1326, 1.0), vec4(_946, _949, _952, _955));
        float _1355 = dot(vec4(cbModelParam._m0[39u]), vec4(_1324, _1325, _1326, 1.0));
        _1367 = dot(vec3(isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1355) ? 0.0 : (isnan(0.0) ? _1355 : max(0.0, _1355))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1367 = 1.0;
    }
    float _1378;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1369 = dot(vec4(cbModelParam._m0[40u]), vec4(_1324, _1325, _1326, 1.0));
        _1378 = dot(vec3(isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1378 = 1.0;
    }
    float _1382 = (_1378 * cbModelParam._m0[1u].x) + (_1367 * (1.0 - cbModelParam._m0[1u].x));
    float _1392 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _410);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1392 : min(cbModelParam._m0[25u].z, _1392));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1442 = fma(_612, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604)) + cbModelParam._m0[13u].w;
        float _1446 = fma(_612, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604)) + cbModelParam._m0[14u].w;
        float _1450 = fma(_612, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604)) + cbModelParam._m0[15u].w;
        float _1453 = fma(_553, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551));
        float _1456 = fma(_553, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551));
        float _1459 = fma(_553, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551));
        float _1487;
        if (_1453 > 0.0)
        {
            _1487 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1487 = frontier_phi_17_15_ladder;
        }
        float _1693;
        if (_1456 > 0.0)
        {
            _1693 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1693 = frontier_phi_26_22_ladder;
        }
        float _1936;
        if (_1459 > 0.0)
        {
            _1936 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1936 = frontier_phi_38_33_ladder;
        }
        float _1938 = isnan(_1693) ? _1487 : (isnan(_1487) ? _1693 : min(_1487, _1693));
        float _1939 = isnan(_1936) ? _1938 : (isnan(_1938) ? _1936 : min(_1938, _1936));
        float _1943 = (_1939 * _1453) + _1442;
        float _1944 = (_1939 * _1456) + _1446;
        float _1945 = (_1939 * _1459) + _1450;
        float _1946 = _1939 * 9.9999997473787516355514526367188e-05;
        float _1948 = (-1.0) - _1946;
        float _1950 = _1946 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1945 > _1950) || ((_1945 < _1948) || ((_1944 > _1950) || ((_1944 < _1948) || ((_1943 < _1948) || (_1943 > _1950))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2069 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1945, cbModelParam._m0[9u].z, fma(_1944, cbModelParam._m0[9u].y, _1943 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1945, cbModelParam._m0[10u].z, fma(_1944, cbModelParam._m0[10u].y, _1943 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1945, cbModelParam._m0[11u].z, fma(_1944, cbModelParam._m0[11u].y, _1943 * cbModelParam._m0[11u].x))), _1393);
            frontier_phi_16_38_ladder = _2069.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2069.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2069.x * cbModelParam._m0[1u].y;
        }
        _1475 = frontier_phi_16_38_ladder_2;
        _1477 = frontier_phi_16_38_ladder_1;
        _1479 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_551, _552, _553), _1393);
        _1475 = _1463.x * cbModelParam._m0[1u].y;
        _1477 = _1463.y * cbModelParam._m0[1u].y;
        _1479 = _1463.z * cbModelParam._m0[1u].y;
    }
    float _1483 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _410);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1483 : min(cbModelParam._m0[25u].w, _1483));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1541 = fma(_612, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604)) + cbModelParam._m0[21u].w;
        float _1545 = fma(_612, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604)) + cbModelParam._m0[22u].w;
        float _1549 = fma(_612, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604)) + cbModelParam._m0[23u].w;
        float _1552 = fma(_553, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551));
        float _1555 = fma(_553, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551));
        float _1558 = fma(_553, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551));
        float _1698;
        if (_1552 > 0.0)
        {
            _1698 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1698 = frontier_phi_28_24_ladder;
        }
        float _1963;
        if (_1555 > 0.0)
        {
            _1963 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1963 = frontier_phi_40_35_ladder;
        }
        float _2168;
        if (_1558 > 0.0)
        {
            _2168 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2168 = frontier_phi_49_46_ladder;
        }
        float _2170 = isnan(_1963) ? _1698 : (isnan(_1698) ? _1963 : min(_1698, _1963));
        float _2171 = isnan(_2168) ? _2170 : (isnan(_2170) ? _2168 : min(_2170, _2168));
        float _2175 = (_2171 * _1552) + _1541;
        float _2176 = (_2171 * _1555) + _1545;
        float _2177 = (_2171 * _1558) + _1549;
        float _2178 = _2171 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2178;
        float _2181 = _2178 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2177 > _2181) || ((_2177 < _2179) || ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 < _2179) || (_2175 > _2181))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2177, cbModelParam._m0[17u].z, fma(_2176, cbModelParam._m0[17u].y, _2175 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2177, cbModelParam._m0[18u].z, fma(_2176, cbModelParam._m0[18u].y, _2175 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2177, cbModelParam._m0[19u].z, fma(_2176, cbModelParam._m0[19u].y, _2175 * cbModelParam._m0[19u].x))), _1484);
            frontier_phi_25_49_ladder = _2376.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2376.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2376.x * cbModelParam._m0[1u].z;
        }
        _1577 = frontier_phi_25_49_ladder_2;
        _1579 = frontier_phi_25_49_ladder_1;
        _1581 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_551, _552, _553), _1484);
        _1577 = _1561.x * cbModelParam._m0[1u].z;
        _1579 = _1561.y * cbModelParam._m0[1u].z;
        _1581 = _1561.z * cbModelParam._m0[1u].z;
    }
    float _1593 = ((((1.0 - _572) * ((_559 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_572 * _559)) * _543;
    float _1594 = _1593 * ((cbModelParam._m0[1u].w * (_1577 - _1475)) + _1475);
    float _1595 = _1593 * ((cbModelParam._m0[1u].w * (_1579 - _1477)) + _1477);
    float _1596 = _1593 * ((cbModelParam._m0[1u].w * (_1581 - _1479)) + _1479);
    float _1599 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, _1594 * cbSceneParam._m0[91u].x));
    uvec4 _1615 = floatBitsToUint(cbInstanceData._m0[_517 + 5u]);
    uint _1617 = _1615.x * 14u;
    uint _1618 = _1617 + 13u;
    float _1625 = _543 + (-1.0);
    float _1630 = (cbLight._m0[_1618].x * _1625) + 1.0;
    float _1631 = (cbLight._m0[_1618].y * _1625) + 1.0;
    float _1632 = (cbLight._m0[_1618].z * _1625) + 1.0;
    float _1633 = (cbLight._m0[_1618].w * _1625) + 1.0;
    uint _1634 = _1617 + 5u;
    float _1640 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
    uint _1644 = _1617 + 4u;
    float _1651 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
    uint _1655 = _1617 | 1u;
    float _1666 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_356, _357, _358));
    float _1669 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_356, _357, _358));
    float _3837 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _3848 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1674 = (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * 0.3183098733425140380859375;
    float _1676 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.3183098733425140380859375;
    float _1683 = ((cbLight._m0[_1634].x * _1640) * _1676) + ((cbLight._m0[_1644].x * _1651) * _1674);
    float _1684 = ((_1640 * cbLight._m0[_1634].y) * _1676) + ((_1651 * cbLight._m0[_1644].y) * _1674);
    float _1685 = ((_1640 * cbLight._m0[_1634].z) * _1676) + ((_1651 * cbLight._m0[_1644].z) * _1674);
    uvec4 _1690 = floatBitsToUint(cbLight._m0[_1617 + 12u]);
    bool _1692 = _1690.x == 0u;
    float _1703;
    float _1705;
    float _1707;
    if (_1692)
    {
        _1703 = _1683;
        _1705 = _1684;
        _1707 = _1685;
    }
    else
    {
        uint _1711 = _1617 + 6u;
        float _1727 = (dot(vec3(cbLight._m0[_1617 + 2u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _1728 = _1727 * _1727;
        float _3859 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1730 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
        _1703 = (((cbLight._m0[_1711].x * 0.3183098733425140380859375) * _1729) * _1730) + _1683;
        _1705 = (((cbLight._m0[_1711].y * 0.3183098733425140380859375) * _1729) * _1730) + _1684;
        _1707 = (((cbLight._m0[_1711].z * 0.3183098733425140380859375) * _1729) * _1730) + _1685;
    }
    bool _1710 = _1690.y == 0u;
    float _1748;
    float _1750;
    float _1752;
    if (_1710)
    {
        _1748 = _1703;
        _1750 = _1705;
        _1752 = _1707;
    }
    else
    {
        uint _1907 = _1617 + 7u;
        float _1923 = (dot(vec3(cbLight._m0[_1617 + 3u].xyz), vec3(_356, _357, _358)) * 0.5) + 0.5;
        float _1924 = _1923 * _1923;
        float _3875 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1926 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _1748 = (((cbLight._m0[_1907].x * 0.3183098733425140380859375) * _1925) * _1926) + _1703;
        _1750 = (((cbLight._m0[_1907].y * 0.3183098733425140380859375) * _1925) * _1926) + _1705;
        _1752 = (((cbLight._m0[_1907].z * 0.3183098733425140380859375) * _1925) * _1926) + _1707;
    }
    uint _1755 = _1617 + 8u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _410) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1617].x + _456;
    float _1771 = cbLight._m0[_1617].y + _457;
    float _1772 = cbLight._m0[_1617].z + _458;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1617].xyz));
    float _3891 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _1784 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _1785 = dot(vec3(_356, _357, _358), vec3(_1777, _1778, _1779));
    float _3913 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1789 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1777, _1778, _1779));
    float _3924 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1793 = _1769 * _1769;
    float _1797 = ((_1788 * _1788) * (_1793 + (-1.0))) + 1.0;
    float _1808 = (exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1809 = 1.0 - _1769;
    float _1820 = (0.5 / (((_1784 * ((_1783 * _1809) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1809) + _1769) * _1783))) * _1783;
    float _3935 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1793 / ((_1797 * _1797) * 3.141590118408203125));
    uint _1833 = _1617 + 9u;
    float _1844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1655].w)) * _410) * 0.949999988079071044921875);
    float _1845 = _1844 * _1844;
    float _1846 = cbLight._m0[_1655].x + _456;
    float _1847 = cbLight._m0[_1655].y + _457;
    float _1848 = cbLight._m0[_1655].z + _458;
    float _1852 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
    float _1853 = _1852 * _1846;
    float _1854 = _1852 * _1847;
    float _1855 = _1852 * _1848;
    float _1856 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1655].xyz));
    float _3946 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _1860 = dot(vec3(_356, _357, _358), vec3(_1853, _1854, _1855));
    float _3957 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1864 = dot(vec3(cbLight._m0[_1655].xyz), vec3(_1853, _1854, _1855));
    float _3968 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1868 = _1845 * _1845;
    float _1872 = ((_1863 * _1863) * (_1868 + (-1.0))) + 1.0;
    float _1881 = (exp2(log2(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1882 = 1.0 - _1845;
    float _1892 = (0.5 / (((_1784 * ((_1859 * _1882) + _1845)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1882) + _1845) * _1859))) * _1859;
    float _3979 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1868 / ((_1872 * _1872) * 3.141590118408203125));
    float _1904 = (((_1881 * cbLight._m0[_1833].x) * _1894) * _1640) + (((_1808 * cbLight._m0[_1755].x) * _1822) * _1651);
    float _1905 = (((_1881 * cbLight._m0[_1833].y) * _1894) * _1640) + (((_1808 * cbLight._m0[_1755].y) * _1822) * _1651);
    float _1906 = (((_1881 * cbLight._m0[_1833].z) * _1894) * _1640) + (((_1808 * cbLight._m0[_1755].z) * _1822) * _1651);
    float _1968;
    float _1970;
    float _1972;
    if (_1692)
    {
        _1968 = _1904;
        _1970 = _1905;
        _1972 = _1906;
    }
    else
    {
        uint _1974 = _1617 + 2u;
        uint _1978 = _1617 + 10u;
        float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _410) * 0.949999988079071044921875);
        float _1993 = _1992 * _1992;
        float _1994 = cbLight._m0[_1974].x + _456;
        float _1995 = cbLight._m0[_1974].y + _457;
        float _1996 = cbLight._m0[_1974].z + _458;
        float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
        float _2001 = _2000 * _1994;
        float _2002 = _2000 * _1995;
        float _2003 = _2000 * _1996;
        float _2004 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_1974].xyz));
        float _3990 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2007 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2008 = dot(vec3(_356, _357, _358), vec3(_2001, _2002, _2003));
        float _4001 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2011 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2012 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2001, _2002, _2003));
        float _4012 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2016 = _1993 * _1993;
        float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
        float _2029 = (exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2030 = 1.0 - _1993;
        float _2040 = (0.5 / (((_1784 * ((_2007 * _2030) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2030) + _1993) * _2007))) * _2007;
        float _4023 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2042 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
        float _2043 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
        _1968 = (((_2029 * cbLight._m0[_1978].x) * _2042) * _2043) + _1904;
        _1970 = (((_2029 * cbLight._m0[_1978].y) * _2042) * _2043) + _1905;
        _1972 = (((_2029 * cbLight._m0[_1978].z) * _2042) * _2043) + _1906;
    }
    float _2078;
    float _2080;
    float _2082;
    if (_1710)
    {
        _2078 = _1968;
        _2080 = _1970;
        _2082 = _1972;
    }
    else
    {
        uint _2089 = _1617 + 3u;
        uint _2093 = _1617 + 11u;
        float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _410) * 0.949999988079071044921875);
        float _2108 = _2107 * _2107;
        float _2109 = cbLight._m0[_2089].x + _456;
        float _2110 = cbLight._m0[_2089].y + _457;
        float _2111 = cbLight._m0[_2089].z + _458;
        float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
        float _2116 = _2115 * _2109;
        float _2117 = _2115 * _2110;
        float _2118 = _2115 * _2111;
        float _2119 = dot(vec3(_356, _357, _358), vec3(cbLight._m0[_2089].xyz));
        float _4039 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2122 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2123 = dot(vec3(_356, _357, _358), vec3(_2116, _2117, _2118));
        float _4050 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2127 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2116, _2117, _2118));
        float _4061 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2131 = _2108 * _2108;
        float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
        float _2144 = (exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2145 = 1.0 - _2108;
        float _2155 = (0.5 / (((_1784 * ((_2122 * _2145) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2145) + _2108) * _2122))) * _2122;
        float _4072 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2157 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
        float _2158 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
        _2078 = (((_2144 * cbLight._m0[_2093].x) * _2157) * _2158) + _1968;
        _2080 = (((_2144 * cbLight._m0[_2093].y) * _2157) * _2158) + _1970;
        _2082 = (((_2144 * cbLight._m0[_2093].z) * _2157) * _2158) + _1972;
    }
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    if (_1615.y == 0u)
    {
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2233;
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2233;
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2233;
        uvec4 _2248 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2249 = _2248.x;
        uint _2260 = uint((float(_2248.y) * floor(float(uint(cbSceneParam._m0[85u].y * _478) / _2249))) + floor(float(uint(cbSceneParam._m0[85u].x * _477) / _2249)));
        float _2270 = (log2(_2236 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2271 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        uint _2274 = uint(isnan(14.0) ? _2271 : (isnan(_2271) ? 14.0 : min(_2271, 14.0)));
        uvec4 _2279 = texelFetch(g_lightClusterGridBuffer, int(((_2274 << 2u) + (_2260 << 6u)) >> 2u));
        uint _2280 = _2279.x;
        uint _2281 = _2248.z;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        if (((((1u << ((_2281 >> 4u) & 15u)) + 4294967295u) & _2280) == 0u) || ((_2281 & 240u) == 0u))
        {
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
        }
        else
        {
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            uint _2540 = 0u;
            uint _2549;
            bool _2550;
            for (;;)
            {
                _2549 = texelFetch(g_lightClassification, int((((_2274 << 5u) + (_2260 << 9u)) + (_2540 << 2u)) >> 2u)).x;
                _2550 = _2549 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2550)
                {
                    frontier_phi_66_pred = _2534;
                    frontier_phi_66_pred_1 = _2539;
                    frontier_phi_66_pred_2 = _2538;
                    frontier_phi_66_pred_3 = _2537;
                    frontier_phi_66_pred_4 = _2536;
                    frontier_phi_66_pred_5 = _2535;
                }
                else
                {
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    uint _2685;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2549;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    for (;;)
                    {
                        uint _2689 = uint(findLSB(_2685)) + (_2540 << 5u);
                        uint _2686 = (_2685 + 4294967295u) & _2685;
                        uint _2691 = _2689 * 48u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2691)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 3u)).x));
                        uint _2711 = (_2689 * 48u) + 4u;
                        vec4 _2724 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 3u)).x));
                        uint _2730 = (_2689 * 48u) + 8u;
                        vec3 _2741 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x));
                        float _2745 = _2705.x - _2234;
                        float _2746 = _2705.y - _2235;
                        float _2747 = _2705.z - _2236;
                        float _2748 = dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747));
                        float _2751 = inversesqrt(_2748);
                        float _2752 = _2751 * _2745;
                        float _2753 = _2751 * _2746;
                        float _2754 = _2751 * _2747;
                        float _2755 = dot(vec3(_498, _501, _504), vec3(_2752, _2753, _2754));
                        float _2760 = 1.0 - (_2748 * _2705.w);
                        float _4098 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2761 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2762 = sqrt(_2748) * _2724.w;
                        float _2765 = 1.39999997615814208984375 / (_2762 + 1.39999997615814208984375);
                        float _2766 = _2765 * _2765;
                        float _2769 = ((1.0 - _2766) * _2755) + _2766;
                        float _2772 = _2762 * _2762;
                        float _2776 = ((isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0))) * _2761) / ((_2772 * 0.699999988079071044921875) + 1.0);
                        float _2780 = (-0.0) - _2234;
                        float _2781 = (-0.0) - _2235;
                        float _2782 = (-0.0) - _2236;
                        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
                        float _2787 = _2786 * _2780;
                        float _2788 = _2786 * _2781;
                        float _2789 = _2786 * _2782;
                        float _2797 = exp2(log2(1.0 / ((_2772 * 3.5) + 5.0)) * 0.25);
                        float _2798 = 1.0 - _559;
                        float _2805 = sqrt(1.0 - ((1.0 - (_2798 * _2798)) * (1.0 - (_2797 * _2797))));
                        float _2806 = _2805 * _2805;
                        float _2807 = _2806 * _2806;
                        float _2808 = _2787 + _2752;
                        float _2809 = _2788 + _2753;
                        float _2810 = _2789 + _2754;
                        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
                        float _2818 = dot(vec3(_498, _501, _504), vec3(_2787, _2788, _2789));
                        float _4114 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2822 = dot(vec3(_498, _501, _504), vec3(_2814 * _2808, _2814 * _2809, _2814 * _2810));
                        float _4125 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2829 = ((_2825 * _2825) * (_2807 + (-1.0))) + 1.0;
                        float _2830 = _2765 * _2806;
                        float _2831 = _2830 * _2830;
                        float _2834 = ((1.0 - _2831) * _2755) + _2831;
                        float _4136 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2835 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2836 = 1.0 - _2806;
                        float _2846 = (0.5 / (((_2835 * ((_2821 * _2836) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2835 * _2836) + _2806) * _2821))) * _2835;
                        float _4147 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2857 = (((_2807 * 3.1415927410125732421875) * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) / ((_2829 * _2829) * ((_2772 * 2.1991131305694580078125) + 3.141590118408203125))) * _2761;
                        _2609 = (_2776 * _2724.x) + _2682;
                        _2610 = (_2776 * _2724.y) + _2683;
                        _2611 = (_2776 * _2724.z) + _2684;
                        _2606 = (_2857 * _2741.x) + _2679;
                        _2607 = (_2857 * _2741.y) + _2680;
                        _2608 = (_2857 * _2741.z) + _2681;
                        if (_2686 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2608;
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2686;
                        }
                    }
                    frontier_phi_66_pred = _2606;
                    frontier_phi_66_pred_1 = _2611;
                    frontier_phi_66_pred_2 = _2610;
                    frontier_phi_66_pred_3 = _2609;
                    frontier_phi_66_pred_4 = _2608;
                    frontier_phi_66_pred_5 = _2607;
                }
                _2382 = frontier_phi_66_pred;
                _2392 = frontier_phi_66_pred_1;
                _2390 = frontier_phi_66_pred_2;
                _2388 = frontier_phi_66_pred_3;
                _2386 = frontier_phi_66_pred_4;
                _2384 = frontier_phi_66_pred_5;
                uint _2541 = _2540 + 1u;
                if (_2541 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2534 = _2382;
                    _2535 = _2384;
                    _2536 = _2386;
                    _2537 = _2388;
                    _2538 = _2390;
                    _2539 = _2392;
                    _2540 = _2541;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
        }
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.z;
        uint _2398 = (_2396 >> 8u) & 15u;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        if (((4294967295u << _2398) & _2280) == 0u)
        {
            _2502 = _2381;
            _2504 = _2383;
            _2506 = _2385;
            _2508 = _2387;
            _2510 = _2389;
            _2512 = _2391;
        }
        else
        {
            float _2527 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
            float _2528 = _2527 * _2234;
            float _2529 = _2527 * _2235;
            float _2530 = _2527 * _2236;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2398 < ((_2396 >> 12u) & 15u))
            {
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2662 = _2381;
                float _2663 = _2383;
                float _2664 = _2385;
                float _2665 = _2387;
                float _2666 = _2389;
                float _2667 = _2391;
                uint _2668 = _2398;
                uint _2677;
                bool _2678;
                for (;;)
                {
                    _2677 = texelFetch(g_lightClassification, int((((_2274 << 5u) + (_2260 << 9u)) + (_2668 << 2u)) >> 2u)).x;
                    _2678 = _2677 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2678)
                    {
                        frontier_phi_77_pred = _2667;
                        frontier_phi_77_pred_1 = _2666;
                        frontier_phi_77_pred_2 = _2665;
                        frontier_phi_77_pred_3 = _2664;
                        frontier_phi_77_pred_4 = _2663;
                        frontier_phi_77_pred_5 = _2662;
                    }
                    else
                    {
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _2884 = _2662;
                        float _2885 = _2663;
                        float _2886 = _2664;
                        float _2887 = _2665;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        uint _2890 = _2677;
                        uint _2891;
                        vec4 _2916;
                        float _2917;
                        vec4 _2932;
                        vec3 _2944;
                        vec4 _2960;
                        vec4 _2976;
                        float _3023;
                        bool _3024;
                        for (;;)
                        {
                            uint _2901 = ((_2668 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2890));
                            _2891 = (_2890 + 4294967295u) & _2890;
                            uint _2903 = _2901 * 40u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2917 = _2916.w;
                            uint _2919 = (_2901 * 40u) + 4u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2934 = (_2901 * 40u) + 8u;
                            _2944 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x));
                            uint _2947 = (_2901 * 40u) + 16u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2963 = (_2901 * 40u) + 20u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2979 = (_2901 * 40u) + 24u;
                            vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2998 = (_2901 * 40u) + 28u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            _3023 = fma(_2236, _3011.z, fma(_2235, _3011.y, _3011.x * _2234)) + _3011.w;
                            _3024 = !((fma(_2236, _2992.z, fma(_2235, _2992.y, _2992.x * _2234)) + _2992.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3024)
                            {
                                float _3051 = _2916.x - _2234;
                                float _3052 = _2916.y - _2235;
                                float _3053 = _2916.z - _2236;
                                float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                                float _3057 = inversesqrt(_3054);
                                float _3058 = _3057 * _3051;
                                float _3059 = _3057 * _3052;
                                float _3060 = _3057 * _3053;
                                float _3064 = 1.0 - (_3054 / (_2917 * _2917));
                                float _4158 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3069 = sqrt(_3054) * _2932.w;
                                float _3071 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                                float _3072 = _3071 * _3071;
                                float _3075 = ((1.0 - _3072) * dot(vec3(_3058, _3059, _3060), vec3(_498, _501, _504))) + _3072;
                                float _3078 = _3069 * _3069;
                                float _3082 = (fma(_2236, _2960.z, fma(_2235, _2960.y, _2960.x * _2234)) + _2960.w) / _3023;
                                float _3083 = (fma(_2236, _2976.z, fma(_2235, _2976.y, _2976.x * _2234)) + _2976.w) / _3023;
                                float _3087 = 1.0 - dot(vec2(_3082, _3083), vec2(_3082, _3083));
                                float _4174 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3089 = _3088 * (((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3065) / ((_3078 * 0.699999988079071044921875) + 1.0));
                                float _3101 = exp2(log2(1.0 / ((_3078 * 3.5) + 5.0)) * 0.25);
                                float _3102 = 1.0 - _559;
                                float _3109 = sqrt(1.0 - ((1.0 - (_3102 * _3102)) * (1.0 - (_3101 * _3101))));
                                float _3110 = _3109 * _3109;
                                float _3111 = _3110 * _3110;
                                float _3112 = _3058 - _2528;
                                float _3113 = _3059 - _2529;
                                float _3114 = _3060 - _2530;
                                float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                                float _3122 = dot(vec3(_498, _501, _504), vec3((-0.0) - _2528, (-0.0) - _2529, (-0.0) - _2530));
                                float _4185 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3125 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3126 = dot(vec3(_498, _501, _504), vec3(_3118 * _3112, _3118 * _3113, _3118 * _3114));
                                float _4196 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3133 = ((_3129 * _3129) * (_3111 + (-1.0))) + 1.0;
                                float _3134 = _3071 * _3110;
                                float _3135 = _3134 * _3134;
                                float _3141 = ((1.0 - _3135) * dot(vec3(_498, _501, _504), vec3(_3058, _3059, _3060))) + _3135;
                                float _4207 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3143 = 1.0 - _3110;
                                float _3153 = (0.5 / (((_3142 * ((_3125 * _3143) + _3110)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3110) * _3125))) * _3142;
                                float _4218 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3163 = (_3088 * _3065) * (((_3111 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_3133 * _3133) * ((_3078 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3089 * _2932.y;
                                frontier_phi_83_pred_1 = _3089 * _2932.x;
                                frontier_phi_83_pred_2 = _3163 * _2944.z;
                                frontier_phi_83_pred_3 = _3163 * _2944.y;
                                frontier_phi_83_pred_4 = _3163 * _2944.x;
                                frontier_phi_83_pred_5 = _3089 * _2932.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3171 = frontier_phi_83_pred;
                            _3170 = frontier_phi_83_pred_1;
                            _3169 = frontier_phi_83_pred_2;
                            _3168 = frontier_phi_83_pred_3;
                            _3167 = frontier_phi_83_pred_4;
                            _3172 = frontier_phi_83_pred_5;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            _2876 = _3172 + _2889;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            _2873 = _3169 + _2886;
                            if (_2891 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2891;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2876;
                        frontier_phi_77_pred_1 = _2875;
                        frontier_phi_77_pred_2 = _2874;
                        frontier_phi_77_pred_3 = _2873;
                        frontier_phi_77_pred_4 = _2872;
                        frontier_phi_77_pred_5 = _2871;
                    }
                    _2513 = frontier_phi_77_pred;
                    _2511 = frontier_phi_77_pred_1;
                    _2509 = frontier_phi_77_pred_2;
                    _2507 = frontier_phi_77_pred_3;
                    _2505 = frontier_phi_77_pred_4;
                    _2503 = frontier_phi_77_pred_5;
                    uint _2669 = _2668 + 1u;
                    if (_2669 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2662 = _2503;
                        _2663 = _2505;
                        _2664 = _2507;
                        _2665 = _2509;
                        _2666 = _2511;
                        _2667 = _2513;
                        _2668 = _2669;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2507;
                frontier_phi_58_59_ladder_1 = _2513;
                frontier_phi_58_59_ladder_2 = _2511;
                frontier_phi_58_59_ladder_3 = _2509;
                frontier_phi_58_59_ladder_4 = _2505;
                frontier_phi_58_59_ladder_5 = _2503;
            }
            else
            {
                frontier_phi_58_59_ladder = _2385;
                frontier_phi_58_59_ladder_1 = _2391;
                frontier_phi_58_59_ladder_2 = _2389;
                frontier_phi_58_59_ladder_3 = _2387;
                frontier_phi_58_59_ladder_4 = _2383;
                frontier_phi_58_59_ladder_5 = _2381;
            }
            _2502 = frontier_phi_58_59_ladder_5;
            _2504 = frontier_phi_58_59_ladder_4;
            _2506 = frontier_phi_58_59_ladder;
            _2508 = frontier_phi_58_59_ladder_3;
            _2510 = frontier_phi_58_59_ladder_2;
            _2512 = frontier_phi_58_59_ladder_1;
        }
        float _2517 = isnan(1.0) ? _543 : (isnan(_543) ? 1.0 : min(_543, 1.0));
        _2293 = (_2517 * _2508) + _1748;
        _2295 = (_2517 * _2510) + _1750;
        _2297 = (_2517 * _2512) + _1752;
        _2299 = ((_2502 * 0.039999999105930328369140625) * _2517) + _2078;
        _2301 = ((_2504 * 0.039999999105930328369140625) * _2517) + _2080;
        _2303 = ((_2506 * 0.039999999105930328369140625) * _2517) + _2082;
    }
    else
    {
        _2293 = _1748;
        _2295 = _1750;
        _2297 = _1752;
        _2299 = _2078;
        _2301 = _2080;
        _2303 = _2082;
    }
    float _4234 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4245 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4256 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _2320 = ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2293 + ((isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))) * _543))) + ((_2299 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _1382)) * cbPerFrame._m0[3u].x);
    float _2321 = ((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2295 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _543))) + ((_2301 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1382)) * cbPerFrame._m0[3u].x);
    float _2322 = ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2297 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _543))) + ((_2303 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1382)) * cbPerFrame._m0[3u].x);
    uint _2323 = _517 + 6u;
    float _2331 = _477 / cbSceneParam._m0[86u].x;
    float _2332 = _478 / cbSceneParam._m0[86u].y;
    vec4 _2346 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, (log2((isnan(cbSceneParam._m0[77u].w) ? _429 : (isnan(_429) ? cbSceneParam._m0[77u].w : min(_429, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2348 = _2346.x;
    float _2349 = _2346.y;
    float _2350 = _2346.z;
    float _2351 = _2346.w;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_429 > cbSceneParam._m0[78u].w)
    {
        float _2406 = isnan(_429) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _429 : min(cbSceneParam._m0[80u].w, _429));
        float _2407 = _2406 / _429;
        float _2418 = _2407 * _449;
        float _2419 = _450 * _2407;
        float _2420 = (-0.0) - _2419;
        float _2422 = _2407 * _451;
        float _2424 = (cbSceneParam._m0[77u].w * _2420) / _2406;
        float _2425 = _2424 + cbSceneParam._m0[79u].w;
        float _2426 = cbSceneParam._m0[79u].w - _2419;
        float _2432 = sqrt(((_2418 * _2418) + (_2419 * _2419)) + (_2422 * _2422));
        float _2435 = (1.0 - (cbSceneParam._m0[77u].w / _2406)) * _2432;
        float _2440 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2442 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2619;
        if (abs((_2420 - _2424) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2619 = ((((_2425 > 0.0) ? exp2(_2440 * _2425) : (2.0 - exp2(_2442 * _2425))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2435;
        }
        else
        {
            float _2563 = 1.0 / cbSceneParam._m0[80u].x;
            float _2564 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : max(_2425, _2426));
            float _2565 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : min(_2425, _2426));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            float _2575 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : min(_2565, 0.0));
            _2619 = ((abs(_2432 / _2420) * cbSceneParam._m0[80u].y) * ((((_2574 - _2575) * 2.0) - ((exp2(_2440 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0)))) - exp2(_2440 * (isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0))))) * _2563)) - ((exp2(_2442 * _2574) - exp2(_2442 * _2575)) * _2563))) + (_2435 * cbSceneParam._m0[80u].z);
        }
        vec4 _2621 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, 1.0), 0.0);
        float _2630 = exp2((_2619 * (-1.44269502162933349609375)) * (1.0 - _2621.w));
        float _2631 = log2(_2630);
        float _2647 = log2(_2351);
        _2444 = (exp2(_2647 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2631 * cbSceneParam._m0[78u].x)) * _2621.x) / cbSceneParam._m0[78u].x)) + _2348;
        _2446 = (exp2(_2647 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2631 * cbSceneParam._m0[78u].y)) * _2621.y) / cbSceneParam._m0[78u].y)) + _2349;
        _2448 = (exp2(_2647 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2631 * cbSceneParam._m0[78u].z)) * _2621.z) / cbSceneParam._m0[78u].z)) + _2350;
        _2450 = _2630 * _2351;
    }
    else
    {
        _2444 = _2348;
        _2446 = _2349;
        _2448 = _2350;
        _2450 = _2351;
    }
    bool _2657;
    vec4 _2460;
    vec4 _2482;
    float _2484;
    float _2488;
    float _2489;
    float _2490;
    float _2491;
    bool _2501;
    for (;;)
    {
        _2460 = cbMatDynParam._m0[0u];
        float _2462 = roundEven(_2460.y);
        bool _2463 = _2462 == 3.0;
        float _2464 = log2(_2450);
        float _2471 = exp2(_2464 * cbSceneParam._m0[78u].x) * _2320;
        float _2472 = exp2(_2464 * cbSceneParam._m0[78u].y) * _2321;
        float _2473 = exp2(_2464 * cbSceneParam._m0[78u].z) * _2322;
        float _2480 = _465 + (-0.5);
        _2482 = cbMtdParam._m0[1u];
        _2484 = _2482.y * _2480;
        float _2487 = (_2462 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2488 = _2487 * (_2463 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2444)));
        _2489 = _2487 * (_2463 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2446)));
        _2490 = _2487 * (_2463 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2448)));
        _2491 = _2480 * 0.999000012874603271484375;
        _2501 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2501)
        {
            if ((cbInstanceData._m0[_517 + 7u].x + _2491) < 0.5)
            {
                _2657 = true;
                break;
            }
        }
        uint _2598 = _519 + uint(_2460.w);
        if ((cbInstanceData._m0[_2598].w < 1.0) && ((cbInstanceData._m0[_2598].w + _2491) < 0.5))
        {
            _2657 = true;
            break;
        }
        if ((_2484 + 1.0) < _2482.x)
        {
            _2657 = true;
            break;
        }
        _2657 = false;
        break;
    }
    float _2862;
    if (_2657)
    {
        discard_state = true;
        _2862 = 0.0;
    }
    else
    {
        _2862 = cbInstanceData._m0[_2323].w;
    }
    SV_Target.x = _2488;
    SV_Target.y = _2489;
    SV_Target.z = _2490;
    SV_Target.w = _2862;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2323].w;
    discard_exit();
}


