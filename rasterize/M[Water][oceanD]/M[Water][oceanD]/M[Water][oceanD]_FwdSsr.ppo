#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[22];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _81 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _82 = _81 * NORMAL.x;
    float _83 = _81 * NORMAL.y;
    float _84 = _81 * NORMAL.z;
    float _89;
    float _90;
    float _91;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _89 = (-0.0) - _82;
        _90 = (-0.0) - _83;
        _91 = (-0.0) - _84;
    }
    else
    {
        _89 = _82;
        _90 = _83;
        _91 = _84;
    }
    float _136 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _146 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _136);
    float _147 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _136);
    float _148 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _136);
    float _164 = cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].w;
    float _177 = (cbMtdParam._m0[14u].w + ((sqrt(((_146 * _146) + (_147 * _147)) + (_148 * _148)) - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _164 : (isnan(_164) ? 0.0 : max(_164, 0.0))))) * cbMtdParam._m0[14u].x;
    float _740 = isnan(0.0) ? _177 : (isnan(_177) ? 0.0 : max(_177, 0.0));
    float _182 = ((isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0))) * (cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _751 = isnan(0.0) ? _182 : (isnan(_182) ? 0.0 : max(_182, 0.0));
    float _183 = isnan(1.0) ? _751 : (isnan(_751) ? 1.0 : min(_751, 1.0));
    float _197 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _198 = POSITION_1.x / POSITION_1.w;
    float _199 = POSITION_1.y / POSITION_1.w;
    float _203 = (_198 * 0.5) + 0.5;
    float _204 = 0.5 - (_199 * 0.5);
    float _209;
    float _211;
    float _213;
    float _215;
    if (_183 < cbPerScene._m0[22u].z)
    {
        _209 = 0.0;
        _211 = 0.0;
        _213 = 0.0;
        _215 = 0.0;
    }
    else
    {
        float _221 = 1.0 / _197;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _221))
        {
            float _244 = fma(_91, cbPerScene._m0[8u].z, fma(_90, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _89));
            float _247 = fma(_91, cbPerScene._m0[9u].z, fma(_90, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _89));
            float _250 = fma(_91, cbPerScene._m0[10u].z, fma(_90, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _89));
            float _257 = (_197 * _198) * cbPerScene._m0[28u].x;
            float _259 = (_197 * _199) * cbPerScene._m0[28u].y;
            float _263 = inversesqrt(dot(vec3(_257, _259, _197), vec3(_257, _259, _197)));
            float _264 = _257 * _263;
            float _265 = _259 * _263;
            float _266 = _263 * _197;
            float _270 = dot(vec3(_264, _265, _266), vec3(_244, _247, _250)) * 2.0;
            float _275 = _264 - (_270 * _244);
            float _276 = _265 - (_270 * _247);
            float _277 = _266 - (_270 * _250);
            float _281 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
            float _284 = _277 * _281;
            float frontier_phi_3_4_ladder_5_ladder;
            float frontier_phi_3_4_ladder_5_ladder_1;
            float frontier_phi_3_4_ladder_5_ladder_2;
            float frontier_phi_3_4_ladder_5_ladder_3;
            if (_284 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_5_ladder = 0.0;
                frontier_phi_3_4_ladder_5_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_5_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_5_ladder_3 = 0.0;
            }
            else
            {
                float _296 = abs(dot(vec3((-0.0) - _264, (-0.0) - _265, (-0.0) - _266), vec3(_244, _247, _250)));
                float _762 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
                float _307 = (((_183 * _183) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _316 = (cbPerScene._m0[29u].x * (1.0 - _183)) + cbPerScene._m0[29u].y;
                float _773 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
                float _325 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_1;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_2;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_3;
                if (_307 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_5_ladder_6_ladder = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_3 = 0.0;
                }
                else
                {
                    float _328 = _284 - cbPerScene._m0[16u].x;
                    float _784 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
                    float _329 = isnan(1.0) ? _784 : (isnan(_784) ? 1.0 : min(_784, 1.0));
                    float _330 = _329 * _329;
                    float _332 = (_307 - cbPerScene._m0[22u].x) * 10.0;
                    float _795 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
                    float _334 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
                    float _335 = isnan(_334) ? _330 : (isnan(_330) ? _334 : min(_330, _334));
                    float _339 = (cbPerScene._m0[21u].x - _197) * cbPerScene._m0[21u].z;
                    float _811 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
                    float _340 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
                    float _341 = isnan(_340) ? _335 : (isnan(_335) ? _340 : min(_335, _340));
                    float _342 = (_275 * _281) + _257;
                    float _343 = (_276 * _281) + _259;
                    float _344 = _284 + _197;
                    float _377 = fma(_344, cbPerScene._m0[7u].z, fma(_343, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _342)) + cbPerScene._m0[7u].w;
                    float _381 = ((fma(_344, cbPerScene._m0[4u].z, fma(_343, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _342)) + cbPerScene._m0[4u].w) / _377) - _203;
                    float _382 = ((fma(_344, cbPerScene._m0[5u].z, fma(_343, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _342)) + cbPerScene._m0[5u].w) / _377) - _204;
                    float _389 = cbPerScene._m0[18u].x * _381;
                    float _390 = cbPerScene._m0[18u].y * _382;
                    float _395 = sqrt((_389 * _389) + (_390 * _390)) + 9.9999997473787516355514526367188e-06;
                    float _400 = (_381 / _395) * _325;
                    float _401 = (_382 / _395) * _325;
                    float _402 = (((1.0 / _344) - _221) / _395) * _325;
                    float _431 = abs(float(_400 > 0.0) - _203) / (abs(_400) + 1.0000000116860974230803549289703e-07);
                    float _432 = abs(float(_401 > 0.0) - _204) / (abs(_401) + 1.0000000116860974230803549289703e-07);
                    float _434 = (abs(((_402 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _221) / (abs(_402) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _435 = isnan(_432) ? _431 : (isnan(_431) ? _432 : min(_431, _432));
                    float _436 = isnan(_434) ? _435 : (isnan(_435) ? _434 : min(_435, _434));
                    uint _439 = uint(int(isnan(cbPerScene._m0[23u].y) ? _436 : (isnan(_436) ? cbPerScene._m0[23u].y : min(_436, cbPerScene._m0[23u].y))));
                    float _216;
                    float _444;
                    float _446;
                    float _448;
                    if (int(_439) > int(0u))
                    {
                        float _441 = _402 + _221;
                        float _442 = _401 + _204;
                        float _443 = _400 + _203;
                        float _445;
                        float _447;
                        float _449;
                        float _450;
                        uint _461;
                        float _463;
                        float _465;
                        float _467;
                        float _469;
                        float _471;
                        float _473;
                        float _475;
                        uint _477;
                        float _479;
                        float _481;
                        float _483;
                        float _456 = 0.0;
                        float _457 = 0.0;
                        float _458 = 0.0;
                        float _459 = 0.0;
                        uint _460 = 0u;
                        float _462 = _221;
                        float _464 = _443;
                        float _466 = _442;
                        float _468 = _441;
                        float _470 = _203;
                        float _472 = _204;
                        float _474 = _221;
                        uint _476 = 1u;
                        float _478 = 0.0;
                        float _480 = 0.0;
                        float _482 = 0.0;
                        float _496;
                        float _502;
                        float _503;
                        float _504;
                        float _505;
                        float _506;
                        float _507;
                        uint _508;
                        float _509;
                        bool _516;
                        for (;;)
                        {
                            _496 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _464, cbSceneParam._m0[86u].y * _466), 0.0).x;
                            bool _501 = _460 == (_439 + 4294967295u);
                            _502 = _501 ? _478 : _464;
                            _503 = _501 ? _480 : _466;
                            _504 = _501 ? _482 : _468;
                            _505 = _501 ? _478 : _470;
                            _506 = _501 ? _480 : _472;
                            _507 = _501 ? _482 : _474;
                            _508 = _501 ? 1u : _476;
                            _509 = _501 ? (-1.0) : (_468 - _496);
                            _516 = (_508 != 0u) && ((_509 <= 0.0) && ((_501 ? (-1.0) : (_496 - (_462 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_16_pred;
                            float frontier_phi_16_pred_1;
                            float frontier_phi_16_pred_2;
                            float frontier_phi_16_pred_3;
                            float frontier_phi_16_pred_4;
                            float frontier_phi_16_pred_5;
                            float frontier_phi_16_pred_6;
                            uint frontier_phi_16_pred_7;
                            float frontier_phi_16_pred_8;
                            float frontier_phi_16_pred_9;
                            float frontier_phi_16_pred_10;
                            float frontier_phi_16_pred_11;
                            float frontier_phi_16_pred_12;
                            float frontier_phi_16_pred_13;
                            float frontier_phi_16_pred_14;
                            uint frontier_phi_16_pred_15;
                            if (_516)
                            {
                                uint _526 = uint(int(log2(_325) + 0.999000012874603271484375));
                                float _537;
                                float _539;
                                float _541;
                                float _543;
                                float _545;
                                float _547;
                                float _549;
                                if (int(_526) > int(0u))
                                {
                                    uint _648;
                                    float _650;
                                    float _651;
                                    float _652;
                                    float _653;
                                    float _654;
                                    float _655;
                                    float _656;
                                    _648 = 0u;
                                    _650 = _502;
                                    _651 = _503;
                                    _652 = _504;
                                    _653 = _505;
                                    _654 = _506;
                                    _655 = _507;
                                    _656 = _496;
                                    float _538;
                                    float _540;
                                    float _542;
                                    float _544;
                                    float _546;
                                    float _548;
                                    float _550;
                                    for (;;)
                                    {
                                        float _660 = (_653 + _650) * 0.5;
                                        float _661 = (_654 + _651) * 0.5;
                                        float _662 = (_655 + _652) * 0.5;
                                        vec4 _670 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661), 0.0);
                                        float _672 = _670.x;
                                        bool _674 = (_662 - _672) < 0.0;
                                        _538 = _674 ? _660 : _650;
                                        _540 = _674 ? _661 : _651;
                                        _542 = _674 ? _662 : _652;
                                        _544 = _674 ? _653 : _660;
                                        _546 = _674 ? _654 : _661;
                                        _548 = _674 ? _655 : _662;
                                        _550 = _674 ? _672 : _656;
                                        uint _649 = _648 + 1u;
                                        if (_649 == _526)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _648 = _649;
                                            _650 = _538;
                                            _651 = _540;
                                            _652 = _542;
                                            _653 = _544;
                                            _654 = _546;
                                            _655 = _548;
                                            _656 = _550;
                                        }
                                    }
                                    _537 = _538;
                                    _539 = _540;
                                    _541 = _542;
                                    _543 = _544;
                                    _545 = _546;
                                    _547 = _548;
                                    _549 = _550;
                                }
                                else
                                {
                                    _537 = _502;
                                    _539 = _503;
                                    _541 = _504;
                                    _543 = _505;
                                    _545 = _506;
                                    _547 = _507;
                                    _549 = _496;
                                }
                                float _559 = cbPerScene._m0[28u].x * ((_537 * 2.0) + (-1.0));
                                float _560 = cbPerScene._m0[28u].y * (1.0 - (_539 * 2.0));
                                float _593 = fma(_549, cbPerScene._m0[27u].w, fma(_560, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _559) + cbPerScene._m0[27u].z);
                                float _594 = fma(_549, cbPerScene._m0[24u].w, fma(_560, cbPerScene._m0[24u].y, _559 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _593;
                                float _595 = fma(_549, cbPerScene._m0[25u].w, fma(_560, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _559) + cbPerScene._m0[25u].z) / _593;
                                vec4 _604 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _594, cbSceneParam._m0[87u].w * _595), 0.0);
                                float _609 = isnan(_341) ? 1.0 : (isnan(1.0) ? _341 : min(1.0, _341));
                                float _610 = 0.5 - _594;
                                float _611 = 0.5 - _595;
                                float _612 = _610 * 2.0;
                                float _613 = _611 * 2.0;
                                float _614 = _612 * _612;
                                float _615 = _613 * _613;
                                float _847 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
                                float _858 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
                                float _624 = inversesqrt(dot(vec2(_400, _401), vec2(_400, _401)));
                                float _630 = inversesqrt(dot(vec2(_612, _613), vec2(_612, _613)));
                                float _636 = dot(vec2((_610 * (-2.0)) * _630, (_611 * (-2.0)) * _630), vec2(_624 * _400, _624 * _401));
                                float _869 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
                                float _643 = ((1.0 - (isnan(1.0) ? _858 : (isnan(_858) ? 1.0 : min(_858, 1.0)))) * (1.0 - (isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0))))) * (4.0 - ((isnan(1.0) ? _869 : (isnan(_869) ? 1.0 : min(_869, 1.0))) * 2.0));
                                float _880 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
                                float _644 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
                                float _645 = _644 * _644;
                                frontier_phi_16_pred = _547;
                                frontier_phi_16_pred_1 = _545;
                                frontier_phi_16_pred_2 = _480;
                                frontier_phi_16_pred_3 = _543;
                                frontier_phi_16_pred_4 = _541;
                                frontier_phi_16_pred_5 = _539;
                                frontier_phi_16_pred_6 = _462;
                                frontier_phi_16_pred_7 = _439;
                                frontier_phi_16_pred_8 = isnan(_645) ? _609 : (isnan(_609) ? _645 : min(_609, _645));
                                frontier_phi_16_pred_9 = _604.z;
                                frontier_phi_16_pred_10 = _604.y;
                                frontier_phi_16_pred_11 = _604.x;
                                frontier_phi_16_pred_12 = _537;
                                frontier_phi_16_pred_13 = _482;
                                frontier_phi_16_pred_14 = _478;
                                frontier_phi_16_pred_15 = _508;
                            }
                            else
                            {
                                bool _528 = _509 > 0.0;
                                frontier_phi_16_pred = _504;
                                frontier_phi_16_pred_1 = _503;
                                frontier_phi_16_pred_2 = _528 ? _503 : _480;
                                frontier_phi_16_pred_3 = _502;
                                frontier_phi_16_pred_4 = _504 + _402;
                                frontier_phi_16_pred_5 = _503 + _401;
                                frontier_phi_16_pred_6 = _496;
                                frontier_phi_16_pred_7 = _460 + 1u;
                                frontier_phi_16_pred_8 = _459;
                                frontier_phi_16_pred_9 = _458;
                                frontier_phi_16_pred_10 = _457;
                                frontier_phi_16_pred_11 = _456;
                                frontier_phi_16_pred_12 = _502 + _400;
                                frontier_phi_16_pred_13 = _528 ? _504 : _482;
                                frontier_phi_16_pred_14 = _528 ? _502 : _478;
                                frontier_phi_16_pred_15 = uint(_528);
                            }
                            _475 = frontier_phi_16_pred;
                            _473 = frontier_phi_16_pred_1;
                            _481 = frontier_phi_16_pred_2;
                            _471 = frontier_phi_16_pred_3;
                            _469 = frontier_phi_16_pred_4;
                            _467 = frontier_phi_16_pred_5;
                            _463 = frontier_phi_16_pred_6;
                            _461 = frontier_phi_16_pred_7;
                            _450 = frontier_phi_16_pred_8;
                            _449 = frontier_phi_16_pred_9;
                            _447 = frontier_phi_16_pred_10;
                            _445 = frontier_phi_16_pred_11;
                            _465 = frontier_phi_16_pred_12;
                            _483 = frontier_phi_16_pred_13;
                            _479 = frontier_phi_16_pred_14;
                            _477 = frontier_phi_16_pred_15;
                            if (int(_461) < int(_439))
                            {
                                _456 = _445;
                                _457 = _447;
                                _458 = _449;
                                _459 = _450;
                                _460 = _461;
                                _462 = _463;
                                _464 = _465;
                                _466 = _467;
                                _468 = _469;
                                _470 = _471;
                                _472 = _473;
                                _474 = _475;
                                _476 = _477;
                                _478 = _479;
                                _480 = _481;
                                _482 = _483;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _444 = _445;
                        _446 = _447;
                        _448 = _449;
                        _216 = _450;
                    }
                    else
                    {
                        _444 = 0.0;
                        _446 = 0.0;
                        _448 = 0.0;
                        _216 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3;
                    if ((isnan(_444) || isnan(_446)) || isnan(_448))
                    {
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder = (_216 * _444) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1 = _216;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2 = (_216 * _448) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3 = (_216 * _446) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_5_ladder_6_ladder = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_1 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_2 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_3 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3;
                }
                frontier_phi_3_4_ladder_5_ladder = frontier_phi_3_4_ladder_5_ladder_6_ladder;
                frontier_phi_3_4_ladder_5_ladder_1 = frontier_phi_3_4_ladder_5_ladder_6_ladder_1;
                frontier_phi_3_4_ladder_5_ladder_2 = frontier_phi_3_4_ladder_5_ladder_6_ladder_2;
                frontier_phi_3_4_ladder_5_ladder_3 = frontier_phi_3_4_ladder_5_ladder_6_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_5_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_5_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_5_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_5_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _209 = frontier_phi_3_4_ladder;
        _211 = frontier_phi_3_4_ladder_3;
        _213 = frontier_phi_3_4_ladder_2;
        _215 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _209;
    SV_Target.y = _211;
    SV_Target.z = _213;
    SV_Target.w = _215;
}


