#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[22];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _94 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _95 = _94 * NORMAL.x;
    float _96 = _94 * NORMAL.y;
    float _97 = _94 * NORMAL.z;
    float _102;
    float _103;
    float _104;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _102 = (-0.0) - _95;
        _103 = (-0.0) - _96;
        _104 = (-0.0) - _97;
    }
    else
    {
        _102 = _95;
        _103 = _96;
        _104 = _97;
    }
    float _149 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _159 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _149);
    float _160 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _149);
    float _161 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _149);
    float _171 = sqrt(((_159 * _159) + (_160 * _160)) + (_161 * _161));
    float _177 = cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].w;
    float _190 = (cbMtdParam._m0[14u].w + ((_171 - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _177 : (isnan(_177) ? 0.0 : max(_177, 0.0))))) * cbMtdParam._m0[14u].x;
    float _804 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _195 = ((isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0))) * (cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].x)) + cbMtdParam._m0[11u].x;
    float _815 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _196 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
    float _210 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _243 = (cbMatDynParam._m0[5u].x * _171) + cbMatDynParam._m0[5u].y;
        float _826 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
        float _244 = isnan(1.0) ? _826 : (isnan(_826) ? 1.0 : min(_826, 1.0));
        float _248 = (cbMatDynParam._m0[5u].z * _171) + cbMatDynParam._m0[5u].w;
        float _837 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _837 : (isnan(_837) ? 1.0 : min(_837, 1.0))) - _244)) + _244) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _220 = POSITION_1.x / POSITION_1.w;
    float _221 = POSITION_1.y / POSITION_1.w;
    float _225 = (_220 * 0.5) + 0.5;
    float _226 = 0.5 - (_221 * 0.5);
    float _261;
    float _263;
    float _265;
    float _267;
    if (_196 < cbPerScene._m0[22u].z)
    {
        _261 = 0.0;
        _263 = 0.0;
        _265 = 0.0;
        _267 = 0.0;
    }
    else
    {
        float _273 = 1.0 / _210;
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        float frontier_phi_5_6_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _273))
        {
            float _299 = fma(_104, cbPerScene._m0[8u].z, fma(_103, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _102));
            float _302 = fma(_104, cbPerScene._m0[9u].z, fma(_103, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _102));
            float _305 = fma(_104, cbPerScene._m0[10u].z, fma(_103, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _102));
            float _312 = (_220 * _210) * cbPerScene._m0[28u].x;
            float _314 = (_221 * _210) * cbPerScene._m0[28u].y;
            float _318 = inversesqrt(dot(vec3(_312, _314, _210), vec3(_312, _314, _210)));
            float _319 = _312 * _318;
            float _320 = _314 * _318;
            float _321 = _318 * _210;
            float _325 = dot(vec3(_319, _320, _321), vec3(_299, _302, _305)) * 2.0;
            float _330 = _319 - (_325 * _299);
            float _331 = _320 - (_325 * _302);
            float _332 = _321 - (_325 * _305);
            float _336 = inversesqrt(dot(vec3(_330, _331, _332), vec3(_330, _331, _332)));
            float _339 = _332 * _336;
            float frontier_phi_5_6_ladder_8_ladder;
            float frontier_phi_5_6_ladder_8_ladder_1;
            float frontier_phi_5_6_ladder_8_ladder_2;
            float frontier_phi_5_6_ladder_8_ladder_3;
            if (_339 < cbPerScene._m0[16u].x)
            {
                frontier_phi_5_6_ladder_8_ladder = 0.0;
                frontier_phi_5_6_ladder_8_ladder_1 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_2 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_3 = 0.0;
            }
            else
            {
                float _351 = abs(dot(vec3((-0.0) - _319, (-0.0) - _320, (-0.0) - _321), vec3(_299, _302, _305)));
                float _848 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
                float _362 = (((_196 * _196) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _848 : (isnan(_848) ? 1.0 : min(_848, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _371 = (cbPerScene._m0[29u].x * (1.0 - _196)) + cbPerScene._m0[29u].y;
                float _859 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
                float _380 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _859 : (isnan(_859) ? 1.0 : min(_859, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
                if (_362 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = 0.0;
                }
                else
                {
                    float _383 = _339 - cbPerScene._m0[16u].x;
                    float _870 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
                    float _384 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
                    float _385 = _384 * _384;
                    float _387 = (_362 - cbPerScene._m0[22u].x) * 10.0;
                    float _881 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
                    float _389 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
                    float _390 = isnan(_389) ? _385 : (isnan(_385) ? _389 : min(_385, _389));
                    float _394 = (cbPerScene._m0[21u].x - _210) * cbPerScene._m0[21u].z;
                    float _897 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
                    float _395 = isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0));
                    float _396 = isnan(_395) ? _390 : (isnan(_390) ? _395 : min(_390, _395));
                    float _397 = (_330 * _336) + _312;
                    float _398 = (_331 * _336) + _314;
                    float _399 = _339 + _210;
                    float _431 = fma(_399, cbPerScene._m0[7u].z, fma(_398, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _397)) + cbPerScene._m0[7u].w;
                    float _435 = ((fma(_399, cbPerScene._m0[4u].z, fma(_398, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _397)) + cbPerScene._m0[4u].w) / _431) - _225;
                    float _436 = ((fma(_399, cbPerScene._m0[5u].z, fma(_398, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _397)) + cbPerScene._m0[5u].w) / _431) - _226;
                    float _443 = cbPerScene._m0[18u].x * _435;
                    float _444 = cbPerScene._m0[18u].y * _436;
                    float _449 = sqrt((_443 * _443) + (_444 * _444)) + 9.9999997473787516355514526367188e-06;
                    float _454 = (_435 / _449) * _380;
                    float _455 = (_436 / _449) * _380;
                    float _456 = (((1.0 / _399) - _273) / _449) * _380;
                    float _485 = abs(float(_454 > 0.0) - _225) / (abs(_454) + 1.0000000116860974230803549289703e-07);
                    float _486 = abs(float(_455 > 0.0) - _226) / (abs(_455) + 1.0000000116860974230803549289703e-07);
                    float _488 = (abs(((_456 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _273) / (abs(_456) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _489 = isnan(_486) ? _485 : (isnan(_485) ? _486 : min(_485, _486));
                    float _490 = isnan(_488) ? _489 : (isnan(_489) ? _488 : min(_489, _488));
                    uint _493 = uint(int(isnan(cbPerScene._m0[23u].y) ? _490 : (isnan(_490) ? cbPerScene._m0[23u].y : min(_490, cbPerScene._m0[23u].y))));
                    float _268;
                    float _498;
                    float _500;
                    float _502;
                    if (int(_493) > int(0u))
                    {
                        float _495 = _456 + _273;
                        float _496 = _455 + _226;
                        float _497 = _454 + _225;
                        float _499;
                        float _501;
                        float _503;
                        float _504;
                        uint _515;
                        float _517;
                        float _519;
                        float _521;
                        float _523;
                        float _525;
                        float _527;
                        float _529;
                        uint _531;
                        float _533;
                        float _535;
                        float _537;
                        float _510 = 0.0;
                        float _511 = 0.0;
                        float _512 = 0.0;
                        float _513 = 0.0;
                        uint _514 = 0u;
                        float _516 = _273;
                        float _518 = _497;
                        float _520 = _496;
                        float _522 = _495;
                        float _524 = _225;
                        float _526 = _226;
                        float _528 = _273;
                        uint _530 = 1u;
                        float _532 = 0.0;
                        float _534 = 0.0;
                        float _536 = 0.0;
                        float _548;
                        float _554;
                        float _555;
                        float _556;
                        float _557;
                        float _558;
                        float _559;
                        uint _560;
                        float _561;
                        bool _568;
                        for (;;)
                        {
                            _548 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _518, cbSceneParam._m0[86u].y * _520), 0.0).x;
                            bool _553 = _514 == (_493 + 4294967295u);
                            _554 = _553 ? _532 : _518;
                            _555 = _553 ? _534 : _520;
                            _556 = _553 ? _536 : _522;
                            _557 = _553 ? _532 : _524;
                            _558 = _553 ? _534 : _526;
                            _559 = _553 ? _536 : _528;
                            _560 = _553 ? 1u : _530;
                            _561 = _553 ? (-1.0) : (_522 - _548);
                            _568 = (_560 != 0u) && ((_561 <= 0.0) && ((_553 ? (-1.0) : (_548 - (_516 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_19_pred;
                            float frontier_phi_19_pred_1;
                            float frontier_phi_19_pred_2;
                            float frontier_phi_19_pred_3;
                            float frontier_phi_19_pred_4;
                            float frontier_phi_19_pred_5;
                            float frontier_phi_19_pred_6;
                            uint frontier_phi_19_pred_7;
                            float frontier_phi_19_pred_8;
                            float frontier_phi_19_pred_9;
                            float frontier_phi_19_pred_10;
                            float frontier_phi_19_pred_11;
                            float frontier_phi_19_pred_12;
                            float frontier_phi_19_pred_13;
                            float frontier_phi_19_pred_14;
                            uint frontier_phi_19_pred_15;
                            if (_568)
                            {
                                uint _578 = uint(int(log2(_380) + 0.999000012874603271484375));
                                float _589;
                                float _591;
                                float _593;
                                float _595;
                                float _597;
                                float _599;
                                float _601;
                                if (int(_578) > int(0u))
                                {
                                    uint _700;
                                    float _702;
                                    float _703;
                                    float _704;
                                    float _705;
                                    float _706;
                                    float _707;
                                    float _708;
                                    _700 = 0u;
                                    _702 = _554;
                                    _703 = _555;
                                    _704 = _556;
                                    _705 = _557;
                                    _706 = _558;
                                    _707 = _559;
                                    _708 = _548;
                                    float _590;
                                    float _592;
                                    float _594;
                                    float _596;
                                    float _598;
                                    float _600;
                                    float _602;
                                    for (;;)
                                    {
                                        float _712 = (_705 + _702) * 0.5;
                                        float _713 = (_706 + _703) * 0.5;
                                        float _714 = (_707 + _704) * 0.5;
                                        vec4 _722 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _712, cbSceneParam._m0[86u].y * _713), 0.0);
                                        float _724 = _722.x;
                                        bool _726 = (_714 - _724) < 0.0;
                                        _590 = _726 ? _712 : _702;
                                        _592 = _726 ? _713 : _703;
                                        _594 = _726 ? _714 : _704;
                                        _596 = _726 ? _705 : _712;
                                        _598 = _726 ? _706 : _713;
                                        _600 = _726 ? _707 : _714;
                                        _602 = _726 ? _724 : _708;
                                        uint _701 = _700 + 1u;
                                        if (_701 == _578)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _700 = _701;
                                            _702 = _590;
                                            _703 = _592;
                                            _704 = _594;
                                            _705 = _596;
                                            _706 = _598;
                                            _707 = _600;
                                            _708 = _602;
                                        }
                                    }
                                    _589 = _590;
                                    _591 = _592;
                                    _593 = _594;
                                    _595 = _596;
                                    _597 = _598;
                                    _599 = _600;
                                    _601 = _602;
                                }
                                else
                                {
                                    _589 = _554;
                                    _591 = _555;
                                    _593 = _556;
                                    _595 = _557;
                                    _597 = _558;
                                    _599 = _559;
                                    _601 = _548;
                                }
                                float _611 = cbPerScene._m0[28u].x * ((_589 * 2.0) + (-1.0));
                                float _612 = cbPerScene._m0[28u].y * (1.0 - (_591 * 2.0));
                                float _645 = fma(_601, cbPerScene._m0[27u].w, fma(_612, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _611) + cbPerScene._m0[27u].z);
                                float _646 = fma(_601, cbPerScene._m0[24u].w, fma(_612, cbPerScene._m0[24u].y, _611 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _645;
                                float _647 = fma(_601, cbPerScene._m0[25u].w, fma(_612, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _611) + cbPerScene._m0[25u].z) / _645;
                                vec4 _656 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _646, cbSceneParam._m0[87u].w * _647), 0.0);
                                float _661 = isnan(_396) ? 1.0 : (isnan(1.0) ? _396 : min(1.0, _396));
                                float _662 = 0.5 - _646;
                                float _663 = 0.5 - _647;
                                float _664 = _662 * 2.0;
                                float _665 = _663 * 2.0;
                                float _666 = _664 * _664;
                                float _667 = _665 * _665;
                                float _933 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
                                float _944 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
                                float _676 = inversesqrt(dot(vec2(_454, _455), vec2(_454, _455)));
                                float _682 = inversesqrt(dot(vec2(_664, _665), vec2(_664, _665)));
                                float _688 = dot(vec2((_662 * (-2.0)) * _682, (_663 * (-2.0)) * _682), vec2(_676 * _454, _676 * _455));
                                float _955 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
                                float _695 = ((1.0 - (isnan(1.0) ? _944 : (isnan(_944) ? 1.0 : min(_944, 1.0)))) * (1.0 - (isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0))))) * (4.0 - ((isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0))) * 2.0));
                                float _966 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
                                float _696 = isnan(1.0) ? _966 : (isnan(_966) ? 1.0 : min(_966, 1.0));
                                float _697 = _696 * _696;
                                frontier_phi_19_pred = _599;
                                frontier_phi_19_pred_1 = _597;
                                frontier_phi_19_pred_2 = _534;
                                frontier_phi_19_pred_3 = _595;
                                frontier_phi_19_pred_4 = _593;
                                frontier_phi_19_pred_5 = _591;
                                frontier_phi_19_pred_6 = _516;
                                frontier_phi_19_pred_7 = _493;
                                frontier_phi_19_pred_8 = isnan(_697) ? _661 : (isnan(_661) ? _697 : min(_661, _697));
                                frontier_phi_19_pred_9 = _656.z;
                                frontier_phi_19_pred_10 = _656.y;
                                frontier_phi_19_pred_11 = _656.x;
                                frontier_phi_19_pred_12 = _589;
                                frontier_phi_19_pred_13 = _536;
                                frontier_phi_19_pred_14 = _532;
                                frontier_phi_19_pred_15 = _560;
                            }
                            else
                            {
                                bool _580 = _561 > 0.0;
                                frontier_phi_19_pred = _556;
                                frontier_phi_19_pred_1 = _555;
                                frontier_phi_19_pred_2 = _580 ? _555 : _534;
                                frontier_phi_19_pred_3 = _554;
                                frontier_phi_19_pred_4 = _556 + _456;
                                frontier_phi_19_pred_5 = _555 + _455;
                                frontier_phi_19_pred_6 = _548;
                                frontier_phi_19_pred_7 = _514 + 1u;
                                frontier_phi_19_pred_8 = _513;
                                frontier_phi_19_pred_9 = _512;
                                frontier_phi_19_pred_10 = _511;
                                frontier_phi_19_pred_11 = _510;
                                frontier_phi_19_pred_12 = _554 + _454;
                                frontier_phi_19_pred_13 = _580 ? _556 : _536;
                                frontier_phi_19_pred_14 = _580 ? _554 : _532;
                                frontier_phi_19_pred_15 = uint(_580);
                            }
                            _529 = frontier_phi_19_pred;
                            _527 = frontier_phi_19_pred_1;
                            _535 = frontier_phi_19_pred_2;
                            _525 = frontier_phi_19_pred_3;
                            _523 = frontier_phi_19_pred_4;
                            _521 = frontier_phi_19_pred_5;
                            _517 = frontier_phi_19_pred_6;
                            _515 = frontier_phi_19_pred_7;
                            _504 = frontier_phi_19_pred_8;
                            _503 = frontier_phi_19_pred_9;
                            _501 = frontier_phi_19_pred_10;
                            _499 = frontier_phi_19_pred_11;
                            _519 = frontier_phi_19_pred_12;
                            _537 = frontier_phi_19_pred_13;
                            _533 = frontier_phi_19_pred_14;
                            _531 = frontier_phi_19_pred_15;
                            if (int(_515) < int(_493))
                            {
                                _510 = _499;
                                _511 = _501;
                                _512 = _503;
                                _513 = _504;
                                _514 = _515;
                                _516 = _517;
                                _518 = _519;
                                _520 = _521;
                                _522 = _523;
                                _524 = _525;
                                _526 = _527;
                                _528 = _529;
                                _530 = _531;
                                _532 = _533;
                                _534 = _535;
                                _536 = _537;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _498 = _499;
                        _500 = _501;
                        _502 = _503;
                        _268 = _504;
                    }
                    else
                    {
                        _498 = 0.0;
                        _500 = 0.0;
                        _502 = 0.0;
                        _268 = 0.0;
                    }
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                    if ((isnan(_498) || isnan(_500)) || isnan(_502))
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = (_268 * _498) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = _268;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = (_268 * _502) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = (_268 * _500) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                }
                frontier_phi_5_6_ladder_8_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder;
                frontier_phi_5_6_ladder_8_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                frontier_phi_5_6_ladder_8_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                frontier_phi_5_6_ladder_8_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_8_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_8_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_8_ladder_2;
            frontier_phi_5_6_ladder_3 = frontier_phi_5_6_ladder_8_ladder_3;
        }
        else
        {
            frontier_phi_5_6_ladder = 0.0;
            frontier_phi_5_6_ladder_1 = 0.0;
            frontier_phi_5_6_ladder_2 = 0.0;
            frontier_phi_5_6_ladder_3 = 0.0;
        }
        _261 = frontier_phi_5_6_ladder;
        _263 = frontier_phi_5_6_ladder_3;
        _265 = frontier_phi_5_6_ladder_2;
        _267 = frontier_phi_5_6_ladder_1;
    }
    SV_Target.x = _261;
    SV_Target.y = _263;
    SV_Target.z = _265;
    SV_Target.w = _267;
    discard_exit();
}


