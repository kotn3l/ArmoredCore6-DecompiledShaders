#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _865;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _231 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _231.x;
    float _235 = _231.y;
    float _236 = _231.z;
    vec4 _252 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _252.x + cbMtdParam._m0[9u].x;
    vec4 _267 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3277 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))));
    vec4 _297 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _307 = fma(_284, _215, fma(_277, _207 * TANGENT.x, (_193 * _186) * _275));
    float _310 = fma(_284, _216, fma(_277, _207 * TANGENT.y, (_193 * _187) * _275));
    float _313 = fma(_284, _217, fma(_277, _207 * TANGENT.z, (_193 * _188) * _275));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3288 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _321 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
    float _3299 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3310 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3321 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3332 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _325 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _433 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _436 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3343 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _3354 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    float _3365 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _464 = 1.0 - _325;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _325;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _325;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _325;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _490 = _487.x * TEXCOORD.z;
    float _491 = dot(vec3(_318, _319, _320), vec3(_400, _401, _402));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _318) - _400;
    float _499 = (_494 * _319) - _401;
    float _500 = (_494 * _320) - _402;
    float _504 = abs(dot(vec3(_400, _401, _402), vec3(_318, _319, _320)));
    float _3376 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_321);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _864;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _589 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _593 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _597 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _622 = _554 + _318;
        float _623 = _558 + _319;
        float _624 = _562 + _320;
        float _634 = fma(_624, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622)) - _589;
        float _635 = fma(_624, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622)) - _593;
        float _636 = fma(_624, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622)) - _597;
        float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
        float _653 = ((_640 * _634) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_589 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_640 * _635) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_593 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_640 * _636) / cbModelParam._m0[34u].z) + ((((((_597 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        float _692 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_658.x + (-0.5));
        float _694 = _692 * (_658.y + (-0.5));
        float _695 = _692 * (_658.z + (-0.5));
        float _702 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_665.x + (-0.5));
        float _704 = _702 * (_665.y + (-0.5));
        float _705 = _702 * (_665.z + (-0.5));
        float _712 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_672.x + (-0.5));
        float _714 = _712 * (_672.y + (-0.5));
        float _715 = _712 * (_672.z + (-0.5));
        float _722 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_679.x + (-0.5));
        float _724 = _722 * (_679.y + (-0.5));
        float _725 = _722 * (_679.z + (-0.5));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = _693 * 0.5;
        float _730 = _703 * 0.5;
        float _731 = _713 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _746 = (dot(vec3(_318, _319, _320), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3402 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _756 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3413 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3424 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * (_758 + 1.0))) + _763) * _726;
        float _773 = _694 * 0.5;
        float _774 = _704 * 0.5;
        float _775 = _714 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_318, _319, _320), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3457 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_800 + 1.0))) + _805) * _727;
        float _815 = _695 * 0.5;
        float _816 = _705 * 0.5;
        float _817 = _715 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_318, _319, _320), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3490 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_842 + 1.0))) + _847) * _728;
        _864 = _695;
        _866 = _694;
        _867 = _693;
        _868 = _705;
        _869 = _704;
        _870 = _703;
        _871 = _715;
        _872 = _714;
        _873 = _713;
        _874 = _728;
        _875 = _727;
        _876 = _726;
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
    }
    else
    {
        _864 = _865;
        _866 = _865;
        _867 = _865;
        _868 = _865;
        _869 = _865;
        _870 = _865;
        _871 = _865;
        _872 = _865;
        _873 = _865;
        _874 = _865;
        _875 = _865;
        _876 = _865;
        _877 = 0.0;
        _878 = 0.0;
        _879 = 0.0;
    }
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _905 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _909 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _913 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _936 = _554 + _318;
        float _937 = _558 + _319;
        float _938 = _562 + _320;
        float _948 = fma(_938, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_905 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_909 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[35u].z) + ((((((_913 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1004 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_971.x + (-0.5));
        float _1006 = _1004 * (_971.y + (-0.5));
        float _1007 = _1004 * (_971.z + (-0.5));
        float _1014 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_978.x + (-0.5));
        float _1016 = _1014 * (_978.y + (-0.5));
        float _1017 = _1014 * (_978.z + (-0.5));
        float _1024 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_985.x + (-0.5));
        float _1026 = _1024 * (_985.y + (-0.5));
        float _1027 = _1024 * (_985.z + (-0.5));
        float _1034 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_992.x + (-0.5));
        float _1036 = _1034 * (_992.y + (-0.5));
        float _1037 = _1034 * (_992.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_318, _319, _320), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3553 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_1068 + 1.0))) + _1073) * _1038;
        float _1083 = _1006 * 0.5;
        float _1084 = _1016 * 0.5;
        float _1085 = _1026 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_318, _319, _320), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3586 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1110 + 1.0))) + _1115) * _1039;
        float _1125 = _1007 * 0.5;
        float _1126 = _1017 * 0.5;
        float _1127 = _1027 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_318, _319, _320), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3619 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1152 + 1.0))) + _1157) * _1040;
        _1174 = _1007;
        _1175 = _1006;
        _1176 = _1005;
        _1177 = _1017;
        _1178 = _1016;
        _1179 = _1015;
        _1180 = _1027;
        _1181 = _1026;
        _1182 = _1025;
        _1183 = _1040;
        _1184 = _1039;
        _1185 = _1038;
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _865;
        _1175 = _865;
        _1176 = _865;
        _1177 = _865;
        _1178 = _865;
        _1179 = _865;
        _1180 = _865;
        _1181 = _865;
        _1182 = _865;
        _1183 = _865;
        _1184 = _865;
        _1185 = _865;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1221 = fma(_1200, cbSceneParam._m0[89u].z, fma(_1199, cbSceneParam._m0[89u].y, _1198 * cbSceneParam._m0[89u].x));
    float _1224 = fma(_1200, cbSceneParam._m0[90u].z, fma(_1199, cbSceneParam._m0[90u].y, _1198 * cbSceneParam._m0[90u].x));
    float _1227 = fma(_1200, cbSceneParam._m0[91u].z, fma(_1199, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1198));
    float _1242 = _498 * 0.5;
    float _1243 = _499 * 0.5;
    float _1244 = _500 * 0.5;
    float _1245 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1248 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1251 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1285;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1258 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_864, _868, _871, _874));
        float _1262 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_866, _869, _872, _875));
        float _1266 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_867, _870, _873, _876));
        float _1273 = dot(vec4(cbModelParam._m0[39u]), vec4(_1242, _1243, _1244, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1296;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1287 = dot(vec4(cbModelParam._m0[40u]), vec4(_1242, _1243, _1244, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1300 = (_1296 * cbModelParam._m0[1u].x) + (_1285 * (1.0 - cbModelParam._m0[1u].x));
    float _1310 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _321);
    float _1311 = isnan(_1310) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1310 : min(cbModelParam._m0[25u].z, _1310));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1360 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1364 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1368 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1371 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1374 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1377 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1405;
        if (_1371 > 0.0)
        {
            _1405 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1405 = frontier_phi_16_14_ladder;
        }
        float _1613;
        if (_1374 > 0.0)
        {
            _1613 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1613 = frontier_phi_25_21_ladder;
        }
        float _1867;
        if (_1377 > 0.0)
        {
            _1867 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1867 = frontier_phi_37_32_ladder;
        }
        float _1869 = isnan(_1613) ? _1405 : (isnan(_1405) ? _1613 : min(_1405, _1613));
        float _1870 = isnan(_1867) ? _1869 : (isnan(_1869) ? _1867 : min(_1869, _1867));
        float _1874 = (_1870 * _1371) + _1360;
        float _1875 = (_1870 * _1374) + _1364;
        float _1876 = (_1870 * _1377) + _1368;
        float _1877 = _1870 * 9.9999997473787516355514526367188e-05;
        float _1879 = (-1.0) - _1877;
        float _1881 = _1877 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1876 > _1881) || ((_1876 < _1879) || ((_1875 > _1881) || ((_1875 < _1879) || ((_1874 < _1879) || (_1874 > _1881))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1876, cbModelParam._m0[9u].z, fma(_1875, cbModelParam._m0[9u].y, _1874 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1876, cbModelParam._m0[10u].z, fma(_1875, cbModelParam._m0[10u].y, _1874 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1876, cbModelParam._m0[11u].z, fma(_1875, cbModelParam._m0[11u].y, _1874 * cbModelParam._m0[11u].x))), _1311);
            frontier_phi_15_37_ladder = _2004.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2004.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2004.x * cbModelParam._m0[1u].y;
        }
        _1393 = frontier_phi_15_37_ladder_2;
        _1395 = frontier_phi_15_37_ladder_1;
        _1397 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1311);
        _1393 = _1381.x * cbModelParam._m0[1u].y;
        _1395 = _1381.y * cbModelParam._m0[1u].y;
        _1397 = _1381.z * cbModelParam._m0[1u].y;
    }
    float _1401 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _321);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1401 : min(cbModelParam._m0[25u].w, _1401));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1459 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1463 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1467 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1470 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1473 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1476 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1618;
        if (_1470 > 0.0)
        {
            _1618 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1618 = frontier_phi_27_23_ladder;
        }
        float _1894;
        if (_1473 > 0.0)
        {
            _1894 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1894 = frontier_phi_39_34_ladder;
        }
        float _2107;
        if (_1476 > 0.0)
        {
            _2107 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2107 = frontier_phi_48_45_ladder;
        }
        float _2109 = isnan(_1894) ? _1618 : (isnan(_1618) ? _1894 : min(_1618, _1894));
        float _2110 = isnan(_2107) ? _2109 : (isnan(_2109) ? _2107 : min(_2109, _2107));
        float _2114 = (_2110 * _1470) + _1459;
        float _2115 = (_2110 * _1473) + _1463;
        float _2116 = (_2110 * _1476) + _1467;
        float _2117 = _2110 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2117;
        float _2120 = _2117 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2116 > _2120) || ((_2116 < _2118) || ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 < _2118) || (_2114 > _2120))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2116, cbModelParam._m0[17u].z, fma(_2115, cbModelParam._m0[17u].y, _2114 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2116, cbModelParam._m0[18u].z, fma(_2115, cbModelParam._m0[18u].y, _2114 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2116, cbModelParam._m0[19u].z, fma(_2115, cbModelParam._m0[19u].y, _2114 * cbModelParam._m0[19u].x))), _1402);
            frontier_phi_24_48_ladder = _2343.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2343.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2343.x * cbModelParam._m0[1u].z;
        }
        _1495 = frontier_phi_24_48_ladder_2;
        _1497 = frontier_phi_24_48_ladder_1;
        _1499 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1402);
        _1495 = _1479.x * cbModelParam._m0[1u].z;
        _1497 = _1479.y * cbModelParam._m0[1u].z;
        _1499 = _1479.z * cbModelParam._m0[1u].z;
    }
    float _1512 = (((_525 * _475) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_525 * _478) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, _1512 * cbSceneParam._m0[91u].x));
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _490 + (-1.0);
    float _1550 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1551 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1554 = _1537 + 5u;
    float _1560 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1564 = _1537 + 4u;
    float _1571 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1575 = _1537 | 1u;
    float _1586 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_318, _319, _320));
    float _1589 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_318, _319, _320));
    float _3755 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _3766 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1594 = (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.3183098733425140380859375;
    float _1596 = (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * 0.3183098733425140380859375;
    float _1603 = ((cbLight._m0[_1554].x * _1560) * _1596) + ((cbLight._m0[_1564].x * _1571) * _1594);
    float _1604 = ((_1560 * cbLight._m0[_1554].y) * _1596) + ((_1571 * cbLight._m0[_1564].y) * _1594);
    float _1605 = ((_1560 * cbLight._m0[_1554].z) * _1596) + ((_1571 * cbLight._m0[_1564].z) * _1594);
    uvec4 _1610 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1612 = _1610.x == 0u;
    float _1623;
    float _1625;
    float _1627;
    if (_1612)
    {
        _1623 = _1603;
        _1625 = _1604;
        _1627 = _1605;
    }
    else
    {
        uint _1631 = _1537 + 6u;
        float _1647 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1648 = _1647 * _1647;
        float _3777 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1650 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1623 = (((cbLight._m0[_1631].x * 0.3183098733425140380859375) * _1649) * _1650) + _1603;
        _1625 = (((cbLight._m0[_1631].y * 0.3183098733425140380859375) * _1649) * _1650) + _1604;
        _1627 = (((cbLight._m0[_1631].z * 0.3183098733425140380859375) * _1649) * _1650) + _1605;
    }
    bool _1630 = _1610.y == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1630)
    {
        _1668 = _1623;
        _1670 = _1625;
        _1672 = _1627;
    }
    else
    {
        uint _1838 = _1537 + 7u;
        float _1854 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3793 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1857 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1668 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1623;
        _1670 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1625;
        _1672 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1627;
    }
    uint _1675 = _1537 + 8u;
    float _1688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1537].w)) * _321) * 0.949999988079071044921875);
    float _1689 = _1688 * _1688;
    float _1690 = cbLight._m0[_1537].x + _400;
    float _1691 = cbLight._m0[_1537].y + _401;
    float _1692 = cbLight._m0[_1537].z + _402;
    float _1696 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
    float _1697 = _1696 * _1690;
    float _1698 = _1696 * _1691;
    float _1699 = _1696 * _1692;
    float _1700 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1537].xyz));
    float _3809 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _1704 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1705 = dot(vec3(_318, _319, _320), vec3(_1697, _1698, _1699));
    float _3831 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _1709 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1697, _1698, _1699));
    float _3842 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1713 = _1689 * _1689;
    float _1717 = ((_1708 * _1708) * (_1713 + (-1.0))) + 1.0;
    float _1725 = exp2(log2(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * 5.0);
    float _1726 = 0.959999978542327880859375 - _472;
    float _1728 = 0.959999978542327880859375 - _473;
    float _1729 = 0.959999978542327880859375 - _474;
    float _1736 = 1.0 - _1689;
    float _1747 = (0.5 / (((_1704 * ((_1703 * _1736) + _1689)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1736) + _1689) * _1703))) * _1703;
    float _3853 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1749 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1713 / ((_1717 * _1717) * 3.141590118408203125));
    uint _1760 = _1537 + 9u;
    float _1771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _321) * 0.949999988079071044921875);
    float _1772 = _1771 * _1771;
    float _1773 = cbLight._m0[_1575].x + _400;
    float _1774 = cbLight._m0[_1575].y + _401;
    float _1775 = cbLight._m0[_1575].z + _402;
    float _1779 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
    float _1780 = _1779 * _1773;
    float _1781 = _1779 * _1774;
    float _1782 = _1779 * _1775;
    float _1783 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1575].xyz));
    float _3864 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1787 = dot(vec3(_318, _319, _320), vec3(_1780, _1781, _1782));
    float _3875 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _1791 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1780, _1781, _1782));
    float _3886 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1795 = _1772 * _1772;
    float _1799 = ((_1790 * _1790) * (_1795 + (-1.0))) + 1.0;
    float _1806 = exp2(log2(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * 5.0);
    float _1813 = 1.0 - _1772;
    float _1823 = (0.5 / (((_1704 * ((_1786 * _1813) + _1772)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1813) + _1772) * _1786))) * _1786;
    float _3897 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1825 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1795 / ((_1799 * _1799) * 3.141590118408203125));
    float _1835 = (((((_1806 * _1726) + _475) * cbLight._m0[_1760].x) * _1825) * _1560) + (((((_1725 * _1726) + _475) * cbLight._m0[_1675].x) * _1749) * _1571);
    float _1836 = (((((_1806 * _1728) + _477) * cbLight._m0[_1760].y) * _1825) * _1560) + (((((_1725 * _1728) + _477) * cbLight._m0[_1675].y) * _1749) * _1571);
    float _1837 = (((((_1806 * _1729) + _478) * cbLight._m0[_1760].z) * _1825) * _1560) + (((((_1725 * _1729) + _478) * cbLight._m0[_1675].z) * _1749) * _1571);
    float _1899;
    float _1901;
    float _1903;
    if (_1612)
    {
        _1899 = _1835;
        _1901 = _1836;
        _1903 = _1837;
    }
    else
    {
        uint _1905 = _1537 + 2u;
        uint _1909 = _1537 + 10u;
        float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _321) * 0.949999988079071044921875);
        float _1924 = _1923 * _1923;
        float _1925 = cbLight._m0[_1905].x + _400;
        float _1926 = cbLight._m0[_1905].y + _401;
        float _1927 = cbLight._m0[_1905].z + _402;
        float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
        float _1932 = _1931 * _1925;
        float _1933 = _1931 * _1926;
        float _1934 = _1931 * _1927;
        float _1935 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1905].xyz));
        float _3908 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1938 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1939 = dot(vec3(_318, _319, _320), vec3(_1932, _1933, _1934));
        float _3919 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1943 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_1932, _1933, _1934));
        float _3930 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1947 = _1924 * _1924;
        float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
        float _1958 = exp2(log2(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * 5.0);
        float _1965 = 1.0 - _1924;
        float _1975 = (0.5 / (((_1704 * ((_1938 * _1965) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1965) + _1924) * _1938))) * _1938;
        float _3941 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1977 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
        float _1978 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1899 = (((((_1958 * _1726) + _475) * cbLight._m0[_1909].x) * _1977) * _1978) + _1835;
        _1901 = (((((_1958 * _1728) + _477) * cbLight._m0[_1909].y) * _1977) * _1978) + _1836;
        _1903 = (((((_1958 * _1729) + _478) * cbLight._m0[_1909].z) * _1977) * _1978) + _1837;
    }
    float _2013;
    float _2015;
    float _2017;
    if (_1630)
    {
        _2013 = _1899;
        _2015 = _1901;
        _2017 = _1903;
    }
    else
    {
        uint _2024 = _1537 + 3u;
        uint _2028 = _1537 + 11u;
        float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _321) * 0.949999988079071044921875);
        float _2043 = _2042 * _2042;
        float _2044 = cbLight._m0[_2024].x + _400;
        float _2045 = cbLight._m0[_2024].y + _401;
        float _2046 = cbLight._m0[_2024].z + _402;
        float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
        float _2051 = _2050 * _2044;
        float _2052 = _2050 * _2045;
        float _2053 = _2050 * _2046;
        float _2054 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2024].xyz));
        float _3957 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _2058 = dot(vec3(_318, _319, _320), vec3(_2051, _2052, _2053));
        float _3968 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2062 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2051, _2052, _2053));
        float _3979 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2066 = _2043 * _2043;
        float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
        float _2077 = exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0);
        float _2084 = 1.0 - _2043;
        float _2094 = (0.5 / (((_1704 * ((_2057 * _2084) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _2084) + _2043) * _2057))) * _2057;
        float _3990 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _2013 = (((((_2077 * _1726) + _475) * cbLight._m0[_2028].x) * _2096) * _2097) + _1899;
        _2015 = (((((_2077 * _1728) + _477) * cbLight._m0[_2028].y) * _2096) * _2097) + _1901;
        _2017 = (((((_2077 * _1729) + _478) * cbLight._m0[_2028].z) * _2096) * _2097) + _1903;
    }
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    if (_1535.y == 0u)
    {
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2172;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2172;
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2172;
        uvec4 _2187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2188 = _2187.x;
        uint _2199 = uint((float(_2187.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2188))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2188)));
        float _2209 = (log2(_2175 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2210 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        uint _2213 = uint(isnan(14.0) ? _2210 : (isnan(_2210) ? 14.0 : min(_2210, 14.0)));
        uvec4 _2218 = texelFetch(g_lightClusterGridBuffer, int(((_2213 << 2u) + (_2199 << 6u)) >> 2u));
        uint _2219 = _2218.x;
        uint _2220 = _2187.z;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        if (((((1u << ((_2220 >> 4u) & 15u)) + 4294967295u) & _2219) == 0u) || ((_2220 & 240u) == 0u))
        {
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
        }
        else
        {
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            uint _2544 = 0u;
            uint _2553;
            bool _2554;
            for (;;)
            {
                _2553 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2544 << 2u)) >> 2u)).x;
                _2554 = _2553 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2554)
                {
                    frontier_phi_63_pred = _2543;
                    frontier_phi_63_pred_1 = _2542;
                    frontier_phi_63_pred_2 = _2541;
                    frontier_phi_63_pred_3 = _2540;
                    frontier_phi_63_pred_4 = _2539;
                    frontier_phi_63_pred_5 = _2538;
                }
                else
                {
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    uint _2668;
                    _2662 = _2538;
                    _2663 = _2539;
                    _2664 = _2540;
                    _2665 = _2541;
                    _2666 = _2542;
                    _2667 = _2543;
                    _2668 = _2553;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    for (;;)
                    {
                        uint _2672 = uint(findLSB(_2668)) + (_2544 << 5u);
                        uint _2669 = (_2668 + 4294967295u) & _2668;
                        uint _2674 = _2672 * 48u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2694 = (_2672 * 48u) + 4u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 3u)).x));
                        uint _2713 = (_2672 * 48u) + 8u;
                        vec3 _2724 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x));
                        float _2728 = _2688.x - _2173;
                        float _2729 = _2688.y - _2174;
                        float _2730 = _2688.z - _2175;
                        float _2731 = dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730));
                        float _2734 = inversesqrt(_2731);
                        float _2735 = _2734 * _2728;
                        float _2736 = _2734 * _2729;
                        float _2737 = _2734 * _2730;
                        float _2738 = dot(vec3(_430, _433, _436), vec3(_2735, _2736, _2737));
                        float _2743 = 1.0 - (_2731 * _2688.w);
                        float _4016 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2744 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2745 = sqrt(_2731) * _2707.w;
                        float _2748 = 1.39999997615814208984375 / (_2745 + 1.39999997615814208984375);
                        float _2749 = _2748 * _2748;
                        float _2752 = ((1.0 - _2749) * _2738) + _2749;
                        float _2755 = _2745 * _2745;
                        float _2759 = ((isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))) * _2744) / ((_2755 * 0.699999988079071044921875) + 1.0);
                        float _2763 = (-0.0) - _2173;
                        float _2764 = (-0.0) - _2174;
                        float _2765 = (-0.0) - _2175;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2770 = _2769 * _2763;
                        float _2771 = _2769 * _2764;
                        float _2772 = _2769 * _2765;
                        float _2780 = exp2(log2(1.0 / ((_2755 * 3.5) + 5.0)) * 0.25);
                        float _2781 = 1.0 - _506;
                        float _2788 = sqrt(1.0 - ((1.0 - (_2781 * _2781)) * (1.0 - (_2780 * _2780))));
                        float _2789 = _2788 * _2788;
                        float _2790 = _2789 * _2789;
                        float _2791 = _2770 + _2735;
                        float _2792 = _2771 + _2736;
                        float _2793 = _2772 + _2737;
                        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
                        float _2801 = dot(vec3(_430, _433, _436), vec3(_2770, _2771, _2772));
                        float _4032 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2804 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2805 = dot(vec3(_430, _433, _436), vec3(_2797 * _2791, _2797 * _2792, _2797 * _2793));
                        float _4043 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2808 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                        float _2812 = ((_2808 * _2808) * (_2790 + (-1.0))) + 1.0;
                        float _2813 = _2748 * _2789;
                        float _2814 = _2813 * _2813;
                        float _2817 = ((1.0 - _2814) * _2738) + _2814;
                        float _4054 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2818 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2819 = 1.0 - _2789;
                        float _2829 = (0.5 / (((_2818 * ((_2804 * _2819) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2818 * _2819) + _2789) * _2804))) * _2818;
                        float _4065 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2840 = (((_2790 * 3.1415927410125732421875) * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) / ((_2812 * _2812) * ((_2755 * 2.1991131305694580078125) + 3.141590118408203125))) * _2744;
                        _2597 = (_2759 * _2707.x) + _2665;
                        _2598 = (_2759 * _2707.y) + _2666;
                        _2599 = (_2759 * _2707.z) + _2667;
                        _2594 = (_2840 * _2724.x) + _2662;
                        _2595 = (_2840 * _2724.y) + _2663;
                        _2596 = (_2840 * _2724.z) + _2664;
                        if (_2669 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2598;
                            _2667 = _2599;
                            _2668 = _2669;
                        }
                    }
                    frontier_phi_63_pred = _2599;
                    frontier_phi_63_pred_1 = _2598;
                    frontier_phi_63_pred_2 = _2597;
                    frontier_phi_63_pred_3 = _2596;
                    frontier_phi_63_pred_4 = _2595;
                    frontier_phi_63_pred_5 = _2594;
                }
                _2359 = frontier_phi_63_pred;
                _2357 = frontier_phi_63_pred_1;
                _2355 = frontier_phi_63_pred_2;
                _2353 = frontier_phi_63_pred_3;
                _2351 = frontier_phi_63_pred_4;
                _2349 = frontier_phi_63_pred_5;
                uint _2545 = _2544 + 1u;
                if (_2545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2538 = _2349;
                    _2539 = _2351;
                    _2540 = _2353;
                    _2541 = _2355;
                    _2542 = _2357;
                    _2543 = _2359;
                    _2544 = _2545;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
        }
        uvec4 _2362 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2363 = _2362.z;
        uint _2365 = (_2363 >> 8u) & 15u;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        if (((4294967295u << _2365) & _2219) == 0u)
        {
            _2506 = _2348;
            _2508 = _2350;
            _2510 = _2352;
            _2512 = _2354;
            _2514 = _2356;
            _2516 = _2358;
        }
        else
        {
            float _2531 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
            float _2532 = _2531 * _2173;
            float _2533 = _2531 * _2174;
            float _2534 = _2531 * _2175;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2365 < ((_2363 >> 12u) & 15u))
            {
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2645 = _2348;
                float _2646 = _2350;
                float _2647 = _2352;
                float _2648 = _2354;
                float _2649 = _2356;
                float _2650 = _2358;
                uint _2651 = _2365;
                uint _2660;
                bool _2661;
                for (;;)
                {
                    _2660 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2651 << 2u)) >> 2u)).x;
                    _2661 = _2660 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2661)
                    {
                        frontier_phi_69_pred = _2650;
                        frontier_phi_69_pred_1 = _2649;
                        frontier_phi_69_pred_2 = _2648;
                        frontier_phi_69_pred_3 = _2647;
                        frontier_phi_69_pred_4 = _2646;
                        frontier_phi_69_pred_5 = _2645;
                    }
                    else
                    {
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _2858 = _2645;
                        float _2859 = _2646;
                        float _2860 = _2647;
                        float _2861 = _2648;
                        float _2862 = _2649;
                        float _2863 = _2650;
                        uint _2864 = _2660;
                        uint _2865;
                        vec4 _2890;
                        float _2891;
                        vec4 _2906;
                        vec3 _2918;
                        vec4 _2934;
                        vec4 _2950;
                        float _2997;
                        bool _2998;
                        for (;;)
                        {
                            uint _2875 = ((_2651 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2864));
                            _2865 = (_2864 + 4294967295u) & _2864;
                            uint _2877 = _2875 * 40u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            _2891 = _2890.w;
                            uint _2893 = (_2875 * 40u) + 4u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2908 = (_2875 * 40u) + 8u;
                            _2918 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x));
                            uint _2921 = (_2875 * 40u) + 16u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2937 = (_2875 * 40u) + 20u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2953 = (_2875 * 40u) + 24u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2972 = (_2875 * 40u) + 28u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2997 = fma(_2175, _2985.z, fma(_2174, _2985.y, _2985.x * _2173)) + _2985.w;
                            _2998 = !((fma(_2175, _2966.z, fma(_2174, _2966.y, _2966.x * _2173)) + _2966.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2998)
                            {
                                float _3025 = _2890.x - _2173;
                                float _3026 = _2890.y - _2174;
                                float _3027 = _2890.z - _2175;
                                float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                                float _3031 = inversesqrt(_3028);
                                float _3032 = _3031 * _3025;
                                float _3033 = _3031 * _3026;
                                float _3034 = _3031 * _3027;
                                float _3038 = 1.0 - (_3028 / (_2891 * _2891));
                                float _4076 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3043 = sqrt(_3028) * _2906.w;
                                float _3045 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                                float _3046 = _3045 * _3045;
                                float _3049 = ((1.0 - _3046) * dot(vec3(_3032, _3033, _3034), vec3(_430, _433, _436))) + _3046;
                                float _3052 = _3043 * _3043;
                                float _3056 = (fma(_2175, _2934.z, fma(_2174, _2934.y, _2934.x * _2173)) + _2934.w) / _2997;
                                float _3057 = (fma(_2175, _2950.z, fma(_2174, _2950.y, _2950.x * _2173)) + _2950.w) / _2997;
                                float _3061 = 1.0 - dot(vec2(_3056, _3057), vec2(_3056, _3057));
                                float _4092 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3063 = _3062 * (((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3039) / ((_3052 * 0.699999988079071044921875) + 1.0));
                                float _3075 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                                float _3076 = 1.0 - _506;
                                float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                                float _3084 = _3083 * _3083;
                                float _3085 = _3084 * _3084;
                                float _3086 = _3032 - _2532;
                                float _3087 = _3033 - _2533;
                                float _3088 = _3034 - _2534;
                                float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                                float _3096 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2532, (-0.0) - _2533, (-0.0) - _2534));
                                float _4103 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3100 = dot(vec3(_430, _433, _436), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                                float _4114 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3103 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                                float _3108 = _3045 * _3084;
                                float _3109 = _3108 * _3108;
                                float _3115 = ((1.0 - _3109) * dot(vec3(_430, _433, _436), vec3(_3032, _3033, _3034))) + _3109;
                                float _4125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3117 = 1.0 - _3084;
                                float _3127 = (0.5 / (((_3116 * ((_3099 * _3117) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3116 * _3117) + _3084) * _3099))) * _3116;
                                float _4136 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3137 = (_3062 * _3039) * (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) / ((_3107 * _3107) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3063 * _2906.z;
                                frontier_phi_75_pred_1 = _3063 * _2906.y;
                                frontier_phi_75_pred_2 = _3063 * _2906.x;
                                frontier_phi_75_pred_3 = _3137 * _2918.z;
                                frontier_phi_75_pred_4 = _3137 * _2918.y;
                                frontier_phi_75_pred_5 = _3137 * _2918.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3146 = frontier_phi_75_pred;
                            _3145 = frontier_phi_75_pred_1;
                            _3144 = frontier_phi_75_pred_2;
                            _3143 = frontier_phi_75_pred_3;
                            _3142 = frontier_phi_75_pred_4;
                            _3141 = frontier_phi_75_pred_5;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            _2845 = _3141 + _2858;
                            _2846 = _3142 + _2859;
                            _2847 = _3143 + _2860;
                            if (_2865 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2865;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2850;
                        frontier_phi_69_pred_1 = _2849;
                        frontier_phi_69_pred_2 = _2848;
                        frontier_phi_69_pred_3 = _2847;
                        frontier_phi_69_pred_4 = _2846;
                        frontier_phi_69_pred_5 = _2845;
                    }
                    _2517 = frontier_phi_69_pred;
                    _2515 = frontier_phi_69_pred_1;
                    _2513 = frontier_phi_69_pred_2;
                    _2511 = frontier_phi_69_pred_3;
                    _2509 = frontier_phi_69_pred_4;
                    _2507 = frontier_phi_69_pred_5;
                    uint _2652 = _2651 + 1u;
                    if (_2652 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2645 = _2507;
                        _2646 = _2509;
                        _2647 = _2511;
                        _2648 = _2513;
                        _2649 = _2515;
                        _2650 = _2517;
                        _2651 = _2652;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2517;
                frontier_phi_57_58_ladder_1 = _2515;
                frontier_phi_57_58_ladder_2 = _2513;
                frontier_phi_57_58_ladder_3 = _2511;
                frontier_phi_57_58_ladder_4 = _2509;
                frontier_phi_57_58_ladder_5 = _2507;
            }
            else
            {
                frontier_phi_57_58_ladder = _2358;
                frontier_phi_57_58_ladder_1 = _2356;
                frontier_phi_57_58_ladder_2 = _2354;
                frontier_phi_57_58_ladder_3 = _2352;
                frontier_phi_57_58_ladder_4 = _2350;
                frontier_phi_57_58_ladder_5 = _2348;
            }
            _2506 = frontier_phi_57_58_ladder_5;
            _2508 = frontier_phi_57_58_ladder_4;
            _2510 = frontier_phi_57_58_ladder_3;
            _2512 = frontier_phi_57_58_ladder_2;
            _2514 = frontier_phi_57_58_ladder_1;
            _2516 = frontier_phi_57_58_ladder;
        }
        float _2521 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2231 = (_2521 * _2512) + _1668;
        _2233 = (_2521 * _2514) + _1670;
        _2235 = (_2521 * _2516) + _1672;
        _2237 = ((_2506 * _475) * _2521) + _2013;
        _2239 = ((_2508 * _477) * _2521) + _2015;
        _2241 = ((_2510 * _478) * _2521) + _2017;
    }
    else
    {
        _2231 = _1668;
        _2233 = _1670;
        _2235 = _1672;
        _2237 = _2013;
        _2239 = _2015;
        _2241 = _2017;
    }
    uint _2247 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _2253 = (_297.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2247].x;
    float _2254 = (_297.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2247].y;
    float _2255 = (_297.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2247].z;
    float _4152 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4163 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4174 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _2272 = (((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2231 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _490))) + ((_2237 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + _2253;
    float _2274 = (_2254 + ((_2239 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2233 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _490)));
    float _2276 = (_2255 + ((_2241 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2235 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _490)));
    float _4200 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2289 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2298 = _408 / cbSceneParam._m0[86u].x;
    float _2299 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2313 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2315 = _2313.x;
    float _2316 = _2313.y;
    float _2317 = _2313.z;
    float _2318 = _2313.w;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2373 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2374 = _2373 / _341;
        float _2385 = _2374 * _393;
        float _2386 = _394 * _2374;
        float _2387 = (-0.0) - _2386;
        float _2388 = _2374 * _395;
        float _2390 = (cbSceneParam._m0[77u].w * _2387) / _2373;
        float _2391 = _2390 + cbSceneParam._m0[79u].w;
        float _2392 = cbSceneParam._m0[79u].w - _2386;
        float _2398 = sqrt(((_2385 * _2385) + (_2386 * _2386)) + (_2388 * _2388));
        float _2401 = (1.0 - (cbSceneParam._m0[77u].w / _2373)) * _2398;
        float _2406 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2408 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2607;
        if (abs((_2387 - _2390) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2607 = ((((_2391 > 0.0) ? exp2(_2406 * _2391) : (2.0 - exp2(_2408 * _2391))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2401;
        }
        else
        {
            float _2567 = 1.0 / cbSceneParam._m0[80u].x;
            float _2568 = isnan(_2392) ? _2391 : (isnan(_2391) ? _2392 : max(_2391, _2392));
            float _2569 = isnan(_2392) ? _2391 : (isnan(_2391) ? _2392 : min(_2391, _2392));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            float _2579 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : min(_2569, 0.0));
            _2607 = ((abs(_2398 / _2387) * cbSceneParam._m0[80u].y) * ((((_2578 - _2579) * 2.0) - ((exp2(_2406 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0)))) - exp2(_2406 * (isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0))))) * _2567)) - ((exp2(_2408 * _2578) - exp2(_2408 * _2579)) * _2567))) + (_2401 * cbSceneParam._m0[80u].z);
        }
        vec4 _2609 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, 1.0), 0.0);
        float _2618 = exp2((_2607 * (-1.44269502162933349609375)) * (1.0 - _2609.w));
        float _2619 = log2(_2618);
        float _2635 = log2(_2318);
        _2410 = (exp2(_2635 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2619 * cbSceneParam._m0[78u].x)) * _2609.x) / cbSceneParam._m0[78u].x)) + _2315;
        _2412 = (exp2(_2635 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2619 * cbSceneParam._m0[78u].y)) * _2609.y) / cbSceneParam._m0[78u].y)) + _2316;
        _2414 = (exp2(_2635 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2619 * cbSceneParam._m0[78u].z)) * _2609.z) / cbSceneParam._m0[78u].z)) + _2317;
        _2416 = _2618 * _2318;
    }
    else
    {
        _2410 = _2315;
        _2412 = _2316;
        _2414 = _2317;
        _2416 = _2318;
    }
    bool _2429 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2430 = log2(_2416);
    float _2434 = exp2(_2430 * cbSceneParam._m0[78u].x);
    float _2435 = exp2(_2430 * cbSceneParam._m0[78u].y);
    float _2436 = exp2(_2430 * cbSceneParam._m0[78u].z);
    float _2437 = _2434 * (isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0)));
    float _2438 = _2435 * (isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0)));
    float _2439 = _2436 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0)));
    vec4 _2447 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_408, _409));
    float _2449 = _2447.x;
    float _2470 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2449)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2449))) - _341) * 0.100000001490116119384765625;
    float _4251 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2473 = _2472 * cbInstanceData._m0[_449 + 6u].w;
    float _2482 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2482 * (_2429 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2410)));
    SV_Target.y = _2482 * (_2429 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2412)));
    SV_Target.z = _2482 * (_2429 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2414)));
    SV_Target.w = _2473;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2253) * _2289) * _2434) * _2472) * _2482;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2254) * _2289) * _2435) * _2472) * _2482;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2255) * _2289) * _2436) * _2472) * _2482;
    SV_Target_1.w = _2473;
}


