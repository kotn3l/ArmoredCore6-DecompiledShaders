#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _912;
float _3402;
float _3403;
float _3404;
float _3405;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _237 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _237.x;
    float _241 = _237.y;
    float _242 = _237.z;
    vec4 _258 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _258.x + cbMtdParam._m0[9u].x;
    vec4 _273 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _277 = _273.z;
    float _281 = (_273.x * 2.0) + (-1.0);
    float _283 = (_273.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3414 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))));
    vec4 _303 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _313 = fma(_290, _221, fma(_283, _213 * TANGENT.x, (_199 * _192) * _281));
    float _316 = fma(_290, _222, fma(_283, _213 * TANGENT.y, (_199 * _193) * _281));
    float _319 = fma(_290, _223, fma(_283, _213 * TANGENT.z, (_199 * _194) * _281));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    float _324 = _323 * _313;
    float _325 = _323 * _316;
    float _326 = _323 * _319;
    float _3425 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _327 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3447 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3458 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3469 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _331 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _347 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _389 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _399 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _389);
    float _400 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _389);
    float _401 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _389);
    float _405 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _406 = _399 * _405;
    float _407 = _400 * _405;
    float _408 = _401 * _405;
    vec4 _413 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _415 = _413.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _591 = sqrt(((_399 * _399) + (_400 * _400)) + (_401 * _401));
        float _597 = (cbMatDynParam._m0[5u].x * _591) + cbMatDynParam._m0[5u].y;
        float _3480 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _598 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _602 = (cbMatDynParam._m0[5u].z * _591) + cbMatDynParam._m0[5u].w;
        float _3491 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) - _598)) + _598) < ((_415 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _448 = fma(_326, cbSceneParam._m0[5u].z, fma(_325, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _324));
    float _451 = fma(_326, cbSceneParam._m0[6u].z, fma(_325, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _324));
    float _454 = fma(_326, cbSceneParam._m0[7u].z, fma(_325, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _324));
    uint _467 = uint(roundEven(NORMAL.w)) * 13u;
    uint _469 = _467 + 9u;
    uint _470 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _476 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_470].x;
    float _477 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * cbInstanceData._m0[_470].y;
    float _478 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * cbInstanceData._m0[_470].z;
    float _3502 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _3513 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _482 = 1.0 - _331;
    float _483 = _479 * _482;
    float _484 = _480 * _482;
    float _485 = _481 * _482;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _331;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _331;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _331;
    float _493 = _490 + 0.039999999105930328369140625;
    float _495 = _491 + 0.039999999105930328369140625;
    float _496 = _492 + 0.039999999105930328369140625;
    vec4 _505 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _508 = _505.x * TEXCOORD.z;
    float _509 = dot(vec3(_324, _325, _326), vec3(_406, _407, _408));
    float _512 = _509 * 2.0;
    float _516 = (_512 * _324) - _406;
    float _517 = (_512 * _325) - _407;
    float _518 = (_512 * _326) - _408;
    float _522 = abs(dot(vec3(_406, _407, _408), vec3(_324, _325, _326)));
    float _3535 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _524 = sqrt(_327);
    float _537 = exp2((_524 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_524 * 3.0));
    float _543 = (1.0 - _537) * ((_524 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _544 = _537 * _524;
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _911;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _636 = fma(_580, cbModelParam._m0[26u].z, fma(_576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572));
        float _640 = fma(_580, cbModelParam._m0[27u].z, fma(_576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572));
        float _644 = fma(_580, cbModelParam._m0[28u].z, fma(_576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572));
        float _669 = _572 + _324;
        float _670 = _576 + _325;
        float _671 = _580 + _326;
        float _681 = fma(_671, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669)) - _636;
        float _682 = fma(_671, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669)) - _640;
        float _683 = fma(_671, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669)) - _644;
        float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
        float _700 = ((_687 * _681) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_636 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_687 * _682) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_640 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_687 * _683) / cbModelParam._m0[34u].z) + ((((((_644 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        float _739 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_705.x + (-0.5));
        float _741 = _739 * (_705.y + (-0.5));
        float _742 = _739 * (_705.z + (-0.5));
        float _749 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_712.x + (-0.5));
        float _751 = _749 * (_712.y + (-0.5));
        float _752 = _749 * (_712.z + (-0.5));
        float _759 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_719.x + (-0.5));
        float _761 = _759 * (_719.y + (-0.5));
        float _762 = _759 * (_719.z + (-0.5));
        float _769 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_726.x + (-0.5));
        float _771 = _769 * (_726.y + (-0.5));
        float _772 = _769 * (_726.z + (-0.5));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = _740 * 0.5;
        float _777 = _750 * 0.5;
        float _778 = _760 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _793 = (dot(vec3(_324, _325, _326), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _803 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3583 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_805 + 1.0))) + _810) * _773;
        float _820 = _741 * 0.5;
        float _821 = _751 * 0.5;
        float _822 = _761 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _836 = (dot(vec3(_324, _325, _326), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _845 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3616 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_847 + 1.0))) + _852) * _774;
        float _862 = _742 * 0.5;
        float _863 = _752 * 0.5;
        float _864 = _762 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_324, _325, _326), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3649 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_889 + 1.0))) + _894) * _775;
        _911 = _742;
        _913 = _741;
        _914 = _740;
        _915 = _752;
        _916 = _751;
        _917 = _750;
        _918 = _762;
        _919 = _761;
        _920 = _760;
        _921 = _775;
        _922 = _774;
        _923 = _773;
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
    }
    else
    {
        _911 = _912;
        _913 = _912;
        _914 = _912;
        _915 = _912;
        _916 = _912;
        _917 = _912;
        _918 = _912;
        _919 = _912;
        _920 = _912;
        _921 = _912;
        _922 = _912;
        _923 = _912;
        _924 = 0.0;
        _925 = 0.0;
        _926 = 0.0;
    }
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _955 = fma(_580, cbModelParam._m0[30u].z, fma(_576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _572));
        float _959 = fma(_580, cbModelParam._m0[31u].z, fma(_576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _572));
        float _963 = fma(_580, cbModelParam._m0[32u].z, fma(_576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _572));
        float _986 = _572 + _324;
        float _987 = _576 + _325;
        float _988 = _580 + _326;
        float _998 = fma(_988, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986)) - _955;
        float _999 = fma(_988, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986)) - _959;
        float _1000 = fma(_988, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986)) - _963;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1017 = ((_1004 * _998) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_955 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1004 * _999) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_959 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1004 * _1000) / cbModelParam._m0[35u].z) + ((((((_963 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1054 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1021.x + (-0.5));
        float _1056 = _1054 * (_1021.y + (-0.5));
        float _1057 = _1054 * (_1021.z + (-0.5));
        float _1064 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1028.x + (-0.5));
        float _1066 = _1064 * (_1028.y + (-0.5));
        float _1067 = _1064 * (_1028.z + (-0.5));
        float _1074 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1035.x + (-0.5));
        float _1076 = _1074 * (_1035.y + (-0.5));
        float _1077 = _1074 * (_1035.z + (-0.5));
        float _1084 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1042.x + (-0.5));
        float _1086 = _1084 * (_1042.y + (-0.5));
        float _1087 = _1084 * (_1042.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_324, _325, _326), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3712 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1118 + 1.0))) + _1123) * _1088;
        float _1133 = _1056 * 0.5;
        float _1134 = _1066 * 0.5;
        float _1135 = _1076 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_324, _325, _326), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3745 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1160 + 1.0))) + _1165) * _1089;
        float _1175 = _1057 * 0.5;
        float _1176 = _1067 * 0.5;
        float _1177 = _1077 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_324, _325, _326), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3778 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1202 + 1.0))) + _1207) * _1090;
        _1224 = _1057;
        _1225 = _1056;
        _1226 = _1055;
        _1227 = _1067;
        _1228 = _1066;
        _1229 = _1065;
        _1230 = _1077;
        _1231 = _1076;
        _1232 = _1075;
        _1233 = _1090;
        _1234 = _1089;
        _1235 = _1088;
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _912;
        _1225 = _912;
        _1226 = _912;
        _1227 = _912;
        _1228 = _912;
        _1229 = _912;
        _1230 = _912;
        _1231 = _912;
        _1232 = _912;
        _1233 = _912;
        _1234 = _912;
        _1235 = _912;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _925)) + _925;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _926)) + _926;
    float _1271 = fma(_1250, cbSceneParam._m0[89u].z, fma(_1249, cbSceneParam._m0[89u].y, _1248 * cbSceneParam._m0[89u].x));
    float _1274 = fma(_1250, cbSceneParam._m0[90u].z, fma(_1249, cbSceneParam._m0[90u].y, _1248 * cbSceneParam._m0[90u].x));
    float _1277 = fma(_1250, cbSceneParam._m0[91u].z, fma(_1249, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1248));
    float _1292 = _516 * 0.5;
    float _1293 = _517 * 0.5;
    float _1294 = _518 * 0.5;
    float _1295 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1298 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1301 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1335;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1308 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_911, _915, _918, _921));
        float _1312 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_913, _916, _919, _922));
        float _1316 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_914, _917, _920, _923));
        float _1323 = dot(vec4(cbModelParam._m0[39u]), vec4(_1292, _1293, _1294, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1346;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1337 = dot(vec4(cbModelParam._m0[40u]), vec4(_1292, _1293, _1294, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1350 = (_1346 * cbModelParam._m0[1u].x) + (_1335 * (1.0 - cbModelParam._m0[1u].x));
    float _1360 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _327);
    float _1361 = isnan(_1360) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1360 : min(cbModelParam._m0[25u].z, _1360));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1410 = fma(_580, cbModelParam._m0[13u].z, fma(_576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572)) + cbModelParam._m0[13u].w;
        float _1414 = fma(_580, cbModelParam._m0[14u].z, fma(_576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572)) + cbModelParam._m0[14u].w;
        float _1418 = fma(_580, cbModelParam._m0[15u].z, fma(_576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572)) + cbModelParam._m0[15u].w;
        float _1421 = fma(_518, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _516));
        float _1424 = fma(_518, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _516));
        float _1427 = fma(_518, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _516));
        float _1455;
        if (_1421 > 0.0)
        {
            _1455 = abs((1.0 - _1410) / _1421);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1410 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1455 = frontier_phi_19_17_ladder;
        }
        float _1684;
        if (_1424 > 0.0)
        {
            _1684 = abs((1.0 - _1414) / _1424);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1414 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1684 = frontier_phi_28_24_ladder;
        }
        float _1941;
        if (_1427 > 0.0)
        {
            _1941 = abs((1.0 - _1418) / _1427);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1418 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1941 = frontier_phi_40_35_ladder;
        }
        float _1943 = isnan(_1684) ? _1455 : (isnan(_1455) ? _1684 : min(_1455, _1684));
        float _1944 = isnan(_1941) ? _1943 : (isnan(_1943) ? _1941 : min(_1943, _1941));
        float _1948 = (_1944 * _1421) + _1410;
        float _1949 = (_1944 * _1424) + _1414;
        float _1950 = (_1944 * _1427) + _1418;
        float _1951 = _1944 * 9.9999997473787516355514526367188e-05;
        float _1953 = (-1.0) - _1951;
        float _1955 = _1951 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1950 > _1955) || ((_1950 < _1953) || ((_1949 > _1955) || ((_1949 < _1953) || ((_1948 < _1953) || (_1948 > _1955))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1950, cbModelParam._m0[9u].z, fma(_1949, cbModelParam._m0[9u].y, _1948 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1950, cbModelParam._m0[10u].z, fma(_1949, cbModelParam._m0[10u].y, _1948 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1950, cbModelParam._m0[11u].z, fma(_1949, cbModelParam._m0[11u].y, _1948 * cbModelParam._m0[11u].x))), _1361);
            frontier_phi_18_40_ladder = _2078.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2078.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2078.x * cbModelParam._m0[1u].y;
        }
        _1443 = frontier_phi_18_40_ladder_2;
        _1445 = frontier_phi_18_40_ladder_1;
        _1447 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_516, _517, _518), _1361);
        _1443 = _1431.x * cbModelParam._m0[1u].y;
        _1445 = _1431.y * cbModelParam._m0[1u].y;
        _1447 = _1431.z * cbModelParam._m0[1u].y;
    }
    float _1451 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _327);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1451 : min(cbModelParam._m0[25u].w, _1451));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1509 = fma(_580, cbModelParam._m0[21u].z, fma(_576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572)) + cbModelParam._m0[21u].w;
        float _1513 = fma(_580, cbModelParam._m0[22u].z, fma(_576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572)) + cbModelParam._m0[22u].w;
        float _1517 = fma(_580, cbModelParam._m0[23u].z, fma(_576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572)) + cbModelParam._m0[23u].w;
        float _1520 = fma(_518, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _516));
        float _1523 = fma(_518, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _516));
        float _1526 = fma(_518, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _516));
        float _1689;
        if (_1520 > 0.0)
        {
            _1689 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1689 = frontier_phi_30_26_ladder;
        }
        float _1968;
        if (_1523 > 0.0)
        {
            _1968 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1968 = frontier_phi_42_37_ladder;
        }
        float _2181;
        if (_1526 > 0.0)
        {
            _2181 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2181 = frontier_phi_51_48_ladder;
        }
        float _2183 = isnan(_1968) ? _1689 : (isnan(_1689) ? _1968 : min(_1689, _1968));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1520) + _1509;
        float _2189 = (_2184 * _1523) + _1513;
        float _2190 = (_2184 * _1526) + _1517;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2192 = (-1.0) - _2191;
        float _2194 = _2191 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2190 > _2194) || ((_2190 < _2192) || ((_2189 > _2194) || ((_2189 < _2192) || ((_2188 < _2192) || (_2188 > _2194))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2190, cbModelParam._m0[17u].z, fma(_2189, cbModelParam._m0[17u].y, _2188 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2190, cbModelParam._m0[18u].z, fma(_2189, cbModelParam._m0[18u].y, _2188 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2190, cbModelParam._m0[19u].z, fma(_2189, cbModelParam._m0[19u].y, _2188 * cbModelParam._m0[19u].x))), _1452);
            frontier_phi_27_51_ladder = _2417.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2417.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2417.x * cbModelParam._m0[1u].z;
        }
        _1545 = frontier_phi_27_51_ladder_2;
        _1547 = frontier_phi_27_51_ladder_1;
        _1549 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_516, _517, _518), _1452);
        _1545 = _1529.x * cbModelParam._m0[1u].z;
        _1547 = _1529.y * cbModelParam._m0[1u].z;
        _1549 = _1529.z * cbModelParam._m0[1u].z;
    }
    float _1562 = (((_543 * _493) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_543 * _495) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1566 = (((_543 * _496) + _544) * _508) * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1569 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, _1562 * cbSceneParam._m0[91u].x));
    vec4 _1583 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_427, _428));
    float _1585 = _1583.w;
    float _1597 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1585);
    float _1598 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1585);
    float _1599 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1585);
    uvec4 _1603 = floatBitsToUint(cbInstanceData._m0[_467 + 5u]);
    uint _1605 = _1603.x * 14u;
    uint _1606 = _1605 + 13u;
    float _1613 = _508 + (-1.0);
    float _1618 = (cbLight._m0[_1606].x * _1613) + 1.0;
    float _1619 = (cbLight._m0[_1606].y * _1613) + 1.0;
    float _1620 = (cbLight._m0[_1606].z * _1613) + 1.0;
    float _1621 = (cbLight._m0[_1606].w * _1613) + 1.0;
    uint _1622 = _1605 + 5u;
    float _1628 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1632 = _1605 + 4u;
    float _1642 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1646 = _1605 | 1u;
    float _1657 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_324, _325, _326));
    float _1660 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_324, _325, _326));
    float _3914 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _3925 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1665 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * 0.3183098733425140380859375;
    float _1667 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.3183098733425140380859375;
    float _1674 = ((cbLight._m0[_1622].x * _1628) * _1667) + (((cbLight._m0[_1632].x * _1597) * _1642) * _1665);
    float _1675 = ((_1628 * cbLight._m0[_1622].y) * _1667) + (((cbLight._m0[_1632].y * _1598) * _1642) * _1665);
    float _1676 = ((_1628 * cbLight._m0[_1622].z) * _1667) + (((cbLight._m0[_1632].z * _1599) * _1642) * _1665);
    uvec4 _1681 = floatBitsToUint(cbLight._m0[_1605 + 12u]);
    bool _1683 = _1681.x == 0u;
    float _1694;
    float _1696;
    float _1698;
    if (_1683)
    {
        _1694 = _1674;
        _1696 = _1675;
        _1698 = _1676;
    }
    else
    {
        uint _1702 = _1605 + 6u;
        float _1718 = (dot(vec3(cbLight._m0[_1605 + 2u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1719 = _1718 * _1718;
        float _3936 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1721 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1694 = (((cbLight._m0[_1702].x * 0.3183098733425140380859375) * _1720) * _1721) + _1674;
        _1696 = (((cbLight._m0[_1702].y * 0.3183098733425140380859375) * _1720) * _1721) + _1675;
        _1698 = (((cbLight._m0[_1702].z * 0.3183098733425140380859375) * _1720) * _1721) + _1676;
    }
    bool _1701 = _1681.y == 0u;
    float _1739;
    float _1741;
    float _1743;
    if (_1701)
    {
        _1739 = _1694;
        _1741 = _1696;
        _1743 = _1698;
    }
    else
    {
        uint _1912 = _1605 + 7u;
        float _1928 = (dot(vec3(cbLight._m0[_1605 + 3u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1929 = _1928 * _1928;
        float _3952 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1931 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1739 = (((cbLight._m0[_1912].x * 0.3183098733425140380859375) * _1930) * _1931) + _1694;
        _1741 = (((cbLight._m0[_1912].y * 0.3183098733425140380859375) * _1930) * _1931) + _1696;
        _1743 = (((cbLight._m0[_1912].z * 0.3183098733425140380859375) * _1930) * _1931) + _1698;
    }
    uint _1746 = _1605 + 8u;
    float _1759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _327) * 0.949999988079071044921875);
    float _1760 = _1759 * _1759;
    float _1761 = cbLight._m0[_1605].x + _406;
    float _1762 = cbLight._m0[_1605].y + _407;
    float _1763 = cbLight._m0[_1605].z + _408;
    float _1767 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
    float _1768 = _1767 * _1761;
    float _1769 = _1767 * _1762;
    float _1770 = _1767 * _1763;
    float _1771 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1605].xyz));
    float _3968 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _1775 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _1776 = dot(vec3(_324, _325, _326), vec3(_1768, _1769, _1770));
    float _3990 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1780 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1768, _1769, _1770));
    float _4001 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1784 = _1760 * _1760;
    float _1788 = ((_1779 * _1779) * (_1784 + (-1.0))) + 1.0;
    float _1796 = exp2(log2(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * 5.0);
    float _1797 = 0.959999978542327880859375 - _490;
    float _1799 = 0.959999978542327880859375 - _491;
    float _1800 = 0.959999978542327880859375 - _492;
    float _1807 = 1.0 - _1760;
    float _1818 = (0.5 / (((_1775 * ((_1774 * _1807) + _1760)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1807) + _1760) * _1774))) * _1774;
    float _4012 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1784 / ((_1788 * _1788) * 3.141590118408203125));
    uint _1834 = _1605 + 9u;
    float _1845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _327) * 0.949999988079071044921875);
    float _1846 = _1845 * _1845;
    float _1847 = cbLight._m0[_1646].x + _406;
    float _1848 = cbLight._m0[_1646].y + _407;
    float _1849 = cbLight._m0[_1646].z + _408;
    float _1853 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
    float _1854 = _1853 * _1847;
    float _1855 = _1853 * _1848;
    float _1856 = _1853 * _1849;
    float _1857 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1646].xyz));
    float _4023 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1861 = dot(vec3(_324, _325, _326), vec3(_1854, _1855, _1856));
    float _4034 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1865 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1854, _1855, _1856));
    float _4045 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1869 = _1846 * _1846;
    float _1873 = ((_1864 * _1864) * (_1869 + (-1.0))) + 1.0;
    float _1880 = exp2(log2(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * 5.0);
    float _1887 = 1.0 - _1846;
    float _1897 = (0.5 / (((_1775 * ((_1860 * _1887) + _1846)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1887) + _1846) * _1860))) * _1860;
    float _4056 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1899 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1869 / ((_1873 * _1873) * 3.141590118408203125));
    float _1909 = (((((_1880 * _1797) + _493) * cbLight._m0[_1834].x) * _1899) * _1628) + ((((cbLight._m0[_1746].x * _1597) * ((_1796 * _1797) + _493)) * _1820) * _1642);
    float _1910 = (((((_1880 * _1799) + _495) * cbLight._m0[_1834].y) * _1899) * _1628) + ((((cbLight._m0[_1746].y * _1598) * ((_1796 * _1799) + _495)) * _1820) * _1642);
    float _1911 = (((((_1880 * _1800) + _496) * cbLight._m0[_1834].z) * _1899) * _1628) + ((((cbLight._m0[_1746].z * _1599) * ((_1796 * _1800) + _496)) * _1820) * _1642);
    float _1973;
    float _1975;
    float _1977;
    if (_1683)
    {
        _1973 = _1909;
        _1975 = _1910;
        _1977 = _1911;
    }
    else
    {
        uint _1979 = _1605 + 2u;
        uint _1983 = _1605 + 10u;
        float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _327) * 0.949999988079071044921875);
        float _1998 = _1997 * _1997;
        float _1999 = cbLight._m0[_1979].x + _406;
        float _2000 = cbLight._m0[_1979].y + _407;
        float _2001 = cbLight._m0[_1979].z + _408;
        float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
        float _2006 = _2005 * _1999;
        float _2007 = _2005 * _2000;
        float _2008 = _2005 * _2001;
        float _2009 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1979].xyz));
        float _4067 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2012 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2013 = dot(vec3(_324, _325, _326), vec3(_2006, _2007, _2008));
        float _4078 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2016 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2017 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2006, _2007, _2008));
        float _4089 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2021 = _1998 * _1998;
        float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
        float _2032 = exp2(log2(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * 5.0);
        float _2039 = 1.0 - _1998;
        float _2049 = (0.5 / (((_1775 * ((_2012 * _2039) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _2039) + _1998) * _2012))) * _2012;
        float _4100 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2051 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
        float _2052 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1973 = (((((_2032 * _1797) + _493) * cbLight._m0[_1983].x) * _2051) * _2052) + _1909;
        _1975 = (((((_2032 * _1799) + _495) * cbLight._m0[_1983].y) * _2051) * _2052) + _1910;
        _1977 = (((((_2032 * _1800) + _496) * cbLight._m0[_1983].z) * _2051) * _2052) + _1911;
    }
    float _2087;
    float _2089;
    float _2091;
    if (_1701)
    {
        _2087 = _1973;
        _2089 = _1975;
        _2091 = _1977;
    }
    else
    {
        uint _2098 = _1605 + 3u;
        uint _2102 = _1605 + 11u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _327) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _406;
        float _2119 = cbLight._m0[_2098].y + _407;
        float _2120 = cbLight._m0[_2098].z + _408;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_2098].xyz));
        float _4116 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2132 = dot(vec3(_324, _325, _326), vec3(_2125, _2126, _2127));
        float _4127 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4138 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2151 = exp2(log2(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * 5.0);
        float _2158 = 1.0 - _2117;
        float _2168 = (0.5 / (((_1775 * ((_2131 * _2158) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _2158) + _2117) * _2131))) * _2131;
        float _4149 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2170 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2171 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _2087 = (((((_2151 * _1797) + _493) * cbLight._m0[_2102].x) * _2170) * _2171) + _1973;
        _2089 = (((((_2151 * _1799) + _495) * cbLight._m0[_2102].y) * _2170) * _2171) + _1975;
        _2091 = (((((_2151 * _1800) + _496) * cbLight._m0[_2102].z) * _2170) * _2171) + _1977;
    }
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_1603.y == 0u)
    {
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2247 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2246;
        float _2248 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2246;
        float _2249 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2246;
        uvec4 _2261 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2262 = _2261.x;
        uint _2273 = uint((float(_2261.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _2262))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _2262)));
        float _2283 = (log2(_2249 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2284 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        uint _2287 = uint(isnan(14.0) ? _2284 : (isnan(_2284) ? 14.0 : min(_2284, 14.0)));
        uvec4 _2292 = texelFetch(g_lightClusterGridBuffer, int(((_2287 << 2u) + (_2273 << 6u)) >> 2u));
        uint _2293 = _2292.x;
        uint _2294 = _2261.z;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        if (((((1u << ((_2294 >> 4u) & 15u)) + 4294967295u) & _2293) == 0u) || ((_2294 & 240u) == 0u))
        {
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
        }
        else
        {
            float _2423;
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            uint _2626 = 0u;
            uint _2635;
            bool _2636;
            for (;;)
            {
                _2635 = texelFetch(g_lightClassification, int((((_2287 << 5u) + (_2273 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                _2636 = _2635 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2636)
                {
                    frontier_phi_68_pred = _2622;
                    frontier_phi_68_pred_1 = _2625;
                    frontier_phi_68_pred_2 = _2624;
                    frontier_phi_68_pred_3 = _2623;
                    frontier_phi_68_pred_4 = _2621;
                    frontier_phi_68_pred_5 = _2620;
                }
                else
                {
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    uint _2771;
                    _2765 = _2620;
                    _2766 = _2621;
                    _2767 = _2622;
                    _2768 = _2623;
                    _2769 = _2624;
                    _2770 = _2625;
                    _2771 = _2635;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    for (;;)
                    {
                        uint _2775 = uint(findLSB(_2771)) + (_2626 << 5u);
                        uint _2772 = (_2771 + 4294967295u) & _2771;
                        uint _2777 = _2775 * 48u;
                        vec4 _2791 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 3u)).x));
                        uint _2797 = (_2775 * 48u) + 4u;
                        vec4 _2810 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2797)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2797 + 3u)).x));
                        uint _2816 = (_2775 * 48u) + 8u;
                        vec3 _2827 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x));
                        float _2831 = _2791.x - _2247;
                        float _2832 = _2791.y - _2248;
                        float _2833 = _2791.z - _2249;
                        float _2834 = dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833));
                        float _2837 = inversesqrt(_2834);
                        float _2838 = _2837 * _2831;
                        float _2839 = _2837 * _2832;
                        float _2840 = _2837 * _2833;
                        float _2841 = dot(vec3(_448, _451, _454), vec3(_2838, _2839, _2840));
                        float _2846 = 1.0 - (_2834 * _2791.w);
                        float _4175 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2847 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2848 = sqrt(_2834) * _2810.w;
                        float _2851 = 1.39999997615814208984375 / (_2848 + 1.39999997615814208984375);
                        float _2852 = _2851 * _2851;
                        float _2855 = ((1.0 - _2852) * _2841) + _2852;
                        float _2858 = _2848 * _2848;
                        float _2862 = ((isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0))) * _2847) / ((_2858 * 0.699999988079071044921875) + 1.0);
                        float _2866 = (-0.0) - _2247;
                        float _2867 = (-0.0) - _2248;
                        float _2868 = (-0.0) - _2249;
                        float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
                        float _2873 = _2872 * _2866;
                        float _2874 = _2872 * _2867;
                        float _2875 = _2872 * _2868;
                        float _2883 = exp2(log2(1.0 / ((_2858 * 3.5) + 5.0)) * 0.25);
                        float _2884 = 1.0 - _524;
                        float _2891 = sqrt(1.0 - ((1.0 - (_2884 * _2884)) * (1.0 - (_2883 * _2883))));
                        float _2892 = _2891 * _2891;
                        float _2893 = _2892 * _2892;
                        float _2894 = _2873 + _2838;
                        float _2895 = _2874 + _2839;
                        float _2896 = _2875 + _2840;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2904 = dot(vec3(_448, _451, _454), vec3(_2873, _2874, _2875));
                        float _4191 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2907 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2908 = dot(vec3(_448, _451, _454), vec3(_2900 * _2894, _2900 * _2895, _2900 * _2896));
                        float _4202 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2911 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2915 = ((_2911 * _2911) * (_2893 + (-1.0))) + 1.0;
                        float _2916 = _2851 * _2892;
                        float _2917 = _2916 * _2916;
                        float _2920 = ((1.0 - _2917) * _2841) + _2917;
                        float _4213 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2921 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2922 = 1.0 - _2892;
                        float _2932 = (0.5 / (((_2921 * ((_2907 * _2922) + _2892)) + 9.9999999392252902907785028219223e-09) + (((_2921 * _2922) + _2892) * _2907))) * _2921;
                        float _4224 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2943 = (((_2893 * 3.1415927410125732421875) * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) / ((_2915 * _2915) * ((_2858 * 2.1991131305694580078125) + 3.141590118408203125))) * _2847;
                        _2695 = (_2862 * _2810.x) + _2768;
                        _2696 = (_2862 * _2810.y) + _2769;
                        _2697 = (_2862 * _2810.z) + _2770;
                        _2692 = (_2943 * _2827.x) + _2765;
                        _2693 = (_2943 * _2827.y) + _2766;
                        _2694 = (_2943 * _2827.z) + _2767;
                        if (_2772 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2765 = _2692;
                            _2766 = _2693;
                            _2767 = _2694;
                            _2768 = _2695;
                            _2769 = _2696;
                            _2770 = _2697;
                            _2771 = _2772;
                        }
                    }
                    frontier_phi_68_pred = _2694;
                    frontier_phi_68_pred_1 = _2697;
                    frontier_phi_68_pred_2 = _2696;
                    frontier_phi_68_pred_3 = _2695;
                    frontier_phi_68_pred_4 = _2693;
                    frontier_phi_68_pred_5 = _2692;
                }
                _2427 = frontier_phi_68_pred;
                _2433 = frontier_phi_68_pred_1;
                _2431 = frontier_phi_68_pred_2;
                _2429 = frontier_phi_68_pred_3;
                _2425 = frontier_phi_68_pred_4;
                _2423 = frontier_phi_68_pred_5;
                uint _2627 = _2626 + 1u;
                if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2620 = _2423;
                    _2621 = _2425;
                    _2622 = _2427;
                    _2623 = _2429;
                    _2624 = _2431;
                    _2625 = _2433;
                    _2626 = _2627;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
        }
        uvec4 _2436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2437 = _2436.z;
        uint _2439 = (_2437 >> 8u) & 15u;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((4294967295u << _2439) & _2293) == 0u)
        {
            _2588 = _2422;
            _2590 = _2424;
            _2592 = _2426;
            _2594 = _2428;
            _2596 = _2430;
            _2598 = _2432;
        }
        else
        {
            float _2613 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
            float _2614 = _2613 * _2247;
            float _2615 = _2613 * _2248;
            float _2616 = _2613 * _2249;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2439 < ((_2437 >> 12u) & 15u))
            {
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2748 = _2422;
                float _2749 = _2424;
                float _2750 = _2426;
                float _2751 = _2428;
                float _2752 = _2430;
                float _2753 = _2432;
                uint _2754 = _2439;
                uint _2763;
                bool _2764;
                for (;;)
                {
                    _2763 = texelFetch(g_lightClassification, int((((_2287 << 5u) + (_2273 << 9u)) + (_2754 << 2u)) >> 2u)).x;
                    _2764 = _2763 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2764)
                    {
                        frontier_phi_79_pred = _2753;
                        frontier_phi_79_pred_1 = _2752;
                        frontier_phi_79_pred_2 = _2751;
                        frontier_phi_79_pred_3 = _2750;
                        frontier_phi_79_pred_4 = _2749;
                        frontier_phi_79_pred_5 = _2748;
                    }
                    else
                    {
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _2970 = _2748;
                        float _2971 = _2749;
                        float _2972 = _2750;
                        float _2973 = _2751;
                        float _2974 = _2752;
                        float _2975 = _2753;
                        uint _2976 = _2763;
                        uint _2977;
                        vec4 _3002;
                        float _3003;
                        vec4 _3018;
                        vec3 _3030;
                        vec4 _3046;
                        vec4 _3062;
                        float _3109;
                        bool _3110;
                        for (;;)
                        {
                            uint _2987 = ((_2754 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2976));
                            _2977 = (_2976 + 4294967295u) & _2976;
                            uint _2989 = _2987 * 40u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            _3003 = _3002.w;
                            uint _3005 = (_2987 * 40u) + 4u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3020 = (_2987 * 40u) + 8u;
                            _3030 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x));
                            uint _3033 = (_2987 * 40u) + 16u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3049 = (_2987 * 40u) + 20u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3065 = (_2987 * 40u) + 24u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3084 = (_2987 * 40u) + 28u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3109 = fma(_2249, _3097.z, fma(_2248, _3097.y, _3097.x * _2247)) + _3097.w;
                            _3110 = !((fma(_2249, _3078.z, fma(_2248, _3078.y, _3078.x * _2247)) + _3078.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3110)
                            {
                                float _3137 = _3002.x - _2247;
                                float _3138 = _3002.y - _2248;
                                float _3139 = _3002.z - _2249;
                                float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                                float _3143 = inversesqrt(_3140);
                                float _3144 = _3143 * _3137;
                                float _3145 = _3143 * _3138;
                                float _3146 = _3143 * _3139;
                                float _3150 = 1.0 - (_3140 / (_3003 * _3003));
                                float _4235 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3155 = sqrt(_3140) * _3018.w;
                                float _3157 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                                float _3158 = _3157 * _3157;
                                float _3161 = ((1.0 - _3158) * dot(vec3(_3144, _3145, _3146), vec3(_448, _451, _454))) + _3158;
                                float _3164 = _3155 * _3155;
                                float _3168 = (fma(_2249, _3046.z, fma(_2248, _3046.y, _3046.x * _2247)) + _3046.w) / _3109;
                                float _3169 = (fma(_2249, _3062.z, fma(_2248, _3062.y, _3062.x * _2247)) + _3062.w) / _3109;
                                float _3173 = 1.0 - dot(vec2(_3168, _3169), vec2(_3168, _3169));
                                float _4251 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3175 = _3174 * (((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3151) / ((_3164 * 0.699999988079071044921875) + 1.0));
                                float _3187 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                                float _3188 = 1.0 - _524;
                                float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                                float _3196 = _3195 * _3195;
                                float _3197 = _3196 * _3196;
                                float _3198 = _3144 - _2614;
                                float _3199 = _3145 - _2615;
                                float _3200 = _3146 - _2616;
                                float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                                float _3208 = dot(vec3(_448, _451, _454), vec3((-0.0) - _2614, (-0.0) - _2615, (-0.0) - _2616));
                                float _4262 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3212 = dot(vec3(_448, _451, _454), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                                float _4273 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                                float _3220 = _3157 * _3196;
                                float _3221 = _3220 * _3220;
                                float _3227 = ((1.0 - _3221) * dot(vec3(_448, _451, _454), vec3(_3144, _3145, _3146))) + _3221;
                                float _4284 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3229 = 1.0 - _3196;
                                float _3239 = (0.5 / (((_3228 * ((_3211 * _3229) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3196) * _3211))) * _3228;
                                float _4295 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3249 = (_3174 * _3151) * (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) / ((_3219 * _3219) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3175 * _3018.z;
                                frontier_phi_85_pred_1 = _3175 * _3018.y;
                                frontier_phi_85_pred_2 = _3175 * _3018.x;
                                frontier_phi_85_pred_3 = _3249 * _3030.z;
                                frontier_phi_85_pred_4 = _3249 * _3030.y;
                                frontier_phi_85_pred_5 = _3249 * _3030.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3258 = frontier_phi_85_pred;
                            _3257 = frontier_phi_85_pred_1;
                            _3256 = frontier_phi_85_pred_2;
                            _3255 = frontier_phi_85_pred_3;
                            _3254 = frontier_phi_85_pred_4;
                            _3253 = frontier_phi_85_pred_5;
                            _2960 = _3256 + _2973;
                            _2961 = _3257 + _2974;
                            _2962 = _3258 + _2975;
                            _2957 = _3253 + _2970;
                            _2958 = _3254 + _2971;
                            _2959 = _3255 + _2972;
                            if (_2977 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2977;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2962;
                        frontier_phi_79_pred_1 = _2961;
                        frontier_phi_79_pred_2 = _2960;
                        frontier_phi_79_pred_3 = _2959;
                        frontier_phi_79_pred_4 = _2958;
                        frontier_phi_79_pred_5 = _2957;
                    }
                    _2599 = frontier_phi_79_pred;
                    _2597 = frontier_phi_79_pred_1;
                    _2595 = frontier_phi_79_pred_2;
                    _2593 = frontier_phi_79_pred_3;
                    _2591 = frontier_phi_79_pred_4;
                    _2589 = frontier_phi_79_pred_5;
                    uint _2755 = _2754 + 1u;
                    if (_2755 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2748 = _2589;
                        _2749 = _2591;
                        _2750 = _2593;
                        _2751 = _2595;
                        _2752 = _2597;
                        _2753 = _2599;
                        _2754 = _2755;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2595;
                frontier_phi_60_61_ladder_1 = _2599;
                frontier_phi_60_61_ladder_2 = _2597;
                frontier_phi_60_61_ladder_3 = _2593;
                frontier_phi_60_61_ladder_4 = _2591;
                frontier_phi_60_61_ladder_5 = _2589;
            }
            else
            {
                frontier_phi_60_61_ladder = _2428;
                frontier_phi_60_61_ladder_1 = _2432;
                frontier_phi_60_61_ladder_2 = _2430;
                frontier_phi_60_61_ladder_3 = _2426;
                frontier_phi_60_61_ladder_4 = _2424;
                frontier_phi_60_61_ladder_5 = _2422;
            }
            _2588 = frontier_phi_60_61_ladder_5;
            _2590 = frontier_phi_60_61_ladder_4;
            _2592 = frontier_phi_60_61_ladder_3;
            _2594 = frontier_phi_60_61_ladder;
            _2596 = frontier_phi_60_61_ladder_2;
            _2598 = frontier_phi_60_61_ladder_1;
        }
        float _2603 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
        _2305 = (_2603 * _2594) + _1739;
        _2307 = (_2603 * _2596) + _1741;
        _2309 = (_2603 * _2598) + _1743;
        _2311 = ((_2588 * _493) * _2603) + _2087;
        _2313 = ((_2590 * _495) * _2603) + _2089;
        _2315 = ((_2592 * _496) * _2603) + _2091;
    }
    else
    {
        _2305 = _1739;
        _2307 = _1741;
        _2309 = _1743;
        _2311 = _2087;
        _2313 = _2089;
        _2315 = _2091;
    }
    uint _2321 = _469 + uint(cbMatDynParam._m0[0u].w);
    float _2327 = (_303.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2321].x;
    float _2328 = (_303.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2321].y;
    float _2329 = (_303.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2321].z;
    float _4311 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4322 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4333 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _2346 = (((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2305 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _508))) + ((_2311 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + _2327;
    float _2348 = (_2328 + ((_2313 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2307 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _508)));
    float _2350 = (_2329 + ((_2315 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1350)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2309 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _508)));
    float _2351 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2352 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2353 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2359 = cbMtdParam._m0[2u].x * _2327;
    float _2360 = cbMtdParam._m0[2u].y * _2328;
    float _2361 = cbMtdParam._m0[2u].z * _2329;
    float _4359 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2363 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    uint _2364 = _467 + 6u;
    float _2372 = _427 / cbSceneParam._m0[86u].x;
    float _2373 = _428 / cbSceneParam._m0[86u].y;
    vec4 _2387 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, (log2((isnan(cbSceneParam._m0[77u].w) ? _347 : (isnan(_347) ? cbSceneParam._m0[77u].w : min(_347, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2389 = _2387.x;
    float _2390 = _2387.y;
    float _2391 = _2387.z;
    float _2392 = _2387.w;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    if (_347 > cbSceneParam._m0[78u].w)
    {
        float _2447 = isnan(_347) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _347 : min(cbSceneParam._m0[80u].w, _347));
        float _2448 = _2447 / _347;
        float _2459 = _2448 * _399;
        float _2460 = _400 * _2448;
        float _2461 = (-0.0) - _2460;
        float _2462 = _2448 * _401;
        float _2464 = (cbSceneParam._m0[77u].w * _2461) / _2447;
        float _2465 = _2464 + cbSceneParam._m0[79u].w;
        float _2466 = cbSceneParam._m0[79u].w - _2460;
        float _2472 = sqrt(((_2459 * _2459) + (_2460 * _2460)) + (_2462 * _2462));
        float _2475 = (1.0 - (cbSceneParam._m0[77u].w / _2447)) * _2472;
        float _2480 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2482 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2705;
        if (abs((_2461 - _2464) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2705 = ((((_2465 > 0.0) ? exp2(_2480 * _2465) : (2.0 - exp2(_2482 * _2465))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2475;
        }
        else
        {
            float _2649 = 1.0 / cbSceneParam._m0[80u].x;
            float _2650 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : max(_2465, _2466));
            float _2651 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : min(_2465, _2466));
            float _2660 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : min(_2650, 0.0));
            float _2661 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : min(_2651, 0.0));
            _2705 = ((abs(_2472 / _2461) * cbSceneParam._m0[80u].y) * ((((_2660 - _2661) * 2.0) - ((exp2(_2480 * (isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0)))) - exp2(_2480 * (isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0))))) * _2649)) - ((exp2(_2482 * _2660) - exp2(_2482 * _2661)) * _2649))) + (_2475 * cbSceneParam._m0[80u].z);
        }
        vec4 _2707 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2372, _2373, 1.0), 0.0);
        float _2716 = exp2((_2705 * (-1.44269502162933349609375)) * (1.0 - _2707.w));
        float _2717 = log2(_2716);
        float _2733 = log2(_2392);
        _2484 = (exp2(_2733 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].x)) * _2707.x) / cbSceneParam._m0[78u].x)) + _2389;
        _2486 = (exp2(_2733 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].y)) * _2707.y) / cbSceneParam._m0[78u].y)) + _2390;
        _2488 = (exp2(_2733 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].z)) * _2707.z) / cbSceneParam._m0[78u].z)) + _2391;
        _2490 = _2716 * _2392;
    }
    else
    {
        _2484 = _2389;
        _2486 = _2390;
        _2488 = _2391;
        _2490 = _2392;
    }
    bool _2743;
    float _2547;
    vec4 _2550;
    float _2552;
    vec4 _2554;
    float _2562;
    float _2563;
    float _2564;
    float _2568;
    float _2572;
    float _2576;
    float _2577;
    bool _2587;
    for (;;)
    {
        bool _2503 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2504 = log2(_2490);
        float _2508 = exp2(_2504 * cbSceneParam._m0[78u].x);
        float _2509 = exp2(_2504 * cbSceneParam._m0[78u].y);
        float _2510 = exp2(_2504 * cbSceneParam._m0[78u].z);
        float _2511 = _2508 * _2351;
        float _2512 = _2509 * _2352;
        float _2513 = _2510 * _2353;
        vec4 _2521 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_427, _428));
        float _2523 = _2521.x;
        float _2544 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2523)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2523))) - _347) * 0.100000001490116119384765625;
        float _4410 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        _2547 = _2546 * cbInstanceData._m0[_2364].w;
        float _2548 = _415 + (-0.5);
        _2550 = cbMtdParam._m0[1u];
        _2552 = _2550.y * _2548;
        _2554 = cbMatDynParam._m0[0u];
        float _2561 = (roundEven(_2554.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2562 = _2561 * (_2503 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2484)));
        _2563 = _2561 * (_2503 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2486)));
        _2564 = _2561 * (_2503 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2488)));
        _2568 = (((_2359 * _2363) * _2508) * _2546) * _2561;
        _2572 = (((_2360 * _2363) * _2509) * _2546) * _2561;
        _2576 = (((_2361 * _2363) * _2510) * _2546) * _2561;
        _2577 = _2548 * 0.999000012874603271484375;
        _2587 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2587)
        {
            if ((cbInstanceData._m0[_467 + 7u].x + _2577) < 0.5)
            {
                _2743 = true;
                break;
            }
        }
        uint _2684 = _469 + uint(_2554.w);
        if ((cbInstanceData._m0[_2684].w < 1.0) && ((cbInstanceData._m0[_2684].w + _2577) < 0.5))
        {
            _2743 = true;
            break;
        }
        if ((_2552 + 1.0) < _2550.x)
        {
            _2743 = true;
            break;
        }
        _2743 = false;
        break;
    }
    float _2948;
    if (_2743)
    {
        discard_state = true;
        _2948 = 0.0;
    }
    else
    {
        _2948 = _2547;
    }
    SV_Target.x = _2562;
    SV_Target.y = _2563;
    SV_Target.z = _2564;
    SV_Target.w = _2948;
    SV_Target_1.x = _2568;
    SV_Target_1.y = _2572;
    SV_Target_1.z = _2576;
    SV_Target_1.w = _2547;
    discard_exit();
}


