#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _867;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _233 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _233.x;
    float _237 = _233.y;
    float _238 = _233.z;
    vec4 _254 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _254.x + cbMtdParam._m0[9u].x;
    vec4 _269 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _273 = _269.z;
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3303 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0))));
    vec4 _299 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _309 = fma(_286, _217, fma(_279, _209 * TANGENT.x, (_195 * _188) * _277));
    float _312 = fma(_286, _218, fma(_279, _209 * TANGENT.y, (_195 * _189) * _277));
    float _315 = fma(_286, _219, fma(_279, _209 * TANGENT.z, (_195 * _190) * _277));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3314 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _323 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
    float _3325 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3336 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3347 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3358 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _327 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _343 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _435 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _438 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    uint _451 = uint(roundEven(NORMAL.w)) * 13u;
    uint _453 = _451 + 9u;
    uint _454 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _460 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * cbInstanceData._m0[_454].x;
    float _461 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0)))) * cbInstanceData._m0[_454].y;
    float _462 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0)))) * cbInstanceData._m0[_454].z;
    float _3369 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _3391 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _466 = 1.0 - _327;
    float _467 = _463 * _466;
    float _468 = _464 * _466;
    float _469 = _465 * _466;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _327;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _327;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _327;
    float _477 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    float _480 = _476 + 0.039999999105930328369140625;
    vec4 _489 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _492 = _489.x * TEXCOORD.z;
    float _493 = dot(vec3(_320, _321, _322), vec3(_402, _403, _404));
    float _496 = _493 * 2.0;
    float _500 = (_496 * _320) - _402;
    float _501 = (_496 * _321) - _403;
    float _502 = (_496 * _322) - _404;
    float _506 = abs(dot(vec3(_402, _403, _404), vec3(_320, _321, _322)));
    float _3402 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _508 = sqrt(_323);
    float _521 = exp2((_508 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_508 * 3.0));
    float _527 = (1.0 - _521) * ((_508 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _528 = _521 * _508;
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _866;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _591 = fma(_564, cbModelParam._m0[26u].z, fma(_560, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _556));
        float _595 = fma(_564, cbModelParam._m0[27u].z, fma(_560, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _556));
        float _599 = fma(_564, cbModelParam._m0[28u].z, fma(_560, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _556));
        float _624 = _556 + _320;
        float _625 = _560 + _321;
        float _626 = _564 + _322;
        float _636 = fma(_626, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624)) - _591;
        float _637 = fma(_626, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624)) - _595;
        float _638 = fma(_626, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624)) - _599;
        float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
        float _655 = ((_642 * _636) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_591 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_642 * _637) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_595 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_642 * _638) / cbModelParam._m0[34u].z) + ((((((_599 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        float _694 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_660.x + (-0.5));
        float _696 = _694 * (_660.y + (-0.5));
        float _697 = _694 * (_660.z + (-0.5));
        float _704 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_667.x + (-0.5));
        float _706 = _704 * (_667.y + (-0.5));
        float _707 = _704 * (_667.z + (-0.5));
        float _714 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_674.x + (-0.5));
        float _716 = _714 * (_674.y + (-0.5));
        float _717 = _714 * (_674.z + (-0.5));
        float _724 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_681.x + (-0.5));
        float _726 = _724 * (_681.y + (-0.5));
        float _727 = _724 * (_681.z + (-0.5));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = _695 * 0.5;
        float _732 = _705 * 0.5;
        float _733 = _715 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _748 = (dot(vec3(_320, _321, _322), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3428 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _758 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3439 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3450 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * (_760 + 1.0))) + _765) * _728;
        float _775 = _696 * 0.5;
        float _776 = _706 * 0.5;
        float _777 = _716 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _791 = (dot(vec3(_320, _321, _322), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _800 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3483 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_802 + 1.0))) + _807) * _729;
        float _817 = _697 * 0.5;
        float _818 = _707 * 0.5;
        float _819 = _717 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_320, _321, _322), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3516 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_844 + 1.0))) + _849) * _730;
        _866 = _697;
        _868 = _696;
        _869 = _695;
        _870 = _707;
        _871 = _706;
        _872 = _705;
        _873 = _717;
        _874 = _716;
        _875 = _715;
        _876 = _730;
        _877 = _729;
        _878 = _728;
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
    }
    else
    {
        _866 = _867;
        _868 = _867;
        _869 = _867;
        _870 = _867;
        _871 = _867;
        _872 = _867;
        _873 = _867;
        _874 = _867;
        _875 = _867;
        _876 = _867;
        _877 = _867;
        _878 = _867;
        _879 = 0.0;
        _880 = 0.0;
        _881 = 0.0;
    }
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _907 = fma(_564, cbModelParam._m0[30u].z, fma(_560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _556));
        float _911 = fma(_564, cbModelParam._m0[31u].z, fma(_560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _556));
        float _915 = fma(_564, cbModelParam._m0[32u].z, fma(_560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _556));
        float _938 = _556 + _320;
        float _939 = _560 + _321;
        float _940 = _564 + _322;
        float _950 = fma(_940, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_907 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_911 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[35u].z) + ((((((_915 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_973.x + (-0.5));
        float _1008 = _1006 * (_973.y + (-0.5));
        float _1009 = _1006 * (_973.z + (-0.5));
        float _1016 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_980.x + (-0.5));
        float _1018 = _1016 * (_980.y + (-0.5));
        float _1019 = _1016 * (_980.z + (-0.5));
        float _1026 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_987.x + (-0.5));
        float _1028 = _1026 * (_987.y + (-0.5));
        float _1029 = _1026 * (_987.z + (-0.5));
        float _1036 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_994.x + (-0.5));
        float _1038 = _1036 * (_994.y + (-0.5));
        float _1039 = _1036 * (_994.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_320, _321, _322), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3579 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_1070 + 1.0))) + _1075) * _1040;
        float _1085 = _1008 * 0.5;
        float _1086 = _1018 * 0.5;
        float _1087 = _1028 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_320, _321, _322), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3612 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1112 + 1.0))) + _1117) * _1041;
        float _1127 = _1009 * 0.5;
        float _1128 = _1019 * 0.5;
        float _1129 = _1029 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_320, _321, _322), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3645 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1154 + 1.0))) + _1159) * _1042;
        _1176 = _1009;
        _1177 = _1008;
        _1178 = _1007;
        _1179 = _1019;
        _1180 = _1018;
        _1181 = _1017;
        _1182 = _1029;
        _1183 = _1028;
        _1184 = _1027;
        _1185 = _1042;
        _1186 = _1041;
        _1187 = _1040;
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _867;
        _1177 = _867;
        _1178 = _867;
        _1179 = _867;
        _1180 = _867;
        _1181 = _867;
        _1182 = _867;
        _1183 = _867;
        _1184 = _867;
        _1185 = _867;
        _1186 = _867;
        _1187 = _867;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _880)) + _880;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1223 = fma(_1202, cbSceneParam._m0[89u].z, fma(_1201, cbSceneParam._m0[89u].y, _1200 * cbSceneParam._m0[89u].x));
    float _1226 = fma(_1202, cbSceneParam._m0[90u].z, fma(_1201, cbSceneParam._m0[90u].y, _1200 * cbSceneParam._m0[90u].x));
    float _1229 = fma(_1202, cbSceneParam._m0[91u].z, fma(_1201, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1200));
    float _1244 = _500 * 0.5;
    float _1245 = _501 * 0.5;
    float _1246 = _502 * 0.5;
    float _1247 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1250 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1253 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1287;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1260 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_866, _870, _873, _876));
        float _1264 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_868, _871, _874, _877));
        float _1268 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_869, _872, _875, _878));
        float _1275 = dot(vec4(cbModelParam._m0[39u]), vec4(_1244, _1245, _1246, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1298;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1289 = dot(vec4(cbModelParam._m0[40u]), vec4(_1244, _1245, _1246, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1302 = (_1298 * cbModelParam._m0[1u].x) + (_1287 * (1.0 - cbModelParam._m0[1u].x));
    float _1312 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _323);
    float _1313 = isnan(_1312) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1312 : min(cbModelParam._m0[25u].z, _1312));
    float _1395;
    float _1397;
    float _1399;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1362 = fma(_564, cbModelParam._m0[13u].z, fma(_560, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556)) + cbModelParam._m0[13u].w;
        float _1366 = fma(_564, cbModelParam._m0[14u].z, fma(_560, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556)) + cbModelParam._m0[14u].w;
        float _1370 = fma(_564, cbModelParam._m0[15u].z, fma(_560, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556)) + cbModelParam._m0[15u].w;
        float _1373 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1376 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1379 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1407;
        if (_1373 > 0.0)
        {
            _1407 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1407 = frontier_phi_16_14_ladder;
        }
        float _1636;
        if (_1376 > 0.0)
        {
            _1636 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1636 = frontier_phi_25_21_ladder;
        }
        float _1893;
        if (_1379 > 0.0)
        {
            _1893 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1893 = frontier_phi_37_32_ladder;
        }
        float _1895 = isnan(_1636) ? _1407 : (isnan(_1407) ? _1636 : min(_1407, _1636));
        float _1896 = isnan(_1893) ? _1895 : (isnan(_1895) ? _1893 : min(_1895, _1893));
        float _1900 = (_1896 * _1373) + _1362;
        float _1901 = (_1896 * _1376) + _1366;
        float _1902 = (_1896 * _1379) + _1370;
        float _1903 = _1896 * 9.9999997473787516355514526367188e-05;
        float _1905 = (-1.0) - _1903;
        float _1907 = _1903 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1902 > _1907) || ((_1902 < _1905) || ((_1901 > _1907) || ((_1901 < _1905) || ((_1900 < _1905) || (_1900 > _1907))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1902, cbModelParam._m0[9u].z, fma(_1901, cbModelParam._m0[9u].y, _1900 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1902, cbModelParam._m0[10u].z, fma(_1901, cbModelParam._m0[10u].y, _1900 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1902, cbModelParam._m0[11u].z, fma(_1901, cbModelParam._m0[11u].y, _1900 * cbModelParam._m0[11u].x))), _1313);
            frontier_phi_15_37_ladder = _2030.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2030.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2030.x * cbModelParam._m0[1u].y;
        }
        _1395 = frontier_phi_15_37_ladder_2;
        _1397 = frontier_phi_15_37_ladder_1;
        _1399 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1313);
        _1395 = _1383.x * cbModelParam._m0[1u].y;
        _1397 = _1383.y * cbModelParam._m0[1u].y;
        _1399 = _1383.z * cbModelParam._m0[1u].y;
    }
    float _1403 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _323);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1403 : min(cbModelParam._m0[25u].w, _1403));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1461 = fma(_564, cbModelParam._m0[21u].z, fma(_560, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556)) + cbModelParam._m0[21u].w;
        float _1465 = fma(_564, cbModelParam._m0[22u].z, fma(_560, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556)) + cbModelParam._m0[22u].w;
        float _1469 = fma(_564, cbModelParam._m0[23u].z, fma(_560, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556)) + cbModelParam._m0[23u].w;
        float _1472 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1475 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1478 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1641;
        if (_1472 > 0.0)
        {
            _1641 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1641 = frontier_phi_27_23_ladder;
        }
        float _1920;
        if (_1475 > 0.0)
        {
            _1920 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1920 = frontier_phi_39_34_ladder;
        }
        float _2133;
        if (_1478 > 0.0)
        {
            _2133 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2133 = frontier_phi_48_45_ladder;
        }
        float _2135 = isnan(_1920) ? _1641 : (isnan(_1641) ? _1920 : min(_1641, _1920));
        float _2136 = isnan(_2133) ? _2135 : (isnan(_2135) ? _2133 : min(_2135, _2133));
        float _2140 = (_2136 * _1472) + _1461;
        float _2141 = (_2136 * _1475) + _1465;
        float _2142 = (_2136 * _1478) + _1469;
        float _2143 = _2136 * 9.9999997473787516355514526367188e-05;
        float _2144 = (-1.0) - _2143;
        float _2146 = _2143 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2142 > _2146) || ((_2142 < _2144) || ((_2141 > _2146) || ((_2141 < _2144) || ((_2140 < _2144) || (_2140 > _2146))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2142, cbModelParam._m0[17u].z, fma(_2141, cbModelParam._m0[17u].y, _2140 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2142, cbModelParam._m0[18u].z, fma(_2141, cbModelParam._m0[18u].y, _2140 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2142, cbModelParam._m0[19u].z, fma(_2141, cbModelParam._m0[19u].y, _2140 * cbModelParam._m0[19u].x))), _1404);
            frontier_phi_24_48_ladder = _2369.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2369.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2369.x * cbModelParam._m0[1u].z;
        }
        _1497 = frontier_phi_24_48_ladder_2;
        _1499 = frontier_phi_24_48_ladder_1;
        _1501 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1404);
        _1497 = _1481.x * cbModelParam._m0[1u].z;
        _1499 = _1481.y * cbModelParam._m0[1u].z;
        _1501 = _1481.z * cbModelParam._m0[1u].z;
    }
    float _1514 = (((_527 * _477) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_527 * _479) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1518 = (((_527 * _480) + _528) * _492) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1521 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, _1514 * cbSceneParam._m0[91u].x));
    vec4 _1535 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_410, _411));
    float _1537 = _1535.w;
    float _1549 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1537);
    float _1550 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1537);
    float _1551 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1537);
    uvec4 _1555 = floatBitsToUint(cbInstanceData._m0[_451 + 5u]);
    uint _1557 = _1555.x * 14u;
    uint _1558 = _1557 + 13u;
    float _1565 = _492 + (-1.0);
    float _1570 = (cbLight._m0[_1558].x * _1565) + 1.0;
    float _1571 = (cbLight._m0[_1558].y * _1565) + 1.0;
    float _1572 = (cbLight._m0[_1558].z * _1565) + 1.0;
    float _1573 = (cbLight._m0[_1558].w * _1565) + 1.0;
    uint _1574 = _1557 + 5u;
    float _1580 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1584 = _1557 + 4u;
    float _1594 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
    uint _1598 = _1557 | 1u;
    float _1609 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_320, _321, _322));
    float _1612 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_320, _321, _322));
    float _3781 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _3792 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1617 = (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * 0.3183098733425140380859375;
    float _1619 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.3183098733425140380859375;
    float _1626 = ((cbLight._m0[_1574].x * _1580) * _1619) + (((cbLight._m0[_1584].x * _1549) * _1594) * _1617);
    float _1627 = ((_1580 * cbLight._m0[_1574].y) * _1619) + (((cbLight._m0[_1584].y * _1550) * _1594) * _1617);
    float _1628 = ((_1580 * cbLight._m0[_1574].z) * _1619) + (((cbLight._m0[_1584].z * _1551) * _1594) * _1617);
    uvec4 _1633 = floatBitsToUint(cbLight._m0[_1557 + 12u]);
    bool _1635 = _1633.x == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1635)
    {
        _1646 = _1626;
        _1648 = _1627;
        _1650 = _1628;
    }
    else
    {
        uint _1654 = _1557 + 6u;
        float _1670 = (dot(vec3(cbLight._m0[_1557 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1671 = _1670 * _1670;
        float _3803 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1673 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1646 = (((cbLight._m0[_1654].x * 0.3183098733425140380859375) * _1672) * _1673) + _1626;
        _1648 = (((cbLight._m0[_1654].y * 0.3183098733425140380859375) * _1672) * _1673) + _1627;
        _1650 = (((cbLight._m0[_1654].z * 0.3183098733425140380859375) * _1672) * _1673) + _1628;
    }
    bool _1653 = _1633.y == 0u;
    float _1691;
    float _1693;
    float _1695;
    if (_1653)
    {
        _1691 = _1646;
        _1693 = _1648;
        _1695 = _1650;
    }
    else
    {
        uint _1864 = _1557 + 7u;
        float _1880 = (dot(vec3(cbLight._m0[_1557 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1881 = _1880 * _1880;
        float _3819 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1883 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1691 = (((cbLight._m0[_1864].x * 0.3183098733425140380859375) * _1882) * _1883) + _1646;
        _1693 = (((cbLight._m0[_1864].y * 0.3183098733425140380859375) * _1882) * _1883) + _1648;
        _1695 = (((cbLight._m0[_1864].z * 0.3183098733425140380859375) * _1882) * _1883) + _1650;
    }
    uint _1698 = _1557 + 8u;
    float _1711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _323) * 0.949999988079071044921875);
    float _1712 = _1711 * _1711;
    float _1713 = cbLight._m0[_1557].x + _402;
    float _1714 = cbLight._m0[_1557].y + _403;
    float _1715 = cbLight._m0[_1557].z + _404;
    float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
    float _1720 = _1719 * _1713;
    float _1721 = _1719 * _1714;
    float _1722 = _1719 * _1715;
    float _1723 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1557].xyz));
    float _3835 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _1727 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _1728 = dot(vec3(_320, _321, _322), vec3(_1720, _1721, _1722));
    float _3857 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1731 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _1732 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1720, _1721, _1722));
    float _3868 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1736 = _1712 * _1712;
    float _1740 = ((_1731 * _1731) * (_1736 + (-1.0))) + 1.0;
    float _1748 = exp2(log2(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * 5.0);
    float _1749 = 0.959999978542327880859375 - _474;
    float _1751 = 0.959999978542327880859375 - _475;
    float _1752 = 0.959999978542327880859375 - _476;
    float _1759 = 1.0 - _1712;
    float _1770 = (0.5 / (((_1727 * ((_1726 * _1759) + _1712)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1759) + _1712) * _1726))) * _1726;
    float _3879 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1772 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1736 / ((_1740 * _1740) * 3.141590118408203125));
    uint _1786 = _1557 + 9u;
    float _1797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1598].w)) * _323) * 0.949999988079071044921875);
    float _1798 = _1797 * _1797;
    float _1799 = cbLight._m0[_1598].x + _402;
    float _1800 = cbLight._m0[_1598].y + _403;
    float _1801 = cbLight._m0[_1598].z + _404;
    float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
    float _1806 = _1805 * _1799;
    float _1807 = _1805 * _1800;
    float _1808 = _1805 * _1801;
    float _1809 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1598].xyz));
    float _3890 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1813 = dot(vec3(_320, _321, _322), vec3(_1806, _1807, _1808));
    float _3901 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _1817 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_1806, _1807, _1808));
    float _3912 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1821 = _1798 * _1798;
    float _1825 = ((_1816 * _1816) * (_1821 + (-1.0))) + 1.0;
    float _1832 = exp2(log2(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * 5.0);
    float _1839 = 1.0 - _1798;
    float _1849 = (0.5 / (((_1727 * ((_1812 * _1839) + _1798)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1839) + _1798) * _1812))) * _1812;
    float _3923 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1851 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1821 / ((_1825 * _1825) * 3.141590118408203125));
    float _1861 = (((((_1832 * _1749) + _477) * cbLight._m0[_1786].x) * _1851) * _1580) + ((((cbLight._m0[_1698].x * _1549) * ((_1748 * _1749) + _477)) * _1772) * _1594);
    float _1862 = (((((_1832 * _1751) + _479) * cbLight._m0[_1786].y) * _1851) * _1580) + ((((cbLight._m0[_1698].y * _1550) * ((_1748 * _1751) + _479)) * _1772) * _1594);
    float _1863 = (((((_1832 * _1752) + _480) * cbLight._m0[_1786].z) * _1851) * _1580) + ((((cbLight._m0[_1698].z * _1551) * ((_1748 * _1752) + _480)) * _1772) * _1594);
    float _1925;
    float _1927;
    float _1929;
    if (_1635)
    {
        _1925 = _1861;
        _1927 = _1862;
        _1929 = _1863;
    }
    else
    {
        uint _1931 = _1557 + 2u;
        uint _1935 = _1557 + 10u;
        float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _323) * 0.949999988079071044921875);
        float _1950 = _1949 * _1949;
        float _1951 = cbLight._m0[_1931].x + _402;
        float _1952 = cbLight._m0[_1931].y + _403;
        float _1953 = cbLight._m0[_1931].z + _404;
        float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
        float _1958 = _1957 * _1951;
        float _1959 = _1957 * _1952;
        float _1960 = _1957 * _1953;
        float _1961 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1931].xyz));
        float _3934 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1964 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1965 = dot(vec3(_320, _321, _322), vec3(_1958, _1959, _1960));
        float _3945 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1968 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1969 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_1958, _1959, _1960));
        float _3956 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1973 = _1950 * _1950;
        float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
        float _1984 = exp2(log2(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * 5.0);
        float _1991 = 1.0 - _1950;
        float _2001 = (0.5 / (((_1727 * ((_1964 * _1991) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1991) + _1950) * _1964))) * _1964;
        float _3967 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2003 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
        float _2004 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1925 = (((((_1984 * _1749) + _477) * cbLight._m0[_1935].x) * _2003) * _2004) + _1861;
        _1927 = (((((_1984 * _1751) + _479) * cbLight._m0[_1935].y) * _2003) * _2004) + _1862;
        _1929 = (((((_1984 * _1752) + _480) * cbLight._m0[_1935].z) * _2003) * _2004) + _1863;
    }
    float _2039;
    float _2041;
    float _2043;
    if (_1653)
    {
        _2039 = _1925;
        _2041 = _1927;
        _2043 = _1929;
    }
    else
    {
        uint _2050 = _1557 + 3u;
        uint _2054 = _1557 + 11u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _323) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _402;
        float _2071 = cbLight._m0[_2050].y + _403;
        float _2072 = cbLight._m0[_2050].z + _404;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2050].xyz));
        float _3983 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2084 = dot(vec3(_320, _321, _322), vec3(_2077, _2078, _2079));
        float _3994 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _4005 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0);
        float _2110 = 1.0 - _2069;
        float _2120 = (0.5 / (((_1727 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _2110) + _2069) * _2083))) * _2083;
        float _4016 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _2039 = (((((_2103 * _1749) + _477) * cbLight._m0[_2054].x) * _2122) * _2123) + _1925;
        _2041 = (((((_2103 * _1751) + _479) * cbLight._m0[_2054].y) * _2122) * _2123) + _1927;
        _2043 = (((((_2103 * _1752) + _480) * cbLight._m0[_2054].z) * _2122) * _2123) + _1929;
    }
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    if (_1555.y == 0u)
    {
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2198;
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2198;
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2198;
        uvec4 _2213 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2214 = _2213.x;
        uint _2225 = uint((float(_2213.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _2214))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _2214)));
        float _2235 = (log2(_2201 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2236 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        uint _2239 = uint(isnan(14.0) ? _2236 : (isnan(_2236) ? 14.0 : min(_2236, 14.0)));
        uvec4 _2244 = texelFetch(g_lightClusterGridBuffer, int(((_2239 << 2u) + (_2225 << 6u)) >> 2u));
        uint _2245 = _2244.x;
        uint _2246 = _2213.z;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((((1u << ((_2246 >> 4u) & 15u)) + 4294967295u) & _2245) == 0u) || ((_2246 & 240u) == 0u))
        {
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
        }
        else
        {
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            uint _2570 = 0u;
            uint _2579;
            bool _2580;
            for (;;)
            {
                _2579 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                _2580 = _2579 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2580)
                {
                    frontier_phi_63_pred = _2569;
                    frontier_phi_63_pred_1 = _2568;
                    frontier_phi_63_pred_2 = _2567;
                    frontier_phi_63_pred_3 = _2566;
                    frontier_phi_63_pred_4 = _2565;
                    frontier_phi_63_pred_5 = _2564;
                }
                else
                {
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    uint _2694;
                    _2688 = _2564;
                    _2689 = _2565;
                    _2690 = _2566;
                    _2691 = _2567;
                    _2692 = _2568;
                    _2693 = _2569;
                    _2694 = _2579;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    for (;;)
                    {
                        uint _2698 = uint(findLSB(_2694)) + (_2570 << 5u);
                        uint _2695 = (_2694 + 4294967295u) & _2694;
                        uint _2700 = _2698 * 48u;
                        vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 3u)).x));
                        uint _2720 = (_2698 * 48u) + 4u;
                        vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 3u)).x));
                        uint _2739 = (_2698 * 48u) + 8u;
                        vec3 _2750 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x));
                        float _2754 = _2714.x - _2199;
                        float _2755 = _2714.y - _2200;
                        float _2756 = _2714.z - _2201;
                        float _2757 = dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756));
                        float _2760 = inversesqrt(_2757);
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2764 = dot(vec3(_432, _435, _438), vec3(_2761, _2762, _2763));
                        float _2769 = 1.0 - (_2757 * _2714.w);
                        float _4042 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2770 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2771 = sqrt(_2757) * _2733.w;
                        float _2774 = 1.39999997615814208984375 / (_2771 + 1.39999997615814208984375);
                        float _2775 = _2774 * _2774;
                        float _2778 = ((1.0 - _2775) * _2764) + _2775;
                        float _2781 = _2771 * _2771;
                        float _2785 = ((isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0))) * _2770) / ((_2781 * 0.699999988079071044921875) + 1.0);
                        float _2789 = (-0.0) - _2199;
                        float _2790 = (-0.0) - _2200;
                        float _2791 = (-0.0) - _2201;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2806 = exp2(log2(1.0 / ((_2781 * 3.5) + 5.0)) * 0.25);
                        float _2807 = 1.0 - _508;
                        float _2814 = sqrt(1.0 - ((1.0 - (_2807 * _2807)) * (1.0 - (_2806 * _2806))));
                        float _2815 = _2814 * _2814;
                        float _2816 = _2815 * _2815;
                        float _2817 = _2796 + _2761;
                        float _2818 = _2797 + _2762;
                        float _2819 = _2798 + _2763;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2827 = dot(vec3(_432, _435, _438), vec3(_2796, _2797, _2798));
                        float _4058 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2830 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2831 = dot(vec3(_432, _435, _438), vec3(_2823 * _2817, _2823 * _2818, _2823 * _2819));
                        float _4069 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2834 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                        float _2838 = ((_2834 * _2834) * (_2816 + (-1.0))) + 1.0;
                        float _2839 = _2774 * _2815;
                        float _2840 = _2839 * _2839;
                        float _2843 = ((1.0 - _2840) * _2764) + _2840;
                        float _4080 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2844 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2845 = 1.0 - _2815;
                        float _2855 = (0.5 / (((_2844 * ((_2830 * _2845) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2844 * _2845) + _2815) * _2830))) * _2844;
                        float _4091 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2866 = (((_2816 * 3.1415927410125732421875) * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) / ((_2838 * _2838) * ((_2781 * 2.1991131305694580078125) + 3.141590118408203125))) * _2770;
                        _2623 = (_2785 * _2733.x) + _2691;
                        _2624 = (_2785 * _2733.y) + _2692;
                        _2625 = (_2785 * _2733.z) + _2693;
                        _2620 = (_2866 * _2750.x) + _2688;
                        _2621 = (_2866 * _2750.y) + _2689;
                        _2622 = (_2866 * _2750.z) + _2690;
                        if (_2695 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2688 = _2620;
                            _2689 = _2621;
                            _2690 = _2622;
                            _2691 = _2623;
                            _2692 = _2624;
                            _2693 = _2625;
                            _2694 = _2695;
                        }
                    }
                    frontier_phi_63_pred = _2625;
                    frontier_phi_63_pred_1 = _2624;
                    frontier_phi_63_pred_2 = _2623;
                    frontier_phi_63_pred_3 = _2622;
                    frontier_phi_63_pred_4 = _2621;
                    frontier_phi_63_pred_5 = _2620;
                }
                _2385 = frontier_phi_63_pred;
                _2383 = frontier_phi_63_pred_1;
                _2381 = frontier_phi_63_pred_2;
                _2379 = frontier_phi_63_pred_3;
                _2377 = frontier_phi_63_pred_4;
                _2375 = frontier_phi_63_pred_5;
                uint _2571 = _2570 + 1u;
                if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2564 = _2375;
                    _2565 = _2377;
                    _2566 = _2379;
                    _2567 = _2381;
                    _2568 = _2383;
                    _2569 = _2385;
                    _2570 = _2571;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
        }
        uvec4 _2388 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2389 = _2388.z;
        uint _2391 = (_2389 >> 8u) & 15u;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        if (((4294967295u << _2391) & _2245) == 0u)
        {
            _2532 = _2374;
            _2534 = _2376;
            _2536 = _2378;
            _2538 = _2380;
            _2540 = _2382;
            _2542 = _2384;
        }
        else
        {
            float _2557 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
            float _2558 = _2557 * _2199;
            float _2559 = _2557 * _2200;
            float _2560 = _2557 * _2201;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2391 < ((_2389 >> 12u) & 15u))
            {
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2671 = _2374;
                float _2672 = _2376;
                float _2673 = _2378;
                float _2674 = _2380;
                float _2675 = _2382;
                float _2676 = _2384;
                uint _2677 = _2391;
                uint _2686;
                bool _2687;
                for (;;)
                {
                    _2686 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2677 << 2u)) >> 2u)).x;
                    _2687 = _2686 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2687)
                    {
                        frontier_phi_69_pred = _2676;
                        frontier_phi_69_pred_1 = _2675;
                        frontier_phi_69_pred_2 = _2674;
                        frontier_phi_69_pred_3 = _2673;
                        frontier_phi_69_pred_4 = _2672;
                        frontier_phi_69_pred_5 = _2671;
                    }
                    else
                    {
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _2884 = _2671;
                        float _2885 = _2672;
                        float _2886 = _2673;
                        float _2887 = _2674;
                        float _2888 = _2675;
                        float _2889 = _2676;
                        uint _2890 = _2686;
                        uint _2891;
                        vec4 _2916;
                        float _2917;
                        vec4 _2932;
                        vec3 _2944;
                        vec4 _2960;
                        vec4 _2976;
                        float _3023;
                        bool _3024;
                        for (;;)
                        {
                            uint _2901 = ((_2677 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2890));
                            _2891 = (_2890 + 4294967295u) & _2890;
                            uint _2903 = _2901 * 40u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2917 = _2916.w;
                            uint _2919 = (_2901 * 40u) + 4u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2934 = (_2901 * 40u) + 8u;
                            _2944 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x));
                            uint _2947 = (_2901 * 40u) + 16u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2963 = (_2901 * 40u) + 20u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2979 = (_2901 * 40u) + 24u;
                            vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2998 = (_2901 * 40u) + 28u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            _3023 = fma(_2201, _3011.z, fma(_2200, _3011.y, _3011.x * _2199)) + _3011.w;
                            _3024 = !((fma(_2201, _2992.z, fma(_2200, _2992.y, _2992.x * _2199)) + _2992.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3024)
                            {
                                float _3051 = _2916.x - _2199;
                                float _3052 = _2916.y - _2200;
                                float _3053 = _2916.z - _2201;
                                float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                                float _3057 = inversesqrt(_3054);
                                float _3058 = _3057 * _3051;
                                float _3059 = _3057 * _3052;
                                float _3060 = _3057 * _3053;
                                float _3064 = 1.0 - (_3054 / (_2917 * _2917));
                                float _4102 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3069 = sqrt(_3054) * _2932.w;
                                float _3071 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                                float _3072 = _3071 * _3071;
                                float _3075 = ((1.0 - _3072) * dot(vec3(_3058, _3059, _3060), vec3(_432, _435, _438))) + _3072;
                                float _3078 = _3069 * _3069;
                                float _3082 = (fma(_2201, _2960.z, fma(_2200, _2960.y, _2960.x * _2199)) + _2960.w) / _3023;
                                float _3083 = (fma(_2201, _2976.z, fma(_2200, _2976.y, _2976.x * _2199)) + _2976.w) / _3023;
                                float _3087 = 1.0 - dot(vec2(_3082, _3083), vec2(_3082, _3083));
                                float _4118 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3089 = _3088 * (((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3065) / ((_3078 * 0.699999988079071044921875) + 1.0));
                                float _3101 = exp2(log2(1.0 / ((_3078 * 3.5) + 5.0)) * 0.25);
                                float _3102 = 1.0 - _508;
                                float _3109 = sqrt(1.0 - ((1.0 - (_3102 * _3102)) * (1.0 - (_3101 * _3101))));
                                float _3110 = _3109 * _3109;
                                float _3111 = _3110 * _3110;
                                float _3112 = _3058 - _2558;
                                float _3113 = _3059 - _2559;
                                float _3114 = _3060 - _2560;
                                float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                                float _3122 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2558, (-0.0) - _2559, (-0.0) - _2560));
                                float _4129 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3125 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3126 = dot(vec3(_432, _435, _438), vec3(_3118 * _3112, _3118 * _3113, _3118 * _3114));
                                float _4140 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3133 = ((_3129 * _3129) * (_3111 + (-1.0))) + 1.0;
                                float _3134 = _3071 * _3110;
                                float _3135 = _3134 * _3134;
                                float _3141 = ((1.0 - _3135) * dot(vec3(_432, _435, _438), vec3(_3058, _3059, _3060))) + _3135;
                                float _4151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3143 = 1.0 - _3110;
                                float _3153 = (0.5 / (((_3142 * ((_3125 * _3143) + _3110)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3110) * _3125))) * _3142;
                                float _4162 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3163 = (_3088 * _3065) * (((_3111 * 3.1415927410125732421875) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) / ((_3133 * _3133) * ((_3078 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3089 * _2932.z;
                                frontier_phi_75_pred_1 = _3089 * _2932.y;
                                frontier_phi_75_pred_2 = _3089 * _2932.x;
                                frontier_phi_75_pred_3 = _3163 * _2944.z;
                                frontier_phi_75_pred_4 = _3163 * _2944.y;
                                frontier_phi_75_pred_5 = _3163 * _2944.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3172 = frontier_phi_75_pred;
                            _3171 = frontier_phi_75_pred_1;
                            _3170 = frontier_phi_75_pred_2;
                            _3169 = frontier_phi_75_pred_3;
                            _3168 = frontier_phi_75_pred_4;
                            _3167 = frontier_phi_75_pred_5;
                            _2874 = _3170 + _2887;
                            _2875 = _3171 + _2888;
                            _2876 = _3172 + _2889;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            _2873 = _3169 + _2886;
                            if (_2891 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2891;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2876;
                        frontier_phi_69_pred_1 = _2875;
                        frontier_phi_69_pred_2 = _2874;
                        frontier_phi_69_pred_3 = _2873;
                        frontier_phi_69_pred_4 = _2872;
                        frontier_phi_69_pred_5 = _2871;
                    }
                    _2543 = frontier_phi_69_pred;
                    _2541 = frontier_phi_69_pred_1;
                    _2539 = frontier_phi_69_pred_2;
                    _2537 = frontier_phi_69_pred_3;
                    _2535 = frontier_phi_69_pred_4;
                    _2533 = frontier_phi_69_pred_5;
                    uint _2678 = _2677 + 1u;
                    if (_2678 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2671 = _2533;
                        _2672 = _2535;
                        _2673 = _2537;
                        _2674 = _2539;
                        _2675 = _2541;
                        _2676 = _2543;
                        _2677 = _2678;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2543;
                frontier_phi_57_58_ladder_1 = _2541;
                frontier_phi_57_58_ladder_2 = _2539;
                frontier_phi_57_58_ladder_3 = _2537;
                frontier_phi_57_58_ladder_4 = _2535;
                frontier_phi_57_58_ladder_5 = _2533;
            }
            else
            {
                frontier_phi_57_58_ladder = _2384;
                frontier_phi_57_58_ladder_1 = _2382;
                frontier_phi_57_58_ladder_2 = _2380;
                frontier_phi_57_58_ladder_3 = _2378;
                frontier_phi_57_58_ladder_4 = _2376;
                frontier_phi_57_58_ladder_5 = _2374;
            }
            _2532 = frontier_phi_57_58_ladder_5;
            _2534 = frontier_phi_57_58_ladder_4;
            _2536 = frontier_phi_57_58_ladder_3;
            _2538 = frontier_phi_57_58_ladder_2;
            _2540 = frontier_phi_57_58_ladder_1;
            _2542 = frontier_phi_57_58_ladder;
        }
        float _2547 = isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0));
        _2257 = (_2547 * _2538) + _1691;
        _2259 = (_2547 * _2540) + _1693;
        _2261 = (_2547 * _2542) + _1695;
        _2263 = ((_2532 * _477) * _2547) + _2039;
        _2265 = ((_2534 * _479) * _2547) + _2041;
        _2267 = ((_2536 * _480) * _2547) + _2043;
    }
    else
    {
        _2257 = _1691;
        _2259 = _1693;
        _2261 = _1695;
        _2263 = _2039;
        _2265 = _2041;
        _2267 = _2043;
    }
    uint _2273 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _2279 = (_299.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2273].x;
    float _2280 = (_299.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2273].y;
    float _2281 = (_299.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2273].z;
    float _4178 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4189 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4200 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _2298 = (((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2257 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _492))) + ((_2263 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + _2279;
    float _2300 = (_2280 + ((_2265 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2259 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _492)));
    float _2302 = (_2281 + ((_2267 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2261 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _492)));
    float _4226 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2315 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2324 = _410 / cbSceneParam._m0[86u].x;
    float _2325 = _411 / cbSceneParam._m0[86u].y;
    vec4 _2339 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2341 = _2339.x;
    float _2342 = _2339.y;
    float _2343 = _2339.z;
    float _2344 = _2339.w;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2399 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2400 = _2399 / _343;
        float _2411 = _2400 * _395;
        float _2412 = _396 * _2400;
        float _2413 = (-0.0) - _2412;
        float _2414 = _2400 * _397;
        float _2416 = (cbSceneParam._m0[77u].w * _2413) / _2399;
        float _2417 = _2416 + cbSceneParam._m0[79u].w;
        float _2418 = cbSceneParam._m0[79u].w - _2412;
        float _2424 = sqrt(((_2411 * _2411) + (_2412 * _2412)) + (_2414 * _2414));
        float _2427 = (1.0 - (cbSceneParam._m0[77u].w / _2399)) * _2424;
        float _2432 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2434 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2633;
        if (abs((_2413 - _2416) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2633 = ((((_2417 > 0.0) ? exp2(_2432 * _2417) : (2.0 - exp2(_2434 * _2417))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2427;
        }
        else
        {
            float _2593 = 1.0 / cbSceneParam._m0[80u].x;
            float _2594 = isnan(_2418) ? _2417 : (isnan(_2417) ? _2418 : max(_2417, _2418));
            float _2595 = isnan(_2418) ? _2417 : (isnan(_2417) ? _2418 : min(_2417, _2418));
            float _2604 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : min(_2594, 0.0));
            float _2605 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : min(_2595, 0.0));
            _2633 = ((abs(_2424 / _2413) * cbSceneParam._m0[80u].y) * ((((_2604 - _2605) * 2.0) - ((exp2(_2432 * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)))) - exp2(_2432 * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0))))) * _2593)) - ((exp2(_2434 * _2604) - exp2(_2434 * _2605)) * _2593))) + (_2427 * cbSceneParam._m0[80u].z);
        }
        vec4 _2635 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, 1.0), 0.0);
        float _2644 = exp2((_2633 * (-1.44269502162933349609375)) * (1.0 - _2635.w));
        float _2645 = log2(_2644);
        float _2661 = log2(_2344);
        _2436 = (exp2(_2661 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2645 * cbSceneParam._m0[78u].x)) * _2635.x) / cbSceneParam._m0[78u].x)) + _2341;
        _2438 = (exp2(_2661 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2645 * cbSceneParam._m0[78u].y)) * _2635.y) / cbSceneParam._m0[78u].y)) + _2342;
        _2440 = (exp2(_2661 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2645 * cbSceneParam._m0[78u].z)) * _2635.z) / cbSceneParam._m0[78u].z)) + _2343;
        _2442 = _2644 * _2344;
    }
    else
    {
        _2436 = _2341;
        _2438 = _2342;
        _2440 = _2343;
        _2442 = _2344;
    }
    bool _2455 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2456 = log2(_2442);
    float _2460 = exp2(_2456 * cbSceneParam._m0[78u].x);
    float _2461 = exp2(_2456 * cbSceneParam._m0[78u].y);
    float _2462 = exp2(_2456 * cbSceneParam._m0[78u].z);
    float _2463 = _2460 * (isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0)));
    float _2464 = _2461 * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)));
    float _2465 = _2462 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    vec4 _2473 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_410, _411));
    float _2475 = _2473.x;
    float _2496 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2475)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2475))) - _343) * 0.100000001490116119384765625;
    float _4277 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2498 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2499 = _2498 * cbInstanceData._m0[_451 + 6u].w;
    float _2508 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2508 * (_2455 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2436)));
    SV_Target.y = _2508 * (_2455 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2438)));
    SV_Target.z = _2508 * (_2455 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2440)));
    SV_Target.w = _2499;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2279) * _2315) * _2460) * _2498) * _2508;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2280) * _2315) * _2461) * _2498) * _2508;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2281) * _2315) * _2462) * _2498) * _2508;
    SV_Target_1.w = _2499;
}


