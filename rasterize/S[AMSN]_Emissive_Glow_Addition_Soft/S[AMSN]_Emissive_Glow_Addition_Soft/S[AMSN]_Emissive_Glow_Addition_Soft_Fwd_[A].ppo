#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _910;
float _3376;
float _3377;
float _3378;
float _3379;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _235 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = _235.x;
    float _239 = _235.y;
    float _240 = _235.z;
    vec4 _256 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _256.x + cbMtdParam._m0[9u].x;
    vec4 _271 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _275 = _271.z;
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3388 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))));
    vec4 _301 = texture(sampler2D(S_AMSN_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _311 = fma(_288, _219, fma(_281, _211 * TANGENT.x, (_197 * _190) * _279));
    float _314 = fma(_288, _220, fma(_281, _211 * TANGENT.y, (_197 * _191) * _279));
    float _317 = fma(_288, _221, fma(_281, _211 * TANGENT.z, (_197 * _192) * _279));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _3399 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _325 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _3410 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3421 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3432 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3443 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _329 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _345 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    vec4 _411 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _413 = _411.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _589 = sqrt(((_397 * _397) + (_398 * _398)) + (_399 * _399));
        float _595 = (cbMatDynParam._m0[5u].x * _589) + cbMatDynParam._m0[5u].y;
        float _3454 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _600 = (cbMatDynParam._m0[5u].z * _589) + cbMatDynParam._m0[5u].w;
        float _3465 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) - _596)) + _596) < ((_413 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_324, cbSceneParam._m0[5u].z, fma(_323, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _322));
    float _449 = fma(_324, cbSceneParam._m0[6u].z, fma(_323, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _322));
    float _452 = fma(_324, cbSceneParam._m0[7u].z, fma(_323, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _322));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3476 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _480 = 1.0 - _329;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _329;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _329;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _329;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _506 = _503.x * TEXCOORD.z;
    float _507 = dot(vec3(_322, _323, _324), vec3(_404, _405, _406));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _322) - _404;
    float _515 = (_510 * _323) - _405;
    float _516 = (_510 * _324) - _406;
    float _520 = abs(dot(vec3(_404, _405, _406), vec3(_322, _323, _324)));
    float _3509 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_325);
    float _535 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _541 = (1.0 - _535) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _522;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _909;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _634 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _638 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _642 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _667 = _570 + _322;
        float _668 = _574 + _323;
        float _669 = _578 + _324;
        float _679 = fma(_669, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667)) - _634;
        float _680 = fma(_669, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667)) - _638;
        float _681 = fma(_669, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667)) - _642;
        float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
        float _698 = ((_685 * _679) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_634 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_685 * _680) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_638 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_685 * _681) / cbModelParam._m0[34u].z) + ((((((_642 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        float _737 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_703.x + (-0.5));
        float _739 = _737 * (_703.y + (-0.5));
        float _740 = _737 * (_703.z + (-0.5));
        float _747 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_710.x + (-0.5));
        float _749 = _747 * (_710.y + (-0.5));
        float _750 = _747 * (_710.z + (-0.5));
        float _757 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_717.x + (-0.5));
        float _759 = _757 * (_717.y + (-0.5));
        float _760 = _757 * (_717.z + (-0.5));
        float _767 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_724.x + (-0.5));
        float _769 = _767 * (_724.y + (-0.5));
        float _770 = _767 * (_724.z + (-0.5));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = _738 * 0.5;
        float _775 = _748 * 0.5;
        float _776 = _758 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _791 = (dot(vec3(_322, _323, _324), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _801 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3557 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_803 + 1.0))) + _808) * _771;
        float _818 = _739 * 0.5;
        float _819 = _749 * 0.5;
        float _820 = _759 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_322, _323, _324), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3590 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_845 + 1.0))) + _850) * _772;
        float _860 = _740 * 0.5;
        float _861 = _750 * 0.5;
        float _862 = _760 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_322, _323, _324), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3623 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_887 + 1.0))) + _892) * _773;
        _909 = _740;
        _911 = _739;
        _912 = _738;
        _913 = _750;
        _914 = _749;
        _915 = _748;
        _916 = _760;
        _917 = _759;
        _918 = _758;
        _919 = _773;
        _920 = _772;
        _921 = _771;
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
    }
    else
    {
        _909 = _910;
        _911 = _910;
        _912 = _910;
        _913 = _910;
        _914 = _910;
        _915 = _910;
        _916 = _910;
        _917 = _910;
        _918 = _910;
        _919 = _910;
        _920 = _910;
        _921 = _910;
        _922 = 0.0;
        _923 = 0.0;
        _924 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _957 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _961 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _984 = _570 + _322;
        float _985 = _574 + _323;
        float _986 = _578 + _324;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_322, _323, _324), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3686 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_322, _323, _324), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3719 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_322, _323, _324), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3752 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _910;
        _1223 = _910;
        _1224 = _910;
        _1225 = _910;
        _1226 = _910;
        _1227 = _910;
        _1228 = _910;
        _1229 = _910;
        _1230 = _910;
        _1231 = _910;
        _1232 = _910;
        _1233 = _910;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _923)) + _923;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _514 * 0.5;
    float _1291 = _515 * 0.5;
    float _1292 = _516 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_909, _913, _916, _919));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_911, _914, _917, _920));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _915, _918, _921));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _325);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1422 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1425 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1453 = frontier_phi_19_17_ladder;
        }
        float _1661;
        if (_1422 > 0.0)
        {
            _1661 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1661 = frontier_phi_28_24_ladder;
        }
        float _1915;
        if (_1425 > 0.0)
        {
            _1915 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1915 = frontier_phi_40_35_ladder;
        }
        float _1917 = isnan(_1661) ? _1453 : (isnan(_1453) ? _1661 : min(_1453, _1661));
        float _1918 = isnan(_1915) ? _1917 : (isnan(_1917) ? _1915 : min(_1917, _1915));
        float _1922 = (_1918 * _1419) + _1408;
        float _1923 = (_1918 * _1422) + _1412;
        float _1924 = (_1918 * _1425) + _1416;
        float _1925 = _1918 * 9.9999997473787516355514526367188e-05;
        float _1927 = (-1.0) - _1925;
        float _1929 = _1925 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1924 > _1929) || ((_1924 < _1927) || ((_1923 > _1929) || ((_1923 < _1927) || ((_1922 < _1927) || (_1922 > _1929))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2052 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1924, cbModelParam._m0[9u].z, fma(_1923, cbModelParam._m0[9u].y, _1922 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1924, cbModelParam._m0[10u].z, fma(_1923, cbModelParam._m0[10u].y, _1922 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1924, cbModelParam._m0[11u].z, fma(_1923, cbModelParam._m0[11u].y, _1922 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_18_40_ladder = _2052.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2052.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2052.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_18_40_ladder_2;
        _1443 = frontier_phi_18_40_ladder_1;
        _1445 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _325);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1521 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1524 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1666;
        if (_1518 > 0.0)
        {
            _1666 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1666 = frontier_phi_30_26_ladder;
        }
        float _1942;
        if (_1521 > 0.0)
        {
            _1942 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1942 = frontier_phi_42_37_ladder;
        }
        float _2155;
        if (_1524 > 0.0)
        {
            _2155 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2155 = frontier_phi_51_48_ladder;
        }
        float _2157 = isnan(_1942) ? _1666 : (isnan(_1666) ? _1942 : min(_1666, _1942));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1518) + _1507;
        float _2163 = (_2158 * _1521) + _1511;
        float _2164 = (_2158 * _1524) + _1515;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2165;
        float _2168 = _2165 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2164 > _2168) || ((_2164 < _2166) || ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 < _2166) || (_2162 > _2168))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2164, cbModelParam._m0[17u].z, fma(_2163, cbModelParam._m0[17u].y, _2162 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2164, cbModelParam._m0[18u].z, fma(_2163, cbModelParam._m0[18u].y, _2162 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2164, cbModelParam._m0[19u].z, fma(_2163, cbModelParam._m0[19u].y, _2162 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_27_51_ladder = _2391.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2391.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2391.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_27_51_ladder_2;
        _1545 = frontier_phi_27_51_ladder_1;
        _1547 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1560 = (((_541 * _491) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_541 * _493) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_541 * _494) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    uvec4 _1583 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1585 = _1583.x * 14u;
    uint _1586 = _1585 + 13u;
    float _1593 = _506 + (-1.0);
    float _1598 = (cbLight._m0[_1586].x * _1593) + 1.0;
    float _1599 = (cbLight._m0[_1586].y * _1593) + 1.0;
    float _1600 = (cbLight._m0[_1586].z * _1593) + 1.0;
    float _1601 = (cbLight._m0[_1586].w * _1593) + 1.0;
    uint _1602 = _1585 + 5u;
    float _1608 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
    uint _1612 = _1585 + 4u;
    float _1619 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
    uint _1623 = _1585 | 1u;
    float _1634 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_322, _323, _324));
    float _1637 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_322, _323, _324));
    float _3888 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _3899 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1642 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.3183098733425140380859375;
    float _1644 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.3183098733425140380859375;
    float _1651 = ((cbLight._m0[_1602].x * _1608) * _1644) + ((cbLight._m0[_1612].x * _1619) * _1642);
    float _1652 = ((_1608 * cbLight._m0[_1602].y) * _1644) + ((_1619 * cbLight._m0[_1612].y) * _1642);
    float _1653 = ((_1608 * cbLight._m0[_1602].z) * _1644) + ((_1619 * cbLight._m0[_1612].z) * _1642);
    uvec4 _1658 = floatBitsToUint(cbLight._m0[_1585 + 12u]);
    bool _1660 = _1658.x == 0u;
    float _1671;
    float _1673;
    float _1675;
    if (_1660)
    {
        _1671 = _1651;
        _1673 = _1652;
        _1675 = _1653;
    }
    else
    {
        uint _1679 = _1585 + 6u;
        float _1695 = (dot(vec3(cbLight._m0[_1585 + 2u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _1696 = _1695 * _1695;
        float _3910 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1698 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1671 = (((cbLight._m0[_1679].x * 0.3183098733425140380859375) * _1697) * _1698) + _1651;
        _1673 = (((cbLight._m0[_1679].y * 0.3183098733425140380859375) * _1697) * _1698) + _1652;
        _1675 = (((cbLight._m0[_1679].z * 0.3183098733425140380859375) * _1697) * _1698) + _1653;
    }
    bool _1678 = _1658.y == 0u;
    float _1716;
    float _1718;
    float _1720;
    if (_1678)
    {
        _1716 = _1671;
        _1718 = _1673;
        _1720 = _1675;
    }
    else
    {
        uint _1886 = _1585 + 7u;
        float _1902 = (dot(vec3(cbLight._m0[_1585 + 3u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _1903 = _1902 * _1902;
        float _3926 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1905 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1716 = (((cbLight._m0[_1886].x * 0.3183098733425140380859375) * _1904) * _1905) + _1671;
        _1718 = (((cbLight._m0[_1886].y * 0.3183098733425140380859375) * _1904) * _1905) + _1673;
        _1720 = (((cbLight._m0[_1886].z * 0.3183098733425140380859375) * _1904) * _1905) + _1675;
    }
    uint _1723 = _1585 + 8u;
    float _1736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1585].w)) * _325) * 0.949999988079071044921875);
    float _1737 = _1736 * _1736;
    float _1738 = cbLight._m0[_1585].x + _404;
    float _1739 = cbLight._m0[_1585].y + _405;
    float _1740 = cbLight._m0[_1585].z + _406;
    float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
    float _1745 = _1744 * _1738;
    float _1746 = _1744 * _1739;
    float _1747 = _1744 * _1740;
    float _1748 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1585].xyz));
    float _3942 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _1752 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1753 = dot(vec3(_322, _323, _324), vec3(_1745, _1746, _1747));
    float _3964 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1756 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1757 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_1745, _1746, _1747));
    float _3975 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1761 = _1737 * _1737;
    float _1765 = ((_1756 * _1756) * (_1761 + (-1.0))) + 1.0;
    float _1773 = exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0);
    float _1774 = 0.959999978542327880859375 - _488;
    float _1776 = 0.959999978542327880859375 - _489;
    float _1777 = 0.959999978542327880859375 - _490;
    float _1784 = 1.0 - _1737;
    float _1795 = (0.5 / (((_1752 * ((_1751 * _1784) + _1737)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _1784) + _1737) * _1751))) * _1751;
    float _3986 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1797 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1761 / ((_1765 * _1765) * 3.141590118408203125));
    uint _1808 = _1585 + 9u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _325) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1623].x + _404;
    float _1822 = cbLight._m0[_1623].y + _405;
    float _1823 = cbLight._m0[_1623].z + _406;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1623].xyz));
    float _3997 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1835 = dot(vec3(_322, _323, _324), vec3(_1828, _1829, _1830));
    float _4008 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1839 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1828, _1829, _1830));
    float _4019 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1843 = _1820 * _1820;
    float _1847 = ((_1838 * _1838) * (_1843 + (-1.0))) + 1.0;
    float _1854 = exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0);
    float _1861 = 1.0 - _1820;
    float _1871 = (0.5 / (((_1752 * ((_1834 * _1861) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _1861) + _1820) * _1834))) * _1834;
    float _4030 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1873 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1843 / ((_1847 * _1847) * 3.141590118408203125));
    float _1883 = (((((_1854 * _1774) + _491) * cbLight._m0[_1808].x) * _1873) * _1608) + (((((_1773 * _1774) + _491) * cbLight._m0[_1723].x) * _1797) * _1619);
    float _1884 = (((((_1854 * _1776) + _493) * cbLight._m0[_1808].y) * _1873) * _1608) + (((((_1773 * _1776) + _493) * cbLight._m0[_1723].y) * _1797) * _1619);
    float _1885 = (((((_1854 * _1777) + _494) * cbLight._m0[_1808].z) * _1873) * _1608) + (((((_1773 * _1777) + _494) * cbLight._m0[_1723].z) * _1797) * _1619);
    float _1947;
    float _1949;
    float _1951;
    if (_1660)
    {
        _1947 = _1883;
        _1949 = _1884;
        _1951 = _1885;
    }
    else
    {
        uint _1953 = _1585 + 2u;
        uint _1957 = _1585 + 10u;
        float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _325) * 0.949999988079071044921875);
        float _1972 = _1971 * _1971;
        float _1973 = cbLight._m0[_1953].x + _404;
        float _1974 = cbLight._m0[_1953].y + _405;
        float _1975 = cbLight._m0[_1953].z + _406;
        float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
        float _1980 = _1979 * _1973;
        float _1981 = _1979 * _1974;
        float _1982 = _1979 * _1975;
        float _1983 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1953].xyz));
        float _4041 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1986 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1987 = dot(vec3(_322, _323, _324), vec3(_1980, _1981, _1982));
        float _4052 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1991 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_1980, _1981, _1982));
        float _4063 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1995 = _1972 * _1972;
        float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
        float _2006 = exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0);
        float _2013 = 1.0 - _1972;
        float _2023 = (0.5 / (((_1752 * ((_1986 * _2013) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _2013) + _1972) * _1986))) * _1986;
        float _4074 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2025 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
        float _2026 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1947 = (((((_2006 * _1774) + _491) * cbLight._m0[_1957].x) * _2025) * _2026) + _1883;
        _1949 = (((((_2006 * _1776) + _493) * cbLight._m0[_1957].y) * _2025) * _2026) + _1884;
        _1951 = (((((_2006 * _1777) + _494) * cbLight._m0[_1957].z) * _2025) * _2026) + _1885;
    }
    float _2061;
    float _2063;
    float _2065;
    if (_1678)
    {
        _2061 = _1947;
        _2063 = _1949;
        _2065 = _1951;
    }
    else
    {
        uint _2072 = _1585 + 3u;
        uint _2076 = _1585 + 11u;
        float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _325) * 0.949999988079071044921875);
        float _2091 = _2090 * _2090;
        float _2092 = cbLight._m0[_2072].x + _404;
        float _2093 = cbLight._m0[_2072].y + _405;
        float _2094 = cbLight._m0[_2072].z + _406;
        float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
        float _2099 = _2098 * _2092;
        float _2100 = _2098 * _2093;
        float _2101 = _2098 * _2094;
        float _2102 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2072].xyz));
        float _4090 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2106 = dot(vec3(_322, _323, _324), vec3(_2099, _2100, _2101));
        float _4101 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2099, _2100, _2101));
        float _4112 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2114 = _2091 * _2091;
        float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
        float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0);
        float _2132 = 1.0 - _2091;
        float _2142 = (0.5 / (((_1752 * ((_2105 * _2132) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _2132) + _2091) * _2105))) * _2105;
        float _4123 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _2061 = (((((_2125 * _1774) + _491) * cbLight._m0[_2076].x) * _2144) * _2145) + _1947;
        _2063 = (((((_2125 * _1776) + _493) * cbLight._m0[_2076].y) * _2144) * _2145) + _1949;
        _2065 = (((((_2125 * _1777) + _494) * cbLight._m0[_2076].z) * _2144) * _2145) + _1951;
    }
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    if (_1583.y == 0u)
    {
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2220;
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2220;
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2220;
        uvec4 _2235 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2236 = _2235.x;
        uint _2247 = uint((float(_2235.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2236))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2236)));
        float _2257 = (log2(_2223 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2258 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        uint _2261 = uint(isnan(14.0) ? _2258 : (isnan(_2258) ? 14.0 : min(_2258, 14.0)));
        uvec4 _2266 = texelFetch(g_lightClusterGridBuffer, int(((_2261 << 2u) + (_2247 << 6u)) >> 2u));
        uint _2267 = _2266.x;
        uint _2268 = _2235.z;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        if (((((1u << ((_2268 >> 4u) & 15u)) + 4294967295u) & _2267) == 0u) || ((_2268 & 240u) == 0u))
        {
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
        }
        else
        {
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            uint _2600 = 0u;
            uint _2609;
            bool _2610;
            for (;;)
            {
                _2609 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2600 << 2u)) >> 2u)).x;
                _2610 = _2609 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2610)
                {
                    frontier_phi_68_pred = _2596;
                    frontier_phi_68_pred_1 = _2599;
                    frontier_phi_68_pred_2 = _2598;
                    frontier_phi_68_pred_3 = _2597;
                    frontier_phi_68_pred_4 = _2595;
                    frontier_phi_68_pred_5 = _2594;
                }
                else
                {
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    uint _2745;
                    _2739 = _2594;
                    _2740 = _2595;
                    _2741 = _2596;
                    _2742 = _2597;
                    _2743 = _2598;
                    _2744 = _2599;
                    _2745 = _2609;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    for (;;)
                    {
                        uint _2749 = uint(findLSB(_2745)) + (_2600 << 5u);
                        uint _2746 = (_2745 + 4294967295u) & _2745;
                        uint _2751 = _2749 * 48u;
                        vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        uint _2771 = (_2749 * 48u) + 4u;
                        vec4 _2784 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 3u)).x));
                        uint _2790 = (_2749 * 48u) + 8u;
                        vec3 _2801 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x));
                        float _2805 = _2765.x - _2221;
                        float _2806 = _2765.y - _2222;
                        float _2807 = _2765.z - _2223;
                        float _2808 = dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807));
                        float _2811 = inversesqrt(_2808);
                        float _2812 = _2811 * _2805;
                        float _2813 = _2811 * _2806;
                        float _2814 = _2811 * _2807;
                        float _2815 = dot(vec3(_446, _449, _452), vec3(_2812, _2813, _2814));
                        float _2820 = 1.0 - (_2808 * _2765.w);
                        float _4149 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2821 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2822 = sqrt(_2808) * _2784.w;
                        float _2825 = 1.39999997615814208984375 / (_2822 + 1.39999997615814208984375);
                        float _2826 = _2825 * _2825;
                        float _2829 = ((1.0 - _2826) * _2815) + _2826;
                        float _2832 = _2822 * _2822;
                        float _2836 = ((isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0))) * _2821) / ((_2832 * 0.699999988079071044921875) + 1.0);
                        float _2840 = (-0.0) - _2221;
                        float _2841 = (-0.0) - _2222;
                        float _2842 = (-0.0) - _2223;
                        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
                        float _2847 = _2846 * _2840;
                        float _2848 = _2846 * _2841;
                        float _2849 = _2846 * _2842;
                        float _2857 = exp2(log2(1.0 / ((_2832 * 3.5) + 5.0)) * 0.25);
                        float _2858 = 1.0 - _522;
                        float _2865 = sqrt(1.0 - ((1.0 - (_2858 * _2858)) * (1.0 - (_2857 * _2857))));
                        float _2866 = _2865 * _2865;
                        float _2867 = _2866 * _2866;
                        float _2868 = _2847 + _2812;
                        float _2869 = _2848 + _2813;
                        float _2870 = _2849 + _2814;
                        float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
                        float _2878 = dot(vec3(_446, _449, _452), vec3(_2847, _2848, _2849));
                        float _4165 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2881 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2882 = dot(vec3(_446, _449, _452), vec3(_2874 * _2868, _2874 * _2869, _2874 * _2870));
                        float _4176 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2885 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2889 = ((_2885 * _2885) * (_2867 + (-1.0))) + 1.0;
                        float _2890 = _2825 * _2866;
                        float _2891 = _2890 * _2890;
                        float _2894 = ((1.0 - _2891) * _2815) + _2891;
                        float _4187 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2895 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2896 = 1.0 - _2866;
                        float _2906 = (0.5 / (((_2895 * ((_2881 * _2896) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2895 * _2896) + _2866) * _2881))) * _2895;
                        float _4198 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2917 = (((_2867 * 3.1415927410125732421875) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) / ((_2889 * _2889) * ((_2832 * 2.1991131305694580078125) + 3.141590118408203125))) * _2821;
                        _2669 = (_2836 * _2784.x) + _2742;
                        _2670 = (_2836 * _2784.y) + _2743;
                        _2671 = (_2836 * _2784.z) + _2744;
                        _2666 = (_2917 * _2801.x) + _2739;
                        _2667 = (_2917 * _2801.y) + _2740;
                        _2668 = (_2917 * _2801.z) + _2741;
                        if (_2746 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2739 = _2666;
                            _2740 = _2667;
                            _2741 = _2668;
                            _2742 = _2669;
                            _2743 = _2670;
                            _2744 = _2671;
                            _2745 = _2746;
                        }
                    }
                    frontier_phi_68_pred = _2668;
                    frontier_phi_68_pred_1 = _2671;
                    frontier_phi_68_pred_2 = _2670;
                    frontier_phi_68_pred_3 = _2669;
                    frontier_phi_68_pred_4 = _2667;
                    frontier_phi_68_pred_5 = _2666;
                }
                _2401 = frontier_phi_68_pred;
                _2407 = frontier_phi_68_pred_1;
                _2405 = frontier_phi_68_pred_2;
                _2403 = frontier_phi_68_pred_3;
                _2399 = frontier_phi_68_pred_4;
                _2397 = frontier_phi_68_pred_5;
                uint _2601 = _2600 + 1u;
                if (_2601 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2594 = _2397;
                    _2595 = _2399;
                    _2596 = _2401;
                    _2597 = _2403;
                    _2598 = _2405;
                    _2599 = _2407;
                    _2600 = _2601;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
        }
        uvec4 _2410 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2411 = _2410.z;
        uint _2413 = (_2411 >> 8u) & 15u;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        if (((4294967295u << _2413) & _2267) == 0u)
        {
            _2562 = _2396;
            _2564 = _2398;
            _2566 = _2400;
            _2568 = _2402;
            _2570 = _2404;
            _2572 = _2406;
        }
        else
        {
            float _2587 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
            float _2588 = _2587 * _2221;
            float _2589 = _2587 * _2222;
            float _2590 = _2587 * _2223;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2413 < ((_2411 >> 12u) & 15u))
            {
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2722 = _2396;
                float _2723 = _2398;
                float _2724 = _2400;
                float _2725 = _2402;
                float _2726 = _2404;
                float _2727 = _2406;
                uint _2728 = _2413;
                uint _2737;
                bool _2738;
                for (;;)
                {
                    _2737 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2728 << 2u)) >> 2u)).x;
                    _2738 = _2737 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2738)
                    {
                        frontier_phi_79_pred = _2727;
                        frontier_phi_79_pred_1 = _2726;
                        frontier_phi_79_pred_2 = _2725;
                        frontier_phi_79_pred_3 = _2724;
                        frontier_phi_79_pred_4 = _2723;
                        frontier_phi_79_pred_5 = _2722;
                    }
                    else
                    {
                        float _2931;
                        float _2932;
                        float _2933;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _2944 = _2722;
                        float _2945 = _2723;
                        float _2946 = _2724;
                        float _2947 = _2725;
                        float _2948 = _2726;
                        float _2949 = _2727;
                        uint _2950 = _2737;
                        uint _2951;
                        vec4 _2976;
                        float _2977;
                        vec4 _2992;
                        vec3 _3004;
                        vec4 _3020;
                        vec4 _3036;
                        float _3083;
                        bool _3084;
                        for (;;)
                        {
                            uint _2961 = ((_2728 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2950));
                            _2951 = (_2950 + 4294967295u) & _2950;
                            uint _2963 = _2961 * 40u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            _2977 = _2976.w;
                            uint _2979 = (_2961 * 40u) + 4u;
                            _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2994 = (_2961 * 40u) + 8u;
                            _3004 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x));
                            uint _3007 = (_2961 * 40u) + 16u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3023 = (_2961 * 40u) + 20u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3039 = (_2961 * 40u) + 24u;
                            vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            uint _3058 = (_2961 * 40u) + 28u;
                            vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            _3083 = fma(_2223, _3071.z, fma(_2222, _3071.y, _3071.x * _2221)) + _3071.w;
                            _3084 = !((fma(_2223, _3052.z, fma(_2222, _3052.y, _3052.x * _2221)) + _3052.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3084)
                            {
                                float _3111 = _2976.x - _2221;
                                float _3112 = _2976.y - _2222;
                                float _3113 = _2976.z - _2223;
                                float _3114 = dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113));
                                float _3117 = inversesqrt(_3114);
                                float _3118 = _3117 * _3111;
                                float _3119 = _3117 * _3112;
                                float _3120 = _3117 * _3113;
                                float _3124 = 1.0 - (_3114 / (_2977 * _2977));
                                float _4209 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3129 = sqrt(_3114) * _2992.w;
                                float _3131 = 1.39999997615814208984375 / (_3129 + 1.39999997615814208984375);
                                float _3132 = _3131 * _3131;
                                float _3135 = ((1.0 - _3132) * dot(vec3(_3118, _3119, _3120), vec3(_446, _449, _452))) + _3132;
                                float _3138 = _3129 * _3129;
                                float _3142 = (fma(_2223, _3020.z, fma(_2222, _3020.y, _3020.x * _2221)) + _3020.w) / _3083;
                                float _3143 = (fma(_2223, _3036.z, fma(_2222, _3036.y, _3036.x * _2221)) + _3036.w) / _3083;
                                float _3147 = 1.0 - dot(vec2(_3142, _3143), vec2(_3142, _3143));
                                float _4225 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3148 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3149 = _3148 * (((isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))) * _3125) / ((_3138 * 0.699999988079071044921875) + 1.0));
                                float _3161 = exp2(log2(1.0 / ((_3138 * 3.5) + 5.0)) * 0.25);
                                float _3162 = 1.0 - _522;
                                float _3169 = sqrt(1.0 - ((1.0 - (_3162 * _3162)) * (1.0 - (_3161 * _3161))));
                                float _3170 = _3169 * _3169;
                                float _3171 = _3170 * _3170;
                                float _3172 = _3118 - _2588;
                                float _3173 = _3119 - _2589;
                                float _3174 = _3120 - _2590;
                                float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                                float _3182 = dot(vec3(_446, _449, _452), vec3((-0.0) - _2588, (-0.0) - _2589, (-0.0) - _2590));
                                float _4236 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3185 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3186 = dot(vec3(_446, _449, _452), vec3(_3178 * _3172, _3178 * _3173, _3178 * _3174));
                                float _4247 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3189 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3193 = ((_3189 * _3189) * (_3171 + (-1.0))) + 1.0;
                                float _3194 = _3131 * _3170;
                                float _3195 = _3194 * _3194;
                                float _3201 = ((1.0 - _3195) * dot(vec3(_446, _449, _452), vec3(_3118, _3119, _3120))) + _3195;
                                float _4258 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3203 = 1.0 - _3170;
                                float _3213 = (0.5 / (((_3202 * ((_3185 * _3203) + _3170)) + 9.9999999392252902907785028219223e-09) + (((_3202 * _3203) + _3170) * _3185))) * _3202;
                                float _4269 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3223 = (_3148 * _3125) * (((_3171 * 3.1415927410125732421875) * (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) / ((_3193 * _3193) * ((_3138 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3149 * _2992.z;
                                frontier_phi_85_pred_1 = _3149 * _2992.y;
                                frontier_phi_85_pred_2 = _3149 * _2992.x;
                                frontier_phi_85_pred_3 = _3223 * _3004.z;
                                frontier_phi_85_pred_4 = _3223 * _3004.y;
                                frontier_phi_85_pred_5 = _3223 * _3004.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3232 = frontier_phi_85_pred;
                            _3231 = frontier_phi_85_pred_1;
                            _3230 = frontier_phi_85_pred_2;
                            _3229 = frontier_phi_85_pred_3;
                            _3228 = frontier_phi_85_pred_4;
                            _3227 = frontier_phi_85_pred_5;
                            _2934 = _3230 + _2947;
                            _2935 = _3231 + _2948;
                            _2936 = _3232 + _2949;
                            _2931 = _3227 + _2944;
                            _2932 = _3228 + _2945;
                            _2933 = _3229 + _2946;
                            if (_2951 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2951;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2936;
                        frontier_phi_79_pred_1 = _2935;
                        frontier_phi_79_pred_2 = _2934;
                        frontier_phi_79_pred_3 = _2933;
                        frontier_phi_79_pred_4 = _2932;
                        frontier_phi_79_pred_5 = _2931;
                    }
                    _2573 = frontier_phi_79_pred;
                    _2571 = frontier_phi_79_pred_1;
                    _2569 = frontier_phi_79_pred_2;
                    _2567 = frontier_phi_79_pred_3;
                    _2565 = frontier_phi_79_pred_4;
                    _2563 = frontier_phi_79_pred_5;
                    uint _2729 = _2728 + 1u;
                    if (_2729 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2722 = _2563;
                        _2723 = _2565;
                        _2724 = _2567;
                        _2725 = _2569;
                        _2726 = _2571;
                        _2727 = _2573;
                        _2728 = _2729;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2569;
                frontier_phi_60_61_ladder_1 = _2573;
                frontier_phi_60_61_ladder_2 = _2571;
                frontier_phi_60_61_ladder_3 = _2567;
                frontier_phi_60_61_ladder_4 = _2565;
                frontier_phi_60_61_ladder_5 = _2563;
            }
            else
            {
                frontier_phi_60_61_ladder = _2402;
                frontier_phi_60_61_ladder_1 = _2406;
                frontier_phi_60_61_ladder_2 = _2404;
                frontier_phi_60_61_ladder_3 = _2400;
                frontier_phi_60_61_ladder_4 = _2398;
                frontier_phi_60_61_ladder_5 = _2396;
            }
            _2562 = frontier_phi_60_61_ladder_5;
            _2564 = frontier_phi_60_61_ladder_4;
            _2566 = frontier_phi_60_61_ladder_3;
            _2568 = frontier_phi_60_61_ladder;
            _2570 = frontier_phi_60_61_ladder_2;
            _2572 = frontier_phi_60_61_ladder_1;
        }
        float _2577 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2279 = (_2577 * _2568) + _1716;
        _2281 = (_2577 * _2570) + _1718;
        _2283 = (_2577 * _2572) + _1720;
        _2285 = ((_2562 * _491) * _2577) + _2061;
        _2287 = ((_2564 * _493) * _2577) + _2063;
        _2289 = ((_2566 * _494) * _2577) + _2065;
    }
    else
    {
        _2279 = _1716;
        _2281 = _1718;
        _2283 = _1720;
        _2285 = _2061;
        _2287 = _2063;
        _2289 = _2065;
    }
    uint _2295 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _2301 = (_301.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2295].x;
    float _2302 = (_301.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2295].y;
    float _2303 = (_301.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2295].z;
    float _4285 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4296 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4307 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _2320 = (((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2279 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _506))) + ((_2285 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + _2301;
    float _2322 = (_2302 + ((_2287 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2281 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _506)));
    float _2324 = (_2303 + ((_2289 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2283 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _506)));
    float _2325 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2326 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2333 = cbMtdParam._m0[2u].x * _2301;
    float _2334 = cbMtdParam._m0[2u].y * _2302;
    float _2335 = cbMtdParam._m0[2u].z * _2303;
    float _4333 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2337 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    uint _2338 = _465 + 6u;
    float _2346 = _425 / cbSceneParam._m0[86u].x;
    float _2347 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2361 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, (log2((isnan(cbSceneParam._m0[77u].w) ? _345 : (isnan(_345) ? cbSceneParam._m0[77u].w : min(_345, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2363 = _2361.x;
    float _2364 = _2361.y;
    float _2365 = _2361.z;
    float _2366 = _2361.w;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    if (_345 > cbSceneParam._m0[78u].w)
    {
        float _2421 = isnan(_345) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _345 : min(cbSceneParam._m0[80u].w, _345));
        float _2422 = _2421 / _345;
        float _2433 = _2422 * _397;
        float _2434 = _398 * _2422;
        float _2435 = (-0.0) - _2434;
        float _2436 = _2422 * _399;
        float _2438 = (cbSceneParam._m0[77u].w * _2435) / _2421;
        float _2439 = _2438 + cbSceneParam._m0[79u].w;
        float _2440 = cbSceneParam._m0[79u].w - _2434;
        float _2446 = sqrt(((_2433 * _2433) + (_2434 * _2434)) + (_2436 * _2436));
        float _2449 = (1.0 - (cbSceneParam._m0[77u].w / _2421)) * _2446;
        float _2454 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2456 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2679;
        if (abs((_2435 - _2438) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2679 = ((((_2439 > 0.0) ? exp2(_2454 * _2439) : (2.0 - exp2(_2456 * _2439))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2449;
        }
        else
        {
            float _2623 = 1.0 / cbSceneParam._m0[80u].x;
            float _2624 = isnan(_2440) ? _2439 : (isnan(_2439) ? _2440 : max(_2439, _2440));
            float _2625 = isnan(_2440) ? _2439 : (isnan(_2439) ? _2440 : min(_2439, _2440));
            float _2634 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : min(_2624, 0.0));
            float _2635 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : min(_2625, 0.0));
            _2679 = ((abs(_2446 / _2435) * cbSceneParam._m0[80u].y) * ((((_2634 - _2635) * 2.0) - ((exp2(_2454 * (isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0)))) - exp2(_2454 * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0))))) * _2623)) - ((exp2(_2456 * _2634) - exp2(_2456 * _2635)) * _2623))) + (_2449 * cbSceneParam._m0[80u].z);
        }
        vec4 _2681 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2346, _2347, 1.0), 0.0);
        float _2690 = exp2((_2679 * (-1.44269502162933349609375)) * (1.0 - _2681.w));
        float _2691 = log2(_2690);
        float _2707 = log2(_2366);
        _2458 = (exp2(_2707 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].x)) * _2681.x) / cbSceneParam._m0[78u].x)) + _2363;
        _2460 = (exp2(_2707 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].y)) * _2681.y) / cbSceneParam._m0[78u].y)) + _2364;
        _2462 = (exp2(_2707 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2691 * cbSceneParam._m0[78u].z)) * _2681.z) / cbSceneParam._m0[78u].z)) + _2365;
        _2464 = _2690 * _2366;
    }
    else
    {
        _2458 = _2363;
        _2460 = _2364;
        _2462 = _2365;
        _2464 = _2366;
    }
    bool _2717;
    float _2521;
    vec4 _2524;
    float _2526;
    vec4 _2528;
    float _2536;
    float _2537;
    float _2538;
    float _2542;
    float _2546;
    float _2550;
    float _2551;
    bool _2561;
    for (;;)
    {
        bool _2477 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2478 = log2(_2464);
        float _2482 = exp2(_2478 * cbSceneParam._m0[78u].x);
        float _2483 = exp2(_2478 * cbSceneParam._m0[78u].y);
        float _2484 = exp2(_2478 * cbSceneParam._m0[78u].z);
        float _2485 = _2482 * _2325;
        float _2486 = _2483 * _2326;
        float _2487 = _2484 * _2327;
        vec4 _2495 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_425, _426));
        float _2497 = _2495.x;
        float _2518 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2497)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2497))) - _345) * 0.100000001490116119384765625;
        float _4384 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        _2521 = _2520 * cbInstanceData._m0[_2338].w;
        float _2522 = _413 + (-0.5);
        _2524 = cbMtdParam._m0[1u];
        _2526 = _2524.y * _2522;
        _2528 = cbMatDynParam._m0[0u];
        float _2535 = (roundEven(_2528.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2536 = _2535 * (_2477 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2458)));
        _2537 = _2535 * (_2477 ? _2486 : (_2486 + (cbSceneParam._m0[72u].w * _2460)));
        _2538 = _2535 * (_2477 ? _2487 : (_2487 + (cbSceneParam._m0[72u].w * _2462)));
        _2542 = (((_2333 * _2337) * _2482) * _2520) * _2535;
        _2546 = (((_2334 * _2337) * _2483) * _2520) * _2535;
        _2550 = (((_2335 * _2337) * _2484) * _2520) * _2535;
        _2551 = _2522 * 0.999000012874603271484375;
        _2561 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2561)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2551) < 0.5)
            {
                _2717 = true;
                break;
            }
        }
        uint _2658 = _467 + uint(_2528.w);
        if ((cbInstanceData._m0[_2658].w < 1.0) && ((cbInstanceData._m0[_2658].w + _2551) < 0.5))
        {
            _2717 = true;
            break;
        }
        if ((_2526 + 1.0) < _2524.x)
        {
            _2717 = true;
            break;
        }
        _2717 = false;
        break;
    }
    float _2922;
    if (_2717)
    {
        discard_state = true;
        _2922 = 0.0;
    }
    else
    {
        _2922 = _2521;
    }
    SV_Target.x = _2536;
    SV_Target.y = _2537;
    SV_Target.z = _2538;
    SV_Target.w = _2922;
    SV_Target_1.x = _2542;
    SV_Target_1.y = _2546;
    SV_Target_1.z = _2550;
    SV_Target_1.w = _2521;
    discard_exit();
}


