#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1096;
float _3539;
float _3540;
float _3541;
float _3542;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    vec4 _308 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _314 = _308.w;
    float _315 = _308.x * cbMtdParam._m0[9u].x;
    float _316 = _308.y * cbMtdParam._m0[9u].y;
    float _317 = _308.z * cbMtdParam._m0[9u].z;
    vec4 _333 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _336 = _333.x + cbMtdParam._m0[12u].w;
    vec4 _352 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _360 = (_352.x * 2.0) + (-1.0);
    float _362 = (_352.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_360, _362), vec2(_360, _362));
    float _3551 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _369 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _372 = fma(_369, _231, fma(_362, _223 * TANGENT.x, (_209 * _201) * _360));
    float _375 = fma(_369, _232, fma(_362, _223 * TANGENT.y, (_209 * _202) * _360));
    float _378 = fma(_369, _233, fma(_362, _223 * TANGENT.z, (_209 * _203) * _360));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    float _383 = _382 * _372;
    float _384 = _382 * _375;
    float _385 = _382 * _378;
    float _386 = _352.z + cbMtdParam._m0[13u].x;
    float _398 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _399 = _398 * _288;
    float _400 = _398 * _289;
    float _401 = _398 * _290;
    float _405 = dot(vec4(_399, _400, _401, 0.0), vec4(_383, _384, _385, 0.0)) - cbMtdParam._m0[13u].y;
    float _3562 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _412 = exp2(log2(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _442 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _470 = ((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _383);
    float _471 = ((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _384);
    float _478 = isnan(cbInstanceData._m0[8u].x) ? _470 : (isnan(_470) ? cbInstanceData._m0[8u].x : max(_470, cbInstanceData._m0[8u].x));
    float _479 = isnan(cbInstanceData._m0[8u].y) ? _471 : (isnan(_471) ? cbInstanceData._m0[8u].y : max(_471, cbInstanceData._m0[8u].y));
    vec4 _483 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _478 : (isnan(_478) ? cbInstanceData._m0[8u].z : min(_478, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _479 : (isnan(_479) ? cbInstanceData._m0[8u].w : min(_479, cbInstanceData._m0[8u].w))));
    vec4 _508 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _511 = _508.x + cbMtdParam._m0[12u].x;
    float _512 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _513 = isnan(1.0) ? _512 : (isnan(_512) ? 1.0 : min(_512, 1.0));
    float _517 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _518 = _517 * _383;
    float _519 = _517 * _384;
    float _520 = _517 * _385;
    float _3608 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _521 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _522 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3641 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3652 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3663 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _526 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _542 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _547 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _549 = _547.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _775 = sqrt(((_288 * _288) + (_289 * _289)) + (_290 * _290));
        float _781 = (cbMatDynParam._m0[5u].x * _775) + cbMatDynParam._m0[5u].y;
        float _3674 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _786 = (cbMatDynParam._m0[5u].z * _775) + cbMatDynParam._m0[5u].w;
        float _3685 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) - _782)) + _782) < ((_549 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _560 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _561 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _563 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _565 = _563.w;
    float _585 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _588 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _591 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    vec4 _593 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _604 = (((_593.y - _522) + (_593.w * _522)) * cbMtdParam._m0[3u].x) + _522;
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _618 = _617 + 9u;
    uint _619 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _625 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_619].x;
    float _626 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_619].y;
    float _627 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_619].z;
    float _3696 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    vec4 _631 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _636 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _647 = (((_636.x - _526) + (_636.w * _526)) * cbMtdParam._m0[3u].x) + _526;
    float _660 = (cbMtdParam._m0[3u].x * (((_628 * _565) - _628) + _631.x)) + _628;
    float _661 = (cbMtdParam._m0[3u].x * (((_629 * _565) - _629) + _631.y)) + _629;
    float _662 = (cbMtdParam._m0[3u].x * (((_630 * _565) - _630) + _631.z)) + _630;
    float _663 = 1.0 - _647;
    float _664 = _663 * _660;
    float _665 = _663 * _661;
    float _666 = _663 * _662;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _647;
    float _672 = (_661 + (-0.039999999105930328369140625)) * _647;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _647;
    float _674 = _671 + 0.039999999105930328369140625;
    float _676 = _672 + 0.039999999105930328369140625;
    float _677 = _673 + 0.039999999105930328369140625;
    vec4 _685 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _560, cbSceneParam._m0[86u].y * _561));
    float _688 = _685.x * TEXCOORD_8;
    float _689 = dot(vec3(_518, _519, _520), vec3(_399, _400, _401));
    float _692 = _689 * 2.0;
    float _696 = (_692 * _518) - _399;
    float _697 = (_692 * _519) - _400;
    float _698 = (_692 * _520) - _401;
    float _702 = abs(dot(vec3(_399, _400, _401), vec3(_518, _519, _520)));
    float _3729 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _709 = sqrt(_604);
    float _721 = exp2((_709 * 5.0) * log2(1.0 - (_703 * 0.999000012874603271484375))) / (4.0 - (_709 * 3.0));
    float _727 = (1.0 - _721) * ((_709 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _728 = _721 * _709;
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1095;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = fma(_764, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756));
        float _824 = fma(_764, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756));
        float _828 = fma(_764, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756));
        float _853 = _756 + _518;
        float _854 = _760 + _519;
        float _855 = _764 + _520;
        float _865 = fma(_855, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853)) - _820;
        float _866 = fma(_855, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853)) - _824;
        float _867 = fma(_855, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853)) - _828;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_820 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_824 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[34u].z) + ((((((_828 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _923 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_889.x + (-0.5));
        float _925 = _923 * (_889.y + (-0.5));
        float _926 = _923 * (_889.z + (-0.5));
        float _933 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_896.x + (-0.5));
        float _935 = _933 * (_896.y + (-0.5));
        float _936 = _933 * (_896.z + (-0.5));
        float _943 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_903.x + (-0.5));
        float _945 = _943 * (_903.y + (-0.5));
        float _946 = _943 * (_903.z + (-0.5));
        float _953 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_910.x + (-0.5));
        float _955 = _953 * (_910.y + (-0.5));
        float _956 = _953 * (_910.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _977 = (dot(vec3(_518, _519, _520), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _987 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3777 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_989 + 1.0))) + _994) * _957;
        float _1004 = _925 * 0.5;
        float _1005 = _935 * 0.5;
        float _1006 = _945 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_518, _519, _520), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3810 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1031 + 1.0))) + _1036) * _958;
        float _1046 = _926 * 0.5;
        float _1047 = _936 * 0.5;
        float _1048 = _946 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_518, _519, _520), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3843 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1073 + 1.0))) + _1078) * _959;
        _1095 = _926;
        _1097 = _925;
        _1098 = _924;
        _1099 = _936;
        _1100 = _935;
        _1101 = _934;
        _1102 = _946;
        _1103 = _945;
        _1104 = _944;
        _1105 = _959;
        _1106 = _958;
        _1107 = _957;
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _1096;
        _1097 = _1096;
        _1098 = _1096;
        _1099 = _1096;
        _1100 = _1096;
        _1101 = _1096;
        _1102 = _1096;
        _1103 = _1096;
        _1104 = _1096;
        _1105 = _1096;
        _1106 = _1096;
        _1107 = _1096;
        _1108 = 0.0;
        _1109 = 0.0;
        _1110 = 0.0;
    }
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1139 = fma(_764, cbModelParam._m0[30u].z, fma(_760, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _756));
        float _1143 = fma(_764, cbModelParam._m0[31u].z, fma(_760, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _756));
        float _1147 = fma(_764, cbModelParam._m0[32u].z, fma(_760, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _756));
        float _1170 = _756 + _518;
        float _1171 = _760 + _519;
        float _1172 = _764 + _520;
        float _1182 = fma(_1172, cbModelParam._m0[30u].z, fma(_1171, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170)) - _1139;
        float _1183 = fma(_1172, cbModelParam._m0[31u].z, fma(_1171, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170)) - _1143;
        float _1184 = fma(_1172, cbModelParam._m0[32u].z, fma(_1171, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170)) - _1147;
        float _1188 = inversesqrt(dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184)));
        float _1201 = ((_1188 * _1182) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1139 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1188 * _1183) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1143 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1188 * _1184) / cbModelParam._m0[35u].z) + ((((((_1147 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        float _1238 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1205.x + (-0.5));
        float _1240 = _1238 * (_1205.y + (-0.5));
        float _1241 = _1238 * (_1205.z + (-0.5));
        float _1248 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1212.x + (-0.5));
        float _1250 = _1248 * (_1212.y + (-0.5));
        float _1251 = _1248 * (_1212.z + (-0.5));
        float _1258 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1219.x + (-0.5));
        float _1260 = _1258 * (_1219.y + (-0.5));
        float _1261 = _1258 * (_1219.z + (-0.5));
        float _1268 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1226.x + (-0.5));
        float _1270 = _1268 * (_1226.y + (-0.5));
        float _1271 = _1268 * (_1226.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_518, _519, _520), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3906 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1302 + 1.0))) + _1307) * _1272;
        float _1317 = _1240 * 0.5;
        float _1318 = _1250 * 0.5;
        float _1319 = _1260 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_518, _519, _520), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3939 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1344 + 1.0))) + _1349) * _1273;
        float _1359 = _1241 * 0.5;
        float _1360 = _1251 * 0.5;
        float _1361 = _1261 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_518, _519, _520), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _3972 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1386 + 1.0))) + _1391) * _1274;
        _1408 = _1241;
        _1409 = _1240;
        _1410 = _1239;
        _1411 = _1251;
        _1412 = _1250;
        _1413 = _1249;
        _1414 = _1261;
        _1415 = _1260;
        _1416 = _1259;
        _1417 = _1274;
        _1418 = _1273;
        _1419 = _1272;
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
    }
    else
    {
        _1408 = _1096;
        _1409 = _1096;
        _1410 = _1096;
        _1411 = _1096;
        _1412 = _1096;
        _1413 = _1096;
        _1414 = _1096;
        _1415 = _1096;
        _1416 = _1096;
        _1417 = _1096;
        _1418 = _1096;
        _1419 = _1096;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1109)) + _1109;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1455 = fma(_1434, cbSceneParam._m0[89u].z, fma(_1433, cbSceneParam._m0[89u].y, _1432 * cbSceneParam._m0[89u].x));
    float _1458 = fma(_1434, cbSceneParam._m0[90u].z, fma(_1433, cbSceneParam._m0[90u].y, _1432 * cbSceneParam._m0[90u].x));
    float _1461 = fma(_1434, cbSceneParam._m0[91u].z, fma(_1433, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1432));
    float _1476 = _696 * 0.5;
    float _1477 = _697 * 0.5;
    float _1478 = _698 * 0.5;
    float _1479 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1482 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1485 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1519;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1492 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1095, _1099, _1102, _1105));
        float _1496 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1500 = dot(vec4(_1476, _1477, _1478, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1507 = dot(vec4(cbModelParam._m0[39u]), vec4(_1476, _1477, _1478, 1.0));
        _1519 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1519 = 1.0;
    }
    float _1530;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1521 = dot(vec4(cbModelParam._m0[40u]), vec4(_1476, _1477, _1478, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1534 = (_1530 * cbModelParam._m0[1u].x) + (_1519 * (1.0 - cbModelParam._m0[1u].x));
    float _1544 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _604);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1544 : min(cbModelParam._m0[25u].z, _1544));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1593 = fma(_764, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756)) + cbModelParam._m0[13u].w;
        float _1597 = fma(_764, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756)) + cbModelParam._m0[14u].w;
        float _1601 = fma(_764, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756)) + cbModelParam._m0[15u].w;
        float _1604 = fma(_698, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696));
        float _1607 = fma(_698, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696));
        float _1610 = fma(_698, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696));
        float _1638;
        if (_1604 > 0.0)
        {
            _1638 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1638 = frontier_phi_19_17_ladder;
        }
        float _1844;
        if (_1607 > 0.0)
        {
            _1844 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1844 = frontier_phi_28_24_ladder;
        }
        float _2098;
        if (_1610 > 0.0)
        {
            _2098 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2098 = frontier_phi_40_35_ladder;
        }
        float _2100 = isnan(_1844) ? _1638 : (isnan(_1638) ? _1844 : min(_1638, _1844));
        float _2101 = isnan(_2098) ? _2100 : (isnan(_2100) ? _2098 : min(_2100, _2098));
        float _2105 = (_2101 * _1604) + _1593;
        float _2106 = (_2101 * _1607) + _1597;
        float _2107 = (_2101 * _1610) + _1601;
        float _2108 = _2101 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2108;
        float _2112 = _2108 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 > _2112) || ((_2106 < _2110) || ((_2105 < _2110) || (_2105 > _2112))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2107, cbModelParam._m0[9u].z, fma(_2106, cbModelParam._m0[9u].y, _2105 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2107, cbModelParam._m0[10u].z, fma(_2106, cbModelParam._m0[10u].y, _2105 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2107, cbModelParam._m0[11u].z, fma(_2106, cbModelParam._m0[11u].y, _2105 * cbModelParam._m0[11u].x))), _1545);
            frontier_phi_18_40_ladder = _2235.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2235.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2235.x * cbModelParam._m0[1u].y;
        }
        _1626 = frontier_phi_18_40_ladder_2;
        _1628 = frontier_phi_18_40_ladder_1;
        _1630 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_696, _697, _698), _1545);
        _1626 = _1614.x * cbModelParam._m0[1u].y;
        _1628 = _1614.y * cbModelParam._m0[1u].y;
        _1630 = _1614.z * cbModelParam._m0[1u].y;
    }
    float _1634 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _604);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1634 : min(cbModelParam._m0[25u].w, _1634));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1692 = fma(_764, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756)) + cbModelParam._m0[21u].w;
        float _1696 = fma(_764, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756)) + cbModelParam._m0[22u].w;
        float _1700 = fma(_764, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756)) + cbModelParam._m0[23u].w;
        float _1703 = fma(_698, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696));
        float _1706 = fma(_698, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696));
        float _1709 = fma(_698, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696));
        float _1849;
        if (_1703 > 0.0)
        {
            _1849 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1849 = frontier_phi_30_26_ladder;
        }
        float _2125;
        if (_1706 > 0.0)
        {
            _2125 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2125 = frontier_phi_42_37_ladder;
        }
        float _2338;
        if (_1709 > 0.0)
        {
            _2338 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2338 = frontier_phi_51_48_ladder;
        }
        float _2340 = isnan(_2125) ? _1849 : (isnan(_1849) ? _2125 : min(_1849, _2125));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1703) + _1692;
        float _2346 = (_2341 * _1706) + _1696;
        float _2347 = (_2341 * _1709) + _1700;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2348;
        float _2351 = _2348 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2347 > _2351) || ((_2347 < _2349) || ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 < _2349) || (_2345 > _2351))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2347, cbModelParam._m0[17u].z, fma(_2346, cbModelParam._m0[17u].y, _2345 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2347, cbModelParam._m0[18u].z, fma(_2346, cbModelParam._m0[18u].y, _2345 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2347, cbModelParam._m0[19u].z, fma(_2346, cbModelParam._m0[19u].y, _2345 * cbModelParam._m0[19u].x))), _1635);
            frontier_phi_27_51_ladder = _2592.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2592.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2592.x * cbModelParam._m0[1u].z;
        }
        _1728 = frontier_phi_27_51_ladder_2;
        _1730 = frontier_phi_27_51_ladder_1;
        _1732 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_696, _697, _698), _1635);
        _1728 = _1712.x * cbModelParam._m0[1u].z;
        _1730 = _1712.y * cbModelParam._m0[1u].z;
        _1732 = _1712.z * cbModelParam._m0[1u].z;
    }
    float _1745 = (((_727 * _674) + _728) * _688) * ((cbModelParam._m0[1u].w * (_1728 - _1626)) + _1626);
    float _1747 = (((_727 * _676) + _728) * _688) * ((cbModelParam._m0[1u].w * (_1730 - _1628)) + _1628);
    float _1749 = (((_727 * _677) + _728) * _688) * ((cbModelParam._m0[1u].w * (_1732 - _1630)) + _1630);
    float _1752 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, _1745 * cbSceneParam._m0[91u].x));
    uvec4 _1768 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1770 = _1768.x * 14u;
    uint _1771 = _1770 + 13u;
    float _1778 = _688 + (-1.0);
    float _1783 = (cbLight._m0[_1771].x * _1778) + 1.0;
    float _1784 = (cbLight._m0[_1771].y * _1778) + 1.0;
    float _1785 = (cbLight._m0[_1771].z * _1778) + 1.0;
    float _1786 = (cbLight._m0[_1771].w * _1778) + 1.0;
    uint _1787 = _1770 + 5u;
    float _1793 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1797 = _1770 + 4u;
    float _1803 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    uint _1807 = _1770 | 1u;
    float _1818 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_518, _519, _520));
    float _1821 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_518, _519, _520));
    float _4108 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _4119 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1826 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1828 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1835 = ((cbLight._m0[_1787].x * _1793) * _1828) + ((cbLight._m0[_1797].x * _1803) * _1826);
    float _1836 = ((_1793 * cbLight._m0[_1787].y) * _1828) + ((_1803 * cbLight._m0[_1797].y) * _1826);
    float _1837 = ((_1793 * cbLight._m0[_1787].z) * _1828) + ((_1803 * cbLight._m0[_1797].z) * _1826);
    uvec4 _1841 = floatBitsToUint(cbLight._m0[_1770 + 12u]);
    bool _1843 = _1841.x == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1843)
    {
        _1854 = _1835;
        _1856 = _1836;
        _1858 = _1837;
    }
    else
    {
        uint _1862 = _1770 + 6u;
        float _1878 = (dot(vec3(cbLight._m0[_1770 + 2u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _4130 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1881 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _1854 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1835;
        _1856 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1836;
        _1858 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1837;
    }
    bool _1861 = _1841.y == 0u;
    float _1899;
    float _1901;
    float _1903;
    if (_1861)
    {
        _1899 = _1854;
        _1901 = _1856;
        _1903 = _1858;
    }
    else
    {
        uint _2069 = _1770 + 7u;
        float _2085 = (dot(vec3(cbLight._m0[_1770 + 3u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _2086 = _2085 * _2085;
        float _4146 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2087 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2088 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1899 = (((cbLight._m0[_2069].x * 0.3183098733425140380859375) * _2087) * _2088) + _1854;
        _1901 = (((cbLight._m0[_2069].y * 0.3183098733425140380859375) * _2087) * _2088) + _1856;
        _1903 = (((cbLight._m0[_2069].z * 0.3183098733425140380859375) * _2087) * _2088) + _1858;
    }
    uint _1906 = _1770 + 8u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _604) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1770].x + _399;
    float _1922 = cbLight._m0[_1770].y + _400;
    float _1923 = cbLight._m0[_1770].z + _401;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1770].xyz));
    float _4162 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _1935 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _1936 = dot(vec3(_518, _519, _520), vec3(_1928, _1929, _1930));
    float _4184 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1928, _1929, _1930));
    float _4195 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1944 = _1920 * _1920;
    float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
    float _1956 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
    float _1957 = 0.959999978542327880859375 - _671;
    float _1959 = 0.959999978542327880859375 - _672;
    float _1960 = 0.959999978542327880859375 - _673;
    float _1967 = 1.0 - _1920;
    float _1978 = (0.5 / (((_1935 * ((_1934 * _1967) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _1967) + _1920) * _1934))) * _1934;
    float _4206 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
    uint _1991 = _1770 + 9u;
    float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _604) * 0.949999988079071044921875);
    float _2003 = _2002 * _2002;
    float _2004 = cbLight._m0[_1807].x + _399;
    float _2005 = cbLight._m0[_1807].y + _400;
    float _2006 = cbLight._m0[_1807].z + _401;
    float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
    float _2011 = _2010 * _2004;
    float _2012 = _2010 * _2005;
    float _2013 = _2010 * _2006;
    float _2014 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1807].xyz));
    float _4217 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2018 = dot(vec3(_518, _519, _520), vec3(_2011, _2012, _2013));
    float _4228 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_2011, _2012, _2013));
    float _4239 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2003 * _2003;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2037 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
    float _2044 = 1.0 - _2003;
    float _2054 = (0.5 / (((_1935 * ((_2017 * _2044) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2044) + _2003) * _2017))) * _2017;
    float _4250 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2056 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    float _2066 = (((((_2037 * _1957) + _674) * cbLight._m0[_1991].x) * _2056) * _1793) + (((((_1956 * _1957) + _674) * cbLight._m0[_1906].x) * _1980) * _1803);
    float _2067 = (((((_2037 * _1959) + _676) * cbLight._m0[_1991].y) * _2056) * _1793) + (((((_1956 * _1959) + _676) * cbLight._m0[_1906].y) * _1980) * _1803);
    float _2068 = (((((_2037 * _1960) + _677) * cbLight._m0[_1991].z) * _2056) * _1793) + (((((_1956 * _1960) + _677) * cbLight._m0[_1906].z) * _1980) * _1803);
    float _2130;
    float _2132;
    float _2134;
    if (_1843)
    {
        _2130 = _2066;
        _2132 = _2067;
        _2134 = _2068;
    }
    else
    {
        uint _2136 = _1770 + 2u;
        uint _2140 = _1770 + 10u;
        float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _604) * 0.949999988079071044921875);
        float _2155 = _2154 * _2154;
        float _2156 = cbLight._m0[_2136].x + _399;
        float _2157 = cbLight._m0[_2136].y + _400;
        float _2158 = cbLight._m0[_2136].z + _401;
        float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
        float _2163 = _2162 * _2156;
        float _2164 = _2162 * _2157;
        float _2165 = _2162 * _2158;
        float _2166 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2136].xyz));
        float _4261 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2170 = dot(vec3(_518, _519, _520), vec3(_2163, _2164, _2165));
        float _4272 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2174 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2163, _2164, _2165));
        float _4283 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2178 = _2155 * _2155;
        float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
        float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
        float _2196 = 1.0 - _2155;
        float _2206 = (0.5 / (((_1935 * ((_2169 * _2196) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2196) + _2155) * _2169))) * _2169;
        float _4294 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _2130 = (((((_2189 * _1957) + _674) * cbLight._m0[_2140].x) * _2208) * _2209) + _2066;
        _2132 = (((((_2189 * _1959) + _676) * cbLight._m0[_2140].y) * _2208) * _2209) + _2067;
        _2134 = (((((_2189 * _1960) + _677) * cbLight._m0[_2140].z) * _2208) * _2209) + _2068;
    }
    float _2244;
    float _2246;
    float _2248;
    if (_1861)
    {
        _2244 = _2130;
        _2246 = _2132;
        _2248 = _2134;
    }
    else
    {
        uint _2255 = _1770 + 3u;
        uint _2259 = _1770 + 11u;
        float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _604) * 0.949999988079071044921875);
        float _2274 = _2273 * _2273;
        float _2275 = cbLight._m0[_2255].x + _399;
        float _2276 = cbLight._m0[_2255].y + _400;
        float _2277 = cbLight._m0[_2255].z + _401;
        float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
        float _2282 = _2281 * _2275;
        float _2283 = _2281 * _2276;
        float _2284 = _2281 * _2277;
        float _2285 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2255].xyz));
        float _4310 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2289 = dot(vec3(_518, _519, _520), vec3(_2282, _2283, _2284));
        float _4321 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2293 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2282, _2283, _2284));
        float _4332 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2297 = _2274 * _2274;
        float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
        float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
        float _2315 = 1.0 - _2274;
        float _2325 = (0.5 / (((_1935 * ((_2288 * _2315) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2315) + _2274) * _2288))) * _2288;
        float _4343 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2327 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
        float _2328 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2244 = (((((_2308 * _1957) + _674) * cbLight._m0[_2259].x) * _2327) * _2328) + _2130;
        _2246 = (((((_2308 * _1959) + _676) * cbLight._m0[_2259].y) * _2327) * _2328) + _2132;
        _2248 = (((((_2308 * _1960) + _677) * cbLight._m0[_2259].z) * _2327) * _2328) + _2134;
    }
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    if (_1768.y == 0u)
    {
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2403;
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2403;
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2403;
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.x;
        uint _2430 = uint((float(_2418.y) * floor(float(uint(cbSceneParam._m0[85u].y * _561) / _2419))) + floor(float(uint(cbSceneParam._m0[85u].x * _560) / _2419)));
        float _2440 = (log2(_2406 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2441 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        uint _2444 = uint(isnan(14.0) ? _2441 : (isnan(_2441) ? 14.0 : min(_2441, 14.0)));
        uvec4 _2449 = texelFetch(g_lightClusterGridBuffer, int(((_2444 << 2u) + (_2430 << 6u)) >> 2u));
        uint _2450 = _2449.x;
        uint _2451 = _2418.z;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((((1u << ((_2451 >> 4u) & 15u)) + 4294967295u) & _2450) == 0u) || ((_2451 & 240u) == 0u))
        {
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
        }
        else
        {
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            uint _2763 = 0u;
            uint _2772;
            bool _2773;
            for (;;)
            {
                _2772 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                _2773 = _2772 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2773)
                {
                    frontier_phi_68_pred = _2759;
                    frontier_phi_68_pred_1 = _2762;
                    frontier_phi_68_pred_2 = _2761;
                    frontier_phi_68_pred_3 = _2760;
                    frontier_phi_68_pred_4 = _2758;
                    frontier_phi_68_pred_5 = _2757;
                }
                else
                {
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    uint _2908;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2761;
                    _2907 = _2762;
                    _2908 = _2772;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    for (;;)
                    {
                        uint _2912 = uint(findLSB(_2908)) + (_2763 << 5u);
                        uint _2909 = (_2908 + 4294967295u) & _2908;
                        uint _2914 = _2912 * 48u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        uint _2934 = (_2912 * 48u) + 4u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 3u)).x));
                        uint _2953 = (_2912 * 48u) + 8u;
                        vec3 _2964 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x));
                        float _2968 = _2928.x - _2404;
                        float _2969 = _2928.y - _2405;
                        float _2970 = _2928.z - _2406;
                        float _2971 = dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970));
                        float _2974 = inversesqrt(_2971);
                        float _2975 = _2974 * _2968;
                        float _2976 = _2974 * _2969;
                        float _2977 = _2974 * _2970;
                        float _2978 = dot(vec3(_585, _588, _591), vec3(_2975, _2976, _2977));
                        float _2983 = 1.0 - (_2971 * _2928.w);
                        float _4369 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2984 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _2985 = sqrt(_2971) * _2947.w;
                        float _2988 = 1.39999997615814208984375 / (_2985 + 1.39999997615814208984375);
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2978) + _2989;
                        float _2995 = _2985 * _2985;
                        float _2999 = ((isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))) * _2984) / ((_2995 * 0.699999988079071044921875) + 1.0);
                        float _3003 = (-0.0) - _2404;
                        float _3004 = (-0.0) - _2405;
                        float _3005 = (-0.0) - _2406;
                        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3020 = exp2(log2(1.0 / ((_2995 * 3.5) + 5.0)) * 0.25);
                        float _3021 = 1.0 - _709;
                        float _3028 = sqrt(1.0 - ((1.0 - (_3021 * _3021)) * (1.0 - (_3020 * _3020))));
                        float _3029 = _3028 * _3028;
                        float _3030 = _3029 * _3029;
                        float _3031 = _3010 + _2975;
                        float _3032 = _3011 + _2976;
                        float _3033 = _3012 + _2977;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3041 = dot(vec3(_585, _588, _591), vec3(_3010, _3011, _3012));
                        float _4385 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3045 = dot(vec3(_585, _588, _591), vec3(_3037 * _3031, _3037 * _3032, _3037 * _3033));
                        float _4396 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3048 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3052 = ((_3048 * _3048) * (_3030 + (-1.0))) + 1.0;
                        float _3053 = _2988 * _3029;
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _2978) + _3054;
                        float _4407 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3059 = 1.0 - _3029;
                        float _3069 = (0.5 / (((_3058 * ((_3044 * _3059) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_3058 * _3059) + _3029) * _3044))) * _3058;
                        float _4418 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3080 = (((_3030 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3052 * _3052) * ((_2995 * 2.1991131305694580078125) + 3.141590118408203125))) * _2984;
                        _2832 = (_2999 * _2947.x) + _2905;
                        _2833 = (_2999 * _2947.y) + _2906;
                        _2834 = (_2999 * _2947.z) + _2907;
                        _2829 = (_3080 * _2964.x) + _2902;
                        _2830 = (_3080 * _2964.y) + _2903;
                        _2831 = (_3080 * _2964.z) + _2904;
                        if (_2909 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2833;
                            _2907 = _2834;
                            _2908 = _2909;
                        }
                    }
                    frontier_phi_68_pred = _2831;
                    frontier_phi_68_pred_1 = _2834;
                    frontier_phi_68_pred_2 = _2833;
                    frontier_phi_68_pred_3 = _2832;
                    frontier_phi_68_pred_4 = _2830;
                    frontier_phi_68_pred_5 = _2829;
                }
                _2602 = frontier_phi_68_pred;
                _2608 = frontier_phi_68_pred_1;
                _2606 = frontier_phi_68_pred_2;
                _2604 = frontier_phi_68_pred_3;
                _2600 = frontier_phi_68_pred_4;
                _2598 = frontier_phi_68_pred_5;
                uint _2764 = _2763 + 1u;
                if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2757 = _2598;
                    _2758 = _2600;
                    _2759 = _2602;
                    _2760 = _2604;
                    _2761 = _2606;
                    _2762 = _2608;
                    _2763 = _2764;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
        }
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.z;
        uint _2614 = (_2612 >> 8u) & 15u;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((4294967295u << _2614) & _2450) == 0u)
        {
            _2725 = _2597;
            _2727 = _2599;
            _2729 = _2601;
            _2731 = _2603;
            _2733 = _2605;
            _2735 = _2607;
        }
        else
        {
            float _2750 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
            float _2751 = _2750 * _2404;
            float _2752 = _2750 * _2405;
            float _2753 = _2750 * _2406;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2614 < ((_2612 >> 12u) & 15u))
            {
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2885 = _2597;
                float _2886 = _2599;
                float _2887 = _2601;
                float _2888 = _2603;
                float _2889 = _2605;
                float _2890 = _2607;
                uint _2891 = _2614;
                uint _2900;
                bool _2901;
                for (;;)
                {
                    _2900 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                    _2901 = _2900 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2901)
                    {
                        frontier_phi_79_pred = _2890;
                        frontier_phi_79_pred_1 = _2889;
                        frontier_phi_79_pred_2 = _2888;
                        frontier_phi_79_pred_3 = _2887;
                        frontier_phi_79_pred_4 = _2886;
                        frontier_phi_79_pred_5 = _2885;
                    }
                    else
                    {
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        float _3111 = _2889;
                        float _3112 = _2890;
                        uint _3113 = _2900;
                        uint _3114;
                        vec4 _3139;
                        float _3140;
                        vec4 _3155;
                        vec3 _3167;
                        vec4 _3183;
                        vec4 _3199;
                        float _3246;
                        bool _3247;
                        for (;;)
                        {
                            uint _3124 = ((_2891 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3113));
                            _3114 = (_3113 + 4294967295u) & _3113;
                            uint _3126 = _3124 * 40u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3140 = _3139.w;
                            uint _3142 = (_3124 * 40u) + 4u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3124 * 40u) + 8u;
                            _3167 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x));
                            uint _3170 = (_3124 * 40u) + 16u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3186 = (_3124 * 40u) + 20u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3202 = (_3124 * 40u) + 24u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3221 = (_3124 * 40u) + 28u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3246 = fma(_2406, _3234.z, fma(_2405, _3234.y, _3234.x * _2404)) + _3234.w;
                            _3247 = !((fma(_2406, _3215.z, fma(_2405, _3215.y, _3215.x * _2404)) + _3215.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3247)
                            {
                                float _3274 = _3139.x - _2404;
                                float _3275 = _3139.y - _2405;
                                float _3276 = _3139.z - _2406;
                                float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                                float _3280 = inversesqrt(_3277);
                                float _3281 = _3280 * _3274;
                                float _3282 = _3280 * _3275;
                                float _3283 = _3280 * _3276;
                                float _3287 = 1.0 - (_3277 / (_3140 * _3140));
                                float _4429 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3292 = sqrt(_3277) * _3155.w;
                                float _3294 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                                float _3295 = _3294 * _3294;
                                float _3298 = ((1.0 - _3295) * dot(vec3(_3281, _3282, _3283), vec3(_585, _588, _591))) + _3295;
                                float _3301 = _3292 * _3292;
                                float _3305 = (fma(_2406, _3183.z, fma(_2405, _3183.y, _3183.x * _2404)) + _3183.w) / _3246;
                                float _3306 = (fma(_2406, _3199.z, fma(_2405, _3199.y, _3199.x * _2404)) + _3199.w) / _3246;
                                float _3310 = 1.0 - dot(vec2(_3305, _3306), vec2(_3305, _3306));
                                float _4445 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3312 = _3311 * (((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3288) / ((_3301 * 0.699999988079071044921875) + 1.0));
                                float _3324 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                                float _3325 = 1.0 - _709;
                                float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                                float _3333 = _3332 * _3332;
                                float _3334 = _3333 * _3333;
                                float _3335 = _3281 - _2751;
                                float _3336 = _3282 - _2752;
                                float _3337 = _3283 - _2753;
                                float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                                float _3345 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2751, (-0.0) - _2752, (-0.0) - _2753));
                                float _4456 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3349 = dot(vec3(_585, _588, _591), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                                float _4467 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                                float _3357 = _3294 * _3333;
                                float _3358 = _3357 * _3357;
                                float _3364 = ((1.0 - _3358) * dot(vec3(_585, _588, _591), vec3(_3281, _3282, _3283))) + _3358;
                                float _4478 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3366 = 1.0 - _3333;
                                float _3376 = (0.5 / (((_3365 * ((_3348 * _3366) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3333) * _3348))) * _3365;
                                float _4489 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3386 = (_3311 * _3288) * (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) / ((_3356 * _3356) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3312 * _3155.z;
                                frontier_phi_85_pred_1 = _3312 * _3155.y;
                                frontier_phi_85_pred_2 = _3312 * _3155.x;
                                frontier_phi_85_pred_3 = _3386 * _3167.z;
                                frontier_phi_85_pred_4 = _3386 * _3167.y;
                                frontier_phi_85_pred_5 = _3386 * _3167.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3395 = frontier_phi_85_pred;
                            _3394 = frontier_phi_85_pred_1;
                            _3393 = frontier_phi_85_pred_2;
                            _3392 = frontier_phi_85_pred_3;
                            _3391 = frontier_phi_85_pred_4;
                            _3390 = frontier_phi_85_pred_5;
                            _3097 = _3393 + _3110;
                            _3098 = _3394 + _3111;
                            _3099 = _3395 + _3112;
                            _3094 = _3390 + _3107;
                            _3095 = _3391 + _3108;
                            _3096 = _3392 + _3109;
                            if (_3114 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3114;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3099;
                        frontier_phi_79_pred_1 = _3098;
                        frontier_phi_79_pred_2 = _3097;
                        frontier_phi_79_pred_3 = _3096;
                        frontier_phi_79_pred_4 = _3095;
                        frontier_phi_79_pred_5 = _3094;
                    }
                    _2736 = frontier_phi_79_pred;
                    _2734 = frontier_phi_79_pred_1;
                    _2732 = frontier_phi_79_pred_2;
                    _2730 = frontier_phi_79_pred_3;
                    _2728 = frontier_phi_79_pred_4;
                    _2726 = frontier_phi_79_pred_5;
                    uint _2892 = _2891 + 1u;
                    if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2885 = _2726;
                        _2886 = _2728;
                        _2887 = _2730;
                        _2888 = _2732;
                        _2889 = _2734;
                        _2890 = _2736;
                        _2891 = _2892;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2732;
                frontier_phi_60_61_ladder_1 = _2736;
                frontier_phi_60_61_ladder_2 = _2734;
                frontier_phi_60_61_ladder_3 = _2730;
                frontier_phi_60_61_ladder_4 = _2728;
                frontier_phi_60_61_ladder_5 = _2726;
            }
            else
            {
                frontier_phi_60_61_ladder = _2603;
                frontier_phi_60_61_ladder_1 = _2607;
                frontier_phi_60_61_ladder_2 = _2605;
                frontier_phi_60_61_ladder_3 = _2601;
                frontier_phi_60_61_ladder_4 = _2599;
                frontier_phi_60_61_ladder_5 = _2597;
            }
            _2725 = frontier_phi_60_61_ladder_5;
            _2727 = frontier_phi_60_61_ladder_4;
            _2729 = frontier_phi_60_61_ladder_3;
            _2731 = frontier_phi_60_61_ladder;
            _2733 = frontier_phi_60_61_ladder_2;
            _2735 = frontier_phi_60_61_ladder_1;
        }
        float _2740 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _2462 = (_2740 * _2731) + _1899;
        _2464 = (_2740 * _2733) + _1901;
        _2466 = (_2740 * _2735) + _1903;
        _2468 = ((_2725 * _674) * _2740) + _2244;
        _2470 = ((_2727 * _676) * _2740) + _2246;
        _2472 = ((_2729 * _677) * _2740) + _2248;
    }
    else
    {
        _2462 = _1899;
        _2464 = _1901;
        _2466 = _1903;
        _2468 = _2244;
        _2470 = _2246;
        _2472 = _2248;
    }
    uint _2478 = _618 + uint(cbMatDynParam._m0[0u].w);
    float _2484 = cbInstanceData._m0[_2478].x * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[11u].x) * _442.x) + (((cbMtdParam._m0[10u].x * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _412));
    float _2485 = cbInstanceData._m0[_2478].y * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[11u].y) * _442.y) + (((cbMtdParam._m0[10u].y * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _412));
    float _2486 = cbInstanceData._m0[_2478].z * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[11u].z) * _442.z) + (((cbMtdParam._m0[10u].z * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _412));
    float _4505 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4516 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4527 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4538 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _2492 = 0.959999978542327880859375 - (_647 * 0.959999978542327880859375);
    float _2500 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2462 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _688));
    float _2501 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2464 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _688));
    float _2502 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2466 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _688));
    float _2506 = _2492 - (exp2(log2(1.0 - _703) * 5.0) * _2492);
    float _2518 = ((_2500 + ((_2468 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + _2484) + ((((cbSceneParam._m0[72u].w * _483.x) * _2506) - _2500) * _513);
    float _2521 = ((_2485 + ((_2470 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + _2501) + ((((cbSceneParam._m0[72u].w * _483.y) * _2506) - _2501) * _513);
    float _2524 = ((_2486 + ((_2472 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1534)) * cbPerFrame._m0[3u].x)) + _2502) + ((((cbSceneParam._m0[72u].w * _483.z) * _2506) - _2502) * _513);
    float _2525 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2526 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2527 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2533 = cbMtdParam._m0[2u].x * _2484;
    float _2534 = cbMtdParam._m0[2u].y * _2485;
    float _2535 = cbMtdParam._m0[2u].z * _2486;
    float _4564 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2537 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2542 = cbInstanceData._m0[_617 + 6u].w * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)));
    float _2547 = _560 / cbSceneParam._m0[86u].x;
    float _2548 = _561 / cbSceneParam._m0[86u].y;
    vec4 _2562 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, (log2((isnan(cbSceneParam._m0[77u].w) ? _542 : (isnan(_542) ? cbSceneParam._m0[77u].w : min(_542, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2564 = _2562.x;
    float _2565 = _2562.y;
    float _2566 = _2562.z;
    float _2567 = _2562.w;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_542 > cbSceneParam._m0[78u].w)
    {
        float _2622 = isnan(_542) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _542 : min(cbSceneParam._m0[80u].w, _542));
        float _2623 = _2622 / _542;
        float _2634 = _2623 * _288;
        float _2635 = _289 * _2623;
        float _2636 = (-0.0) - _2635;
        float _2637 = _2623 * _290;
        float _2639 = (cbSceneParam._m0[77u].w * _2636) / _2622;
        float _2640 = _2639 + cbSceneParam._m0[79u].w;
        float _2641 = cbSceneParam._m0[79u].w - _2635;
        float _2647 = sqrt(((_2634 * _2634) + (_2635 * _2635)) + (_2637 * _2637));
        float _2650 = (1.0 - (cbSceneParam._m0[77u].w / _2622)) * _2647;
        float _2655 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2657 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2842;
        if (abs((_2636 - _2639) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2842 = ((((_2640 > 0.0) ? exp2(_2655 * _2640) : (2.0 - exp2(_2657 * _2640))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2650;
        }
        else
        {
            float _2786 = 1.0 / cbSceneParam._m0[80u].x;
            float _2787 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : max(_2640, _2641));
            float _2788 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : min(_2640, _2641));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            _2842 = ((abs(_2647 / _2636) * cbSceneParam._m0[80u].y) * ((((_2797 - _2798) * 2.0) - ((exp2(_2655 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0)))) - exp2(_2655 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))))) * _2786)) - ((exp2(_2657 * _2797) - exp2(_2657 * _2798)) * _2786))) + (_2650 * cbSceneParam._m0[80u].z);
        }
        vec4 _2844 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, 1.0), 0.0);
        float _2853 = exp2((_2842 * (-1.44269502162933349609375)) * (1.0 - _2844.w));
        float _2854 = log2(_2853);
        float _2870 = log2(_2567);
        _2659 = (exp2(_2870 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].x)) * _2844.x) / cbSceneParam._m0[78u].x)) + _2564;
        _2661 = (exp2(_2870 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].y)) * _2844.y) / cbSceneParam._m0[78u].y)) + _2565;
        _2663 = (exp2(_2870 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].z)) * _2844.z) / cbSceneParam._m0[78u].z)) + _2566;
        _2665 = _2853 * _2567;
    }
    else
    {
        _2659 = _2564;
        _2661 = _2565;
        _2663 = _2566;
        _2665 = _2567;
    }
    bool _2880;
    vec4 _2674;
    vec4 _2696;
    float _2698;
    float _2702;
    float _2703;
    float _2704;
    float _2707;
    float _2710;
    float _2713;
    float _2714;
    bool _2724;
    for (;;)
    {
        _2674 = cbMatDynParam._m0[0u];
        float _2676 = roundEven(_2674.y);
        bool _2677 = _2676 == 3.0;
        float _2678 = log2(_2665);
        float _2682 = exp2(_2678 * cbSceneParam._m0[78u].x);
        float _2683 = exp2(_2678 * cbSceneParam._m0[78u].y);
        float _2684 = exp2(_2678 * cbSceneParam._m0[78u].z);
        float _2685 = _2682 * _2525;
        float _2686 = _2683 * _2526;
        float _2687 = _2684 * _2527;
        float _2694 = _549 + (-0.5);
        _2696 = cbMtdParam._m0[1u];
        _2698 = _2696.y * _2694;
        float _2701 = (_2676 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2702 = _2701 * (_2677 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2659)));
        _2703 = _2701 * (_2677 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2661)));
        _2704 = _2701 * (_2677 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2663)));
        _2707 = ((_2533 * _2537) * _2682) * _2701;
        _2710 = ((_2534 * _2537) * _2683) * _2701;
        _2713 = ((_2535 * _2537) * _2684) * _2701;
        _2714 = _2694 * 0.999000012874603271484375;
        _2724 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2724)
        {
            if ((cbInstanceData._m0[_617 + 7u].x + _2714) < 0.5)
            {
                _2880 = true;
                break;
            }
        }
        uint _2821 = _618 + uint(_2674.w);
        if ((cbInstanceData._m0[_2821].w < 1.0) && ((cbInstanceData._m0[_2821].w + _2714) < 0.5))
        {
            _2880 = true;
            break;
        }
        if ((_2698 + _314) < _2696.x)
        {
            _2880 = true;
            break;
        }
        _2880 = false;
        break;
    }
    float _3085;
    if (_2880)
    {
        discard_state = true;
        _3085 = 0.0;
    }
    else
    {
        _3085 = _2542;
    }
    SV_Target.x = _2702;
    SV_Target.y = _2703;
    SV_Target.z = _2704;
    SV_Target.w = _3085;
    SV_Target_1.x = _2707;
    SV_Target_1.y = _2710;
    SV_Target_1.z = _2713;
    SV_Target_1.w = _2542;
    discard_exit();
}


