#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    vec4 _304 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _310 = _304.w;
    float _311 = _304.x * cbMtdParam._m0[9u].x;
    float _312 = _304.y * cbMtdParam._m0[9u].y;
    float _313 = _304.z * cbMtdParam._m0[9u].z;
    vec4 _329 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _332 = _329.x + cbMtdParam._m0[12u].w;
    vec4 _348 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _356 = (_348.x * 2.0) + (-1.0);
    float _358 = (_348.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_356, _358), vec2(_356, _358));
    float _3434 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _365 = sqrt(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))));
    float _368 = fma(_365, _227, fma(_358, _219 * TANGENT.x, (_205 * _197) * _356));
    float _371 = fma(_365, _228, fma(_358, _219 * TANGENT.y, (_205 * _198) * _356));
    float _374 = fma(_365, _229, fma(_358, _219 * TANGENT.z, (_205 * _199) * _356));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    float _379 = _378 * _368;
    float _380 = _378 * _371;
    float _381 = _378 * _374;
    float _382 = _348.z + cbMtdParam._m0[13u].x;
    float _394 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _395 = _394 * _284;
    float _396 = _394 * _285;
    float _397 = _394 * _286;
    float _401 = dot(vec4(_395, _396, _397, 0.0), vec4(_379, _380, _381, 0.0)) - cbMtdParam._m0[13u].y;
    float _3445 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _408 = exp2(log2(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _438 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _466 = (_457 / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _379);
    float _467 = (_458 / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _380);
    float _474 = isnan(cbInstanceData._m0[8u].x) ? _466 : (isnan(_466) ? cbInstanceData._m0[8u].x : max(_466, cbInstanceData._m0[8u].x));
    float _475 = isnan(cbInstanceData._m0[8u].y) ? _467 : (isnan(_467) ? cbInstanceData._m0[8u].y : max(_467, cbInstanceData._m0[8u].y));
    vec4 _479 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _474 : (isnan(_474) ? cbInstanceData._m0[8u].z : min(_474, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _475 : (isnan(_475) ? cbInstanceData._m0[8u].w : min(_475, cbInstanceData._m0[8u].w))));
    vec4 _504 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _507 = _504.x + cbMtdParam._m0[12u].x;
    float _508 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _509 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
    float _513 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _514 = _513 * _379;
    float _515 = _513 * _380;
    float _516 = _513 * _381;
    float _3491 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _517 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _518 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _3513 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3524 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3535 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3546 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _522 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _538 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _540 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _542 = _540.w;
    float _563 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _566 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _569 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    vec4 _571 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _582 = (((_571.y - _518) + (_571.w * _518)) * cbMtdParam._m0[3u].x) + _518;
    uint _595 = uint(roundEven(NORMAL.w)) * 13u;
    uint _596 = _595 + 9u;
    uint _597 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _603 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_597].x;
    float _604 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_597].y;
    float _605 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * cbInstanceData._m0[_597].z;
    float _3557 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    vec4 _609 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _614 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _625 = (((_614.x - _522) + (_614.w * _522)) * cbMtdParam._m0[3u].x) + _522;
    float _638 = (cbMtdParam._m0[3u].x * (((_606 * _542) - _606) + _609.x)) + _606;
    float _639 = (cbMtdParam._m0[3u].x * (((_607 * _542) - _607) + _609.y)) + _607;
    float _640 = (cbMtdParam._m0[3u].x * (((_608 * _542) - _608) + _609.z)) + _608;
    float _641 = 1.0 - _625;
    float _642 = _641 * _638;
    float _643 = _641 * _639;
    float _644 = _641 * _640;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _625;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _625;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _625;
    float _652 = _649 + 0.039999999105930328369140625;
    float _654 = _650 + 0.039999999105930328369140625;
    float _655 = _651 + 0.039999999105930328369140625;
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _457, cbSceneParam._m0[86u].y * _458));
    float _666 = _663.x * TEXCOORD_8;
    float _667 = dot(vec3(_514, _515, _516), vec3(_395, _396, _397));
    float _670 = _667 * 2.0;
    float _674 = (_670 * _514) - _395;
    float _675 = (_670 * _515) - _396;
    float _676 = (_670 * _516) - _397;
    float _680 = abs(dot(vec3(_395, _396, _397), vec3(_514, _515, _516)));
    float _3590 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _687 = sqrt(_582);
    float _699 = exp2((_687 * 5.0) * log2(1.0 - (_681 * 0.999000012874603271484375))) / (4.0 - (_687 * 3.0));
    float _705 = (1.0 - _699) * ((_687 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _706 = _699 * _687;
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_742, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734));
        float _773 = fma(_742, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734));
        float _777 = fma(_742, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734));
        float _802 = _734 + _514;
        float _803 = _738 + _515;
        float _804 = _742 + _516;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_514, _515, _516), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3638 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_514, _515, _516), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3671 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_514, _515, _516), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3704 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_742, cbModelParam._m0[30u].z, fma(_738, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _734));
        float _1089 = fma(_742, cbModelParam._m0[31u].z, fma(_738, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _734));
        float _1093 = fma(_742, cbModelParam._m0[32u].z, fma(_738, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _734));
        float _1116 = _734 + _514;
        float _1117 = _738 + _515;
        float _1118 = _742 + _516;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_514, _515, _516), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3767 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_514, _515, _516), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3800 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_514, _515, _516), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3833 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _674 * 0.5;
    float _1423 = _675 * 0.5;
    float _1424 = _676 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1539 = fma(_742, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734)) + cbModelParam._m0[13u].w;
        float _1543 = fma(_742, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734)) + cbModelParam._m0[14u].w;
        float _1547 = fma(_742, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734)) + cbModelParam._m0[15u].w;
        float _1550 = fma(_676, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674));
        float _1553 = fma(_676, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674));
        float _1556 = fma(_676, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674));
        float _1584;
        if (_1550 > 0.0)
        {
            _1584 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1584 = frontier_phi_16_14_ladder;
        }
        float _1790;
        if (_1553 > 0.0)
        {
            _1790 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1790 = frontier_phi_25_21_ladder;
        }
        float _2044;
        if (_1556 > 0.0)
        {
            _2044 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2044 = frontier_phi_37_32_ladder;
        }
        float _2046 = isnan(_1790) ? _1584 : (isnan(_1584) ? _1790 : min(_1584, _1790));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1550) + _1539;
        float _2052 = (_2047 * _1553) + _1543;
        float _2053 = (_2047 * _1556) + _1547;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2056 = (-1.0) - _2054;
        float _2058 = _2054 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2053 > _2058) || ((_2053 < _2056) || ((_2052 > _2058) || ((_2052 < _2056) || ((_2051 < _2056) || (_2051 > _2058))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2181 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2053, cbModelParam._m0[9u].z, fma(_2052, cbModelParam._m0[9u].y, _2051 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2053, cbModelParam._m0[10u].z, fma(_2052, cbModelParam._m0[10u].y, _2051 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2053, cbModelParam._m0[11u].z, fma(_2052, cbModelParam._m0[11u].y, _2051 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_15_37_ladder = _2181.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2181.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2181.x * cbModelParam._m0[1u].y;
        }
        _1572 = frontier_phi_15_37_ladder_2;
        _1574 = frontier_phi_15_37_ladder_1;
        _1576 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_674, _675, _676), _1491);
        _1572 = _1560.x * cbModelParam._m0[1u].y;
        _1574 = _1560.y * cbModelParam._m0[1u].y;
        _1576 = _1560.z * cbModelParam._m0[1u].y;
    }
    float _1580 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1580 : min(cbModelParam._m0[25u].w, _1580));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_742, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_742, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_742, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_676, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674));
        float _1652 = fma(_676, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674));
        float _1655 = fma(_676, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674));
        float _1795;
        if (_1649 > 0.0)
        {
            _1795 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1795 = frontier_phi_27_23_ladder;
        }
        float _2071;
        if (_1652 > 0.0)
        {
            _2071 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2071 = frontier_phi_39_34_ladder;
        }
        float _2284;
        if (_1655 > 0.0)
        {
            _2284 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2284 = frontier_phi_48_45_ladder;
        }
        float _2286 = isnan(_2071) ? _1795 : (isnan(_1795) ? _2071 : min(_1795, _2071));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1649) + _1638;
        float _2292 = (_2287 * _1652) + _1642;
        float _2293 = (_2287 * _1655) + _1646;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2294;
        float _2297 = _2294 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2293 > _2297) || ((_2293 < _2295) || ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 < _2295) || (_2291 > _2297))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2293, cbModelParam._m0[17u].z, fma(_2292, cbModelParam._m0[17u].y, _2291 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2293, cbModelParam._m0[18u].z, fma(_2292, cbModelParam._m0[18u].y, _2291 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2293, cbModelParam._m0[19u].z, fma(_2292, cbModelParam._m0[19u].y, _2291 * cbModelParam._m0[19u].x))), _1581);
            frontier_phi_24_48_ladder = _2538.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2538.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2538.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_24_48_ladder_2;
        _1676 = frontier_phi_24_48_ladder_1;
        _1678 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_674, _675, _676), _1581);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1691 = (((_705 * _652) + _706) * _666) * ((cbModelParam._m0[1u].w * (_1674 - _1572)) + _1572);
    float _1693 = (((_705 * _654) + _706) * _666) * ((cbModelParam._m0[1u].w * (_1676 - _1574)) + _1574);
    float _1695 = (((_705 * _655) + _706) * _666) * ((cbModelParam._m0[1u].w * (_1678 - _1576)) + _1576);
    float _1698 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    uvec4 _1714 = floatBitsToUint(cbInstanceData._m0[_595 + 5u]);
    uint _1716 = _1714.x * 14u;
    uint _1717 = _1716 + 13u;
    float _1724 = _666 + (-1.0);
    float _1729 = (cbLight._m0[_1717].x * _1724) + 1.0;
    float _1730 = (cbLight._m0[_1717].y * _1724) + 1.0;
    float _1731 = (cbLight._m0[_1717].z * _1724) + 1.0;
    float _1732 = (cbLight._m0[_1717].w * _1724) + 1.0;
    uint _1733 = _1716 + 5u;
    float _1739 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1743 = _1716 + 4u;
    float _1749 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
    uint _1753 = _1716 | 1u;
    float _1764 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_514, _515, _516));
    float _1767 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_514, _515, _516));
    float _3969 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _3980 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1772 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.3183098733425140380859375;
    float _1774 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.3183098733425140380859375;
    float _1781 = ((cbLight._m0[_1733].x * _1739) * _1774) + ((cbLight._m0[_1743].x * _1749) * _1772);
    float _1782 = ((_1739 * cbLight._m0[_1733].y) * _1774) + ((_1749 * cbLight._m0[_1743].y) * _1772);
    float _1783 = ((_1739 * cbLight._m0[_1733].z) * _1774) + ((_1749 * cbLight._m0[_1743].z) * _1772);
    uvec4 _1787 = floatBitsToUint(cbLight._m0[_1716 + 12u]);
    bool _1789 = _1787.x == 0u;
    float _1800;
    float _1802;
    float _1804;
    if (_1789)
    {
        _1800 = _1781;
        _1802 = _1782;
        _1804 = _1783;
    }
    else
    {
        uint _1808 = _1716 + 6u;
        float _1824 = (dot(vec3(cbLight._m0[_1716 + 2u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _1825 = _1824 * _1824;
        float _3991 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1827 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
        _1800 = (((cbLight._m0[_1808].x * 0.3183098733425140380859375) * _1826) * _1827) + _1781;
        _1802 = (((cbLight._m0[_1808].y * 0.3183098733425140380859375) * _1826) * _1827) + _1782;
        _1804 = (((cbLight._m0[_1808].z * 0.3183098733425140380859375) * _1826) * _1827) + _1783;
    }
    bool _1807 = _1787.y == 0u;
    float _1845;
    float _1847;
    float _1849;
    if (_1807)
    {
        _1845 = _1800;
        _1847 = _1802;
        _1849 = _1804;
    }
    else
    {
        uint _2015 = _1716 + 7u;
        float _2031 = (dot(vec3(cbLight._m0[_1716 + 3u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2032 = _2031 * _2031;
        float _4007 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2034 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1845 = (((cbLight._m0[_2015].x * 0.3183098733425140380859375) * _2033) * _2034) + _1800;
        _1847 = (((cbLight._m0[_2015].y * 0.3183098733425140380859375) * _2033) * _2034) + _1802;
        _1849 = (((cbLight._m0[_2015].z * 0.3183098733425140380859375) * _2033) * _2034) + _1804;
    }
    uint _1852 = _1716 + 8u;
    float _1865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1716].w)) * _582) * 0.949999988079071044921875);
    float _1866 = _1865 * _1865;
    float _1867 = cbLight._m0[_1716].x + _395;
    float _1868 = cbLight._m0[_1716].y + _396;
    float _1869 = cbLight._m0[_1716].z + _397;
    float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
    float _1874 = _1873 * _1867;
    float _1875 = _1873 * _1868;
    float _1876 = _1873 * _1869;
    float _1877 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1716].xyz));
    float _4023 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _1881 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1882 = dot(vec3(_514, _515, _516), vec3(_1874, _1875, _1876));
    float _4045 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1886 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_1874, _1875, _1876));
    float _4056 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1890 = _1866 * _1866;
    float _1894 = ((_1885 * _1885) * (_1890 + (-1.0))) + 1.0;
    float _1902 = exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0);
    float _1903 = 0.959999978542327880859375 - _649;
    float _1905 = 0.959999978542327880859375 - _650;
    float _1906 = 0.959999978542327880859375 - _651;
    float _1913 = 1.0 - _1866;
    float _1924 = (0.5 / (((_1881 * ((_1880 * _1913) + _1866)) + 9.9999999392252902907785028219223e-09) + (((_1881 * _1913) + _1866) * _1880))) * _1880;
    float _4067 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1890 / ((_1894 * _1894) * 3.141590118408203125));
    uint _1937 = _1716 + 9u;
    float _1948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _582) * 0.949999988079071044921875);
    float _1949 = _1948 * _1948;
    float _1950 = cbLight._m0[_1753].x + _395;
    float _1951 = cbLight._m0[_1753].y + _396;
    float _1952 = cbLight._m0[_1753].z + _397;
    float _1956 = inversesqrt(dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952)));
    float _1957 = _1956 * _1950;
    float _1958 = _1956 * _1951;
    float _1959 = _1956 * _1952;
    float _1960 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1753].xyz));
    float _4078 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _1964 = dot(vec3(_514, _515, _516), vec3(_1957, _1958, _1959));
    float _4089 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1968 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1957, _1958, _1959));
    float _4100 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1972 = _1949 * _1949;
    float _1976 = ((_1967 * _1967) * (_1972 + (-1.0))) + 1.0;
    float _1983 = exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0);
    float _1990 = 1.0 - _1949;
    float _2000 = (0.5 / (((_1881 * ((_1963 * _1990) + _1949)) + 9.9999999392252902907785028219223e-09) + (((_1881 * _1990) + _1949) * _1963))) * _1963;
    float _4111 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2002 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1972 / ((_1976 * _1976) * 3.141590118408203125));
    float _2012 = (((((_1983 * _1903) + _652) * cbLight._m0[_1937].x) * _2002) * _1739) + (((((_1902 * _1903) + _652) * cbLight._m0[_1852].x) * _1926) * _1749);
    float _2013 = (((((_1983 * _1905) + _654) * cbLight._m0[_1937].y) * _2002) * _1739) + (((((_1902 * _1905) + _654) * cbLight._m0[_1852].y) * _1926) * _1749);
    float _2014 = (((((_1983 * _1906) + _655) * cbLight._m0[_1937].z) * _2002) * _1739) + (((((_1902 * _1906) + _655) * cbLight._m0[_1852].z) * _1926) * _1749);
    float _2076;
    float _2078;
    float _2080;
    if (_1789)
    {
        _2076 = _2012;
        _2078 = _2013;
        _2080 = _2014;
    }
    else
    {
        uint _2082 = _1716 + 2u;
        uint _2086 = _1716 + 10u;
        float _2100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _582) * 0.949999988079071044921875);
        float _2101 = _2100 * _2100;
        float _2102 = cbLight._m0[_2082].x + _395;
        float _2103 = cbLight._m0[_2082].y + _396;
        float _2104 = cbLight._m0[_2082].z + _397;
        float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
        float _2109 = _2108 * _2102;
        float _2110 = _2108 * _2103;
        float _2111 = _2108 * _2104;
        float _2112 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2082].xyz));
        float _4122 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2116 = dot(vec3(_514, _515, _516), vec3(_2109, _2110, _2111));
        float _4133 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2120 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2109, _2110, _2111));
        float _4144 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2124 = _2101 * _2101;
        float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
        float _2135 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
        float _2142 = 1.0 - _2101;
        float _2152 = (0.5 / (((_1881 * ((_2115 * _2142) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_1881 * _2142) + _2101) * _2115))) * _2115;
        float _4155 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2154 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
        float _2155 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
        _2076 = (((((_2135 * _1903) + _652) * cbLight._m0[_2086].x) * _2154) * _2155) + _2012;
        _2078 = (((((_2135 * _1905) + _654) * cbLight._m0[_2086].y) * _2154) * _2155) + _2013;
        _2080 = (((((_2135 * _1906) + _655) * cbLight._m0[_2086].z) * _2154) * _2155) + _2014;
    }
    float _2190;
    float _2192;
    float _2194;
    if (_1807)
    {
        _2190 = _2076;
        _2192 = _2078;
        _2194 = _2080;
    }
    else
    {
        uint _2201 = _1716 + 3u;
        uint _2205 = _1716 + 11u;
        float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _582) * 0.949999988079071044921875);
        float _2220 = _2219 * _2219;
        float _2221 = cbLight._m0[_2201].x + _395;
        float _2222 = cbLight._m0[_2201].y + _396;
        float _2223 = cbLight._m0[_2201].z + _397;
        float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
        float _2228 = _2227 * _2221;
        float _2229 = _2227 * _2222;
        float _2230 = _2227 * _2223;
        float _2231 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2201].xyz));
        float _4171 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2235 = dot(vec3(_514, _515, _516), vec3(_2228, _2229, _2230));
        float _4182 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2239 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2228, _2229, _2230));
        float _4193 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2243 = _2220 * _2220;
        float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
        float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
        float _2261 = 1.0 - _2220;
        float _2271 = (0.5 / (((_1881 * ((_2234 * _2261) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_1881 * _2261) + _2220) * _2234))) * _2234;
        float _4204 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2273 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
        float _2274 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2190 = (((((_2254 * _1903) + _652) * cbLight._m0[_2205].x) * _2273) * _2274) + _2076;
        _2192 = (((((_2254 * _1905) + _654) * cbLight._m0[_2205].y) * _2273) * _2274) + _2078;
        _2194 = (((((_2254 * _1906) + _655) * cbLight._m0[_2205].z) * _2273) * _2274) + _2080;
    }
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    if (_1714.y == 0u)
    {
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2349;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2349;
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2349;
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.x;
        uint _2376 = uint((float(_2364.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _2365))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _2365)));
        float _2386 = (log2(_2352 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2387 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        uint _2390 = uint(isnan(14.0) ? _2387 : (isnan(_2387) ? 14.0 : min(_2387, 14.0)));
        uvec4 _2395 = texelFetch(g_lightClusterGridBuffer, int(((_2390 << 2u) + (_2376 << 6u)) >> 2u));
        uint _2396 = _2395.x;
        uint _2397 = _2364.z;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((((1u << ((_2397 >> 4u) & 15u)) + 4294967295u) & _2396) == 0u) || ((_2397 & 240u) == 0u))
        {
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
        }
        else
        {
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            uint _2701 = 0u;
            uint _2710;
            bool _2711;
            for (;;)
            {
                _2710 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2701 << 2u)) >> 2u)).x;
                _2711 = _2710 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2711)
                {
                    frontier_phi_63_pred = _2700;
                    frontier_phi_63_pred_1 = _2699;
                    frontier_phi_63_pred_2 = _2698;
                    frontier_phi_63_pred_3 = _2697;
                    frontier_phi_63_pred_4 = _2696;
                    frontier_phi_63_pred_5 = _2695;
                }
                else
                {
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    uint _2825;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2710;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    for (;;)
                    {
                        uint _2829 = uint(findLSB(_2825)) + (_2701 << 5u);
                        uint _2826 = (_2825 + 4294967295u) & _2825;
                        uint _2831 = _2829 * 48u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 3u)).x));
                        uint _2851 = (_2829 * 48u) + 4u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2870 = (_2829 * 48u) + 8u;
                        vec3 _2881 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x));
                        float _2885 = _2845.x - _2350;
                        float _2886 = _2845.y - _2351;
                        float _2887 = _2845.z - _2352;
                        float _2888 = dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887));
                        float _2891 = inversesqrt(_2888);
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2895 = dot(vec3(_563, _566, _569), vec3(_2892, _2893, _2894));
                        float _2900 = 1.0 - (_2888 * _2845.w);
                        float _4230 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2902 = sqrt(_2888) * _2864.w;
                        float _2905 = 1.39999997615814208984375 / (_2902 + 1.39999997615814208984375);
                        float _2906 = _2905 * _2905;
                        float _2909 = ((1.0 - _2906) * _2895) + _2906;
                        float _2912 = _2902 * _2902;
                        float _2916 = ((isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0))) * _2901) / ((_2912 * 0.699999988079071044921875) + 1.0);
                        float _2920 = (-0.0) - _2350;
                        float _2921 = (-0.0) - _2351;
                        float _2922 = (-0.0) - _2352;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2937 = exp2(log2(1.0 / ((_2912 * 3.5) + 5.0)) * 0.25);
                        float _2938 = 1.0 - _687;
                        float _2945 = sqrt(1.0 - ((1.0 - (_2938 * _2938)) * (1.0 - (_2937 * _2937))));
                        float _2946 = _2945 * _2945;
                        float _2947 = _2946 * _2946;
                        float _2948 = _2927 + _2892;
                        float _2949 = _2928 + _2893;
                        float _2950 = _2929 + _2894;
                        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
                        float _2958 = dot(vec3(_563, _566, _569), vec3(_2927, _2928, _2929));
                        float _4246 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2962 = dot(vec3(_563, _566, _569), vec3(_2954 * _2948, _2954 * _2949, _2954 * _2950));
                        float _4257 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2965 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2969 = ((_2965 * _2965) * (_2947 + (-1.0))) + 1.0;
                        float _2970 = _2905 * _2946;
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2895) + _2971;
                        float _4268 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2975 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2976 = 1.0 - _2946;
                        float _2986 = (0.5 / (((_2975 * ((_2961 * _2976) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2975 * _2976) + _2946) * _2961))) * _2975;
                        float _4279 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2997 = (((_2947 * 3.1415927410125732421875) * (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) / ((_2969 * _2969) * ((_2912 * 2.1991131305694580078125) + 3.141590118408203125))) * _2901;
                        _2754 = (_2916 * _2864.x) + _2822;
                        _2755 = (_2916 * _2864.y) + _2823;
                        _2756 = (_2916 * _2864.z) + _2824;
                        _2751 = (_2997 * _2881.x) + _2819;
                        _2752 = (_2997 * _2881.y) + _2820;
                        _2753 = (_2997 * _2881.z) + _2821;
                        if (_2826 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2826;
                        }
                    }
                    frontier_phi_63_pred = _2756;
                    frontier_phi_63_pred_1 = _2755;
                    frontier_phi_63_pred_2 = _2754;
                    frontier_phi_63_pred_3 = _2753;
                    frontier_phi_63_pred_4 = _2752;
                    frontier_phi_63_pred_5 = _2751;
                }
                _2554 = frontier_phi_63_pred;
                _2552 = frontier_phi_63_pred_1;
                _2550 = frontier_phi_63_pred_2;
                _2548 = frontier_phi_63_pred_3;
                _2546 = frontier_phi_63_pred_4;
                _2544 = frontier_phi_63_pred_5;
                uint _2702 = _2701 + 1u;
                if (_2702 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2695 = _2544;
                    _2696 = _2546;
                    _2697 = _2548;
                    _2698 = _2550;
                    _2699 = _2552;
                    _2700 = _2554;
                    _2701 = _2702;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
        }
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.z;
        uint _2560 = (_2558 >> 8u) & 15u;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        if (((4294967295u << _2560) & _2396) == 0u)
        {
            _2663 = _2543;
            _2665 = _2545;
            _2667 = _2547;
            _2669 = _2549;
            _2671 = _2551;
            _2673 = _2553;
        }
        else
        {
            float _2688 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
            float _2689 = _2688 * _2350;
            float _2690 = _2688 * _2351;
            float _2691 = _2688 * _2352;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2560 < ((_2558 >> 12u) & 15u))
            {
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2674;
                float _2802 = _2543;
                float _2803 = _2545;
                float _2804 = _2547;
                float _2805 = _2549;
                float _2806 = _2551;
                float _2807 = _2553;
                uint _2808 = _2560;
                uint _2817;
                bool _2818;
                for (;;)
                {
                    _2817 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                    _2818 = _2817 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2818)
                    {
                        frontier_phi_69_pred = _2807;
                        frontier_phi_69_pred_1 = _2806;
                        frontier_phi_69_pred_2 = _2805;
                        frontier_phi_69_pred_3 = _2804;
                        frontier_phi_69_pred_4 = _2803;
                        frontier_phi_69_pred_5 = _2802;
                    }
                    else
                    {
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        float _3018 = _2805;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        uint _3021 = _2817;
                        uint _3022;
                        vec4 _3047;
                        float _3048;
                        vec4 _3063;
                        vec3 _3075;
                        vec4 _3091;
                        vec4 _3107;
                        float _3154;
                        bool _3155;
                        for (;;)
                        {
                            uint _3032 = ((_2808 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3021));
                            _3022 = (_3021 + 4294967295u) & _3021;
                            uint _3034 = _3032 * 40u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            _3048 = _3047.w;
                            uint _3050 = (_3032 * 40u) + 4u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3065 = (_3032 * 40u) + 8u;
                            _3075 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x));
                            uint _3078 = (_3032 * 40u) + 16u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3094 = (_3032 * 40u) + 20u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3110 = (_3032 * 40u) + 24u;
                            vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3129 = (_3032 * 40u) + 28u;
                            vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            _3154 = fma(_2352, _3142.z, fma(_2351, _3142.y, _3142.x * _2350)) + _3142.w;
                            _3155 = !((fma(_2352, _3123.z, fma(_2351, _3123.y, _3123.x * _2350)) + _3123.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3155)
                            {
                                float _3182 = _3047.x - _2350;
                                float _3183 = _3047.y - _2351;
                                float _3184 = _3047.z - _2352;
                                float _3185 = dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184));
                                float _3188 = inversesqrt(_3185);
                                float _3189 = _3188 * _3182;
                                float _3190 = _3188 * _3183;
                                float _3191 = _3188 * _3184;
                                float _3195 = 1.0 - (_3185 / (_3048 * _3048));
                                float _4290 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3200 = sqrt(_3185) * _3063.w;
                                float _3202 = 1.39999997615814208984375 / (_3200 + 1.39999997615814208984375);
                                float _3203 = _3202 * _3202;
                                float _3206 = ((1.0 - _3203) * dot(vec3(_3189, _3190, _3191), vec3(_563, _566, _569))) + _3203;
                                float _3209 = _3200 * _3200;
                                float _3213 = (fma(_2352, _3091.z, fma(_2351, _3091.y, _3091.x * _2350)) + _3091.w) / _3154;
                                float _3214 = (fma(_2352, _3107.z, fma(_2351, _3107.y, _3107.x * _2350)) + _3107.w) / _3154;
                                float _3218 = 1.0 - dot(vec2(_3213, _3214), vec2(_3213, _3214));
                                float _4306 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3219 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3220 = _3219 * (((isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))) * _3196) / ((_3209 * 0.699999988079071044921875) + 1.0));
                                float _3232 = exp2(log2(1.0 / ((_3209 * 3.5) + 5.0)) * 0.25);
                                float _3233 = 1.0 - _687;
                                float _3240 = sqrt(1.0 - ((1.0 - (_3233 * _3233)) * (1.0 - (_3232 * _3232))));
                                float _3241 = _3240 * _3240;
                                float _3242 = _3241 * _3241;
                                float _3243 = _3189 - _2689;
                                float _3244 = _3190 - _2690;
                                float _3245 = _3191 - _2691;
                                float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                                float _3253 = dot(vec3(_563, _566, _569), vec3((-0.0) - _2689, (-0.0) - _2690, (-0.0) - _2691));
                                float _4317 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3256 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3257 = dot(vec3(_563, _566, _569), vec3(_3249 * _3243, _3249 * _3244, _3249 * _3245));
                                float _4328 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3260 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3264 = ((_3260 * _3260) * (_3242 + (-1.0))) + 1.0;
                                float _3265 = _3202 * _3241;
                                float _3266 = _3265 * _3265;
                                float _3272 = ((1.0 - _3266) * dot(vec3(_563, _566, _569), vec3(_3189, _3190, _3191))) + _3266;
                                float _4339 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3274 = 1.0 - _3241;
                                float _3284 = (0.5 / (((_3273 * ((_3256 * _3274) + _3241)) + 9.9999999392252902907785028219223e-09) + (((_3273 * _3274) + _3241) * _3256))) * _3273;
                                float _4350 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3294 = (_3219 * _3196) * (((_3242 * 3.1415927410125732421875) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) / ((_3264 * _3264) * ((_3209 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3220 * _3063.z;
                                frontier_phi_75_pred_1 = _3220 * _3063.y;
                                frontier_phi_75_pred_2 = _3220 * _3063.x;
                                frontier_phi_75_pred_3 = _3294 * _3075.z;
                                frontier_phi_75_pred_4 = _3294 * _3075.y;
                                frontier_phi_75_pred_5 = _3294 * _3075.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3303 = frontier_phi_75_pred;
                            _3302 = frontier_phi_75_pred_1;
                            _3301 = frontier_phi_75_pred_2;
                            _3300 = frontier_phi_75_pred_3;
                            _3299 = frontier_phi_75_pred_4;
                            _3298 = frontier_phi_75_pred_5;
                            _3005 = _3301 + _3018;
                            _3006 = _3302 + _3019;
                            _3007 = _3303 + _3020;
                            _3002 = _3298 + _3015;
                            _3003 = _3299 + _3016;
                            _3004 = _3300 + _3017;
                            if (_3022 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3022;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3007;
                        frontier_phi_69_pred_1 = _3006;
                        frontier_phi_69_pred_2 = _3005;
                        frontier_phi_69_pred_3 = _3004;
                        frontier_phi_69_pred_4 = _3003;
                        frontier_phi_69_pred_5 = _3002;
                    }
                    _2674 = frontier_phi_69_pred;
                    _2672 = frontier_phi_69_pred_1;
                    _2670 = frontier_phi_69_pred_2;
                    _2668 = frontier_phi_69_pred_3;
                    _2666 = frontier_phi_69_pred_4;
                    _2664 = frontier_phi_69_pred_5;
                    uint _2809 = _2808 + 1u;
                    if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2802 = _2664;
                        _2803 = _2666;
                        _2804 = _2668;
                        _2805 = _2670;
                        _2806 = _2672;
                        _2807 = _2674;
                        _2808 = _2809;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2674;
                frontier_phi_57_58_ladder_1 = _2672;
                frontier_phi_57_58_ladder_2 = _2670;
                frontier_phi_57_58_ladder_3 = _2668;
                frontier_phi_57_58_ladder_4 = _2666;
                frontier_phi_57_58_ladder_5 = _2664;
            }
            else
            {
                frontier_phi_57_58_ladder = _2553;
                frontier_phi_57_58_ladder_1 = _2551;
                frontier_phi_57_58_ladder_2 = _2549;
                frontier_phi_57_58_ladder_3 = _2547;
                frontier_phi_57_58_ladder_4 = _2545;
                frontier_phi_57_58_ladder_5 = _2543;
            }
            _2663 = frontier_phi_57_58_ladder_5;
            _2665 = frontier_phi_57_58_ladder_4;
            _2667 = frontier_phi_57_58_ladder_3;
            _2669 = frontier_phi_57_58_ladder_2;
            _2671 = frontier_phi_57_58_ladder_1;
            _2673 = frontier_phi_57_58_ladder;
        }
        float _2678 = isnan(1.0) ? _666 : (isnan(_666) ? 1.0 : min(_666, 1.0));
        _2408 = (_2678 * _2669) + _1845;
        _2410 = (_2678 * _2671) + _1847;
        _2412 = (_2678 * _2673) + _1849;
        _2414 = ((_2663 * _652) * _2678) + _2190;
        _2416 = ((_2665 * _654) * _2678) + _2192;
        _2418 = ((_2667 * _655) * _2678) + _2194;
    }
    else
    {
        _2408 = _1845;
        _2410 = _1847;
        _2412 = _1849;
        _2414 = _2190;
        _2416 = _2192;
        _2418 = _2194;
    }
    uint _2424 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _2430 = cbInstanceData._m0[_2424].x * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[11u].x) * _438.x) + (((cbMtdParam._m0[10u].x * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _408));
    float _2431 = cbInstanceData._m0[_2424].y * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[11u].y) * _438.y) + (((cbMtdParam._m0[10u].y * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _408));
    float _2432 = cbInstanceData._m0[_2424].z * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[11u].z) * _438.z) + (((cbMtdParam._m0[10u].z * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _408));
    float _4366 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4377 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4388 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4399 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _2438 = 0.959999978542327880859375 - (_625 * 0.959999978542327880859375);
    float _2446 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2408 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _666));
    float _2447 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2410 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _666));
    float _2448 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2412 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _666));
    float _2452 = _2438 - (exp2(log2(1.0 - _681) * 5.0) * _2438);
    float _2464 = ((_2446 + ((_2414 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + _2430) + ((((cbSceneParam._m0[72u].w * _479.x) * _2452) - _2446) * _509);
    float _2467 = ((_2431 + ((_2416 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + _2447) + ((((cbSceneParam._m0[72u].w * _479.y) * _2452) - _2447) * _509);
    float _2470 = ((_2432 + ((_2418 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + _2448) + ((((cbSceneParam._m0[72u].w * _479.z) * _2452) - _2448) * _509);
    float _4425 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2483 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2488 = cbInstanceData._m0[_595 + 6u].w * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)));
    float _2493 = _457 / cbSceneParam._m0[86u].x;
    float _2494 = _458 / cbSceneParam._m0[86u].y;
    vec4 _2508 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, (log2((isnan(cbSceneParam._m0[77u].w) ? _538 : (isnan(_538) ? cbSceneParam._m0[77u].w : min(_538, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2510 = _2508.x;
    float _2511 = _2508.y;
    float _2512 = _2508.z;
    float _2513 = _2508.w;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_538 > cbSceneParam._m0[78u].w)
    {
        float _2568 = isnan(_538) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _538 : min(cbSceneParam._m0[80u].w, _538));
        float _2569 = _2568 / _538;
        float _2580 = _2569 * _284;
        float _2581 = _285 * _2569;
        float _2582 = (-0.0) - _2581;
        float _2583 = _2569 * _286;
        float _2585 = (cbSceneParam._m0[77u].w * _2582) / _2568;
        float _2586 = _2585 + cbSceneParam._m0[79u].w;
        float _2587 = cbSceneParam._m0[79u].w - _2581;
        float _2593 = sqrt(((_2580 * _2580) + (_2581 * _2581)) + (_2583 * _2583));
        float _2596 = (1.0 - (cbSceneParam._m0[77u].w / _2568)) * _2593;
        float _2601 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2603 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2764;
        if (abs((_2582 - _2585) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2764 = ((((_2586 > 0.0) ? exp2(_2601 * _2586) : (2.0 - exp2(_2603 * _2586))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2596;
        }
        else
        {
            float _2724 = 1.0 / cbSceneParam._m0[80u].x;
            float _2725 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : max(_2586, _2587));
            float _2726 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : min(_2586, _2587));
            float _2735 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : min(_2725, 0.0));
            float _2736 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : min(_2726, 0.0));
            _2764 = ((abs(_2593 / _2582) * cbSceneParam._m0[80u].y) * ((((_2735 - _2736) * 2.0) - ((exp2(_2601 * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0)))) - exp2(_2601 * (isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0))))) * _2724)) - ((exp2(_2603 * _2735) - exp2(_2603 * _2736)) * _2724))) + (_2596 * cbSceneParam._m0[80u].z);
        }
        vec4 _2766 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, 1.0), 0.0);
        float _2775 = exp2((_2764 * (-1.44269502162933349609375)) * (1.0 - _2766.w));
        float _2776 = log2(_2775);
        float _2792 = log2(_2513);
        _2605 = (exp2(_2792 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2776 * cbSceneParam._m0[78u].x)) * _2766.x) / cbSceneParam._m0[78u].x)) + _2510;
        _2607 = (exp2(_2792 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2776 * cbSceneParam._m0[78u].y)) * _2766.y) / cbSceneParam._m0[78u].y)) + _2511;
        _2609 = (exp2(_2792 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2776 * cbSceneParam._m0[78u].z)) * _2766.z) / cbSceneParam._m0[78u].z)) + _2512;
        _2611 = _2775 * _2513;
    }
    else
    {
        _2605 = _2510;
        _2607 = _2511;
        _2609 = _2512;
        _2611 = _2513;
    }
    float _2622 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2623 = _2622 == 3.0;
    float _2624 = log2(_2611);
    float _2628 = exp2(_2624 * cbSceneParam._m0[78u].x);
    float _2629 = exp2(_2624 * cbSceneParam._m0[78u].y);
    float _2630 = exp2(_2624 * cbSceneParam._m0[78u].z);
    float _2631 = _2628 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0)));
    float _2632 = _2629 * (isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0)));
    float _2633 = _2630 * (isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0)));
    float _2642 = (_2622 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2642 * (_2623 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2605)));
    SV_Target.y = _2642 * (_2623 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.z = _2642 * (_2623 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.w = _2488;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2430) * _2483) * _2628) * _2642;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2431) * _2483) * _2629) * _2642;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2432) * _2483) * _2630) * _2642;
    SV_Target_1.w = _2488;
}


