#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_5;
layout(set = 0, binding = 45) uniform texture2D C_Camouflage_test_01_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1100;
float _3826;
float _3827;
float _3828;
float _3829;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235;
    float _236;
    float _237;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
    }
    else
    {
        _235 = _221;
        _236 = _222;
        _237 = _223;
    }
    float _282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _292 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _282);
    float _293 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _282);
    float _294 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _282);
    vec4 _312 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _312.w;
    float _319 = _312.x * cbMtdParam._m0[9u].x;
    float _320 = _312.y * cbMtdParam._m0[9u].y;
    float _321 = _312.z * cbMtdParam._m0[9u].z;
    vec4 _337 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _340 = _337.x + cbMtdParam._m0[12u].w;
    vec4 _356 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _364 = (_356.x * 2.0) + (-1.0);
    float _366 = (_356.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_364, _366), vec2(_364, _366));
    float _3838 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))));
    float _376 = fma(_373, _235, fma(_366, _227 * TANGENT.x, (_213 * _205) * _364));
    float _379 = fma(_373, _236, fma(_366, _227 * TANGENT.y, (_213 * _206) * _364));
    float _382 = fma(_373, _237, fma(_366, _227 * TANGENT.z, (_213 * _207) * _364));
    float _386 = inversesqrt(dot(vec3(_376, _379, _382), vec3(_376, _379, _382)));
    float _387 = _386 * _376;
    float _388 = _386 * _379;
    float _389 = _386 * _382;
    float _390 = _356.z + cbMtdParam._m0[13u].x;
    float _402 = inversesqrt(dot(vec3(_292, _293, _294), vec3(_292, _293, _294)));
    float _403 = _402 * _292;
    float _404 = _402 * _293;
    float _405 = _402 * _294;
    float _409 = dot(vec4(_403, _404, _405, 0.0), vec4(_387, _388, _389, 0.0)) - cbMtdParam._m0[13u].y;
    float _3849 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _416 = exp2(log2(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    vec4 _446 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _474 = ((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[12u].y * _387);
    float _475 = ((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[12u].y * _388);
    float _482 = isnan(cbInstanceData._m0[8u].x) ? _474 : (isnan(_474) ? cbInstanceData._m0[8u].x : max(_474, cbInstanceData._m0[8u].x));
    float _483 = isnan(cbInstanceData._m0[8u].y) ? _475 : (isnan(_475) ? cbInstanceData._m0[8u].y : max(_475, cbInstanceData._m0[8u].y));
    vec4 _487 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_4, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _482 : (isnan(_482) ? cbInstanceData._m0[8u].z : min(_482, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _483 : (isnan(_483) ? cbInstanceData._m0[8u].w : min(_483, cbInstanceData._m0[8u].w))));
    vec4 _512 = texture(sampler2D(C_Camouflage_test_01_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    float _515 = _512.x + cbMtdParam._m0[12u].x;
    float _516 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _517 = isnan(1.0) ? _516 : (isnan(_516) ? 1.0 : min(_516, 1.0));
    float _521 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _522 = _521 * _387;
    float _523 = _521 * _388;
    float _524 = _521 * _389;
    float _3895 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _525 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _526 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3928 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3939 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3950 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _530 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _546 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _551 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _553 = _551.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _779 = sqrt(((_292 * _292) + (_293 * _293)) + (_294 * _294));
        float _785 = (cbMatDynParam._m0[5u].x * _779) + cbMatDynParam._m0[5u].y;
        float _3961 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _790 = (cbMatDynParam._m0[5u].z * _779) + cbMatDynParam._m0[5u].w;
        float _3972 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) - _786)) + _786) < ((_553 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _564 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _565 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _567 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _569 = _567.w;
    float _589 = fma(_524, cbSceneParam._m0[5u].z, fma(_523, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _522));
    float _592 = fma(_524, cbSceneParam._m0[6u].z, fma(_523, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _522));
    float _595 = fma(_524, cbSceneParam._m0[7u].z, fma(_523, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _522));
    vec4 _597 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _608 = (((_597.y - _526) + (_597.w * _526)) * cbMtdParam._m0[3u].x) + _526;
    uint _621 = uint(roundEven(NORMAL.w)) * 13u;
    uint _622 = _621 + 9u;
    uint _623 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3983 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    vec4 _635 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    vec4 _640 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _651 = (((_640.x - _530) + (_640.w * _530)) * cbMtdParam._m0[3u].x) + _530;
    float _664 = (cbMtdParam._m0[3u].x * (((_632 * _569) - _632) + _635.x)) + _632;
    float _665 = (cbMtdParam._m0[3u].x * (((_633 * _569) - _633) + _635.y)) + _633;
    float _666 = (cbMtdParam._m0[3u].x * (((_634 * _569) - _634) + _635.z)) + _634;
    float _667 = 1.0 - _651;
    float _668 = _667 * _664;
    float _669 = _667 * _665;
    float _670 = _667 * _666;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _651;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _651;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _651;
    float _678 = _675 + 0.039999999105930328369140625;
    float _680 = _676 + 0.039999999105930328369140625;
    float _681 = _677 + 0.039999999105930328369140625;
    vec4 _689 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _564, cbSceneParam._m0[86u].y * _565));
    float _692 = _689.x * TEXCOORD_8;
    float _693 = dot(vec3(_522, _523, _524), vec3(_403, _404, _405));
    float _696 = _693 * 2.0;
    float _700 = (_696 * _522) - _403;
    float _701 = (_696 * _523) - _404;
    float _702 = (_696 * _524) - _405;
    float _706 = abs(dot(vec3(_403, _404, _405), vec3(_522, _523, _524)));
    float _4016 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _707 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _713 = sqrt(_608);
    float _725 = exp2((_713 * 5.0) * log2(1.0 - (_707 * 0.999000012874603271484375))) / (4.0 - (_713 * 3.0));
    float _731 = (1.0 - _725) * ((_713 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _732 = _725 * _713;
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1099;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _824 = fma(_768, cbModelParam._m0[26u].z, fma(_764, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760));
        float _828 = fma(_768, cbModelParam._m0[27u].z, fma(_764, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760));
        float _832 = fma(_768, cbModelParam._m0[28u].z, fma(_764, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760));
        float _857 = _760 + _522;
        float _858 = _764 + _523;
        float _859 = _768 + _524;
        float _869 = fma(_859, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857)) - _824;
        float _870 = fma(_859, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857)) - _828;
        float _871 = fma(_859, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857)) - _832;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_824 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_828 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[34u].z) + ((((((_832 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _927 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_893.x + (-0.5));
        float _929 = _927 * (_893.y + (-0.5));
        float _930 = _927 * (_893.z + (-0.5));
        float _937 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_900.x + (-0.5));
        float _939 = _937 * (_900.y + (-0.5));
        float _940 = _937 * (_900.z + (-0.5));
        float _947 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_907.x + (-0.5));
        float _949 = _947 * (_907.y + (-0.5));
        float _950 = _947 * (_907.z + (-0.5));
        float _957 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_914.x + (-0.5));
        float _959 = _957 * (_914.y + (-0.5));
        float _960 = _957 * (_914.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _981 = (dot(vec3(_522, _523, _524), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _991 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _4064 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_993 + 1.0))) + _998) * _961;
        float _1008 = _929 * 0.5;
        float _1009 = _939 * 0.5;
        float _1010 = _949 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_522, _523, _524), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _4097 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1035 + 1.0))) + _1040) * _962;
        float _1050 = _930 * 0.5;
        float _1051 = _940 * 0.5;
        float _1052 = _950 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_522, _523, _524), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _4130 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1077 + 1.0))) + _1082) * _963;
        _1099 = _930;
        _1101 = _929;
        _1102 = _928;
        _1103 = _940;
        _1104 = _939;
        _1105 = _938;
        _1106 = _950;
        _1107 = _949;
        _1108 = _948;
        _1109 = _963;
        _1110 = _962;
        _1111 = _961;
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _1100;
        _1101 = _1100;
        _1102 = _1100;
        _1103 = _1100;
        _1104 = _1100;
        _1105 = _1100;
        _1106 = _1100;
        _1107 = _1100;
        _1108 = _1100;
        _1109 = _1100;
        _1110 = _1100;
        _1111 = _1100;
        _1112 = 0.0;
        _1113 = 0.0;
        _1114 = 0.0;
    }
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1143 = fma(_768, cbModelParam._m0[30u].z, fma(_764, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _760));
        float _1147 = fma(_768, cbModelParam._m0[31u].z, fma(_764, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _760));
        float _1151 = fma(_768, cbModelParam._m0[32u].z, fma(_764, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _760));
        float _1174 = _760 + _522;
        float _1175 = _764 + _523;
        float _1176 = _768 + _524;
        float _1186 = fma(_1176, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174)) - _1143;
        float _1187 = fma(_1176, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174)) - _1147;
        float _1188 = fma(_1176, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174)) - _1151;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1143 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1147 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[35u].z) + ((((((_1151 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1242 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1209.x + (-0.5));
        float _1244 = _1242 * (_1209.y + (-0.5));
        float _1245 = _1242 * (_1209.z + (-0.5));
        float _1252 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1216.x + (-0.5));
        float _1254 = _1252 * (_1216.y + (-0.5));
        float _1255 = _1252 * (_1216.z + (-0.5));
        float _1262 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1223.x + (-0.5));
        float _1264 = _1262 * (_1223.y + (-0.5));
        float _1265 = _1262 * (_1223.z + (-0.5));
        float _1272 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1230.x + (-0.5));
        float _1274 = _1272 * (_1230.y + (-0.5));
        float _1275 = _1272 * (_1230.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_522, _523, _524), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4193 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1306 + 1.0))) + _1311) * _1276;
        float _1321 = _1244 * 0.5;
        float _1322 = _1254 * 0.5;
        float _1323 = _1264 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_522, _523, _524), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4226 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1348 + 1.0))) + _1353) * _1277;
        float _1363 = _1245 * 0.5;
        float _1364 = _1255 * 0.5;
        float _1365 = _1265 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_522, _523, _524), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4259 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1390 + 1.0))) + _1395) * _1278;
        _1412 = _1245;
        _1413 = _1244;
        _1414 = _1243;
        _1415 = _1255;
        _1416 = _1254;
        _1417 = _1253;
        _1418 = _1265;
        _1419 = _1264;
        _1420 = _1263;
        _1421 = _1278;
        _1422 = _1277;
        _1423 = _1276;
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
    }
    else
    {
        _1412 = _1100;
        _1413 = _1100;
        _1414 = _1100;
        _1415 = _1100;
        _1416 = _1100;
        _1417 = _1100;
        _1418 = _1100;
        _1419 = _1100;
        _1420 = _1100;
        _1421 = _1100;
        _1422 = _1100;
        _1423 = _1100;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1112)) + _1112;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1113)) + _1113;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1114)) + _1114;
    float _1459 = fma(_1438, cbSceneParam._m0[89u].z, fma(_1437, cbSceneParam._m0[89u].y, _1436 * cbSceneParam._m0[89u].x));
    float _1462 = fma(_1438, cbSceneParam._m0[90u].z, fma(_1437, cbSceneParam._m0[90u].y, _1436 * cbSceneParam._m0[90u].x));
    float _1465 = fma(_1438, cbSceneParam._m0[91u].z, fma(_1437, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1436));
    float _1480 = _700 * 0.5;
    float _1481 = _701 * 0.5;
    float _1482 = _702 * 0.5;
    float _1483 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1486 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1489 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1523;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1496 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1099, _1103, _1106, _1109));
        float _1500 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1101, _1104, _1107, _1110));
        float _1504 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1511 = dot(vec4(cbModelParam._m0[39u]), vec4(_1480, _1481, _1482, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1534;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1525 = dot(vec4(cbModelParam._m0[40u]), vec4(_1480, _1481, _1482, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1538 = (_1534 * cbModelParam._m0[1u].x) + (_1523 * (1.0 - cbModelParam._m0[1u].x));
    float _1548 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _608);
    float _1549 = isnan(_1548) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1548 : min(cbModelParam._m0[25u].z, _1548));
    float _1630;
    float _1632;
    float _1634;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1597 = fma(_768, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760)) + cbModelParam._m0[13u].w;
        float _1601 = fma(_768, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760)) + cbModelParam._m0[14u].w;
        float _1605 = fma(_768, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760)) + cbModelParam._m0[15u].w;
        float _1608 = fma(_702, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700));
        float _1611 = fma(_702, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700));
        float _1614 = fma(_702, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700));
        float _1642;
        if (_1608 > 0.0)
        {
            _1642 = abs((1.0 - _1597) / _1608);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1597 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1642 = frontier_phi_19_17_ladder;
        }
        float _1817;
        if (_1611 > 0.0)
        {
            _1817 = abs((1.0 - _1601) / _1611);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1601 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1817 = frontier_phi_28_24_ladder;
        }
        float _2112;
        if (_1614 > 0.0)
        {
            _2112 = abs((1.0 - _1605) / _1614);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1605 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2112 = frontier_phi_40_35_ladder;
        }
        float _2114 = isnan(_1817) ? _1642 : (isnan(_1642) ? _1817 : min(_1642, _1817));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1608) + _1597;
        float _2120 = (_2115 * _1611) + _1601;
        float _2121 = (_2115 * _1614) + _1605;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2122;
        float _2126 = _2122 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 > _2126) || ((_2120 < _2124) || ((_2119 < _2124) || (_2119 > _2126))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2121, cbModelParam._m0[9u].z, fma(_2120, cbModelParam._m0[9u].y, _2119 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2121, cbModelParam._m0[10u].z, fma(_2120, cbModelParam._m0[10u].y, _2119 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2121, cbModelParam._m0[11u].z, fma(_2120, cbModelParam._m0[11u].y, _2119 * cbModelParam._m0[11u].x))), _1549);
            frontier_phi_18_40_ladder = _2266.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2266.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2266.x * cbModelParam._m0[1u].y;
        }
        _1630 = frontier_phi_18_40_ladder_2;
        _1632 = frontier_phi_18_40_ladder_1;
        _1634 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_700, _701, _702), _1549);
        _1630 = _1618.x * cbModelParam._m0[1u].y;
        _1632 = _1618.y * cbModelParam._m0[1u].y;
        _1634 = _1618.z * cbModelParam._m0[1u].y;
    }
    float _1638 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _608);
    float _1639 = isnan(_1638) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1638 : min(cbModelParam._m0[25u].w, _1638));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1696 = fma(_768, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760)) + cbModelParam._m0[21u].w;
        float _1700 = fma(_768, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760)) + cbModelParam._m0[22u].w;
        float _1704 = fma(_768, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760)) + cbModelParam._m0[23u].w;
        float _1707 = fma(_702, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700));
        float _1710 = fma(_702, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700));
        float _1713 = fma(_702, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700));
        float _1822;
        if (_1707 > 0.0)
        {
            _1822 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1822 = frontier_phi_30_26_ladder;
        }
        float _2139;
        if (_1710 > 0.0)
        {
            _2139 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2139 = frontier_phi_42_37_ladder;
        }
        float _2477;
        if (_1713 > 0.0)
        {
            _2477 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2477 = frontier_phi_52_49_ladder;
        }
        float _2479 = isnan(_2139) ? _1822 : (isnan(_1822) ? _2139 : min(_1822, _2139));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1707) + _1696;
        float _2485 = (_2480 * _1710) + _1700;
        float _2486 = (_2480 * _1713) + _1704;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2486, cbModelParam._m0[17u].z, fma(_2485, cbModelParam._m0[17u].y, _2484 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2486, cbModelParam._m0[18u].z, fma(_2485, cbModelParam._m0[18u].y, _2484 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2486, cbModelParam._m0[19u].z, fma(_2485, cbModelParam._m0[19u].y, _2484 * cbModelParam._m0[19u].x))), _1639);
            frontier_phi_27_52_ladder = _2608.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2608.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2608.x * cbModelParam._m0[1u].z;
        }
        _1732 = frontier_phi_27_52_ladder_2;
        _1734 = frontier_phi_27_52_ladder_1;
        _1736 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_700, _701, _702), _1639);
        _1732 = _1716.x * cbModelParam._m0[1u].z;
        _1734 = _1716.y * cbModelParam._m0[1u].z;
        _1736 = _1716.z * cbModelParam._m0[1u].z;
    }
    float _1749 = (((_731 * _678) + _732) * _692) * ((cbModelParam._m0[1u].w * (_1732 - _1630)) + _1630);
    float _1751 = (((_731 * _680) + _732) * _692) * ((cbModelParam._m0[1u].w * (_1734 - _1632)) + _1632);
    float _1753 = (((_731 * _681) + _732) * _692) * ((cbModelParam._m0[1u].w * (_1736 - _1634)) + _1634);
    float _1756 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1749 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1749 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, _1749 * cbSceneParam._m0[91u].x));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1809 = _1796 / _1808;
    float _1810 = _1800 / _1808;
    float _1811 = _1804 / _1808;
    float _1958;
    float _1959;
    float _1960;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1838 = ((uint(_1811 > cbSceneParam._m0[59u].y) + uint(_1811 > cbSceneParam._m0[59u].x)) + uint(_1811 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1839 = _1838 + 43u;
        uint _1847 = _1838 + 44u;
        uint _1855 = _1838 + 45u;
        uint _1863 = _1838 + 46u;
        float _1874 = fma(_1808, cbSceneParam._m0[_1839].w, fma(_1804, cbSceneParam._m0[_1839].z, fma(_1800, cbSceneParam._m0[_1839].y, _1796 * cbSceneParam._m0[_1839].x)));
        float _1878 = fma(_1808, cbSceneParam._m0[_1847].w, fma(_1804, cbSceneParam._m0[_1847].z, fma(_1800, cbSceneParam._m0[_1847].y, _1796 * cbSceneParam._m0[_1847].x)));
        float _1886 = fma(_1808, cbSceneParam._m0[_1863].w, fma(_1804, cbSceneParam._m0[_1863].z, fma(_1800, cbSceneParam._m0[_1863].y, _1796 * cbSceneParam._m0[_1863].x)));
        float _1891 = cbSceneParam._m0[33u].z * _1886;
        float _1893 = cbSceneParam._m0[33u].w * _1886;
        float _1896 = fma(_1808, cbSceneParam._m0[_1855].w, fma(_1804, cbSceneParam._m0[_1855].z, fma(_1800, cbSceneParam._m0[_1855].y, _1796 * cbSceneParam._m0[_1855].x))) / _1886;
        float _1944 = (cbSceneParam._m0[33u].x - sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811))) * cbSceneParam._m0[33u].y;
        float _4385 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1951 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1891 + _1874) / _1886, (_1893 + _1878) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1893 + _1874) / _1886, (_1878 - _1891) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 - _1891) / _1886, (_1878 - _1893) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 - _1893) / _1886, (_1891 + _1878) / _1886), _1896), 0.0)).x), vec4(0.25)));
        _1958 = 1.0 - (_1951 * cbSceneParam._m0[34u].x);
        _1959 = 1.0 - (_1951 * cbSceneParam._m0[34u].y);
        _1960 = 1.0 - (_1951 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1958 = 1.0;
        _1959 = 1.0;
        _1960 = 1.0;
    }
    float _2024;
    float _2026;
    float _2028;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2012 = fma(_1808, cbSceneParam._m0[63u].w, fma(_1804, cbSceneParam._m0[63u].z, fma(_1800, cbSceneParam._m0[63u].y, _1796 * cbSceneParam._m0[63u].x)));
        float _2013 = fma(_1808, cbSceneParam._m0[60u].w, fma(_1804, cbSceneParam._m0[60u].z, fma(_1800, cbSceneParam._m0[60u].y, _1796 * cbSceneParam._m0[60u].x))) / _2012;
        float _2014 = fma(_1808, cbSceneParam._m0[61u].w, fma(_1804, cbSceneParam._m0[61u].z, fma(_1800, cbSceneParam._m0[61u].y, _1796 * cbSceneParam._m0[61u].x))) / _2012;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2013 >= cbSceneParam._m0[64u].x) && (_2014 >= cbSceneParam._m0[64u].y)) && (_2013 <= cbSceneParam._m0[64u].z)) && (_2014 <= cbSceneParam._m0[64u].w))
        {
            float _2152 = fma(_1808, cbSceneParam._m0[62u].w, fma(_1804, cbSceneParam._m0[62u].z, fma(_1800, cbSceneParam._m0[62u].y, _1796 * cbSceneParam._m0[62u].x))) / _2012;
            float _2156 = isnan(cbSceneParam._m0[41u].w) ? _2152 : (isnan(_2152) ? cbSceneParam._m0[41u].w : max(_2152, cbSceneParam._m0[41u].w));
            float _2199 = (cbSceneParam._m0[33u].x - sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811))) * cbSceneParam._m0[33u].y;
            float _4401 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
            float _2206 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2013, cbSceneParam._m0[33u].w + _2014), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2013, _2014 - cbSceneParam._m0[33u].z), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2013 - cbSceneParam._m0[33u].z, _2014 - cbSceneParam._m0[33u].w), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2013 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2014), _2156), 0.0)).x), vec4(0.25)));
            float _2210 = 1.0 - (_2206 * cbSceneParam._m0[34u].x);
            float _2211 = 1.0 - (_2206 * cbSceneParam._m0[34u].y);
            float _2212 = 1.0 - (_2206 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2211) ? _1959 : (isnan(_1959) ? _2211 : min(_1959, _2211));
            frontier_phi_39_38_ladder_1 = isnan(_2210) ? _1958 : (isnan(_1958) ? _2210 : min(_1958, _2210));
            frontier_phi_39_38_ladder_2 = isnan(_2212) ? _1960 : (isnan(_1960) ? _2212 : min(_1960, _2212));
        }
        else
        {
            frontier_phi_39_38_ladder = _1959;
            frontier_phi_39_38_ladder_1 = _1958;
            frontier_phi_39_38_ladder_2 = _1960;
        }
        _2024 = frontier_phi_39_38_ladder_1;
        _2026 = frontier_phi_39_38_ladder;
        _2028 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2024 = _1958;
        _2026 = _1959;
        _2028 = _1960;
    }
    uvec4 _2033 = floatBitsToUint(cbInstanceData._m0[_621 + 5u]);
    uint _2035 = _2033.x * 14u;
    uint _2036 = _2035 + 13u;
    float _2043 = _692 + (-1.0);
    float _2048 = (cbLight._m0[_2036].x * _2043) + 1.0;
    float _2049 = (cbLight._m0[_2036].y * _2043) + 1.0;
    float _2050 = (cbLight._m0[_2036].z * _2043) + 1.0;
    float _2051 = (cbLight._m0[_2036].w * _2043) + 1.0;
    uint _2052 = _2035 + 5u;
    float _2058 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2062 = _2035 + 4u;
    float _2071 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2075 = _2035 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_522, _523, _524));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_522, _523, _524));
    float _4437 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4448 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2052].x * _2058) * _2096) + (((cbLight._m0[_2062].x * _2024) * _2071) * _2094);
    float _2104 = ((_2058 * cbLight._m0[_2052].y) * _2096) + (((cbLight._m0[_2062].y * _2026) * _2071) * _2094);
    float _2105 = ((_2058 * cbLight._m0[_2052].z) * _2096) + (((cbLight._m0[_2062].z * _2028) * _2071) * _2094);
    uvec4 _2109 = floatBitsToUint(cbLight._m0[_2035 + 12u]);
    bool _2111 = _2109.x == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2111)
    {
        _2213 = _2103;
        _2215 = _2104;
        _2217 = _2105;
    }
    else
    {
        uint _2221 = _2035 + 6u;
        float _2237 = (dot(vec3(cbLight._m0[_2035 + 2u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _2238 = _2237 * _2237;
        float _4459 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2239 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2240 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2213 = (((cbLight._m0[_2221].x * 0.3183098733425140380859375) * _2239) * _2240) + _2103;
        _2215 = (((cbLight._m0[_2221].y * 0.3183098733425140380859375) * _2239) * _2240) + _2104;
        _2217 = (((cbLight._m0[_2221].z * 0.3183098733425140380859375) * _2239) * _2240) + _2105;
    }
    bool _2220 = _2109.y == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2220)
    {
        _2275 = _2213;
        _2277 = _2215;
        _2279 = _2217;
    }
    else
    {
        uint _2448 = _2035 + 7u;
        float _2464 = (dot(vec3(cbLight._m0[_2035 + 3u].xyz), vec3(_522, _523, _524)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4475 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2467 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2275 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2213;
        _2277 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2215;
        _2279 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2217;
    }
    uint _2282 = _2035 + 8u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _608) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2035].x + _403;
    float _2298 = cbLight._m0[_2035].y + _404;
    float _2299 = cbLight._m0[_2035].z + _405;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2035].xyz));
    float _4491 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _2311 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2312 = dot(vec3(_522, _523, _524), vec3(_2304, _2305, _2306));
    float _4513 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2304, _2305, _2306));
    float _4524 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2296 * _2296;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
    float _2333 = 0.959999978542327880859375 - _675;
    float _2335 = 0.959999978542327880859375 - _676;
    float _2336 = 0.959999978542327880859375 - _677;
    float _2343 = 1.0 - _2296;
    float _2354 = (0.5 / (((_2311 * ((_2310 * _2343) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2343) + _2296) * _2310))) * _2310;
    float _4535 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    uint _2370 = _2035 + 9u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _608) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2075].x + _403;
    float _2384 = cbLight._m0[_2075].y + _404;
    float _2385 = cbLight._m0[_2075].z + _405;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2075].xyz));
    float _4546 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2397 = dot(vec3(_522, _523, _524), vec3(_2390, _2391, _2392));
    float _4557 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2390, _2391, _2392));
    float _4568 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2382 * _2382;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2423 = 1.0 - _2382;
    float _2433 = (0.5 / (((_2311 * ((_2396 * _2423) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2423) + _2382) * _2396))) * _2396;
    float _4579 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    float _2445 = (((((_2416 * _2333) + _678) * cbLight._m0[_2370].x) * _2435) * _2058) + ((((cbLight._m0[_2282].x * _2024) * ((_2332 * _2333) + _678)) * _2356) * _2071);
    float _2446 = (((((_2416 * _2335) + _680) * cbLight._m0[_2370].y) * _2435) * _2058) + ((((cbLight._m0[_2282].y * _2026) * ((_2332 * _2335) + _680)) * _2356) * _2071);
    float _2447 = (((((_2416 * _2336) + _681) * cbLight._m0[_2370].z) * _2435) * _2058) + ((((cbLight._m0[_2282].z * _2028) * ((_2332 * _2336) + _681)) * _2356) * _2071);
    float _2503;
    float _2505;
    float _2507;
    if (_2111)
    {
        _2503 = _2445;
        _2505 = _2446;
        _2507 = _2447;
    }
    else
    {
        uint _2509 = _2035 + 2u;
        uint _2513 = _2035 + 10u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _608) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _403;
        float _2530 = cbLight._m0[_2509].y + _404;
        float _2531 = cbLight._m0[_2509].z + _405;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2509].xyz));
        float _4590 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2543 = dot(vec3(_522, _523, _524), vec3(_2536, _2537, _2538));
        float _4601 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4612 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2311 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2569) + _2528) * _2542))) * _2542;
        float _4623 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2503 = (((((_2562 * _2333) + _678) * cbLight._m0[_2513].x) * _2581) * _2582) + _2445;
        _2505 = (((((_2562 * _2335) + _680) * cbLight._m0[_2513].y) * _2581) * _2582) + _2446;
        _2507 = (((((_2562 * _2336) + _681) * cbLight._m0[_2513].z) * _2581) * _2582) + _2447;
    }
    float _2613;
    float _2615;
    float _2617;
    if (_2220)
    {
        _2613 = _2503;
        _2615 = _2505;
        _2617 = _2507;
    }
    else
    {
        uint _2624 = _2035 + 3u;
        uint _2628 = _2035 + 11u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _608) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _403;
        float _2645 = cbLight._m0[_2624].y + _404;
        float _2646 = cbLight._m0[_2624].z + _405;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_2624].xyz));
        float _4639 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2658 = dot(vec3(_522, _523, _524), vec3(_2651, _2652, _2653));
        float _4650 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4661 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
        float _2684 = 1.0 - _2643;
        float _2694 = (0.5 / (((_2311 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2684) + _2643) * _2657))) * _2657;
        float _4672 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2696 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2697 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2613 = (((((_2677 * _2333) + _678) * cbLight._m0[_2628].x) * _2696) * _2697) + _2503;
        _2615 = (((((_2677 * _2335) + _680) * cbLight._m0[_2628].y) * _2696) * _2697) + _2505;
        _2617 = (((((_2677 * _2336) + _681) * cbLight._m0[_2628].z) * _2696) * _2697) + _2507;
    }
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_2033.y == 0u)
    {
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.x;
        uint _2730 = uint((float(_2718.y) * floor(float(uint(cbSceneParam._m0[85u].y * _565) / _2719))) + floor(float(uint(cbSceneParam._m0[85u].x * _564) / _2719)));
        float _2740 = (log2(_1811 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2741 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        uint _2744 = uint(isnan(14.0) ? _2741 : (isnan(_2741) ? 14.0 : min(_2741, 14.0)));
        uvec4 _2749 = texelFetch(g_lightClusterGridBuffer, int(((_2744 << 2u) + (_2730 << 6u)) >> 2u));
        uint _2750 = _2749.x;
        uint _2751 = _2718.z;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        if (((((1u << ((_2751 >> 4u) & 15u)) + 4294967295u) & _2750) == 0u) || ((_2751 & 240u) == 0u))
        {
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
        }
        else
        {
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            uint _3042 = 0u;
            uint _3051;
            bool _3052;
            for (;;)
            {
                _3051 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                _3052 = _3051 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3052)
                {
                    frontier_phi_73_pred = _3041;
                    frontier_phi_73_pred_1 = _3040;
                    frontier_phi_73_pred_2 = _3039;
                    frontier_phi_73_pred_3 = _3038;
                    frontier_phi_73_pred_4 = _3037;
                    frontier_phi_73_pred_5 = _3036;
                }
                else
                {
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    uint _3187;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3051;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    for (;;)
                    {
                        uint _3191 = uint(findLSB(_3187)) + (_3042 << 5u);
                        uint _3188 = (_3187 + 4294967295u) & _3187;
                        uint _3193 = _3191 * 48u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3213 = (_3191 * 48u) + 4u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3232 = (_3191 * 48u) + 8u;
                        vec3 _3243 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x));
                        float _3247 = _3207.x - _1809;
                        float _3248 = _3207.y - _1810;
                        float _3249 = _3207.z - _1811;
                        float _3250 = dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249));
                        float _3253 = inversesqrt(_3250);
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3257 = dot(vec3(_589, _592, _595), vec3(_3254, _3255, _3256));
                        float _3262 = 1.0 - (_3250 * _3207.w);
                        float _4698 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3264 = sqrt(_3250) * _3226.w;
                        float _3267 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3257) + _3268;
                        float _3274 = _3264 * _3264;
                        float _3278 = ((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3263) / ((_3274 * 0.699999988079071044921875) + 1.0);
                        float _3282 = (-0.0) - _1809;
                        float _3283 = (-0.0) - _1810;
                        float _3284 = (-0.0) - _1811;
                        float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3298 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                        float _3299 = 1.0 - _713;
                        float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                        float _3307 = _3306 * _3306;
                        float _3308 = _3307 * _3307;
                        float _3309 = _3289 + _3254;
                        float _3310 = _3290 + _3255;
                        float _3311 = _3291 + _3256;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3319 = dot(vec3(_589, _592, _595), vec3(_3289, _3290, _3291));
                        float _4714 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3323 = dot(vec3(_589, _592, _595), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                        float _4725 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                        float _3331 = _3267 * _3307;
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3257) + _3332;
                        float _4736 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3337 = 1.0 - _3307;
                        float _3347 = (0.5 / (((_3336 * ((_3322 * _3337) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3307) * _3322))) * _3336;
                        float _4747 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3358 = (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3330 * _3330) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125))) * _3263;
                        _3111 = (_3278 * _3226.x) + _3184;
                        _3112 = (_3278 * _3226.y) + _3185;
                        _3113 = (_3278 * _3226.z) + _3186;
                        _3108 = (_3358 * _3243.x) + _3181;
                        _3109 = (_3358 * _3243.y) + _3182;
                        _3110 = (_3358 * _3243.z) + _3183;
                        if (_3188 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3188;
                        }
                    }
                    frontier_phi_73_pred = _3113;
                    frontier_phi_73_pred_1 = _3112;
                    frontier_phi_73_pred_2 = _3111;
                    frontier_phi_73_pred_3 = _3110;
                    frontier_phi_73_pred_4 = _3109;
                    frontier_phi_73_pred_5 = _3108;
                }
                _2887 = frontier_phi_73_pred;
                _2885 = frontier_phi_73_pred_1;
                _2883 = frontier_phi_73_pred_2;
                _2881 = frontier_phi_73_pred_3;
                _2879 = frontier_phi_73_pred_4;
                _2877 = frontier_phi_73_pred_5;
                uint _3043 = _3042 + 1u;
                if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3036 = _2877;
                    _3037 = _2879;
                    _3038 = _2881;
                    _3039 = _2883;
                    _3040 = _2885;
                    _3041 = _2887;
                    _3042 = _3043;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
        }
        uvec4 _2890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2891 = _2890.z;
        uint _2893 = (_2891 >> 8u) & 15u;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        if (((4294967295u << _2893) & _2750) == 0u)
        {
            _3004 = _2876;
            _3006 = _2878;
            _3008 = _2880;
            _3010 = _2882;
            _3012 = _2884;
            _3014 = _2886;
        }
        else
        {
            float _3029 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
            float _3030 = _3029 * _1809;
            float _3031 = _3029 * _1810;
            float _3032 = _3029 * _1811;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2893 < ((_2891 >> 12u) & 15u))
            {
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3164 = _2876;
                float _3165 = _2878;
                float _3166 = _2880;
                float _3167 = _2882;
                float _3168 = _2884;
                float _3169 = _2886;
                uint _3170 = _2893;
                uint _3179;
                bool _3180;
                for (;;)
                {
                    _3179 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                    _3180 = _3179 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3180)
                    {
                        frontier_phi_84_pred = _3168;
                        frontier_phi_84_pred_1 = _3167;
                        frontier_phi_84_pred_2 = _3166;
                        frontier_phi_84_pred_3 = _3165;
                        frontier_phi_84_pred_4 = _3164;
                        frontier_phi_84_pred_5 = _3169;
                    }
                    else
                    {
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3385 = _3164;
                        float _3386 = _3165;
                        float _3387 = _3166;
                        float _3388 = _3167;
                        float _3389 = _3168;
                        float _3390 = _3169;
                        uint _3391 = _3179;
                        uint _3392;
                        vec4 _3417;
                        float _3418;
                        vec4 _3433;
                        vec3 _3445;
                        vec4 _3461;
                        vec4 _3477;
                        float _3524;
                        bool _3525;
                        for (;;)
                        {
                            uint _3402 = ((_3170 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3391));
                            _3392 = (_3391 + 4294967295u) & _3391;
                            uint _3404 = _3402 * 40u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3418 = _3417.w;
                            uint _3420 = (_3402 * 40u) + 4u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3402 * 40u) + 8u;
                            _3445 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x));
                            uint _3448 = (_3402 * 40u) + 16u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3464 = (_3402 * 40u) + 20u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3480 = (_3402 * 40u) + 24u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3499 = (_3402 * 40u) + 28u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3524 = fma(_1811, _3512.z, fma(_1810, _3512.y, _3512.x * _1809)) + _3512.w;
                            _3525 = !((fma(_1811, _3493.z, fma(_1810, _3493.y, _3493.x * _1809)) + _3493.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3525)
                            {
                                float _3552 = _3417.x - _1809;
                                float _3553 = _3417.y - _1810;
                                float _3554 = _3417.z - _1811;
                                float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                                float _3558 = inversesqrt(_3555);
                                float _3559 = _3558 * _3552;
                                float _3560 = _3558 * _3553;
                                float _3561 = _3558 * _3554;
                                float _3565 = 1.0 - (_3555 / (_3418 * _3418));
                                float _4758 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3570 = sqrt(_3555) * _3433.w;
                                float _3572 = 1.39999997615814208984375 / (_3570 + 1.39999997615814208984375);
                                float _3573 = _3572 * _3572;
                                float _3576 = ((1.0 - _3573) * dot(vec3(_3559, _3560, _3561), vec3(_589, _592, _595))) + _3573;
                                float _3579 = _3570 * _3570;
                                float _3583 = (fma(_1811, _3461.z, fma(_1810, _3461.y, _3461.x * _1809)) + _3461.w) / _3524;
                                float _3584 = (fma(_1811, _3477.z, fma(_1810, _3477.y, _3477.x * _1809)) + _3477.w) / _3524;
                                float _3588 = 1.0 - dot(vec2(_3583, _3584), vec2(_3583, _3584));
                                float _4774 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3590 = _3589 * (((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3566) / ((_3579 * 0.699999988079071044921875) + 1.0));
                                float _3602 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                                float _3603 = 1.0 - _713;
                                float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                                float _3611 = _3610 * _3610;
                                float _3612 = _3611 * _3611;
                                float _3613 = _3559 - _3030;
                                float _3614 = _3560 - _3031;
                                float _3615 = _3561 - _3032;
                                float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                                float _3623 = dot(vec3(_589, _592, _595), vec3((-0.0) - _3030, (-0.0) - _3031, (-0.0) - _3032));
                                float _4785 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3627 = dot(vec3(_589, _592, _595), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                                float _4796 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                                float _3635 = _3572 * _3611;
                                float _3636 = _3635 * _3635;
                                float _3642 = ((1.0 - _3636) * dot(vec3(_589, _592, _595), vec3(_3559, _3560, _3561))) + _3636;
                                float _4807 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3644 = 1.0 - _3611;
                                float _3654 = (0.5 / (((_3643 * ((_3626 * _3644) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3643 * _3644) + _3611) * _3626))) * _3643;
                                float _4818 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3664 = (_3589 * _3566) * (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3634 * _3634) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3590 * _3433.y;
                                frontier_phi_90_pred_1 = _3590 * _3433.x;
                                frontier_phi_90_pred_2 = _3664 * _3445.z;
                                frontier_phi_90_pred_3 = _3664 * _3445.y;
                                frontier_phi_90_pred_4 = _3664 * _3445.x;
                                frontier_phi_90_pred_5 = _3590 * _3433.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_90_pred;
                            _3671 = frontier_phi_90_pred_1;
                            _3670 = frontier_phi_90_pred_2;
                            _3669 = frontier_phi_90_pred_3;
                            _3668 = frontier_phi_90_pred_4;
                            _3673 = frontier_phi_90_pred_5;
                            _3375 = _3671 + _3388;
                            _3376 = _3672 + _3389;
                            _3377 = _3673 + _3390;
                            _3372 = _3668 + _3385;
                            _3373 = _3669 + _3386;
                            _3374 = _3670 + _3387;
                            if (_3392 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3392;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3376;
                        frontier_phi_84_pred_1 = _3375;
                        frontier_phi_84_pred_2 = _3374;
                        frontier_phi_84_pred_3 = _3373;
                        frontier_phi_84_pred_4 = _3372;
                        frontier_phi_84_pred_5 = _3377;
                    }
                    _3013 = frontier_phi_84_pred;
                    _3011 = frontier_phi_84_pred_1;
                    _3009 = frontier_phi_84_pred_2;
                    _3007 = frontier_phi_84_pred_3;
                    _3005 = frontier_phi_84_pred_4;
                    _3015 = frontier_phi_84_pred_5;
                    uint _3171 = _3170 + 1u;
                    if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3164 = _3005;
                        _3165 = _3007;
                        _3166 = _3009;
                        _3167 = _3011;
                        _3168 = _3013;
                        _3169 = _3015;
                        _3170 = _3171;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3015;
                frontier_phi_65_66_ladder_1 = _3011;
                frontier_phi_65_66_ladder_2 = _3013;
                frontier_phi_65_66_ladder_3 = _3007;
                frontier_phi_65_66_ladder_4 = _3005;
                frontier_phi_65_66_ladder_5 = _3009;
            }
            else
            {
                frontier_phi_65_66_ladder = _2886;
                frontier_phi_65_66_ladder_1 = _2882;
                frontier_phi_65_66_ladder_2 = _2884;
                frontier_phi_65_66_ladder_3 = _2878;
                frontier_phi_65_66_ladder_4 = _2876;
                frontier_phi_65_66_ladder_5 = _2880;
            }
            _3004 = frontier_phi_65_66_ladder_4;
            _3006 = frontier_phi_65_66_ladder_3;
            _3008 = frontier_phi_65_66_ladder_5;
            _3010 = frontier_phi_65_66_ladder_1;
            _3012 = frontier_phi_65_66_ladder_2;
            _3014 = frontier_phi_65_66_ladder;
        }
        float _3019 = isnan(1.0) ? _692 : (isnan(_692) ? 1.0 : min(_692, 1.0));
        _2762 = (_3019 * _3010) + _2275;
        _2764 = (_3019 * _3012) + _2277;
        _2766 = (_3019 * _3014) + _2279;
        _2768 = ((_3004 * _678) * _3019) + _2613;
        _2770 = ((_3006 * _680) * _3019) + _2615;
        _2772 = ((_3008 * _681) * _3019) + _2617;
    }
    else
    {
        _2762 = _2275;
        _2764 = _2277;
        _2766 = _2279;
        _2768 = _2613;
        _2770 = _2615;
        _2772 = _2617;
    }
    uint _2778 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _2784 = cbInstanceData._m0[_2778].x * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[11u].x) * _446.x) + (((cbMtdParam._m0[10u].x * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _416));
    float _2785 = cbInstanceData._m0[_2778].y * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[11u].y) * _446.y) + (((cbMtdParam._m0[10u].y * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _416));
    float _2786 = cbInstanceData._m0[_2778].z * (((cbMtdParam._m0[13u].w * cbMtdParam._m0[11u].z) * _446.z) + (((cbMtdParam._m0[10u].z * TEXCOORD.w) * cbMtdParam._m0[13u].z) * _416));
    float _4834 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4845 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4856 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4867 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _2792 = 0.959999978542327880859375 - (_651 * 0.959999978542327880859375);
    float _2800 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2762 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _692));
    float _2801 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2764 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _692));
    float _2802 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2766 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _692));
    float _2806 = _2792 - (exp2(log2(1.0 - _707) * 5.0) * _2792);
    float _2818 = ((_2800 + ((_2768 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1538)) * cbPerFrame._m0[3u].x)) + _2784) + ((((cbSceneParam._m0[72u].w * _487.x) * _2806) - _2800) * _517);
    float _2821 = ((_2785 + ((_2770 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1538)) * cbPerFrame._m0[3u].x)) + _2801) + ((((cbSceneParam._m0[72u].w * _487.y) * _2806) - _2801) * _517);
    float _2824 = ((_2786 + ((_2772 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1538)) * cbPerFrame._m0[3u].x)) + _2802) + ((((cbSceneParam._m0[72u].w * _487.z) * _2806) - _2802) * _517);
    float _2825 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2826 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2827 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
    float _2833 = cbMtdParam._m0[2u].x * _2784;
    float _2834 = cbMtdParam._m0[2u].y * _2785;
    float _2835 = cbMtdParam._m0[2u].z * _2786;
    float _4893 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2837 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
    float _2842 = cbInstanceData._m0[_621 + 6u].w * (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0)));
    float _2847 = _564 / cbSceneParam._m0[86u].x;
    float _2848 = _565 / cbSceneParam._m0[86u].y;
    vec4 _2862 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, (log2((isnan(cbSceneParam._m0[77u].w) ? _546 : (isnan(_546) ? cbSceneParam._m0[77u].w : min(_546, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2864 = _2862.x;
    float _2865 = _2862.y;
    float _2866 = _2862.z;
    float _2867 = _2862.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_546 > cbSceneParam._m0[78u].w)
    {
        float _2901 = isnan(_546) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _546 : min(cbSceneParam._m0[80u].w, _546));
        float _2902 = _2901 / _546;
        float _2913 = _2902 * _292;
        float _2914 = _293 * _2902;
        float _2915 = (-0.0) - _2914;
        float _2916 = _2902 * _294;
        float _2918 = (cbSceneParam._m0[77u].w * _2915) / _2901;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2914;
        float _2926 = sqrt(((_2913 * _2913) + (_2914 * _2914)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2901)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3121;
        if (abs((_2915 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3121 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3065 = 1.0 / cbSceneParam._m0[80u].x;
            float _3066 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3067 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            float _3077 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : min(_3067, 0.0));
            _3121 = ((abs(_2926 / _2915) * cbSceneParam._m0[80u].y) * ((((_3076 - _3077) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))))) * _3065)) - ((exp2(_2936 * _3076) - exp2(_2936 * _3077)) * _3065))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3123 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, 1.0), 0.0);
        float _3132 = exp2((_3121 * (-1.44269502162933349609375)) * (1.0 - _3123.w));
        float _3133 = log2(_3132);
        float _3149 = log2(_2867);
        _2938 = (exp2(_3149 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].x)) * _3123.x) / cbSceneParam._m0[78u].x)) + _2864;
        _2940 = (exp2(_3149 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].y)) * _3123.y) / cbSceneParam._m0[78u].y)) + _2865;
        _2942 = (exp2(_3149 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].z)) * _3123.z) / cbSceneParam._m0[78u].z)) + _2866;
        _2944 = _3132 * _2867;
    }
    else
    {
        _2938 = _2864;
        _2940 = _2865;
        _2942 = _2866;
        _2944 = _2867;
    }
    bool _3159;
    vec4 _2953;
    vec4 _2975;
    float _2977;
    float _2981;
    float _2982;
    float _2983;
    float _2986;
    float _2989;
    float _2992;
    float _2993;
    bool _3003;
    for (;;)
    {
        _2953 = cbMatDynParam._m0[0u];
        float _2955 = roundEven(_2953.y);
        bool _2956 = _2955 == 3.0;
        float _2957 = log2(_2944);
        float _2961 = exp2(_2957 * cbSceneParam._m0[78u].x);
        float _2962 = exp2(_2957 * cbSceneParam._m0[78u].y);
        float _2963 = exp2(_2957 * cbSceneParam._m0[78u].z);
        float _2964 = _2961 * _2825;
        float _2965 = _2962 * _2826;
        float _2966 = _2963 * _2827;
        float _2973 = _553 + (-0.5);
        _2975 = cbMtdParam._m0[1u];
        _2977 = _2975.y * _2973;
        float _2980 = (_2955 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2981 = _2980 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2938)));
        _2982 = _2980 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2940)));
        _2983 = _2980 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2942)));
        _2986 = ((_2833 * _2837) * _2961) * _2980;
        _2989 = ((_2834 * _2837) * _2962) * _2980;
        _2992 = ((_2835 * _2837) * _2963) * _2980;
        _2993 = _2973 * 0.999000012874603271484375;
        _3003 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3003)
        {
            if ((cbInstanceData._m0[_621 + 7u].x + _2993) < 0.5)
            {
                _3159 = true;
                break;
            }
        }
        uint _3100 = _622 + uint(_2953.w);
        if ((cbInstanceData._m0[_3100].w < 1.0) && ((cbInstanceData._m0[_3100].w + _2993) < 0.5))
        {
            _3159 = true;
            break;
        }
        if ((_2977 + _318) < _2975.x)
        {
            _3159 = true;
            break;
        }
        _3159 = false;
        break;
    }
    float _3363;
    if (_3159)
    {
        discard_state = true;
        _3363 = 0.0;
    }
    else
    {
        _3363 = _2842;
    }
    SV_Target.x = _2981;
    SV_Target.y = _2982;
    SV_Target.z = _2983;
    SV_Target.w = _3363;
    SV_Target_1.x = _2986;
    SV_Target_1.y = _2989;
    SV_Target_1.z = _2992;
    SV_Target_1.w = _2842;
    discard_exit();
}


