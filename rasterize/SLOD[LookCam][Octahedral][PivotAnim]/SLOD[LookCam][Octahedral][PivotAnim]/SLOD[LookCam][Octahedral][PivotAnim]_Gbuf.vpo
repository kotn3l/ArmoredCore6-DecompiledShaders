#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out float TEXCOORD_13;

uint _896;

void main()
{
    uint _80 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_13 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    precise float _161 = float(NORMAL.x) + (-127.0);
    precise float _163 = float(NORMAL.y) + (-127.0);
    precise float _164 = float(NORMAL.z) + (-127.0);
    precise float _165 = _161 * 0.0078740157186985015869140625;
    precise float _167 = _163 * 0.0078740157186985015869140625;
    precise float _168 = _164 * 0.0078740157186985015869140625;
    uint _173 = _80 * 13u;
    uvec4 _179 = floatBitsToUint(cbInstanceData._m0[_173 + 7u]);
    uint _182 = min(_179.y, 8u);
    precise float _186 = POSITION.x + 0.0;
    precise float _187 = POSITION.y + 0.0;
    precise float _188 = POSITION.z + 0.0;
    uint _193 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _80;
    uvec4 _195 = texelFetch(g_InstanceIndexBuffer, int(_193));
    uint _196 = _195.x;
    uint _198 = _196 * 13u;
    uint _205 = (floatBitsToUint(cbInstanceData._m0[_198 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _212 = _205 + 1u;
    uint _219 = _205 + 2u;
    float _229 = inversesqrt(dot(vec3(cbObjMatrix._m0[_205].x, cbObjMatrix._m0[_212].x, cbObjMatrix._m0[_219].x), vec3(cbObjMatrix._m0[_205].x, cbObjMatrix._m0[_212].x, cbObjMatrix._m0[_219].x)));
    precise float _230 = cbObjMatrix._m0[_205].x * _229;
    precise float _231 = cbObjMatrix._m0[_212].x * _229;
    precise float _232 = cbObjMatrix._m0[_219].x * _229;
    float _236 = inversesqrt(dot(vec3(cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_212].y, cbObjMatrix._m0[_219].y), vec3(cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_212].y, cbObjMatrix._m0[_219].y)));
    precise float _237 = cbObjMatrix._m0[_205].y * _236;
    precise float _238 = cbObjMatrix._m0[_212].y * _236;
    precise float _239 = cbObjMatrix._m0[_219].y * _236;
    float _243 = inversesqrt(dot(vec3(cbObjMatrix._m0[_205].z, cbObjMatrix._m0[_212].z, cbObjMatrix._m0[_219].z), vec3(cbObjMatrix._m0[_205].z, cbObjMatrix._m0[_212].z, cbObjMatrix._m0[_219].z)));
    precise float _244 = cbObjMatrix._m0[_205].z * _243;
    precise float _245 = cbObjMatrix._m0[_212].z * _243;
    precise float _246 = cbObjMatrix._m0[_219].z * _243;
    precise float _263 = _230 * cbSceneParam._m0[5u].x;
    precise float _264 = _231 * cbSceneParam._m0[5u].y;
    precise float _265 = _264 + _263;
    precise float _266 = _232 * cbSceneParam._m0[5u].z;
    precise float _267 = _266 + _265;
    precise float _268 = _230 * cbSceneParam._m0[6u].x;
    precise float _269 = _231 * cbSceneParam._m0[6u].y;
    precise float _270 = _269 + _268;
    precise float _271 = _232 * cbSceneParam._m0[6u].z;
    precise float _272 = _271 + _270;
    precise float _273 = _230 * cbSceneParam._m0[7u].x;
    precise float _274 = _231 * cbSceneParam._m0[7u].y;
    precise float _275 = _274 + _273;
    precise float _276 = _232 * cbSceneParam._m0[7u].z;
    precise float _277 = _276 + _275;
    precise float _278 = _237 * cbSceneParam._m0[5u].x;
    precise float _279 = _238 * cbSceneParam._m0[5u].y;
    precise float _280 = _279 + _278;
    precise float _281 = _239 * cbSceneParam._m0[5u].z;
    precise float _282 = _281 + _280;
    precise float _283 = _237 * cbSceneParam._m0[6u].x;
    precise float _284 = _238 * cbSceneParam._m0[6u].y;
    precise float _285 = _284 + _283;
    precise float _286 = _239 * cbSceneParam._m0[6u].z;
    precise float _287 = _286 + _285;
    precise float _288 = _237 * cbSceneParam._m0[7u].x;
    precise float _289 = _238 * cbSceneParam._m0[7u].y;
    precise float _290 = _289 + _288;
    precise float _291 = _239 * cbSceneParam._m0[7u].z;
    precise float _292 = _291 + _290;
    precise float _293 = _244 * cbSceneParam._m0[5u].x;
    precise float _294 = _245 * cbSceneParam._m0[5u].y;
    precise float _295 = _294 + _293;
    precise float _296 = _246 * cbSceneParam._m0[5u].z;
    precise float _297 = _296 + _295;
    precise float _298 = _244 * cbSceneParam._m0[6u].x;
    precise float _299 = _245 * cbSceneParam._m0[6u].y;
    precise float _300 = _299 + _298;
    precise float _301 = _246 * cbSceneParam._m0[6u].z;
    precise float _302 = _301 + _300;
    precise float _303 = _244 * cbSceneParam._m0[7u].x;
    precise float _304 = _245 * cbSceneParam._m0[7u].y;
    precise float _305 = _304 + _303;
    precise float _306 = _246 * cbSceneParam._m0[7u].z;
    precise float _307 = _306 + _305;
    precise float _308 = _167 * 0.0;
    precise float _309 = _308 - _168;
    precise float _310 = _168 * 0.0;
    precise float _311 = _165 * 0.0;
    precise float _312 = _310 - _311;
    precise float _313 = _165 - _308;
    precise float _314 = _168 * _312;
    precise float _315 = _167 * _313;
    precise float _316 = _314 - _315;
    precise float _317 = _165 * _313;
    precise float _318 = _168 * _309;
    precise float _319 = _317 - _318;
    precise float _320 = _167 * _309;
    precise float _321 = _165 * _312;
    precise float _322 = _320 - _321;
    float _326 = inversesqrt(dot(vec3(_309, _312, _313), vec3(_309, _312, _313)));
    precise float _327 = _309 * _326;
    precise float _328 = _312 * _326;
    precise float _329 = _313 * _326;
    float _333 = inversesqrt(dot(vec3(_316, _319, _322), vec3(_316, _319, _322)));
    precise float _334 = _316 * _333;
    precise float _335 = _319 * _333;
    precise float _336 = _322 * _333;
    precise float _337 = (-0.0) - _165;
    precise float _339 = (-0.0) - _167;
    precise float _340 = (-0.0) - _168;
    float _344 = inversesqrt(dot(vec3(_337, _339, _340), vec3(_337, _339, _340)));
    precise float _345 = _344 * _337;
    precise float _346 = _344 * _339;
    precise float _347 = _344 * _340;
    precise float _348 = _186 - TEXCOORD_1.x;
    precise float _349 = _187 - TEXCOORD_1.y;
    precise float _350 = _188 - TEXCOORD_1.z;
    precise float _351 = _348 * _327;
    precise float _352 = _349 * _328;
    precise float _353 = _352 + _351;
    precise float _354 = _350 * _329;
    precise float _355 = _354 + _353;
    precise float _356 = _348 * _334;
    precise float _357 = _349 * _335;
    precise float _358 = _357 + _356;
    precise float _359 = _350 * _336;
    precise float _360 = _359 + _358;
    precise float _361 = _348 * _345;
    precise float _362 = _349 * _346;
    precise float _363 = _362 + _361;
    precise float _364 = _350 * _347;
    precise float _365 = _364 + _363;
    precise float _366 = _267 * _355;
    precise float _367 = _272 * _360;
    precise float _368 = _367 + _366;
    precise float _369 = _277 * _365;
    precise float _370 = _369 + _368;
    precise float _371 = _282 * _355;
    precise float _372 = _287 * _360;
    precise float _373 = _372 + _371;
    precise float _374 = _292 * _365;
    precise float _375 = _374 + _373;
    precise float _376 = _297 * _355;
    precise float _377 = _302 * _360;
    precise float _378 = _377 + _376;
    precise float _379 = _307 * _365;
    precise float _380 = _379 + _378;
    precise float _381 = TEXCOORD_1.x + _370;
    precise float _382 = TEXCOORD_1.y + _375;
    precise float _383 = TEXCOORD_1.z + _380;
    precise float _384 = cbObjMatrix._m0[_205].x * _381;
    precise float _385 = _382 * cbObjMatrix._m0[_205].y;
    precise float _386 = _385 + _384;
    precise float _387 = _383 * cbObjMatrix._m0[_205].z;
    precise float _388 = _387 + _386;
    precise float _389 = 1.0 * cbObjMatrix._m0[_205].w;
    precise float _391 = _389 + _388;
    precise float _392 = cbObjMatrix._m0[_212].x * _381;
    precise float _393 = _382 * cbObjMatrix._m0[_212].y;
    precise float _394 = _393 + _392;
    precise float _395 = _383 * cbObjMatrix._m0[_212].z;
    precise float _396 = _395 + _394;
    precise float _397 = 1.0 * cbObjMatrix._m0[_212].w;
    precise float _398 = _397 + _396;
    precise float _399 = cbObjMatrix._m0[_219].x * _381;
    precise float _400 = _382 * cbObjMatrix._m0[_219].y;
    precise float _401 = _400 + _399;
    precise float _402 = _383 * cbObjMatrix._m0[_219].z;
    precise float _403 = _402 + _401;
    precise float _404 = 1.0 * cbObjMatrix._m0[_219].w;
    precise float _405 = _404 + _403;
    float _431 = (((-0.0) - cbObjMatrix._m0[_205].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_205].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_205].y, cbObjMatrix._m0[_205].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _232, fma(cbSceneParam._m0[3u].y, _231, cbSceneParam._m0[3u].x * _230));
    float _434 = (((-0.0) - cbObjMatrix._m0[_212].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_212].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_212].y, cbObjMatrix._m0[_212].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _239, fma(cbSceneParam._m0[3u].y, _238, cbSceneParam._m0[3u].x * _237));
    float _437 = (((-0.0) - cbObjMatrix._m0[_219].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_219].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_219].y, cbObjMatrix._m0[_219].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _246, fma(cbSceneParam._m0[3u].y, _245, cbSceneParam._m0[3u].x * _244));
    float _441 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    float _442 = _441 * _431;
    float _443 = _441 * _434;
    float _444 = _441 * _437;
    float _447 = fma(_444, _329, fma(_443, _328, _442 * _327));
    float _450 = fma(_444, _336, fma(_443, _335, _442 * _334));
    float _453 = fma(_444, _347, fma(_443, _346, _442 * _345));
    float _457 = inversesqrt(dot(vec3(_447, _450, _453), vec3(_447, _450, _453)));
    float _458 = _457 * _447;
    float _459 = _457 * _450;
    float _460 = _457 * _453;
    float _476 = float(int(uint(_458 > 0.0) - uint(_458 < 0.0)));
    float _478 = float(int(uint(_460 > 0.0) - uint(_460 < 0.0)));
    float _479 = dot(vec3(_458, _459, _460), vec3(_476, float(int(uint(_459 > 0.0) - uint(_459 < 0.0))), _478));
    float _482 = _458 / _479;
    float _484 = _460 / _479;
    float _492;
    float _493;
    if ((_459 / _479) < 0.0)
    {
        _492 = _476 - (abs(_484) * _476);
        _493 = _478 - (abs(_482) * _478);
    }
    else
    {
        _492 = _482;
        _493 = _484;
    }
    float _497 = (_492 * 0.5) + 0.5;
    float _498 = (_493 * 0.5) + 0.5;
    float _1127 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _1138 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _502 = cbSceneParam._m0[3u].x - _391;
    float _503 = cbSceneParam._m0[3u].y - _398;
    float _504 = cbSceneParam._m0[3u].z - _405;
    float _513 = fma(_168, _329, fma(_167, _328, _327 * _165));
    float _516 = fma(_168, _336, fma(_167, _335, _334 * _165));
    float _519 = fma(_168, _347, fma(_167, _346, _345 * _165));
    float _522 = fma(_277, _519, fma(_272, _516, _513 * _267));
    float _525 = fma(_292, _519, fma(_287, _516, _513 * _282));
    float _528 = fma(_307, _519, fma(_302, _516, _513 * _297));
    float _531 = fma(_528, cbObjMatrix._m0[_205].z, fma(_525, cbObjMatrix._m0[_205].y, _522 * cbObjMatrix._m0[_205].x));
    float _534 = fma(_528, cbObjMatrix._m0[_212].z, fma(_525, cbObjMatrix._m0[_212].y, _522 * cbObjMatrix._m0[_212].x));
    float _537 = fma(_528, cbObjMatrix._m0[_219].z, fma(_525, cbObjMatrix._m0[_219].y, _522 * cbObjMatrix._m0[_219].x));
    float _539 = (-0.0) - _537;
    precise float _551 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _559 = _173 + 1u;
    uint _566 = _173 + 2u;
    precise float _573 = TEXCOORD_1.x * cbInstanceData._m0[_173].x;
    precise float _574 = TEXCOORD_1.y * cbInstanceData._m0[_173].y;
    precise float _575 = _574 + _573;
    precise float _576 = TEXCOORD_1.z * cbInstanceData._m0[_173].z;
    precise float _577 = _576 + _575;
    precise float _578 = 1.0 * cbInstanceData._m0[_173].w;
    precise float _579 = _578 + _577;
    precise float _580 = TEXCOORD_1.x * cbInstanceData._m0[_559].x;
    precise float _581 = TEXCOORD_1.y * cbInstanceData._m0[_559].y;
    precise float _582 = _581 + _580;
    precise float _583 = TEXCOORD_1.z * cbInstanceData._m0[_559].z;
    precise float _584 = _583 + _582;
    precise float _585 = 1.0 * cbInstanceData._m0[_559].w;
    precise float _586 = _585 + _584;
    precise float _587 = TEXCOORD_1.x * cbInstanceData._m0[_566].x;
    precise float _588 = TEXCOORD_1.y * cbInstanceData._m0[_566].y;
    precise float _589 = _588 + _587;
    precise float _590 = TEXCOORD_1.z * cbInstanceData._m0[_566].z;
    precise float _591 = _590 + _589;
    precise float _592 = 1.0 * cbInstanceData._m0[_566].w;
    precise float _593 = _592 + _591;
    precise float _594 = _391 - _579;
    precise float _595 = _398 - _586;
    precise float _596 = _405 - _593;
    precise float _597 = _594 * _594;
    precise float _598 = _595 * _595;
    precise float _599 = _597 + _598;
    precise float _600 = _596 * _596;
    precise float _601 = _599 + _600;
    precise float _603 = cbMtdParam._m0[9u].z * sqrt(_601);
    precise float _604 = _551 + _603;
    precise float _605 = cbPerFrame._m0[22u].x + _604;
    uint _606 = _179.w;
    float _607;
    float _609;
    float _611;
    if (_182 == 0u)
    {
        _607 = 0.0;
        _609 = 0.0;
        _611 = 0.0;
    }
    else
    {
        uint _826 = _179.z;
        precise float _608;
        precise float _610;
        precise float _612;
        float _969;
        float _971;
        float _973;
        float _827 = 0.0;
        float _828 = 0.0;
        float _829 = 0.0;
        uint _830 = _826;
        uint _832 = 0u;
        float _868;
        float _887;
        vec4 _901;
        float _902;
        float _903;
        float _917;
        float _918;
        float _919;
        float _936;
        float _937;
        float _938;
        float _939;
        bool _940;
        bool _941;
        bool _942;
        precise float _943;
        precise float _944;
        precise float _945;
        float _946;
        float _947;
        float _948;
        precise float _949;
        bool _952;
        for (;;)
        {
            uint _834 = _830 & 255u;
            uint _836 = _834 * 24u;
            uvec3 _846 = uvec3(texelFetch(g_forceParam, int(_836)).x, texelFetch(g_forceParam, int(_836 + 1u)).x, texelFetch(g_forceParam, int(_836 + 2u)).x);
            uint _851 = (_834 * 24u) + 4u;
            vec4 _864 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_851)).x, texelFetch(g_forceParam, int(_851 + 1u)).x, texelFetch(g_forceParam, int(_851 + 2u)).x, texelFetch(g_forceParam, int(_851 + 3u)).x));
            _868 = _864.w;
            uint _870 = (_834 * 24u) + 8u;
            vec4 _883 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_870)).x, texelFetch(g_forceParam, int(_870 + 1u)).x, texelFetch(g_forceParam, int(_870 + 2u)).x, texelFetch(g_forceParam, int(_870 + 3u)).x));
            _887 = _883.w;
            uint _890 = (_834 * 24u) + 12u;
            _901 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_890)).x, texelFetch(g_forceParam, int(_890 + 1u)).x, _896, texelFetch(g_forceParam, int(_890 + 3u)).x));
            _902 = _901.x;
            _903 = _901.w;
            uint _906 = (_834 * 24u) + 16u;
            vec3 _916 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_906)).x, texelFetch(g_forceParam, int(_906 + 1u)).x, texelFetch(g_forceParam, int(_906 + 2u)).x));
            _917 = _916.x;
            _918 = _916.y;
            _919 = _916.z;
            uint _922 = (_834 * 24u) + 20u;
            vec4 _935 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_922)).x, texelFetch(g_forceParam, int(_922 + 1u)).x, texelFetch(g_forceParam, int(_922 + 2u)).x, texelFetch(g_forceParam, int(_922 + 3u)).x));
            _936 = _935.x;
            _937 = _935.y;
            _938 = _935.z;
            _939 = _935.w;
            _940 = _846.x == 1u;
            _941 = _846.y == 1u;
            _942 = _846.z == 1u;
            _943 = _579 - _864.x;
            _944 = _586 - _864.y;
            _945 = _593 - _864.z;
            _946 = _940 ? _883.x : _943;
            _947 = _940 ? _883.y : _944;
            _948 = _940 ? _883.z : _945;
            _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
            _952 = _949 > 0.0;
            float frontier_phi_7_pred;
            float frontier_phi_7_pred_1;
            float frontier_phi_7_pred_2;
            if (_952)
            {
                precise float _954 = _943 * _943;
                precise float _955 = _944 * _944;
                precise float _956 = _954 + _955;
                precise float _957 = _945 * _945;
                precise float _958 = _957 + _956;
                float _959 = sqrt(_958);
                float _960 = inversesqrt(_949);
                precise float _961 = _946 * _960;
                precise float _962 = _947 * _960;
                precise float _963 = _948 * _960;
                precise float _966 = _959 / (isnan(0.001000000047497451305389404296875) ? _901.y : (isnan(_901.y) ? 0.001000000047497451305389404296875 : max(_901.y, 0.001000000047497451305389404296875)));
                precise float _967 = 1.0 - _966;
                float _1154 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
                float _968 = isnan(1.0) ? _1154 : (isnan(_1154) ? 1.0 : min(_1154, 1.0));
                float _994;
                if (_942)
                {
                    float _981 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
                    precise float _982 = _943 * _981;
                    precise float _983 = _944 * _981;
                    precise float _984 = _945 * _981;
                    precise float _988 = dot(vec3(_961, _962, _963), vec3(_982, _983, _984)) * 0.800000011920928955078125;
                    precise float _990 = _988 + 0.20000000298023223876953125;
                    float _1165 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
                    precise float _993 = _968 * (isnan(1.0) ? _1165 : (isnan(_1165) ? 1.0 : min(_1165, 1.0)));
                    _994 = _993;
                }
                else
                {
                    _994 = _968;
                }
                float frontier_phi_7_pred_9_ladder;
                float frontier_phi_7_pred_9_ladder_1;
                float frontier_phi_7_pred_9_ladder_2;
                if (_994 > 0.0)
                {
                    bool _997 = _940 && (!_942);
                    precise float _999 = _959 * (-4.0);
                    precise float _1003 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _902 : (isnan(_902) ? 0.001000000047497451305389404296875 : max(_902, 0.001000000047497451305389404296875)));
                    precise float _1005 = dot(vec2(_961, _963), vec2(_943, _945));
                    precise float _1009 = _1003 * _1005;
                    precise float _1010 = float(_997) * _1009;
                    precise float _1011 = _605 * _1003;
                    precise float _1012 = _1011 - _1010;
                    precise float _1013 = (_997 ? 0.0 : _999) + _1012;
                    precise float _1015 = _887 * sin(_1013);
                    precise float _1016 = _962 * 0.0;
                    precise float _1017 = _1016 - _963;
                    precise float _1018 = _963 * 0.0;
                    precise float _1019 = _961 * 0.0;
                    precise float _1020 = _1018 - _1019;
                    precise float _1021 = _961 - _1016;
                    precise float _1022 = _903 * _1015;
                    float _1023 = _940 ? _1022 : 0.0;
                    float _1065;
                    if (_941)
                    {
                        precise float _1026 = _917 * 2.0;
                        precise float _1028 = _937 + _938;
                        precise float _1029 = _939 + _1028;
                        precise float _1031 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _917 : (isnan(_917) ? 0.001000000047497451305389404296875 : max(_917, 0.001000000047497451305389404296875)));
                        precise float _1032 = _936 * _1031;
                        precise float _1033 = (-0.0) - _961;
                        precise float _1037 = dot(vec2(_963, _1033), vec2(_943, _945)) / _1026;
                        precise float _1038 = (-0.0) - _1037;
                        float _1041 = fract(abs(_1037));
                        precise float _1042 = (-0.0) - _1041;
                        precise float _1044 = _1026 * ((_1037 >= _1038) ? _1041 : _1042);
                        precise float _1045 = _1044 * 6.283184051513671875;
                        precise float _1046 = _1045 / _1026;
                        precise float _1048 = (isnan(5.0) ? _917 : (isnan(_917) ? 5.0 : min(_917, 5.0))) * sin(_1046);
                        precise float _1049 = _1005 + _1048;
                        precise float _1050 = _917 * 0.25;
                        precise float _1052 = _605 * _936;
                        precise float _1053 = _1052 - _1050;
                        precise float _1054 = _1053 - _1049;
                        precise float _1055 = _936 * _1029;
                        precise float _1057 = _1054 / (isnan(0.001000000047497451305389404296875) ? _1055 : (isnan(_1055) ? 0.001000000047497451305389404296875 : max(_1055, 0.001000000047497451305389404296875)));
                        float _1058 = fract(_1057);
                        precise float _1060 = 1.0 - _1058;
                        float _1061 = (_1057 < 0.0) ? _1060 : _1058;
                        precise float _1062 = _1028 / _1029;
                        precise float _1063 = _937 / _1029;
                        float _1084;
                        if (_1061 < _1063)
                        {
                            precise float _1082 = _1061 / _1063;
                            _1084 = _1082;
                        }
                        else
                        {
                            float frontier_phi_16_15_ladder;
                            if (_1061 < _1062)
                            {
                                precise float _1094 = _1061 - _1063;
                                precise float _1095 = _1062 - _1063;
                                precise float _1096 = _1094 / _1095;
                                precise float _1085 = 1.0 - _1096;
                                frontier_phi_16_15_ladder = _1085;
                            }
                            else
                            {
                                frontier_phi_16_15_ladder = 0.0;
                            }
                            _1084 = frontier_phi_16_15_ladder;
                        }
                        precise float _1086 = _919 * _1084;
                        precise float _1087 = _1031 * _1005;
                        precise float _1088 = _605 * _1032;
                        precise float _1089 = _1088 - _1087;
                        precise float _1091 = _918 + sin(_1089);
                        precise float _1093 = _1086 * abs(_1091);
                        precise float _1066 = _1093 + 0.0;
                        _1065 = _1066;
                    }
                    else
                    {
                        _1065 = 0.0;
                    }
                    precise float _1067 = _868 + _1015;
                    precise float _1068 = _1067 + _1065;
                    precise float _1069 = _961 * _1068;
                    precise float _1070 = _962 * _1068;
                    precise float _1071 = _963 * _1068;
                    precise float _1072 = _1017 * _1023;
                    precise float _1073 = _1020 * _1023;
                    precise float _1074 = _1021 * _1023;
                    precise float _1075 = _1072 + _1069;
                    precise float _1076 = _1073 + _1070;
                    precise float _1077 = _1074 + _1071;
                    precise float _1078 = _994 * _1075;
                    precise float _1079 = _994 * _1076;
                    precise float _1080 = _994 * _1077;
                    precise float _970 = _1078 * 0.0500000007450580596923828125;
                    precise float _972 = _1079 * 0.0500000007450580596923828125;
                    precise float _974 = _1080 * 0.0500000007450580596923828125;
                    frontier_phi_7_pred_9_ladder = _970;
                    frontier_phi_7_pred_9_ladder_1 = _972;
                    frontier_phi_7_pred_9_ladder_2 = _974;
                }
                else
                {
                    frontier_phi_7_pred_9_ladder = 0.0;
                    frontier_phi_7_pred_9_ladder_1 = 0.0;
                    frontier_phi_7_pred_9_ladder_2 = 0.0;
                }
                frontier_phi_7_pred = frontier_phi_7_pred_9_ladder;
                frontier_phi_7_pred_1 = frontier_phi_7_pred_9_ladder_1;
                frontier_phi_7_pred_2 = frontier_phi_7_pred_9_ladder_2;
            }
            else
            {
                frontier_phi_7_pred = 0.0;
                frontier_phi_7_pred_1 = 0.0;
                frontier_phi_7_pred_2 = 0.0;
            }
            _969 = frontier_phi_7_pred;
            _971 = frontier_phi_7_pred_1;
            _973 = frontier_phi_7_pred_2;
            _608 = _827 + _969;
            _610 = _828 + _971;
            _612 = _829 + _973;
            uint _833 = _832 + 1u;
            if (_833 == _182)
            {
                break;
            }
            else
            {
                _827 = _608;
                _828 = _610;
                _829 = _612;
                _830 = (_832 != 3u) ? (_830 >> 8u) : _606;
                _832 = _833;
                continue;
            }
        }
        _607 = _608;
        _609 = _610;
        _611 = _612;
    }
    precise float _613 = _607 * _607;
    precise float _614 = _609 * _609;
    precise float _615 = _613 + _614;
    precise float _616 = _611 * _611;
    precise float _617 = _615 + _616;
    float _618 = sqrt(_617);
    bool _619 = _618 < 0.00011000000085914507508277893066406;
    float _624 = inversesqrt(dot(vec3(cbInstanceData._m0[_173].x, cbInstanceData._m0[_559].x, cbInstanceData._m0[_566].x), vec3(cbInstanceData._m0[_173].x, cbInstanceData._m0[_559].x, cbInstanceData._m0[_566].x)));
    precise float _625 = cbInstanceData._m0[_173].x * _624;
    precise float _626 = cbInstanceData._m0[_559].x * _624;
    precise float _627 = cbInstanceData._m0[_566].x * _624;
    float _631 = inversesqrt(dot(vec3(cbInstanceData._m0[_173].y, cbInstanceData._m0[_559].y, cbInstanceData._m0[_566].y), vec3(cbInstanceData._m0[_173].y, cbInstanceData._m0[_559].y, cbInstanceData._m0[_566].y)));
    precise float _632 = cbInstanceData._m0[_173].y * _631;
    precise float _633 = cbInstanceData._m0[_559].y * _631;
    precise float _634 = cbInstanceData._m0[_566].y * _631;
    float _638 = inversesqrt(dot(vec3(cbInstanceData._m0[_173].z, cbInstanceData._m0[_559].z, cbInstanceData._m0[_566].z), vec3(cbInstanceData._m0[_173].z, cbInstanceData._m0[_559].z, cbInstanceData._m0[_566].z)));
    precise float _639 = cbInstanceData._m0[_173].z * _638;
    precise float _640 = cbInstanceData._m0[_559].z * _638;
    precise float _641 = cbInstanceData._m0[_566].z * _638;
    precise float _642 = _625 * 0.0;
    precise float _643 = 1.0 * _632;
    precise float _644 = _643 + _642;
    precise float _645 = 0.0 * _639;
    precise float _646 = _645 + _644;
    precise float _647 = _626 * 0.0;
    precise float _648 = 1.0 * _633;
    precise float _649 = _648 + _647;
    precise float _650 = 0.0 * _640;
    precise float _651 = _650 + _649;
    precise float _652 = _627 * 0.0;
    precise float _653 = 1.0 * _634;
    precise float _654 = _653 + _652;
    precise float _655 = 0.0 * _641;
    precise float _656 = _655 + _654;
    float _660 = inversesqrt(dot(vec3(_607, _609, _611), vec3(_607, _609, _611)));
    precise float _661 = _607 * _660;
    precise float _662 = _609 * _660;
    precise float _663 = _611 * _660;
    precise float _664 = _651 * _663;
    precise float _665 = _656 * _662;
    precise float _666 = _664 - _665;
    precise float _667 = _656 * _661;
    precise float _668 = _646 * _663;
    precise float _669 = _667 - _668;
    precise float _670 = _646 * _662;
    precise float _671 = _651 * _661;
    precise float _672 = _670 - _671;
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    precise float _677 = _676 * _666;
    precise float _678 = _676 * _669;
    precise float _679 = _676 * _672;
    precise float _680 = _618 + 1.0;
    precise float _682 = cbMtdParam._m0[9u].w * log2(_680);
    precise float _683 = dot(vec3(_677, _678, _679), vec3(_594, _595, _596));
    precise float _686 = _677 * _683;
    precise float _687 = _678 * _683;
    precise float _688 = _679 * _683;
    precise float _689 = _579 + _686;
    precise float _690 = _586 + _687;
    precise float _691 = _593 + _688;
    precise float _692 = _391 - _689;
    precise float _693 = _398 - _690;
    precise float _694 = _405 - _691;
    precise float _695 = _678 * _694;
    precise float _696 = _679 * _693;
    precise float _697 = _695 - _696;
    precise float _698 = _679 * _692;
    precise float _699 = _677 * _694;
    precise float _700 = _698 - _699;
    precise float _701 = _677 * _693;
    precise float _702 = _678 * _692;
    precise float _703 = _701 - _702;
    float _704 = sin(_682);
    float _705 = cos(_682);
    precise float _706 = _692 * _705;
    precise float _707 = _693 * _705;
    precise float _708 = _694 * _705;
    precise float _709 = _704 * _697;
    precise float _710 = _704 * _700;
    precise float _711 = _704 * _703;
    precise float _712 = _706 + _709;
    precise float _713 = _707 + _710;
    precise float _714 = _711 + _708;
    precise float _715 = _689 + _712;
    precise float _716 = _690 + _713;
    precise float _717 = _691 + _714;
    precise float _718 = _715 - _391;
    precise float _719 = _716 - _398;
    precise float _720 = _717 - _405;
    precise float _724 = _391 + (_619 ? 0.0 : _718);
    precise float _725 = _398 + (_619 ? 0.0 : _719);
    precise float _726 = _405 + (_619 ? 0.0 : _720);
    precise float _727 = _724 - cbSceneParam._m0[3u].x;
    precise float _728 = _725 - cbSceneParam._m0[3u].y;
    precise float _729 = _726 - cbSceneParam._m0[3u].z;
    precise float _757 = cbSceneParam._m0[24u].x * _727;
    precise float _758 = _728 * cbSceneParam._m0[24u].y;
    precise float _759 = _758 + _757;
    precise float _760 = _729 * cbSceneParam._m0[24u].z;
    precise float _761 = _760 + _759;
    precise float _762 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _763 = _762 + _761;
    precise float _764 = cbSceneParam._m0[25u].x * _727;
    precise float _765 = _728 * cbSceneParam._m0[25u].y;
    precise float _766 = _765 + _764;
    precise float _767 = _729 * cbSceneParam._m0[25u].z;
    precise float _768 = _767 + _766;
    precise float _769 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _770 = _769 + _768;
    precise float _771 = cbSceneParam._m0[26u].x * _727;
    precise float _772 = _728 * cbSceneParam._m0[26u].y;
    precise float _773 = _772 + _771;
    precise float _774 = _729 * cbSceneParam._m0[26u].z;
    precise float _775 = _774 + _773;
    precise float _776 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _777 = _776 + _775;
    precise float _778 = _727 * cbSceneParam._m0[27u].x;
    precise float _779 = _728 * cbSceneParam._m0[27u].y;
    precise float _780 = _779 + _778;
    precise float _781 = _729 * cbSceneParam._m0[27u].z;
    precise float _782 = _781 + _780;
    precise float _783 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _784 = _783 + _782;
    gl_Position.x = _763;
    gl_Position.y = _770;
    gl_Position.z = _777;
    gl_Position.w = _784;
    NORMAL_1.x = _531;
    NORMAL_1.y = _534;
    NORMAL_1.z = _537;
    NORMAL_1.w = float(_196);
    TANGENT_1.x = (-0.0) - (_531 * _534);
    TANGENT_1.y = (_531 * _531) - (_537 * _539);
    TANGENT_1.z = _534 * _539;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = isnan(1.0) ? _1127 : (isnan(_1127) ? 1.0 : min(_1127, 1.0));
    TEXCOORD_2.w = 1.0 - (isnan(1.0) ? _1138 : (isnan(_1138) ? 1.0 : min(_1138, 1.0)));
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_13 = sqrt(((_502 * _502) + (_503 * _503)) + (_504 * _504));
    gl_ClipDistance[0u] = dot(vec4(_763, _770, _777, _784), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_763, _770, _777, _784), vec4(cbInstanceData._m0[_198 + 3u]));
}


