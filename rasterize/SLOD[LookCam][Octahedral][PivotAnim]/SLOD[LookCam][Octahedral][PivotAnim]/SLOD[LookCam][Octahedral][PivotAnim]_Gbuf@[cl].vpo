#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out float TEXCOORD_13;

uint _870;

void main()
{
    uint _76 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_13 = 0.0;
    precise float _156 = float(NORMAL.x) + (-127.0);
    precise float _158 = float(NORMAL.y) + (-127.0);
    precise float _159 = float(NORMAL.z) + (-127.0);
    precise float _160 = _156 * 0.0078740157186985015869140625;
    precise float _162 = _158 * 0.0078740157186985015869140625;
    precise float _163 = _159 * 0.0078740157186985015869140625;
    uint _168 = _76 * 13u;
    uvec4 _174 = floatBitsToUint(cbInstanceData._m0[_168 + 7u]);
    uint _177 = min(_174.y, 8u);
    precise float _181 = POSITION.x + 0.0;
    precise float _182 = POSITION.y + 0.0;
    precise float _183 = POSITION.z + 0.0;
    uint _188 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _76;
    uvec4 _190 = texelFetch(g_InstanceIndexBuffer, int(_188));
    uint _191 = _190.x;
    uint _200 = (floatBitsToUint(cbInstanceData._m0[(_191 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _207 = _200 + 1u;
    uint _214 = _200 + 2u;
    float _224 = inversesqrt(dot(vec3(cbObjMatrix._m0[_200].x, cbObjMatrix._m0[_207].x, cbObjMatrix._m0[_214].x), vec3(cbObjMatrix._m0[_200].x, cbObjMatrix._m0[_207].x, cbObjMatrix._m0[_214].x)));
    precise float _225 = cbObjMatrix._m0[_200].x * _224;
    precise float _226 = cbObjMatrix._m0[_207].x * _224;
    precise float _227 = cbObjMatrix._m0[_214].x * _224;
    float _231 = inversesqrt(dot(vec3(cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_207].y, cbObjMatrix._m0[_214].y), vec3(cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_207].y, cbObjMatrix._m0[_214].y)));
    precise float _232 = cbObjMatrix._m0[_200].y * _231;
    precise float _233 = cbObjMatrix._m0[_207].y * _231;
    precise float _234 = cbObjMatrix._m0[_214].y * _231;
    float _238 = inversesqrt(dot(vec3(cbObjMatrix._m0[_200].z, cbObjMatrix._m0[_207].z, cbObjMatrix._m0[_214].z), vec3(cbObjMatrix._m0[_200].z, cbObjMatrix._m0[_207].z, cbObjMatrix._m0[_214].z)));
    precise float _239 = cbObjMatrix._m0[_200].z * _238;
    precise float _240 = cbObjMatrix._m0[_207].z * _238;
    precise float _241 = cbObjMatrix._m0[_214].z * _238;
    precise float _258 = _225 * cbSceneParam._m0[5u].x;
    precise float _259 = _226 * cbSceneParam._m0[5u].y;
    precise float _260 = _259 + _258;
    precise float _261 = _227 * cbSceneParam._m0[5u].z;
    precise float _262 = _261 + _260;
    precise float _263 = _225 * cbSceneParam._m0[6u].x;
    precise float _264 = _226 * cbSceneParam._m0[6u].y;
    precise float _265 = _264 + _263;
    precise float _266 = _227 * cbSceneParam._m0[6u].z;
    precise float _267 = _266 + _265;
    precise float _268 = _225 * cbSceneParam._m0[7u].x;
    precise float _269 = _226 * cbSceneParam._m0[7u].y;
    precise float _270 = _269 + _268;
    precise float _271 = _227 * cbSceneParam._m0[7u].z;
    precise float _272 = _271 + _270;
    precise float _273 = _232 * cbSceneParam._m0[5u].x;
    precise float _274 = _233 * cbSceneParam._m0[5u].y;
    precise float _275 = _274 + _273;
    precise float _276 = _234 * cbSceneParam._m0[5u].z;
    precise float _277 = _276 + _275;
    precise float _278 = _232 * cbSceneParam._m0[6u].x;
    precise float _279 = _233 * cbSceneParam._m0[6u].y;
    precise float _280 = _279 + _278;
    precise float _281 = _234 * cbSceneParam._m0[6u].z;
    precise float _282 = _281 + _280;
    precise float _283 = _232 * cbSceneParam._m0[7u].x;
    precise float _284 = _233 * cbSceneParam._m0[7u].y;
    precise float _285 = _284 + _283;
    precise float _286 = _234 * cbSceneParam._m0[7u].z;
    precise float _287 = _286 + _285;
    precise float _288 = _239 * cbSceneParam._m0[5u].x;
    precise float _289 = _240 * cbSceneParam._m0[5u].y;
    precise float _290 = _289 + _288;
    precise float _291 = _241 * cbSceneParam._m0[5u].z;
    precise float _292 = _291 + _290;
    precise float _293 = _239 * cbSceneParam._m0[6u].x;
    precise float _294 = _240 * cbSceneParam._m0[6u].y;
    precise float _295 = _294 + _293;
    precise float _296 = _241 * cbSceneParam._m0[6u].z;
    precise float _297 = _296 + _295;
    precise float _298 = _239 * cbSceneParam._m0[7u].x;
    precise float _299 = _240 * cbSceneParam._m0[7u].y;
    precise float _300 = _299 + _298;
    precise float _301 = _241 * cbSceneParam._m0[7u].z;
    precise float _302 = _301 + _300;
    precise float _303 = _162 * 0.0;
    precise float _304 = _303 - _163;
    precise float _305 = _163 * 0.0;
    precise float _306 = _160 * 0.0;
    precise float _307 = _305 - _306;
    precise float _308 = _160 - _303;
    precise float _309 = _163 * _307;
    precise float _310 = _162 * _308;
    precise float _311 = _309 - _310;
    precise float _312 = _160 * _308;
    precise float _313 = _163 * _304;
    precise float _314 = _312 - _313;
    precise float _315 = _162 * _304;
    precise float _316 = _160 * _307;
    precise float _317 = _315 - _316;
    float _321 = inversesqrt(dot(vec3(_304, _307, _308), vec3(_304, _307, _308)));
    precise float _322 = _304 * _321;
    precise float _323 = _307 * _321;
    precise float _324 = _308 * _321;
    float _328 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    precise float _329 = _311 * _328;
    precise float _330 = _314 * _328;
    precise float _331 = _317 * _328;
    precise float _332 = (-0.0) - _160;
    precise float _334 = (-0.0) - _162;
    precise float _335 = (-0.0) - _163;
    float _339 = inversesqrt(dot(vec3(_332, _334, _335), vec3(_332, _334, _335)));
    precise float _340 = _339 * _332;
    precise float _341 = _339 * _334;
    precise float _342 = _339 * _335;
    precise float _343 = _181 - TEXCOORD_1.x;
    precise float _344 = _182 - TEXCOORD_1.y;
    precise float _345 = _183 - TEXCOORD_1.z;
    precise float _346 = _343 * _322;
    precise float _347 = _344 * _323;
    precise float _348 = _347 + _346;
    precise float _349 = _345 * _324;
    precise float _350 = _349 + _348;
    precise float _351 = _343 * _329;
    precise float _352 = _344 * _330;
    precise float _353 = _352 + _351;
    precise float _354 = _345 * _331;
    precise float _355 = _354 + _353;
    precise float _356 = _343 * _340;
    precise float _357 = _344 * _341;
    precise float _358 = _357 + _356;
    precise float _359 = _345 * _342;
    precise float _360 = _359 + _358;
    precise float _361 = _262 * _350;
    precise float _362 = _267 * _355;
    precise float _363 = _362 + _361;
    precise float _364 = _272 * _360;
    precise float _365 = _364 + _363;
    precise float _366 = _277 * _350;
    precise float _367 = _282 * _355;
    precise float _368 = _367 + _366;
    precise float _369 = _287 * _360;
    precise float _370 = _369 + _368;
    precise float _371 = _292 * _350;
    precise float _372 = _297 * _355;
    precise float _373 = _372 + _371;
    precise float _374 = _302 * _360;
    precise float _375 = _374 + _373;
    precise float _376 = TEXCOORD_1.x + _365;
    precise float _377 = TEXCOORD_1.y + _370;
    precise float _378 = TEXCOORD_1.z + _375;
    precise float _379 = cbObjMatrix._m0[_200].x * _376;
    precise float _380 = _377 * cbObjMatrix._m0[_200].y;
    precise float _381 = _380 + _379;
    precise float _382 = _378 * cbObjMatrix._m0[_200].z;
    precise float _383 = _382 + _381;
    precise float _384 = 1.0 * cbObjMatrix._m0[_200].w;
    precise float _386 = _384 + _383;
    precise float _387 = cbObjMatrix._m0[_207].x * _376;
    precise float _388 = _377 * cbObjMatrix._m0[_207].y;
    precise float _389 = _388 + _387;
    precise float _390 = _378 * cbObjMatrix._m0[_207].z;
    precise float _391 = _390 + _389;
    precise float _392 = 1.0 * cbObjMatrix._m0[_207].w;
    precise float _393 = _392 + _391;
    precise float _394 = cbObjMatrix._m0[_214].x * _376;
    precise float _395 = _377 * cbObjMatrix._m0[_214].y;
    precise float _396 = _395 + _394;
    precise float _397 = _378 * cbObjMatrix._m0[_214].z;
    precise float _398 = _397 + _396;
    precise float _399 = 1.0 * cbObjMatrix._m0[_214].w;
    precise float _400 = _399 + _398;
    float _426 = (((-0.0) - cbObjMatrix._m0[_200].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_200].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_200].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _227, fma(cbSceneParam._m0[3u].y, _226, cbSceneParam._m0[3u].x * _225));
    float _429 = (((-0.0) - cbObjMatrix._m0[_207].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_207].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_207].y, cbObjMatrix._m0[_207].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _234, fma(cbSceneParam._m0[3u].y, _233, cbSceneParam._m0[3u].x * _232));
    float _432 = (((-0.0) - cbObjMatrix._m0[_214].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_214].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_214].y, cbObjMatrix._m0[_214].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _241, fma(cbSceneParam._m0[3u].y, _240, cbSceneParam._m0[3u].x * _239));
    float _436 = inversesqrt(dot(vec3(_426, _429, _432), vec3(_426, _429, _432)));
    float _437 = _436 * _426;
    float _438 = _436 * _429;
    float _439 = _436 * _432;
    float _442 = fma(_439, _324, fma(_438, _323, _437 * _322));
    float _445 = fma(_439, _331, fma(_438, _330, _437 * _329));
    float _448 = fma(_439, _342, fma(_438, _341, _437 * _340));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _471 = float(int(uint(_453 > 0.0) - uint(_453 < 0.0)));
    float _473 = float(int(uint(_455 > 0.0) - uint(_455 < 0.0)));
    float _474 = dot(vec3(_453, _454, _455), vec3(_471, float(int(uint(_454 > 0.0) - uint(_454 < 0.0))), _473));
    float _477 = _453 / _474;
    float _479 = _455 / _474;
    float _487;
    float _488;
    if ((_454 / _474) < 0.0)
    {
        _487 = _471 - (abs(_479) * _471);
        _488 = _473 - (abs(_477) * _473);
    }
    else
    {
        _487 = _477;
        _488 = _479;
    }
    float _492 = (_487 * 0.5) + 0.5;
    float _493 = (_488 * 0.5) + 0.5;
    float _1101 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _1112 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _497 = cbSceneParam._m0[3u].x - _386;
    float _498 = cbSceneParam._m0[3u].y - _393;
    float _499 = cbSceneParam._m0[3u].z - _400;
    float _508 = fma(_163, _324, fma(_162, _323, _322 * _160));
    float _511 = fma(_163, _331, fma(_162, _330, _329 * _160));
    float _514 = fma(_163, _342, fma(_162, _341, _340 * _160));
    float _517 = fma(_272, _514, fma(_267, _511, _508 * _262));
    float _520 = fma(_287, _514, fma(_282, _511, _508 * _277));
    float _523 = fma(_302, _514, fma(_297, _511, _508 * _292));
    float _526 = fma(_523, cbObjMatrix._m0[_200].z, fma(_520, cbObjMatrix._m0[_200].y, _517 * cbObjMatrix._m0[_200].x));
    float _529 = fma(_523, cbObjMatrix._m0[_207].z, fma(_520, cbObjMatrix._m0[_207].y, _517 * cbObjMatrix._m0[_207].x));
    float _532 = fma(_523, cbObjMatrix._m0[_214].z, fma(_520, cbObjMatrix._m0[_214].y, _517 * cbObjMatrix._m0[_214].x));
    float _534 = (-0.0) - _532;
    precise float _546 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _554 = _168 + 1u;
    uint _561 = _168 + 2u;
    precise float _568 = TEXCOORD_1.x * cbInstanceData._m0[_168].x;
    precise float _569 = TEXCOORD_1.y * cbInstanceData._m0[_168].y;
    precise float _570 = _569 + _568;
    precise float _571 = TEXCOORD_1.z * cbInstanceData._m0[_168].z;
    precise float _572 = _571 + _570;
    precise float _573 = 1.0 * cbInstanceData._m0[_168].w;
    precise float _574 = _573 + _572;
    precise float _575 = TEXCOORD_1.x * cbInstanceData._m0[_554].x;
    precise float _576 = TEXCOORD_1.y * cbInstanceData._m0[_554].y;
    precise float _577 = _576 + _575;
    precise float _578 = TEXCOORD_1.z * cbInstanceData._m0[_554].z;
    precise float _579 = _578 + _577;
    precise float _580 = 1.0 * cbInstanceData._m0[_554].w;
    precise float _581 = _580 + _579;
    precise float _582 = TEXCOORD_1.x * cbInstanceData._m0[_561].x;
    precise float _583 = TEXCOORD_1.y * cbInstanceData._m0[_561].y;
    precise float _584 = _583 + _582;
    precise float _585 = TEXCOORD_1.z * cbInstanceData._m0[_561].z;
    precise float _586 = _585 + _584;
    precise float _587 = 1.0 * cbInstanceData._m0[_561].w;
    precise float _588 = _587 + _586;
    precise float _589 = _386 - _574;
    precise float _590 = _393 - _581;
    precise float _591 = _400 - _588;
    precise float _592 = _589 * _589;
    precise float _593 = _590 * _590;
    precise float _594 = _592 + _593;
    precise float _595 = _591 * _591;
    precise float _596 = _594 + _595;
    precise float _598 = cbMtdParam._m0[9u].z * sqrt(_596);
    precise float _599 = _546 + _598;
    precise float _600 = cbPerFrame._m0[22u].x + _599;
    uint _601 = _174.w;
    float _602;
    float _604;
    float _606;
    if (_177 == 0u)
    {
        _602 = 0.0;
        _604 = 0.0;
        _606 = 0.0;
    }
    else
    {
        uint _800 = _174.z;
        precise float _603;
        precise float _605;
        precise float _607;
        float _943;
        float _945;
        float _947;
        float _801 = 0.0;
        float _802 = 0.0;
        float _803 = 0.0;
        uint _804 = _800;
        uint _806 = 0u;
        float _842;
        float _861;
        vec4 _875;
        float _876;
        float _877;
        float _891;
        float _892;
        float _893;
        float _910;
        float _911;
        float _912;
        float _913;
        bool _914;
        bool _915;
        bool _916;
        precise float _917;
        precise float _918;
        precise float _919;
        float _920;
        float _921;
        float _922;
        precise float _923;
        bool _926;
        for (;;)
        {
            uint _808 = _804 & 255u;
            uint _810 = _808 * 24u;
            uvec3 _820 = uvec3(texelFetch(g_forceParam, int(_810)).x, texelFetch(g_forceParam, int(_810 + 1u)).x, texelFetch(g_forceParam, int(_810 + 2u)).x);
            uint _825 = (_808 * 24u) + 4u;
            vec4 _838 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_825)).x, texelFetch(g_forceParam, int(_825 + 1u)).x, texelFetch(g_forceParam, int(_825 + 2u)).x, texelFetch(g_forceParam, int(_825 + 3u)).x));
            _842 = _838.w;
            uint _844 = (_808 * 24u) + 8u;
            vec4 _857 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_844)).x, texelFetch(g_forceParam, int(_844 + 1u)).x, texelFetch(g_forceParam, int(_844 + 2u)).x, texelFetch(g_forceParam, int(_844 + 3u)).x));
            _861 = _857.w;
            uint _864 = (_808 * 24u) + 12u;
            _875 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_864)).x, texelFetch(g_forceParam, int(_864 + 1u)).x, _870, texelFetch(g_forceParam, int(_864 + 3u)).x));
            _876 = _875.x;
            _877 = _875.w;
            uint _880 = (_808 * 24u) + 16u;
            vec3 _890 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_880)).x, texelFetch(g_forceParam, int(_880 + 1u)).x, texelFetch(g_forceParam, int(_880 + 2u)).x));
            _891 = _890.x;
            _892 = _890.y;
            _893 = _890.z;
            uint _896 = (_808 * 24u) + 20u;
            vec4 _909 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_896)).x, texelFetch(g_forceParam, int(_896 + 1u)).x, texelFetch(g_forceParam, int(_896 + 2u)).x, texelFetch(g_forceParam, int(_896 + 3u)).x));
            _910 = _909.x;
            _911 = _909.y;
            _912 = _909.z;
            _913 = _909.w;
            _914 = _820.x == 1u;
            _915 = _820.y == 1u;
            _916 = _820.z == 1u;
            _917 = _574 - _838.x;
            _918 = _581 - _838.y;
            _919 = _588 - _838.z;
            _920 = _914 ? _857.x : _917;
            _921 = _914 ? _857.y : _918;
            _922 = _914 ? _857.z : _919;
            _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
            _926 = _923 > 0.0;
            float frontier_phi_7_pred;
            float frontier_phi_7_pred_1;
            float frontier_phi_7_pred_2;
            if (_926)
            {
                precise float _928 = _917 * _917;
                precise float _929 = _918 * _918;
                precise float _930 = _928 + _929;
                precise float _931 = _919 * _919;
                precise float _932 = _931 + _930;
                float _933 = sqrt(_932);
                float _934 = inversesqrt(_923);
                precise float _935 = _920 * _934;
                precise float _936 = _921 * _934;
                precise float _937 = _922 * _934;
                precise float _940 = _933 / (isnan(0.001000000047497451305389404296875) ? _875.y : (isnan(_875.y) ? 0.001000000047497451305389404296875 : max(_875.y, 0.001000000047497451305389404296875)));
                precise float _941 = 1.0 - _940;
                float _1128 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
                float _942 = isnan(1.0) ? _1128 : (isnan(_1128) ? 1.0 : min(_1128, 1.0));
                float _968;
                if (_916)
                {
                    float _955 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
                    precise float _956 = _917 * _955;
                    precise float _957 = _918 * _955;
                    precise float _958 = _919 * _955;
                    precise float _962 = dot(vec3(_935, _936, _937), vec3(_956, _957, _958)) * 0.800000011920928955078125;
                    precise float _964 = _962 + 0.20000000298023223876953125;
                    float _1139 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
                    precise float _967 = _942 * (isnan(1.0) ? _1139 : (isnan(_1139) ? 1.0 : min(_1139, 1.0)));
                    _968 = _967;
                }
                else
                {
                    _968 = _942;
                }
                float frontier_phi_7_pred_9_ladder;
                float frontier_phi_7_pred_9_ladder_1;
                float frontier_phi_7_pred_9_ladder_2;
                if (_968 > 0.0)
                {
                    bool _971 = _914 && (!_916);
                    precise float _973 = _933 * (-4.0);
                    precise float _977 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _876 : (isnan(_876) ? 0.001000000047497451305389404296875 : max(_876, 0.001000000047497451305389404296875)));
                    precise float _979 = dot(vec2(_935, _937), vec2(_917, _919));
                    precise float _983 = _977 * _979;
                    precise float _984 = float(_971) * _983;
                    precise float _985 = _600 * _977;
                    precise float _986 = _985 - _984;
                    precise float _987 = (_971 ? 0.0 : _973) + _986;
                    precise float _989 = _861 * sin(_987);
                    precise float _990 = _936 * 0.0;
                    precise float _991 = _990 - _937;
                    precise float _992 = _937 * 0.0;
                    precise float _993 = _935 * 0.0;
                    precise float _994 = _992 - _993;
                    precise float _995 = _935 - _990;
                    precise float _996 = _877 * _989;
                    float _997 = _914 ? _996 : 0.0;
                    float _1039;
                    if (_915)
                    {
                        precise float _1000 = _891 * 2.0;
                        precise float _1002 = _911 + _912;
                        precise float _1003 = _913 + _1002;
                        precise float _1005 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _891 : (isnan(_891) ? 0.001000000047497451305389404296875 : max(_891, 0.001000000047497451305389404296875)));
                        precise float _1006 = _910 * _1005;
                        precise float _1007 = (-0.0) - _935;
                        precise float _1011 = dot(vec2(_937, _1007), vec2(_917, _919)) / _1000;
                        precise float _1012 = (-0.0) - _1011;
                        float _1015 = fract(abs(_1011));
                        precise float _1016 = (-0.0) - _1015;
                        precise float _1018 = _1000 * ((_1011 >= _1012) ? _1015 : _1016);
                        precise float _1019 = _1018 * 6.283184051513671875;
                        precise float _1020 = _1019 / _1000;
                        precise float _1022 = (isnan(5.0) ? _891 : (isnan(_891) ? 5.0 : min(_891, 5.0))) * sin(_1020);
                        precise float _1023 = _979 + _1022;
                        precise float _1024 = _891 * 0.25;
                        precise float _1026 = _600 * _910;
                        precise float _1027 = _1026 - _1024;
                        precise float _1028 = _1027 - _1023;
                        precise float _1029 = _910 * _1003;
                        precise float _1031 = _1028 / (isnan(0.001000000047497451305389404296875) ? _1029 : (isnan(_1029) ? 0.001000000047497451305389404296875 : max(_1029, 0.001000000047497451305389404296875)));
                        float _1032 = fract(_1031);
                        precise float _1034 = 1.0 - _1032;
                        float _1035 = (_1031 < 0.0) ? _1034 : _1032;
                        precise float _1036 = _1002 / _1003;
                        precise float _1037 = _911 / _1003;
                        float _1058;
                        if (_1035 < _1037)
                        {
                            precise float _1056 = _1035 / _1037;
                            _1058 = _1056;
                        }
                        else
                        {
                            float frontier_phi_16_15_ladder;
                            if (_1035 < _1036)
                            {
                                precise float _1068 = _1035 - _1037;
                                precise float _1069 = _1036 - _1037;
                                precise float _1070 = _1068 / _1069;
                                precise float _1059 = 1.0 - _1070;
                                frontier_phi_16_15_ladder = _1059;
                            }
                            else
                            {
                                frontier_phi_16_15_ladder = 0.0;
                            }
                            _1058 = frontier_phi_16_15_ladder;
                        }
                        precise float _1060 = _893 * _1058;
                        precise float _1061 = _1005 * _979;
                        precise float _1062 = _600 * _1006;
                        precise float _1063 = _1062 - _1061;
                        precise float _1065 = _892 + sin(_1063);
                        precise float _1067 = _1060 * abs(_1065);
                        precise float _1040 = _1067 + 0.0;
                        _1039 = _1040;
                    }
                    else
                    {
                        _1039 = 0.0;
                    }
                    precise float _1041 = _842 + _989;
                    precise float _1042 = _1041 + _1039;
                    precise float _1043 = _935 * _1042;
                    precise float _1044 = _936 * _1042;
                    precise float _1045 = _937 * _1042;
                    precise float _1046 = _991 * _997;
                    precise float _1047 = _994 * _997;
                    precise float _1048 = _995 * _997;
                    precise float _1049 = _1046 + _1043;
                    precise float _1050 = _1047 + _1044;
                    precise float _1051 = _1048 + _1045;
                    precise float _1052 = _968 * _1049;
                    precise float _1053 = _968 * _1050;
                    precise float _1054 = _968 * _1051;
                    precise float _944 = _1052 * 0.0500000007450580596923828125;
                    precise float _946 = _1053 * 0.0500000007450580596923828125;
                    precise float _948 = _1054 * 0.0500000007450580596923828125;
                    frontier_phi_7_pred_9_ladder = _944;
                    frontier_phi_7_pred_9_ladder_1 = _946;
                    frontier_phi_7_pred_9_ladder_2 = _948;
                }
                else
                {
                    frontier_phi_7_pred_9_ladder = 0.0;
                    frontier_phi_7_pred_9_ladder_1 = 0.0;
                    frontier_phi_7_pred_9_ladder_2 = 0.0;
                }
                frontier_phi_7_pred = frontier_phi_7_pred_9_ladder;
                frontier_phi_7_pred_1 = frontier_phi_7_pred_9_ladder_1;
                frontier_phi_7_pred_2 = frontier_phi_7_pred_9_ladder_2;
            }
            else
            {
                frontier_phi_7_pred = 0.0;
                frontier_phi_7_pred_1 = 0.0;
                frontier_phi_7_pred_2 = 0.0;
            }
            _943 = frontier_phi_7_pred;
            _945 = frontier_phi_7_pred_1;
            _947 = frontier_phi_7_pred_2;
            _603 = _801 + _943;
            _605 = _802 + _945;
            _607 = _803 + _947;
            uint _807 = _806 + 1u;
            if (_807 == _177)
            {
                break;
            }
            else
            {
                _801 = _603;
                _802 = _605;
                _803 = _607;
                _804 = (_806 != 3u) ? (_804 >> 8u) : _601;
                _806 = _807;
                continue;
            }
        }
        _602 = _603;
        _604 = _605;
        _606 = _607;
    }
    precise float _608 = _602 * _602;
    precise float _609 = _604 * _604;
    precise float _610 = _608 + _609;
    precise float _611 = _606 * _606;
    precise float _612 = _610 + _611;
    float _613 = sqrt(_612);
    bool _614 = _613 < 0.00011000000085914507508277893066406;
    float _619 = inversesqrt(dot(vec3(cbInstanceData._m0[_168].x, cbInstanceData._m0[_554].x, cbInstanceData._m0[_561].x), vec3(cbInstanceData._m0[_168].x, cbInstanceData._m0[_554].x, cbInstanceData._m0[_561].x)));
    precise float _620 = cbInstanceData._m0[_168].x * _619;
    precise float _621 = cbInstanceData._m0[_554].x * _619;
    precise float _622 = cbInstanceData._m0[_561].x * _619;
    float _626 = inversesqrt(dot(vec3(cbInstanceData._m0[_168].y, cbInstanceData._m0[_554].y, cbInstanceData._m0[_561].y), vec3(cbInstanceData._m0[_168].y, cbInstanceData._m0[_554].y, cbInstanceData._m0[_561].y)));
    precise float _627 = cbInstanceData._m0[_168].y * _626;
    precise float _628 = cbInstanceData._m0[_554].y * _626;
    precise float _629 = cbInstanceData._m0[_561].y * _626;
    float _633 = inversesqrt(dot(vec3(cbInstanceData._m0[_168].z, cbInstanceData._m0[_554].z, cbInstanceData._m0[_561].z), vec3(cbInstanceData._m0[_168].z, cbInstanceData._m0[_554].z, cbInstanceData._m0[_561].z)));
    precise float _634 = cbInstanceData._m0[_168].z * _633;
    precise float _635 = cbInstanceData._m0[_554].z * _633;
    precise float _636 = cbInstanceData._m0[_561].z * _633;
    precise float _637 = _620 * 0.0;
    precise float _638 = 1.0 * _627;
    precise float _639 = _638 + _637;
    precise float _640 = 0.0 * _634;
    precise float _641 = _640 + _639;
    precise float _642 = _621 * 0.0;
    precise float _643 = 1.0 * _628;
    precise float _644 = _643 + _642;
    precise float _645 = 0.0 * _635;
    precise float _646 = _645 + _644;
    precise float _647 = _622 * 0.0;
    precise float _648 = 1.0 * _629;
    precise float _649 = _648 + _647;
    precise float _650 = 0.0 * _636;
    precise float _651 = _650 + _649;
    float _655 = inversesqrt(dot(vec3(_602, _604, _606), vec3(_602, _604, _606)));
    precise float _656 = _602 * _655;
    precise float _657 = _604 * _655;
    precise float _658 = _606 * _655;
    precise float _659 = _646 * _658;
    precise float _660 = _651 * _657;
    precise float _661 = _659 - _660;
    precise float _662 = _651 * _656;
    precise float _663 = _641 * _658;
    precise float _664 = _662 - _663;
    precise float _665 = _641 * _657;
    precise float _666 = _646 * _656;
    precise float _667 = _665 - _666;
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    precise float _672 = _671 * _661;
    precise float _673 = _671 * _664;
    precise float _674 = _671 * _667;
    precise float _675 = _613 + 1.0;
    precise float _677 = cbMtdParam._m0[9u].w * log2(_675);
    precise float _678 = dot(vec3(_672, _673, _674), vec3(_589, _590, _591));
    precise float _681 = _672 * _678;
    precise float _682 = _673 * _678;
    precise float _683 = _674 * _678;
    precise float _684 = _574 + _681;
    precise float _685 = _581 + _682;
    precise float _686 = _588 + _683;
    precise float _687 = _386 - _684;
    precise float _688 = _393 - _685;
    precise float _689 = _400 - _686;
    precise float _690 = _673 * _689;
    precise float _691 = _674 * _688;
    precise float _692 = _690 - _691;
    precise float _693 = _674 * _687;
    precise float _694 = _672 * _689;
    precise float _695 = _693 - _694;
    precise float _696 = _672 * _688;
    precise float _697 = _673 * _687;
    precise float _698 = _696 - _697;
    float _699 = sin(_677);
    float _700 = cos(_677);
    precise float _701 = _687 * _700;
    precise float _702 = _688 * _700;
    precise float _703 = _689 * _700;
    precise float _704 = _699 * _692;
    precise float _705 = _699 * _695;
    precise float _706 = _699 * _698;
    precise float _707 = _701 + _704;
    precise float _708 = _702 + _705;
    precise float _709 = _706 + _703;
    precise float _710 = _684 + _707;
    precise float _711 = _685 + _708;
    precise float _712 = _686 + _709;
    precise float _713 = _710 - _386;
    precise float _714 = _711 - _393;
    precise float _715 = _712 - _400;
    precise float _719 = _386 + (_614 ? 0.0 : _713);
    precise float _720 = _393 + (_614 ? 0.0 : _714);
    precise float _721 = _400 + (_614 ? 0.0 : _715);
    precise float _722 = _719 - cbSceneParam._m0[3u].x;
    precise float _723 = _720 - cbSceneParam._m0[3u].y;
    precise float _724 = _721 - cbSceneParam._m0[3u].z;
    precise float _752 = cbSceneParam._m0[24u].x * _722;
    precise float _753 = _723 * cbSceneParam._m0[24u].y;
    precise float _754 = _753 + _752;
    precise float _755 = _724 * cbSceneParam._m0[24u].z;
    precise float _756 = _755 + _754;
    precise float _757 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _758 = _757 + _756;
    precise float _759 = cbSceneParam._m0[25u].x * _722;
    precise float _760 = _723 * cbSceneParam._m0[25u].y;
    precise float _761 = _760 + _759;
    precise float _762 = _724 * cbSceneParam._m0[25u].z;
    precise float _763 = _762 + _761;
    precise float _764 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _765 = _764 + _763;
    precise float _766 = cbSceneParam._m0[26u].x * _722;
    precise float _767 = _723 * cbSceneParam._m0[26u].y;
    precise float _768 = _767 + _766;
    precise float _769 = _724 * cbSceneParam._m0[26u].z;
    precise float _770 = _769 + _768;
    precise float _771 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _772 = _771 + _770;
    precise float _773 = _722 * cbSceneParam._m0[27u].x;
    precise float _774 = _723 * cbSceneParam._m0[27u].y;
    precise float _775 = _774 + _773;
    precise float _776 = _724 * cbSceneParam._m0[27u].z;
    precise float _777 = _776 + _775;
    precise float _778 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _779 = _778 + _777;
    gl_Position.x = _758;
    gl_Position.y = _765;
    gl_Position.z = _772;
    gl_Position.w = _779;
    NORMAL_1.x = _526;
    NORMAL_1.y = _529;
    NORMAL_1.z = _532;
    NORMAL_1.w = float(_191);
    TANGENT_1.x = (-0.0) - (_526 * _529);
    TANGENT_1.y = (_526 * _526) - (_532 * _534);
    TANGENT_1.z = _529 * _534;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = isnan(1.0) ? _1101 : (isnan(_1101) ? 1.0 : min(_1101, 1.0));
    TEXCOORD_2.w = 1.0 - (isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0)));
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_13 = sqrt(((_497 * _497) + (_498 * _498)) + (_499 * _499));
}


