#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_3;

uint _895;

void main()
{
    uint _79 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    precise float _165 = float(NORMAL.x) + (-127.0);
    precise float _167 = float(NORMAL.y) + (-127.0);
    precise float _168 = float(NORMAL.z) + (-127.0);
    precise float _169 = _165 * 0.0078740157186985015869140625;
    precise float _171 = _167 * 0.0078740157186985015869140625;
    precise float _172 = _168 * 0.0078740157186985015869140625;
    uint _177 = _79 * 13u;
    uvec4 _183 = floatBitsToUint(cbInstanceData._m0[_177 + 7u]);
    uint _186 = min(_183.y, 8u);
    precise float _190 = POSITION.x + 0.0;
    precise float _191 = POSITION.y + 0.0;
    precise float _192 = POSITION.z + 0.0;
    uint _197 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _79;
    uvec4 _199 = texelFetch(g_InstanceIndexBuffer, int(_197));
    uint _200 = _199.x;
    uint _202 = _200 * 13u;
    uint _209 = (floatBitsToUint(cbInstanceData._m0[_202 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _216 = _209 + 1u;
    uint _223 = _209 + 2u;
    float _233 = inversesqrt(dot(vec3(cbObjMatrix._m0[_209].x, cbObjMatrix._m0[_216].x, cbObjMatrix._m0[_223].x), vec3(cbObjMatrix._m0[_209].x, cbObjMatrix._m0[_216].x, cbObjMatrix._m0[_223].x)));
    precise float _234 = cbObjMatrix._m0[_209].x * _233;
    precise float _235 = cbObjMatrix._m0[_216].x * _233;
    precise float _236 = cbObjMatrix._m0[_223].x * _233;
    float _240 = inversesqrt(dot(vec3(cbObjMatrix._m0[_209].y, cbObjMatrix._m0[_216].y, cbObjMatrix._m0[_223].y), vec3(cbObjMatrix._m0[_209].y, cbObjMatrix._m0[_216].y, cbObjMatrix._m0[_223].y)));
    precise float _241 = cbObjMatrix._m0[_209].y * _240;
    precise float _242 = cbObjMatrix._m0[_216].y * _240;
    precise float _243 = cbObjMatrix._m0[_223].y * _240;
    float _247 = inversesqrt(dot(vec3(cbObjMatrix._m0[_209].z, cbObjMatrix._m0[_216].z, cbObjMatrix._m0[_223].z), vec3(cbObjMatrix._m0[_209].z, cbObjMatrix._m0[_216].z, cbObjMatrix._m0[_223].z)));
    precise float _248 = cbObjMatrix._m0[_209].z * _247;
    precise float _249 = cbObjMatrix._m0[_216].z * _247;
    precise float _250 = cbObjMatrix._m0[_223].z * _247;
    precise float _267 = _234 * cbSceneParam._m0[5u].x;
    precise float _268 = _235 * cbSceneParam._m0[5u].y;
    precise float _269 = _268 + _267;
    precise float _270 = _236 * cbSceneParam._m0[5u].z;
    precise float _271 = _270 + _269;
    precise float _272 = _234 * cbSceneParam._m0[6u].x;
    precise float _273 = _235 * cbSceneParam._m0[6u].y;
    precise float _274 = _273 + _272;
    precise float _275 = _236 * cbSceneParam._m0[6u].z;
    precise float _276 = _275 + _274;
    precise float _277 = _234 * cbSceneParam._m0[7u].x;
    precise float _278 = _235 * cbSceneParam._m0[7u].y;
    precise float _279 = _278 + _277;
    precise float _280 = _236 * cbSceneParam._m0[7u].z;
    precise float _281 = _280 + _279;
    precise float _282 = _241 * cbSceneParam._m0[5u].x;
    precise float _283 = _242 * cbSceneParam._m0[5u].y;
    precise float _284 = _283 + _282;
    precise float _285 = _243 * cbSceneParam._m0[5u].z;
    precise float _286 = _285 + _284;
    precise float _287 = _241 * cbSceneParam._m0[6u].x;
    precise float _288 = _242 * cbSceneParam._m0[6u].y;
    precise float _289 = _288 + _287;
    precise float _290 = _243 * cbSceneParam._m0[6u].z;
    precise float _291 = _290 + _289;
    precise float _292 = _241 * cbSceneParam._m0[7u].x;
    precise float _293 = _242 * cbSceneParam._m0[7u].y;
    precise float _294 = _293 + _292;
    precise float _295 = _243 * cbSceneParam._m0[7u].z;
    precise float _296 = _295 + _294;
    precise float _297 = _248 * cbSceneParam._m0[5u].x;
    precise float _298 = _249 * cbSceneParam._m0[5u].y;
    precise float _299 = _298 + _297;
    precise float _300 = _250 * cbSceneParam._m0[5u].z;
    precise float _301 = _300 + _299;
    precise float _302 = _248 * cbSceneParam._m0[6u].x;
    precise float _303 = _249 * cbSceneParam._m0[6u].y;
    precise float _304 = _303 + _302;
    precise float _305 = _250 * cbSceneParam._m0[6u].z;
    precise float _306 = _305 + _304;
    precise float _307 = _248 * cbSceneParam._m0[7u].x;
    precise float _308 = _249 * cbSceneParam._m0[7u].y;
    precise float _309 = _308 + _307;
    precise float _310 = _250 * cbSceneParam._m0[7u].z;
    precise float _311 = _310 + _309;
    precise float _312 = _171 * 0.0;
    precise float _313 = _312 - _172;
    precise float _314 = _172 * 0.0;
    precise float _315 = _169 * 0.0;
    precise float _316 = _314 - _315;
    precise float _317 = _169 - _312;
    precise float _318 = _172 * _316;
    precise float _319 = _171 * _317;
    precise float _320 = _318 - _319;
    precise float _321 = _169 * _317;
    precise float _322 = _172 * _313;
    precise float _323 = _321 - _322;
    precise float _324 = _171 * _313;
    precise float _325 = _169 * _316;
    precise float _326 = _324 - _325;
    float _330 = inversesqrt(dot(vec3(_313, _316, _317), vec3(_313, _316, _317)));
    precise float _331 = _313 * _330;
    precise float _332 = _316 * _330;
    precise float _333 = _317 * _330;
    float _337 = inversesqrt(dot(vec3(_320, _323, _326), vec3(_320, _323, _326)));
    precise float _338 = _320 * _337;
    precise float _339 = _323 * _337;
    precise float _340 = _326 * _337;
    precise float _341 = (-0.0) - _169;
    precise float _343 = (-0.0) - _171;
    precise float _344 = (-0.0) - _172;
    float _348 = inversesqrt(dot(vec3(_341, _343, _344), vec3(_341, _343, _344)));
    precise float _349 = _348 * _341;
    precise float _350 = _348 * _343;
    precise float _351 = _348 * _344;
    precise float _352 = _190 - TEXCOORD_1.x;
    precise float _353 = _191 - TEXCOORD_1.y;
    precise float _354 = _192 - TEXCOORD_1.z;
    precise float _355 = _352 * _331;
    precise float _356 = _353 * _332;
    precise float _357 = _356 + _355;
    precise float _358 = _354 * _333;
    precise float _359 = _358 + _357;
    precise float _360 = _352 * _338;
    precise float _361 = _353 * _339;
    precise float _362 = _361 + _360;
    precise float _363 = _354 * _340;
    precise float _364 = _363 + _362;
    precise float _365 = _352 * _349;
    precise float _366 = _353 * _350;
    precise float _367 = _366 + _365;
    precise float _368 = _354 * _351;
    precise float _369 = _368 + _367;
    precise float _370 = _271 * _359;
    precise float _371 = _276 * _364;
    precise float _372 = _371 + _370;
    precise float _373 = _281 * _369;
    precise float _374 = _373 + _372;
    precise float _375 = _286 * _359;
    precise float _376 = _291 * _364;
    precise float _377 = _376 + _375;
    precise float _378 = _296 * _369;
    precise float _379 = _378 + _377;
    precise float _380 = _301 * _359;
    precise float _381 = _306 * _364;
    precise float _382 = _381 + _380;
    precise float _383 = _311 * _369;
    precise float _384 = _383 + _382;
    precise float _385 = TEXCOORD_1.x + _374;
    precise float _386 = TEXCOORD_1.y + _379;
    precise float _387 = TEXCOORD_1.z + _384;
    precise float _388 = cbObjMatrix._m0[_209].x * _385;
    precise float _389 = _386 * cbObjMatrix._m0[_209].y;
    precise float _390 = _389 + _388;
    precise float _391 = _387 * cbObjMatrix._m0[_209].z;
    precise float _392 = _391 + _390;
    precise float _393 = 1.0 * cbObjMatrix._m0[_209].w;
    precise float _395 = _393 + _392;
    precise float _396 = cbObjMatrix._m0[_216].x * _385;
    precise float _397 = _386 * cbObjMatrix._m0[_216].y;
    precise float _398 = _397 + _396;
    precise float _399 = _387 * cbObjMatrix._m0[_216].z;
    precise float _400 = _399 + _398;
    precise float _401 = 1.0 * cbObjMatrix._m0[_216].w;
    precise float _402 = _401 + _400;
    precise float _403 = cbObjMatrix._m0[_223].x * _385;
    precise float _404 = _386 * cbObjMatrix._m0[_223].y;
    precise float _405 = _404 + _403;
    precise float _406 = _387 * cbObjMatrix._m0[_223].z;
    precise float _407 = _406 + _405;
    precise float _408 = 1.0 * cbObjMatrix._m0[_223].w;
    precise float _409 = _408 + _407;
    float _435 = (((-0.0) - cbObjMatrix._m0[_209].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_209].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_209].y, cbObjMatrix._m0[_209].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _236, fma(cbSceneParam._m0[3u].y, _235, cbSceneParam._m0[3u].x * _234));
    float _438 = (((-0.0) - cbObjMatrix._m0[_216].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_216].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_216].y, cbObjMatrix._m0[_216].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _243, fma(cbSceneParam._m0[3u].y, _242, cbSceneParam._m0[3u].x * _241));
    float _441 = (((-0.0) - cbObjMatrix._m0[_223].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_223].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_223].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _250, fma(cbSceneParam._m0[3u].y, _249, cbSceneParam._m0[3u].x * _248));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    float _446 = _445 * _435;
    float _447 = _445 * _438;
    float _448 = _445 * _441;
    float _451 = fma(_448, _333, fma(_447, _332, _446 * _331));
    float _454 = fma(_448, _340, fma(_447, _339, _446 * _338));
    float _457 = fma(_448, _351, fma(_447, _350, _446 * _349));
    float _461 = inversesqrt(dot(vec3(_451, _454, _457), vec3(_451, _454, _457)));
    float _462 = _461 * _451;
    float _463 = _461 * _454;
    float _464 = _461 * _457;
    float _480 = float(int(uint(_462 > 0.0) - uint(_462 < 0.0)));
    float _482 = float(int(uint(_464 > 0.0) - uint(_464 < 0.0)));
    float _483 = dot(vec3(_462, _463, _464), vec3(_480, float(int(uint(_463 > 0.0) - uint(_463 < 0.0))), _482));
    float _486 = _462 / _483;
    float _488 = _464 / _483;
    float _496;
    float _497;
    if ((_463 / _483) < 0.0)
    {
        _496 = _480 - (abs(_488) * _480);
        _497 = _482 - (abs(_486) * _482);
    }
    else
    {
        _496 = _486;
        _497 = _488;
    }
    float _501 = (_496 * 0.5) + 0.5;
    float _502 = (_497 * 0.5) + 0.5;
    float _1126 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _1137 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _508 = fma(_172, _333, fma(_171, _332, _331 * _169));
    float _511 = fma(_172, _340, fma(_171, _339, _338 * _169));
    float _514 = fma(_172, _351, fma(_171, _350, _349 * _169));
    float _517 = fma(_281, _514, fma(_276, _511, _508 * _271));
    float _520 = fma(_296, _514, fma(_291, _511, _508 * _286));
    float _523 = fma(_311, _514, fma(_306, _511, _508 * _301));
    float _526 = fma(_523, cbObjMatrix._m0[_209].z, fma(_520, cbObjMatrix._m0[_209].y, _517 * cbObjMatrix._m0[_209].x));
    float _529 = fma(_523, cbObjMatrix._m0[_216].z, fma(_520, cbObjMatrix._m0[_216].y, _517 * cbObjMatrix._m0[_216].x));
    float _532 = fma(_523, cbObjMatrix._m0[_223].z, fma(_520, cbObjMatrix._m0[_223].y, _517 * cbObjMatrix._m0[_223].x));
    float _534 = (-0.0) - _532;
    precise float _546 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _554 = _177 + 1u;
    uint _561 = _177 + 2u;
    precise float _568 = TEXCOORD_1.x * cbInstanceData._m0[_177].x;
    precise float _569 = TEXCOORD_1.y * cbInstanceData._m0[_177].y;
    precise float _570 = _569 + _568;
    precise float _571 = TEXCOORD_1.z * cbInstanceData._m0[_177].z;
    precise float _572 = _571 + _570;
    precise float _573 = 1.0 * cbInstanceData._m0[_177].w;
    precise float _574 = _573 + _572;
    precise float _575 = TEXCOORD_1.x * cbInstanceData._m0[_554].x;
    precise float _576 = TEXCOORD_1.y * cbInstanceData._m0[_554].y;
    precise float _577 = _576 + _575;
    precise float _578 = TEXCOORD_1.z * cbInstanceData._m0[_554].z;
    precise float _579 = _578 + _577;
    precise float _580 = 1.0 * cbInstanceData._m0[_554].w;
    precise float _581 = _580 + _579;
    precise float _582 = TEXCOORD_1.x * cbInstanceData._m0[_561].x;
    precise float _583 = TEXCOORD_1.y * cbInstanceData._m0[_561].y;
    precise float _584 = _583 + _582;
    precise float _585 = TEXCOORD_1.z * cbInstanceData._m0[_561].z;
    precise float _586 = _585 + _584;
    precise float _587 = 1.0 * cbInstanceData._m0[_561].w;
    precise float _588 = _587 + _586;
    precise float _589 = _395 - _574;
    precise float _590 = _402 - _581;
    precise float _591 = _409 - _588;
    precise float _592 = _589 * _589;
    precise float _593 = _590 * _590;
    precise float _594 = _592 + _593;
    precise float _595 = _591 * _591;
    precise float _596 = _594 + _595;
    precise float _598 = cbMtdParam._m0[9u].z * sqrt(_596);
    precise float _599 = _546 + _598;
    precise float _600 = cbPerFrame._m0[22u].x + _599;
    uint _601 = _183.w;
    float _602;
    float _604;
    float _606;
    if (_186 == 0u)
    {
        _602 = 0.0;
        _604 = 0.0;
        _606 = 0.0;
    }
    else
    {
        uint _825 = _183.z;
        precise float _603;
        precise float _605;
        precise float _607;
        float _968;
        float _970;
        float _972;
        float _826 = 0.0;
        float _827 = 0.0;
        float _828 = 0.0;
        uint _829 = _825;
        uint _831 = 0u;
        float _867;
        float _886;
        vec4 _900;
        float _901;
        float _902;
        float _916;
        float _917;
        float _918;
        float _935;
        float _936;
        float _937;
        float _938;
        bool _939;
        bool _940;
        bool _941;
        precise float _942;
        precise float _943;
        precise float _944;
        float _945;
        float _946;
        float _947;
        precise float _948;
        bool _951;
        for (;;)
        {
            uint _833 = _829 & 255u;
            uint _835 = _833 * 24u;
            uvec3 _845 = uvec3(texelFetch(g_forceParam, int(_835)).x, texelFetch(g_forceParam, int(_835 + 1u)).x, texelFetch(g_forceParam, int(_835 + 2u)).x);
            uint _850 = (_833 * 24u) + 4u;
            vec4 _863 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_850)).x, texelFetch(g_forceParam, int(_850 + 1u)).x, texelFetch(g_forceParam, int(_850 + 2u)).x, texelFetch(g_forceParam, int(_850 + 3u)).x));
            _867 = _863.w;
            uint _869 = (_833 * 24u) + 8u;
            vec4 _882 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_869)).x, texelFetch(g_forceParam, int(_869 + 1u)).x, texelFetch(g_forceParam, int(_869 + 2u)).x, texelFetch(g_forceParam, int(_869 + 3u)).x));
            _886 = _882.w;
            uint _889 = (_833 * 24u) + 12u;
            _900 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_889)).x, texelFetch(g_forceParam, int(_889 + 1u)).x, _895, texelFetch(g_forceParam, int(_889 + 3u)).x));
            _901 = _900.x;
            _902 = _900.w;
            uint _905 = (_833 * 24u) + 16u;
            vec3 _915 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_905)).x, texelFetch(g_forceParam, int(_905 + 1u)).x, texelFetch(g_forceParam, int(_905 + 2u)).x));
            _916 = _915.x;
            _917 = _915.y;
            _918 = _915.z;
            uint _921 = (_833 * 24u) + 20u;
            vec4 _934 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_921)).x, texelFetch(g_forceParam, int(_921 + 1u)).x, texelFetch(g_forceParam, int(_921 + 2u)).x, texelFetch(g_forceParam, int(_921 + 3u)).x));
            _935 = _934.x;
            _936 = _934.y;
            _937 = _934.z;
            _938 = _934.w;
            _939 = _845.x == 1u;
            _940 = _845.y == 1u;
            _941 = _845.z == 1u;
            _942 = _574 - _863.x;
            _943 = _581 - _863.y;
            _944 = _588 - _863.z;
            _945 = _939 ? _882.x : _942;
            _946 = _939 ? _882.y : _943;
            _947 = _939 ? _882.z : _944;
            _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
            _951 = _948 > 0.0;
            float frontier_phi_7_pred;
            float frontier_phi_7_pred_1;
            float frontier_phi_7_pred_2;
            if (_951)
            {
                precise float _953 = _942 * _942;
                precise float _954 = _943 * _943;
                precise float _955 = _953 + _954;
                precise float _956 = _944 * _944;
                precise float _957 = _956 + _955;
                float _958 = sqrt(_957);
                float _959 = inversesqrt(_948);
                precise float _960 = _945 * _959;
                precise float _961 = _946 * _959;
                precise float _962 = _947 * _959;
                precise float _965 = _958 / (isnan(0.001000000047497451305389404296875) ? _900.y : (isnan(_900.y) ? 0.001000000047497451305389404296875 : max(_900.y, 0.001000000047497451305389404296875)));
                precise float _966 = 1.0 - _965;
                float _1153 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
                float _967 = isnan(1.0) ? _1153 : (isnan(_1153) ? 1.0 : min(_1153, 1.0));
                float _993;
                if (_941)
                {
                    float _980 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
                    precise float _981 = _942 * _980;
                    precise float _982 = _943 * _980;
                    precise float _983 = _944 * _980;
                    precise float _987 = dot(vec3(_960, _961, _962), vec3(_981, _982, _983)) * 0.800000011920928955078125;
                    precise float _989 = _987 + 0.20000000298023223876953125;
                    float _1164 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
                    precise float _992 = _967 * (isnan(1.0) ? _1164 : (isnan(_1164) ? 1.0 : min(_1164, 1.0)));
                    _993 = _992;
                }
                else
                {
                    _993 = _967;
                }
                float frontier_phi_7_pred_9_ladder;
                float frontier_phi_7_pred_9_ladder_1;
                float frontier_phi_7_pred_9_ladder_2;
                if (_993 > 0.0)
                {
                    bool _996 = _939 && (!_941);
                    precise float _998 = _958 * (-4.0);
                    precise float _1002 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _901 : (isnan(_901) ? 0.001000000047497451305389404296875 : max(_901, 0.001000000047497451305389404296875)));
                    precise float _1004 = dot(vec2(_960, _962), vec2(_942, _944));
                    precise float _1008 = _1002 * _1004;
                    precise float _1009 = float(_996) * _1008;
                    precise float _1010 = _600 * _1002;
                    precise float _1011 = _1010 - _1009;
                    precise float _1012 = (_996 ? 0.0 : _998) + _1011;
                    precise float _1014 = _886 * sin(_1012);
                    precise float _1015 = _961 * 0.0;
                    precise float _1016 = _1015 - _962;
                    precise float _1017 = _962 * 0.0;
                    precise float _1018 = _960 * 0.0;
                    precise float _1019 = _1017 - _1018;
                    precise float _1020 = _960 - _1015;
                    precise float _1021 = _902 * _1014;
                    float _1022 = _939 ? _1021 : 0.0;
                    float _1064;
                    if (_940)
                    {
                        precise float _1025 = _916 * 2.0;
                        precise float _1027 = _936 + _937;
                        precise float _1028 = _938 + _1027;
                        precise float _1030 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _916 : (isnan(_916) ? 0.001000000047497451305389404296875 : max(_916, 0.001000000047497451305389404296875)));
                        precise float _1031 = _935 * _1030;
                        precise float _1032 = (-0.0) - _960;
                        precise float _1036 = dot(vec2(_962, _1032), vec2(_942, _944)) / _1025;
                        precise float _1037 = (-0.0) - _1036;
                        float _1040 = fract(abs(_1036));
                        precise float _1041 = (-0.0) - _1040;
                        precise float _1043 = _1025 * ((_1036 >= _1037) ? _1040 : _1041);
                        precise float _1044 = _1043 * 6.283184051513671875;
                        precise float _1045 = _1044 / _1025;
                        precise float _1047 = (isnan(5.0) ? _916 : (isnan(_916) ? 5.0 : min(_916, 5.0))) * sin(_1045);
                        precise float _1048 = _1004 + _1047;
                        precise float _1049 = _916 * 0.25;
                        precise float _1051 = _600 * _935;
                        precise float _1052 = _1051 - _1049;
                        precise float _1053 = _1052 - _1048;
                        precise float _1054 = _935 * _1028;
                        precise float _1056 = _1053 / (isnan(0.001000000047497451305389404296875) ? _1054 : (isnan(_1054) ? 0.001000000047497451305389404296875 : max(_1054, 0.001000000047497451305389404296875)));
                        float _1057 = fract(_1056);
                        precise float _1059 = 1.0 - _1057;
                        float _1060 = (_1056 < 0.0) ? _1059 : _1057;
                        precise float _1061 = _1027 / _1028;
                        precise float _1062 = _936 / _1028;
                        float _1083;
                        if (_1060 < _1062)
                        {
                            precise float _1081 = _1060 / _1062;
                            _1083 = _1081;
                        }
                        else
                        {
                            float frontier_phi_16_15_ladder;
                            if (_1060 < _1061)
                            {
                                precise float _1093 = _1060 - _1062;
                                precise float _1094 = _1061 - _1062;
                                precise float _1095 = _1093 / _1094;
                                precise float _1084 = 1.0 - _1095;
                                frontier_phi_16_15_ladder = _1084;
                            }
                            else
                            {
                                frontier_phi_16_15_ladder = 0.0;
                            }
                            _1083 = frontier_phi_16_15_ladder;
                        }
                        precise float _1085 = _918 * _1083;
                        precise float _1086 = _1030 * _1004;
                        precise float _1087 = _600 * _1031;
                        precise float _1088 = _1087 - _1086;
                        precise float _1090 = _917 + sin(_1088);
                        precise float _1092 = _1085 * abs(_1090);
                        precise float _1065 = _1092 + 0.0;
                        _1064 = _1065;
                    }
                    else
                    {
                        _1064 = 0.0;
                    }
                    precise float _1066 = _867 + _1014;
                    precise float _1067 = _1066 + _1064;
                    precise float _1068 = _960 * _1067;
                    precise float _1069 = _961 * _1067;
                    precise float _1070 = _962 * _1067;
                    precise float _1071 = _1016 * _1022;
                    precise float _1072 = _1019 * _1022;
                    precise float _1073 = _1020 * _1022;
                    precise float _1074 = _1071 + _1068;
                    precise float _1075 = _1072 + _1069;
                    precise float _1076 = _1073 + _1070;
                    precise float _1077 = _993 * _1074;
                    precise float _1078 = _993 * _1075;
                    precise float _1079 = _993 * _1076;
                    precise float _969 = _1077 * 0.0500000007450580596923828125;
                    precise float _971 = _1078 * 0.0500000007450580596923828125;
                    precise float _973 = _1079 * 0.0500000007450580596923828125;
                    frontier_phi_7_pred_9_ladder = _969;
                    frontier_phi_7_pred_9_ladder_1 = _971;
                    frontier_phi_7_pred_9_ladder_2 = _973;
                }
                else
                {
                    frontier_phi_7_pred_9_ladder = 0.0;
                    frontier_phi_7_pred_9_ladder_1 = 0.0;
                    frontier_phi_7_pred_9_ladder_2 = 0.0;
                }
                frontier_phi_7_pred = frontier_phi_7_pred_9_ladder;
                frontier_phi_7_pred_1 = frontier_phi_7_pred_9_ladder_1;
                frontier_phi_7_pred_2 = frontier_phi_7_pred_9_ladder_2;
            }
            else
            {
                frontier_phi_7_pred = 0.0;
                frontier_phi_7_pred_1 = 0.0;
                frontier_phi_7_pred_2 = 0.0;
            }
            _968 = frontier_phi_7_pred;
            _970 = frontier_phi_7_pred_1;
            _972 = frontier_phi_7_pred_2;
            _603 = _826 + _968;
            _605 = _827 + _970;
            _607 = _828 + _972;
            uint _832 = _831 + 1u;
            if (_832 == _186)
            {
                break;
            }
            else
            {
                _826 = _603;
                _827 = _605;
                _828 = _607;
                _829 = (_831 != 3u) ? (_829 >> 8u) : _601;
                _831 = _832;
                continue;
            }
        }
        _602 = _603;
        _604 = _605;
        _606 = _607;
    }
    precise float _608 = _602 * _602;
    precise float _609 = _604 * _604;
    precise float _610 = _608 + _609;
    precise float _611 = _606 * _606;
    precise float _612 = _610 + _611;
    float _613 = sqrt(_612);
    bool _614 = _613 < 0.00011000000085914507508277893066406;
    float _619 = inversesqrt(dot(vec3(cbInstanceData._m0[_177].x, cbInstanceData._m0[_554].x, cbInstanceData._m0[_561].x), vec3(cbInstanceData._m0[_177].x, cbInstanceData._m0[_554].x, cbInstanceData._m0[_561].x)));
    precise float _620 = cbInstanceData._m0[_177].x * _619;
    precise float _621 = cbInstanceData._m0[_554].x * _619;
    precise float _622 = cbInstanceData._m0[_561].x * _619;
    float _626 = inversesqrt(dot(vec3(cbInstanceData._m0[_177].y, cbInstanceData._m0[_554].y, cbInstanceData._m0[_561].y), vec3(cbInstanceData._m0[_177].y, cbInstanceData._m0[_554].y, cbInstanceData._m0[_561].y)));
    precise float _627 = cbInstanceData._m0[_177].y * _626;
    precise float _628 = cbInstanceData._m0[_554].y * _626;
    precise float _629 = cbInstanceData._m0[_561].y * _626;
    float _633 = inversesqrt(dot(vec3(cbInstanceData._m0[_177].z, cbInstanceData._m0[_554].z, cbInstanceData._m0[_561].z), vec3(cbInstanceData._m0[_177].z, cbInstanceData._m0[_554].z, cbInstanceData._m0[_561].z)));
    precise float _634 = cbInstanceData._m0[_177].z * _633;
    precise float _635 = cbInstanceData._m0[_554].z * _633;
    precise float _636 = cbInstanceData._m0[_561].z * _633;
    precise float _637 = _620 * 0.0;
    precise float _638 = 1.0 * _627;
    precise float _639 = _638 + _637;
    precise float _640 = 0.0 * _634;
    precise float _641 = _640 + _639;
    precise float _642 = _621 * 0.0;
    precise float _643 = 1.0 * _628;
    precise float _644 = _643 + _642;
    precise float _645 = 0.0 * _635;
    precise float _646 = _645 + _644;
    precise float _647 = _622 * 0.0;
    precise float _648 = 1.0 * _629;
    precise float _649 = _648 + _647;
    precise float _650 = 0.0 * _636;
    precise float _651 = _650 + _649;
    float _655 = inversesqrt(dot(vec3(_602, _604, _606), vec3(_602, _604, _606)));
    precise float _656 = _602 * _655;
    precise float _657 = _604 * _655;
    precise float _658 = _606 * _655;
    precise float _659 = _646 * _658;
    precise float _660 = _651 * _657;
    precise float _661 = _659 - _660;
    precise float _662 = _651 * _656;
    precise float _663 = _641 * _658;
    precise float _664 = _662 - _663;
    precise float _665 = _641 * _657;
    precise float _666 = _646 * _656;
    precise float _667 = _665 - _666;
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    precise float _672 = _671 * _661;
    precise float _673 = _671 * _664;
    precise float _674 = _671 * _667;
    precise float _675 = _613 + 1.0;
    precise float _677 = cbMtdParam._m0[9u].w * log2(_675);
    precise float _678 = dot(vec3(_672, _673, _674), vec3(_589, _590, _591));
    precise float _681 = _672 * _678;
    precise float _682 = _673 * _678;
    precise float _683 = _674 * _678;
    precise float _684 = _574 + _681;
    precise float _685 = _581 + _682;
    precise float _686 = _588 + _683;
    precise float _687 = _395 - _684;
    precise float _688 = _402 - _685;
    precise float _689 = _409 - _686;
    precise float _690 = _673 * _689;
    precise float _691 = _674 * _688;
    precise float _692 = _690 - _691;
    precise float _693 = _674 * _687;
    precise float _694 = _672 * _689;
    precise float _695 = _693 - _694;
    precise float _696 = _672 * _688;
    precise float _697 = _673 * _687;
    precise float _698 = _696 - _697;
    float _699 = sin(_677);
    float _700 = cos(_677);
    precise float _701 = _687 * _700;
    precise float _702 = _688 * _700;
    precise float _703 = _689 * _700;
    precise float _704 = _699 * _692;
    precise float _705 = _699 * _695;
    precise float _706 = _699 * _698;
    precise float _707 = _701 + _704;
    precise float _708 = _702 + _705;
    precise float _709 = _706 + _703;
    precise float _710 = _684 + _707;
    precise float _711 = _685 + _708;
    precise float _712 = _686 + _709;
    precise float _713 = _710 - _395;
    precise float _714 = _711 - _402;
    precise float _715 = _712 - _409;
    precise float _719 = _395 + (_614 ? 0.0 : _713);
    precise float _720 = _402 + (_614 ? 0.0 : _714);
    precise float _721 = _409 + (_614 ? 0.0 : _715);
    precise float _722 = _719 - cbSceneParam._m0[3u].x;
    precise float _723 = _720 - cbSceneParam._m0[3u].y;
    precise float _724 = _721 - cbSceneParam._m0[3u].z;
    precise float _752 = cbSceneParam._m0[24u].x * _722;
    precise float _753 = _723 * cbSceneParam._m0[24u].y;
    precise float _754 = _753 + _752;
    precise float _755 = _724 * cbSceneParam._m0[24u].z;
    precise float _756 = _755 + _754;
    precise float _757 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _758 = _757 + _756;
    precise float _759 = cbSceneParam._m0[25u].x * _722;
    precise float _760 = _723 * cbSceneParam._m0[25u].y;
    precise float _761 = _760 + _759;
    precise float _762 = _724 * cbSceneParam._m0[25u].z;
    precise float _763 = _762 + _761;
    precise float _764 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _765 = _764 + _763;
    precise float _766 = cbSceneParam._m0[26u].x * _722;
    precise float _767 = _723 * cbSceneParam._m0[26u].y;
    precise float _768 = _767 + _766;
    precise float _769 = _724 * cbSceneParam._m0[26u].z;
    precise float _770 = _769 + _768;
    precise float _771 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _772 = _771 + _770;
    precise float _773 = _722 * cbSceneParam._m0[27u].x;
    precise float _774 = _723 * cbSceneParam._m0[27u].y;
    precise float _775 = _774 + _773;
    precise float _776 = _724 * cbSceneParam._m0[27u].z;
    precise float _777 = _776 + _775;
    precise float _778 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _779 = _778 + _777;
    gl_Position.x = _758;
    gl_Position.y = _765;
    gl_Position.z = _772;
    gl_Position.w = _779;
    POSITION_1.x = _758;
    POSITION_1.y = _765;
    POSITION_1.z = _772;
    POSITION_1.w = _779;
    NORMAL_1.x = _526;
    NORMAL_1.y = _529;
    NORMAL_1.z = _532;
    NORMAL_1.w = float(_200);
    TANGENT_1.x = (-0.0) - (_526 * _529);
    TANGENT_1.y = (_526 * _526) - (_532 * _534);
    TANGENT_1.z = _529 * _534;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = isnan(1.0) ? _1126 : (isnan(_1126) ? 1.0 : min(_1126, 1.0));
    TEXCOORD_2.w = 1.0 - (isnan(1.0) ? _1137 : (isnan(_1137) ? 1.0 : min(_1137, 1.0)));
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    gl_ClipDistance[0u] = dot(vec4(_758, _765, _772, _779), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_758, _765, _772, _779), vec4(cbInstanceData._m0[_202 + 3u]));
}


