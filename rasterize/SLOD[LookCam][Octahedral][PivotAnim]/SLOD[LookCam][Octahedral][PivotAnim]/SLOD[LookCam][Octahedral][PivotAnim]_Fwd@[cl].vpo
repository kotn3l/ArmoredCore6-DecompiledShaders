#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_3;

uint _869;

void main()
{
    uint _75 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    precise float _160 = float(NORMAL.x) + (-127.0);
    precise float _162 = float(NORMAL.y) + (-127.0);
    precise float _163 = float(NORMAL.z) + (-127.0);
    precise float _164 = _160 * 0.0078740157186985015869140625;
    precise float _166 = _162 * 0.0078740157186985015869140625;
    precise float _167 = _163 * 0.0078740157186985015869140625;
    uint _172 = _75 * 13u;
    uvec4 _178 = floatBitsToUint(cbInstanceData._m0[_172 + 7u]);
    uint _181 = min(_178.y, 8u);
    precise float _185 = POSITION.x + 0.0;
    precise float _186 = POSITION.y + 0.0;
    precise float _187 = POSITION.z + 0.0;
    uint _192 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _75;
    uvec4 _194 = texelFetch(g_InstanceIndexBuffer, int(_192));
    uint _195 = _194.x;
    uint _204 = (floatBitsToUint(cbInstanceData._m0[(_195 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _211 = _204 + 1u;
    uint _218 = _204 + 2u;
    float _228 = inversesqrt(dot(vec3(cbObjMatrix._m0[_204].x, cbObjMatrix._m0[_211].x, cbObjMatrix._m0[_218].x), vec3(cbObjMatrix._m0[_204].x, cbObjMatrix._m0[_211].x, cbObjMatrix._m0[_218].x)));
    precise float _229 = cbObjMatrix._m0[_204].x * _228;
    precise float _230 = cbObjMatrix._m0[_211].x * _228;
    precise float _231 = cbObjMatrix._m0[_218].x * _228;
    float _235 = inversesqrt(dot(vec3(cbObjMatrix._m0[_204].y, cbObjMatrix._m0[_211].y, cbObjMatrix._m0[_218].y), vec3(cbObjMatrix._m0[_204].y, cbObjMatrix._m0[_211].y, cbObjMatrix._m0[_218].y)));
    precise float _236 = cbObjMatrix._m0[_204].y * _235;
    precise float _237 = cbObjMatrix._m0[_211].y * _235;
    precise float _238 = cbObjMatrix._m0[_218].y * _235;
    float _242 = inversesqrt(dot(vec3(cbObjMatrix._m0[_204].z, cbObjMatrix._m0[_211].z, cbObjMatrix._m0[_218].z), vec3(cbObjMatrix._m0[_204].z, cbObjMatrix._m0[_211].z, cbObjMatrix._m0[_218].z)));
    precise float _243 = cbObjMatrix._m0[_204].z * _242;
    precise float _244 = cbObjMatrix._m0[_211].z * _242;
    precise float _245 = cbObjMatrix._m0[_218].z * _242;
    precise float _262 = _229 * cbSceneParam._m0[5u].x;
    precise float _263 = _230 * cbSceneParam._m0[5u].y;
    precise float _264 = _263 + _262;
    precise float _265 = _231 * cbSceneParam._m0[5u].z;
    precise float _266 = _265 + _264;
    precise float _267 = _229 * cbSceneParam._m0[6u].x;
    precise float _268 = _230 * cbSceneParam._m0[6u].y;
    precise float _269 = _268 + _267;
    precise float _270 = _231 * cbSceneParam._m0[6u].z;
    precise float _271 = _270 + _269;
    precise float _272 = _229 * cbSceneParam._m0[7u].x;
    precise float _273 = _230 * cbSceneParam._m0[7u].y;
    precise float _274 = _273 + _272;
    precise float _275 = _231 * cbSceneParam._m0[7u].z;
    precise float _276 = _275 + _274;
    precise float _277 = _236 * cbSceneParam._m0[5u].x;
    precise float _278 = _237 * cbSceneParam._m0[5u].y;
    precise float _279 = _278 + _277;
    precise float _280 = _238 * cbSceneParam._m0[5u].z;
    precise float _281 = _280 + _279;
    precise float _282 = _236 * cbSceneParam._m0[6u].x;
    precise float _283 = _237 * cbSceneParam._m0[6u].y;
    precise float _284 = _283 + _282;
    precise float _285 = _238 * cbSceneParam._m0[6u].z;
    precise float _286 = _285 + _284;
    precise float _287 = _236 * cbSceneParam._m0[7u].x;
    precise float _288 = _237 * cbSceneParam._m0[7u].y;
    precise float _289 = _288 + _287;
    precise float _290 = _238 * cbSceneParam._m0[7u].z;
    precise float _291 = _290 + _289;
    precise float _292 = _243 * cbSceneParam._m0[5u].x;
    precise float _293 = _244 * cbSceneParam._m0[5u].y;
    precise float _294 = _293 + _292;
    precise float _295 = _245 * cbSceneParam._m0[5u].z;
    precise float _296 = _295 + _294;
    precise float _297 = _243 * cbSceneParam._m0[6u].x;
    precise float _298 = _244 * cbSceneParam._m0[6u].y;
    precise float _299 = _298 + _297;
    precise float _300 = _245 * cbSceneParam._m0[6u].z;
    precise float _301 = _300 + _299;
    precise float _302 = _243 * cbSceneParam._m0[7u].x;
    precise float _303 = _244 * cbSceneParam._m0[7u].y;
    precise float _304 = _303 + _302;
    precise float _305 = _245 * cbSceneParam._m0[7u].z;
    precise float _306 = _305 + _304;
    precise float _307 = _166 * 0.0;
    precise float _308 = _307 - _167;
    precise float _309 = _167 * 0.0;
    precise float _310 = _164 * 0.0;
    precise float _311 = _309 - _310;
    precise float _312 = _164 - _307;
    precise float _313 = _167 * _311;
    precise float _314 = _166 * _312;
    precise float _315 = _313 - _314;
    precise float _316 = _164 * _312;
    precise float _317 = _167 * _308;
    precise float _318 = _316 - _317;
    precise float _319 = _166 * _308;
    precise float _320 = _164 * _311;
    precise float _321 = _319 - _320;
    float _325 = inversesqrt(dot(vec3(_308, _311, _312), vec3(_308, _311, _312)));
    precise float _326 = _308 * _325;
    precise float _327 = _311 * _325;
    precise float _328 = _312 * _325;
    float _332 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    precise float _333 = _315 * _332;
    precise float _334 = _318 * _332;
    precise float _335 = _321 * _332;
    precise float _336 = (-0.0) - _164;
    precise float _338 = (-0.0) - _166;
    precise float _339 = (-0.0) - _167;
    float _343 = inversesqrt(dot(vec3(_336, _338, _339), vec3(_336, _338, _339)));
    precise float _344 = _343 * _336;
    precise float _345 = _343 * _338;
    precise float _346 = _343 * _339;
    precise float _347 = _185 - TEXCOORD_1.x;
    precise float _348 = _186 - TEXCOORD_1.y;
    precise float _349 = _187 - TEXCOORD_1.z;
    precise float _350 = _347 * _326;
    precise float _351 = _348 * _327;
    precise float _352 = _351 + _350;
    precise float _353 = _349 * _328;
    precise float _354 = _353 + _352;
    precise float _355 = _347 * _333;
    precise float _356 = _348 * _334;
    precise float _357 = _356 + _355;
    precise float _358 = _349 * _335;
    precise float _359 = _358 + _357;
    precise float _360 = _347 * _344;
    precise float _361 = _348 * _345;
    precise float _362 = _361 + _360;
    precise float _363 = _349 * _346;
    precise float _364 = _363 + _362;
    precise float _365 = _266 * _354;
    precise float _366 = _271 * _359;
    precise float _367 = _366 + _365;
    precise float _368 = _276 * _364;
    precise float _369 = _368 + _367;
    precise float _370 = _281 * _354;
    precise float _371 = _286 * _359;
    precise float _372 = _371 + _370;
    precise float _373 = _291 * _364;
    precise float _374 = _373 + _372;
    precise float _375 = _296 * _354;
    precise float _376 = _301 * _359;
    precise float _377 = _376 + _375;
    precise float _378 = _306 * _364;
    precise float _379 = _378 + _377;
    precise float _380 = TEXCOORD_1.x + _369;
    precise float _381 = TEXCOORD_1.y + _374;
    precise float _382 = TEXCOORD_1.z + _379;
    precise float _383 = cbObjMatrix._m0[_204].x * _380;
    precise float _384 = _381 * cbObjMatrix._m0[_204].y;
    precise float _385 = _384 + _383;
    precise float _386 = _382 * cbObjMatrix._m0[_204].z;
    precise float _387 = _386 + _385;
    precise float _388 = 1.0 * cbObjMatrix._m0[_204].w;
    precise float _390 = _388 + _387;
    precise float _391 = cbObjMatrix._m0[_211].x * _380;
    precise float _392 = _381 * cbObjMatrix._m0[_211].y;
    precise float _393 = _392 + _391;
    precise float _394 = _382 * cbObjMatrix._m0[_211].z;
    precise float _395 = _394 + _393;
    precise float _396 = 1.0 * cbObjMatrix._m0[_211].w;
    precise float _397 = _396 + _395;
    precise float _398 = cbObjMatrix._m0[_218].x * _380;
    precise float _399 = _381 * cbObjMatrix._m0[_218].y;
    precise float _400 = _399 + _398;
    precise float _401 = _382 * cbObjMatrix._m0[_218].z;
    precise float _402 = _401 + _400;
    precise float _403 = 1.0 * cbObjMatrix._m0[_218].w;
    precise float _404 = _403 + _402;
    float _430 = (((-0.0) - cbObjMatrix._m0[_204].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_204].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_204].y, cbObjMatrix._m0[_204].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _231, fma(cbSceneParam._m0[3u].y, _230, cbSceneParam._m0[3u].x * _229));
    float _433 = (((-0.0) - cbObjMatrix._m0[_211].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_211].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_211].y, cbObjMatrix._m0[_211].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _238, fma(cbSceneParam._m0[3u].y, _237, cbSceneParam._m0[3u].x * _236));
    float _436 = (((-0.0) - cbObjMatrix._m0[_218].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_218].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_218].y, cbObjMatrix._m0[_218].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _245, fma(cbSceneParam._m0[3u].y, _244, cbSceneParam._m0[3u].x * _243));
    float _440 = inversesqrt(dot(vec3(_430, _433, _436), vec3(_430, _433, _436)));
    float _441 = _440 * _430;
    float _442 = _440 * _433;
    float _443 = _440 * _436;
    float _446 = fma(_443, _328, fma(_442, _327, _441 * _326));
    float _449 = fma(_443, _335, fma(_442, _334, _441 * _333));
    float _452 = fma(_443, _346, fma(_442, _345, _441 * _344));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _475 = float(int(uint(_457 > 0.0) - uint(_457 < 0.0)));
    float _477 = float(int(uint(_459 > 0.0) - uint(_459 < 0.0)));
    float _478 = dot(vec3(_457, _458, _459), vec3(_475, float(int(uint(_458 > 0.0) - uint(_458 < 0.0))), _477));
    float _481 = _457 / _478;
    float _483 = _459 / _478;
    float _491;
    float _492;
    if ((_458 / _478) < 0.0)
    {
        _491 = _475 - (abs(_483) * _475);
        _492 = _477 - (abs(_481) * _477);
    }
    else
    {
        _491 = _481;
        _492 = _483;
    }
    float _496 = (_491 * 0.5) + 0.5;
    float _497 = (_492 * 0.5) + 0.5;
    float _1100 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _1111 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _503 = fma(_167, _328, fma(_166, _327, _326 * _164));
    float _506 = fma(_167, _335, fma(_166, _334, _333 * _164));
    float _509 = fma(_167, _346, fma(_166, _345, _344 * _164));
    float _512 = fma(_276, _509, fma(_271, _506, _503 * _266));
    float _515 = fma(_291, _509, fma(_286, _506, _503 * _281));
    float _518 = fma(_306, _509, fma(_301, _506, _503 * _296));
    float _521 = fma(_518, cbObjMatrix._m0[_204].z, fma(_515, cbObjMatrix._m0[_204].y, _512 * cbObjMatrix._m0[_204].x));
    float _524 = fma(_518, cbObjMatrix._m0[_211].z, fma(_515, cbObjMatrix._m0[_211].y, _512 * cbObjMatrix._m0[_211].x));
    float _527 = fma(_518, cbObjMatrix._m0[_218].z, fma(_515, cbObjMatrix._m0[_218].y, _512 * cbObjMatrix._m0[_218].x));
    float _529 = (-0.0) - _527;
    precise float _541 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _549 = _172 + 1u;
    uint _556 = _172 + 2u;
    precise float _563 = TEXCOORD_1.x * cbInstanceData._m0[_172].x;
    precise float _564 = TEXCOORD_1.y * cbInstanceData._m0[_172].y;
    precise float _565 = _564 + _563;
    precise float _566 = TEXCOORD_1.z * cbInstanceData._m0[_172].z;
    precise float _567 = _566 + _565;
    precise float _568 = 1.0 * cbInstanceData._m0[_172].w;
    precise float _569 = _568 + _567;
    precise float _570 = TEXCOORD_1.x * cbInstanceData._m0[_549].x;
    precise float _571 = TEXCOORD_1.y * cbInstanceData._m0[_549].y;
    precise float _572 = _571 + _570;
    precise float _573 = TEXCOORD_1.z * cbInstanceData._m0[_549].z;
    precise float _574 = _573 + _572;
    precise float _575 = 1.0 * cbInstanceData._m0[_549].w;
    precise float _576 = _575 + _574;
    precise float _577 = TEXCOORD_1.x * cbInstanceData._m0[_556].x;
    precise float _578 = TEXCOORD_1.y * cbInstanceData._m0[_556].y;
    precise float _579 = _578 + _577;
    precise float _580 = TEXCOORD_1.z * cbInstanceData._m0[_556].z;
    precise float _581 = _580 + _579;
    precise float _582 = 1.0 * cbInstanceData._m0[_556].w;
    precise float _583 = _582 + _581;
    precise float _584 = _390 - _569;
    precise float _585 = _397 - _576;
    precise float _586 = _404 - _583;
    precise float _587 = _584 * _584;
    precise float _588 = _585 * _585;
    precise float _589 = _587 + _588;
    precise float _590 = _586 * _586;
    precise float _591 = _589 + _590;
    precise float _593 = cbMtdParam._m0[9u].z * sqrt(_591);
    precise float _594 = _541 + _593;
    precise float _595 = cbPerFrame._m0[22u].x + _594;
    uint _596 = _178.w;
    float _597;
    float _599;
    float _601;
    if (_181 == 0u)
    {
        _597 = 0.0;
        _599 = 0.0;
        _601 = 0.0;
    }
    else
    {
        uint _799 = _178.z;
        precise float _598;
        precise float _600;
        precise float _602;
        float _942;
        float _944;
        float _946;
        float _800 = 0.0;
        float _801 = 0.0;
        float _802 = 0.0;
        uint _803 = _799;
        uint _805 = 0u;
        float _841;
        float _860;
        vec4 _874;
        float _875;
        float _876;
        float _890;
        float _891;
        float _892;
        float _909;
        float _910;
        float _911;
        float _912;
        bool _913;
        bool _914;
        bool _915;
        precise float _916;
        precise float _917;
        precise float _918;
        float _919;
        float _920;
        float _921;
        precise float _922;
        bool _925;
        for (;;)
        {
            uint _807 = _803 & 255u;
            uint _809 = _807 * 24u;
            uvec3 _819 = uvec3(texelFetch(g_forceParam, int(_809)).x, texelFetch(g_forceParam, int(_809 + 1u)).x, texelFetch(g_forceParam, int(_809 + 2u)).x);
            uint _824 = (_807 * 24u) + 4u;
            vec4 _837 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_824)).x, texelFetch(g_forceParam, int(_824 + 1u)).x, texelFetch(g_forceParam, int(_824 + 2u)).x, texelFetch(g_forceParam, int(_824 + 3u)).x));
            _841 = _837.w;
            uint _843 = (_807 * 24u) + 8u;
            vec4 _856 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_843)).x, texelFetch(g_forceParam, int(_843 + 1u)).x, texelFetch(g_forceParam, int(_843 + 2u)).x, texelFetch(g_forceParam, int(_843 + 3u)).x));
            _860 = _856.w;
            uint _863 = (_807 * 24u) + 12u;
            _874 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_863)).x, texelFetch(g_forceParam, int(_863 + 1u)).x, _869, texelFetch(g_forceParam, int(_863 + 3u)).x));
            _875 = _874.x;
            _876 = _874.w;
            uint _879 = (_807 * 24u) + 16u;
            vec3 _889 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_879)).x, texelFetch(g_forceParam, int(_879 + 1u)).x, texelFetch(g_forceParam, int(_879 + 2u)).x));
            _890 = _889.x;
            _891 = _889.y;
            _892 = _889.z;
            uint _895 = (_807 * 24u) + 20u;
            vec4 _908 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_895)).x, texelFetch(g_forceParam, int(_895 + 1u)).x, texelFetch(g_forceParam, int(_895 + 2u)).x, texelFetch(g_forceParam, int(_895 + 3u)).x));
            _909 = _908.x;
            _910 = _908.y;
            _911 = _908.z;
            _912 = _908.w;
            _913 = _819.x == 1u;
            _914 = _819.y == 1u;
            _915 = _819.z == 1u;
            _916 = _569 - _837.x;
            _917 = _576 - _837.y;
            _918 = _583 - _837.z;
            _919 = _913 ? _856.x : _916;
            _920 = _913 ? _856.y : _917;
            _921 = _913 ? _856.z : _918;
            _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
            _925 = _922 > 0.0;
            float frontier_phi_7_pred;
            float frontier_phi_7_pred_1;
            float frontier_phi_7_pred_2;
            if (_925)
            {
                precise float _927 = _916 * _916;
                precise float _928 = _917 * _917;
                precise float _929 = _927 + _928;
                precise float _930 = _918 * _918;
                precise float _931 = _930 + _929;
                float _932 = sqrt(_931);
                float _933 = inversesqrt(_922);
                precise float _934 = _919 * _933;
                precise float _935 = _920 * _933;
                precise float _936 = _921 * _933;
                precise float _939 = _932 / (isnan(0.001000000047497451305389404296875) ? _874.y : (isnan(_874.y) ? 0.001000000047497451305389404296875 : max(_874.y, 0.001000000047497451305389404296875)));
                precise float _940 = 1.0 - _939;
                float _1127 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
                float _941 = isnan(1.0) ? _1127 : (isnan(_1127) ? 1.0 : min(_1127, 1.0));
                float _967;
                if (_915)
                {
                    float _954 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
                    precise float _955 = _916 * _954;
                    precise float _956 = _917 * _954;
                    precise float _957 = _918 * _954;
                    precise float _961 = dot(vec3(_934, _935, _936), vec3(_955, _956, _957)) * 0.800000011920928955078125;
                    precise float _963 = _961 + 0.20000000298023223876953125;
                    float _1138 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
                    precise float _966 = _941 * (isnan(1.0) ? _1138 : (isnan(_1138) ? 1.0 : min(_1138, 1.0)));
                    _967 = _966;
                }
                else
                {
                    _967 = _941;
                }
                float frontier_phi_7_pred_9_ladder;
                float frontier_phi_7_pred_9_ladder_1;
                float frontier_phi_7_pred_9_ladder_2;
                if (_967 > 0.0)
                {
                    bool _970 = _913 && (!_915);
                    precise float _972 = _932 * (-4.0);
                    precise float _976 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _875 : (isnan(_875) ? 0.001000000047497451305389404296875 : max(_875, 0.001000000047497451305389404296875)));
                    precise float _978 = dot(vec2(_934, _936), vec2(_916, _918));
                    precise float _982 = _976 * _978;
                    precise float _983 = float(_970) * _982;
                    precise float _984 = _595 * _976;
                    precise float _985 = _984 - _983;
                    precise float _986 = (_970 ? 0.0 : _972) + _985;
                    precise float _988 = _860 * sin(_986);
                    precise float _989 = _935 * 0.0;
                    precise float _990 = _989 - _936;
                    precise float _991 = _936 * 0.0;
                    precise float _992 = _934 * 0.0;
                    precise float _993 = _991 - _992;
                    precise float _994 = _934 - _989;
                    precise float _995 = _876 * _988;
                    float _996 = _913 ? _995 : 0.0;
                    float _1038;
                    if (_914)
                    {
                        precise float _999 = _890 * 2.0;
                        precise float _1001 = _910 + _911;
                        precise float _1002 = _912 + _1001;
                        precise float _1004 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _890 : (isnan(_890) ? 0.001000000047497451305389404296875 : max(_890, 0.001000000047497451305389404296875)));
                        precise float _1005 = _909 * _1004;
                        precise float _1006 = (-0.0) - _934;
                        precise float _1010 = dot(vec2(_936, _1006), vec2(_916, _918)) / _999;
                        precise float _1011 = (-0.0) - _1010;
                        float _1014 = fract(abs(_1010));
                        precise float _1015 = (-0.0) - _1014;
                        precise float _1017 = _999 * ((_1010 >= _1011) ? _1014 : _1015);
                        precise float _1018 = _1017 * 6.283184051513671875;
                        precise float _1019 = _1018 / _999;
                        precise float _1021 = (isnan(5.0) ? _890 : (isnan(_890) ? 5.0 : min(_890, 5.0))) * sin(_1019);
                        precise float _1022 = _978 + _1021;
                        precise float _1023 = _890 * 0.25;
                        precise float _1025 = _595 * _909;
                        precise float _1026 = _1025 - _1023;
                        precise float _1027 = _1026 - _1022;
                        precise float _1028 = _909 * _1002;
                        precise float _1030 = _1027 / (isnan(0.001000000047497451305389404296875) ? _1028 : (isnan(_1028) ? 0.001000000047497451305389404296875 : max(_1028, 0.001000000047497451305389404296875)));
                        float _1031 = fract(_1030);
                        precise float _1033 = 1.0 - _1031;
                        float _1034 = (_1030 < 0.0) ? _1033 : _1031;
                        precise float _1035 = _1001 / _1002;
                        precise float _1036 = _910 / _1002;
                        float _1057;
                        if (_1034 < _1036)
                        {
                            precise float _1055 = _1034 / _1036;
                            _1057 = _1055;
                        }
                        else
                        {
                            float frontier_phi_16_15_ladder;
                            if (_1034 < _1035)
                            {
                                precise float _1067 = _1034 - _1036;
                                precise float _1068 = _1035 - _1036;
                                precise float _1069 = _1067 / _1068;
                                precise float _1058 = 1.0 - _1069;
                                frontier_phi_16_15_ladder = _1058;
                            }
                            else
                            {
                                frontier_phi_16_15_ladder = 0.0;
                            }
                            _1057 = frontier_phi_16_15_ladder;
                        }
                        precise float _1059 = _892 * _1057;
                        precise float _1060 = _1004 * _978;
                        precise float _1061 = _595 * _1005;
                        precise float _1062 = _1061 - _1060;
                        precise float _1064 = _891 + sin(_1062);
                        precise float _1066 = _1059 * abs(_1064);
                        precise float _1039 = _1066 + 0.0;
                        _1038 = _1039;
                    }
                    else
                    {
                        _1038 = 0.0;
                    }
                    precise float _1040 = _841 + _988;
                    precise float _1041 = _1040 + _1038;
                    precise float _1042 = _934 * _1041;
                    precise float _1043 = _935 * _1041;
                    precise float _1044 = _936 * _1041;
                    precise float _1045 = _990 * _996;
                    precise float _1046 = _993 * _996;
                    precise float _1047 = _994 * _996;
                    precise float _1048 = _1045 + _1042;
                    precise float _1049 = _1046 + _1043;
                    precise float _1050 = _1047 + _1044;
                    precise float _1051 = _967 * _1048;
                    precise float _1052 = _967 * _1049;
                    precise float _1053 = _967 * _1050;
                    precise float _943 = _1051 * 0.0500000007450580596923828125;
                    precise float _945 = _1052 * 0.0500000007450580596923828125;
                    precise float _947 = _1053 * 0.0500000007450580596923828125;
                    frontier_phi_7_pred_9_ladder = _943;
                    frontier_phi_7_pred_9_ladder_1 = _945;
                    frontier_phi_7_pred_9_ladder_2 = _947;
                }
                else
                {
                    frontier_phi_7_pred_9_ladder = 0.0;
                    frontier_phi_7_pred_9_ladder_1 = 0.0;
                    frontier_phi_7_pred_9_ladder_2 = 0.0;
                }
                frontier_phi_7_pred = frontier_phi_7_pred_9_ladder;
                frontier_phi_7_pred_1 = frontier_phi_7_pred_9_ladder_1;
                frontier_phi_7_pred_2 = frontier_phi_7_pred_9_ladder_2;
            }
            else
            {
                frontier_phi_7_pred = 0.0;
                frontier_phi_7_pred_1 = 0.0;
                frontier_phi_7_pred_2 = 0.0;
            }
            _942 = frontier_phi_7_pred;
            _944 = frontier_phi_7_pred_1;
            _946 = frontier_phi_7_pred_2;
            _598 = _800 + _942;
            _600 = _801 + _944;
            _602 = _802 + _946;
            uint _806 = _805 + 1u;
            if (_806 == _181)
            {
                break;
            }
            else
            {
                _800 = _598;
                _801 = _600;
                _802 = _602;
                _803 = (_805 != 3u) ? (_803 >> 8u) : _596;
                _805 = _806;
                continue;
            }
        }
        _597 = _598;
        _599 = _600;
        _601 = _602;
    }
    precise float _603 = _597 * _597;
    precise float _604 = _599 * _599;
    precise float _605 = _603 + _604;
    precise float _606 = _601 * _601;
    precise float _607 = _605 + _606;
    float _608 = sqrt(_607);
    bool _609 = _608 < 0.00011000000085914507508277893066406;
    float _614 = inversesqrt(dot(vec3(cbInstanceData._m0[_172].x, cbInstanceData._m0[_549].x, cbInstanceData._m0[_556].x), vec3(cbInstanceData._m0[_172].x, cbInstanceData._m0[_549].x, cbInstanceData._m0[_556].x)));
    precise float _615 = cbInstanceData._m0[_172].x * _614;
    precise float _616 = cbInstanceData._m0[_549].x * _614;
    precise float _617 = cbInstanceData._m0[_556].x * _614;
    float _621 = inversesqrt(dot(vec3(cbInstanceData._m0[_172].y, cbInstanceData._m0[_549].y, cbInstanceData._m0[_556].y), vec3(cbInstanceData._m0[_172].y, cbInstanceData._m0[_549].y, cbInstanceData._m0[_556].y)));
    precise float _622 = cbInstanceData._m0[_172].y * _621;
    precise float _623 = cbInstanceData._m0[_549].y * _621;
    precise float _624 = cbInstanceData._m0[_556].y * _621;
    float _628 = inversesqrt(dot(vec3(cbInstanceData._m0[_172].z, cbInstanceData._m0[_549].z, cbInstanceData._m0[_556].z), vec3(cbInstanceData._m0[_172].z, cbInstanceData._m0[_549].z, cbInstanceData._m0[_556].z)));
    precise float _629 = cbInstanceData._m0[_172].z * _628;
    precise float _630 = cbInstanceData._m0[_549].z * _628;
    precise float _631 = cbInstanceData._m0[_556].z * _628;
    precise float _632 = _615 * 0.0;
    precise float _633 = 1.0 * _622;
    precise float _634 = _633 + _632;
    precise float _635 = 0.0 * _629;
    precise float _636 = _635 + _634;
    precise float _637 = _616 * 0.0;
    precise float _638 = 1.0 * _623;
    precise float _639 = _638 + _637;
    precise float _640 = 0.0 * _630;
    precise float _641 = _640 + _639;
    precise float _642 = _617 * 0.0;
    precise float _643 = 1.0 * _624;
    precise float _644 = _643 + _642;
    precise float _645 = 0.0 * _631;
    precise float _646 = _645 + _644;
    float _650 = inversesqrt(dot(vec3(_597, _599, _601), vec3(_597, _599, _601)));
    precise float _651 = _597 * _650;
    precise float _652 = _599 * _650;
    precise float _653 = _601 * _650;
    precise float _654 = _641 * _653;
    precise float _655 = _646 * _652;
    precise float _656 = _654 - _655;
    precise float _657 = _646 * _651;
    precise float _658 = _636 * _653;
    precise float _659 = _657 - _658;
    precise float _660 = _636 * _652;
    precise float _661 = _641 * _651;
    precise float _662 = _660 - _661;
    float _666 = inversesqrt(dot(vec3(_656, _659, _662), vec3(_656, _659, _662)));
    precise float _667 = _666 * _656;
    precise float _668 = _666 * _659;
    precise float _669 = _666 * _662;
    precise float _670 = _608 + 1.0;
    precise float _672 = cbMtdParam._m0[9u].w * log2(_670);
    precise float _673 = dot(vec3(_667, _668, _669), vec3(_584, _585, _586));
    precise float _676 = _667 * _673;
    precise float _677 = _668 * _673;
    precise float _678 = _669 * _673;
    precise float _679 = _569 + _676;
    precise float _680 = _576 + _677;
    precise float _681 = _583 + _678;
    precise float _682 = _390 - _679;
    precise float _683 = _397 - _680;
    precise float _684 = _404 - _681;
    precise float _685 = _668 * _684;
    precise float _686 = _669 * _683;
    precise float _687 = _685 - _686;
    precise float _688 = _669 * _682;
    precise float _689 = _667 * _684;
    precise float _690 = _688 - _689;
    precise float _691 = _667 * _683;
    precise float _692 = _668 * _682;
    precise float _693 = _691 - _692;
    float _694 = sin(_672);
    float _695 = cos(_672);
    precise float _696 = _682 * _695;
    precise float _697 = _683 * _695;
    precise float _698 = _684 * _695;
    precise float _699 = _694 * _687;
    precise float _700 = _694 * _690;
    precise float _701 = _694 * _693;
    precise float _702 = _696 + _699;
    precise float _703 = _697 + _700;
    precise float _704 = _701 + _698;
    precise float _705 = _679 + _702;
    precise float _706 = _680 + _703;
    precise float _707 = _681 + _704;
    precise float _708 = _705 - _390;
    precise float _709 = _706 - _397;
    precise float _710 = _707 - _404;
    precise float _714 = _390 + (_609 ? 0.0 : _708);
    precise float _715 = _397 + (_609 ? 0.0 : _709);
    precise float _716 = _404 + (_609 ? 0.0 : _710);
    precise float _717 = _714 - cbSceneParam._m0[3u].x;
    precise float _718 = _715 - cbSceneParam._m0[3u].y;
    precise float _719 = _716 - cbSceneParam._m0[3u].z;
    precise float _747 = cbSceneParam._m0[24u].x * _717;
    precise float _748 = _718 * cbSceneParam._m0[24u].y;
    precise float _749 = _748 + _747;
    precise float _750 = _719 * cbSceneParam._m0[24u].z;
    precise float _751 = _750 + _749;
    precise float _752 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _753 = _752 + _751;
    precise float _754 = cbSceneParam._m0[25u].x * _717;
    precise float _755 = _718 * cbSceneParam._m0[25u].y;
    precise float _756 = _755 + _754;
    precise float _757 = _719 * cbSceneParam._m0[25u].z;
    precise float _758 = _757 + _756;
    precise float _759 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _760 = _759 + _758;
    precise float _761 = cbSceneParam._m0[26u].x * _717;
    precise float _762 = _718 * cbSceneParam._m0[26u].y;
    precise float _763 = _762 + _761;
    precise float _764 = _719 * cbSceneParam._m0[26u].z;
    precise float _765 = _764 + _763;
    precise float _766 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _767 = _766 + _765;
    precise float _768 = _717 * cbSceneParam._m0[27u].x;
    precise float _769 = _718 * cbSceneParam._m0[27u].y;
    precise float _770 = _769 + _768;
    precise float _771 = _719 * cbSceneParam._m0[27u].z;
    precise float _772 = _771 + _770;
    precise float _773 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _774 = _773 + _772;
    gl_Position.x = _753;
    gl_Position.y = _760;
    gl_Position.z = _767;
    gl_Position.w = _774;
    POSITION_1.x = _753;
    POSITION_1.y = _760;
    POSITION_1.z = _767;
    POSITION_1.w = _774;
    NORMAL_1.x = _521;
    NORMAL_1.y = _524;
    NORMAL_1.z = _527;
    NORMAL_1.w = float(_195);
    TANGENT_1.x = (-0.0) - (_521 * _524);
    TANGENT_1.y = (_521 * _521) - (_527 * _529);
    TANGENT_1.z = _524 * _529;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = isnan(1.0) ? _1100 : (isnan(_1100) ? 1.0 : min(_1100, 1.0));
    TEXCOORD_2.w = 1.0 - (isnan(1.0) ? _1111 : (isnan(_1111) ? 1.0 : min(_1111, 1.0)));
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
}


