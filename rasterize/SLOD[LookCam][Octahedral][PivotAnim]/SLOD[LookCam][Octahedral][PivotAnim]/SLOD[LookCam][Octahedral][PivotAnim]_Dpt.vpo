#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;

uint _697;

void main()
{
    uint _69 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    precise float _109 = float(NORMAL.x) + (-127.0);
    precise float _111 = float(NORMAL.y) + (-127.0);
    precise float _112 = float(NORMAL.z) + (-127.0);
    precise float _113 = _109 * 0.0078740157186985015869140625;
    precise float _115 = _111 * 0.0078740157186985015869140625;
    precise float _116 = _112 * 0.0078740157186985015869140625;
    uint _118 = _69 * 13u;
    uvec4 _124 = floatBitsToUint(cbInstanceData._m0[_118 + 7u]);
    uint _127 = min(_124.y, 8u);
    precise float _131 = POSITION.x + 0.0;
    precise float _132 = POSITION.y + 0.0;
    precise float _133 = POSITION.z + 0.0;
    uint _138 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _69;
    uint _143 = texelFetch(g_InstanceIndexBuffer, int(_138)).x * 13u;
    uint _151 = (floatBitsToUint(cbInstanceData._m0[_143 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _158 = _151 + 1u;
    uint _165 = _151 + 2u;
    float _175 = inversesqrt(dot(vec3(cbObjMatrix._m0[_151].x, cbObjMatrix._m0[_158].x, cbObjMatrix._m0[_165].x), vec3(cbObjMatrix._m0[_151].x, cbObjMatrix._m0[_158].x, cbObjMatrix._m0[_165].x)));
    precise float _176 = cbObjMatrix._m0[_151].x * _175;
    precise float _177 = cbObjMatrix._m0[_158].x * _175;
    precise float _178 = cbObjMatrix._m0[_165].x * _175;
    float _182 = inversesqrt(dot(vec3(cbObjMatrix._m0[_151].y, cbObjMatrix._m0[_158].y, cbObjMatrix._m0[_165].y), vec3(cbObjMatrix._m0[_151].y, cbObjMatrix._m0[_158].y, cbObjMatrix._m0[_165].y)));
    precise float _183 = cbObjMatrix._m0[_151].y * _182;
    precise float _184 = cbObjMatrix._m0[_158].y * _182;
    precise float _185 = cbObjMatrix._m0[_165].y * _182;
    float _189 = inversesqrt(dot(vec3(cbObjMatrix._m0[_151].z, cbObjMatrix._m0[_158].z, cbObjMatrix._m0[_165].z), vec3(cbObjMatrix._m0[_151].z, cbObjMatrix._m0[_158].z, cbObjMatrix._m0[_165].z)));
    precise float _190 = cbObjMatrix._m0[_151].z * _189;
    precise float _191 = cbObjMatrix._m0[_158].z * _189;
    precise float _192 = cbObjMatrix._m0[_165].z * _189;
    precise float _209 = _176 * cbSceneParam._m0[5u].x;
    precise float _210 = _177 * cbSceneParam._m0[5u].y;
    precise float _211 = _210 + _209;
    precise float _212 = _178 * cbSceneParam._m0[5u].z;
    precise float _213 = _212 + _211;
    precise float _214 = _176 * cbSceneParam._m0[6u].x;
    precise float _215 = _177 * cbSceneParam._m0[6u].y;
    precise float _216 = _215 + _214;
    precise float _217 = _178 * cbSceneParam._m0[6u].z;
    precise float _218 = _217 + _216;
    precise float _219 = _176 * cbSceneParam._m0[7u].x;
    precise float _220 = _177 * cbSceneParam._m0[7u].y;
    precise float _221 = _220 + _219;
    precise float _222 = _178 * cbSceneParam._m0[7u].z;
    precise float _223 = _222 + _221;
    precise float _224 = _183 * cbSceneParam._m0[5u].x;
    precise float _225 = _184 * cbSceneParam._m0[5u].y;
    precise float _226 = _225 + _224;
    precise float _227 = _185 * cbSceneParam._m0[5u].z;
    precise float _228 = _227 + _226;
    precise float _229 = _183 * cbSceneParam._m0[6u].x;
    precise float _230 = _184 * cbSceneParam._m0[6u].y;
    precise float _231 = _230 + _229;
    precise float _232 = _185 * cbSceneParam._m0[6u].z;
    precise float _233 = _232 + _231;
    precise float _234 = _183 * cbSceneParam._m0[7u].x;
    precise float _235 = _184 * cbSceneParam._m0[7u].y;
    precise float _236 = _235 + _234;
    precise float _237 = _185 * cbSceneParam._m0[7u].z;
    precise float _238 = _237 + _236;
    precise float _239 = _190 * cbSceneParam._m0[5u].x;
    precise float _240 = _191 * cbSceneParam._m0[5u].y;
    precise float _241 = _240 + _239;
    precise float _242 = _192 * cbSceneParam._m0[5u].z;
    precise float _243 = _242 + _241;
    precise float _244 = _190 * cbSceneParam._m0[6u].x;
    precise float _245 = _191 * cbSceneParam._m0[6u].y;
    precise float _246 = _245 + _244;
    precise float _247 = _192 * cbSceneParam._m0[6u].z;
    precise float _248 = _247 + _246;
    precise float _249 = _190 * cbSceneParam._m0[7u].x;
    precise float _250 = _191 * cbSceneParam._m0[7u].y;
    precise float _251 = _250 + _249;
    precise float _252 = _192 * cbSceneParam._m0[7u].z;
    precise float _253 = _252 + _251;
    precise float _254 = _115 * 0.0;
    precise float _255 = _254 - _116;
    precise float _256 = _116 * 0.0;
    precise float _257 = _113 * 0.0;
    precise float _258 = _256 - _257;
    precise float _259 = _113 - _254;
    precise float _260 = _116 * _258;
    precise float _261 = _115 * _259;
    precise float _262 = _260 - _261;
    precise float _263 = _113 * _259;
    precise float _264 = _116 * _255;
    precise float _265 = _263 - _264;
    precise float _266 = _115 * _255;
    precise float _267 = _113 * _258;
    precise float _268 = _266 - _267;
    float _272 = inversesqrt(dot(vec3(_255, _258, _259), vec3(_255, _258, _259)));
    precise float _273 = _255 * _272;
    precise float _274 = _258 * _272;
    precise float _275 = _259 * _272;
    float _279 = inversesqrt(dot(vec3(_262, _265, _268), vec3(_262, _265, _268)));
    precise float _280 = _262 * _279;
    precise float _281 = _265 * _279;
    precise float _282 = _268 * _279;
    precise float _283 = (-0.0) - _113;
    precise float _285 = (-0.0) - _115;
    precise float _286 = (-0.0) - _116;
    float _290 = inversesqrt(dot(vec3(_283, _285, _286), vec3(_283, _285, _286)));
    precise float _291 = _290 * _283;
    precise float _292 = _290 * _285;
    precise float _293 = _290 * _286;
    precise float _294 = _131 - TEXCOORD_1.x;
    precise float _295 = _132 - TEXCOORD_1.y;
    precise float _296 = _133 - TEXCOORD_1.z;
    precise float _297 = _294 * _273;
    precise float _298 = _295 * _274;
    precise float _299 = _298 + _297;
    precise float _300 = _296 * _275;
    precise float _301 = _300 + _299;
    precise float _302 = _294 * _280;
    precise float _303 = _295 * _281;
    precise float _304 = _303 + _302;
    precise float _305 = _296 * _282;
    precise float _306 = _305 + _304;
    precise float _307 = _294 * _291;
    precise float _308 = _295 * _292;
    precise float _309 = _308 + _307;
    precise float _310 = _296 * _293;
    precise float _311 = _310 + _309;
    precise float _312 = _213 * _301;
    precise float _313 = _218 * _306;
    precise float _314 = _313 + _312;
    precise float _315 = _223 * _311;
    precise float _316 = _315 + _314;
    precise float _317 = _228 * _301;
    precise float _318 = _233 * _306;
    precise float _319 = _318 + _317;
    precise float _320 = _238 * _311;
    precise float _321 = _320 + _319;
    precise float _322 = _243 * _301;
    precise float _323 = _248 * _306;
    precise float _324 = _323 + _322;
    precise float _325 = _253 * _311;
    precise float _326 = _325 + _324;
    precise float _327 = TEXCOORD_1.x + _316;
    precise float _328 = TEXCOORD_1.y + _321;
    precise float _329 = TEXCOORD_1.z + _326;
    precise float _330 = cbObjMatrix._m0[_151].x * _327;
    precise float _331 = _328 * cbObjMatrix._m0[_151].y;
    precise float _332 = _331 + _330;
    precise float _333 = _329 * cbObjMatrix._m0[_151].z;
    precise float _334 = _333 + _332;
    precise float _335 = 1.0 * cbObjMatrix._m0[_151].w;
    precise float _337 = _335 + _334;
    precise float _338 = cbObjMatrix._m0[_158].x * _327;
    precise float _339 = _328 * cbObjMatrix._m0[_158].y;
    precise float _340 = _339 + _338;
    precise float _341 = _329 * cbObjMatrix._m0[_158].z;
    precise float _342 = _341 + _340;
    precise float _343 = 1.0 * cbObjMatrix._m0[_158].w;
    precise float _344 = _343 + _342;
    precise float _345 = cbObjMatrix._m0[_165].x * _327;
    precise float _346 = _328 * cbObjMatrix._m0[_165].y;
    precise float _347 = _346 + _345;
    precise float _348 = _329 * cbObjMatrix._m0[_165].z;
    precise float _349 = _348 + _347;
    precise float _350 = 1.0 * cbObjMatrix._m0[_165].w;
    precise float _351 = _350 + _349;
    precise float _357 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _365 = _118 + 1u;
    uint _372 = _118 + 2u;
    precise float _379 = TEXCOORD_1.x * cbInstanceData._m0[_118].x;
    precise float _380 = TEXCOORD_1.y * cbInstanceData._m0[_118].y;
    precise float _381 = _380 + _379;
    precise float _382 = TEXCOORD_1.z * cbInstanceData._m0[_118].z;
    precise float _383 = _382 + _381;
    precise float _384 = 1.0 * cbInstanceData._m0[_118].w;
    precise float _385 = _384 + _383;
    precise float _386 = TEXCOORD_1.x * cbInstanceData._m0[_365].x;
    precise float _387 = TEXCOORD_1.y * cbInstanceData._m0[_365].y;
    precise float _388 = _387 + _386;
    precise float _389 = TEXCOORD_1.z * cbInstanceData._m0[_365].z;
    precise float _390 = _389 + _388;
    precise float _391 = 1.0 * cbInstanceData._m0[_365].w;
    precise float _392 = _391 + _390;
    precise float _393 = TEXCOORD_1.x * cbInstanceData._m0[_372].x;
    precise float _394 = TEXCOORD_1.y * cbInstanceData._m0[_372].y;
    precise float _395 = _394 + _393;
    precise float _396 = TEXCOORD_1.z * cbInstanceData._m0[_372].z;
    precise float _397 = _396 + _395;
    precise float _398 = 1.0 * cbInstanceData._m0[_372].w;
    precise float _399 = _398 + _397;
    precise float _400 = _337 - _385;
    precise float _401 = _344 - _392;
    precise float _402 = _351 - _399;
    precise float _403 = _400 * _400;
    precise float _404 = _401 * _401;
    precise float _405 = _403 + _404;
    precise float _406 = _402 * _402;
    precise float _407 = _405 + _406;
    precise float _409 = cbMtdParam._m0[9u].z * sqrt(_407);
    precise float _410 = _357 + _409;
    precise float _411 = cbPerFrame._m0[22u].x + _410;
    uint _412 = _124.w;
    float _413;
    float _415;
    float _417;
    if (_127 == 0u)
    {
        _413 = 0.0;
        _415 = 0.0;
        _417 = 0.0;
    }
    else
    {
        uint _627 = _124.z;
        precise float _414;
        precise float _416;
        precise float _418;
        float _770;
        float _772;
        float _774;
        float _628 = 0.0;
        float _629 = 0.0;
        float _630 = 0.0;
        uint _631 = _627;
        uint _633 = 0u;
        float _669;
        float _688;
        vec4 _702;
        float _703;
        float _704;
        float _718;
        float _719;
        float _720;
        float _737;
        float _738;
        float _739;
        float _740;
        bool _741;
        bool _742;
        bool _743;
        precise float _744;
        precise float _745;
        precise float _746;
        float _747;
        float _748;
        float _749;
        precise float _750;
        bool _753;
        for (;;)
        {
            uint _635 = _631 & 255u;
            uint _637 = _635 * 24u;
            uvec3 _647 = uvec3(texelFetch(g_forceParam, int(_637)).x, texelFetch(g_forceParam, int(_637 + 1u)).x, texelFetch(g_forceParam, int(_637 + 2u)).x);
            uint _652 = (_635 * 24u) + 4u;
            vec4 _665 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_652)).x, texelFetch(g_forceParam, int(_652 + 1u)).x, texelFetch(g_forceParam, int(_652 + 2u)).x, texelFetch(g_forceParam, int(_652 + 3u)).x));
            _669 = _665.w;
            uint _671 = (_635 * 24u) + 8u;
            vec4 _684 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_671)).x, texelFetch(g_forceParam, int(_671 + 1u)).x, texelFetch(g_forceParam, int(_671 + 2u)).x, texelFetch(g_forceParam, int(_671 + 3u)).x));
            _688 = _684.w;
            uint _691 = (_635 * 24u) + 12u;
            _702 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_691)).x, texelFetch(g_forceParam, int(_691 + 1u)).x, _697, texelFetch(g_forceParam, int(_691 + 3u)).x));
            _703 = _702.x;
            _704 = _702.w;
            uint _707 = (_635 * 24u) + 16u;
            vec3 _717 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_707)).x, texelFetch(g_forceParam, int(_707 + 1u)).x, texelFetch(g_forceParam, int(_707 + 2u)).x));
            _718 = _717.x;
            _719 = _717.y;
            _720 = _717.z;
            uint _723 = (_635 * 24u) + 20u;
            vec4 _736 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_723)).x, texelFetch(g_forceParam, int(_723 + 1u)).x, texelFetch(g_forceParam, int(_723 + 2u)).x, texelFetch(g_forceParam, int(_723 + 3u)).x));
            _737 = _736.x;
            _738 = _736.y;
            _739 = _736.z;
            _740 = _736.w;
            _741 = _647.x == 1u;
            _742 = _647.y == 1u;
            _743 = _647.z == 1u;
            _744 = _385 - _665.x;
            _745 = _392 - _665.y;
            _746 = _399 - _665.z;
            _747 = _741 ? _684.x : _744;
            _748 = _741 ? _684.y : _745;
            _749 = _741 ? _684.z : _746;
            _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
            _753 = _750 > 0.0;
            float frontier_phi_5_pred;
            float frontier_phi_5_pred_1;
            float frontier_phi_5_pred_2;
            if (_753)
            {
                precise float _755 = _744 * _744;
                precise float _756 = _745 * _745;
                precise float _757 = _755 + _756;
                precise float _758 = _746 * _746;
                precise float _759 = _758 + _757;
                float _760 = sqrt(_759);
                float _761 = inversesqrt(_750);
                precise float _762 = _747 * _761;
                precise float _763 = _748 * _761;
                precise float _764 = _749 * _761;
                precise float _767 = _760 / (isnan(0.001000000047497451305389404296875) ? _702.y : (isnan(_702.y) ? 0.001000000047497451305389404296875 : max(_702.y, 0.001000000047497451305389404296875)));
                precise float _768 = 1.0 - _767;
                float _931 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
                float _769 = isnan(1.0) ? _931 : (isnan(_931) ? 1.0 : min(_931, 1.0));
                float _795;
                if (_743)
                {
                    float _782 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
                    precise float _783 = _744 * _782;
                    precise float _784 = _745 * _782;
                    precise float _785 = _746 * _782;
                    precise float _789 = dot(vec3(_762, _763, _764), vec3(_783, _784, _785)) * 0.800000011920928955078125;
                    precise float _791 = _789 + 0.20000000298023223876953125;
                    float _942 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
                    precise float _794 = _769 * (isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0)));
                    _795 = _794;
                }
                else
                {
                    _795 = _769;
                }
                float frontier_phi_5_pred_7_ladder;
                float frontier_phi_5_pred_7_ladder_1;
                float frontier_phi_5_pred_7_ladder_2;
                if (_795 > 0.0)
                {
                    bool _798 = _741 && (!_743);
                    precise float _800 = _760 * (-4.0);
                    precise float _804 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _703 : (isnan(_703) ? 0.001000000047497451305389404296875 : max(_703, 0.001000000047497451305389404296875)));
                    precise float _806 = dot(vec2(_762, _764), vec2(_744, _746));
                    precise float _810 = _804 * _806;
                    precise float _811 = float(_798) * _810;
                    precise float _812 = _411 * _804;
                    precise float _813 = _812 - _811;
                    precise float _814 = (_798 ? 0.0 : _800) + _813;
                    precise float _816 = _688 * sin(_814);
                    precise float _817 = _763 * 0.0;
                    precise float _818 = _817 - _764;
                    precise float _819 = _764 * 0.0;
                    precise float _820 = _762 * 0.0;
                    precise float _821 = _819 - _820;
                    precise float _822 = _762 - _817;
                    precise float _823 = _704 * _816;
                    float _824 = _741 ? _823 : 0.0;
                    float _866;
                    if (_742)
                    {
                        precise float _827 = _718 * 2.0;
                        precise float _829 = _738 + _739;
                        precise float _830 = _740 + _829;
                        precise float _832 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _718 : (isnan(_718) ? 0.001000000047497451305389404296875 : max(_718, 0.001000000047497451305389404296875)));
                        precise float _833 = _737 * _832;
                        precise float _834 = (-0.0) - _762;
                        precise float _838 = dot(vec2(_764, _834), vec2(_744, _746)) / _827;
                        precise float _839 = (-0.0) - _838;
                        float _842 = fract(abs(_838));
                        precise float _843 = (-0.0) - _842;
                        precise float _845 = _827 * ((_838 >= _839) ? _842 : _843);
                        precise float _846 = _845 * 6.283184051513671875;
                        precise float _847 = _846 / _827;
                        precise float _849 = (isnan(5.0) ? _718 : (isnan(_718) ? 5.0 : min(_718, 5.0))) * sin(_847);
                        precise float _850 = _806 + _849;
                        precise float _851 = _718 * 0.25;
                        precise float _853 = _411 * _737;
                        precise float _854 = _853 - _851;
                        precise float _855 = _854 - _850;
                        precise float _856 = _737 * _830;
                        precise float _858 = _855 / (isnan(0.001000000047497451305389404296875) ? _856 : (isnan(_856) ? 0.001000000047497451305389404296875 : max(_856, 0.001000000047497451305389404296875)));
                        float _859 = fract(_858);
                        precise float _861 = 1.0 - _859;
                        float _862 = (_858 < 0.0) ? _861 : _859;
                        precise float _863 = _829 / _830;
                        precise float _864 = _738 / _830;
                        float _885;
                        if (_862 < _864)
                        {
                            precise float _883 = _862 / _864;
                            _885 = _883;
                        }
                        else
                        {
                            float frontier_phi_14_13_ladder;
                            if (_862 < _863)
                            {
                                precise float _895 = _862 - _864;
                                precise float _896 = _863 - _864;
                                precise float _897 = _895 / _896;
                                precise float _886 = 1.0 - _897;
                                frontier_phi_14_13_ladder = _886;
                            }
                            else
                            {
                                frontier_phi_14_13_ladder = 0.0;
                            }
                            _885 = frontier_phi_14_13_ladder;
                        }
                        precise float _887 = _720 * _885;
                        precise float _888 = _832 * _806;
                        precise float _889 = _411 * _833;
                        precise float _890 = _889 - _888;
                        precise float _892 = _719 + sin(_890);
                        precise float _894 = _887 * abs(_892);
                        precise float _867 = _894 + 0.0;
                        _866 = _867;
                    }
                    else
                    {
                        _866 = 0.0;
                    }
                    precise float _868 = _669 + _816;
                    precise float _869 = _868 + _866;
                    precise float _870 = _762 * _869;
                    precise float _871 = _763 * _869;
                    precise float _872 = _764 * _869;
                    precise float _873 = _818 * _824;
                    precise float _874 = _821 * _824;
                    precise float _875 = _822 * _824;
                    precise float _876 = _873 + _870;
                    precise float _877 = _874 + _871;
                    precise float _878 = _875 + _872;
                    precise float _879 = _795 * _876;
                    precise float _880 = _795 * _877;
                    precise float _881 = _795 * _878;
                    precise float _771 = _879 * 0.0500000007450580596923828125;
                    precise float _773 = _880 * 0.0500000007450580596923828125;
                    precise float _775 = _881 * 0.0500000007450580596923828125;
                    frontier_phi_5_pred_7_ladder = _771;
                    frontier_phi_5_pred_7_ladder_1 = _773;
                    frontier_phi_5_pred_7_ladder_2 = _775;
                }
                else
                {
                    frontier_phi_5_pred_7_ladder = 0.0;
                    frontier_phi_5_pred_7_ladder_1 = 0.0;
                    frontier_phi_5_pred_7_ladder_2 = 0.0;
                }
                frontier_phi_5_pred = frontier_phi_5_pred_7_ladder;
                frontier_phi_5_pred_1 = frontier_phi_5_pred_7_ladder_1;
                frontier_phi_5_pred_2 = frontier_phi_5_pred_7_ladder_2;
            }
            else
            {
                frontier_phi_5_pred = 0.0;
                frontier_phi_5_pred_1 = 0.0;
                frontier_phi_5_pred_2 = 0.0;
            }
            _770 = frontier_phi_5_pred;
            _772 = frontier_phi_5_pred_1;
            _774 = frontier_phi_5_pred_2;
            _414 = _628 + _770;
            _416 = _629 + _772;
            _418 = _630 + _774;
            uint _634 = _633 + 1u;
            if (_634 == _127)
            {
                break;
            }
            else
            {
                _628 = _414;
                _629 = _416;
                _630 = _418;
                _631 = (_633 != 3u) ? (_631 >> 8u) : _412;
                _633 = _634;
                continue;
            }
        }
        _413 = _414;
        _415 = _416;
        _417 = _418;
    }
    precise float _419 = _413 * _413;
    precise float _420 = _415 * _415;
    precise float _421 = _419 + _420;
    precise float _422 = _417 * _417;
    precise float _423 = _421 + _422;
    float _424 = sqrt(_423);
    bool _425 = _424 < 0.00011000000085914507508277893066406;
    float _430 = inversesqrt(dot(vec3(cbInstanceData._m0[_118].x, cbInstanceData._m0[_365].x, cbInstanceData._m0[_372].x), vec3(cbInstanceData._m0[_118].x, cbInstanceData._m0[_365].x, cbInstanceData._m0[_372].x)));
    precise float _431 = cbInstanceData._m0[_118].x * _430;
    precise float _432 = cbInstanceData._m0[_365].x * _430;
    precise float _433 = cbInstanceData._m0[_372].x * _430;
    float _437 = inversesqrt(dot(vec3(cbInstanceData._m0[_118].y, cbInstanceData._m0[_365].y, cbInstanceData._m0[_372].y), vec3(cbInstanceData._m0[_118].y, cbInstanceData._m0[_365].y, cbInstanceData._m0[_372].y)));
    precise float _438 = cbInstanceData._m0[_118].y * _437;
    precise float _439 = cbInstanceData._m0[_365].y * _437;
    precise float _440 = cbInstanceData._m0[_372].y * _437;
    float _444 = inversesqrt(dot(vec3(cbInstanceData._m0[_118].z, cbInstanceData._m0[_365].z, cbInstanceData._m0[_372].z), vec3(cbInstanceData._m0[_118].z, cbInstanceData._m0[_365].z, cbInstanceData._m0[_372].z)));
    precise float _445 = cbInstanceData._m0[_118].z * _444;
    precise float _446 = cbInstanceData._m0[_365].z * _444;
    precise float _447 = cbInstanceData._m0[_372].z * _444;
    precise float _448 = _431 * 0.0;
    precise float _449 = 1.0 * _438;
    precise float _450 = _449 + _448;
    precise float _451 = 0.0 * _445;
    precise float _452 = _451 + _450;
    precise float _453 = _432 * 0.0;
    precise float _454 = 1.0 * _439;
    precise float _455 = _454 + _453;
    precise float _456 = 0.0 * _446;
    precise float _457 = _456 + _455;
    precise float _458 = _433 * 0.0;
    precise float _459 = 1.0 * _440;
    precise float _460 = _459 + _458;
    precise float _461 = 0.0 * _447;
    precise float _462 = _461 + _460;
    float _466 = inversesqrt(dot(vec3(_413, _415, _417), vec3(_413, _415, _417)));
    precise float _467 = _413 * _466;
    precise float _468 = _415 * _466;
    precise float _469 = _417 * _466;
    precise float _470 = _457 * _469;
    precise float _471 = _462 * _468;
    precise float _472 = _470 - _471;
    precise float _473 = _462 * _467;
    precise float _474 = _452 * _469;
    precise float _475 = _473 - _474;
    precise float _476 = _452 * _468;
    precise float _477 = _457 * _467;
    precise float _478 = _476 - _477;
    float _482 = inversesqrt(dot(vec3(_472, _475, _478), vec3(_472, _475, _478)));
    precise float _483 = _482 * _472;
    precise float _484 = _482 * _475;
    precise float _485 = _482 * _478;
    precise float _486 = _424 + 1.0;
    precise float _488 = cbMtdParam._m0[9u].w * log2(_486);
    precise float _489 = dot(vec3(_483, _484, _485), vec3(_400, _401, _402));
    precise float _492 = _483 * _489;
    precise float _493 = _484 * _489;
    precise float _494 = _485 * _489;
    precise float _495 = _385 + _492;
    precise float _496 = _392 + _493;
    precise float _497 = _399 + _494;
    precise float _498 = _337 - _495;
    precise float _499 = _344 - _496;
    precise float _500 = _351 - _497;
    precise float _501 = _484 * _500;
    precise float _502 = _485 * _499;
    precise float _503 = _501 - _502;
    precise float _504 = _485 * _498;
    precise float _505 = _483 * _500;
    precise float _506 = _504 - _505;
    precise float _507 = _483 * _499;
    precise float _508 = _484 * _498;
    precise float _509 = _507 - _508;
    float _510 = sin(_488);
    float _511 = cos(_488);
    precise float _512 = _498 * _511;
    precise float _513 = _499 * _511;
    precise float _514 = _500 * _511;
    precise float _515 = _510 * _503;
    precise float _516 = _510 * _506;
    precise float _517 = _510 * _509;
    precise float _518 = _512 + _515;
    precise float _519 = _513 + _516;
    precise float _520 = _517 + _514;
    precise float _521 = _495 + _518;
    precise float _522 = _496 + _519;
    precise float _523 = _497 + _520;
    precise float _524 = _521 - _337;
    precise float _525 = _522 - _344;
    precise float _526 = _523 - _351;
    precise float _530 = _337 + (_425 ? 0.0 : _524);
    precise float _531 = _344 + (_425 ? 0.0 : _525);
    precise float _532 = _351 + (_425 ? 0.0 : _526);
    precise float _538 = _530 - cbSceneParam._m0[3u].x;
    precise float _539 = _531 - cbSceneParam._m0[3u].y;
    precise float _540 = _532 - cbSceneParam._m0[3u].z;
    precise float _568 = cbSceneParam._m0[24u].x * _538;
    precise float _569 = _539 * cbSceneParam._m0[24u].y;
    precise float _570 = _569 + _568;
    precise float _571 = _540 * cbSceneParam._m0[24u].z;
    precise float _572 = _571 + _570;
    precise float _573 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _574 = _573 + _572;
    precise float _575 = cbSceneParam._m0[25u].x * _538;
    precise float _576 = _539 * cbSceneParam._m0[25u].y;
    precise float _577 = _576 + _575;
    precise float _578 = _540 * cbSceneParam._m0[25u].z;
    precise float _579 = _578 + _577;
    precise float _580 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _581 = _580 + _579;
    precise float _582 = cbSceneParam._m0[26u].x * _538;
    precise float _583 = _539 * cbSceneParam._m0[26u].y;
    precise float _584 = _583 + _582;
    precise float _585 = _540 * cbSceneParam._m0[26u].z;
    precise float _586 = _585 + _584;
    precise float _587 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _588 = _587 + _586;
    precise float _589 = _538 * cbSceneParam._m0[27u].x;
    precise float _590 = _539 * cbSceneParam._m0[27u].y;
    precise float _591 = _590 + _589;
    precise float _592 = _540 * cbSceneParam._m0[27u].z;
    precise float _593 = _592 + _591;
    precise float _594 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _595 = _594 + _593;
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    gl_Position.x = _574;
    gl_Position.y = _581;
    gl_Position.z = _588;
    gl_Position.w = _595;
    gl_ClipDistance[0u] = dot(vec4(_574, _581, _588, _595), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_574, _581, _588, _595), vec4(cbInstanceData._m0[_143 + 3u]));
}


