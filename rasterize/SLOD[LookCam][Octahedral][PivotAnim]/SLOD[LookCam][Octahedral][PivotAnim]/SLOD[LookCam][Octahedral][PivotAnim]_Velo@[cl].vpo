#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_10;
layout(location = 7) out vec4 TEXCOORD_11;
layout(location = 8) out vec3 TEXCOORD_12;

uint _985;

void main()
{
    uint _83 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    TEXCOORD_10.w = 0.0;
    TEXCOORD_11.x = 0.0;
    TEXCOORD_11.y = 0.0;
    TEXCOORD_11.z = 0.0;
    TEXCOORD_11.w = 0.0;
    TEXCOORD_12.x = 0.0;
    TEXCOORD_12.y = 0.0;
    TEXCOORD_12.z = 0.0;
    precise float _179 = float(NORMAL.x) + (-127.0);
    precise float _181 = float(NORMAL.y) + (-127.0);
    precise float _182 = float(NORMAL.z) + (-127.0);
    precise float _183 = _179 * 0.0078740157186985015869140625;
    precise float _185 = _181 * 0.0078740157186985015869140625;
    precise float _186 = _182 * 0.0078740157186985015869140625;
    uint _191 = _83 * 13u;
    uvec4 _197 = floatBitsToUint(cbInstanceData._m0[_191 + 7u]);
    uint _200 = min(_197.y, 8u);
    precise float _204 = POSITION.x + 0.0;
    precise float _205 = POSITION.y + 0.0;
    precise float _206 = POSITION.z + 0.0;
    uint _211 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _83;
    uvec4 _213 = texelFetch(g_InstanceIndexBuffer, int(_211));
    uint _214 = _213.x;
    uint _223 = (floatBitsToUint(cbInstanceData._m0[(_214 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _230 = _223 + 1u;
    uint _237 = _223 + 2u;
    float _247 = inversesqrt(dot(vec3(cbObjMatrix._m0[_223].x, cbObjMatrix._m0[_230].x, cbObjMatrix._m0[_237].x), vec3(cbObjMatrix._m0[_223].x, cbObjMatrix._m0[_230].x, cbObjMatrix._m0[_237].x)));
    precise float _248 = cbObjMatrix._m0[_223].x * _247;
    precise float _249 = cbObjMatrix._m0[_230].x * _247;
    precise float _250 = cbObjMatrix._m0[_237].x * _247;
    float _254 = inversesqrt(dot(vec3(cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_230].y, cbObjMatrix._m0[_237].y), vec3(cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_230].y, cbObjMatrix._m0[_237].y)));
    precise float _255 = cbObjMatrix._m0[_223].y * _254;
    precise float _256 = cbObjMatrix._m0[_230].y * _254;
    precise float _257 = cbObjMatrix._m0[_237].y * _254;
    float _261 = inversesqrt(dot(vec3(cbObjMatrix._m0[_223].z, cbObjMatrix._m0[_230].z, cbObjMatrix._m0[_237].z), vec3(cbObjMatrix._m0[_223].z, cbObjMatrix._m0[_230].z, cbObjMatrix._m0[_237].z)));
    precise float _262 = cbObjMatrix._m0[_223].z * _261;
    precise float _263 = cbObjMatrix._m0[_230].z * _261;
    precise float _264 = cbObjMatrix._m0[_237].z * _261;
    precise float _281 = _248 * cbSceneParam._m0[5u].x;
    precise float _282 = _249 * cbSceneParam._m0[5u].y;
    precise float _283 = _282 + _281;
    precise float _284 = _250 * cbSceneParam._m0[5u].z;
    precise float _285 = _284 + _283;
    precise float _286 = _248 * cbSceneParam._m0[6u].x;
    precise float _287 = _249 * cbSceneParam._m0[6u].y;
    precise float _288 = _287 + _286;
    precise float _289 = _250 * cbSceneParam._m0[6u].z;
    precise float _290 = _289 + _288;
    precise float _291 = _248 * cbSceneParam._m0[7u].x;
    precise float _292 = _249 * cbSceneParam._m0[7u].y;
    precise float _293 = _292 + _291;
    precise float _294 = _250 * cbSceneParam._m0[7u].z;
    precise float _295 = _294 + _293;
    precise float _296 = _255 * cbSceneParam._m0[5u].x;
    precise float _297 = _256 * cbSceneParam._m0[5u].y;
    precise float _298 = _297 + _296;
    precise float _299 = _257 * cbSceneParam._m0[5u].z;
    precise float _300 = _299 + _298;
    precise float _301 = _255 * cbSceneParam._m0[6u].x;
    precise float _302 = _256 * cbSceneParam._m0[6u].y;
    precise float _303 = _302 + _301;
    precise float _304 = _257 * cbSceneParam._m0[6u].z;
    precise float _305 = _304 + _303;
    precise float _306 = _255 * cbSceneParam._m0[7u].x;
    precise float _307 = _256 * cbSceneParam._m0[7u].y;
    precise float _308 = _307 + _306;
    precise float _309 = _257 * cbSceneParam._m0[7u].z;
    precise float _310 = _309 + _308;
    precise float _311 = _262 * cbSceneParam._m0[5u].x;
    precise float _312 = _263 * cbSceneParam._m0[5u].y;
    precise float _313 = _312 + _311;
    precise float _314 = _264 * cbSceneParam._m0[5u].z;
    precise float _315 = _314 + _313;
    precise float _316 = _262 * cbSceneParam._m0[6u].x;
    precise float _317 = _263 * cbSceneParam._m0[6u].y;
    precise float _318 = _317 + _316;
    precise float _319 = _264 * cbSceneParam._m0[6u].z;
    precise float _320 = _319 + _318;
    precise float _321 = _262 * cbSceneParam._m0[7u].x;
    precise float _322 = _263 * cbSceneParam._m0[7u].y;
    precise float _323 = _322 + _321;
    precise float _324 = _264 * cbSceneParam._m0[7u].z;
    precise float _325 = _324 + _323;
    precise float _326 = _185 * 0.0;
    precise float _327 = _326 - _186;
    precise float _328 = _186 * 0.0;
    precise float _329 = _183 * 0.0;
    precise float _330 = _328 - _329;
    precise float _331 = _183 - _326;
    precise float _332 = _186 * _330;
    precise float _333 = _185 * _331;
    precise float _334 = _332 - _333;
    precise float _335 = _183 * _331;
    precise float _336 = _186 * _327;
    precise float _337 = _335 - _336;
    precise float _338 = _185 * _327;
    precise float _339 = _183 * _330;
    precise float _340 = _338 - _339;
    float _344 = inversesqrt(dot(vec3(_327, _330, _331), vec3(_327, _330, _331)));
    precise float _345 = _327 * _344;
    precise float _346 = _330 * _344;
    precise float _347 = _331 * _344;
    float _351 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    precise float _352 = _334 * _351;
    precise float _353 = _337 * _351;
    precise float _354 = _340 * _351;
    precise float _355 = (-0.0) - _183;
    precise float _357 = (-0.0) - _185;
    precise float _358 = (-0.0) - _186;
    float _362 = inversesqrt(dot(vec3(_355, _357, _358), vec3(_355, _357, _358)));
    precise float _363 = _362 * _355;
    precise float _364 = _362 * _357;
    precise float _365 = _362 * _358;
    precise float _366 = _204 - TEXCOORD_1.x;
    precise float _367 = _205 - TEXCOORD_1.y;
    precise float _368 = _206 - TEXCOORD_1.z;
    precise float _369 = _366 * _345;
    precise float _370 = _367 * _346;
    precise float _371 = _370 + _369;
    precise float _372 = _368 * _347;
    precise float _373 = _372 + _371;
    precise float _374 = _366 * _352;
    precise float _375 = _367 * _353;
    precise float _376 = _375 + _374;
    precise float _377 = _368 * _354;
    precise float _378 = _377 + _376;
    precise float _379 = _366 * _363;
    precise float _380 = _367 * _364;
    precise float _381 = _380 + _379;
    precise float _382 = _368 * _365;
    precise float _383 = _382 + _381;
    precise float _384 = _285 * _373;
    precise float _385 = _290 * _378;
    precise float _386 = _385 + _384;
    precise float _387 = _295 * _383;
    precise float _388 = _387 + _386;
    precise float _389 = _300 * _373;
    precise float _390 = _305 * _378;
    precise float _391 = _390 + _389;
    precise float _392 = _310 * _383;
    precise float _393 = _392 + _391;
    precise float _394 = _315 * _373;
    precise float _395 = _320 * _378;
    precise float _396 = _395 + _394;
    precise float _397 = _325 * _383;
    precise float _398 = _397 + _396;
    precise float _399 = TEXCOORD_1.x + _388;
    precise float _400 = TEXCOORD_1.y + _393;
    precise float _401 = TEXCOORD_1.z + _398;
    precise float _402 = cbObjMatrix._m0[_223].x * _399;
    precise float _403 = _400 * cbObjMatrix._m0[_223].y;
    precise float _404 = _403 + _402;
    precise float _405 = _401 * cbObjMatrix._m0[_223].z;
    precise float _406 = _405 + _404;
    precise float _407 = 1.0 * cbObjMatrix._m0[_223].w;
    precise float _409 = _407 + _406;
    precise float _410 = cbObjMatrix._m0[_230].x * _399;
    precise float _411 = _400 * cbObjMatrix._m0[_230].y;
    precise float _412 = _411 + _410;
    precise float _413 = _401 * cbObjMatrix._m0[_230].z;
    precise float _414 = _413 + _412;
    precise float _415 = 1.0 * cbObjMatrix._m0[_230].w;
    precise float _416 = _415 + _414;
    precise float _417 = cbObjMatrix._m0[_237].x * _399;
    precise float _418 = _400 * cbObjMatrix._m0[_237].y;
    precise float _419 = _418 + _417;
    precise float _420 = _401 * cbObjMatrix._m0[_237].z;
    precise float _421 = _420 + _419;
    precise float _422 = 1.0 * cbObjMatrix._m0[_237].w;
    precise float _423 = _422 + _421;
    float _479 = (((-0.0) - cbObjMatrix._m0[_223].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_223].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_223].y, cbObjMatrix._m0[_223].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _250, fma(cbSceneParam._m0[3u].y, _249, cbSceneParam._m0[3u].x * _248));
    float _482 = (((-0.0) - cbObjMatrix._m0[_230].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_230].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_230].y, cbObjMatrix._m0[_230].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _257, fma(cbSceneParam._m0[3u].y, _256, cbSceneParam._m0[3u].x * _255));
    float _485 = (((-0.0) - cbObjMatrix._m0[_237].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_237].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_237].y, cbObjMatrix._m0[_237].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _264, fma(cbSceneParam._m0[3u].y, _263, cbSceneParam._m0[3u].x * _262));
    float _489 = inversesqrt(dot(vec3(_479, _482, _485), vec3(_479, _482, _485)));
    float _490 = _489 * _479;
    float _491 = _489 * _482;
    float _492 = _489 * _485;
    float _495 = fma(_492, _347, fma(_491, _346, _490 * _345));
    float _498 = fma(_492, _354, fma(_491, _353, _490 * _352));
    float _501 = fma(_492, _365, fma(_491, _364, _490 * _363));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    float _506 = _505 * _495;
    float _507 = _505 * _498;
    float _508 = _505 * _501;
    float _524 = float(int(uint(_506 > 0.0) - uint(_506 < 0.0)));
    float _526 = float(int(uint(_508 > 0.0) - uint(_508 < 0.0)));
    float _527 = dot(vec3(_506, _507, _508), vec3(_524, float(int(uint(_507 > 0.0) - uint(_507 < 0.0))), _526));
    float _530 = _506 / _527;
    float _532 = _508 / _527;
    float _540;
    float _541;
    if ((_507 / _527) < 0.0)
    {
        _540 = _524 - (abs(_532) * _524);
        _541 = _526 - (abs(_530) * _526);
    }
    else
    {
        _540 = _530;
        _541 = _532;
    }
    float _545 = (_540 * 0.5) + 0.5;
    float _546 = (_541 * 0.5) + 0.5;
    float _1216 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _1227 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _552 = fma(_186, _347, fma(_185, _346, _345 * _183));
    float _555 = fma(_186, _354, fma(_185, _353, _352 * _183));
    float _558 = fma(_186, _365, fma(_185, _364, _363 * _183));
    float _561 = fma(_295, _558, fma(_290, _555, _552 * _285));
    float _564 = fma(_310, _558, fma(_305, _555, _552 * _300));
    float _567 = fma(_325, _558, fma(_320, _555, _552 * _315));
    float _570 = fma(_567, cbObjMatrix._m0[_223].z, fma(_564, cbObjMatrix._m0[_223].y, _561 * cbObjMatrix._m0[_223].x));
    float _573 = fma(_567, cbObjMatrix._m0[_230].z, fma(_564, cbObjMatrix._m0[_230].y, _561 * cbObjMatrix._m0[_230].x));
    float _576 = fma(_567, cbObjMatrix._m0[_237].z, fma(_564, cbObjMatrix._m0[_237].y, _561 * cbObjMatrix._m0[_237].x));
    float _578 = (-0.0) - _576;
    precise float _590 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _598 = _191 + 1u;
    uint _605 = _191 + 2u;
    precise float _612 = TEXCOORD_1.x * cbInstanceData._m0[_191].x;
    precise float _613 = TEXCOORD_1.y * cbInstanceData._m0[_191].y;
    precise float _614 = _613 + _612;
    precise float _615 = TEXCOORD_1.z * cbInstanceData._m0[_191].z;
    precise float _616 = _615 + _614;
    precise float _617 = 1.0 * cbInstanceData._m0[_191].w;
    precise float _618 = _617 + _616;
    precise float _619 = TEXCOORD_1.x * cbInstanceData._m0[_598].x;
    precise float _620 = TEXCOORD_1.y * cbInstanceData._m0[_598].y;
    precise float _621 = _620 + _619;
    precise float _622 = TEXCOORD_1.z * cbInstanceData._m0[_598].z;
    precise float _623 = _622 + _621;
    precise float _624 = 1.0 * cbInstanceData._m0[_598].w;
    precise float _625 = _624 + _623;
    precise float _626 = TEXCOORD_1.x * cbInstanceData._m0[_605].x;
    precise float _627 = TEXCOORD_1.y * cbInstanceData._m0[_605].y;
    precise float _628 = _627 + _626;
    precise float _629 = TEXCOORD_1.z * cbInstanceData._m0[_605].z;
    precise float _630 = _629 + _628;
    precise float _631 = 1.0 * cbInstanceData._m0[_605].w;
    precise float _632 = _631 + _630;
    precise float _633 = _409 - _618;
    precise float _634 = _416 - _625;
    precise float _635 = _423 - _632;
    precise float _636 = _633 * _633;
    precise float _637 = _634 * _634;
    precise float _638 = _636 + _637;
    precise float _639 = _635 * _635;
    precise float _640 = _638 + _639;
    precise float _642 = cbMtdParam._m0[9u].z * sqrt(_640);
    precise float _643 = _590 + _642;
    precise float _644 = cbPerFrame._m0[22u].x + _643;
    uint _645 = _197.w;
    float _646;
    float _648;
    float _650;
    if (_200 == 0u)
    {
        _646 = 0.0;
        _648 = 0.0;
        _650 = 0.0;
    }
    else
    {
        uint _915 = _197.z;
        precise float _647;
        precise float _649;
        precise float _651;
        float _1058;
        float _1060;
        float _1062;
        float _916 = 0.0;
        float _917 = 0.0;
        float _918 = 0.0;
        uint _919 = _915;
        uint _921 = 0u;
        float _957;
        float _976;
        vec4 _990;
        float _991;
        float _992;
        float _1006;
        float _1007;
        float _1008;
        float _1025;
        float _1026;
        float _1027;
        float _1028;
        bool _1029;
        bool _1030;
        bool _1031;
        precise float _1032;
        precise float _1033;
        precise float _1034;
        float _1035;
        float _1036;
        float _1037;
        precise float _1038;
        bool _1041;
        for (;;)
        {
            uint _923 = _919 & 255u;
            uint _925 = _923 * 24u;
            uvec3 _935 = uvec3(texelFetch(g_forceParam, int(_925)).x, texelFetch(g_forceParam, int(_925 + 1u)).x, texelFetch(g_forceParam, int(_925 + 2u)).x);
            uint _940 = (_923 * 24u) + 4u;
            vec4 _953 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_940)).x, texelFetch(g_forceParam, int(_940 + 1u)).x, texelFetch(g_forceParam, int(_940 + 2u)).x, texelFetch(g_forceParam, int(_940 + 3u)).x));
            _957 = _953.w;
            uint _959 = (_923 * 24u) + 8u;
            vec4 _972 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_959)).x, texelFetch(g_forceParam, int(_959 + 1u)).x, texelFetch(g_forceParam, int(_959 + 2u)).x, texelFetch(g_forceParam, int(_959 + 3u)).x));
            _976 = _972.w;
            uint _979 = (_923 * 24u) + 12u;
            _990 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_979)).x, texelFetch(g_forceParam, int(_979 + 1u)).x, _985, texelFetch(g_forceParam, int(_979 + 3u)).x));
            _991 = _990.x;
            _992 = _990.w;
            uint _995 = (_923 * 24u) + 16u;
            vec3 _1005 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_995)).x, texelFetch(g_forceParam, int(_995 + 1u)).x, texelFetch(g_forceParam, int(_995 + 2u)).x));
            _1006 = _1005.x;
            _1007 = _1005.y;
            _1008 = _1005.z;
            uint _1011 = (_923 * 24u) + 20u;
            vec4 _1024 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1011)).x, texelFetch(g_forceParam, int(_1011 + 1u)).x, texelFetch(g_forceParam, int(_1011 + 2u)).x, texelFetch(g_forceParam, int(_1011 + 3u)).x));
            _1025 = _1024.x;
            _1026 = _1024.y;
            _1027 = _1024.z;
            _1028 = _1024.w;
            _1029 = _935.x == 1u;
            _1030 = _935.y == 1u;
            _1031 = _935.z == 1u;
            _1032 = _618 - _953.x;
            _1033 = _625 - _953.y;
            _1034 = _632 - _953.z;
            _1035 = _1029 ? _972.x : _1032;
            _1036 = _1029 ? _972.y : _1033;
            _1037 = _1029 ? _972.z : _1034;
            _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
            _1041 = _1038 > 0.0;
            float frontier_phi_7_pred;
            float frontier_phi_7_pred_1;
            float frontier_phi_7_pred_2;
            if (_1041)
            {
                precise float _1043 = _1032 * _1032;
                precise float _1044 = _1033 * _1033;
                precise float _1045 = _1043 + _1044;
                precise float _1046 = _1034 * _1034;
                precise float _1047 = _1046 + _1045;
                float _1048 = sqrt(_1047);
                float _1049 = inversesqrt(_1038);
                precise float _1050 = _1035 * _1049;
                precise float _1051 = _1036 * _1049;
                precise float _1052 = _1037 * _1049;
                precise float _1055 = _1048 / (isnan(0.001000000047497451305389404296875) ? _990.y : (isnan(_990.y) ? 0.001000000047497451305389404296875 : max(_990.y, 0.001000000047497451305389404296875)));
                precise float _1056 = 1.0 - _1055;
                float _1243 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
                float _1057 = isnan(1.0) ? _1243 : (isnan(_1243) ? 1.0 : min(_1243, 1.0));
                float _1083;
                if (_1031)
                {
                    float _1070 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
                    precise float _1071 = _1032 * _1070;
                    precise float _1072 = _1033 * _1070;
                    precise float _1073 = _1034 * _1070;
                    precise float _1077 = dot(vec3(_1050, _1051, _1052), vec3(_1071, _1072, _1073)) * 0.800000011920928955078125;
                    precise float _1079 = _1077 + 0.20000000298023223876953125;
                    float _1254 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
                    precise float _1082 = _1057 * (isnan(1.0) ? _1254 : (isnan(_1254) ? 1.0 : min(_1254, 1.0)));
                    _1083 = _1082;
                }
                else
                {
                    _1083 = _1057;
                }
                float frontier_phi_7_pred_9_ladder;
                float frontier_phi_7_pred_9_ladder_1;
                float frontier_phi_7_pred_9_ladder_2;
                if (_1083 > 0.0)
                {
                    bool _1086 = _1029 && (!_1031);
                    precise float _1088 = _1048 * (-4.0);
                    precise float _1092 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _991 : (isnan(_991) ? 0.001000000047497451305389404296875 : max(_991, 0.001000000047497451305389404296875)));
                    precise float _1094 = dot(vec2(_1050, _1052), vec2(_1032, _1034));
                    precise float _1098 = _1092 * _1094;
                    precise float _1099 = float(_1086) * _1098;
                    precise float _1100 = _644 * _1092;
                    precise float _1101 = _1100 - _1099;
                    precise float _1102 = (_1086 ? 0.0 : _1088) + _1101;
                    precise float _1104 = _976 * sin(_1102);
                    precise float _1105 = _1051 * 0.0;
                    precise float _1106 = _1105 - _1052;
                    precise float _1107 = _1052 * 0.0;
                    precise float _1108 = _1050 * 0.0;
                    precise float _1109 = _1107 - _1108;
                    precise float _1110 = _1050 - _1105;
                    precise float _1111 = _992 * _1104;
                    float _1112 = _1029 ? _1111 : 0.0;
                    float _1154;
                    if (_1030)
                    {
                        precise float _1115 = _1006 * 2.0;
                        precise float _1117 = _1026 + _1027;
                        precise float _1118 = _1028 + _1117;
                        precise float _1120 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1006 : (isnan(_1006) ? 0.001000000047497451305389404296875 : max(_1006, 0.001000000047497451305389404296875)));
                        precise float _1121 = _1025 * _1120;
                        precise float _1122 = (-0.0) - _1050;
                        precise float _1126 = dot(vec2(_1052, _1122), vec2(_1032, _1034)) / _1115;
                        precise float _1127 = (-0.0) - _1126;
                        float _1130 = fract(abs(_1126));
                        precise float _1131 = (-0.0) - _1130;
                        precise float _1133 = _1115 * ((_1126 >= _1127) ? _1130 : _1131);
                        precise float _1134 = _1133 * 6.283184051513671875;
                        precise float _1135 = _1134 / _1115;
                        precise float _1137 = (isnan(5.0) ? _1006 : (isnan(_1006) ? 5.0 : min(_1006, 5.0))) * sin(_1135);
                        precise float _1138 = _1094 + _1137;
                        precise float _1139 = _1006 * 0.25;
                        precise float _1141 = _644 * _1025;
                        precise float _1142 = _1141 - _1139;
                        precise float _1143 = _1142 - _1138;
                        precise float _1144 = _1025 * _1118;
                        precise float _1146 = _1143 / (isnan(0.001000000047497451305389404296875) ? _1144 : (isnan(_1144) ? 0.001000000047497451305389404296875 : max(_1144, 0.001000000047497451305389404296875)));
                        float _1147 = fract(_1146);
                        precise float _1149 = 1.0 - _1147;
                        float _1150 = (_1146 < 0.0) ? _1149 : _1147;
                        precise float _1151 = _1117 / _1118;
                        precise float _1152 = _1026 / _1118;
                        float _1173;
                        if (_1150 < _1152)
                        {
                            precise float _1171 = _1150 / _1152;
                            _1173 = _1171;
                        }
                        else
                        {
                            float frontier_phi_16_15_ladder;
                            if (_1150 < _1151)
                            {
                                precise float _1183 = _1150 - _1152;
                                precise float _1184 = _1151 - _1152;
                                precise float _1185 = _1183 / _1184;
                                precise float _1174 = 1.0 - _1185;
                                frontier_phi_16_15_ladder = _1174;
                            }
                            else
                            {
                                frontier_phi_16_15_ladder = 0.0;
                            }
                            _1173 = frontier_phi_16_15_ladder;
                        }
                        precise float _1175 = _1008 * _1173;
                        precise float _1176 = _1120 * _1094;
                        precise float _1177 = _644 * _1121;
                        precise float _1178 = _1177 - _1176;
                        precise float _1180 = _1007 + sin(_1178);
                        precise float _1182 = _1175 * abs(_1180);
                        precise float _1155 = _1182 + 0.0;
                        _1154 = _1155;
                    }
                    else
                    {
                        _1154 = 0.0;
                    }
                    precise float _1156 = _957 + _1104;
                    precise float _1157 = _1156 + _1154;
                    precise float _1158 = _1050 * _1157;
                    precise float _1159 = _1051 * _1157;
                    precise float _1160 = _1052 * _1157;
                    precise float _1161 = _1106 * _1112;
                    precise float _1162 = _1109 * _1112;
                    precise float _1163 = _1110 * _1112;
                    precise float _1164 = _1161 + _1158;
                    precise float _1165 = _1162 + _1159;
                    precise float _1166 = _1163 + _1160;
                    precise float _1167 = _1083 * _1164;
                    precise float _1168 = _1083 * _1165;
                    precise float _1169 = _1083 * _1166;
                    precise float _1059 = _1167 * 0.0500000007450580596923828125;
                    precise float _1061 = _1168 * 0.0500000007450580596923828125;
                    precise float _1063 = _1169 * 0.0500000007450580596923828125;
                    frontier_phi_7_pred_9_ladder = _1059;
                    frontier_phi_7_pred_9_ladder_1 = _1061;
                    frontier_phi_7_pred_9_ladder_2 = _1063;
                }
                else
                {
                    frontier_phi_7_pred_9_ladder = 0.0;
                    frontier_phi_7_pred_9_ladder_1 = 0.0;
                    frontier_phi_7_pred_9_ladder_2 = 0.0;
                }
                frontier_phi_7_pred = frontier_phi_7_pred_9_ladder;
                frontier_phi_7_pred_1 = frontier_phi_7_pred_9_ladder_1;
                frontier_phi_7_pred_2 = frontier_phi_7_pred_9_ladder_2;
            }
            else
            {
                frontier_phi_7_pred = 0.0;
                frontier_phi_7_pred_1 = 0.0;
                frontier_phi_7_pred_2 = 0.0;
            }
            _1058 = frontier_phi_7_pred;
            _1060 = frontier_phi_7_pred_1;
            _1062 = frontier_phi_7_pred_2;
            _647 = _916 + _1058;
            _649 = _917 + _1060;
            _651 = _918 + _1062;
            uint _922 = _921 + 1u;
            if (_922 == _200)
            {
                break;
            }
            else
            {
                _916 = _647;
                _917 = _649;
                _918 = _651;
                _919 = (_921 != 3u) ? (_919 >> 8u) : _645;
                _921 = _922;
                continue;
            }
        }
        _646 = _647;
        _648 = _649;
        _650 = _651;
    }
    precise float _652 = _646 * _646;
    precise float _653 = _648 * _648;
    precise float _654 = _652 + _653;
    precise float _655 = _650 * _650;
    precise float _656 = _654 + _655;
    float _657 = sqrt(_656);
    bool _658 = _657 < 0.00011000000085914507508277893066406;
    float _663 = inversesqrt(dot(vec3(cbInstanceData._m0[_191].x, cbInstanceData._m0[_598].x, cbInstanceData._m0[_605].x), vec3(cbInstanceData._m0[_191].x, cbInstanceData._m0[_598].x, cbInstanceData._m0[_605].x)));
    precise float _664 = cbInstanceData._m0[_191].x * _663;
    precise float _665 = cbInstanceData._m0[_598].x * _663;
    precise float _666 = cbInstanceData._m0[_605].x * _663;
    float _670 = inversesqrt(dot(vec3(cbInstanceData._m0[_191].y, cbInstanceData._m0[_598].y, cbInstanceData._m0[_605].y), vec3(cbInstanceData._m0[_191].y, cbInstanceData._m0[_598].y, cbInstanceData._m0[_605].y)));
    precise float _671 = cbInstanceData._m0[_191].y * _670;
    precise float _672 = cbInstanceData._m0[_598].y * _670;
    precise float _673 = cbInstanceData._m0[_605].y * _670;
    float _677 = inversesqrt(dot(vec3(cbInstanceData._m0[_191].z, cbInstanceData._m0[_598].z, cbInstanceData._m0[_605].z), vec3(cbInstanceData._m0[_191].z, cbInstanceData._m0[_598].z, cbInstanceData._m0[_605].z)));
    precise float _678 = cbInstanceData._m0[_191].z * _677;
    precise float _679 = cbInstanceData._m0[_598].z * _677;
    precise float _680 = cbInstanceData._m0[_605].z * _677;
    precise float _681 = _664 * 0.0;
    precise float _682 = 1.0 * _671;
    precise float _683 = _682 + _681;
    precise float _684 = 0.0 * _678;
    precise float _685 = _684 + _683;
    precise float _686 = _665 * 0.0;
    precise float _687 = 1.0 * _672;
    precise float _688 = _687 + _686;
    precise float _689 = 0.0 * _679;
    precise float _690 = _689 + _688;
    precise float _691 = _666 * 0.0;
    precise float _692 = 1.0 * _673;
    precise float _693 = _692 + _691;
    precise float _694 = 0.0 * _680;
    precise float _695 = _694 + _693;
    float _699 = inversesqrt(dot(vec3(_646, _648, _650), vec3(_646, _648, _650)));
    precise float _700 = _646 * _699;
    precise float _701 = _648 * _699;
    precise float _702 = _650 * _699;
    precise float _703 = _690 * _702;
    precise float _704 = _695 * _701;
    precise float _705 = _703 - _704;
    precise float _706 = _695 * _700;
    precise float _707 = _685 * _702;
    precise float _708 = _706 - _707;
    precise float _709 = _685 * _701;
    precise float _710 = _690 * _700;
    precise float _711 = _709 - _710;
    float _715 = inversesqrt(dot(vec3(_705, _708, _711), vec3(_705, _708, _711)));
    precise float _716 = _715 * _705;
    precise float _717 = _715 * _708;
    precise float _718 = _715 * _711;
    precise float _719 = _657 + 1.0;
    precise float _721 = cbMtdParam._m0[9u].w * log2(_719);
    precise float _722 = dot(vec3(_716, _717, _718), vec3(_633, _634, _635));
    precise float _725 = _716 * _722;
    precise float _726 = _717 * _722;
    precise float _727 = _718 * _722;
    precise float _728 = _618 + _725;
    precise float _729 = _625 + _726;
    precise float _730 = _632 + _727;
    precise float _731 = _409 - _728;
    precise float _732 = _416 - _729;
    precise float _733 = _423 - _730;
    precise float _734 = _717 * _733;
    precise float _735 = _718 * _732;
    precise float _736 = _734 - _735;
    precise float _737 = _718 * _731;
    precise float _738 = _716 * _733;
    precise float _739 = _737 - _738;
    precise float _740 = _716 * _732;
    precise float _741 = _717 * _731;
    precise float _742 = _740 - _741;
    float _743 = sin(_721);
    float _744 = cos(_721);
    precise float _745 = _731 * _744;
    precise float _746 = _732 * _744;
    precise float _747 = _733 * _744;
    precise float _748 = _743 * _736;
    precise float _749 = _743 * _739;
    precise float _750 = _743 * _742;
    precise float _751 = _745 + _748;
    precise float _752 = _746 + _749;
    precise float _753 = _750 + _747;
    precise float _754 = _728 + _751;
    precise float _755 = _729 + _752;
    precise float _756 = _730 + _753;
    precise float _757 = _754 - _409;
    precise float _758 = _755 - _416;
    precise float _759 = _756 - _423;
    float _760 = _658 ? 0.0 : _757;
    float _761 = _658 ? 0.0 : _758;
    float _762 = _658 ? 0.0 : _759;
    precise float _763 = _409 + _760;
    precise float _764 = _416 + _761;
    precise float _765 = _423 + _762;
    float _773 = ((fma(_401, cbPrevObjMatrix._m0[_223].z, fma(_400, cbPrevObjMatrix._m0[_223].y, cbPrevObjMatrix._m0[_223].x * _399)) + cbPrevObjMatrix._m0[_223].w) - cbSceneParam._m0[28u].x) + _760;
    float _775 = ((fma(_401, cbPrevObjMatrix._m0[_230].z, fma(_400, cbPrevObjMatrix._m0[_230].y, cbPrevObjMatrix._m0[_230].x * _399)) + cbPrevObjMatrix._m0[_230].w) - cbSceneParam._m0[28u].y) + _761;
    float _777 = ((fma(_401, cbPrevObjMatrix._m0[_237].z, fma(_400, cbPrevObjMatrix._m0[_237].y, cbPrevObjMatrix._m0[_237].x * _399)) + cbPrevObjMatrix._m0[_237].w) - cbSceneParam._m0[28u].z) + _762;
    precise float _822 = _763 - cbSceneParam._m0[3u].x;
    precise float _823 = _764 - cbSceneParam._m0[3u].y;
    precise float _824 = _765 - cbSceneParam._m0[3u].z;
    precise float _852 = _822 * cbSceneParam._m0[24u].x;
    precise float _853 = _823 * cbSceneParam._m0[24u].y;
    precise float _854 = _853 + _852;
    precise float _855 = _824 * cbSceneParam._m0[24u].z;
    precise float _856 = _855 + _854;
    precise float _857 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _858 = _857 + _856;
    precise float _859 = _822 * cbSceneParam._m0[25u].x;
    precise float _860 = _823 * cbSceneParam._m0[25u].y;
    precise float _861 = _860 + _859;
    precise float _862 = _824 * cbSceneParam._m0[25u].z;
    precise float _863 = _862 + _861;
    precise float _864 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _865 = _864 + _863;
    precise float _866 = _822 * cbSceneParam._m0[26u].x;
    precise float _867 = _823 * cbSceneParam._m0[26u].y;
    precise float _868 = _867 + _866;
    precise float _869 = _824 * cbSceneParam._m0[26u].z;
    precise float _870 = _869 + _868;
    precise float _871 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _872 = _871 + _870;
    precise float _873 = _822 * cbSceneParam._m0[27u].x;
    precise float _874 = _823 * cbSceneParam._m0[27u].y;
    precise float _875 = _874 + _873;
    precise float _876 = _824 * cbSceneParam._m0[27u].z;
    precise float _877 = _876 + _875;
    precise float _878 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _879 = _878 + _877;
    gl_Position.x = _858;
    gl_Position.y = _865;
    gl_Position.z = _872;
    gl_Position.w = _879;
    POSITION_1.x = _858;
    POSITION_1.y = _865;
    POSITION_1.z = _872;
    POSITION_1.w = _879;
    NORMAL_1.x = _570;
    NORMAL_1.y = _573;
    NORMAL_1.z = _576;
    NORMAL_1.w = float(_214);
    TANGENT_1.x = (-0.0) - (_570 * _573);
    TANGENT_1.y = (_570 * _570) - (_576 * _578);
    TANGENT_1.z = _573 * _578;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = isnan(1.0) ? _1216 : (isnan(_1216) ? 1.0 : min(_1216, 1.0));
    TEXCOORD_2.w = 1.0 - (isnan(1.0) ? _1227 : (isnan(_1227) ? 1.0 : min(_1227, 1.0)));
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_10.x = _858;
    TEXCOORD_10.y = _865;
    TEXCOORD_10.z = _872;
    TEXCOORD_10.w = _879;
    TEXCOORD_11.x = fma(_777, cbSceneParam._m0[29u].z, fma(_775, cbSceneParam._m0[29u].y, _773 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_11.y = fma(_777, cbSceneParam._m0[30u].z, fma(_775, cbSceneParam._m0[30u].y, _773 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_11.z = fma(_777, cbSceneParam._m0[31u].z, fma(_775, cbSceneParam._m0[31u].y, _773 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_11.w = fma(_777, cbSceneParam._m0[32u].z, fma(_775, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _773)) + cbSceneParam._m0[32u].w;
    TEXCOORD_12.x = _570;
    TEXCOORD_12.y = _573;
    TEXCOORD_12.z = _576;
}


