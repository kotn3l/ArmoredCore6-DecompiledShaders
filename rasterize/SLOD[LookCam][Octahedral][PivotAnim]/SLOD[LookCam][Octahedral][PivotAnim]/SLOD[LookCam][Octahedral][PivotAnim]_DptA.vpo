#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out vec2 TEXCOORD_9;
layout(location = 5, component = 2) out float TEXCOORD_13;

uint _903;

void main()
{
    uint _83 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    TEXCOORD_13 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    precise float _166 = float(NORMAL.x) + (-127.0);
    precise float _168 = float(NORMAL.y) + (-127.0);
    precise float _169 = float(NORMAL.z) + (-127.0);
    precise float _170 = _166 * 0.0078740157186985015869140625;
    precise float _172 = _168 * 0.0078740157186985015869140625;
    precise float _173 = _169 * 0.0078740157186985015869140625;
    uint _178 = _83 * 13u;
    uvec4 _184 = floatBitsToUint(cbInstanceData._m0[_178 + 7u]);
    uint _187 = min(_184.y, 8u);
    precise float _191 = POSITION.x + 0.0;
    precise float _192 = POSITION.y + 0.0;
    precise float _193 = POSITION.z + 0.0;
    uint _198 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _83;
    uvec4 _200 = texelFetch(g_InstanceIndexBuffer, int(_198));
    uint _201 = _200.x;
    uint _203 = _201 * 13u;
    uint _210 = (floatBitsToUint(cbInstanceData._m0[_203 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _217 = _210 + 1u;
    uint _224 = _210 + 2u;
    float _234 = inversesqrt(dot(vec3(cbObjMatrix._m0[_210].x, cbObjMatrix._m0[_217].x, cbObjMatrix._m0[_224].x), vec3(cbObjMatrix._m0[_210].x, cbObjMatrix._m0[_217].x, cbObjMatrix._m0[_224].x)));
    precise float _235 = cbObjMatrix._m0[_210].x * _234;
    precise float _236 = cbObjMatrix._m0[_217].x * _234;
    precise float _237 = cbObjMatrix._m0[_224].x * _234;
    float _241 = inversesqrt(dot(vec3(cbObjMatrix._m0[_210].y, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_224].y), vec3(cbObjMatrix._m0[_210].y, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_224].y)));
    precise float _242 = cbObjMatrix._m0[_210].y * _241;
    precise float _243 = cbObjMatrix._m0[_217].y * _241;
    precise float _244 = cbObjMatrix._m0[_224].y * _241;
    float _248 = inversesqrt(dot(vec3(cbObjMatrix._m0[_210].z, cbObjMatrix._m0[_217].z, cbObjMatrix._m0[_224].z), vec3(cbObjMatrix._m0[_210].z, cbObjMatrix._m0[_217].z, cbObjMatrix._m0[_224].z)));
    precise float _249 = cbObjMatrix._m0[_210].z * _248;
    precise float _250 = cbObjMatrix._m0[_217].z * _248;
    precise float _251 = cbObjMatrix._m0[_224].z * _248;
    precise float _268 = _235 * cbSceneParam._m0[5u].x;
    precise float _269 = _236 * cbSceneParam._m0[5u].y;
    precise float _270 = _269 + _268;
    precise float _271 = _237 * cbSceneParam._m0[5u].z;
    precise float _272 = _271 + _270;
    precise float _273 = _235 * cbSceneParam._m0[6u].x;
    precise float _274 = _236 * cbSceneParam._m0[6u].y;
    precise float _275 = _274 + _273;
    precise float _276 = _237 * cbSceneParam._m0[6u].z;
    precise float _277 = _276 + _275;
    precise float _278 = _235 * cbSceneParam._m0[7u].x;
    precise float _279 = _236 * cbSceneParam._m0[7u].y;
    precise float _280 = _279 + _278;
    precise float _281 = _237 * cbSceneParam._m0[7u].z;
    precise float _282 = _281 + _280;
    precise float _283 = _242 * cbSceneParam._m0[5u].x;
    precise float _284 = _243 * cbSceneParam._m0[5u].y;
    precise float _285 = _284 + _283;
    precise float _286 = _244 * cbSceneParam._m0[5u].z;
    precise float _287 = _286 + _285;
    precise float _288 = _242 * cbSceneParam._m0[6u].x;
    precise float _289 = _243 * cbSceneParam._m0[6u].y;
    precise float _290 = _289 + _288;
    precise float _291 = _244 * cbSceneParam._m0[6u].z;
    precise float _292 = _291 + _290;
    precise float _293 = _242 * cbSceneParam._m0[7u].x;
    precise float _294 = _243 * cbSceneParam._m0[7u].y;
    precise float _295 = _294 + _293;
    precise float _296 = _244 * cbSceneParam._m0[7u].z;
    precise float _297 = _296 + _295;
    precise float _298 = _249 * cbSceneParam._m0[5u].x;
    precise float _299 = _250 * cbSceneParam._m0[5u].y;
    precise float _300 = _299 + _298;
    precise float _301 = _251 * cbSceneParam._m0[5u].z;
    precise float _302 = _301 + _300;
    precise float _303 = _249 * cbSceneParam._m0[6u].x;
    precise float _304 = _250 * cbSceneParam._m0[6u].y;
    precise float _305 = _304 + _303;
    precise float _306 = _251 * cbSceneParam._m0[6u].z;
    precise float _307 = _306 + _305;
    precise float _308 = _249 * cbSceneParam._m0[7u].x;
    precise float _309 = _250 * cbSceneParam._m0[7u].y;
    precise float _310 = _309 + _308;
    precise float _311 = _251 * cbSceneParam._m0[7u].z;
    precise float _312 = _311 + _310;
    precise float _313 = _172 * 0.0;
    precise float _314 = _313 - _173;
    precise float _315 = _173 * 0.0;
    precise float _316 = _170 * 0.0;
    precise float _317 = _315 - _316;
    precise float _318 = _170 - _313;
    precise float _319 = _173 * _317;
    precise float _320 = _172 * _318;
    precise float _321 = _319 - _320;
    precise float _322 = _170 * _318;
    precise float _323 = _173 * _314;
    precise float _324 = _322 - _323;
    precise float _325 = _172 * _314;
    precise float _326 = _170 * _317;
    precise float _327 = _325 - _326;
    float _331 = inversesqrt(dot(vec3(_314, _317, _318), vec3(_314, _317, _318)));
    precise float _332 = _314 * _331;
    precise float _333 = _317 * _331;
    precise float _334 = _318 * _331;
    float _338 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    precise float _339 = _321 * _338;
    precise float _340 = _324 * _338;
    precise float _341 = _327 * _338;
    precise float _342 = (-0.0) - _170;
    precise float _344 = (-0.0) - _172;
    precise float _345 = (-0.0) - _173;
    float _349 = inversesqrt(dot(vec3(_342, _344, _345), vec3(_342, _344, _345)));
    precise float _350 = _349 * _342;
    precise float _351 = _349 * _344;
    precise float _352 = _349 * _345;
    precise float _353 = _191 - TEXCOORD_1.x;
    precise float _354 = _192 - TEXCOORD_1.y;
    precise float _355 = _193 - TEXCOORD_1.z;
    precise float _356 = _353 * _332;
    precise float _357 = _354 * _333;
    precise float _358 = _357 + _356;
    precise float _359 = _355 * _334;
    precise float _360 = _359 + _358;
    precise float _361 = _353 * _339;
    precise float _362 = _354 * _340;
    precise float _363 = _362 + _361;
    precise float _364 = _355 * _341;
    precise float _365 = _364 + _363;
    precise float _366 = _353 * _350;
    precise float _367 = _354 * _351;
    precise float _368 = _367 + _366;
    precise float _369 = _355 * _352;
    precise float _370 = _369 + _368;
    precise float _371 = _272 * _360;
    precise float _372 = _277 * _365;
    precise float _373 = _372 + _371;
    precise float _374 = _282 * _370;
    precise float _375 = _374 + _373;
    precise float _376 = _287 * _360;
    precise float _377 = _292 * _365;
    precise float _378 = _377 + _376;
    precise float _379 = _297 * _370;
    precise float _380 = _379 + _378;
    precise float _381 = _302 * _360;
    precise float _382 = _307 * _365;
    precise float _383 = _382 + _381;
    precise float _384 = _312 * _370;
    precise float _385 = _384 + _383;
    precise float _386 = TEXCOORD_1.x + _375;
    precise float _387 = TEXCOORD_1.y + _380;
    precise float _388 = TEXCOORD_1.z + _385;
    precise float _389 = cbObjMatrix._m0[_210].x * _386;
    precise float _390 = _387 * cbObjMatrix._m0[_210].y;
    precise float _391 = _390 + _389;
    precise float _392 = _388 * cbObjMatrix._m0[_210].z;
    precise float _393 = _392 + _391;
    precise float _394 = 1.0 * cbObjMatrix._m0[_210].w;
    precise float _396 = _394 + _393;
    precise float _397 = cbObjMatrix._m0[_217].x * _386;
    precise float _398 = _387 * cbObjMatrix._m0[_217].y;
    precise float _399 = _398 + _397;
    precise float _400 = _388 * cbObjMatrix._m0[_217].z;
    precise float _401 = _400 + _399;
    precise float _402 = 1.0 * cbObjMatrix._m0[_217].w;
    precise float _403 = _402 + _401;
    precise float _404 = cbObjMatrix._m0[_224].x * _386;
    precise float _405 = _387 * cbObjMatrix._m0[_224].y;
    precise float _406 = _405 + _404;
    precise float _407 = _388 * cbObjMatrix._m0[_224].z;
    precise float _408 = _407 + _406;
    precise float _409 = 1.0 * cbObjMatrix._m0[_224].w;
    precise float _410 = _409 + _408;
    float _436 = (((-0.0) - cbObjMatrix._m0[_210].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_210].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_210].y, cbObjMatrix._m0[_210].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _237, fma(cbSceneParam._m0[3u].y, _236, cbSceneParam._m0[3u].x * _235));
    float _439 = (((-0.0) - cbObjMatrix._m0[_217].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_217].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_217].y, cbObjMatrix._m0[_217].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _244, fma(cbSceneParam._m0[3u].y, _243, cbSceneParam._m0[3u].x * _242));
    float _442 = (((-0.0) - cbObjMatrix._m0[_224].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_224].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_224].y, cbObjMatrix._m0[_224].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _251, fma(cbSceneParam._m0[3u].y, _250, cbSceneParam._m0[3u].x * _249));
    float _446 = inversesqrt(dot(vec3(_436, _439, _442), vec3(_436, _439, _442)));
    float _447 = _446 * _436;
    float _448 = _446 * _439;
    float _449 = _446 * _442;
    float _452 = fma(_449, _334, fma(_448, _333, _447 * _332));
    float _455 = fma(_449, _341, fma(_448, _340, _447 * _339));
    float _458 = fma(_449, _352, fma(_448, _351, _447 * _350));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _481 = float(int(uint(_463 > 0.0) - uint(_463 < 0.0)));
    float _483 = float(int(uint(_465 > 0.0) - uint(_465 < 0.0)));
    float _484 = dot(vec3(_463, _464, _465), vec3(_481, float(int(uint(_464 > 0.0) - uint(_464 < 0.0))), _483));
    float _487 = _463 / _484;
    float _489 = _465 / _484;
    float _497;
    float _498;
    if ((_464 / _484) < 0.0)
    {
        _497 = _481 - (abs(_489) * _481);
        _498 = _483 - (abs(_487) * _483);
    }
    else
    {
        _497 = _487;
        _498 = _489;
    }
    float _502 = (_497 * 0.5) + 0.5;
    float _503 = (_498 * 0.5) + 0.5;
    float _1133 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _1144 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _507 = cbSceneParam._m0[3u].x - _396;
    float _508 = cbSceneParam._m0[3u].y - _403;
    float _509 = cbSceneParam._m0[3u].z - _410;
    float _518 = fma(_173, _334, fma(_172, _333, _332 * _170));
    float _521 = fma(_173, _341, fma(_172, _340, _339 * _170));
    float _524 = fma(_173, _352, fma(_172, _351, _350 * _170));
    float _527 = fma(_282, _524, fma(_277, _521, _518 * _272));
    float _530 = fma(_297, _524, fma(_292, _521, _518 * _287));
    float _533 = fma(_312, _524, fma(_307, _521, _518 * _302));
    float _536 = fma(_533, cbObjMatrix._m0[_210].z, fma(_530, cbObjMatrix._m0[_210].y, _527 * cbObjMatrix._m0[_210].x));
    float _539 = fma(_533, cbObjMatrix._m0[_217].z, fma(_530, cbObjMatrix._m0[_217].y, _527 * cbObjMatrix._m0[_217].x));
    float _542 = fma(_533, cbObjMatrix._m0[_224].z, fma(_530, cbObjMatrix._m0[_224].y, _527 * cbObjMatrix._m0[_224].x));
    float _544 = (-0.0) - _542;
    precise float _556 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _564 = _178 + 1u;
    uint _571 = _178 + 2u;
    precise float _578 = TEXCOORD_1.x * cbInstanceData._m0[_178].x;
    precise float _579 = TEXCOORD_1.y * cbInstanceData._m0[_178].y;
    precise float _580 = _579 + _578;
    precise float _581 = TEXCOORD_1.z * cbInstanceData._m0[_178].z;
    precise float _582 = _581 + _580;
    precise float _583 = 1.0 * cbInstanceData._m0[_178].w;
    precise float _584 = _583 + _582;
    precise float _585 = TEXCOORD_1.x * cbInstanceData._m0[_564].x;
    precise float _586 = TEXCOORD_1.y * cbInstanceData._m0[_564].y;
    precise float _587 = _586 + _585;
    precise float _588 = TEXCOORD_1.z * cbInstanceData._m0[_564].z;
    precise float _589 = _588 + _587;
    precise float _590 = 1.0 * cbInstanceData._m0[_564].w;
    precise float _591 = _590 + _589;
    precise float _592 = TEXCOORD_1.x * cbInstanceData._m0[_571].x;
    precise float _593 = TEXCOORD_1.y * cbInstanceData._m0[_571].y;
    precise float _594 = _593 + _592;
    precise float _595 = TEXCOORD_1.z * cbInstanceData._m0[_571].z;
    precise float _596 = _595 + _594;
    precise float _597 = 1.0 * cbInstanceData._m0[_571].w;
    precise float _598 = _597 + _596;
    precise float _599 = _396 - _584;
    precise float _600 = _403 - _591;
    precise float _601 = _410 - _598;
    precise float _602 = _599 * _599;
    precise float _603 = _600 * _600;
    precise float _604 = _602 + _603;
    precise float _605 = _601 * _601;
    precise float _606 = _604 + _605;
    precise float _608 = cbMtdParam._m0[9u].z * sqrt(_606);
    precise float _609 = _556 + _608;
    precise float _610 = cbPerFrame._m0[22u].x + _609;
    uint _611 = _184.w;
    float _612;
    float _614;
    float _616;
    if (_187 == 0u)
    {
        _612 = 0.0;
        _614 = 0.0;
        _616 = 0.0;
    }
    else
    {
        uint _833 = _184.z;
        precise float _613;
        precise float _615;
        precise float _617;
        float _976;
        float _978;
        float _980;
        float _834 = 0.0;
        float _835 = 0.0;
        float _836 = 0.0;
        uint _837 = _833;
        uint _839 = 0u;
        float _875;
        float _894;
        vec4 _908;
        float _909;
        float _910;
        float _924;
        float _925;
        float _926;
        float _943;
        float _944;
        float _945;
        float _946;
        bool _947;
        bool _948;
        bool _949;
        precise float _950;
        precise float _951;
        precise float _952;
        float _953;
        float _954;
        float _955;
        precise float _956;
        bool _959;
        for (;;)
        {
            uint _841 = _837 & 255u;
            uint _843 = _841 * 24u;
            uvec3 _853 = uvec3(texelFetch(g_forceParam, int(_843)).x, texelFetch(g_forceParam, int(_843 + 1u)).x, texelFetch(g_forceParam, int(_843 + 2u)).x);
            uint _858 = (_841 * 24u) + 4u;
            vec4 _871 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_858)).x, texelFetch(g_forceParam, int(_858 + 1u)).x, texelFetch(g_forceParam, int(_858 + 2u)).x, texelFetch(g_forceParam, int(_858 + 3u)).x));
            _875 = _871.w;
            uint _877 = (_841 * 24u) + 8u;
            vec4 _890 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_877)).x, texelFetch(g_forceParam, int(_877 + 1u)).x, texelFetch(g_forceParam, int(_877 + 2u)).x, texelFetch(g_forceParam, int(_877 + 3u)).x));
            _894 = _890.w;
            uint _897 = (_841 * 24u) + 12u;
            _908 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_897)).x, texelFetch(g_forceParam, int(_897 + 1u)).x, _903, texelFetch(g_forceParam, int(_897 + 3u)).x));
            _909 = _908.x;
            _910 = _908.w;
            uint _913 = (_841 * 24u) + 16u;
            vec3 _923 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_913)).x, texelFetch(g_forceParam, int(_913 + 1u)).x, texelFetch(g_forceParam, int(_913 + 2u)).x));
            _924 = _923.x;
            _925 = _923.y;
            _926 = _923.z;
            uint _929 = (_841 * 24u) + 20u;
            vec4 _942 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_929)).x, texelFetch(g_forceParam, int(_929 + 1u)).x, texelFetch(g_forceParam, int(_929 + 2u)).x, texelFetch(g_forceParam, int(_929 + 3u)).x));
            _943 = _942.x;
            _944 = _942.y;
            _945 = _942.z;
            _946 = _942.w;
            _947 = _853.x == 1u;
            _948 = _853.y == 1u;
            _949 = _853.z == 1u;
            _950 = _584 - _871.x;
            _951 = _591 - _871.y;
            _952 = _598 - _871.z;
            _953 = _947 ? _890.x : _950;
            _954 = _947 ? _890.y : _951;
            _955 = _947 ? _890.z : _952;
            _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
            _959 = _956 > 0.0;
            float frontier_phi_7_pred;
            float frontier_phi_7_pred_1;
            float frontier_phi_7_pred_2;
            if (_959)
            {
                precise float _961 = _950 * _950;
                precise float _962 = _951 * _951;
                precise float _963 = _961 + _962;
                precise float _964 = _952 * _952;
                precise float _965 = _964 + _963;
                float _966 = sqrt(_965);
                float _967 = inversesqrt(_956);
                precise float _968 = _953 * _967;
                precise float _969 = _954 * _967;
                precise float _970 = _955 * _967;
                precise float _973 = _966 / (isnan(0.001000000047497451305389404296875) ? _908.y : (isnan(_908.y) ? 0.001000000047497451305389404296875 : max(_908.y, 0.001000000047497451305389404296875)));
                precise float _974 = 1.0 - _973;
                float _1160 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
                float _975 = isnan(1.0) ? _1160 : (isnan(_1160) ? 1.0 : min(_1160, 1.0));
                float _1001;
                if (_949)
                {
                    float _988 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
                    precise float _989 = _950 * _988;
                    precise float _990 = _951 * _988;
                    precise float _991 = _952 * _988;
                    precise float _995 = dot(vec3(_968, _969, _970), vec3(_989, _990, _991)) * 0.800000011920928955078125;
                    precise float _997 = _995 + 0.20000000298023223876953125;
                    float _1171 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
                    precise float _1000 = _975 * (isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0)));
                    _1001 = _1000;
                }
                else
                {
                    _1001 = _975;
                }
                float frontier_phi_7_pred_9_ladder;
                float frontier_phi_7_pred_9_ladder_1;
                float frontier_phi_7_pred_9_ladder_2;
                if (_1001 > 0.0)
                {
                    bool _1004 = _947 && (!_949);
                    precise float _1006 = _966 * (-4.0);
                    precise float _1010 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _909 : (isnan(_909) ? 0.001000000047497451305389404296875 : max(_909, 0.001000000047497451305389404296875)));
                    precise float _1012 = dot(vec2(_968, _970), vec2(_950, _952));
                    precise float _1015 = _1010 * _1012;
                    precise float _1016 = float(_1004) * _1015;
                    precise float _1017 = _610 * _1010;
                    precise float _1018 = _1017 - _1016;
                    precise float _1019 = (_1004 ? 0.0 : _1006) + _1018;
                    precise float _1021 = _894 * sin(_1019);
                    precise float _1022 = _969 * 0.0;
                    precise float _1023 = _1022 - _970;
                    precise float _1024 = _970 * 0.0;
                    precise float _1025 = _968 * 0.0;
                    precise float _1026 = _1024 - _1025;
                    precise float _1027 = _968 - _1022;
                    precise float _1028 = _910 * _1021;
                    float _1029 = _947 ? _1028 : 0.0;
                    float _1071;
                    if (_948)
                    {
                        precise float _1032 = _924 * 2.0;
                        precise float _1034 = _944 + _945;
                        precise float _1035 = _946 + _1034;
                        precise float _1037 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _924 : (isnan(_924) ? 0.001000000047497451305389404296875 : max(_924, 0.001000000047497451305389404296875)));
                        precise float _1038 = _943 * _1037;
                        precise float _1039 = (-0.0) - _968;
                        precise float _1043 = dot(vec2(_970, _1039), vec2(_950, _952)) / _1032;
                        precise float _1044 = (-0.0) - _1043;
                        float _1047 = fract(abs(_1043));
                        precise float _1048 = (-0.0) - _1047;
                        precise float _1050 = _1032 * ((_1043 >= _1044) ? _1047 : _1048);
                        precise float _1051 = _1050 * 6.283184051513671875;
                        precise float _1052 = _1051 / _1032;
                        precise float _1054 = (isnan(5.0) ? _924 : (isnan(_924) ? 5.0 : min(_924, 5.0))) * sin(_1052);
                        precise float _1055 = _1012 + _1054;
                        precise float _1056 = _924 * 0.25;
                        precise float _1058 = _610 * _943;
                        precise float _1059 = _1058 - _1056;
                        precise float _1060 = _1059 - _1055;
                        precise float _1061 = _943 * _1035;
                        precise float _1063 = _1060 / (isnan(0.001000000047497451305389404296875) ? _1061 : (isnan(_1061) ? 0.001000000047497451305389404296875 : max(_1061, 0.001000000047497451305389404296875)));
                        float _1064 = fract(_1063);
                        precise float _1066 = 1.0 - _1064;
                        float _1067 = (_1063 < 0.0) ? _1066 : _1064;
                        precise float _1068 = _1034 / _1035;
                        precise float _1069 = _944 / _1035;
                        float _1090;
                        if (_1067 < _1069)
                        {
                            precise float _1088 = _1067 / _1069;
                            _1090 = _1088;
                        }
                        else
                        {
                            float frontier_phi_16_15_ladder;
                            if (_1067 < _1068)
                            {
                                precise float _1100 = _1067 - _1069;
                                precise float _1101 = _1068 - _1069;
                                precise float _1102 = _1100 / _1101;
                                precise float _1091 = 1.0 - _1102;
                                frontier_phi_16_15_ladder = _1091;
                            }
                            else
                            {
                                frontier_phi_16_15_ladder = 0.0;
                            }
                            _1090 = frontier_phi_16_15_ladder;
                        }
                        precise float _1092 = _926 * _1090;
                        precise float _1093 = _1037 * _1012;
                        precise float _1094 = _610 * _1038;
                        precise float _1095 = _1094 - _1093;
                        precise float _1097 = _925 + sin(_1095);
                        precise float _1099 = _1092 * abs(_1097);
                        precise float _1072 = _1099 + 0.0;
                        _1071 = _1072;
                    }
                    else
                    {
                        _1071 = 0.0;
                    }
                    precise float _1073 = _875 + _1021;
                    precise float _1074 = _1073 + _1071;
                    precise float _1075 = _968 * _1074;
                    precise float _1076 = _969 * _1074;
                    precise float _1077 = _970 * _1074;
                    precise float _1078 = _1023 * _1029;
                    precise float _1079 = _1026 * _1029;
                    precise float _1080 = _1027 * _1029;
                    precise float _1081 = _1078 + _1075;
                    precise float _1082 = _1079 + _1076;
                    precise float _1083 = _1080 + _1077;
                    precise float _1084 = _1001 * _1081;
                    precise float _1085 = _1001 * _1082;
                    precise float _1086 = _1001 * _1083;
                    precise float _977 = _1084 * 0.0500000007450580596923828125;
                    precise float _979 = _1085 * 0.0500000007450580596923828125;
                    precise float _981 = _1086 * 0.0500000007450580596923828125;
                    frontier_phi_7_pred_9_ladder = _977;
                    frontier_phi_7_pred_9_ladder_1 = _979;
                    frontier_phi_7_pred_9_ladder_2 = _981;
                }
                else
                {
                    frontier_phi_7_pred_9_ladder = 0.0;
                    frontier_phi_7_pred_9_ladder_1 = 0.0;
                    frontier_phi_7_pred_9_ladder_2 = 0.0;
                }
                frontier_phi_7_pred = frontier_phi_7_pred_9_ladder;
                frontier_phi_7_pred_1 = frontier_phi_7_pred_9_ladder_1;
                frontier_phi_7_pred_2 = frontier_phi_7_pred_9_ladder_2;
            }
            else
            {
                frontier_phi_7_pred = 0.0;
                frontier_phi_7_pred_1 = 0.0;
                frontier_phi_7_pred_2 = 0.0;
            }
            _976 = frontier_phi_7_pred;
            _978 = frontier_phi_7_pred_1;
            _980 = frontier_phi_7_pred_2;
            _613 = _834 + _976;
            _615 = _835 + _978;
            _617 = _836 + _980;
            uint _840 = _839 + 1u;
            if (_840 == _187)
            {
                break;
            }
            else
            {
                _834 = _613;
                _835 = _615;
                _836 = _617;
                _837 = (_839 != 3u) ? (_837 >> 8u) : _611;
                _839 = _840;
                continue;
            }
        }
        _612 = _613;
        _614 = _615;
        _616 = _617;
    }
    precise float _618 = _612 * _612;
    precise float _619 = _614 * _614;
    precise float _620 = _618 + _619;
    precise float _621 = _616 * _616;
    precise float _622 = _620 + _621;
    float _623 = sqrt(_622);
    bool _624 = _623 < 0.00011000000085914507508277893066406;
    float _629 = inversesqrt(dot(vec3(cbInstanceData._m0[_178].x, cbInstanceData._m0[_564].x, cbInstanceData._m0[_571].x), vec3(cbInstanceData._m0[_178].x, cbInstanceData._m0[_564].x, cbInstanceData._m0[_571].x)));
    precise float _630 = cbInstanceData._m0[_178].x * _629;
    precise float _631 = cbInstanceData._m0[_564].x * _629;
    precise float _632 = cbInstanceData._m0[_571].x * _629;
    float _636 = inversesqrt(dot(vec3(cbInstanceData._m0[_178].y, cbInstanceData._m0[_564].y, cbInstanceData._m0[_571].y), vec3(cbInstanceData._m0[_178].y, cbInstanceData._m0[_564].y, cbInstanceData._m0[_571].y)));
    precise float _637 = cbInstanceData._m0[_178].y * _636;
    precise float _638 = cbInstanceData._m0[_564].y * _636;
    precise float _639 = cbInstanceData._m0[_571].y * _636;
    float _643 = inversesqrt(dot(vec3(cbInstanceData._m0[_178].z, cbInstanceData._m0[_564].z, cbInstanceData._m0[_571].z), vec3(cbInstanceData._m0[_178].z, cbInstanceData._m0[_564].z, cbInstanceData._m0[_571].z)));
    precise float _644 = cbInstanceData._m0[_178].z * _643;
    precise float _645 = cbInstanceData._m0[_564].z * _643;
    precise float _646 = cbInstanceData._m0[_571].z * _643;
    precise float _647 = _630 * 0.0;
    precise float _648 = 1.0 * _637;
    precise float _649 = _648 + _647;
    precise float _650 = 0.0 * _644;
    precise float _651 = _650 + _649;
    precise float _652 = _631 * 0.0;
    precise float _653 = 1.0 * _638;
    precise float _654 = _653 + _652;
    precise float _655 = 0.0 * _645;
    precise float _656 = _655 + _654;
    precise float _657 = _632 * 0.0;
    precise float _658 = 1.0 * _639;
    precise float _659 = _658 + _657;
    precise float _660 = 0.0 * _646;
    precise float _661 = _660 + _659;
    float _665 = inversesqrt(dot(vec3(_612, _614, _616), vec3(_612, _614, _616)));
    precise float _666 = _612 * _665;
    precise float _667 = _614 * _665;
    precise float _668 = _616 * _665;
    precise float _669 = _656 * _668;
    precise float _670 = _661 * _667;
    precise float _671 = _669 - _670;
    precise float _672 = _661 * _666;
    precise float _673 = _651 * _668;
    precise float _674 = _672 - _673;
    precise float _675 = _651 * _667;
    precise float _676 = _656 * _666;
    precise float _677 = _675 - _676;
    float _681 = inversesqrt(dot(vec3(_671, _674, _677), vec3(_671, _674, _677)));
    precise float _682 = _681 * _671;
    precise float _683 = _681 * _674;
    precise float _684 = _681 * _677;
    precise float _685 = _623 + 1.0;
    precise float _687 = cbMtdParam._m0[9u].w * log2(_685);
    precise float _688 = dot(vec3(_682, _683, _684), vec3(_599, _600, _601));
    precise float _691 = _682 * _688;
    precise float _692 = _683 * _688;
    precise float _693 = _684 * _688;
    precise float _694 = _584 + _691;
    precise float _695 = _591 + _692;
    precise float _696 = _598 + _693;
    precise float _697 = _396 - _694;
    precise float _698 = _403 - _695;
    precise float _699 = _410 - _696;
    precise float _700 = _683 * _699;
    precise float _701 = _684 * _698;
    precise float _702 = _700 - _701;
    precise float _703 = _684 * _697;
    precise float _704 = _682 * _699;
    precise float _705 = _703 - _704;
    precise float _706 = _682 * _698;
    precise float _707 = _683 * _697;
    precise float _708 = _706 - _707;
    float _709 = sin(_687);
    float _710 = cos(_687);
    precise float _711 = _697 * _710;
    precise float _712 = _698 * _710;
    precise float _713 = _699 * _710;
    precise float _714 = _709 * _702;
    precise float _715 = _709 * _705;
    precise float _716 = _709 * _708;
    precise float _717 = _711 + _714;
    precise float _718 = _712 + _715;
    precise float _719 = _716 + _713;
    precise float _720 = _694 + _717;
    precise float _721 = _695 + _718;
    precise float _722 = _696 + _719;
    precise float _723 = _720 - _396;
    precise float _724 = _721 - _403;
    precise float _725 = _722 - _410;
    precise float _729 = _396 + (_624 ? 0.0 : _723);
    precise float _730 = _403 + (_624 ? 0.0 : _724);
    precise float _731 = _410 + (_624 ? 0.0 : _725);
    precise float _732 = _729 - cbSceneParam._m0[3u].x;
    precise float _733 = _730 - cbSceneParam._m0[3u].y;
    precise float _734 = _731 - cbSceneParam._m0[3u].z;
    precise float _762 = cbSceneParam._m0[24u].x * _732;
    precise float _763 = _733 * cbSceneParam._m0[24u].y;
    precise float _764 = _763 + _762;
    precise float _765 = _734 * cbSceneParam._m0[24u].z;
    precise float _766 = _765 + _764;
    precise float _767 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _768 = _767 + _766;
    precise float _769 = cbSceneParam._m0[25u].x * _732;
    precise float _770 = _733 * cbSceneParam._m0[25u].y;
    precise float _771 = _770 + _769;
    precise float _772 = _734 * cbSceneParam._m0[25u].z;
    precise float _773 = _772 + _771;
    precise float _774 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _775 = _774 + _773;
    precise float _776 = cbSceneParam._m0[26u].x * _732;
    precise float _777 = _733 * cbSceneParam._m0[26u].y;
    precise float _778 = _777 + _776;
    precise float _779 = _734 * cbSceneParam._m0[26u].z;
    precise float _780 = _779 + _778;
    precise float _781 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _782 = _781 + _780;
    precise float _783 = _732 * cbSceneParam._m0[27u].x;
    precise float _784 = _733 * cbSceneParam._m0[27u].y;
    precise float _785 = _784 + _783;
    precise float _786 = _734 * cbSceneParam._m0[27u].z;
    precise float _787 = _786 + _785;
    precise float _788 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _789 = _788 + _787;
    gl_Position.x = _768;
    gl_Position.y = _775;
    gl_Position.z = _782;
    gl_Position.w = _789;
    NORMAL_1.x = _536;
    NORMAL_1.y = _539;
    NORMAL_1.z = _542;
    NORMAL_1.w = float(_201);
    TANGENT_1.x = (-0.0) - (_536 * _539);
    TANGENT_1.y = (_536 * _536) - (_542 * _544);
    TANGENT_1.z = _539 * _544;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = isnan(1.0) ? _1133 : (isnan(_1133) ? 1.0 : min(_1133, 1.0));
    TEXCOORD_2.w = 1.0 - (isnan(1.0) ? _1144 : (isnan(_1144) ? 1.0 : min(_1144, 1.0)));
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_9.x = _782;
    TEXCOORD_9.y = _789;
    TEXCOORD_13 = sqrt(((_507 * _507) + (_508 * _508)) + (_509 * _509));
    gl_ClipDistance[0u] = dot(vec4(_768, _775, _782, _789), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_768, _775, _782, _789), vec4(cbInstanceData._m0[_203 + 3u]));
}


