#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 6, std140) uniform cbPrevObjMatrixUBO
{
    vec4 _m0[6];
} cbPrevObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 26) uniform usamplerBuffer g_forceParam;
layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_3;
layout(location = 6) out vec4 TEXCOORD_10;
layout(location = 7) out vec4 TEXCOORD_11;
layout(location = 8) out vec3 TEXCOORD_12;

uint _1011;

void main()
{
    uint _87 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_10.z = 0.0;
    TEXCOORD_10.w = 0.0;
    TEXCOORD_11.x = 0.0;
    TEXCOORD_11.y = 0.0;
    TEXCOORD_11.z = 0.0;
    TEXCOORD_11.w = 0.0;
    TEXCOORD_12.x = 0.0;
    TEXCOORD_12.y = 0.0;
    TEXCOORD_12.z = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    precise float _184 = float(NORMAL.x) + (-127.0);
    precise float _186 = float(NORMAL.y) + (-127.0);
    precise float _187 = float(NORMAL.z) + (-127.0);
    precise float _188 = _184 * 0.0078740157186985015869140625;
    precise float _190 = _186 * 0.0078740157186985015869140625;
    precise float _191 = _187 * 0.0078740157186985015869140625;
    uint _196 = _87 * 13u;
    uvec4 _202 = floatBitsToUint(cbInstanceData._m0[_196 + 7u]);
    uint _205 = min(_202.y, 8u);
    precise float _209 = POSITION.x + 0.0;
    precise float _210 = POSITION.y + 0.0;
    precise float _211 = POSITION.z + 0.0;
    uint _216 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _87;
    uvec4 _218 = texelFetch(g_InstanceIndexBuffer, int(_216));
    uint _219 = _218.x;
    uint _221 = _219 * 13u;
    uint _228 = (floatBitsToUint(cbInstanceData._m0[_221 + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _235 = _228 + 1u;
    uint _242 = _228 + 2u;
    float _252 = inversesqrt(dot(vec3(cbObjMatrix._m0[_228].x, cbObjMatrix._m0[_235].x, cbObjMatrix._m0[_242].x), vec3(cbObjMatrix._m0[_228].x, cbObjMatrix._m0[_235].x, cbObjMatrix._m0[_242].x)));
    precise float _253 = cbObjMatrix._m0[_228].x * _252;
    precise float _254 = cbObjMatrix._m0[_235].x * _252;
    precise float _255 = cbObjMatrix._m0[_242].x * _252;
    float _259 = inversesqrt(dot(vec3(cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_242].y), vec3(cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_242].y)));
    precise float _260 = cbObjMatrix._m0[_228].y * _259;
    precise float _261 = cbObjMatrix._m0[_235].y * _259;
    precise float _262 = cbObjMatrix._m0[_242].y * _259;
    float _266 = inversesqrt(dot(vec3(cbObjMatrix._m0[_228].z, cbObjMatrix._m0[_235].z, cbObjMatrix._m0[_242].z), vec3(cbObjMatrix._m0[_228].z, cbObjMatrix._m0[_235].z, cbObjMatrix._m0[_242].z)));
    precise float _267 = cbObjMatrix._m0[_228].z * _266;
    precise float _268 = cbObjMatrix._m0[_235].z * _266;
    precise float _269 = cbObjMatrix._m0[_242].z * _266;
    precise float _286 = _253 * cbSceneParam._m0[5u].x;
    precise float _287 = _254 * cbSceneParam._m0[5u].y;
    precise float _288 = _287 + _286;
    precise float _289 = _255 * cbSceneParam._m0[5u].z;
    precise float _290 = _289 + _288;
    precise float _291 = _253 * cbSceneParam._m0[6u].x;
    precise float _292 = _254 * cbSceneParam._m0[6u].y;
    precise float _293 = _292 + _291;
    precise float _294 = _255 * cbSceneParam._m0[6u].z;
    precise float _295 = _294 + _293;
    precise float _296 = _253 * cbSceneParam._m0[7u].x;
    precise float _297 = _254 * cbSceneParam._m0[7u].y;
    precise float _298 = _297 + _296;
    precise float _299 = _255 * cbSceneParam._m0[7u].z;
    precise float _300 = _299 + _298;
    precise float _301 = _260 * cbSceneParam._m0[5u].x;
    precise float _302 = _261 * cbSceneParam._m0[5u].y;
    precise float _303 = _302 + _301;
    precise float _304 = _262 * cbSceneParam._m0[5u].z;
    precise float _305 = _304 + _303;
    precise float _306 = _260 * cbSceneParam._m0[6u].x;
    precise float _307 = _261 * cbSceneParam._m0[6u].y;
    precise float _308 = _307 + _306;
    precise float _309 = _262 * cbSceneParam._m0[6u].z;
    precise float _310 = _309 + _308;
    precise float _311 = _260 * cbSceneParam._m0[7u].x;
    precise float _312 = _261 * cbSceneParam._m0[7u].y;
    precise float _313 = _312 + _311;
    precise float _314 = _262 * cbSceneParam._m0[7u].z;
    precise float _315 = _314 + _313;
    precise float _316 = _267 * cbSceneParam._m0[5u].x;
    precise float _317 = _268 * cbSceneParam._m0[5u].y;
    precise float _318 = _317 + _316;
    precise float _319 = _269 * cbSceneParam._m0[5u].z;
    precise float _320 = _319 + _318;
    precise float _321 = _267 * cbSceneParam._m0[6u].x;
    precise float _322 = _268 * cbSceneParam._m0[6u].y;
    precise float _323 = _322 + _321;
    precise float _324 = _269 * cbSceneParam._m0[6u].z;
    precise float _325 = _324 + _323;
    precise float _326 = _267 * cbSceneParam._m0[7u].x;
    precise float _327 = _268 * cbSceneParam._m0[7u].y;
    precise float _328 = _327 + _326;
    precise float _329 = _269 * cbSceneParam._m0[7u].z;
    precise float _330 = _329 + _328;
    precise float _331 = _190 * 0.0;
    precise float _332 = _331 - _191;
    precise float _333 = _191 * 0.0;
    precise float _334 = _188 * 0.0;
    precise float _335 = _333 - _334;
    precise float _336 = _188 - _331;
    precise float _337 = _191 * _335;
    precise float _338 = _190 * _336;
    precise float _339 = _337 - _338;
    precise float _340 = _188 * _336;
    precise float _341 = _191 * _332;
    precise float _342 = _340 - _341;
    precise float _343 = _190 * _332;
    precise float _344 = _188 * _335;
    precise float _345 = _343 - _344;
    float _349 = inversesqrt(dot(vec3(_332, _335, _336), vec3(_332, _335, _336)));
    precise float _350 = _332 * _349;
    precise float _351 = _335 * _349;
    precise float _352 = _336 * _349;
    float _356 = inversesqrt(dot(vec3(_339, _342, _345), vec3(_339, _342, _345)));
    precise float _357 = _339 * _356;
    precise float _358 = _342 * _356;
    precise float _359 = _345 * _356;
    precise float _360 = (-0.0) - _188;
    precise float _362 = (-0.0) - _190;
    precise float _363 = (-0.0) - _191;
    float _367 = inversesqrt(dot(vec3(_360, _362, _363), vec3(_360, _362, _363)));
    precise float _368 = _367 * _360;
    precise float _369 = _367 * _362;
    precise float _370 = _367 * _363;
    precise float _371 = _209 - TEXCOORD_1.x;
    precise float _372 = _210 - TEXCOORD_1.y;
    precise float _373 = _211 - TEXCOORD_1.z;
    precise float _374 = _371 * _350;
    precise float _375 = _372 * _351;
    precise float _376 = _375 + _374;
    precise float _377 = _373 * _352;
    precise float _378 = _377 + _376;
    precise float _379 = _371 * _357;
    precise float _380 = _372 * _358;
    precise float _381 = _380 + _379;
    precise float _382 = _373 * _359;
    precise float _383 = _382 + _381;
    precise float _384 = _371 * _368;
    precise float _385 = _372 * _369;
    precise float _386 = _385 + _384;
    precise float _387 = _373 * _370;
    precise float _388 = _387 + _386;
    precise float _389 = _290 * _378;
    precise float _390 = _295 * _383;
    precise float _391 = _390 + _389;
    precise float _392 = _300 * _388;
    precise float _393 = _392 + _391;
    precise float _394 = _305 * _378;
    precise float _395 = _310 * _383;
    precise float _396 = _395 + _394;
    precise float _397 = _315 * _388;
    precise float _398 = _397 + _396;
    precise float _399 = _320 * _378;
    precise float _400 = _325 * _383;
    precise float _401 = _400 + _399;
    precise float _402 = _330 * _388;
    precise float _403 = _402 + _401;
    precise float _404 = TEXCOORD_1.x + _393;
    precise float _405 = TEXCOORD_1.y + _398;
    precise float _406 = TEXCOORD_1.z + _403;
    precise float _407 = cbObjMatrix._m0[_228].x * _404;
    precise float _408 = _405 * cbObjMatrix._m0[_228].y;
    precise float _409 = _408 + _407;
    precise float _410 = _406 * cbObjMatrix._m0[_228].z;
    precise float _411 = _410 + _409;
    precise float _412 = 1.0 * cbObjMatrix._m0[_228].w;
    precise float _414 = _412 + _411;
    precise float _415 = cbObjMatrix._m0[_235].x * _404;
    precise float _416 = _405 * cbObjMatrix._m0[_235].y;
    precise float _417 = _416 + _415;
    precise float _418 = _406 * cbObjMatrix._m0[_235].z;
    precise float _419 = _418 + _417;
    precise float _420 = 1.0 * cbObjMatrix._m0[_235].w;
    precise float _421 = _420 + _419;
    precise float _422 = cbObjMatrix._m0[_242].x * _404;
    precise float _423 = _405 * cbObjMatrix._m0[_242].y;
    precise float _424 = _423 + _422;
    precise float _425 = _406 * cbObjMatrix._m0[_242].z;
    precise float _426 = _425 + _424;
    precise float _427 = 1.0 * cbObjMatrix._m0[_242].w;
    precise float _428 = _427 + _426;
    float _484 = (((-0.0) - cbObjMatrix._m0[_228].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_228].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_228].y, cbObjMatrix._m0[_228].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _255, fma(cbSceneParam._m0[3u].y, _254, cbSceneParam._m0[3u].x * _253));
    float _487 = (((-0.0) - cbObjMatrix._m0[_235].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_235].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_235].y, cbObjMatrix._m0[_235].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _262, fma(cbSceneParam._m0[3u].y, _261, cbSceneParam._m0[3u].x * _260));
    float _490 = (((-0.0) - cbObjMatrix._m0[_242].w) - fma(TEXCOORD_1.z, cbObjMatrix._m0[_242].z, fma(TEXCOORD_1.y, cbObjMatrix._m0[_242].y, cbObjMatrix._m0[_242].x * TEXCOORD_1.x))) + fma(cbSceneParam._m0[3u].z, _269, fma(cbSceneParam._m0[3u].y, _268, cbSceneParam._m0[3u].x * _267));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    float _495 = _494 * _484;
    float _496 = _494 * _487;
    float _497 = _494 * _490;
    float _500 = fma(_497, _352, fma(_496, _351, _495 * _350));
    float _503 = fma(_497, _359, fma(_496, _358, _495 * _357));
    float _506 = fma(_497, _370, fma(_496, _369, _495 * _368));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    float _511 = _510 * _500;
    float _512 = _510 * _503;
    float _513 = _510 * _506;
    float _529 = float(int(uint(_511 > 0.0) - uint(_511 < 0.0)));
    float _531 = float(int(uint(_513 > 0.0) - uint(_513 < 0.0)));
    float _532 = dot(vec3(_511, _512, _513), vec3(_529, float(int(uint(_512 > 0.0) - uint(_512 < 0.0))), _531));
    float _535 = _511 / _532;
    float _537 = _513 / _532;
    float _545;
    float _546;
    if ((_512 / _532) < 0.0)
    {
        _545 = _529 - (abs(_537) * _529);
        _546 = _531 - (abs(_535) * _531);
    }
    else
    {
        _545 = _535;
        _546 = _537;
    }
    float _550 = (_545 * 0.5) + 0.5;
    float _551 = (_546 * 0.5) + 0.5;
    float _1242 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _1253 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _557 = fma(_191, _352, fma(_190, _351, _350 * _188));
    float _560 = fma(_191, _359, fma(_190, _358, _357 * _188));
    float _563 = fma(_191, _370, fma(_190, _369, _368 * _188));
    float _566 = fma(_300, _563, fma(_295, _560, _557 * _290));
    float _569 = fma(_315, _563, fma(_310, _560, _557 * _305));
    float _572 = fma(_330, _563, fma(_325, _560, _557 * _320));
    float _575 = fma(_572, cbObjMatrix._m0[_228].z, fma(_569, cbObjMatrix._m0[_228].y, _566 * cbObjMatrix._m0[_228].x));
    float _578 = fma(_572, cbObjMatrix._m0[_235].z, fma(_569, cbObjMatrix._m0[_235].y, _566 * cbObjMatrix._m0[_235].x));
    float _581 = fma(_572, cbObjMatrix._m0[_242].z, fma(_569, cbObjMatrix._m0[_242].y, _566 * cbObjMatrix._m0[_242].x));
    float _583 = (-0.0) - _581;
    precise float _595 = TEXCOORD_1.x * cbMtdParam._m0[9u].x;
    uint _603 = _196 + 1u;
    uint _610 = _196 + 2u;
    precise float _617 = TEXCOORD_1.x * cbInstanceData._m0[_196].x;
    precise float _618 = TEXCOORD_1.y * cbInstanceData._m0[_196].y;
    precise float _619 = _618 + _617;
    precise float _620 = TEXCOORD_1.z * cbInstanceData._m0[_196].z;
    precise float _621 = _620 + _619;
    precise float _622 = 1.0 * cbInstanceData._m0[_196].w;
    precise float _623 = _622 + _621;
    precise float _624 = TEXCOORD_1.x * cbInstanceData._m0[_603].x;
    precise float _625 = TEXCOORD_1.y * cbInstanceData._m0[_603].y;
    precise float _626 = _625 + _624;
    precise float _627 = TEXCOORD_1.z * cbInstanceData._m0[_603].z;
    precise float _628 = _627 + _626;
    precise float _629 = 1.0 * cbInstanceData._m0[_603].w;
    precise float _630 = _629 + _628;
    precise float _631 = TEXCOORD_1.x * cbInstanceData._m0[_610].x;
    precise float _632 = TEXCOORD_1.y * cbInstanceData._m0[_610].y;
    precise float _633 = _632 + _631;
    precise float _634 = TEXCOORD_1.z * cbInstanceData._m0[_610].z;
    precise float _635 = _634 + _633;
    precise float _636 = 1.0 * cbInstanceData._m0[_610].w;
    precise float _637 = _636 + _635;
    precise float _638 = _414 - _623;
    precise float _639 = _421 - _630;
    precise float _640 = _428 - _637;
    precise float _641 = _638 * _638;
    precise float _642 = _639 * _639;
    precise float _643 = _641 + _642;
    precise float _644 = _640 * _640;
    precise float _645 = _643 + _644;
    precise float _647 = cbMtdParam._m0[9u].z * sqrt(_645);
    precise float _648 = _595 + _647;
    precise float _649 = cbPerFrame._m0[22u].x + _648;
    uint _650 = _202.w;
    float _651;
    float _653;
    float _655;
    if (_205 == 0u)
    {
        _651 = 0.0;
        _653 = 0.0;
        _655 = 0.0;
    }
    else
    {
        uint _941 = _202.z;
        precise float _652;
        precise float _654;
        precise float _656;
        float _1084;
        float _1086;
        float _1088;
        float _942 = 0.0;
        float _943 = 0.0;
        float _944 = 0.0;
        uint _945 = _941;
        uint _947 = 0u;
        float _983;
        float _1002;
        vec4 _1016;
        float _1017;
        float _1018;
        float _1032;
        float _1033;
        float _1034;
        float _1051;
        float _1052;
        float _1053;
        float _1054;
        bool _1055;
        bool _1056;
        bool _1057;
        precise float _1058;
        precise float _1059;
        precise float _1060;
        float _1061;
        float _1062;
        float _1063;
        precise float _1064;
        bool _1067;
        for (;;)
        {
            uint _949 = _945 & 255u;
            uint _951 = _949 * 24u;
            uvec3 _961 = uvec3(texelFetch(g_forceParam, int(_951)).x, texelFetch(g_forceParam, int(_951 + 1u)).x, texelFetch(g_forceParam, int(_951 + 2u)).x);
            uint _966 = (_949 * 24u) + 4u;
            vec4 _979 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_966)).x, texelFetch(g_forceParam, int(_966 + 1u)).x, texelFetch(g_forceParam, int(_966 + 2u)).x, texelFetch(g_forceParam, int(_966 + 3u)).x));
            _983 = _979.w;
            uint _985 = (_949 * 24u) + 8u;
            vec4 _998 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_985)).x, texelFetch(g_forceParam, int(_985 + 1u)).x, texelFetch(g_forceParam, int(_985 + 2u)).x, texelFetch(g_forceParam, int(_985 + 3u)).x));
            _1002 = _998.w;
            uint _1005 = (_949 * 24u) + 12u;
            _1016 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1005)).x, texelFetch(g_forceParam, int(_1005 + 1u)).x, _1011, texelFetch(g_forceParam, int(_1005 + 3u)).x));
            _1017 = _1016.x;
            _1018 = _1016.w;
            uint _1021 = (_949 * 24u) + 16u;
            vec3 _1031 = uintBitsToFloat(uvec3(texelFetch(g_forceParam, int(_1021)).x, texelFetch(g_forceParam, int(_1021 + 1u)).x, texelFetch(g_forceParam, int(_1021 + 2u)).x));
            _1032 = _1031.x;
            _1033 = _1031.y;
            _1034 = _1031.z;
            uint _1037 = (_949 * 24u) + 20u;
            vec4 _1050 = uintBitsToFloat(uvec4(texelFetch(g_forceParam, int(_1037)).x, texelFetch(g_forceParam, int(_1037 + 1u)).x, texelFetch(g_forceParam, int(_1037 + 2u)).x, texelFetch(g_forceParam, int(_1037 + 3u)).x));
            _1051 = _1050.x;
            _1052 = _1050.y;
            _1053 = _1050.z;
            _1054 = _1050.w;
            _1055 = _961.x == 1u;
            _1056 = _961.y == 1u;
            _1057 = _961.z == 1u;
            _1058 = _623 - _979.x;
            _1059 = _630 - _979.y;
            _1060 = _637 - _979.z;
            _1061 = _1055 ? _998.x : _1058;
            _1062 = _1055 ? _998.y : _1059;
            _1063 = _1055 ? _998.z : _1060;
            _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
            _1067 = _1064 > 0.0;
            float frontier_phi_7_pred;
            float frontier_phi_7_pred_1;
            float frontier_phi_7_pred_2;
            if (_1067)
            {
                precise float _1069 = _1058 * _1058;
                precise float _1070 = _1059 * _1059;
                precise float _1071 = _1069 + _1070;
                precise float _1072 = _1060 * _1060;
                precise float _1073 = _1072 + _1071;
                float _1074 = sqrt(_1073);
                float _1075 = inversesqrt(_1064);
                precise float _1076 = _1061 * _1075;
                precise float _1077 = _1062 * _1075;
                precise float _1078 = _1063 * _1075;
                precise float _1081 = _1074 / (isnan(0.001000000047497451305389404296875) ? _1016.y : (isnan(_1016.y) ? 0.001000000047497451305389404296875 : max(_1016.y, 0.001000000047497451305389404296875)));
                precise float _1082 = 1.0 - _1081;
                float _1269 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
                float _1083 = isnan(1.0) ? _1269 : (isnan(_1269) ? 1.0 : min(_1269, 1.0));
                float _1109;
                if (_1057)
                {
                    float _1096 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
                    precise float _1097 = _1058 * _1096;
                    precise float _1098 = _1059 * _1096;
                    precise float _1099 = _1060 * _1096;
                    precise float _1103 = dot(vec3(_1076, _1077, _1078), vec3(_1097, _1098, _1099)) * 0.800000011920928955078125;
                    precise float _1105 = _1103 + 0.20000000298023223876953125;
                    float _1280 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
                    precise float _1108 = _1083 * (isnan(1.0) ? _1280 : (isnan(_1280) ? 1.0 : min(_1280, 1.0)));
                    _1109 = _1108;
                }
                else
                {
                    _1109 = _1083;
                }
                float frontier_phi_7_pred_9_ladder;
                float frontier_phi_7_pred_9_ladder_1;
                float frontier_phi_7_pred_9_ladder_2;
                if (_1109 > 0.0)
                {
                    bool _1112 = _1055 && (!_1057);
                    precise float _1114 = _1074 * (-4.0);
                    precise float _1118 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1017 : (isnan(_1017) ? 0.001000000047497451305389404296875 : max(_1017, 0.001000000047497451305389404296875)));
                    precise float _1120 = dot(vec2(_1076, _1078), vec2(_1058, _1060));
                    precise float _1124 = _1118 * _1120;
                    precise float _1125 = float(_1112) * _1124;
                    precise float _1126 = _649 * _1118;
                    precise float _1127 = _1126 - _1125;
                    precise float _1128 = (_1112 ? 0.0 : _1114) + _1127;
                    precise float _1130 = _1002 * sin(_1128);
                    precise float _1131 = _1077 * 0.0;
                    precise float _1132 = _1131 - _1078;
                    precise float _1133 = _1078 * 0.0;
                    precise float _1134 = _1076 * 0.0;
                    precise float _1135 = _1133 - _1134;
                    precise float _1136 = _1076 - _1131;
                    precise float _1137 = _1018 * _1130;
                    float _1138 = _1055 ? _1137 : 0.0;
                    float _1180;
                    if (_1056)
                    {
                        precise float _1141 = _1032 * 2.0;
                        precise float _1143 = _1052 + _1053;
                        precise float _1144 = _1054 + _1143;
                        precise float _1146 = 6.283184051513671875 / (isnan(0.001000000047497451305389404296875) ? _1032 : (isnan(_1032) ? 0.001000000047497451305389404296875 : max(_1032, 0.001000000047497451305389404296875)));
                        precise float _1147 = _1051 * _1146;
                        precise float _1148 = (-0.0) - _1076;
                        precise float _1152 = dot(vec2(_1078, _1148), vec2(_1058, _1060)) / _1141;
                        precise float _1153 = (-0.0) - _1152;
                        float _1156 = fract(abs(_1152));
                        precise float _1157 = (-0.0) - _1156;
                        precise float _1159 = _1141 * ((_1152 >= _1153) ? _1156 : _1157);
                        precise float _1160 = _1159 * 6.283184051513671875;
                        precise float _1161 = _1160 / _1141;
                        precise float _1163 = (isnan(5.0) ? _1032 : (isnan(_1032) ? 5.0 : min(_1032, 5.0))) * sin(_1161);
                        precise float _1164 = _1120 + _1163;
                        precise float _1165 = _1032 * 0.25;
                        precise float _1167 = _649 * _1051;
                        precise float _1168 = _1167 - _1165;
                        precise float _1169 = _1168 - _1164;
                        precise float _1170 = _1051 * _1144;
                        precise float _1172 = _1169 / (isnan(0.001000000047497451305389404296875) ? _1170 : (isnan(_1170) ? 0.001000000047497451305389404296875 : max(_1170, 0.001000000047497451305389404296875)));
                        float _1173 = fract(_1172);
                        precise float _1175 = 1.0 - _1173;
                        float _1176 = (_1172 < 0.0) ? _1175 : _1173;
                        precise float _1177 = _1143 / _1144;
                        precise float _1178 = _1052 / _1144;
                        float _1199;
                        if (_1176 < _1178)
                        {
                            precise float _1197 = _1176 / _1178;
                            _1199 = _1197;
                        }
                        else
                        {
                            float frontier_phi_16_15_ladder;
                            if (_1176 < _1177)
                            {
                                precise float _1209 = _1176 - _1178;
                                precise float _1210 = _1177 - _1178;
                                precise float _1211 = _1209 / _1210;
                                precise float _1200 = 1.0 - _1211;
                                frontier_phi_16_15_ladder = _1200;
                            }
                            else
                            {
                                frontier_phi_16_15_ladder = 0.0;
                            }
                            _1199 = frontier_phi_16_15_ladder;
                        }
                        precise float _1201 = _1034 * _1199;
                        precise float _1202 = _1146 * _1120;
                        precise float _1203 = _649 * _1147;
                        precise float _1204 = _1203 - _1202;
                        precise float _1206 = _1033 + sin(_1204);
                        precise float _1208 = _1201 * abs(_1206);
                        precise float _1181 = _1208 + 0.0;
                        _1180 = _1181;
                    }
                    else
                    {
                        _1180 = 0.0;
                    }
                    precise float _1182 = _983 + _1130;
                    precise float _1183 = _1182 + _1180;
                    precise float _1184 = _1076 * _1183;
                    precise float _1185 = _1077 * _1183;
                    precise float _1186 = _1078 * _1183;
                    precise float _1187 = _1132 * _1138;
                    precise float _1188 = _1135 * _1138;
                    precise float _1189 = _1136 * _1138;
                    precise float _1190 = _1187 + _1184;
                    precise float _1191 = _1188 + _1185;
                    precise float _1192 = _1189 + _1186;
                    precise float _1193 = _1109 * _1190;
                    precise float _1194 = _1109 * _1191;
                    precise float _1195 = _1109 * _1192;
                    precise float _1085 = _1193 * 0.0500000007450580596923828125;
                    precise float _1087 = _1194 * 0.0500000007450580596923828125;
                    precise float _1089 = _1195 * 0.0500000007450580596923828125;
                    frontier_phi_7_pred_9_ladder = _1085;
                    frontier_phi_7_pred_9_ladder_1 = _1087;
                    frontier_phi_7_pred_9_ladder_2 = _1089;
                }
                else
                {
                    frontier_phi_7_pred_9_ladder = 0.0;
                    frontier_phi_7_pred_9_ladder_1 = 0.0;
                    frontier_phi_7_pred_9_ladder_2 = 0.0;
                }
                frontier_phi_7_pred = frontier_phi_7_pred_9_ladder;
                frontier_phi_7_pred_1 = frontier_phi_7_pred_9_ladder_1;
                frontier_phi_7_pred_2 = frontier_phi_7_pred_9_ladder_2;
            }
            else
            {
                frontier_phi_7_pred = 0.0;
                frontier_phi_7_pred_1 = 0.0;
                frontier_phi_7_pred_2 = 0.0;
            }
            _1084 = frontier_phi_7_pred;
            _1086 = frontier_phi_7_pred_1;
            _1088 = frontier_phi_7_pred_2;
            _652 = _942 + _1084;
            _654 = _943 + _1086;
            _656 = _944 + _1088;
            uint _948 = _947 + 1u;
            if (_948 == _205)
            {
                break;
            }
            else
            {
                _942 = _652;
                _943 = _654;
                _944 = _656;
                _945 = (_947 != 3u) ? (_945 >> 8u) : _650;
                _947 = _948;
                continue;
            }
        }
        _651 = _652;
        _653 = _654;
        _655 = _656;
    }
    precise float _657 = _651 * _651;
    precise float _658 = _653 * _653;
    precise float _659 = _657 + _658;
    precise float _660 = _655 * _655;
    precise float _661 = _659 + _660;
    float _662 = sqrt(_661);
    bool _663 = _662 < 0.00011000000085914507508277893066406;
    float _668 = inversesqrt(dot(vec3(cbInstanceData._m0[_196].x, cbInstanceData._m0[_603].x, cbInstanceData._m0[_610].x), vec3(cbInstanceData._m0[_196].x, cbInstanceData._m0[_603].x, cbInstanceData._m0[_610].x)));
    precise float _669 = cbInstanceData._m0[_196].x * _668;
    precise float _670 = cbInstanceData._m0[_603].x * _668;
    precise float _671 = cbInstanceData._m0[_610].x * _668;
    float _675 = inversesqrt(dot(vec3(cbInstanceData._m0[_196].y, cbInstanceData._m0[_603].y, cbInstanceData._m0[_610].y), vec3(cbInstanceData._m0[_196].y, cbInstanceData._m0[_603].y, cbInstanceData._m0[_610].y)));
    precise float _676 = cbInstanceData._m0[_196].y * _675;
    precise float _677 = cbInstanceData._m0[_603].y * _675;
    precise float _678 = cbInstanceData._m0[_610].y * _675;
    float _682 = inversesqrt(dot(vec3(cbInstanceData._m0[_196].z, cbInstanceData._m0[_603].z, cbInstanceData._m0[_610].z), vec3(cbInstanceData._m0[_196].z, cbInstanceData._m0[_603].z, cbInstanceData._m0[_610].z)));
    precise float _683 = cbInstanceData._m0[_196].z * _682;
    precise float _684 = cbInstanceData._m0[_603].z * _682;
    precise float _685 = cbInstanceData._m0[_610].z * _682;
    precise float _686 = _669 * 0.0;
    precise float _687 = 1.0 * _676;
    precise float _688 = _687 + _686;
    precise float _689 = 0.0 * _683;
    precise float _690 = _689 + _688;
    precise float _691 = _670 * 0.0;
    precise float _692 = 1.0 * _677;
    precise float _693 = _692 + _691;
    precise float _694 = 0.0 * _684;
    precise float _695 = _694 + _693;
    precise float _696 = _671 * 0.0;
    precise float _697 = 1.0 * _678;
    precise float _698 = _697 + _696;
    precise float _699 = 0.0 * _685;
    precise float _700 = _699 + _698;
    float _704 = inversesqrt(dot(vec3(_651, _653, _655), vec3(_651, _653, _655)));
    precise float _705 = _651 * _704;
    precise float _706 = _653 * _704;
    precise float _707 = _655 * _704;
    precise float _708 = _695 * _707;
    precise float _709 = _700 * _706;
    precise float _710 = _708 - _709;
    precise float _711 = _700 * _705;
    precise float _712 = _690 * _707;
    precise float _713 = _711 - _712;
    precise float _714 = _690 * _706;
    precise float _715 = _695 * _705;
    precise float _716 = _714 - _715;
    float _720 = inversesqrt(dot(vec3(_710, _713, _716), vec3(_710, _713, _716)));
    precise float _721 = _720 * _710;
    precise float _722 = _720 * _713;
    precise float _723 = _720 * _716;
    precise float _724 = _662 + 1.0;
    precise float _726 = cbMtdParam._m0[9u].w * log2(_724);
    precise float _727 = dot(vec3(_721, _722, _723), vec3(_638, _639, _640));
    precise float _730 = _721 * _727;
    precise float _731 = _722 * _727;
    precise float _732 = _723 * _727;
    precise float _733 = _623 + _730;
    precise float _734 = _630 + _731;
    precise float _735 = _637 + _732;
    precise float _736 = _414 - _733;
    precise float _737 = _421 - _734;
    precise float _738 = _428 - _735;
    precise float _739 = _722 * _738;
    precise float _740 = _723 * _737;
    precise float _741 = _739 - _740;
    precise float _742 = _723 * _736;
    precise float _743 = _721 * _738;
    precise float _744 = _742 - _743;
    precise float _745 = _721 * _737;
    precise float _746 = _722 * _736;
    precise float _747 = _745 - _746;
    float _748 = sin(_726);
    float _749 = cos(_726);
    precise float _750 = _736 * _749;
    precise float _751 = _737 * _749;
    precise float _752 = _738 * _749;
    precise float _753 = _748 * _741;
    precise float _754 = _748 * _744;
    precise float _755 = _748 * _747;
    precise float _756 = _750 + _753;
    precise float _757 = _751 + _754;
    precise float _758 = _755 + _752;
    precise float _759 = _733 + _756;
    precise float _760 = _734 + _757;
    precise float _761 = _735 + _758;
    precise float _762 = _759 - _414;
    precise float _763 = _760 - _421;
    precise float _764 = _761 - _428;
    float _765 = _663 ? 0.0 : _762;
    float _766 = _663 ? 0.0 : _763;
    float _767 = _663 ? 0.0 : _764;
    precise float _768 = _414 + _765;
    precise float _769 = _421 + _766;
    precise float _770 = _428 + _767;
    float _778 = ((fma(_406, cbPrevObjMatrix._m0[_228].z, fma(_405, cbPrevObjMatrix._m0[_228].y, cbPrevObjMatrix._m0[_228].x * _404)) + cbPrevObjMatrix._m0[_228].w) - cbSceneParam._m0[28u].x) + _765;
    float _780 = ((fma(_406, cbPrevObjMatrix._m0[_235].z, fma(_405, cbPrevObjMatrix._m0[_235].y, cbPrevObjMatrix._m0[_235].x * _404)) + cbPrevObjMatrix._m0[_235].w) - cbSceneParam._m0[28u].y) + _766;
    float _782 = ((fma(_406, cbPrevObjMatrix._m0[_242].z, fma(_405, cbPrevObjMatrix._m0[_242].y, cbPrevObjMatrix._m0[_242].x * _404)) + cbPrevObjMatrix._m0[_242].w) - cbSceneParam._m0[28u].z) + _767;
    precise float _827 = _768 - cbSceneParam._m0[3u].x;
    precise float _828 = _769 - cbSceneParam._m0[3u].y;
    precise float _829 = _770 - cbSceneParam._m0[3u].z;
    precise float _857 = _827 * cbSceneParam._m0[24u].x;
    precise float _858 = _828 * cbSceneParam._m0[24u].y;
    precise float _859 = _858 + _857;
    precise float _860 = _829 * cbSceneParam._m0[24u].z;
    precise float _861 = _860 + _859;
    precise float _862 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _863 = _862 + _861;
    precise float _864 = _827 * cbSceneParam._m0[25u].x;
    precise float _865 = _828 * cbSceneParam._m0[25u].y;
    precise float _866 = _865 + _864;
    precise float _867 = _829 * cbSceneParam._m0[25u].z;
    precise float _868 = _867 + _866;
    precise float _869 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _870 = _869 + _868;
    precise float _871 = _827 * cbSceneParam._m0[26u].x;
    precise float _872 = _828 * cbSceneParam._m0[26u].y;
    precise float _873 = _872 + _871;
    precise float _874 = _829 * cbSceneParam._m0[26u].z;
    precise float _875 = _874 + _873;
    precise float _876 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _877 = _876 + _875;
    precise float _878 = _827 * cbSceneParam._m0[27u].x;
    precise float _879 = _828 * cbSceneParam._m0[27u].y;
    precise float _880 = _879 + _878;
    precise float _881 = _829 * cbSceneParam._m0[27u].z;
    precise float _882 = _881 + _880;
    precise float _883 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _884 = _883 + _882;
    gl_Position.x = _863;
    gl_Position.y = _870;
    gl_Position.z = _877;
    gl_Position.w = _884;
    POSITION_1.x = _863;
    POSITION_1.y = _870;
    POSITION_1.z = _877;
    POSITION_1.w = _884;
    NORMAL_1.x = _575;
    NORMAL_1.y = _578;
    NORMAL_1.z = _581;
    NORMAL_1.w = float(_219);
    TANGENT_1.x = (-0.0) - (_575 * _578);
    TANGENT_1.y = (_575 * _575) - (_581 * _583);
    TANGENT_1.z = _578 * _583;
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = isnan(1.0) ? _1242 : (isnan(_1242) ? 1.0 : min(_1242, 1.0));
    TEXCOORD_2.w = 1.0 - (isnan(1.0) ? _1253 : (isnan(_1253) ? 1.0 : min(_1253, 1.0)));
    TEXCOORD_3.x = TEXCOORD_1.x;
    TEXCOORD_3.y = TEXCOORD_1.y;
    TEXCOORD_3.z = TEXCOORD_1.z;
    TEXCOORD_3.w = COLOR_1.x;
    TEXCOORD_10.x = _863;
    TEXCOORD_10.y = _870;
    TEXCOORD_10.z = _877;
    TEXCOORD_10.w = _884;
    TEXCOORD_11.x = fma(_782, cbSceneParam._m0[29u].z, fma(_780, cbSceneParam._m0[29u].y, _778 * cbSceneParam._m0[29u].x)) + cbSceneParam._m0[29u].w;
    TEXCOORD_11.y = fma(_782, cbSceneParam._m0[30u].z, fma(_780, cbSceneParam._m0[30u].y, _778 * cbSceneParam._m0[30u].x)) + cbSceneParam._m0[30u].w;
    TEXCOORD_11.z = fma(_782, cbSceneParam._m0[31u].z, fma(_780, cbSceneParam._m0[31u].y, _778 * cbSceneParam._m0[31u].x)) + cbSceneParam._m0[31u].w;
    TEXCOORD_11.w = fma(_782, cbSceneParam._m0[32u].z, fma(_780, cbSceneParam._m0[32u].y, cbSceneParam._m0[32u].x * _778)) + cbSceneParam._m0[32u].w;
    TEXCOORD_12.x = _575;
    TEXCOORD_12.y = _578;
    TEXCOORD_12.z = _581;
    gl_ClipDistance[0u] = dot(vec4(_863, _870, _877, _884), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_863, _870, _877, _884), vec4(cbInstanceData._m0[_221 + 3u]));
}


