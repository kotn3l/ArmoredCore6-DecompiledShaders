#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail4Blend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail4Blend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail4Blend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail4Blend_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail4Blend_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail4Blend_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_Detail4Blend_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_Detail4Blend_snp_0_Texture2D_6;
layout(set = 0, binding = 8) uniform texture2D C_Detail4Blend_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D C_Detail4Blend_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1292;
float _3701;
float _3702;
float _3703;
float _3704;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _254.z;
    float _260 = _254.w;
    float _266 = exp2(log2(_259 * 22.0) * 260.0);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    float _274 = exp2(log2(1.0 - _260) * 10.0);
    vec4 _287 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _312 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _323 = cbMtdParam._m0[9u].x * _312.x;
    float _324 = cbMtdParam._m0[9u].y * _312.y;
    float _325 = cbMtdParam._m0[9u].z * _312.z;
    float _332 = (((cbMtdParam._m0[10u].x * _287.x) - _323) * _274) + _323;
    float _333 = (((cbMtdParam._m0[10u].y * _287.y) - _324) * _274) + _324;
    float _334 = (((cbMtdParam._m0[10u].z * _287.z) - _325) * _274) + _325;
    float _337 = exp2(log2(_260) * 10.0);
    vec4 _349 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _384 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _395 = cbMtdParam._m0[12u].x * _384.x;
    float _396 = cbMtdParam._m0[12u].y * _384.y;
    float _397 = cbMtdParam._m0[12u].z * _384.z;
    vec4 _418 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _423 = _418.w;
    float _426 = ((((((((cbMtdParam._m0[11u].x * _349.x) - _332) * _337) + _332) - _395) * _268) + _395) * 4.55000019073486328125) * _418.x;
    float _428 = ((((((((cbMtdParam._m0[11u].y * _349.y) - _333) * _337) + _333) - _396) * _268) + _396) * 4.55000019073486328125) * _418.y;
    float _430 = ((((((((cbMtdParam._m0[11u].z * _349.z) - _334) * _337) + _334) - _397) * _268) + _397) * 4.55000019073486328125) * _418.z;
    vec4 _447 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _469 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _471 = _469.x;
    float _472 = _469.y;
    float _475 = cbMtdParam._m0[13u].x + _469.z;
    float _478 = (((cbMtdParam._m0[13u].y + _447.z) - _475) * _274) + _475;
    vec4 _491 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _515 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _517 = _515.x;
    float _518 = _515.y;
    float _521 = cbMtdParam._m0[13u].z + _515.z;
    float _524 = ((((_259 * 2.0) * ((((_491.z - _478) + cbMtdParam._m0[14u].y) * _337) + _478)) - _521) * _268) + _521;
    float _535 = ((_447.x - _471) * _274) + _471;
    float _536 = ((_447.y - _472) * _274) + _472;
    float _551 = (((((((_491.x - _535) * _337) + _535) - _517) * _268) + _517) * 2.0) + (-1.0);
    float _552 = (((((((_491.y - _536) * _337) + _536) - _518) * _268) + _518) * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3723 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _558 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    float _561 = _551 + (cbMtdParam._m0[13u].w * ((_254.x * 2.0) + (-1.0)));
    float _562 = _552 + (cbMtdParam._m0[13u].w * ((_254.y * 2.0) + (-1.0)));
    float _565 = fma(_558, _238, fma(_562, _230 * TANGENT.x, (_216 * _208) * _561));
    float _568 = fma(_558, _239, fma(_562, _230 * TANGENT.y, (_216 * _209) * _561));
    float _571 = fma(_558, _240, fma(_562, _230 * TANGENT.z, (_216 * _210) * _561));
    float _575 = inversesqrt(dot(vec3(_565, _568, _571), vec3(_565, _568, _571)));
    float _576 = _575 * _565;
    float _577 = _575 * _568;
    float _578 = _575 * _571;
    float _3734 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _579 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _580 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _581 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _582 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _583 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _584 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _600 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _650 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _640);
    float _651 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _640);
    float _652 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _640);
    float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
    float _657 = _650 * _656;
    float _658 = _651 * _656;
    float _659 = _652 * _656;
    vec4 _664 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _666 = _664.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _971 = sqrt(((_650 * _650) + (_651 * _651)) + (_652 * _652));
        float _977 = (cbMatDynParam._m0[5u].x * _971) + cbMatDynParam._m0[5u].y;
        float _3800 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _982 = (cbMatDynParam._m0[5u].z * _971) + cbMatDynParam._m0[5u].w;
        float _3811 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) - _978)) + _978) < ((_666 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _680 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _682 = _680.w;
    float _700 = fma(_578, cbSceneParam._m0[5u].z, fma(_577, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _576));
    float _703 = fma(_578, cbSceneParam._m0[6u].z, fma(_577, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _576));
    float _706 = fma(_578, cbSceneParam._m0[7u].z, fma(_577, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _576));
    vec4 _708 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _710 = _708.x;
    float _722 = (((_708.y - _580) + (_708.w * _580)) * cbMtdParam._m0[3u].x) + _580;
    float _739 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_710 * _710)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _747 = (((cbMatDynParam._m0[15u].x - _584) * cbMatDynParam._m0[15u].w) * _739) + _584;
    float _756 = ((_739 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _722)) + _722;
    uint _780 = uint(roundEven(NORMAL.w)) * 13u;
    uint _781 = _780 + 9u;
    uint _782 = _781 + uint(cbMatDynParam._m0[0u].w);
    float _788 = (cbMtdParam._m0[0u].x * _581) * cbInstanceData._m0[_782].x;
    float _789 = (cbMtdParam._m0[0u].y * _582) * cbInstanceData._m0[_782].y;
    float _790 = (cbMtdParam._m0[0u].z * _583) * cbInstanceData._m0[_782].z;
    float _3822 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    vec4 _794 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _799 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _810 = (((_799.x - _747) + (_799.w * _747)) * cbMtdParam._m0[3u].x) + _747;
    float _823 = (cbMtdParam._m0[3u].x * (((_791 * _682) - _791) + _794.x)) + _791;
    float _824 = (cbMtdParam._m0[3u].x * (((_792 * _682) - _792) + _794.y)) + _792;
    float _825 = (cbMtdParam._m0[3u].x * (((_793 * _682) - _793) + _794.z)) + _793;
    vec4 _826 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _839 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_747 * (_581 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_747 * (_582 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_747 * (_583 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _826.z;
    float _843 = _839 * cbMatDynParam._m0[13u].w;
    float _853 = (_843 * (cbMatDynParam._m0[13u].x - _823)) + _823;
    float _854 = (_843 * (cbMatDynParam._m0[13u].y - _824)) + _824;
    float _855 = (_843 * (cbMatDynParam._m0[13u].z - _825)) + _825;
    float _863 = ((_839 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _810)) + _810;
    float _864 = 1.0 - _863;
    float _865 = _864 * _853;
    float _866 = _864 * _854;
    float _867 = _864 * _855;
    float _871 = (_853 + (-0.039999999105930328369140625)) * _863;
    float _872 = (_854 + (-0.039999999105930328369140625)) * _863;
    float _873 = (_855 + (-0.039999999105930328369140625)) * _863;
    float _874 = _871 + 0.039999999105930328369140625;
    float _875 = _872 + 0.039999999105930328369140625;
    float _876 = _873 + 0.039999999105930328369140625;
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _888 = _885.x * TEXCOORD_4;
    float _889 = dot(vec3(_576, _577, _578), vec3(_657, _658, _659));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _576) - _657;
    float _897 = (_892 * _577) - _658;
    float _898 = (_892 * _578) - _659;
    float _902 = abs(dot(vec3(_657, _658, _659), vec3(_576, _577, _578)));
    float _3855 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_756);
    float _917 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _923 = (1.0 - _917) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _924 = _917 * _904;
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1291;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1016 = fma(_960, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952));
        float _1020 = fma(_960, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952));
        float _1024 = fma(_960, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952));
        float _1049 = _952 + _576;
        float _1050 = _956 + _577;
        float _1051 = _960 + _578;
        float _1061 = fma(_1051, cbModelParam._m0[26u].z, fma(_1050, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049)) - _1016;
        float _1062 = fma(_1051, cbModelParam._m0[27u].z, fma(_1050, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049)) - _1020;
        float _1063 = fma(_1051, cbModelParam._m0[28u].z, fma(_1050, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049)) - _1024;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1016 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1020 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[34u].z) + ((((((_1024 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1119 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1085.x + (-0.5));
        float _1121 = _1119 * (_1085.y + (-0.5));
        float _1122 = _1119 * (_1085.z + (-0.5));
        float _1129 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1092.x + (-0.5));
        float _1131 = _1129 * (_1092.y + (-0.5));
        float _1132 = _1129 * (_1092.z + (-0.5));
        float _1139 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1099.x + (-0.5));
        float _1141 = _1139 * (_1099.y + (-0.5));
        float _1142 = _1139 * (_1099.z + (-0.5));
        float _1149 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1106.x + (-0.5));
        float _1151 = _1149 * (_1106.y + (-0.5));
        float _1152 = _1149 * (_1106.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1173 = (dot(vec3(_576, _577, _578), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1183 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3903 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1185 + 1.0))) + _1190) * _1153;
        float _1200 = _1121 * 0.5;
        float _1201 = _1131 * 0.5;
        float _1202 = _1141 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_576, _577, _578), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3936 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1227 + 1.0))) + _1232) * _1154;
        float _1242 = _1122 * 0.5;
        float _1243 = _1132 * 0.5;
        float _1244 = _1142 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_576, _577, _578), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3969 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1269 + 1.0))) + _1274) * _1155;
        _1291 = _1122;
        _1293 = _1121;
        _1294 = _1120;
        _1295 = _1132;
        _1296 = _1131;
        _1297 = _1130;
        _1298 = _1142;
        _1299 = _1141;
        _1300 = _1140;
        _1301 = _1155;
        _1302 = _1154;
        _1303 = _1153;
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _1292;
        _1293 = _1292;
        _1294 = _1292;
        _1295 = _1292;
        _1296 = _1292;
        _1297 = _1292;
        _1298 = _1292;
        _1299 = _1292;
        _1300 = _1292;
        _1301 = _1292;
        _1302 = _1292;
        _1303 = _1292;
        _1304 = 0.0;
        _1305 = 0.0;
        _1306 = 0.0;
    }
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1335 = fma(_960, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952));
        float _1339 = fma(_960, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952));
        float _1343 = fma(_960, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952));
        float _1366 = _952 + _576;
        float _1367 = _956 + _577;
        float _1368 = _960 + _578;
        float _1378 = fma(_1368, cbModelParam._m0[30u].z, fma(_1367, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1366)) - _1335;
        float _1379 = fma(_1368, cbModelParam._m0[31u].z, fma(_1367, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1366)) - _1339;
        float _1380 = fma(_1368, cbModelParam._m0[32u].z, fma(_1367, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1366)) - _1343;
        float _1384 = inversesqrt(dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380)));
        float _1397 = ((_1384 * _1378) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1335 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1384 * _1379) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1339 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1384 * _1380) / cbModelParam._m0[35u].z) + ((((((_1343 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        float _1434 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1401.x + (-0.5));
        float _1436 = _1434 * (_1401.y + (-0.5));
        float _1437 = _1434 * (_1401.z + (-0.5));
        float _1444 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1408.x + (-0.5));
        float _1446 = _1444 * (_1408.y + (-0.5));
        float _1447 = _1444 * (_1408.z + (-0.5));
        float _1454 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1415.x + (-0.5));
        float _1456 = _1454 * (_1415.y + (-0.5));
        float _1457 = _1454 * (_1415.z + (-0.5));
        float _1464 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1422.x + (-0.5));
        float _1466 = _1464 * (_1422.y + (-0.5));
        float _1467 = _1464 * (_1422.z + (-0.5));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = _1435 * 0.5;
        float _1472 = _1445 * 0.5;
        float _1473 = _1455 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_576, _577, _578), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4032 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1498 + 1.0))) + _1503) * _1468;
        float _1513 = _1436 * 0.5;
        float _1514 = _1446 * 0.5;
        float _1515 = _1456 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_576, _577, _578), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4065 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1540 + 1.0))) + _1545) * _1469;
        float _1555 = _1437 * 0.5;
        float _1556 = _1447 * 0.5;
        float _1557 = _1457 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_576, _577, _578), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4098 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1582 + 1.0))) + _1587) * _1470;
        _1604 = _1437;
        _1605 = _1436;
        _1606 = _1435;
        _1607 = _1447;
        _1608 = _1446;
        _1609 = _1445;
        _1610 = _1457;
        _1611 = _1456;
        _1612 = _1455;
        _1613 = _1470;
        _1614 = _1469;
        _1615 = _1468;
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    }
    else
    {
        _1604 = _1292;
        _1605 = _1292;
        _1606 = _1292;
        _1607 = _1292;
        _1608 = _1292;
        _1609 = _1292;
        _1610 = _1292;
        _1611 = _1292;
        _1612 = _1292;
        _1613 = _1292;
        _1614 = _1292;
        _1615 = _1292;
        _1616 = 0.0;
        _1617 = 0.0;
        _1618 = 0.0;
    }
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1306)) + _1306;
    float _1651 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1628));
    float _1672 = _896 * 0.5;
    float _1673 = _897 * 0.5;
    float _1674 = _898 * 0.5;
    float _1675 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1678 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1681 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1712;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1688 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1291, _1295, _1298, _1301));
        float _1692 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1696 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1703 = dot(vec4(cbModelParam._m0[39u]), vec4(_1672, _1673, _1674, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1723;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1714 = dot(vec4(cbModelParam._m0[40u]), vec4(_1672, _1673, _1674, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1727 = (_1723 * cbModelParam._m0[1u].x) + (_1712 * (1.0 - cbModelParam._m0[1u].x));
    float _1737 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _756);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1737 : min(cbModelParam._m0[25u].z, _1737));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1785 = fma(_960, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952)) + cbModelParam._m0[13u].w;
        float _1789 = fma(_960, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952)) + cbModelParam._m0[14u].w;
        float _1793 = fma(_960, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952)) + cbModelParam._m0[15u].w;
        float _1796 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1799 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1802 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1830;
        if (_1796 > 0.0)
        {
            _1830 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1830 = frontier_phi_19_17_ladder;
        }
        float _2057;
        if (_1799 > 0.0)
        {
            _2057 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2057 = frontier_phi_28_24_ladder;
        }
        float _2314;
        if (_1802 > 0.0)
        {
            _2314 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2314 = frontier_phi_40_35_ladder;
        }
        float _2316 = isnan(_2057) ? _1830 : (isnan(_1830) ? _2057 : min(_1830, _2057));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1796) + _1785;
        float _2322 = (_2317 * _1799) + _1789;
        float _2323 = (_2317 * _1802) + _1793;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2324;
        float _2328 = _2324 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 > _2328) || ((_2322 < _2326) || ((_2321 < _2326) || (_2321 > _2328))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2323, cbModelParam._m0[9u].z, fma(_2322, cbModelParam._m0[9u].y, _2321 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2323, cbModelParam._m0[10u].z, fma(_2322, cbModelParam._m0[10u].y, _2321 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2323, cbModelParam._m0[11u].z, fma(_2322, cbModelParam._m0[11u].y, _2321 * cbModelParam._m0[11u].x))), _1738);
            frontier_phi_18_40_ladder = _2451.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2451.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2451.x * cbModelParam._m0[1u].y;
        }
        _1818 = frontier_phi_18_40_ladder_2;
        _1820 = frontier_phi_18_40_ladder_1;
        _1822 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1738);
        _1818 = _1806.x * cbModelParam._m0[1u].y;
        _1820 = _1806.y * cbModelParam._m0[1u].y;
        _1822 = _1806.z * cbModelParam._m0[1u].y;
    }
    float _1826 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _756);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1826 : min(cbModelParam._m0[25u].w, _1826));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1884 = fma(_960, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952)) + cbModelParam._m0[21u].w;
        float _1888 = fma(_960, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952)) + cbModelParam._m0[22u].w;
        float _1892 = fma(_960, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952)) + cbModelParam._m0[23u].w;
        float _1895 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1898 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1901 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _2062;
        if (_1895 > 0.0)
        {
            _2062 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2062 = frontier_phi_30_26_ladder;
        }
        float _2341;
        if (_1898 > 0.0)
        {
            _2341 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2341 = frontier_phi_42_37_ladder;
        }
        float _2554;
        if (_1901 > 0.0)
        {
            _2554 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2554 = frontier_phi_51_48_ladder;
        }
        float _2556 = isnan(_2341) ? _2062 : (isnan(_2062) ? _2341 : min(_2062, _2341));
        float _2557 = isnan(_2554) ? _2556 : (isnan(_2556) ? _2554 : min(_2556, _2554));
        float _2561 = (_2557 * _1895) + _1884;
        float _2562 = (_2557 * _1898) + _1888;
        float _2563 = (_2557 * _1901) + _1892;
        float _2564 = _2557 * 9.9999997473787516355514526367188e-05;
        float _2565 = (-1.0) - _2564;
        float _2567 = _2564 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2563 > _2567) || ((_2563 < _2565) || ((_2562 > _2567) || ((_2562 < _2565) || ((_2561 < _2565) || (_2561 > _2567))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2563, cbModelParam._m0[17u].z, fma(_2562, cbModelParam._m0[17u].y, _2561 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2563, cbModelParam._m0[18u].z, fma(_2562, cbModelParam._m0[18u].y, _2561 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2563, cbModelParam._m0[19u].z, fma(_2562, cbModelParam._m0[19u].y, _2561 * cbModelParam._m0[19u].x))), _1827);
            frontier_phi_27_51_ladder = _2763.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2763.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2763.x * cbModelParam._m0[1u].z;
        }
        _1920 = frontier_phi_27_51_ladder_2;
        _1922 = frontier_phi_27_51_ladder_1;
        _1924 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1827);
        _1920 = _1904.x * cbModelParam._m0[1u].z;
        _1922 = _1904.y * cbModelParam._m0[1u].z;
        _1924 = _1904.z * cbModelParam._m0[1u].z;
    }
    float _1937 = (((_923 * _874) + _924) * _888) * ((cbModelParam._m0[1u].w * (_1920 - _1818)) + _1818);
    float _1939 = (((_923 * _875) + _924) * _888) * ((cbModelParam._m0[1u].w * (_1922 - _1820)) + _1820);
    float _1941 = (((_923 * _876) + _924) * _888) * ((cbModelParam._m0[1u].w * (_1924 - _1822)) + _1822);
    float _1944 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1939, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1939, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1939, cbSceneParam._m0[91u].y, _1937 * cbSceneParam._m0[91u].x));
    vec4 _1958 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_677, _678));
    float _1960 = _1958.w;
    float _1972 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1960);
    float _1973 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1960);
    float _1974 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1960);
    uvec4 _1978 = floatBitsToUint(cbInstanceData._m0[_780 + 5u]);
    uint _1980 = _1978.x * 14u;
    uint _1981 = _1980 + 13u;
    float _1988 = _888 + (-1.0);
    float _1993 = (cbLight._m0[_1981].x * _1988) + 1.0;
    float _1994 = (cbLight._m0[_1981].y * _1988) + 1.0;
    float _1995 = (cbLight._m0[_1981].z * _1988) + 1.0;
    float _1996 = (cbLight._m0[_1981].w * _1988) + 1.0;
    uint _1997 = _1980 + 5u;
    float _2003 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
    uint _2007 = _1980 + 4u;
    float _2016 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
    uint _2020 = _1980 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_576, _577, _578));
    float _2034 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_576, _577, _578));
    float _4234 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _4245 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2039 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2041 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _2048 = ((cbLight._m0[_1997].x * _2003) * _2041) + (((cbLight._m0[_2007].x * _1972) * _2016) * _2039);
    float _2049 = ((_2003 * cbLight._m0[_1997].y) * _2041) + (((cbLight._m0[_2007].y * _1973) * _2016) * _2039);
    float _2050 = ((_2003 * cbLight._m0[_1997].z) * _2041) + (((cbLight._m0[_2007].z * _1974) * _2016) * _2039);
    uvec4 _2054 = floatBitsToUint(cbLight._m0[_1980 + 12u]);
    bool _2056 = _2054.x == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2056)
    {
        _2067 = _2048;
        _2069 = _2049;
        _2071 = _2050;
    }
    else
    {
        uint _2075 = _1980 + 6u;
        float _2091 = (dot(vec3(cbLight._m0[_1980 + 2u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4256 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2094 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2067 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _2048;
        _2069 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _2049;
        _2071 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _2050;
    }
    bool _2074 = _2054.y == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2074)
    {
        _2112 = _2067;
        _2114 = _2069;
        _2116 = _2071;
    }
    else
    {
        uint _2285 = _1980 + 7u;
        float _2301 = (dot(vec3(cbLight._m0[_1980 + 3u].xyz), vec3(_576, _577, _578)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4272 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2304 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2112 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2067;
        _2114 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2069;
        _2116 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2071;
    }
    uint _2119 = _1980 + 8u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _756) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1980].x + _657;
    float _2135 = cbLight._m0[_1980].y + _658;
    float _2136 = cbLight._m0[_1980].z + _659;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_1980].xyz));
    float _4288 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2148 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2149 = dot(vec3(_576, _577, _578), vec3(_2141, _2142, _2143));
    float _4310 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2141, _2142, _2143));
    float _4321 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2133 * _2133;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
    float _2170 = 0.959999978542327880859375 - _871;
    float _2172 = 0.959999978542327880859375 - _872;
    float _2173 = 0.959999978542327880859375 - _873;
    float _2180 = 1.0 - _2133;
    float _2191 = (0.5 / (((_2148 * ((_2147 * _2180) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2180) + _2133) * _2147))) * _2147;
    float _4332 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    uint _2207 = _1980 + 9u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _756) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_2020].x + _657;
    float _2221 = cbLight._m0[_2020].y + _658;
    float _2222 = cbLight._m0[_2020].z + _659;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2020].xyz));
    float _4343 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2234 = dot(vec3(_576, _577, _578), vec3(_2227, _2228, _2229));
    float _4354 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2227, _2228, _2229));
    float _4365 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2219 * _2219;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
    float _2260 = 1.0 - _2219;
    float _2270 = (0.5 / (((_2148 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2260) + _2219) * _2233))) * _2233;
    float _4376 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    float _2282 = (((((_2253 * _2170) + _874) * cbLight._m0[_2207].x) * _2272) * _2003) + ((((cbLight._m0[_2119].x * _1972) * ((_2169 * _2170) + _874)) * _2193) * _2016);
    float _2283 = (((((_2253 * _2172) + _875) * cbLight._m0[_2207].y) * _2272) * _2003) + ((((cbLight._m0[_2119].y * _1973) * ((_2169 * _2172) + _875)) * _2193) * _2016);
    float _2284 = (((((_2253 * _2173) + _876) * cbLight._m0[_2207].z) * _2272) * _2003) + ((((cbLight._m0[_2119].z * _1974) * ((_2169 * _2173) + _876)) * _2193) * _2016);
    float _2346;
    float _2348;
    float _2350;
    if (_2056)
    {
        _2346 = _2282;
        _2348 = _2283;
        _2350 = _2284;
    }
    else
    {
        uint _2352 = _1980 + 2u;
        uint _2356 = _1980 + 10u;
        float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _756) * 0.949999988079071044921875);
        float _2371 = _2370 * _2370;
        float _2372 = cbLight._m0[_2352].x + _657;
        float _2373 = cbLight._m0[_2352].y + _658;
        float _2374 = cbLight._m0[_2352].z + _659;
        float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
        float _2379 = _2378 * _2372;
        float _2380 = _2378 * _2373;
        float _2381 = _2378 * _2374;
        float _2382 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2352].xyz));
        float _4387 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2386 = dot(vec3(_576, _577, _578), vec3(_2379, _2380, _2381));
        float _4398 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2390 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2379, _2380, _2381));
        float _4409 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2394 = _2371 * _2371;
        float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
        float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
        float _2412 = 1.0 - _2371;
        float _2422 = (0.5 / (((_2148 * ((_2385 * _2412) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2412) + _2371) * _2385))) * _2385;
        float _4420 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2424 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
        float _2425 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2346 = (((((_2405 * _2170) + _874) * cbLight._m0[_2356].x) * _2424) * _2425) + _2282;
        _2348 = (((((_2405 * _2172) + _875) * cbLight._m0[_2356].y) * _2424) * _2425) + _2283;
        _2350 = (((((_2405 * _2173) + _876) * cbLight._m0[_2356].z) * _2424) * _2425) + _2284;
    }
    float _2460;
    float _2462;
    float _2464;
    if (_2074)
    {
        _2460 = _2346;
        _2462 = _2348;
        _2464 = _2350;
    }
    else
    {
        uint _2471 = _1980 + 3u;
        uint _2475 = _1980 + 11u;
        float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _756) * 0.949999988079071044921875);
        float _2490 = _2489 * _2489;
        float _2491 = cbLight._m0[_2471].x + _657;
        float _2492 = cbLight._m0[_2471].y + _658;
        float _2493 = cbLight._m0[_2471].z + _659;
        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
        float _2498 = _2497 * _2491;
        float _2499 = _2497 * _2492;
        float _2500 = _2497 * _2493;
        float _2501 = dot(vec3(_576, _577, _578), vec3(cbLight._m0[_2471].xyz));
        float _4436 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2505 = dot(vec3(_576, _577, _578), vec3(_2498, _2499, _2500));
        float _4447 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2509 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2498, _2499, _2500));
        float _4458 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2513 = _2490 * _2490;
        float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
        float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
        float _2531 = 1.0 - _2490;
        float _2541 = (0.5 / (((_2148 * ((_2504 * _2531) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2531) + _2490) * _2504))) * _2504;
        float _4469 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2460 = (((((_2524 * _2170) + _874) * cbLight._m0[_2475].x) * _2543) * _2544) + _2346;
        _2462 = (((((_2524 * _2172) + _875) * cbLight._m0[_2475].y) * _2543) * _2544) + _2348;
        _2464 = (((((_2524 * _2173) + _876) * cbLight._m0[_2475].z) * _2543) * _2544) + _2350;
    }
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_1978.y == 0u)
    {
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2619;
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2619;
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2619;
        uvec4 _2634 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2635 = _2634.x;
        uint _2646 = uint((float(_2634.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2635))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2635)));
        float _2656 = (log2(_2622 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2657 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        uint _2660 = uint(isnan(14.0) ? _2657 : (isnan(_2657) ? 14.0 : min(_2657, 14.0)));
        uvec4 _2665 = texelFetch(g_lightClusterGridBuffer, int(((_2660 << 2u) + (_2646 << 6u)) >> 2u));
        uint _2666 = _2665.x;
        uint _2667 = _2634.z;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        if (((((1u << ((_2667 >> 4u) & 15u)) + 4294967295u) & _2666) == 0u) || ((_2667 & 240u) == 0u))
        {
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
        }
        else
        {
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            uint _2926 = 0u;
            uint _2935;
            bool _2936;
            for (;;)
            {
                _2935 = texelFetch(g_lightClassification, int((((_2660 << 5u) + (_2646 << 9u)) + (_2926 << 2u)) >> 2u)).x;
                _2936 = _2935 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2936)
                {
                    frontier_phi_68_pred = _2922;
                    frontier_phi_68_pred_1 = _2925;
                    frontier_phi_68_pred_2 = _2924;
                    frontier_phi_68_pred_3 = _2923;
                    frontier_phi_68_pred_4 = _2921;
                    frontier_phi_68_pred_5 = _2920;
                }
                else
                {
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    uint _3071;
                    _3065 = _2920;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2935;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    for (;;)
                    {
                        uint _3075 = uint(findLSB(_3071)) + (_2926 << 5u);
                        uint _3072 = (_3071 + 4294967295u) & _3071;
                        uint _3077 = _3075 * 48u;
                        vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 3u)).x));
                        uint _3097 = (_3075 * 48u) + 4u;
                        vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 3u)).x));
                        uint _3116 = (_3075 * 48u) + 8u;
                        vec3 _3127 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x));
                        float _3131 = _3091.x - _2620;
                        float _3132 = _3091.y - _2621;
                        float _3133 = _3091.z - _2622;
                        float _3134 = dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133));
                        float _3137 = inversesqrt(_3134);
                        float _3138 = _3137 * _3131;
                        float _3139 = _3137 * _3132;
                        float _3140 = _3137 * _3133;
                        float _3141 = dot(vec3(_700, _703, _706), vec3(_3138, _3139, _3140));
                        float _3146 = 1.0 - (_3134 * _3091.w);
                        float _4495 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3147 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3148 = sqrt(_3134) * _3110.w;
                        float _3151 = 1.39999997615814208984375 / (_3148 + 1.39999997615814208984375);
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3141) + _3152;
                        float _3158 = _3148 * _3148;
                        float _3162 = ((isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))) * _3147) / ((_3158 * 0.699999988079071044921875) + 1.0);
                        float _3166 = (-0.0) - _2620;
                        float _3167 = (-0.0) - _2621;
                        float _3168 = (-0.0) - _2622;
                        float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
                        float _3173 = _3172 * _3166;
                        float _3174 = _3172 * _3167;
                        float _3175 = _3172 * _3168;
                        float _3183 = exp2(log2(1.0 / ((_3158 * 3.5) + 5.0)) * 0.25);
                        float _3184 = 1.0 - _904;
                        float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                        float _3192 = _3191 * _3191;
                        float _3193 = _3192 * _3192;
                        float _3194 = _3173 + _3138;
                        float _3195 = _3174 + _3139;
                        float _3196 = _3175 + _3140;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3204 = dot(vec3(_700, _703, _706), vec3(_3173, _3174, _3175));
                        float _4511 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3208 = dot(vec3(_700, _703, _706), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                        float _4522 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                        float _3216 = _3151 * _3192;
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3141) + _3217;
                        float _4533 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3222 = 1.0 - _3192;
                        float _3232 = (0.5 / (((_3221 * ((_3207 * _3222) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3192) * _3207))) * _3221;
                        float _4544 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3243 = (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) / ((_3215 * _3215) * ((_3158 * 2.1991131305694580078125) + 3.141590118408203125))) * _3147;
                        _2995 = (_3162 * _3110.x) + _3068;
                        _2996 = (_3162 * _3110.y) + _3069;
                        _2997 = (_3162 * _3110.z) + _3070;
                        _2992 = (_3243 * _3127.x) + _3065;
                        _2993 = (_3243 * _3127.y) + _3066;
                        _2994 = (_3243 * _3127.z) + _3067;
                        if (_3072 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3065 = _2992;
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _3072;
                        }
                    }
                    frontier_phi_68_pred = _2994;
                    frontier_phi_68_pred_1 = _2997;
                    frontier_phi_68_pred_2 = _2996;
                    frontier_phi_68_pred_3 = _2995;
                    frontier_phi_68_pred_4 = _2993;
                    frontier_phi_68_pred_5 = _2992;
                }
                _2773 = frontier_phi_68_pred;
                _2779 = frontier_phi_68_pred_1;
                _2777 = frontier_phi_68_pred_2;
                _2775 = frontier_phi_68_pred_3;
                _2771 = frontier_phi_68_pred_4;
                _2769 = frontier_phi_68_pred_5;
                uint _2927 = _2926 + 1u;
                if (_2927 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2920 = _2769;
                    _2921 = _2771;
                    _2922 = _2773;
                    _2923 = _2775;
                    _2924 = _2777;
                    _2925 = _2779;
                    _2926 = _2927;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
        }
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.z;
        uint _2785 = (_2783 >> 8u) & 15u;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        if (((4294967295u << _2785) & _2666) == 0u)
        {
            _2888 = _2768;
            _2890 = _2770;
            _2892 = _2772;
            _2894 = _2774;
            _2896 = _2776;
            _2898 = _2778;
        }
        else
        {
            float _2913 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
            float _2914 = _2913 * _2620;
            float _2915 = _2913 * _2621;
            float _2916 = _2913 * _2622;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2785 < ((_2783 >> 12u) & 15u))
            {
                float _2889;
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _3048 = _2768;
                float _3049 = _2770;
                float _3050 = _2772;
                float _3051 = _2774;
                float _3052 = _2776;
                float _3053 = _2778;
                uint _3054 = _2785;
                uint _3063;
                bool _3064;
                for (;;)
                {
                    _3063 = texelFetch(g_lightClassification, int((((_2660 << 5u) + (_2646 << 9u)) + (_3054 << 2u)) >> 2u)).x;
                    _3064 = _3063 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3064)
                    {
                        frontier_phi_79_pred = _3053;
                        frontier_phi_79_pred_1 = _3052;
                        frontier_phi_79_pred_2 = _3051;
                        frontier_phi_79_pred_3 = _3050;
                        frontier_phi_79_pred_4 = _3049;
                        frontier_phi_79_pred_5 = _3048;
                    }
                    else
                    {
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3270 = _3048;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        float _3273 = _3051;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        uint _3276 = _3063;
                        uint _3277;
                        vec4 _3302;
                        float _3303;
                        vec4 _3318;
                        vec3 _3330;
                        vec4 _3345;
                        vec4 _3361;
                        float _3408;
                        bool _3409;
                        for (;;)
                        {
                            uint _3287 = ((_3054 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3276));
                            _3277 = (_3276 + 4294967295u) & _3276;
                            uint _3289 = _3287 * 40u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3303 = _3302.w;
                            uint _3305 = (_3287 * 40u) + 4u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3287 * 40u) + 8u;
                            _3330 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x));
                            uint _3332 = (_3287 * 40u) + 16u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3348 = (_3287 * 40u) + 20u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3364 = (_3287 * 40u) + 24u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3383 = (_3287 * 40u) + 28u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3408 = fma(_2622, _3396.z, fma(_2621, _3396.y, _3396.x * _2620)) + _3396.w;
                            _3409 = !((fma(_2622, _3377.z, fma(_2621, _3377.y, _3377.x * _2620)) + _3377.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3409)
                            {
                                float _3436 = _3302.x - _2620;
                                float _3437 = _3302.y - _2621;
                                float _3438 = _3302.z - _2622;
                                float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                                float _3442 = inversesqrt(_3439);
                                float _3443 = _3442 * _3436;
                                float _3444 = _3442 * _3437;
                                float _3445 = _3442 * _3438;
                                float _3449 = 1.0 - (_3439 / (_3303 * _3303));
                                float _4555 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3454 = sqrt(_3439) * _3318.w;
                                float _3456 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                                float _3457 = _3456 * _3456;
                                float _3460 = ((1.0 - _3457) * dot(vec3(_3443, _3444, _3445), vec3(_700, _703, _706))) + _3457;
                                float _3463 = _3454 * _3454;
                                float _3467 = (fma(_2622, _3345.z, fma(_2621, _3345.y, _3345.x * _2620)) + _3345.w) / _3408;
                                float _3468 = (fma(_2622, _3361.z, fma(_2621, _3361.y, _3361.x * _2620)) + _3361.w) / _3408;
                                float _3472 = 1.0 - dot(vec2(_3467, _3468), vec2(_3467, _3468));
                                float _4571 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3474 = _3473 * (((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3450) / ((_3463 * 0.699999988079071044921875) + 1.0));
                                float _3486 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                                float _3487 = 1.0 - _904;
                                float _3494 = sqrt(1.0 - ((1.0 - (_3487 * _3487)) * (1.0 - (_3486 * _3486))));
                                float _3495 = _3494 * _3494;
                                float _3496 = _3495 * _3495;
                                float _3497 = _3443 - _2914;
                                float _3498 = _3444 - _2915;
                                float _3499 = _3445 - _2916;
                                float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                                float _3507 = dot(vec3(_700, _703, _706), vec3((-0.0) - _2914, (-0.0) - _2915, (-0.0) - _2916));
                                float _4582 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3510 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3511 = dot(vec3(_700, _703, _706), vec3(_3503 * _3497, _3503 * _3498, _3503 * _3499));
                                float _4593 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3518 = ((_3514 * _3514) * (_3496 + (-1.0))) + 1.0;
                                float _3519 = _3456 * _3495;
                                float _3520 = _3519 * _3519;
                                float _3526 = ((1.0 - _3520) * dot(vec3(_700, _703, _706), vec3(_3443, _3444, _3445))) + _3520;
                                float _4604 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3528 = 1.0 - _3495;
                                float _3538 = (0.5 / (((_3527 * ((_3510 * _3528) + _3495)) + 9.9999999392252902907785028219223e-09) + (((_3527 * _3528) + _3495) * _3510))) * _3527;
                                float _4615 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3548 = (_3473 * _3450) * (((_3496 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3518 * _3518) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3474 * _3318.z;
                                frontier_phi_85_pred_1 = _3474 * _3318.y;
                                frontier_phi_85_pred_2 = _3474 * _3318.x;
                                frontier_phi_85_pred_3 = _3548 * _3330.z;
                                frontier_phi_85_pred_4 = _3548 * _3330.y;
                                frontier_phi_85_pred_5 = _3548 * _3330.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3557 = frontier_phi_85_pred;
                            _3556 = frontier_phi_85_pred_1;
                            _3555 = frontier_phi_85_pred_2;
                            _3554 = frontier_phi_85_pred_3;
                            _3553 = frontier_phi_85_pred_4;
                            _3552 = frontier_phi_85_pred_5;
                            _3260 = _3555 + _3273;
                            _3261 = _3556 + _3274;
                            _3262 = _3557 + _3275;
                            _3257 = _3552 + _3270;
                            _3258 = _3553 + _3271;
                            _3259 = _3554 + _3272;
                            if (_3277 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3277;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3262;
                        frontier_phi_79_pred_1 = _3261;
                        frontier_phi_79_pred_2 = _3260;
                        frontier_phi_79_pred_3 = _3259;
                        frontier_phi_79_pred_4 = _3258;
                        frontier_phi_79_pred_5 = _3257;
                    }
                    _2899 = frontier_phi_79_pred;
                    _2897 = frontier_phi_79_pred_1;
                    _2895 = frontier_phi_79_pred_2;
                    _2893 = frontier_phi_79_pred_3;
                    _2891 = frontier_phi_79_pred_4;
                    _2889 = frontier_phi_79_pred_5;
                    uint _3055 = _3054 + 1u;
                    if (_3055 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3048 = _2889;
                        _3049 = _2891;
                        _3050 = _2893;
                        _3051 = _2895;
                        _3052 = _2897;
                        _3053 = _2899;
                        _3054 = _3055;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2895;
                frontier_phi_60_61_ladder_1 = _2899;
                frontier_phi_60_61_ladder_2 = _2897;
                frontier_phi_60_61_ladder_3 = _2893;
                frontier_phi_60_61_ladder_4 = _2891;
                frontier_phi_60_61_ladder_5 = _2889;
            }
            else
            {
                frontier_phi_60_61_ladder = _2774;
                frontier_phi_60_61_ladder_1 = _2778;
                frontier_phi_60_61_ladder_2 = _2776;
                frontier_phi_60_61_ladder_3 = _2772;
                frontier_phi_60_61_ladder_4 = _2770;
                frontier_phi_60_61_ladder_5 = _2768;
            }
            _2888 = frontier_phi_60_61_ladder_5;
            _2890 = frontier_phi_60_61_ladder_4;
            _2892 = frontier_phi_60_61_ladder_3;
            _2894 = frontier_phi_60_61_ladder;
            _2896 = frontier_phi_60_61_ladder_2;
            _2898 = frontier_phi_60_61_ladder_1;
        }
        float _2903 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2678 = (_2903 * _2894) + _2112;
        _2680 = (_2903 * _2896) + _2114;
        _2682 = (_2903 * _2898) + _2116;
        _2684 = ((_2888 * _874) * _2903) + _2460;
        _2686 = ((_2890 * _875) * _2903) + _2462;
        _2688 = ((_2892 * _876) * _2903) + _2464;
    }
    else
    {
        _2678 = _2112;
        _2680 = _2114;
        _2682 = _2116;
        _2684 = _2460;
        _2686 = _2462;
        _2688 = _2464;
    }
    float _4631 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4642 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4653 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4664 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _2706 = ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2678 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _888))) + ((_2684 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1727)) * cbPerFrame._m0[3u].x);
    float _2707 = ((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2680 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _888))) + ((_2686 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1727)) * cbPerFrame._m0[3u].x);
    float _2708 = ((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2682 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _888))) + ((_2688 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1727)) * cbPerFrame._m0[3u].x);
    float _2713 = cbInstanceData._m0[_780 + 6u].w * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)));
    float _2718 = _677 / cbSceneParam._m0[86u].x;
    float _2719 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2733 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, (log2((isnan(cbSceneParam._m0[77u].w) ? _600 : (isnan(_600) ? cbSceneParam._m0[77u].w : min(_600, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2735 = _2733.x;
    float _2736 = _2733.y;
    float _2737 = _2733.z;
    float _2738 = _2733.w;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    if (_600 > cbSceneParam._m0[78u].w)
    {
        float _2793 = isnan(_600) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _600 : min(cbSceneParam._m0[80u].w, _600));
        float _2794 = _2793 / _600;
        float _2805 = _2794 * _650;
        float _2806 = _651 * _2794;
        float _2807 = (-0.0) - _2806;
        float _2808 = _2794 * _652;
        float _2810 = (cbSceneParam._m0[77u].w * _2807) / _2793;
        float _2811 = _2810 + cbSceneParam._m0[79u].w;
        float _2812 = cbSceneParam._m0[79u].w - _2806;
        float _2818 = sqrt(((_2805 * _2805) + (_2806 * _2806)) + (_2808 * _2808));
        float _2821 = (1.0 - (cbSceneParam._m0[77u].w / _2793)) * _2818;
        float _2826 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2828 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3005;
        if (abs((_2807 - _2810) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3005 = ((((_2811 > 0.0) ? exp2(_2826 * _2811) : (2.0 - exp2(_2828 * _2811))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2821;
        }
        else
        {
            float _2949 = 1.0 / cbSceneParam._m0[80u].x;
            float _2950 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : max(_2811, _2812));
            float _2951 = isnan(_2812) ? _2811 : (isnan(_2811) ? _2812 : min(_2811, _2812));
            float _2960 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : min(_2950, 0.0));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            _3005 = ((abs(_2818 / _2807) * cbSceneParam._m0[80u].y) * ((((_2960 - _2961) * 2.0) - ((exp2(_2826 * (isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0)))) - exp2(_2826 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0))))) * _2949)) - ((exp2(_2828 * _2960) - exp2(_2828 * _2961)) * _2949))) + (_2821 * cbSceneParam._m0[80u].z);
        }
        vec4 _3007 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, 1.0), 0.0);
        float _3016 = exp2((_3005 * (-1.44269502162933349609375)) * (1.0 - _3007.w));
        float _3017 = log2(_3016);
        float _3033 = log2(_2738);
        _2830 = (exp2(_3033 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].x)) * _3007.x) / cbSceneParam._m0[78u].x)) + _2735;
        _2832 = (exp2(_3033 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].y)) * _3007.y) / cbSceneParam._m0[78u].y)) + _2736;
        _2834 = (exp2(_3033 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3017 * cbSceneParam._m0[78u].z)) * _3007.z) / cbSceneParam._m0[78u].z)) + _2737;
        _2836 = _3016 * _2738;
    }
    else
    {
        _2830 = _2735;
        _2832 = _2736;
        _2834 = _2737;
        _2836 = _2738;
    }
    bool _3043;
    vec4 _2846;
    vec4 _2868;
    float _2870;
    float _2874;
    float _2875;
    float _2876;
    float _2877;
    bool _2887;
    for (;;)
    {
        _2846 = cbMatDynParam._m0[0u];
        float _2848 = roundEven(_2846.y);
        bool _2849 = _2848 == 3.0;
        float _2850 = log2(_2836);
        float _2857 = exp2(_2850 * cbSceneParam._m0[78u].x) * _2706;
        float _2858 = exp2(_2850 * cbSceneParam._m0[78u].y) * _2707;
        float _2859 = exp2(_2850 * cbSceneParam._m0[78u].z) * _2708;
        float _2866 = _666 + (-0.5);
        _2868 = cbMtdParam._m0[1u];
        _2870 = _2868.y * _2866;
        float _2873 = (_2848 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2874 = _2873 * (_2849 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2830)));
        _2875 = _2873 * (_2849 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2832)));
        _2876 = _2873 * (_2849 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2834)));
        _2877 = _2866 * 0.999000012874603271484375;
        _2887 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2887)
        {
            if ((cbInstanceData._m0[_780 + 7u].x + _2877) < 0.5)
            {
                _3043 = true;
                break;
            }
        }
        uint _2984 = _781 + uint(_2846.w);
        if ((cbInstanceData._m0[_2984].w < 1.0) && ((cbInstanceData._m0[_2984].w + _2877) < 0.5))
        {
            _3043 = true;
            break;
        }
        if ((_2870 + _423) < _2868.x)
        {
            _3043 = true;
            break;
        }
        _3043 = false;
        break;
    }
    float _3248;
    if (_3043)
    {
        discard_state = true;
        _3248 = 0.0;
    }
    else
    {
        _3248 = _2713;
    }
    SV_Target.x = _2874;
    SV_Target.y = _2875;
    SV_Target.z = _2876;
    SV_Target.w = _3248;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2713;
    discard_exit();
}


