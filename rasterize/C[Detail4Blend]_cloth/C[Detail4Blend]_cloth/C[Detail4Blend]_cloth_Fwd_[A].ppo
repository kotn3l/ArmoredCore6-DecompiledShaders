#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Detail4Blend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D C_Detail4Blend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D C_Detail4Blend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D C_Detail4Blend_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Detail4Blend_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D C_Detail4Blend_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_Detail4Blend_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D C_Detail4Blend_snp_0_Texture2D_6;
layout(set = 0, binding = 8) uniform texture2D C_Detail4Blend_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D C_Detail4Blend_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1290;
float _3675;
float _3676;
float _3677;
float _3678;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _252.z;
    float _258 = _252.w;
    float _264 = exp2(log2(_257 * 22.0) * 260.0);
    float _265 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _265 : (isnan(_265) ? 1.0 : min(_265, 1.0));
    float _272 = exp2(log2(1.0 - _258) * 10.0);
    vec4 _285 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _310 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _321 = cbMtdParam._m0[9u].x * _310.x;
    float _322 = cbMtdParam._m0[9u].y * _310.y;
    float _323 = cbMtdParam._m0[9u].z * _310.z;
    float _330 = (((cbMtdParam._m0[10u].x * _285.x) - _321) * _272) + _321;
    float _331 = (((cbMtdParam._m0[10u].y * _285.y) - _322) * _272) + _322;
    float _332 = (((cbMtdParam._m0[10u].z * _285.z) - _323) * _272) + _323;
    float _335 = exp2(log2(_258) * 10.0);
    vec4 _347 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _382 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _393 = cbMtdParam._m0[12u].x * _382.x;
    float _394 = cbMtdParam._m0[12u].y * _382.y;
    float _395 = cbMtdParam._m0[12u].z * _382.z;
    vec4 _416 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _421 = _416.w;
    float _424 = ((((((((cbMtdParam._m0[11u].x * _347.x) - _330) * _335) + _330) - _393) * _266) + _393) * 4.55000019073486328125) * _416.x;
    float _426 = ((((((((cbMtdParam._m0[11u].y * _347.y) - _331) * _335) + _331) - _394) * _266) + _394) * 4.55000019073486328125) * _416.y;
    float _428 = ((((((((cbMtdParam._m0[11u].z * _347.z) - _332) * _335) + _332) - _395) * _266) + _395) * 4.55000019073486328125) * _416.z;
    vec4 _445 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _467 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    float _473 = cbMtdParam._m0[13u].x + _467.z;
    float _476 = (((cbMtdParam._m0[13u].y + _445.z) - _473) * _272) + _473;
    vec4 _489 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _513 = texture(sampler2D(C_Detail4Blend_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _519 = cbMtdParam._m0[13u].z + _513.z;
    float _522 = ((((_257 * 2.0) * ((((_489.z - _476) + cbMtdParam._m0[14u].y) * _335) + _476)) - _519) * _266) + _519;
    float _533 = ((_445.x - _469) * _272) + _469;
    float _534 = ((_445.y - _470) * _272) + _470;
    float _549 = (((((((_489.x - _533) * _335) + _533) - _515) * _266) + _515) * 2.0) + (-1.0);
    float _550 = (((((((_489.y - _534) * _335) + _534) - _516) * _266) + _516) * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3697 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _556 = sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))));
    float _559 = _549 + (cbMtdParam._m0[13u].w * ((_252.x * 2.0) + (-1.0)));
    float _560 = _550 + (cbMtdParam._m0[13u].w * ((_252.y * 2.0) + (-1.0)));
    float _563 = fma(_556, _236, fma(_560, _228 * TANGENT.x, (_214 * _206) * _559));
    float _566 = fma(_556, _237, fma(_560, _228 * TANGENT.y, (_214 * _207) * _559));
    float _569 = fma(_556, _238, fma(_560, _228 * TANGENT.z, (_214 * _208) * _559));
    float _573 = inversesqrt(dot(vec3(_563, _566, _569), vec3(_563, _566, _569)));
    float _574 = _573 * _563;
    float _575 = _573 * _566;
    float _576 = _573 * _569;
    float _3708 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _577 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _578 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _579 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _580 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _581 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? cbMtdParam._m0[14u].x : (isnan(cbMtdParam._m0[14u].x) ? 0.0 : max(cbMtdParam._m0[14u].x, 0.0));
    float _582 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _598 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _648 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _638);
    float _649 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _638);
    float _650 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _638);
    float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
    float _655 = _648 * _654;
    float _656 = _649 * _654;
    float _657 = _650 * _654;
    vec4 _662 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _664 = _662.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _969 = sqrt(((_648 * _648) + (_649 * _649)) + (_650 * _650));
        float _975 = (cbMatDynParam._m0[5u].x * _969) + cbMatDynParam._m0[5u].y;
        float _3774 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _980 = (cbMatDynParam._m0[5u].z * _969) + cbMatDynParam._m0[5u].w;
        float _3785 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) - _976)) + _976) < ((_664 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _678 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _680 = _678.w;
    float _698 = fma(_576, cbSceneParam._m0[5u].z, fma(_575, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _574));
    float _701 = fma(_576, cbSceneParam._m0[6u].z, fma(_575, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _574));
    float _704 = fma(_576, cbSceneParam._m0[7u].z, fma(_575, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _574));
    vec4 _706 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _708 = _706.x;
    float _720 = (((_706.y - _578) + (_706.w * _578)) * cbMtdParam._m0[3u].x) + _578;
    float _737 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_708 * _708)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _745 = (((cbMatDynParam._m0[15u].x - _582) * cbMatDynParam._m0[15u].w) * _737) + _582;
    float _754 = ((_737 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _720)) + _720;
    uint _778 = uint(roundEven(NORMAL.w)) * 13u;
    uint _779 = _778 + 9u;
    uint _780 = _779 + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * _579) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * _580) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * _581) * cbInstanceData._m0[_780].z;
    float _3796 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    vec4 _792 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _797 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _808 = (((_797.x - _745) + (_797.w * _745)) * cbMtdParam._m0[3u].x) + _745;
    float _821 = (cbMtdParam._m0[3u].x * (((_789 * _680) - _789) + _792.x)) + _789;
    float _822 = (cbMtdParam._m0[3u].x * (((_790 * _680) - _790) + _792.y)) + _790;
    float _823 = (cbMtdParam._m0[3u].x * (((_791 * _680) - _791) + _792.z)) + _791;
    vec4 _824 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _837 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_745 * (_579 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_745 * (_580 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_745 * (_581 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _824.z;
    float _841 = _837 * cbMatDynParam._m0[13u].w;
    float _851 = (_841 * (cbMatDynParam._m0[13u].x - _821)) + _821;
    float _852 = (_841 * (cbMatDynParam._m0[13u].y - _822)) + _822;
    float _853 = (_841 * (cbMatDynParam._m0[13u].z - _823)) + _823;
    float _861 = ((_837 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _808)) + _808;
    float _862 = 1.0 - _861;
    float _863 = _862 * _851;
    float _864 = _862 * _852;
    float _865 = _862 * _853;
    float _869 = (_851 + (-0.039999999105930328369140625)) * _861;
    float _870 = (_852 + (-0.039999999105930328369140625)) * _861;
    float _871 = (_853 + (-0.039999999105930328369140625)) * _861;
    float _872 = _869 + 0.039999999105930328369140625;
    float _873 = _870 + 0.039999999105930328369140625;
    float _874 = _871 + 0.039999999105930328369140625;
    vec4 _883 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _886 = _883.x * TEXCOORD_4;
    float _887 = dot(vec3(_574, _575, _576), vec3(_655, _656, _657));
    float _890 = _887 * 2.0;
    float _894 = (_890 * _574) - _655;
    float _895 = (_890 * _575) - _656;
    float _896 = (_890 * _576) - _657;
    float _900 = abs(dot(vec3(_655, _656, _657), vec3(_574, _575, _576)));
    float _3829 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _902 = sqrt(_754);
    float _915 = exp2((_902 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_902 * 3.0));
    float _921 = (1.0 - _915) * ((_902 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _922 = _915 * _902;
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_958, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950));
        float _1018 = fma(_958, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950));
        float _1022 = fma(_958, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950));
        float _1047 = _950 + _574;
        float _1048 = _954 + _575;
        float _1049 = _958 + _576;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_574, _575, _576), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3877 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_574, _575, _576), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3910 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_574, _575, _576), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3943 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_958, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950));
        float _1337 = fma(_958, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950));
        float _1341 = fma(_958, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950));
        float _1364 = _950 + _574;
        float _1365 = _954 + _575;
        float _1366 = _958 + _576;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_574, _575, _576), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4006 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_574, _575, _576), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4039 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_574, _575, _576), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4072 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = _1290;
        _1611 = _1290;
        _1612 = _1290;
        _1613 = _1290;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1302)) + _1302;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _894 * 0.5;
    float _1671 = _895 * 0.5;
    float _1672 = _896 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1710;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1721;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1712 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1725 = (_1721 * cbModelParam._m0[1u].x) + (_1710 * (1.0 - cbModelParam._m0[1u].x));
    float _1735 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _754);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1735 : min(cbModelParam._m0[25u].z, _1735));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1783 = fma(_958, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950)) + cbModelParam._m0[13u].w;
        float _1787 = fma(_958, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950)) + cbModelParam._m0[14u].w;
        float _1791 = fma(_958, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950)) + cbModelParam._m0[15u].w;
        float _1794 = fma(_896, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894));
        float _1797 = fma(_896, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894));
        float _1800 = fma(_896, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894));
        float _1828;
        if (_1794 > 0.0)
        {
            _1828 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1828 = frontier_phi_19_17_ladder;
        }
        float _2034;
        if (_1797 > 0.0)
        {
            _2034 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2034 = frontier_phi_28_24_ladder;
        }
        float _2288;
        if (_1800 > 0.0)
        {
            _2288 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2288 = frontier_phi_40_35_ladder;
        }
        float _2290 = isnan(_2034) ? _1828 : (isnan(_1828) ? _2034 : min(_1828, _2034));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1794) + _1783;
        float _2296 = (_2291 * _1797) + _1787;
        float _2297 = (_2291 * _1800) + _1791;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2298;
        float _2302 = _2298 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 > _2302) || ((_2296 < _2300) || ((_2295 < _2300) || (_2295 > _2302))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2297, cbModelParam._m0[9u].z, fma(_2296, cbModelParam._m0[9u].y, _2295 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2297, cbModelParam._m0[10u].z, fma(_2296, cbModelParam._m0[10u].y, _2295 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2297, cbModelParam._m0[11u].z, fma(_2296, cbModelParam._m0[11u].y, _2295 * cbModelParam._m0[11u].x))), _1736);
            frontier_phi_18_40_ladder = _2425.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2425.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2425.x * cbModelParam._m0[1u].y;
        }
        _1816 = frontier_phi_18_40_ladder_2;
        _1818 = frontier_phi_18_40_ladder_1;
        _1820 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_894, _895, _896), _1736);
        _1816 = _1804.x * cbModelParam._m0[1u].y;
        _1818 = _1804.y * cbModelParam._m0[1u].y;
        _1820 = _1804.z * cbModelParam._m0[1u].y;
    }
    float _1824 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _754);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1824 : min(cbModelParam._m0[25u].w, _1824));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_958, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_958, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_958, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_896, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894));
        float _1896 = fma(_896, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894));
        float _1899 = fma(_896, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894));
        float _2039;
        if (_1893 > 0.0)
        {
            _2039 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2039 = frontier_phi_30_26_ladder;
        }
        float _2315;
        if (_1896 > 0.0)
        {
            _2315 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2315 = frontier_phi_42_37_ladder;
        }
        float _2528;
        if (_1899 > 0.0)
        {
            _2528 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2528 = frontier_phi_51_48_ladder;
        }
        float _2530 = isnan(_2315) ? _2039 : (isnan(_2039) ? _2315 : min(_2039, _2315));
        float _2531 = isnan(_2528) ? _2530 : (isnan(_2530) ? _2528 : min(_2530, _2528));
        float _2535 = (_2531 * _1893) + _1882;
        float _2536 = (_2531 * _1896) + _1886;
        float _2537 = (_2531 * _1899) + _1890;
        float _2538 = _2531 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2538;
        float _2541 = _2538 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2537 > _2541) || ((_2537 < _2539) || ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 < _2539) || (_2535 > _2541))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2537, cbModelParam._m0[17u].z, fma(_2536, cbModelParam._m0[17u].y, _2535 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2537, cbModelParam._m0[18u].z, fma(_2536, cbModelParam._m0[18u].y, _2535 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2537, cbModelParam._m0[19u].z, fma(_2536, cbModelParam._m0[19u].y, _2535 * cbModelParam._m0[19u].x))), _1825);
            frontier_phi_27_51_ladder = _2737.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2737.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2737.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_27_51_ladder_2;
        _1920 = frontier_phi_27_51_ladder_1;
        _1922 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_894, _895, _896), _1825);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1935 = (((_921 * _872) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1918 - _1816)) + _1816);
    float _1937 = (((_921 * _873) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1920 - _1818)) + _1818);
    float _1939 = (((_921 * _874) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1922 - _1820)) + _1820);
    float _1942 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1937, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1945 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1937, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1948 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1937, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    uvec4 _1958 = floatBitsToUint(cbInstanceData._m0[_778 + 5u]);
    uint _1960 = _1958.x * 14u;
    uint _1961 = _1960 + 13u;
    float _1968 = _886 + (-1.0);
    float _1973 = (cbLight._m0[_1961].x * _1968) + 1.0;
    float _1974 = (cbLight._m0[_1961].y * _1968) + 1.0;
    float _1975 = (cbLight._m0[_1961].z * _1968) + 1.0;
    float _1976 = (cbLight._m0[_1961].w * _1968) + 1.0;
    uint _1977 = _1960 + 5u;
    float _1983 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _1987 = _1960 + 4u;
    float _1993 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
    uint _1997 = _1960 | 1u;
    float _2008 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_574, _575, _576));
    float _2011 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_574, _575, _576));
    float _4208 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _4219 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2016 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _2018 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 0.3183098733425140380859375;
    float _2025 = ((cbLight._m0[_1977].x * _1983) * _2018) + ((cbLight._m0[_1987].x * _1993) * _2016);
    float _2026 = ((_1983 * cbLight._m0[_1977].y) * _2018) + ((_1993 * cbLight._m0[_1987].y) * _2016);
    float _2027 = ((_1983 * cbLight._m0[_1977].z) * _2018) + ((_1993 * cbLight._m0[_1987].z) * _2016);
    uvec4 _2031 = floatBitsToUint(cbLight._m0[_1960 + 12u]);
    bool _2033 = _2031.x == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_2033)
    {
        _2044 = _2025;
        _2046 = _2026;
        _2048 = _2027;
    }
    else
    {
        uint _2052 = _1960 + 6u;
        float _2068 = (dot(vec3(cbLight._m0[_1960 + 2u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _4230 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2071 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2044 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _2025;
        _2046 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _2026;
        _2048 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _2027;
    }
    bool _2051 = _2031.y == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_2051)
    {
        _2089 = _2044;
        _2091 = _2046;
        _2093 = _2048;
    }
    else
    {
        uint _2259 = _1960 + 7u;
        float _2275 = (dot(vec3(cbLight._m0[_1960 + 3u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4246 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2278 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2089 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2044;
        _2091 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2046;
        _2093 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2048;
    }
    uint _2096 = _1960 + 8u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _754) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1960].x + _655;
    float _2112 = cbLight._m0[_1960].y + _656;
    float _2113 = cbLight._m0[_1960].z + _657;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1960].xyz));
    float _4262 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2125 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2126 = dot(vec3(_574, _575, _576), vec3(_2118, _2119, _2120));
    float _4284 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2130 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2118, _2119, _2120));
    float _4295 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2134 = _2110 * _2110;
    float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
    float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0);
    float _2147 = 0.959999978542327880859375 - _869;
    float _2149 = 0.959999978542327880859375 - _870;
    float _2150 = 0.959999978542327880859375 - _871;
    float _2157 = 1.0 - _2110;
    float _2168 = (0.5 / (((_2125 * ((_2124 * _2157) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2157) + _2110) * _2124))) * _2124;
    float _4306 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
    uint _2181 = _1960 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _754) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1997].x + _655;
    float _2195 = cbLight._m0[_1997].y + _656;
    float _2196 = cbLight._m0[_1997].z + _657;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1997].xyz));
    float _4317 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2208 = dot(vec3(_574, _575, _576), vec3(_2201, _2202, _2203));
    float _4328 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2201, _2202, _2203));
    float _4339 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2227 = exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0);
    float _2234 = 1.0 - _2193;
    float _2244 = (0.5 / (((_2125 * ((_2207 * _2234) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2234) + _2193) * _2207))) * _2207;
    float _4350 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2256 = (((((_2227 * _2147) + _872) * cbLight._m0[_2181].x) * _2246) * _1983) + (((((_2146 * _2147) + _872) * cbLight._m0[_2096].x) * _2170) * _1993);
    float _2257 = (((((_2227 * _2149) + _873) * cbLight._m0[_2181].y) * _2246) * _1983) + (((((_2146 * _2149) + _873) * cbLight._m0[_2096].y) * _2170) * _1993);
    float _2258 = (((((_2227 * _2150) + _874) * cbLight._m0[_2181].z) * _2246) * _1983) + (((((_2146 * _2150) + _874) * cbLight._m0[_2096].z) * _2170) * _1993);
    float _2320;
    float _2322;
    float _2324;
    if (_2033)
    {
        _2320 = _2256;
        _2322 = _2257;
        _2324 = _2258;
    }
    else
    {
        uint _2326 = _1960 + 2u;
        uint _2330 = _1960 + 10u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _754) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _655;
        float _2347 = cbLight._m0[_2326].y + _656;
        float _2348 = cbLight._m0[_2326].z + _657;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2326].xyz));
        float _4361 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2360 = dot(vec3(_574, _575, _576), vec3(_2353, _2354, _2355));
        float _4372 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4383 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
        float _2386 = 1.0 - _2345;
        float _2396 = (0.5 / (((_2125 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2386) + _2345) * _2359))) * _2359;
        float _4394 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
        _2320 = (((((_2379 * _2147) + _872) * cbLight._m0[_2330].x) * _2398) * _2399) + _2256;
        _2322 = (((((_2379 * _2149) + _873) * cbLight._m0[_2330].y) * _2398) * _2399) + _2257;
        _2324 = (((((_2379 * _2150) + _874) * cbLight._m0[_2330].z) * _2398) * _2399) + _2258;
    }
    float _2434;
    float _2436;
    float _2438;
    if (_2051)
    {
        _2434 = _2320;
        _2436 = _2322;
        _2438 = _2324;
    }
    else
    {
        uint _2445 = _1960 + 3u;
        uint _2449 = _1960 + 11u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _754) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _655;
        float _2466 = cbLight._m0[_2445].y + _656;
        float _2467 = cbLight._m0[_2445].z + _657;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2445].xyz));
        float _4410 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2479 = dot(vec3(_574, _575, _576), vec3(_2472, _2473, _2474));
        float _4421 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4432 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2125 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2505) + _2464) * _2478))) * _2478;
        float _4443 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2434 = (((((_2498 * _2147) + _872) * cbLight._m0[_2449].x) * _2517) * _2518) + _2320;
        _2436 = (((((_2498 * _2149) + _873) * cbLight._m0[_2449].y) * _2517) * _2518) + _2322;
        _2438 = (((((_2498 * _2150) + _874) * cbLight._m0[_2449].z) * _2517) * _2518) + _2324;
    }
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    if (_1958.y == 0u)
    {
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2593;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2593;
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2593;
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.x;
        uint _2620 = uint((float(_2608.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2609))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2609)));
        float _2630 = (log2(_2596 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2631 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        uint _2634 = uint(isnan(14.0) ? _2631 : (isnan(_2631) ? 14.0 : min(_2631, 14.0)));
        uvec4 _2639 = texelFetch(g_lightClusterGridBuffer, int(((_2634 << 2u) + (_2620 << 6u)) >> 2u));
        uint _2640 = _2639.x;
        uint _2641 = _2608.z;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        if (((((1u << ((_2641 >> 4u) & 15u)) + 4294967295u) & _2640) == 0u) || ((_2641 & 240u) == 0u))
        {
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
        }
        else
        {
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            uint _2900 = 0u;
            uint _2909;
            bool _2910;
            for (;;)
            {
                _2909 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                _2910 = _2909 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2910)
                {
                    frontier_phi_68_pred = _2896;
                    frontier_phi_68_pred_1 = _2899;
                    frontier_phi_68_pred_2 = _2898;
                    frontier_phi_68_pred_3 = _2897;
                    frontier_phi_68_pred_4 = _2895;
                    frontier_phi_68_pred_5 = _2894;
                }
                else
                {
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    uint _3045;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2909;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    for (;;)
                    {
                        uint _3049 = uint(findLSB(_3045)) + (_2900 << 5u);
                        uint _3046 = (_3045 + 4294967295u) & _3045;
                        uint _3051 = _3049 * 48u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 3u)).x));
                        uint _3071 = (_3049 * 48u) + 4u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3090 = (_3049 * 48u) + 8u;
                        vec3 _3101 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x));
                        float _3105 = _3065.x - _2594;
                        float _3106 = _3065.y - _2595;
                        float _3107 = _3065.z - _2596;
                        float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                        float _3111 = inversesqrt(_3108);
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3115 = dot(vec3(_698, _701, _704), vec3(_3112, _3113, _3114));
                        float _3120 = 1.0 - (_3108 * _3065.w);
                        float _4469 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                        float _3122 = sqrt(_3108) * _3084.w;
                        float _3125 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3115) + _3126;
                        float _3132 = _3122 * _3122;
                        float _3136 = ((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3121) / ((_3132 * 0.699999988079071044921875) + 1.0);
                        float _3140 = (-0.0) - _2594;
                        float _3141 = (-0.0) - _2595;
                        float _3142 = (-0.0) - _2596;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3157 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                        float _3158 = 1.0 - _902;
                        float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                        float _3166 = _3165 * _3165;
                        float _3167 = _3166 * _3166;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3178 = dot(vec3(_698, _701, _704), vec3(_3147, _3148, _3149));
                        float _4485 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3182 = dot(vec3(_698, _701, _704), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                        float _4496 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3185 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                        float _3190 = _3125 * _3166;
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3115) + _3191;
                        float _4507 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3195 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3196 = 1.0 - _3166;
                        float _3206 = (0.5 / (((_3195 * ((_3181 * _3196) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3195 * _3196) + _3166) * _3181))) * _3195;
                        float _4518 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3217 = (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3189 * _3189) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125))) * _3121;
                        _2969 = (_3136 * _3084.x) + _3042;
                        _2970 = (_3136 * _3084.y) + _3043;
                        _2971 = (_3136 * _3084.z) + _3044;
                        _2966 = (_3217 * _3101.x) + _3039;
                        _2967 = (_3217 * _3101.y) + _3040;
                        _2968 = (_3217 * _3101.z) + _3041;
                        if (_3046 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _3046;
                        }
                    }
                    frontier_phi_68_pred = _2968;
                    frontier_phi_68_pred_1 = _2971;
                    frontier_phi_68_pred_2 = _2970;
                    frontier_phi_68_pred_3 = _2969;
                    frontier_phi_68_pred_4 = _2967;
                    frontier_phi_68_pred_5 = _2966;
                }
                _2747 = frontier_phi_68_pred;
                _2753 = frontier_phi_68_pred_1;
                _2751 = frontier_phi_68_pred_2;
                _2749 = frontier_phi_68_pred_3;
                _2745 = frontier_phi_68_pred_4;
                _2743 = frontier_phi_68_pred_5;
                uint _2901 = _2900 + 1u;
                if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2894 = _2743;
                    _2895 = _2745;
                    _2896 = _2747;
                    _2897 = _2749;
                    _2898 = _2751;
                    _2899 = _2753;
                    _2900 = _2901;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
        }
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.z;
        uint _2759 = (_2757 >> 8u) & 15u;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((4294967295u << _2759) & _2640) == 0u)
        {
            _2862 = _2742;
            _2864 = _2744;
            _2866 = _2746;
            _2868 = _2748;
            _2870 = _2750;
            _2872 = _2752;
        }
        else
        {
            float _2887 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
            float _2888 = _2887 * _2594;
            float _2889 = _2887 * _2595;
            float _2890 = _2887 * _2596;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2759 < ((_2757 >> 12u) & 15u))
            {
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _3022 = _2742;
                float _3023 = _2744;
                float _3024 = _2746;
                float _3025 = _2748;
                float _3026 = _2750;
                float _3027 = _2752;
                uint _3028 = _2759;
                uint _3037;
                bool _3038;
                for (;;)
                {
                    _3037 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                    _3038 = _3037 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3038)
                    {
                        frontier_phi_79_pred = _3027;
                        frontier_phi_79_pred_1 = _3026;
                        frontier_phi_79_pred_2 = _3025;
                        frontier_phi_79_pred_3 = _3024;
                        frontier_phi_79_pred_4 = _3023;
                        frontier_phi_79_pred_5 = _3022;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        uint _3250 = _3037;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3335;
                        float _3382;
                        bool _3383;
                        for (;;)
                        {
                            uint _3261 = ((_3028 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3322 = (_3261 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3338 = (_3261 * 40u) + 24u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3357 = (_3261 * 40u) + 28u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3382 = fma(_2596, _3370.z, fma(_2595, _3370.y, _3370.x * _2594)) + _3370.w;
                            _3383 = !((fma(_2596, _3351.z, fma(_2595, _3351.y, _3351.x * _2594)) + _3351.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3383)
                            {
                                float _3410 = _3276.x - _2594;
                                float _3411 = _3276.y - _2595;
                                float _3412 = _3276.z - _2596;
                                float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                                float _3416 = inversesqrt(_3413);
                                float _3417 = _3416 * _3410;
                                float _3418 = _3416 * _3411;
                                float _3419 = _3416 * _3412;
                                float _3423 = 1.0 - (_3413 / (_3277 * _3277));
                                float _4529 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3428 = sqrt(_3413) * _3292.w;
                                float _3430 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                                float _3431 = _3430 * _3430;
                                float _3434 = ((1.0 - _3431) * dot(vec3(_3417, _3418, _3419), vec3(_698, _701, _704))) + _3431;
                                float _3437 = _3428 * _3428;
                                float _3441 = (fma(_2596, _3319.z, fma(_2595, _3319.y, _3319.x * _2594)) + _3319.w) / _3382;
                                float _3442 = (fma(_2596, _3335.z, fma(_2595, _3335.y, _3335.x * _2594)) + _3335.w) / _3382;
                                float _3446 = 1.0 - dot(vec2(_3441, _3442), vec2(_3441, _3442));
                                float _4545 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3448 = _3447 * (((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3424) / ((_3437 * 0.699999988079071044921875) + 1.0));
                                float _3460 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                                float _3461 = 1.0 - _902;
                                float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                                float _3469 = _3468 * _3468;
                                float _3470 = _3469 * _3469;
                                float _3471 = _3417 - _2888;
                                float _3472 = _3418 - _2889;
                                float _3473 = _3419 - _2890;
                                float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                                float _3481 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2888, (-0.0) - _2889, (-0.0) - _2890));
                                float _4556 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3485 = dot(vec3(_698, _701, _704), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                                float _4567 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                                float _3493 = _3430 * _3469;
                                float _3494 = _3493 * _3493;
                                float _3500 = ((1.0 - _3494) * dot(vec3(_698, _701, _704), vec3(_3417, _3418, _3419))) + _3494;
                                float _4578 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3502 = 1.0 - _3469;
                                float _3512 = (0.5 / (((_3501 * ((_3484 * _3502) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3469) * _3484))) * _3501;
                                float _4589 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3522 = (_3447 * _3424) * (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3492 * _3492) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3448 * _3292.z;
                                frontier_phi_85_pred_1 = _3448 * _3292.y;
                                frontier_phi_85_pred_2 = _3448 * _3292.x;
                                frontier_phi_85_pred_3 = _3522 * _3304.z;
                                frontier_phi_85_pred_4 = _3522 * _3304.y;
                                frontier_phi_85_pred_5 = _3522 * _3304.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3531 = frontier_phi_85_pred;
                            _3530 = frontier_phi_85_pred_1;
                            _3529 = frontier_phi_85_pred_2;
                            _3528 = frontier_phi_85_pred_3;
                            _3527 = frontier_phi_85_pred_4;
                            _3526 = frontier_phi_85_pred_5;
                            _3234 = _3529 + _3247;
                            _3235 = _3530 + _3248;
                            _3236 = _3531 + _3249;
                            _3231 = _3526 + _3244;
                            _3232 = _3527 + _3245;
                            _3233 = _3528 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3236;
                        frontier_phi_79_pred_1 = _3235;
                        frontier_phi_79_pred_2 = _3234;
                        frontier_phi_79_pred_3 = _3233;
                        frontier_phi_79_pred_4 = _3232;
                        frontier_phi_79_pred_5 = _3231;
                    }
                    _2873 = frontier_phi_79_pred;
                    _2871 = frontier_phi_79_pred_1;
                    _2869 = frontier_phi_79_pred_2;
                    _2867 = frontier_phi_79_pred_3;
                    _2865 = frontier_phi_79_pred_4;
                    _2863 = frontier_phi_79_pred_5;
                    uint _3029 = _3028 + 1u;
                    if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3022 = _2863;
                        _3023 = _2865;
                        _3024 = _2867;
                        _3025 = _2869;
                        _3026 = _2871;
                        _3027 = _2873;
                        _3028 = _3029;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2869;
                frontier_phi_60_61_ladder_1 = _2873;
                frontier_phi_60_61_ladder_2 = _2871;
                frontier_phi_60_61_ladder_3 = _2867;
                frontier_phi_60_61_ladder_4 = _2865;
                frontier_phi_60_61_ladder_5 = _2863;
            }
            else
            {
                frontier_phi_60_61_ladder = _2748;
                frontier_phi_60_61_ladder_1 = _2752;
                frontier_phi_60_61_ladder_2 = _2750;
                frontier_phi_60_61_ladder_3 = _2746;
                frontier_phi_60_61_ladder_4 = _2744;
                frontier_phi_60_61_ladder_5 = _2742;
            }
            _2862 = frontier_phi_60_61_ladder_5;
            _2864 = frontier_phi_60_61_ladder_4;
            _2866 = frontier_phi_60_61_ladder_3;
            _2868 = frontier_phi_60_61_ladder;
            _2870 = frontier_phi_60_61_ladder_2;
            _2872 = frontier_phi_60_61_ladder_1;
        }
        float _2877 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
        _2652 = (_2877 * _2868) + _2089;
        _2654 = (_2877 * _2870) + _2091;
        _2656 = (_2877 * _2872) + _2093;
        _2658 = ((_2862 * _872) * _2877) + _2434;
        _2660 = ((_2864 * _873) * _2877) + _2436;
        _2662 = ((_2866 * _874) * _2877) + _2438;
    }
    else
    {
        _2652 = _2089;
        _2654 = _2091;
        _2656 = _2093;
        _2658 = _2434;
        _2660 = _2436;
        _2662 = _2438;
    }
    float _4605 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4616 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4627 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4638 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _2680 = ((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2652 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _886))) + ((_2658 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1725)) * cbPerFrame._m0[3u].x);
    float _2681 = ((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2654 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _886))) + ((_2660 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1725)) * cbPerFrame._m0[3u].x);
    float _2682 = ((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2656 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _886))) + ((_2662 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1725)) * cbPerFrame._m0[3u].x);
    float _2687 = cbInstanceData._m0[_778 + 6u].w * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)));
    float _2692 = _675 / cbSceneParam._m0[86u].x;
    float _2693 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2707 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, (log2((isnan(cbSceneParam._m0[77u].w) ? _598 : (isnan(_598) ? cbSceneParam._m0[77u].w : min(_598, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2709 = _2707.x;
    float _2710 = _2707.y;
    float _2711 = _2707.z;
    float _2712 = _2707.w;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_598 > cbSceneParam._m0[78u].w)
    {
        float _2767 = isnan(_598) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _598 : min(cbSceneParam._m0[80u].w, _598));
        float _2768 = _2767 / _598;
        float _2779 = _2768 * _648;
        float _2780 = _649 * _2768;
        float _2781 = (-0.0) - _2780;
        float _2782 = _2768 * _650;
        float _2784 = (cbSceneParam._m0[77u].w * _2781) / _2767;
        float _2785 = _2784 + cbSceneParam._m0[79u].w;
        float _2786 = cbSceneParam._m0[79u].w - _2780;
        float _2792 = sqrt(((_2779 * _2779) + (_2780 * _2780)) + (_2782 * _2782));
        float _2795 = (1.0 - (cbSceneParam._m0[77u].w / _2767)) * _2792;
        float _2800 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2802 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2979;
        if (abs((_2781 - _2784) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2979 = ((((_2785 > 0.0) ? exp2(_2800 * _2785) : (2.0 - exp2(_2802 * _2785))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2795;
        }
        else
        {
            float _2923 = 1.0 / cbSceneParam._m0[80u].x;
            float _2924 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : max(_2785, _2786));
            float _2925 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : min(_2785, _2786));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            _2979 = ((abs(_2792 / _2781) * cbSceneParam._m0[80u].y) * ((((_2934 - _2935) * 2.0) - ((exp2(_2800 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0)))) - exp2(_2800 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))))) * _2923)) - ((exp2(_2802 * _2934) - exp2(_2802 * _2935)) * _2923))) + (_2795 * cbSceneParam._m0[80u].z);
        }
        vec4 _2981 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, 1.0), 0.0);
        float _2990 = exp2((_2979 * (-1.44269502162933349609375)) * (1.0 - _2981.w));
        float _2991 = log2(_2990);
        float _3007 = log2(_2712);
        _2804 = (exp2(_3007 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].x)) * _2981.x) / cbSceneParam._m0[78u].x)) + _2709;
        _2806 = (exp2(_3007 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].y)) * _2981.y) / cbSceneParam._m0[78u].y)) + _2710;
        _2808 = (exp2(_3007 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].z)) * _2981.z) / cbSceneParam._m0[78u].z)) + _2711;
        _2810 = _2990 * _2712;
    }
    else
    {
        _2804 = _2709;
        _2806 = _2710;
        _2808 = _2711;
        _2810 = _2712;
    }
    bool _3017;
    vec4 _2820;
    vec4 _2842;
    float _2844;
    float _2848;
    float _2849;
    float _2850;
    float _2851;
    bool _2861;
    for (;;)
    {
        _2820 = cbMatDynParam._m0[0u];
        float _2822 = roundEven(_2820.y);
        bool _2823 = _2822 == 3.0;
        float _2824 = log2(_2810);
        float _2831 = exp2(_2824 * cbSceneParam._m0[78u].x) * _2680;
        float _2832 = exp2(_2824 * cbSceneParam._m0[78u].y) * _2681;
        float _2833 = exp2(_2824 * cbSceneParam._m0[78u].z) * _2682;
        float _2840 = _664 + (-0.5);
        _2842 = cbMtdParam._m0[1u];
        _2844 = _2842.y * _2840;
        float _2847 = (_2822 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2848 = _2847 * (_2823 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2804)));
        _2849 = _2847 * (_2823 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2806)));
        _2850 = _2847 * (_2823 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2808)));
        _2851 = _2840 * 0.999000012874603271484375;
        _2861 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2861)
        {
            if ((cbInstanceData._m0[_778 + 7u].x + _2851) < 0.5)
            {
                _3017 = true;
                break;
            }
        }
        uint _2958 = _779 + uint(_2820.w);
        if ((cbInstanceData._m0[_2958].w < 1.0) && ((cbInstanceData._m0[_2958].w + _2851) < 0.5))
        {
            _3017 = true;
            break;
        }
        if ((_2844 + _421) < _2842.x)
        {
            _3017 = true;
            break;
        }
        _3017 = false;
        break;
    }
    float _3222;
    if (_3017)
    {
        discard_state = true;
        _3222 = 0.0;
    }
    else
    {
        _3222 = _2687;
    }
    SV_Target.x = _2848;
    SV_Target.y = _2849;
    SV_Target.z = _2850;
    SV_Target.w = _3222;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2687;
    discard_exit();
}


