#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1106;
float _3799;
float _3800;
float _3801;
float _3802;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    float _262 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    vec4 _275 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_262 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _283 = exp2(log2(_275.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _284;
    float _286;
    float _288;
    if (_283)
    {
        _284 = cbMtdParam._m0[18u].x;
        _286 = cbMtdParam._m0[18u].y;
        _288 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _284 = cbMtdParam._m0[17u].x;
        _286 = cbMtdParam._m0[17u].y;
        _288 = cbMtdParam._m0[17u].z;
    }
    float _293;
    if (_283)
    {
        _293 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _293 = cbMtdParam._m0[19u].z;
    }
    float _299;
    float _301;
    if (_283)
    {
        _299 = cbMtdParam._m0[26u].x;
        _301 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _299 = cbMtdParam._m0[22u].x;
        _301 = cbMtdParam._m0[22u].y;
    }
    float _303 = _299 * TEXCOORD.x;
    float _304 = _301 * TEXCOORD.y;
    float _316 = floor(_293);
    vec4 _319 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _303) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _304) + cbTextureTilingScale._m0[6u].w, _316));
    vec4 _341 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _262) + cbTextureTilingScale._m0[0u].w));
    float _349 = (((_284 * cbMtdParam._m0[19u].w) * _319.x) * cbMtdParam._m0[9u].x) * _341.x;
    float _353 = (((_286 * cbMtdParam._m0[19u].w) * _319.y) * cbMtdParam._m0[9u].y) * _341.y;
    float _357 = (((_288 * cbMtdParam._m0[19u].w) * _319.z) * cbMtdParam._m0[9u].z) * _341.z;
    vec4 _369 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _262) + cbTextureTilingScale._m0[1u].w));
    float _373 = _369.z;
    vec4 _386 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _303) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _304) + cbTextureTilingScale._m0[8u].w, _316));
    float _189[2];
    float _190[2];
    _189[0u] = cbMtdParam._m0[25u].x;
    _190[0u] = cbMtdParam._m0[25u].y;
    _189[1u] = cbMtdParam._m0[25u].z;
    _190[1u] = cbMtdParam._m0[25u].w;
    float _400 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _403 = uint(int(isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0))));
    float _408 = _190[_403] + _386.x;
    vec4 _427 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _303) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _304) + cbTextureTilingScale._m0[7u].w, _316));
    float _434 = (_427.x * 2.0) + (-1.0);
    float _435 = (_427.y * 2.0) + (-1.0);
    float _436 = dot(vec2(_434, _435), vec2(_434, _435));
    float _3821 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))));
    float _450 = (cbMtdParam._m0[20u].x * (((_373 * 2.0) * (_427.z + _189[_403])) - _373)) + _373;
    float _454 = (cbMtdParam._m0[20u].y * ((_369.x * 2.0) + (-1.0))) + _434;
    float _455 = (cbMtdParam._m0[20u].y * ((_369.y * 2.0) + (-1.0))) + _435;
    float _458 = fma(_441, _240, fma(_455, _232 * TANGENT.x, (_218 * _210) * _454));
    float _461 = fma(_441, _241, fma(_455, _232 * TANGENT.y, (_218 * _211) * _454));
    float _464 = fma(_441, _242, fma(_455, _232 * TANGENT.z, (_218 * _212) * _454));
    float _468 = inversesqrt(dot(vec3(_458, _461, _464), vec3(_458, _461, _464)));
    float _469 = _468 * _458;
    float _470 = _468 * _461;
    float _471 = _468 * _464;
    float _3832 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _472 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3854 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _3865 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _3876 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _476 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _492 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _544 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _534);
    float _545 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _534);
    float _546 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _534);
    float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
    float _551 = _544 * _550;
    float _552 = _545 * _550;
    float _553 = _546 * _550;
    vec4 _558 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _560 = _558.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _786 = sqrt(((_544 * _544) + (_545 * _545)) + (_546 * _546));
        float _792 = (cbMatDynParam._m0[5u].x * _786) + cbMatDynParam._m0[5u].y;
        float _3887 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _797 = (cbMatDynParam._m0[5u].z * _786) + cbMatDynParam._m0[5u].w;
        float _3898 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) - _793)) + _793) < ((_560 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _574 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _575 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _577 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _579 = _577.w;
    float _598 = fma(_471, cbSceneParam._m0[5u].z, fma(_470, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _469));
    float _601 = fma(_471, cbSceneParam._m0[6u].z, fma(_470, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _469));
    float _604 = fma(_471, cbSceneParam._m0[7u].z, fma(_470, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _469));
    vec4 _606 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _617 = (((_606.y - _472) + (_606.w * _472)) * cbMtdParam._m0[3u].x) + _472;
    uint _630 = uint(roundEven(NORMAL.w)) * 13u;
    uint _632 = _630 + 9u;
    uint _633 = _632 + uint(cbMatDynParam._m0[0u].w);
    float _639 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_633].x;
    float _640 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_633].y;
    float _641 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_633].z;
    float _3909 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    vec4 _645 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _650 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _661 = (((_650.x - _476) + (_650.w * _476)) * cbMtdParam._m0[3u].x) + _476;
    float _674 = (cbMtdParam._m0[3u].x * (((_642 * _579) - _642) + _645.x)) + _642;
    float _675 = (cbMtdParam._m0[3u].x * (((_643 * _579) - _643) + _645.y)) + _643;
    float _676 = (cbMtdParam._m0[3u].x * (((_644 * _579) - _644) + _645.z)) + _644;
    float _677 = 1.0 - _661;
    float _678 = _677 * _674;
    float _679 = _677 * _675;
    float _680 = _677 * _676;
    float _685 = (_674 + (-0.039999999105930328369140625)) * _661;
    float _686 = (_675 + (-0.039999999105930328369140625)) * _661;
    float _687 = (_676 + (-0.039999999105930328369140625)) * _661;
    float _688 = _685 + 0.039999999105930328369140625;
    float _690 = _686 + 0.039999999105930328369140625;
    float _691 = _687 + 0.039999999105930328369140625;
    vec4 _700 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _574, cbSceneParam._m0[86u].y * _575));
    float _703 = _700.x * TEXCOORD_4;
    float _704 = dot(vec3(_469, _470, _471), vec3(_551, _552, _553));
    float _707 = _704 * 2.0;
    float _711 = (_707 * _469) - _551;
    float _712 = (_707 * _470) - _552;
    float _713 = (_707 * _471) - _553;
    float _717 = abs(dot(vec3(_551, _552, _553), vec3(_469, _470, _471)));
    float _3942 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _719 = sqrt(_617);
    float _732 = exp2((_719 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_719 * 3.0));
    float _738 = (1.0 - _732) * ((_719 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _739 = _732 * _719;
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1105;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _830 = fma(_775, cbModelParam._m0[26u].z, fma(_771, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767));
        float _834 = fma(_775, cbModelParam._m0[27u].z, fma(_771, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767));
        float _838 = fma(_775, cbModelParam._m0[28u].z, fma(_771, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767));
        float _863 = _767 + _469;
        float _864 = _771 + _470;
        float _865 = _775 + _471;
        float _875 = fma(_865, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863)) - _830;
        float _876 = fma(_865, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863)) - _834;
        float _877 = fma(_865, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863)) - _838;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_830 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_834 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[34u].z) + ((((((_838 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _933 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_899.x + (-0.5));
        float _935 = _933 * (_899.y + (-0.5));
        float _936 = _933 * (_899.z + (-0.5));
        float _943 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_906.x + (-0.5));
        float _945 = _943 * (_906.y + (-0.5));
        float _946 = _943 * (_906.z + (-0.5));
        float _953 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_913.x + (-0.5));
        float _955 = _953 * (_913.y + (-0.5));
        float _956 = _953 * (_913.z + (-0.5));
        float _963 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_920.x + (-0.5));
        float _965 = _963 * (_920.y + (-0.5));
        float _966 = _963 * (_920.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _987 = (dot(vec3(_469, _470, _471), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _997 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3990 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_999 + 1.0))) + _1004) * _967;
        float _1014 = _935 * 0.5;
        float _1015 = _945 * 0.5;
        float _1016 = _955 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_469, _470, _471), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _4023 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1041 + 1.0))) + _1046) * _968;
        float _1056 = _936 * 0.5;
        float _1057 = _946 * 0.5;
        float _1058 = _956 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_469, _470, _471), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _4056 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1083 + 1.0))) + _1088) * _969;
        _1105 = _936;
        _1107 = _935;
        _1108 = _934;
        _1109 = _946;
        _1110 = _945;
        _1111 = _944;
        _1112 = _956;
        _1113 = _955;
        _1114 = _954;
        _1115 = _969;
        _1116 = _968;
        _1117 = _967;
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _1106;
        _1107 = _1106;
        _1108 = _1106;
        _1109 = _1106;
        _1110 = _1106;
        _1111 = _1106;
        _1112 = _1106;
        _1113 = _1106;
        _1114 = _1106;
        _1115 = _1106;
        _1116 = _1106;
        _1117 = _1106;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1149 = fma(_775, cbModelParam._m0[30u].z, fma(_771, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _767));
        float _1153 = fma(_775, cbModelParam._m0[31u].z, fma(_771, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _767));
        float _1157 = fma(_775, cbModelParam._m0[32u].z, fma(_771, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _767));
        float _1180 = _767 + _469;
        float _1181 = _771 + _470;
        float _1182 = _775 + _471;
        float _1192 = fma(_1182, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180)) - _1149;
        float _1193 = fma(_1182, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180)) - _1153;
        float _1194 = fma(_1182, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180)) - _1157;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1149 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1153 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[35u].z) + ((((((_1157 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1248 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1215.x + (-0.5));
        float _1250 = _1248 * (_1215.y + (-0.5));
        float _1251 = _1248 * (_1215.z + (-0.5));
        float _1258 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1222.x + (-0.5));
        float _1260 = _1258 * (_1222.y + (-0.5));
        float _1261 = _1258 * (_1222.z + (-0.5));
        float _1268 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1229.x + (-0.5));
        float _1270 = _1268 * (_1229.y + (-0.5));
        float _1271 = _1268 * (_1229.z + (-0.5));
        float _1278 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1236.x + (-0.5));
        float _1280 = _1278 * (_1236.y + (-0.5));
        float _1281 = _1278 * (_1236.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_469, _470, _471), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4119 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1312 + 1.0))) + _1317) * _1282;
        float _1327 = _1250 * 0.5;
        float _1328 = _1260 * 0.5;
        float _1329 = _1270 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_469, _470, _471), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4152 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1354 + 1.0))) + _1359) * _1283;
        float _1369 = _1251 * 0.5;
        float _1370 = _1261 * 0.5;
        float _1371 = _1271 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_469, _470, _471), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4185 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1396 + 1.0))) + _1401) * _1284;
        _1418 = _1251;
        _1419 = _1250;
        _1420 = _1249;
        _1421 = _1261;
        _1422 = _1260;
        _1423 = _1259;
        _1424 = _1271;
        _1425 = _1270;
        _1426 = _1269;
        _1427 = _1284;
        _1428 = _1283;
        _1429 = _1282;
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1106;
        _1419 = _1106;
        _1420 = _1106;
        _1421 = _1106;
        _1422 = _1106;
        _1423 = _1106;
        _1424 = _1106;
        _1425 = _1106;
        _1426 = _1106;
        _1427 = _1106;
        _1428 = _1106;
        _1429 = _1106;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1118)) + _1118;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1119)) + _1119;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1120)) + _1120;
    float _1465 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1442));
    float _1486 = _711 * 0.5;
    float _1487 = _712 * 0.5;
    float _1488 = _713 * 0.5;
    float _1489 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1492 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1495 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1529;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1502 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1105, _1109, _1112, _1115));
        float _1506 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1107, _1110, _1113, _1116));
        float _1510 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1108, _1111, _1114, _1117));
        float _1517 = dot(vec4(cbModelParam._m0[39u]), vec4(_1486, _1487, _1488, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1540;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1531 = dot(vec4(cbModelParam._m0[40u]), vec4(_1486, _1487, _1488, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1544 = (_1540 * cbModelParam._m0[1u].x) + (_1529 * (1.0 - cbModelParam._m0[1u].x));
    float _1554 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _617);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1554 : min(cbModelParam._m0[25u].z, _1554));
    float _1637;
    float _1639;
    float _1641;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1604 = fma(_775, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767)) + cbModelParam._m0[13u].w;
        float _1608 = fma(_775, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767)) + cbModelParam._m0[14u].w;
        float _1612 = fma(_775, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767)) + cbModelParam._m0[15u].w;
        float _1615 = fma(_713, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711));
        float _1618 = fma(_713, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711));
        float _1621 = fma(_713, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711));
        float _1649;
        if (_1615 > 0.0)
        {
            _1649 = abs((1.0 - _1604) / _1615);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1604 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1649 = frontier_phi_25_23_ladder;
        }
        float _1821;
        if (_1618 > 0.0)
        {
            _1821 = abs((1.0 - _1608) / _1618);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1608 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1821 = frontier_phi_34_30_ladder;
        }
        float _2117;
        if (_1621 > 0.0)
        {
            _2117 = abs((1.0 - _1612) / _1621);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1612 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2117 = frontier_phi_46_41_ladder;
        }
        float _2119 = isnan(_1821) ? _1649 : (isnan(_1649) ? _1821 : min(_1649, _1821));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1615) + _1604;
        float _2125 = (_2120 * _1618) + _1608;
        float _2126 = (_2120 * _1621) + _1612;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2127;
        float _2131 = _2127 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 > _2131) || ((_2125 < _2129) || ((_2124 < _2129) || (_2124 > _2131))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2271 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1555);
            frontier_phi_24_46_ladder = _2271.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2271.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2271.x * cbModelParam._m0[1u].y;
        }
        _1637 = frontier_phi_24_46_ladder_2;
        _1639 = frontier_phi_24_46_ladder_1;
        _1641 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_711, _712, _713), _1555);
        _1637 = _1625.x * cbModelParam._m0[1u].y;
        _1639 = _1625.y * cbModelParam._m0[1u].y;
        _1641 = _1625.z * cbModelParam._m0[1u].y;
    }
    float _1645 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _617);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1645 : min(cbModelParam._m0[25u].w, _1645));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1699 = fma(_775, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767)) + cbModelParam._m0[21u].w;
        float _1703 = fma(_775, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767)) + cbModelParam._m0[22u].w;
        float _1707 = fma(_775, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767)) + cbModelParam._m0[23u].w;
        float _1710 = fma(_713, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711));
        float _1713 = fma(_713, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711));
        float _1716 = fma(_713, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711));
        float _1826;
        if (_1710 > 0.0)
        {
            _1826 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1826 = frontier_phi_36_32_ladder;
        }
        float _2144;
        if (_1713 > 0.0)
        {
            _2144 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2144 = frontier_phi_48_43_ladder;
        }
        float _2482;
        if (_1716 > 0.0)
        {
            _2482 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2482 = frontier_phi_58_55_ladder;
        }
        float _2484 = isnan(_2144) ? _1826 : (isnan(_1826) ? _2144 : min(_1826, _2144));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1710) + _1699;
        float _2490 = (_2485 * _1713) + _1703;
        float _2491 = (_2485 * _1716) + _1707;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2492;
        float _2495 = _2492 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2491 > _2495) || ((_2491 < _2493) || ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 < _2493) || (_2489 > _2495))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2491, cbModelParam._m0[17u].z, fma(_2490, cbModelParam._m0[17u].y, _2489 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2491, cbModelParam._m0[18u].z, fma(_2490, cbModelParam._m0[18u].y, _2489 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2491, cbModelParam._m0[19u].z, fma(_2490, cbModelParam._m0[19u].y, _2489 * cbModelParam._m0[19u].x))), _1646);
            frontier_phi_33_58_ladder = _2613.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2613.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2613.x * cbModelParam._m0[1u].z;
        }
        _1735 = frontier_phi_33_58_ladder_2;
        _1737 = frontier_phi_33_58_ladder_1;
        _1739 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_711, _712, _713), _1646);
        _1735 = _1719.x * cbModelParam._m0[1u].z;
        _1737 = _1719.y * cbModelParam._m0[1u].z;
        _1739 = _1719.z * cbModelParam._m0[1u].z;
    }
    float _1752 = (((_738 * _688) + _739) * _703) * ((cbModelParam._m0[1u].w * (_1735 - _1637)) + _1637);
    float _1754 = (((_738 * _690) + _739) * _703) * ((cbModelParam._m0[1u].w * (_1737 - _1639)) + _1639);
    float _1756 = (((_738 * _691) + _739) * _703) * ((cbModelParam._m0[1u].w * (_1739 - _1641)) + _1641);
    float _1759 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1752 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1752 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, _1752 * cbSceneParam._m0[91u].x));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1813 = _1800 / _1812;
    float _1814 = _1804 / _1812;
    float _1815 = _1808 / _1812;
    float _1962;
    float _1963;
    float _1964;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1842 = ((uint(_1815 > cbSceneParam._m0[59u].y) + uint(_1815 > cbSceneParam._m0[59u].x)) + uint(_1815 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1843 = _1842 + 43u;
        uint _1851 = _1842 + 44u;
        uint _1859 = _1842 + 45u;
        uint _1867 = _1842 + 46u;
        float _1878 = fma(_1812, cbSceneParam._m0[_1843].w, fma(_1808, cbSceneParam._m0[_1843].z, fma(_1804, cbSceneParam._m0[_1843].y, _1800 * cbSceneParam._m0[_1843].x)));
        float _1882 = fma(_1812, cbSceneParam._m0[_1851].w, fma(_1808, cbSceneParam._m0[_1851].z, fma(_1804, cbSceneParam._m0[_1851].y, _1800 * cbSceneParam._m0[_1851].x)));
        float _1890 = fma(_1812, cbSceneParam._m0[_1867].w, fma(_1808, cbSceneParam._m0[_1867].z, fma(_1804, cbSceneParam._m0[_1867].y, _1800 * cbSceneParam._m0[_1867].x)));
        float _1895 = cbSceneParam._m0[33u].z * _1890;
        float _1897 = cbSceneParam._m0[33u].w * _1890;
        float _1900 = fma(_1812, cbSceneParam._m0[_1859].w, fma(_1808, cbSceneParam._m0[_1859].z, fma(_1804, cbSceneParam._m0[_1859].y, _1800 * cbSceneParam._m0[_1859].x))) / _1890;
        float _1948 = (cbSceneParam._m0[33u].x - sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815))) * cbSceneParam._m0[33u].y;
        float _4311 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1955 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1895 + _1878) / _1890, (_1897 + _1882) / _1890), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 + _1878) / _1890, (_1882 - _1895) / _1890), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1878 - _1895) / _1890, (_1882 - _1897) / _1890), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1878 - _1897) / _1890, (_1895 + _1882) / _1890), _1900), 0.0)).x), vec4(0.25)));
        _1962 = 1.0 - (_1955 * cbSceneParam._m0[34u].x);
        _1963 = 1.0 - (_1955 * cbSceneParam._m0[34u].y);
        _1964 = 1.0 - (_1955 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1962 = 1.0;
        _1963 = 1.0;
        _1964 = 1.0;
    }
    float _2028;
    float _2030;
    float _2032;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2016 = fma(_1812, cbSceneParam._m0[63u].w, fma(_1808, cbSceneParam._m0[63u].z, fma(_1804, cbSceneParam._m0[63u].y, _1800 * cbSceneParam._m0[63u].x)));
        float _2017 = fma(_1812, cbSceneParam._m0[60u].w, fma(_1808, cbSceneParam._m0[60u].z, fma(_1804, cbSceneParam._m0[60u].y, _1800 * cbSceneParam._m0[60u].x))) / _2016;
        float _2018 = fma(_1812, cbSceneParam._m0[61u].w, fma(_1808, cbSceneParam._m0[61u].z, fma(_1804, cbSceneParam._m0[61u].y, _1800 * cbSceneParam._m0[61u].x))) / _2016;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_2017 >= cbSceneParam._m0[64u].x) && (_2018 >= cbSceneParam._m0[64u].y)) && (_2017 <= cbSceneParam._m0[64u].z)) && (_2018 <= cbSceneParam._m0[64u].w))
        {
            float _2157 = fma(_1812, cbSceneParam._m0[62u].w, fma(_1808, cbSceneParam._m0[62u].z, fma(_1804, cbSceneParam._m0[62u].y, _1800 * cbSceneParam._m0[62u].x))) / _2016;
            float _2161 = isnan(cbSceneParam._m0[41u].w) ? _2157 : (isnan(_2157) ? cbSceneParam._m0[41u].w : max(_2157, cbSceneParam._m0[41u].w));
            float _2204 = (cbSceneParam._m0[33u].x - sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815))) * cbSceneParam._m0[33u].y;
            float _4327 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
            float _2211 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2017, cbSceneParam._m0[33u].w + _2018), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2017, _2018 - cbSceneParam._m0[33u].z), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2017 - cbSceneParam._m0[33u].z, _2018 - cbSceneParam._m0[33u].w), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2017 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2018), _2161), 0.0)).x), vec4(0.25)));
            float _2215 = 1.0 - (_2211 * cbSceneParam._m0[34u].x);
            float _2216 = 1.0 - (_2211 * cbSceneParam._m0[34u].y);
            float _2217 = 1.0 - (_2211 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2217) ? _1964 : (isnan(_1964) ? _2217 : min(_1964, _2217));
            frontier_phi_45_44_ladder_1 = isnan(_2216) ? _1963 : (isnan(_1963) ? _2216 : min(_1963, _2216));
            frontier_phi_45_44_ladder_2 = isnan(_2215) ? _1962 : (isnan(_1962) ? _2215 : min(_1962, _2215));
        }
        else
        {
            frontier_phi_45_44_ladder = _1964;
            frontier_phi_45_44_ladder_1 = _1963;
            frontier_phi_45_44_ladder_2 = _1962;
        }
        _2028 = frontier_phi_45_44_ladder_2;
        _2030 = frontier_phi_45_44_ladder_1;
        _2032 = frontier_phi_45_44_ladder;
    }
    else
    {
        _2028 = _1962;
        _2030 = _1963;
        _2032 = _1964;
    }
    uvec4 _2037 = floatBitsToUint(cbInstanceData._m0[_630 + 5u]);
    uint _2039 = _2037.x * 14u;
    uint _2040 = _2039 + 13u;
    float _2047 = _703 + (-1.0);
    float _2052 = (cbLight._m0[_2040].x * _2047) + 1.0;
    float _2053 = (cbLight._m0[_2040].y * _2047) + 1.0;
    float _2054 = (cbLight._m0[_2040].z * _2047) + 1.0;
    float _2055 = (cbLight._m0[_2040].w * _2047) + 1.0;
    uint _2056 = _2039 + 5u;
    float _2062 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
    uint _2066 = _2039 + 4u;
    float _2076 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2080 = _2039 | 1u;
    float _2091 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_469, _470, _471));
    float _2094 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_469, _470, _471));
    float _4363 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _4374 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2099 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2101 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2108 = ((cbLight._m0[_2056].x * _2062) * _2101) + (((cbLight._m0[_2066].x * _2028) * _2076) * _2099);
    float _2109 = ((_2062 * cbLight._m0[_2056].y) * _2101) + (((cbLight._m0[_2066].y * _2030) * _2076) * _2099);
    float _2110 = ((_2062 * cbLight._m0[_2056].z) * _2101) + (((cbLight._m0[_2066].z * _2032) * _2076) * _2099);
    uvec4 _2114 = floatBitsToUint(cbLight._m0[_2039 + 12u]);
    bool _2116 = _2114.x == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2116)
    {
        _2218 = _2108;
        _2220 = _2109;
        _2222 = _2110;
    }
    else
    {
        uint _2226 = _2039 + 6u;
        float _2242 = (dot(vec3(cbLight._m0[_2039 + 2u].xyz), vec3(_469, _470, _471)) * 0.5) + 0.5;
        float _2243 = _2242 * _2242;
        float _4385 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2244 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2245 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2218 = (((cbLight._m0[_2226].x * 0.3183098733425140380859375) * _2244) * _2245) + _2108;
        _2220 = (((cbLight._m0[_2226].y * 0.3183098733425140380859375) * _2244) * _2245) + _2109;
        _2222 = (((cbLight._m0[_2226].z * 0.3183098733425140380859375) * _2244) * _2245) + _2110;
    }
    bool _2225 = _2114.y == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2225)
    {
        _2280 = _2218;
        _2282 = _2220;
        _2284 = _2222;
    }
    else
    {
        uint _2453 = _2039 + 7u;
        float _2469 = (dot(vec3(cbLight._m0[_2039 + 3u].xyz), vec3(_469, _470, _471)) * 0.5) + 0.5;
        float _2470 = _2469 * _2469;
        float _4401 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2471 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2472 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2280 = (((cbLight._m0[_2453].x * 0.3183098733425140380859375) * _2471) * _2472) + _2218;
        _2282 = (((cbLight._m0[_2453].y * 0.3183098733425140380859375) * _2471) * _2472) + _2220;
        _2284 = (((cbLight._m0[_2453].z * 0.3183098733425140380859375) * _2471) * _2472) + _2222;
    }
    uint _2287 = _2039 + 8u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _617) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_2039].x + _551;
    float _2303 = cbLight._m0[_2039].y + _552;
    float _2304 = cbLight._m0[_2039].z + _553;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_2039].xyz));
    float _4417 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _4428 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _2316 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2317 = dot(vec3(_469, _470, _471), vec3(_2309, _2310, _2311));
    float _4439 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2321 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2309, _2310, _2311));
    float _4450 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2325 = _2301 * _2301;
    float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
    float _2337 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
    float _2338 = 0.959999978542327880859375 - _685;
    float _2340 = 0.959999978542327880859375 - _686;
    float _2341 = 0.959999978542327880859375 - _687;
    float _2348 = 1.0 - _2301;
    float _2359 = (0.5 / (((_2316 * ((_2315 * _2348) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2348) + _2301) * _2315))) * _2315;
    float _4461 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2361 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
    uint _2375 = _2039 + 9u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _617) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2080].x + _551;
    float _2389 = cbLight._m0[_2080].y + _552;
    float _2390 = cbLight._m0[_2080].z + _553;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_2080].xyz));
    float _4472 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2402 = dot(vec3(_469, _470, _471), vec3(_2395, _2396, _2397));
    float _4483 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2406 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2395, _2396, _2397));
    float _4494 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2410 = _2387 * _2387;
    float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
    float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
    float _2428 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2316 * ((_2401 * _2428) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2428) + _2387) * _2401))) * _2401;
    float _4505 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
    float _2450 = (((((_2421 * _2338) + _688) * cbLight._m0[_2375].x) * _2440) * _2062) + ((((cbLight._m0[_2287].x * _2028) * ((_2337 * _2338) + _688)) * _2361) * _2076);
    float _2451 = (((((_2421 * _2340) + _690) * cbLight._m0[_2375].y) * _2440) * _2062) + ((((cbLight._m0[_2287].y * _2030) * ((_2337 * _2340) + _690)) * _2361) * _2076);
    float _2452 = (((((_2421 * _2341) + _691) * cbLight._m0[_2375].z) * _2440) * _2062) + ((((cbLight._m0[_2287].z * _2032) * ((_2337 * _2341) + _691)) * _2361) * _2076);
    float _2508;
    float _2510;
    float _2512;
    if (_2116)
    {
        _2508 = _2450;
        _2510 = _2451;
        _2512 = _2452;
    }
    else
    {
        uint _2514 = _2039 + 2u;
        uint _2518 = _2039 + 10u;
        float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2514].w)) * _617) * 0.949999988079071044921875);
        float _2533 = _2532 * _2532;
        float _2534 = cbLight._m0[_2514].x + _551;
        float _2535 = cbLight._m0[_2514].y + _552;
        float _2536 = cbLight._m0[_2514].z + _553;
        float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
        float _2541 = _2540 * _2534;
        float _2542 = _2540 * _2535;
        float _2543 = _2540 * _2536;
        float _2544 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_2514].xyz));
        float _4516 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2548 = dot(vec3(_469, _470, _471), vec3(_2541, _2542, _2543));
        float _4527 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2552 = dot(vec3(cbLight._m0[_2514].xyz), vec3(_2541, _2542, _2543));
        float _4538 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _2533 * _2533;
        float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
        float _2567 = exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0);
        float _2574 = 1.0 - _2533;
        float _2584 = (0.5 / (((_2316 * ((_2547 * _2574) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2574) + _2533) * _2547))) * _2547;
        float _4549 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2586 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
        float _2587 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2508 = (((((_2567 * _2338) + _688) * cbLight._m0[_2518].x) * _2586) * _2587) + _2450;
        _2510 = (((((_2567 * _2340) + _690) * cbLight._m0[_2518].y) * _2586) * _2587) + _2451;
        _2512 = (((((_2567 * _2341) + _691) * cbLight._m0[_2518].z) * _2586) * _2587) + _2452;
    }
    float _2618;
    float _2620;
    float _2622;
    if (_2225)
    {
        _2618 = _2508;
        _2620 = _2510;
        _2622 = _2512;
    }
    else
    {
        uint _2629 = _2039 + 3u;
        uint _2633 = _2039 + 11u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _617) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _551;
        float _2650 = cbLight._m0[_2629].y + _552;
        float _2651 = cbLight._m0[_2629].z + _553;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_469, _470, _471), vec3(cbLight._m0[_2629].xyz));
        float _4565 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2663 = dot(vec3(_469, _470, _471), vec3(_2656, _2657, _2658));
        float _4576 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4587 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
        float _2689 = 1.0 - _2648;
        float _2699 = (0.5 / (((_2316 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2689) + _2648) * _2662))) * _2662;
        float _4598 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2701 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2702 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2618 = (((((_2682 * _2338) + _688) * cbLight._m0[_2633].x) * _2701) * _2702) + _2508;
        _2620 = (((((_2682 * _2340) + _690) * cbLight._m0[_2633].y) * _2701) * _2702) + _2510;
        _2622 = (((((_2682 * _2341) + _691) * cbLight._m0[_2633].z) * _2701) * _2702) + _2512;
    }
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_2037.y == 0u)
    {
        uvec4 _2723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2724 = _2723.x;
        uint _2735 = uint((float(_2723.y) * floor(float(uint(cbSceneParam._m0[85u].y * _575) / _2724))) + floor(float(uint(cbSceneParam._m0[85u].x * _574) / _2724)));
        float _2745 = (log2(_1815 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2746 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        uint _2749 = uint(isnan(14.0) ? _2746 : (isnan(_2746) ? 14.0 : min(_2746, 14.0)));
        uvec4 _2754 = texelFetch(g_lightClusterGridBuffer, int(((_2749 << 2u) + (_2735 << 6u)) >> 2u));
        uint _2755 = _2754.x;
        uint _2756 = _2723.z;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((((1u << ((_2756 >> 4u) & 15u)) + 4294967295u) & _2755) == 0u) || ((_2756 & 240u) == 0u))
        {
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
        }
        else
        {
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            uint _3010 = 0u;
            uint _3019;
            bool _3020;
            for (;;)
            {
                _3019 = texelFetch(g_lightClassification, int((((_2749 << 5u) + (_2735 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                _3020 = _3019 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_3020)
                {
                    frontier_phi_79_pred = _3007;
                    frontier_phi_79_pred_1 = _3009;
                    frontier_phi_79_pred_2 = _3008;
                    frontier_phi_79_pred_3 = _3006;
                    frontier_phi_79_pred_4 = _3005;
                    frontier_phi_79_pred_5 = _3004;
                }
                else
                {
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    uint _3155;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3019;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    for (;;)
                    {
                        uint _3159 = uint(findLSB(_3155)) + (_3010 << 5u);
                        uint _3156 = (_3155 + 4294967295u) & _3155;
                        uint _3161 = _3159 * 48u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3181 = (_3159 * 48u) + 4u;
                        vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3200 = (_3159 * 48u) + 8u;
                        vec3 _3211 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x));
                        float _3215 = _3175.x - _1813;
                        float _3216 = _3175.y - _1814;
                        float _3217 = _3175.z - _1815;
                        float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                        float _3221 = inversesqrt(_3218);
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3225 = dot(vec3(_598, _601, _604), vec3(_3222, _3223, _3224));
                        float _3230 = 1.0 - (_3218 * _3175.w);
                        float _4624 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3232 = sqrt(_3218) * _3194.w;
                        float _3235 = 1.39999997615814208984375 / (_3232 + 1.39999997615814208984375);
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3225) + _3236;
                        float _3242 = _3232 * _3232;
                        float _3246 = ((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3231) / ((_3242 * 0.699999988079071044921875) + 1.0);
                        float _3250 = (-0.0) - _1813;
                        float _3251 = (-0.0) - _1814;
                        float _3252 = (-0.0) - _1815;
                        float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3266 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                        float _3267 = 1.0 - _719;
                        float _3274 = sqrt(1.0 - ((1.0 - (_3267 * _3267)) * (1.0 - (_3266 * _3266))));
                        float _3275 = _3274 * _3274;
                        float _3276 = _3275 * _3275;
                        float _3277 = _3257 + _3222;
                        float _3278 = _3258 + _3223;
                        float _3279 = _3259 + _3224;
                        float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                        float _3287 = dot(vec3(_598, _601, _604), vec3(_3257, _3258, _3259));
                        float _4640 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3291 = dot(vec3(_598, _601, _604), vec3(_3283 * _3277, _3283 * _3278, _3283 * _3279));
                        float _4651 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3298 = ((_3294 * _3294) * (_3276 + (-1.0))) + 1.0;
                        float _3299 = _3235 * _3275;
                        float _3300 = _3299 * _3299;
                        float _3303 = ((1.0 - _3300) * _3225) + _3300;
                        float _4662 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3304 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3305 = 1.0 - _3275;
                        float _3315 = (0.5 / (((_3304 * ((_3290 * _3305) + _3275)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3275) * _3290))) * _3304;
                        float _4673 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3326 = (((_3276 * 3.1415927410125732421875) * (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) / ((_3298 * _3298) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125))) * _3231;
                        _3079 = (_3246 * _3194.x) + _3152;
                        _3080 = (_3246 * _3194.y) + _3153;
                        _3081 = (_3246 * _3194.z) + _3154;
                        _3076 = (_3326 * _3211.x) + _3149;
                        _3077 = (_3326 * _3211.y) + _3150;
                        _3078 = (_3326 * _3211.z) + _3151;
                        if (_3156 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3156;
                        }
                    }
                    frontier_phi_79_pred = _3079;
                    frontier_phi_79_pred_1 = _3081;
                    frontier_phi_79_pred_2 = _3080;
                    frontier_phi_79_pred_3 = _3078;
                    frontier_phi_79_pred_4 = _3077;
                    frontier_phi_79_pred_5 = _3076;
                }
                _2859 = frontier_phi_79_pred;
                _2863 = frontier_phi_79_pred_1;
                _2861 = frontier_phi_79_pred_2;
                _2857 = frontier_phi_79_pred_3;
                _2855 = frontier_phi_79_pred_4;
                _2853 = frontier_phi_79_pred_5;
                uint _3011 = _3010 + 1u;
                if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3004 = _2853;
                    _3005 = _2855;
                    _3006 = _2857;
                    _3007 = _2859;
                    _3008 = _2861;
                    _3009 = _2863;
                    _3010 = _3011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
        }
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.z;
        uint _2869 = (_2867 >> 8u) & 15u;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((4294967295u << _2869) & _2755) == 0u)
        {
            _2972 = _2852;
            _2974 = _2854;
            _2976 = _2856;
            _2978 = _2858;
            _2980 = _2860;
            _2982 = _2862;
        }
        else
        {
            float _2997 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
            float _2998 = _2997 * _1813;
            float _2999 = _2997 * _1814;
            float _3000 = _2997 * _1815;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2869 < ((_2867 >> 12u) & 15u))
            {
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _3132 = _2852;
                float _3133 = _2854;
                float _3134 = _2856;
                float _3135 = _2858;
                float _3136 = _2860;
                float _3137 = _2862;
                uint _3138 = _2869;
                uint _3147;
                bool _3148;
                for (;;)
                {
                    _3147 = texelFetch(g_lightClassification, int((((_2749 << 5u) + (_2735 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                    _3148 = _3147 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_3148)
                    {
                        frontier_phi_90_pred = _3134;
                        frontier_phi_90_pred_1 = _3135;
                        frontier_phi_90_pred_2 = _3137;
                        frontier_phi_90_pred_3 = _3136;
                        frontier_phi_90_pred_4 = _3133;
                        frontier_phi_90_pred_5 = _3132;
                    }
                    else
                    {
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3353 = _3132;
                        float _3354 = _3133;
                        float _3355 = _3134;
                        float _3356 = _3135;
                        float _3357 = _3136;
                        float _3358 = _3137;
                        uint _3359 = _3147;
                        uint _3360;
                        vec4 _3385;
                        float _3386;
                        vec4 _3401;
                        vec3 _3413;
                        vec4 _3429;
                        vec4 _3444;
                        float _3491;
                        bool _3492;
                        for (;;)
                        {
                            uint _3370 = ((_3138 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3359));
                            _3360 = (_3359 + 4294967295u) & _3359;
                            uint _3372 = _3370 * 40u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3386 = _3385.w;
                            uint _3388 = (_3370 * 40u) + 4u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3370 * 40u) + 8u;
                            _3413 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x));
                            uint _3416 = (_3370 * 40u) + 16u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3370 * 40u) + 20u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3447 = (_3370 * 40u) + 24u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3466 = (_3370 * 40u) + 28u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3491 = fma(_1815, _3479.z, fma(_1814, _3479.y, _3479.x * _1813)) + _3479.w;
                            _3492 = !((fma(_1815, _3460.z, fma(_1814, _3460.y, _3460.x * _1813)) + _3460.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_3492)
                            {
                                float _3519 = _3385.x - _1813;
                                float _3520 = _3385.y - _1814;
                                float _3521 = _3385.z - _1815;
                                float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                                float _3525 = inversesqrt(_3522);
                                float _3526 = _3525 * _3519;
                                float _3527 = _3525 * _3520;
                                float _3528 = _3525 * _3521;
                                float _3532 = 1.0 - (_3522 / (_3386 * _3386));
                                float _4684 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3537 = sqrt(_3522) * _3401.w;
                                float _3539 = 1.39999997615814208984375 / (_3537 + 1.39999997615814208984375);
                                float _3540 = _3539 * _3539;
                                float _3543 = ((1.0 - _3540) * dot(vec3(_3526, _3527, _3528), vec3(_598, _601, _604))) + _3540;
                                float _3546 = _3537 * _3537;
                                float _3550 = (fma(_1815, _3429.z, fma(_1814, _3429.y, _3429.x * _1813)) + _3429.w) / _3491;
                                float _3551 = (fma(_1815, _3444.z, fma(_1814, _3444.y, _3444.x * _1813)) + _3444.w) / _3491;
                                float _3555 = 1.0 - dot(vec2(_3550, _3551), vec2(_3550, _3551));
                                float _4700 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3557 = _3556 * (((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3533) / ((_3546 * 0.699999988079071044921875) + 1.0));
                                float _3569 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                                float _3570 = 1.0 - _719;
                                float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                                float _3578 = _3577 * _3577;
                                float _3579 = _3578 * _3578;
                                float _3580 = _3526 - _2998;
                                float _3581 = _3527 - _2999;
                                float _3582 = _3528 - _3000;
                                float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                                float _3590 = dot(vec3(_598, _601, _604), vec3((-0.0) - _2998, (-0.0) - _2999, (-0.0) - _3000));
                                float _4711 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3594 = dot(vec3(_598, _601, _604), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                                float _4722 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                                float _3602 = _3539 * _3578;
                                float _3603 = _3602 * _3602;
                                float _3609 = ((1.0 - _3603) * dot(vec3(_598, _601, _604), vec3(_3526, _3527, _3528))) + _3603;
                                float _4733 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3611 = 1.0 - _3578;
                                float _3621 = (0.5 / (((_3610 * ((_3593 * _3611) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3578) * _3593))) * _3610;
                                float _4744 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3631 = (_3556 * _3533) * (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) / ((_3601 * _3601) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_96_pred = _3557 * _3401.z;
                                frontier_phi_96_pred_1 = _3557 * _3401.y;
                                frontier_phi_96_pred_2 = _3557 * _3401.x;
                                frontier_phi_96_pred_3 = _3631 * _3413.z;
                                frontier_phi_96_pred_4 = _3631 * _3413.y;
                                frontier_phi_96_pred_5 = _3631 * _3413.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _3640 = frontier_phi_96_pred;
                            _3639 = frontier_phi_96_pred_1;
                            _3638 = frontier_phi_96_pred_2;
                            _3637 = frontier_phi_96_pred_3;
                            _3636 = frontier_phi_96_pred_4;
                            _3635 = frontier_phi_96_pred_5;
                            _3343 = _3638 + _3356;
                            _3344 = _3639 + _3357;
                            _3345 = _3640 + _3358;
                            _3340 = _3635 + _3353;
                            _3341 = _3636 + _3354;
                            _3342 = _3637 + _3355;
                            if (_3360 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3360;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _3342;
                        frontier_phi_90_pred_1 = _3343;
                        frontier_phi_90_pred_2 = _3345;
                        frontier_phi_90_pred_3 = _3344;
                        frontier_phi_90_pred_4 = _3341;
                        frontier_phi_90_pred_5 = _3340;
                    }
                    _2977 = frontier_phi_90_pred;
                    _2979 = frontier_phi_90_pred_1;
                    _2983 = frontier_phi_90_pred_2;
                    _2981 = frontier_phi_90_pred_3;
                    _2975 = frontier_phi_90_pred_4;
                    _2973 = frontier_phi_90_pred_5;
                    uint _3139 = _3138 + 1u;
                    if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3132 = _2973;
                        _3133 = _2975;
                        _3134 = _2977;
                        _3135 = _2979;
                        _3136 = _2981;
                        _3137 = _2983;
                        _3138 = _3139;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2981;
                frontier_phi_71_72_ladder_1 = _2983;
                frontier_phi_71_72_ladder_2 = _2979;
                frontier_phi_71_72_ladder_3 = _2977;
                frontier_phi_71_72_ladder_4 = _2975;
                frontier_phi_71_72_ladder_5 = _2973;
            }
            else
            {
                frontier_phi_71_72_ladder = _2860;
                frontier_phi_71_72_ladder_1 = _2862;
                frontier_phi_71_72_ladder_2 = _2858;
                frontier_phi_71_72_ladder_3 = _2856;
                frontier_phi_71_72_ladder_4 = _2854;
                frontier_phi_71_72_ladder_5 = _2852;
            }
            _2972 = frontier_phi_71_72_ladder_5;
            _2974 = frontier_phi_71_72_ladder_4;
            _2976 = frontier_phi_71_72_ladder_3;
            _2978 = frontier_phi_71_72_ladder_2;
            _2980 = frontier_phi_71_72_ladder;
            _2982 = frontier_phi_71_72_ladder_1;
        }
        float _2987 = isnan(1.0) ? _703 : (isnan(_703) ? 1.0 : min(_703, 1.0));
        _2767 = (_2987 * _2978) + _2280;
        _2769 = (_2987 * _2980) + _2282;
        _2771 = (_2987 * _2982) + _2284;
        _2773 = ((_2972 * _688) * _2987) + _2618;
        _2775 = ((_2974 * _690) * _2987) + _2620;
        _2777 = ((_2976 * _691) * _2987) + _2622;
    }
    else
    {
        _2767 = _2280;
        _2769 = _2282;
        _2771 = _2284;
        _2773 = _2618;
        _2775 = _2620;
        _2777 = _2622;
    }
    vec4 _2783 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4760 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4771 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4782 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _2807 = (((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2767 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _703))) + ((_2773 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1544)) * cbPerFrame._m0[3u].x)) + (_2783.x * cbMtdParam._m0[3u].x);
    float _2809 = ((_2783.y * cbMtdParam._m0[3u].x) + ((_2775 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1544)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2769 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _703)));
    float _2811 = ((_2783.z * cbMtdParam._m0[3u].x) + ((_2777 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1544)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2771 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _703)));
    float _2812 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2813 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2814 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    uint _2815 = _630 + 6u;
    float _2823 = _574 / cbSceneParam._m0[86u].x;
    float _2824 = _575 / cbSceneParam._m0[86u].y;
    vec4 _2838 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, (log2((isnan(cbSceneParam._m0[77u].w) ? _492 : (isnan(_492) ? cbSceneParam._m0[77u].w : min(_492, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2840 = _2838.x;
    float _2841 = _2838.y;
    float _2842 = _2838.z;
    float _2843 = _2838.w;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_492 > cbSceneParam._m0[78u].w)
    {
        float _2877 = isnan(_492) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _492 : min(cbSceneParam._m0[80u].w, _492));
        float _2878 = _2877 / _492;
        float _2889 = _2878 * _544;
        float _2890 = _545 * _2878;
        float _2891 = (-0.0) - _2890;
        float _2892 = _2878 * _546;
        float _2894 = (cbSceneParam._m0[77u].w * _2891) / _2877;
        float _2895 = _2894 + cbSceneParam._m0[79u].w;
        float _2896 = cbSceneParam._m0[79u].w - _2890;
        float _2902 = sqrt(((_2889 * _2889) + (_2890 * _2890)) + (_2892 * _2892));
        float _2905 = (1.0 - (cbSceneParam._m0[77u].w / _2877)) * _2902;
        float _2910 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2912 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3089;
        if (abs((_2891 - _2894) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3089 = ((((_2895 > 0.0) ? exp2(_2910 * _2895) : (2.0 - exp2(_2912 * _2895))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2905;
        }
        else
        {
            float _3033 = 1.0 / cbSceneParam._m0[80u].x;
            float _3034 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : max(_2895, _2896));
            float _3035 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : min(_2895, _2896));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            _3089 = ((abs(_2902 / _2891) * cbSceneParam._m0[80u].y) * ((((_3044 - _3045) * 2.0) - ((exp2(_2910 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0)))) - exp2(_2910 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))))) * _3033)) - ((exp2(_2912 * _3044) - exp2(_2912 * _3045)) * _3033))) + (_2905 * cbSceneParam._m0[80u].z);
        }
        vec4 _3091 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, 1.0), 0.0);
        float _3100 = exp2((_3089 * (-1.44269502162933349609375)) * (1.0 - _3091.w));
        float _3101 = log2(_3100);
        float _3117 = log2(_2843);
        _2914 = (exp2(_3117 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].x)) * _3091.x) / cbSceneParam._m0[78u].x)) + _2840;
        _2916 = (exp2(_3117 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].y)) * _3091.y) / cbSceneParam._m0[78u].y)) + _2841;
        _2918 = (exp2(_3117 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].z)) * _3091.z) / cbSceneParam._m0[78u].z)) + _2842;
        _2920 = _3100 * _2843;
    }
    else
    {
        _2914 = _2840;
        _2916 = _2841;
        _2918 = _2842;
        _2920 = _2843;
    }
    bool _3127;
    vec4 _2930;
    vec4 _2952;
    float _2954;
    float _2958;
    float _2959;
    float _2960;
    float _2961;
    bool _2971;
    for (;;)
    {
        _2930 = cbMatDynParam._m0[0u];
        float _2932 = roundEven(_2930.y);
        bool _2933 = _2932 == 3.0;
        float _2934 = log2(_2920);
        float _2941 = exp2(_2934 * cbSceneParam._m0[78u].x) * _2812;
        float _2942 = exp2(_2934 * cbSceneParam._m0[78u].y) * _2813;
        float _2943 = exp2(_2934 * cbSceneParam._m0[78u].z) * _2814;
        float _2950 = _560 + (-0.5);
        _2952 = cbMtdParam._m0[1u];
        _2954 = _2952.y * _2950;
        float _2957 = (_2932 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2958 = _2957 * (_2933 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2914)));
        _2959 = _2957 * (_2933 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2916)));
        _2960 = _2957 * (_2933 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2918)));
        _2961 = _2950 * 0.999000012874603271484375;
        _2971 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2971)
        {
            if ((cbInstanceData._m0[_630 + 7u].x + _2961) < 0.5)
            {
                _3127 = true;
                break;
            }
        }
        uint _3068 = _632 + uint(_2930.w);
        if ((cbInstanceData._m0[_3068].w < 1.0) && ((cbInstanceData._m0[_3068].w + _2961) < 0.5))
        {
            _3127 = true;
            break;
        }
        if ((_2954 + 1.0) < _2952.x)
        {
            _3127 = true;
            break;
        }
        _3127 = false;
        break;
    }
    float _3331;
    if (_3127)
    {
        discard_state = true;
        _3331 = 0.0;
    }
    else
    {
        _3331 = cbInstanceData._m0[_2815].w;
    }
    SV_Target.x = _2958;
    SV_Target.y = _2959;
    SV_Target.z = _2960;
    SV_Target.w = _3331;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2815].w;
    discard_exit();
}


