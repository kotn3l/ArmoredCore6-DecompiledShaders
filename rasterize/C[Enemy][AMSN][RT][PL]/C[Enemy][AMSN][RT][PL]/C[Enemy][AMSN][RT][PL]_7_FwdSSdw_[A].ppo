#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1086;
float _3520;
float _3521;
float _3522;
float _3523;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    float _258 = log2(0.0);
    bool _261 = exp2(_258 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _262;
    float _264;
    float _266;
    if (_261)
    {
        _262 = cbMtdParam._m0[18u].x;
        _264 = cbMtdParam._m0[18u].y;
        _266 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _262 = cbMtdParam._m0[17u].x;
        _264 = cbMtdParam._m0[17u].y;
        _266 = cbMtdParam._m0[17u].z;
    }
    float _271;
    if (_261)
    {
        _271 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _271 = cbMtdParam._m0[19u].z;
    }
    float _277;
    float _279;
    if (_261)
    {
        _277 = cbMtdParam._m0[26u].x;
        _279 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _277 = cbMtdParam._m0[22u].x;
        _279 = cbMtdParam._m0[22u].y;
    }
    float _281 = _277 * TEXCOORD.x;
    float _282 = _279 * TEXCOORD.y;
    float _294 = floor(_271);
    vec4 _297 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _281) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _282) + cbTextureTilingScale._m0[6u].w, _294));
    vec4 _320 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = (((_262 * cbMtdParam._m0[19u].w) * _297.x) * cbMtdParam._m0[9u].x) * _320.x;
    float _333 = (((_264 * cbMtdParam._m0[19u].w) * _297.y) * cbMtdParam._m0[9u].y) * _320.y;
    float _337 = (((_266 * cbMtdParam._m0[19u].w) * _297.z) * cbMtdParam._m0[9u].z) * _320.z;
    vec4 _349 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _353 = _349.z;
    vec4 _366 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _281) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _282) + cbTextureTilingScale._m0[8u].w, _294));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[25u].x;
    _186[0u] = cbMtdParam._m0[25u].y;
    _185[1u] = cbMtdParam._m0[25u].z;
    _186[1u] = cbMtdParam._m0[25u].w;
    float _380 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _383 = uint(int(isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0))));
    float _388 = _186[_383] + _366.x;
    vec4 _407 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _281) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _282) + cbTextureTilingScale._m0[7u].w, _294));
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3542 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _421 = sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))));
    float _430 = (cbMtdParam._m0[20u].x * (((_353 * 2.0) * (_407.z + _185[_383])) - _353)) + _353;
    float _434 = (cbMtdParam._m0[20u].y * ((_349.x * 2.0) + (-1.0))) + _414;
    float _435 = (cbMtdParam._m0[20u].y * ((_349.y * 2.0) + (-1.0))) + _415;
    float _438 = fma(_421, _236, fma(_435, _228 * TANGENT.x, (_214 * _206) * _434));
    float _441 = fma(_421, _237, fma(_435, _228 * TANGENT.y, (_214 * _207) * _434));
    float _444 = fma(_421, _238, fma(_435, _228 * TANGENT.z, (_214 * _208) * _434));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    float _449 = _448 * _438;
    float _450 = _448 * _441;
    float _451 = _448 * _444;
    float _3553 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _452 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3575 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3586 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3597 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _456 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _472 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _524 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _514);
    float _525 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _514);
    float _526 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _514);
    float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
    float _531 = _524 * _530;
    float _532 = _525 * _530;
    float _533 = _526 * _530;
    vec4 _538 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _540 = _538.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _766 = sqrt(((_524 * _524) + (_525 * _525)) + (_526 * _526));
        float _772 = (cbMatDynParam._m0[5u].x * _766) + cbMatDynParam._m0[5u].y;
        float _3608 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _777 = (cbMatDynParam._m0[5u].z * _766) + cbMatDynParam._m0[5u].w;
        float _3619 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) - _773)) + _773) < ((_540 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _557 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _559 = _557.w;
    float _578 = fma(_451, cbSceneParam._m0[5u].z, fma(_450, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _449));
    float _581 = fma(_451, cbSceneParam._m0[6u].z, fma(_450, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _449));
    float _584 = fma(_451, cbSceneParam._m0[7u].z, fma(_450, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _449));
    vec4 _586 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _597 = (((_586.y - _452) + (_586.w * _452)) * cbMtdParam._m0[3u].x) + _452;
    uint _610 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = _610 + 9u;
    uint _613 = _612 + uint(cbMatDynParam._m0[0u].w);
    float _619 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_613].x;
    float _620 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_613].y;
    float _621 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_613].z;
    float _3630 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    vec4 _625 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _630 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _641 = (((_630.x - _456) + (_630.w * _456)) * cbMtdParam._m0[3u].x) + _456;
    float _654 = (cbMtdParam._m0[3u].x * (((_622 * _559) - _622) + _625.x)) + _622;
    float _655 = (cbMtdParam._m0[3u].x * (((_623 * _559) - _623) + _625.y)) + _623;
    float _656 = (cbMtdParam._m0[3u].x * (((_624 * _559) - _624) + _625.z)) + _624;
    float _657 = 1.0 - _641;
    float _658 = _657 * _654;
    float _659 = _657 * _655;
    float _660 = _657 * _656;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _641;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _641;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _641;
    float _668 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    float _671 = _667 + 0.039999999105930328369140625;
    vec4 _680 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _683 = _680.x * TEXCOORD_4;
    float _684 = dot(vec3(_449, _450, _451), vec3(_531, _532, _533));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _449) - _531;
    float _692 = (_687 * _450) - _532;
    float _693 = (_687 * _451) - _533;
    float _697 = abs(dot(vec3(_531, _532, _533), vec3(_449, _450, _451)));
    float _3663 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_597);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _718 = (1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _719 = _712 * _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1085;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _810 = fma(_755, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747));
        float _814 = fma(_755, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747));
        float _818 = fma(_755, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747));
        float _843 = _747 + _449;
        float _844 = _751 + _450;
        float _845 = _755 + _451;
        float _855 = fma(_845, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843)) - _810;
        float _856 = fma(_845, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843)) - _814;
        float _857 = fma(_845, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843)) - _818;
        float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
        float _874 = ((_861 * _855) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_810 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_861 * _856) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_814 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_861 * _857) / cbModelParam._m0[34u].z) + ((((((_818 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        float _913 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_879.x + (-0.5));
        float _915 = _913 * (_879.y + (-0.5));
        float _916 = _913 * (_879.z + (-0.5));
        float _923 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_886.x + (-0.5));
        float _925 = _923 * (_886.y + (-0.5));
        float _926 = _923 * (_886.z + (-0.5));
        float _933 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_893.x + (-0.5));
        float _935 = _933 * (_893.y + (-0.5));
        float _936 = _933 * (_893.z + (-0.5));
        float _943 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_900.x + (-0.5));
        float _945 = _943 * (_900.y + (-0.5));
        float _946 = _943 * (_900.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _967 = (dot(vec3(_449, _450, _451), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _977 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3711 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_979 + 1.0))) + _984) * _947;
        float _994 = _915 * 0.5;
        float _995 = _925 * 0.5;
        float _996 = _935 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_449, _450, _451), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3744 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1021 + 1.0))) + _1026) * _948;
        float _1036 = _916 * 0.5;
        float _1037 = _926 * 0.5;
        float _1038 = _936 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_449, _450, _451), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3777 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1063 + 1.0))) + _1068) * _949;
        _1085 = _916;
        _1087 = _915;
        _1088 = _914;
        _1089 = _926;
        _1090 = _925;
        _1091 = _924;
        _1092 = _936;
        _1093 = _935;
        _1094 = _934;
        _1095 = _949;
        _1096 = _948;
        _1097 = _947;
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _1086;
        _1087 = _1086;
        _1088 = _1086;
        _1089 = _1086;
        _1090 = _1086;
        _1091 = _1086;
        _1092 = _1086;
        _1093 = _1086;
        _1094 = _1086;
        _1095 = _1086;
        _1096 = _1086;
        _1097 = _1086;
        _1098 = 0.0;
        _1099 = 0.0;
        _1100 = 0.0;
    }
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1129 = fma(_755, cbModelParam._m0[30u].z, fma(_751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _747));
        float _1133 = fma(_755, cbModelParam._m0[31u].z, fma(_751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _747));
        float _1137 = fma(_755, cbModelParam._m0[32u].z, fma(_751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _747));
        float _1160 = _747 + _449;
        float _1161 = _751 + _450;
        float _1162 = _755 + _451;
        float _1172 = fma(_1162, cbModelParam._m0[30u].z, fma(_1161, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1160)) - _1129;
        float _1173 = fma(_1162, cbModelParam._m0[31u].z, fma(_1161, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1160)) - _1133;
        float _1174 = fma(_1162, cbModelParam._m0[32u].z, fma(_1161, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1160)) - _1137;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1129 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1133 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[35u].z) + ((((((_1137 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1228 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1195.x + (-0.5));
        float _1230 = _1228 * (_1195.y + (-0.5));
        float _1231 = _1228 * (_1195.z + (-0.5));
        float _1238 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1202.x + (-0.5));
        float _1240 = _1238 * (_1202.y + (-0.5));
        float _1241 = _1238 * (_1202.z + (-0.5));
        float _1248 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1209.x + (-0.5));
        float _1250 = _1248 * (_1209.y + (-0.5));
        float _1251 = _1248 * (_1209.z + (-0.5));
        float _1258 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1216.x + (-0.5));
        float _1260 = _1258 * (_1216.y + (-0.5));
        float _1261 = _1258 * (_1216.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_449, _450, _451), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3840 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1292 + 1.0))) + _1297) * _1262;
        float _1307 = _1230 * 0.5;
        float _1308 = _1240 * 0.5;
        float _1309 = _1250 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_449, _450, _451), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3873 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1334 + 1.0))) + _1339) * _1263;
        float _1349 = _1231 * 0.5;
        float _1350 = _1241 * 0.5;
        float _1351 = _1251 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_449, _450, _451), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3906 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1376 + 1.0))) + _1381) * _1264;
        _1398 = _1231;
        _1399 = _1230;
        _1400 = _1229;
        _1401 = _1241;
        _1402 = _1240;
        _1403 = _1239;
        _1404 = _1251;
        _1405 = _1250;
        _1406 = _1249;
        _1407 = _1264;
        _1408 = _1263;
        _1409 = _1262;
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1086;
        _1399 = _1086;
        _1400 = _1086;
        _1401 = _1086;
        _1402 = _1086;
        _1403 = _1086;
        _1404 = _1086;
        _1405 = _1086;
        _1406 = _1086;
        _1407 = _1086;
        _1408 = _1086;
        _1409 = _1086;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1098)) + _1098;
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1099)) + _1099;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1100)) + _1100;
    float _1445 = fma(_1424, cbSceneParam._m0[89u].z, fma(_1423, cbSceneParam._m0[89u].y, _1422 * cbSceneParam._m0[89u].x));
    float _1448 = fma(_1424, cbSceneParam._m0[90u].z, fma(_1423, cbSceneParam._m0[90u].y, _1422 * cbSceneParam._m0[90u].x));
    float _1451 = fma(_1424, cbSceneParam._m0[91u].z, fma(_1423, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1422));
    float _1466 = _691 * 0.5;
    float _1467 = _692 * 0.5;
    float _1468 = _693 * 0.5;
    float _1469 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1472 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1475 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1509;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1482 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1085, _1089, _1092, _1095));
        float _1486 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1490 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1497 = dot(vec4(cbModelParam._m0[39u]), vec4(_1466, _1467, _1468, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1520;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1511 = dot(vec4(cbModelParam._m0[40u]), vec4(_1466, _1467, _1468, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1524 = (_1520 * cbModelParam._m0[1u].x) + (_1509 * (1.0 - cbModelParam._m0[1u].x));
    float _1534 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _597);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1534 : min(cbModelParam._m0[25u].z, _1534));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1584 = fma(_755, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747)) + cbModelParam._m0[13u].w;
        float _1588 = fma(_755, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747)) + cbModelParam._m0[14u].w;
        float _1592 = fma(_755, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747)) + cbModelParam._m0[15u].w;
        float _1595 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1598 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1601 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1629;
        if (_1595 > 0.0)
        {
            _1629 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1629 = frontier_phi_25_23_ladder;
        }
        float _1854;
        if (_1598 > 0.0)
        {
            _1854 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1854 = frontier_phi_34_30_ladder;
        }
        float _2111;
        if (_1601 > 0.0)
        {
            _2111 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2111 = frontier_phi_46_41_ladder;
        }
        float _2113 = isnan(_1854) ? _1629 : (isnan(_1629) ? _1854 : min(_1629, _1854));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1595) + _1584;
        float _2119 = (_2114 * _1598) + _1588;
        float _2120 = (_2114 * _1601) + _1592;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2121;
        float _2125 = _2121 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 > _2125) || ((_2119 < _2123) || ((_2118 < _2123) || (_2118 > _2125))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2120, cbModelParam._m0[9u].z, fma(_2119, cbModelParam._m0[9u].y, _2118 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2120, cbModelParam._m0[10u].z, fma(_2119, cbModelParam._m0[10u].y, _2118 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2120, cbModelParam._m0[11u].z, fma(_2119, cbModelParam._m0[11u].y, _2118 * cbModelParam._m0[11u].x))), _1535);
            frontier_phi_24_46_ladder = _2248.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2248.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2248.x * cbModelParam._m0[1u].y;
        }
        _1617 = frontier_phi_24_46_ladder_2;
        _1619 = frontier_phi_24_46_ladder_1;
        _1621 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1535);
        _1617 = _1605.x * cbModelParam._m0[1u].y;
        _1619 = _1605.y * cbModelParam._m0[1u].y;
        _1621 = _1605.z * cbModelParam._m0[1u].y;
    }
    float _1625 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _597);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1625 : min(cbModelParam._m0[25u].w, _1625));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1679 = fma(_755, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747)) + cbModelParam._m0[21u].w;
        float _1683 = fma(_755, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747)) + cbModelParam._m0[22u].w;
        float _1687 = fma(_755, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747)) + cbModelParam._m0[23u].w;
        float _1690 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1693 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1696 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1859;
        if (_1690 > 0.0)
        {
            _1859 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1859 = frontier_phi_36_32_ladder;
        }
        float _2138;
        if (_1693 > 0.0)
        {
            _2138 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2138 = frontier_phi_48_43_ladder;
        }
        float _2351;
        if (_1696 > 0.0)
        {
            _2351 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2351 = frontier_phi_57_54_ladder;
        }
        float _2353 = isnan(_2138) ? _1859 : (isnan(_1859) ? _2138 : min(_1859, _2138));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1690) + _1679;
        float _2359 = (_2354 * _1693) + _1683;
        float _2360 = (_2354 * _1696) + _1687;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2361;
        float _2364 = _2361 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2360 > _2364) || ((_2360 < _2362) || ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 < _2362) || (_2358 > _2364))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2360, cbModelParam._m0[17u].z, fma(_2359, cbModelParam._m0[17u].y, _2358 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2360, cbModelParam._m0[18u].z, fma(_2359, cbModelParam._m0[18u].y, _2358 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2360, cbModelParam._m0[19u].z, fma(_2359, cbModelParam._m0[19u].y, _2358 * cbModelParam._m0[19u].x))), _1626);
            frontier_phi_33_57_ladder = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2576.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2576.z * cbModelParam._m0[1u].z;
        }
        _1715 = frontier_phi_33_57_ladder_1;
        _1717 = frontier_phi_33_57_ladder;
        _1719 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1626);
        _1715 = _1699.x * cbModelParam._m0[1u].z;
        _1717 = _1699.y * cbModelParam._m0[1u].z;
        _1719 = _1699.z * cbModelParam._m0[1u].z;
    }
    float _1732 = (((_718 * _668) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1715 - _1617)) + _1617);
    float _1734 = (((_718 * _670) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1717 - _1619)) + _1619);
    float _1736 = (((_718 * _671) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1719 - _1621)) + _1621);
    float _1739 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, _1732 * cbSceneParam._m0[91u].x));
    vec4 _1753 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_554, _555));
    float _1755 = _1753.w;
    float _1767 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1755);
    float _1768 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1755);
    float _1769 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1755);
    uvec4 _1773 = floatBitsToUint(cbInstanceData._m0[_610 + 5u]);
    uint _1775 = _1773.x * 14u;
    uint _1776 = _1775 + 13u;
    float _1783 = _683 + (-1.0);
    float _1788 = (cbLight._m0[_1776].x * _1783) + 1.0;
    float _1789 = (cbLight._m0[_1776].y * _1783) + 1.0;
    float _1790 = (cbLight._m0[_1776].z * _1783) + 1.0;
    float _1791 = (cbLight._m0[_1776].w * _1783) + 1.0;
    uint _1792 = _1775 + 5u;
    float _1798 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    uint _1802 = _1775 + 4u;
    float _1812 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1816 = _1775 | 1u;
    float _1827 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_449, _450, _451));
    float _1830 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_449, _450, _451));
    float _4042 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _4053 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1835 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1837 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1844 = ((cbLight._m0[_1792].x * _1798) * _1837) + (((cbLight._m0[_1802].x * _1767) * _1812) * _1835);
    float _1845 = ((_1798 * cbLight._m0[_1792].y) * _1837) + (((cbLight._m0[_1802].y * _1768) * _1812) * _1835);
    float _1846 = ((_1798 * cbLight._m0[_1792].z) * _1837) + (((cbLight._m0[_1802].z * _1769) * _1812) * _1835);
    uvec4 _1851 = floatBitsToUint(cbLight._m0[_1775 + 12u]);
    bool _1853 = _1851.x == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1853)
    {
        _1864 = _1844;
        _1866 = _1845;
        _1868 = _1846;
    }
    else
    {
        uint _1872 = _1775 + 6u;
        float _1888 = (dot(vec3(cbLight._m0[_1775 + 2u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _1889 = _1888 * _1888;
        float _4064 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1891 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _1864 = (((cbLight._m0[_1872].x * 0.3183098733425140380859375) * _1890) * _1891) + _1844;
        _1866 = (((cbLight._m0[_1872].y * 0.3183098733425140380859375) * _1890) * _1891) + _1845;
        _1868 = (((cbLight._m0[_1872].z * 0.3183098733425140380859375) * _1890) * _1891) + _1846;
    }
    bool _1871 = _1851.y == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1871)
    {
        _1909 = _1864;
        _1911 = _1866;
        _1913 = _1868;
    }
    else
    {
        uint _2082 = _1775 + 7u;
        float _2098 = (dot(vec3(cbLight._m0[_1775 + 3u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _2099 = _2098 * _2098;
        float _4080 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2100 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2101 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _1909 = (((cbLight._m0[_2082].x * 0.3183098733425140380859375) * _2100) * _2101) + _1864;
        _1911 = (((cbLight._m0[_2082].y * 0.3183098733425140380859375) * _2100) * _2101) + _1866;
        _1913 = (((cbLight._m0[_2082].z * 0.3183098733425140380859375) * _2100) * _2101) + _1868;
    }
    uint _1916 = _1775 + 8u;
    float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1775].w)) * _597) * 0.949999988079071044921875);
    float _1930 = _1929 * _1929;
    float _1931 = cbLight._m0[_1775].x + _531;
    float _1932 = cbLight._m0[_1775].y + _532;
    float _1933 = cbLight._m0[_1775].z + _533;
    float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
    float _1938 = _1937 * _1931;
    float _1939 = _1937 * _1932;
    float _1940 = _1937 * _1933;
    float _1941 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1775].xyz));
    float _4096 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _1945 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _1946 = dot(vec3(_449, _450, _451), vec3(_1938, _1939, _1940));
    float _4118 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1950 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_1938, _1939, _1940));
    float _4129 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1954 = _1930 * _1930;
    float _1958 = ((_1949 * _1949) * (_1954 + (-1.0))) + 1.0;
    float _1966 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
    float _1967 = 0.959999978542327880859375 - _665;
    float _1969 = 0.959999978542327880859375 - _666;
    float _1970 = 0.959999978542327880859375 - _667;
    float _1977 = 1.0 - _1930;
    float _1988 = (0.5 / (((_1945 * ((_1944 * _1977) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _1977) + _1930) * _1944))) * _1944;
    float _4140 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1990 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1954 / ((_1958 * _1958) * 3.141590118408203125));
    uint _2004 = _1775 + 9u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _597) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1816].x + _531;
    float _2018 = cbLight._m0[_1816].y + _532;
    float _2019 = cbLight._m0[_1816].z + _533;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1816].xyz));
    float _4151 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2031 = dot(vec3(_449, _450, _451), vec3(_2024, _2025, _2026));
    float _4162 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2035 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_2024, _2025, _2026));
    float _4173 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2039 = _2016 * _2016;
    float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
    float _2050 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2057 = 1.0 - _2016;
    float _2067 = (0.5 / (((_1945 * ((_2030 * _2057) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2057) + _2016) * _2030))) * _2030;
    float _4184 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
    float _2079 = (((((_2050 * _1967) + _668) * cbLight._m0[_2004].x) * _2069) * _1798) + ((((cbLight._m0[_1916].x * _1767) * ((_1966 * _1967) + _668)) * _1990) * _1812);
    float _2080 = (((((_2050 * _1969) + _670) * cbLight._m0[_2004].y) * _2069) * _1798) + ((((cbLight._m0[_1916].y * _1768) * ((_1966 * _1969) + _670)) * _1990) * _1812);
    float _2081 = (((((_2050 * _1970) + _671) * cbLight._m0[_2004].z) * _2069) * _1798) + ((((cbLight._m0[_1916].z * _1769) * ((_1966 * _1970) + _671)) * _1990) * _1812);
    float _2143;
    float _2145;
    float _2147;
    if (_1853)
    {
        _2143 = _2079;
        _2145 = _2080;
        _2147 = _2081;
    }
    else
    {
        uint _2149 = _1775 + 2u;
        uint _2153 = _1775 + 10u;
        float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _597) * 0.949999988079071044921875);
        float _2168 = _2167 * _2167;
        float _2169 = cbLight._m0[_2149].x + _531;
        float _2170 = cbLight._m0[_2149].y + _532;
        float _2171 = cbLight._m0[_2149].z + _533;
        float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
        float _2176 = _2175 * _2169;
        float _2177 = _2175 * _2170;
        float _2178 = _2175 * _2171;
        float _2179 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2149].xyz));
        float _4195 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2183 = dot(vec3(_449, _450, _451), vec3(_2176, _2177, _2178));
        float _4206 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2187 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2176, _2177, _2178));
        float _4217 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2191 = _2168 * _2168;
        float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
        float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
        float _2209 = 1.0 - _2168;
        float _2219 = (0.5 / (((_1945 * ((_2182 * _2209) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2209) + _2168) * _2182))) * _2182;
        float _4228 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2221 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
        float _2222 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2143 = (((((_2202 * _1967) + _668) * cbLight._m0[_2153].x) * _2221) * _2222) + _2079;
        _2145 = (((((_2202 * _1969) + _670) * cbLight._m0[_2153].y) * _2221) * _2222) + _2080;
        _2147 = (((((_2202 * _1970) + _671) * cbLight._m0[_2153].z) * _2221) * _2222) + _2081;
    }
    float _2257;
    float _2259;
    float _2261;
    if (_1871)
    {
        _2257 = _2143;
        _2259 = _2145;
        _2261 = _2147;
    }
    else
    {
        uint _2268 = _1775 + 3u;
        uint _2272 = _1775 + 11u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _597) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _531;
        float _2289 = cbLight._m0[_2268].y + _532;
        float _2290 = cbLight._m0[_2268].z + _533;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2268].xyz));
        float _4244 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2302 = dot(vec3(_449, _450, _451), vec3(_2295, _2296, _2297));
        float _4255 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4266 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
        float _2328 = 1.0 - _2287;
        float _2338 = (0.5 / (((_1945 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2328) + _2287) * _2301))) * _2301;
        float _4277 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _2257 = (((((_2321 * _1967) + _668) * cbLight._m0[_2272].x) * _2340) * _2341) + _2143;
        _2259 = (((((_2321 * _1969) + _670) * cbLight._m0[_2272].y) * _2340) * _2341) + _2145;
        _2261 = (((((_2321 * _1970) + _671) * cbLight._m0[_2272].z) * _2340) * _2341) + _2147;
    }
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_1773.y == 0u)
    {
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2416;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2416;
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2416;
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.x;
        uint _2443 = uint((float(_2431.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2432))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2432)));
        float _2453 = (log2(_2419 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2454 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        uint _2457 = uint(isnan(14.0) ? _2454 : (isnan(_2454) ? 14.0 : min(_2454, 14.0)));
        uvec4 _2462 = texelFetch(g_lightClusterGridBuffer, int(((_2457 << 2u) + (_2443 << 6u)) >> 2u));
        uint _2463 = _2462.x;
        uint _2464 = _2431.z;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((((1u << ((_2464 >> 4u) & 15u)) + 4294967295u) & _2463) == 0u) || ((_2464 & 240u) == 0u))
        {
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
        }
        else
        {
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            uint _2739 = 0u;
            uint _2748;
            bool _2749;
            for (;;)
            {
                _2748 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2739 << 2u)) >> 2u)).x;
                _2749 = _2748 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2749)
                {
                    frontier_phi_74_pred = _2738;
                    frontier_phi_74_pred_1 = _2737;
                    frontier_phi_74_pred_2 = _2736;
                    frontier_phi_74_pred_3 = _2735;
                    frontier_phi_74_pred_4 = _2734;
                    frontier_phi_74_pred_5 = _2733;
                }
                else
                {
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    uint _2884;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2748;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    for (;;)
                    {
                        uint _2888 = uint(findLSB(_2884)) + (_2739 << 5u);
                        uint _2885 = (_2884 + 4294967295u) & _2884;
                        uint _2890 = _2888 * 48u;
                        vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2910 = (_2888 * 48u) + 4u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2929 = (_2888 * 48u) + 8u;
                        vec3 _2940 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x));
                        float _2944 = _2904.x - _2417;
                        float _2945 = _2904.y - _2418;
                        float _2946 = _2904.z - _2419;
                        float _2947 = dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946));
                        float _2950 = inversesqrt(_2947);
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2954 = dot(vec3(_578, _581, _584), vec3(_2951, _2952, _2953));
                        float _2959 = 1.0 - (_2947 * _2904.w);
                        float _4303 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2960 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _2961 = sqrt(_2947) * _2923.w;
                        float _2964 = 1.39999997615814208984375 / (_2961 + 1.39999997615814208984375);
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2954) + _2965;
                        float _2971 = _2961 * _2961;
                        float _2975 = ((isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))) * _2960) / ((_2971 * 0.699999988079071044921875) + 1.0);
                        float _2979 = (-0.0) - _2417;
                        float _2980 = (-0.0) - _2418;
                        float _2981 = (-0.0) - _2419;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2996 = exp2(log2(1.0 / ((_2971 * 3.5) + 5.0)) * 0.25);
                        float _2997 = 1.0 - _699;
                        float _3004 = sqrt(1.0 - ((1.0 - (_2997 * _2997)) * (1.0 - (_2996 * _2996))));
                        float _3005 = _3004 * _3004;
                        float _3006 = _3005 * _3005;
                        float _3007 = _2986 + _2951;
                        float _3008 = _2987 + _2952;
                        float _3009 = _2988 + _2953;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3017 = dot(vec3(_578, _581, _584), vec3(_2986, _2987, _2988));
                        float _4319 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3021 = dot(vec3(_578, _581, _584), vec3(_3013 * _3007, _3013 * _3008, _3013 * _3009));
                        float _4330 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3028 = ((_3024 * _3024) * (_3006 + (-1.0))) + 1.0;
                        float _3029 = _2964 * _3005;
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _2954) + _3030;
                        float _4341 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3035 = 1.0 - _3005;
                        float _3045 = (0.5 / (((_3034 * ((_3020 * _3035) + _3005)) + 9.9999999392252902907785028219223e-09) + (((_3034 * _3035) + _3005) * _3020))) * _3034;
                        float _4352 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3056 = (((_3006 * 3.1415927410125732421875) * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) / ((_3028 * _3028) * ((_2971 * 2.1991131305694580078125) + 3.141590118408203125))) * _2960;
                        _2808 = (_2975 * _2923.x) + _2881;
                        _2809 = (_2975 * _2923.y) + _2882;
                        _2810 = (_2975 * _2923.z) + _2883;
                        _2805 = (_3056 * _2940.x) + _2878;
                        _2806 = (_3056 * _2940.y) + _2879;
                        _2807 = (_3056 * _2940.z) + _2880;
                        if (_2885 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2885;
                        }
                    }
                    frontier_phi_74_pred = _2810;
                    frontier_phi_74_pred_1 = _2809;
                    frontier_phi_74_pred_2 = _2808;
                    frontier_phi_74_pred_3 = _2807;
                    frontier_phi_74_pred_4 = _2806;
                    frontier_phi_74_pred_5 = _2805;
                }
                _2592 = frontier_phi_74_pred;
                _2590 = frontier_phi_74_pred_1;
                _2588 = frontier_phi_74_pred_2;
                _2586 = frontier_phi_74_pred_3;
                _2584 = frontier_phi_74_pred_4;
                _2582 = frontier_phi_74_pred_5;
                uint _2740 = _2739 + 1u;
                if (_2740 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2733 = _2582;
                    _2734 = _2584;
                    _2735 = _2586;
                    _2736 = _2588;
                    _2737 = _2590;
                    _2738 = _2592;
                    _2739 = _2740;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
        }
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.z;
        uint _2598 = (_2596 >> 8u) & 15u;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((4294967295u << _2598) & _2463) == 0u)
        {
            _2701 = _2581;
            _2703 = _2583;
            _2705 = _2585;
            _2707 = _2587;
            _2709 = _2589;
            _2711 = _2591;
        }
        else
        {
            float _2726 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
            float _2727 = _2726 * _2417;
            float _2728 = _2726 * _2418;
            float _2729 = _2726 * _2419;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2598 < ((_2596 >> 12u) & 15u))
            {
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2861 = _2581;
                float _2862 = _2583;
                float _2863 = _2585;
                float _2864 = _2587;
                float _2865 = _2589;
                float _2866 = _2591;
                uint _2867 = _2598;
                uint _2876;
                bool _2877;
                for (;;)
                {
                    _2876 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                    _2877 = _2876 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2877)
                    {
                        frontier_phi_85_pred = _2865;
                        frontier_phi_85_pred_1 = _2864;
                        frontier_phi_85_pred_2 = _2863;
                        frontier_phi_85_pred_3 = _2862;
                        frontier_phi_85_pred_4 = _2861;
                        frontier_phi_85_pred_5 = _2866;
                    }
                    else
                    {
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        uint _3089 = _2876;
                        uint _3090;
                        vec4 _3115;
                        float _3116;
                        vec4 _3131;
                        vec3 _3143;
                        vec4 _3159;
                        vec4 _3174;
                        float _3221;
                        bool _3222;
                        for (;;)
                        {
                            uint _3100 = ((_2867 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3089));
                            _3090 = (_3089 + 4294967295u) & _3089;
                            uint _3102 = _3100 * 40u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3116 = _3115.w;
                            uint _3118 = (_3100 * 40u) + 4u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3100 * 40u) + 8u;
                            _3143 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x));
                            uint _3146 = (_3100 * 40u) + 16u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3161 = (_3100 * 40u) + 20u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3177 = (_3100 * 40u) + 24u;
                            vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3196 = (_3100 * 40u) + 28u;
                            vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3221 = fma(_2419, _3209.z, fma(_2418, _3209.y, _3209.x * _2417)) + _3209.w;
                            _3222 = !((fma(_2419, _3190.z, fma(_2418, _3190.y, _3190.x * _2417)) + _3190.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3222)
                            {
                                float _3249 = _3115.x - _2417;
                                float _3250 = _3115.y - _2418;
                                float _3251 = _3115.z - _2419;
                                float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                                float _3255 = inversesqrt(_3252);
                                float _3256 = _3255 * _3249;
                                float _3257 = _3255 * _3250;
                                float _3258 = _3255 * _3251;
                                float _3262 = 1.0 - (_3252 / (_3116 * _3116));
                                float _4363 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3267 = sqrt(_3252) * _3131.w;
                                float _3269 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                                float _3270 = _3269 * _3269;
                                float _3273 = ((1.0 - _3270) * dot(vec3(_3256, _3257, _3258), vec3(_578, _581, _584))) + _3270;
                                float _3276 = _3267 * _3267;
                                float _3280 = (fma(_2419, _3159.z, fma(_2418, _3159.y, _3159.x * _2417)) + _3159.w) / _3221;
                                float _3281 = (fma(_2419, _3174.z, fma(_2418, _3174.y, _3174.x * _2417)) + _3174.w) / _3221;
                                float _3285 = 1.0 - dot(vec2(_3280, _3281), vec2(_3280, _3281));
                                float _4379 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3287 = _3286 * (((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3263) / ((_3276 * 0.699999988079071044921875) + 1.0));
                                float _3299 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                                float _3300 = 1.0 - _699;
                                float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                                float _3308 = _3307 * _3307;
                                float _3309 = _3308 * _3308;
                                float _3310 = _3256 - _2727;
                                float _3311 = _3257 - _2728;
                                float _3312 = _3258 - _2729;
                                float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                                float _3320 = dot(vec3(_578, _581, _584), vec3((-0.0) - _2727, (-0.0) - _2728, (-0.0) - _2729));
                                float _4390 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3324 = dot(vec3(_578, _581, _584), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                                float _4401 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                                float _3332 = _3269 * _3308;
                                float _3333 = _3332 * _3332;
                                float _3339 = ((1.0 - _3333) * dot(vec3(_578, _581, _584), vec3(_3256, _3257, _3258))) + _3333;
                                float _4412 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3341 = 1.0 - _3308;
                                float _3351 = (0.5 / (((_3340 * ((_3323 * _3341) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3340 * _3341) + _3308) * _3323))) * _3340;
                                float _4423 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3361 = (_3286 * _3263) * (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) / ((_3331 * _3331) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3287 * _3131.y;
                                frontier_phi_91_pred_1 = _3287 * _3131.x;
                                frontier_phi_91_pred_2 = _3361 * _3143.z;
                                frontier_phi_91_pred_3 = _3361 * _3143.y;
                                frontier_phi_91_pred_4 = _3361 * _3143.x;
                                frontier_phi_91_pred_5 = _3287 * _3131.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3369 = frontier_phi_91_pred;
                            _3368 = frontier_phi_91_pred_1;
                            _3367 = frontier_phi_91_pred_2;
                            _3366 = frontier_phi_91_pred_3;
                            _3365 = frontier_phi_91_pred_4;
                            _3370 = frontier_phi_91_pred_5;
                            _3073 = _3368 + _3086;
                            _3074 = _3369 + _3087;
                            _3075 = _3370 + _3088;
                            _3070 = _3365 + _3083;
                            _3071 = _3366 + _3084;
                            _3072 = _3367 + _3085;
                            if (_3090 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3090;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3074;
                        frontier_phi_85_pred_1 = _3073;
                        frontier_phi_85_pred_2 = _3072;
                        frontier_phi_85_pred_3 = _3071;
                        frontier_phi_85_pred_4 = _3070;
                        frontier_phi_85_pred_5 = _3075;
                    }
                    _2710 = frontier_phi_85_pred;
                    _2708 = frontier_phi_85_pred_1;
                    _2706 = frontier_phi_85_pred_2;
                    _2704 = frontier_phi_85_pred_3;
                    _2702 = frontier_phi_85_pred_4;
                    _2712 = frontier_phi_85_pred_5;
                    uint _2868 = _2867 + 1u;
                    if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2861 = _2702;
                        _2862 = _2704;
                        _2863 = _2706;
                        _2864 = _2708;
                        _2865 = _2710;
                        _2866 = _2712;
                        _2867 = _2868;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2712;
                frontier_phi_66_67_ladder_1 = _2708;
                frontier_phi_66_67_ladder_2 = _2710;
                frontier_phi_66_67_ladder_3 = _2704;
                frontier_phi_66_67_ladder_4 = _2702;
                frontier_phi_66_67_ladder_5 = _2706;
            }
            else
            {
                frontier_phi_66_67_ladder = _2591;
                frontier_phi_66_67_ladder_1 = _2587;
                frontier_phi_66_67_ladder_2 = _2589;
                frontier_phi_66_67_ladder_3 = _2583;
                frontier_phi_66_67_ladder_4 = _2581;
                frontier_phi_66_67_ladder_5 = _2585;
            }
            _2701 = frontier_phi_66_67_ladder_4;
            _2703 = frontier_phi_66_67_ladder_3;
            _2705 = frontier_phi_66_67_ladder_5;
            _2707 = frontier_phi_66_67_ladder_1;
            _2709 = frontier_phi_66_67_ladder_2;
            _2711 = frontier_phi_66_67_ladder;
        }
        float _2716 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2475 = (_2716 * _2707) + _1909;
        _2477 = (_2716 * _2709) + _1911;
        _2479 = (_2716 * _2711) + _1913;
        _2481 = ((_2701 * _668) * _2716) + _2257;
        _2483 = ((_2703 * _670) * _2716) + _2259;
        _2485 = ((_2705 * _671) * _2716) + _2261;
    }
    else
    {
        _2475 = _1909;
        _2477 = _1911;
        _2479 = _1913;
        _2481 = _2257;
        _2483 = _2259;
        _2485 = _2261;
    }
    vec4 _2491 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4439 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4450 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4461 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _2515 = (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2475 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _683))) + ((_2481 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + (_2491.x * cbMtdParam._m0[3u].x);
    float _2517 = ((_2491.y * cbMtdParam._m0[3u].x) + ((_2483 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2477 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _683)));
    float _2519 = ((_2491.z * cbMtdParam._m0[3u].x) + ((_2485 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2479 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _683)));
    float _2520 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2521 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2522 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    uint _2523 = _610 + 6u;
    float _2531 = _554 / cbSceneParam._m0[86u].x;
    float _2532 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2546 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, (log2((isnan(cbSceneParam._m0[77u].w) ? _472 : (isnan(_472) ? cbSceneParam._m0[77u].w : min(_472, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2548 = _2546.x;
    float _2549 = _2546.y;
    float _2550 = _2546.z;
    float _2551 = _2546.w;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_472 > cbSceneParam._m0[78u].w)
    {
        float _2606 = isnan(_472) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _472 : min(cbSceneParam._m0[80u].w, _472));
        float _2607 = _2606 / _472;
        float _2618 = _2607 * _524;
        float _2619 = _525 * _2607;
        float _2620 = (-0.0) - _2619;
        float _2621 = _2607 * _526;
        float _2623 = (cbSceneParam._m0[77u].w * _2620) / _2606;
        float _2624 = _2623 + cbSceneParam._m0[79u].w;
        float _2625 = cbSceneParam._m0[79u].w - _2619;
        float _2631 = sqrt(((_2618 * _2618) + (_2619 * _2619)) + (_2621 * _2621));
        float _2634 = (1.0 - (cbSceneParam._m0[77u].w / _2606)) * _2631;
        float _2639 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2641 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2818;
        if (abs((_2620 - _2623) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2818 = ((((_2624 > 0.0) ? exp2(_2639 * _2624) : (2.0 - exp2(_2641 * _2624))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2634;
        }
        else
        {
            float _2762 = 1.0 / cbSceneParam._m0[80u].x;
            float _2763 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : max(_2624, _2625));
            float _2764 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : min(_2624, _2625));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            _2818 = ((abs(_2631 / _2620) * cbSceneParam._m0[80u].y) * ((((_2773 - _2774) * 2.0) - ((exp2(_2639 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0)))) - exp2(_2639 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))))) * _2762)) - ((exp2(_2641 * _2773) - exp2(_2641 * _2774)) * _2762))) + (_2634 * cbSceneParam._m0[80u].z);
        }
        vec4 _2820 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, 1.0), 0.0);
        float _2829 = exp2((_2818 * (-1.44269502162933349609375)) * (1.0 - _2820.w));
        float _2830 = log2(_2829);
        float _2846 = log2(_2551);
        _2643 = (exp2(_2846 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].x)) * _2820.x) / cbSceneParam._m0[78u].x)) + _2548;
        _2645 = (exp2(_2846 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].y)) * _2820.y) / cbSceneParam._m0[78u].y)) + _2549;
        _2647 = (exp2(_2846 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].z)) * _2820.z) / cbSceneParam._m0[78u].z)) + _2550;
        _2649 = _2829 * _2551;
    }
    else
    {
        _2643 = _2548;
        _2645 = _2549;
        _2647 = _2550;
        _2649 = _2551;
    }
    bool _2856;
    vec4 _2659;
    vec4 _2681;
    float _2683;
    float _2687;
    float _2688;
    float _2689;
    float _2690;
    bool _2700;
    for (;;)
    {
        _2659 = cbMatDynParam._m0[0u];
        float _2661 = roundEven(_2659.y);
        bool _2662 = _2661 == 3.0;
        float _2663 = log2(_2649);
        float _2670 = exp2(_2663 * cbSceneParam._m0[78u].x) * _2520;
        float _2671 = exp2(_2663 * cbSceneParam._m0[78u].y) * _2521;
        float _2672 = exp2(_2663 * cbSceneParam._m0[78u].z) * _2522;
        float _2679 = _540 + (-0.5);
        _2681 = cbMtdParam._m0[1u];
        _2683 = _2681.y * _2679;
        float _2686 = (_2661 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2687 = _2686 * (_2662 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2643)));
        _2688 = _2686 * (_2662 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2645)));
        _2689 = _2686 * (_2662 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2647)));
        _2690 = _2679 * 0.999000012874603271484375;
        _2700 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2700)
        {
            if ((cbInstanceData._m0[_610 + 7u].x + _2690) < 0.5)
            {
                _2856 = true;
                break;
            }
        }
        uint _2797 = _612 + uint(_2659.w);
        if ((cbInstanceData._m0[_2797].w < 1.0) && ((cbInstanceData._m0[_2797].w + _2690) < 0.5))
        {
            _2856 = true;
            break;
        }
        if ((_2683 + 1.0) < _2681.x)
        {
            _2856 = true;
            break;
        }
        _2856 = false;
        break;
    }
    float _3061;
    if (_2856)
    {
        discard_state = true;
        _3061 = 0.0;
    }
    else
    {
        _3061 = cbInstanceData._m0[_2523].w;
    }
    SV_Target.x = _2687;
    SV_Target.y = _2688;
    SV_Target.z = _2689;
    SV_Target.w = _3061;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2523].w;
    discard_exit();
}


