#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1039;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _252 = log2(0.0);
    bool _255 = exp2(_252 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _256;
    float _258;
    float _260;
    if (_255)
    {
        _256 = cbMtdParam._m0[18u].x;
        _258 = cbMtdParam._m0[18u].y;
        _260 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _256 = cbMtdParam._m0[17u].x;
        _258 = cbMtdParam._m0[17u].y;
        _260 = cbMtdParam._m0[17u].z;
    }
    float _265;
    if (_255)
    {
        _265 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _265 = cbMtdParam._m0[19u].z;
    }
    float _271;
    float _273;
    if (_255)
    {
        _271 = cbMtdParam._m0[26u].x;
        _273 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _271 = cbMtdParam._m0[22u].x;
        _273 = cbMtdParam._m0[22u].y;
    }
    float _275 = _271 * TEXCOORD.x;
    float _276 = _273 * TEXCOORD.y;
    float _288 = floor(_265);
    vec4 _291 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _275) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _276) + cbTextureTilingScale._m0[6u].w, _288));
    vec4 _314 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _323 = (((_256 * cbMtdParam._m0[19u].w) * _291.x) * cbMtdParam._m0[9u].x) * _314.x;
    float _327 = (((_258 * cbMtdParam._m0[19u].w) * _291.y) * cbMtdParam._m0[9u].y) * _314.y;
    float _331 = (((_260 * cbMtdParam._m0[19u].w) * _291.z) * cbMtdParam._m0[9u].z) * _314.z;
    vec4 _343 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _347 = _343.z;
    vec4 _360 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _275) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _276) + cbTextureTilingScale._m0[8u].w, _288));
    float _179[2];
    float _180[2];
    _179[0u] = cbMtdParam._m0[25u].x;
    _180[0u] = cbMtdParam._m0[25u].y;
    _179[1u] = cbMtdParam._m0[25u].z;
    _180[1u] = cbMtdParam._m0[25u].w;
    float _374 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _377 = uint(int(isnan(1.0) ? _374 : (isnan(_374) ? 1.0 : min(_374, 1.0))));
    float _382 = _180[_377] + _360.x;
    vec4 _401 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _275) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _276) + cbTextureTilingScale._m0[7u].w, _288));
    float _408 = (_401.x * 2.0) + (-1.0);
    float _409 = (_401.y * 2.0) + (-1.0);
    float _410 = dot(vec2(_408, _409), vec2(_408, _409));
    float _3405 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _415 = sqrt(1.0 - (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))));
    float _424 = (cbMtdParam._m0[20u].x * (((_347 * 2.0) * (_401.z + _179[_377])) - _347)) + _347;
    float _428 = (cbMtdParam._m0[20u].y * ((_343.x * 2.0) + (-1.0))) + _408;
    float _429 = (cbMtdParam._m0[20u].y * ((_343.y * 2.0) + (-1.0))) + _409;
    float _432 = fma(_415, _230, fma(_429, _222 * TANGENT.x, (_208 * _200) * _428));
    float _435 = fma(_415, _231, fma(_429, _222 * TANGENT.y, (_208 * _201) * _428));
    float _438 = fma(_415, _232, fma(_429, _222 * TANGENT.z, (_208 * _202) * _428));
    float _442 = inversesqrt(dot(vec3(_432, _435, _438), vec3(_432, _435, _438)));
    float _443 = _442 * _432;
    float _444 = _442 * _435;
    float _445 = _442 * _438;
    float _3416 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _446 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3438 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3449 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3460 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _450 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _466 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _518 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _508);
    float _519 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _508);
    float _520 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _508);
    float _524 = inversesqrt(dot(vec3(_518, _519, _520), vec3(_518, _519, _520)));
    float _525 = _518 * _524;
    float _526 = _519 * _524;
    float _527 = _520 * _524;
    float _533 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _534 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _536 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _538 = _536.w;
    float _557 = fma(_445, cbSceneParam._m0[5u].z, fma(_444, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _443));
    float _560 = fma(_445, cbSceneParam._m0[6u].z, fma(_444, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _443));
    float _563 = fma(_445, cbSceneParam._m0[7u].z, fma(_444, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _443));
    vec4 _565 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _576 = (((_565.y - _446) + (_565.w * _446)) * cbMtdParam._m0[3u].x) + _446;
    uint _589 = uint(roundEven(NORMAL.w)) * 13u;
    uint _592 = (_589 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _598 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * cbInstanceData._m0[_592].x;
    float _599 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * cbInstanceData._m0[_592].y;
    float _600 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * cbInstanceData._m0[_592].z;
    float _3471 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    vec4 _604 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _609 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _620 = (((_609.x - _450) + (_609.w * _450)) * cbMtdParam._m0[3u].x) + _450;
    float _633 = (cbMtdParam._m0[3u].x * (((_601 * _538) - _601) + _604.x)) + _601;
    float _634 = (cbMtdParam._m0[3u].x * (((_602 * _538) - _602) + _604.y)) + _602;
    float _635 = (cbMtdParam._m0[3u].x * (((_603 * _538) - _603) + _604.z)) + _603;
    float _636 = 1.0 - _620;
    float _637 = _636 * _633;
    float _638 = _636 * _634;
    float _639 = _636 * _635;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _620;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _620;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _620;
    float _647 = _644 + 0.039999999105930328369140625;
    float _649 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    vec4 _659 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _533, cbSceneParam._m0[86u].y * _534));
    float _662 = _659.x * TEXCOORD_4;
    float _663 = dot(vec3(_443, _444, _445), vec3(_525, _526, _527));
    float _666 = _663 * 2.0;
    float _670 = (_666 * _443) - _525;
    float _671 = (_666 * _444) - _526;
    float _672 = (_666 * _445) - _527;
    float _676 = abs(dot(vec3(_525, _526, _527), vec3(_443, _444, _445)));
    float _3504 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _678 = sqrt(_576);
    float _691 = exp2((_678 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_678 * 3.0));
    float _697 = (1.0 - _691) * ((_678 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _698 = _691 * _678;
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1038;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _763 = fma(_734, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726));
        float _767 = fma(_734, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726));
        float _771 = fma(_734, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726));
        float _796 = _726 + _443;
        float _797 = _730 + _444;
        float _798 = _734 + _445;
        float _808 = fma(_798, cbModelParam._m0[26u].z, fma(_797, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _796)) - _763;
        float _809 = fma(_798, cbModelParam._m0[27u].z, fma(_797, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _796)) - _767;
        float _810 = fma(_798, cbModelParam._m0[28u].z, fma(_797, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _796)) - _771;
        float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
        float _827 = ((_814 * _808) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_763 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_814 * _809) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_767 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_814 * _810) / cbModelParam._m0[34u].z) + ((((((_771 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        float _866 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_832.x + (-0.5));
        float _868 = _866 * (_832.y + (-0.5));
        float _869 = _866 * (_832.z + (-0.5));
        float _876 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_839.x + (-0.5));
        float _878 = _876 * (_839.y + (-0.5));
        float _879 = _876 * (_839.z + (-0.5));
        float _886 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_846.x + (-0.5));
        float _888 = _886 * (_846.y + (-0.5));
        float _889 = _886 * (_846.z + (-0.5));
        float _896 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_853.x + (-0.5));
        float _898 = _896 * (_853.y + (-0.5));
        float _899 = _896 * (_853.z + (-0.5));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = _867 * 0.5;
        float _904 = _877 * 0.5;
        float _905 = _887 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _920 = (dot(vec3(_443, _444, _445), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _930 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3552 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_932 + 1.0))) + _937) * _900;
        float _947 = _868 * 0.5;
        float _948 = _878 * 0.5;
        float _949 = _888 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_443, _444, _445), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3585 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_974 + 1.0))) + _979) * _901;
        float _989 = _869 * 0.5;
        float _990 = _879 * 0.5;
        float _991 = _889 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_443, _444, _445), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3618 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1016 + 1.0))) + _1021) * _902;
        _1038 = _869;
        _1040 = _868;
        _1041 = _867;
        _1042 = _879;
        _1043 = _878;
        _1044 = _877;
        _1045 = _889;
        _1046 = _888;
        _1047 = _887;
        _1048 = _902;
        _1049 = _901;
        _1050 = _900;
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
    }
    else
    {
        _1038 = _1039;
        _1040 = _1039;
        _1041 = _1039;
        _1042 = _1039;
        _1043 = _1039;
        _1044 = _1039;
        _1045 = _1039;
        _1046 = _1039;
        _1047 = _1039;
        _1048 = _1039;
        _1049 = _1039;
        _1050 = _1039;
        _1051 = 0.0;
        _1052 = 0.0;
        _1053 = 0.0;
    }
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1079 = fma(_734, cbModelParam._m0[30u].z, fma(_730, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _726));
        float _1083 = fma(_734, cbModelParam._m0[31u].z, fma(_730, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _726));
        float _1087 = fma(_734, cbModelParam._m0[32u].z, fma(_730, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _726));
        float _1110 = _726 + _443;
        float _1111 = _730 + _444;
        float _1112 = _734 + _445;
        float _1122 = fma(_1112, cbModelParam._m0[30u].z, fma(_1111, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1110)) - _1079;
        float _1123 = fma(_1112, cbModelParam._m0[31u].z, fma(_1111, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1110)) - _1083;
        float _1124 = fma(_1112, cbModelParam._m0[32u].z, fma(_1111, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1110)) - _1087;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1079 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1083 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[35u].z) + ((((((_1087 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1178 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1145.x + (-0.5));
        float _1180 = _1178 * (_1145.y + (-0.5));
        float _1181 = _1178 * (_1145.z + (-0.5));
        float _1188 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1152.x + (-0.5));
        float _1190 = _1188 * (_1152.y + (-0.5));
        float _1191 = _1188 * (_1152.z + (-0.5));
        float _1198 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1159.x + (-0.5));
        float _1200 = _1198 * (_1159.y + (-0.5));
        float _1201 = _1198 * (_1159.z + (-0.5));
        float _1208 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1166.x + (-0.5));
        float _1210 = _1208 * (_1166.y + (-0.5));
        float _1211 = _1208 * (_1166.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_443, _444, _445), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3681 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1242 + 1.0))) + _1247) * _1212;
        float _1257 = _1180 * 0.5;
        float _1258 = _1190 * 0.5;
        float _1259 = _1200 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_443, _444, _445), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3714 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1284 + 1.0))) + _1289) * _1213;
        float _1299 = _1181 * 0.5;
        float _1300 = _1191 * 0.5;
        float _1301 = _1201 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_443, _444, _445), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3747 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1326 + 1.0))) + _1331) * _1214;
        _1348 = _1181;
        _1349 = _1180;
        _1350 = _1179;
        _1351 = _1191;
        _1352 = _1190;
        _1353 = _1189;
        _1354 = _1201;
        _1355 = _1200;
        _1356 = _1199;
        _1357 = _1214;
        _1358 = _1213;
        _1359 = _1212;
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1039;
        _1349 = _1039;
        _1350 = _1039;
        _1351 = _1039;
        _1352 = _1039;
        _1353 = _1039;
        _1354 = _1039;
        _1355 = _1039;
        _1356 = _1039;
        _1357 = _1039;
        _1358 = _1039;
        _1359 = _1039;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1051)) + _1051;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1052)) + _1052;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1053)) + _1053;
    float _1395 = fma(_1374, cbSceneParam._m0[89u].z, fma(_1373, cbSceneParam._m0[89u].y, _1372 * cbSceneParam._m0[89u].x));
    float _1398 = fma(_1374, cbSceneParam._m0[90u].z, fma(_1373, cbSceneParam._m0[90u].y, _1372 * cbSceneParam._m0[90u].x));
    float _1401 = fma(_1374, cbSceneParam._m0[91u].z, fma(_1373, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1372));
    float _1416 = _670 * 0.5;
    float _1417 = _671 * 0.5;
    float _1418 = _672 * 0.5;
    float _1419 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1422 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1425 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1459;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1432 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1038, _1042, _1045, _1048));
        float _1436 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1440 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1447 = dot(vec4(cbModelParam._m0[39u]), vec4(_1416, _1417, _1418, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1447) ? 0.0 : (isnan(0.0) ? _1447 : max(0.0, _1447))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1470;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1461 = dot(vec4(cbModelParam._m0[40u]), vec4(_1416, _1417, _1418, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1474 = (_1470 * cbModelParam._m0[1u].x) + (_1459 * (1.0 - cbModelParam._m0[1u].x));
    float _1484 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _576);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1484 : min(cbModelParam._m0[25u].z, _1484));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1534 = fma(_734, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726)) + cbModelParam._m0[13u].w;
        float _1538 = fma(_734, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726)) + cbModelParam._m0[14u].w;
        float _1542 = fma(_734, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726)) + cbModelParam._m0[15u].w;
        float _1545 = fma(_672, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _670));
        float _1548 = fma(_672, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _670));
        float _1551 = fma(_672, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _670));
        float _1579;
        if (_1545 > 0.0)
        {
            _1579 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1579 = frontier_phi_22_20_ladder;
        }
        float _1783;
        if (_1548 > 0.0)
        {
            _1783 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1783 = frontier_phi_31_27_ladder;
        }
        float _2037;
        if (_1551 > 0.0)
        {
            _2037 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2037 = frontier_phi_43_38_ladder;
        }
        float _2039 = isnan(_1783) ? _1579 : (isnan(_1579) ? _1783 : min(_1579, _1783));
        float _2040 = isnan(_2037) ? _2039 : (isnan(_2039) ? _2037 : min(_2039, _2037));
        float _2044 = (_2040 * _1545) + _1534;
        float _2045 = (_2040 * _1548) + _1538;
        float _2046 = (_2040 * _1551) + _1542;
        float _2047 = _2040 * 9.9999997473787516355514526367188e-05;
        float _2049 = (-1.0) - _2047;
        float _2051 = _2047 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2046 > _2051) || ((_2046 < _2049) || ((_2045 > _2051) || ((_2045 < _2049) || ((_2044 < _2049) || (_2044 > _2051))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2174 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2046, cbModelParam._m0[9u].z, fma(_2045, cbModelParam._m0[9u].y, _2044 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2046, cbModelParam._m0[10u].z, fma(_2045, cbModelParam._m0[10u].y, _2044 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2046, cbModelParam._m0[11u].z, fma(_2045, cbModelParam._m0[11u].y, _2044 * cbModelParam._m0[11u].x))), _1485);
            frontier_phi_21_43_ladder = _2174.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2174.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2174.x * cbModelParam._m0[1u].y;
        }
        _1567 = frontier_phi_21_43_ladder_2;
        _1569 = frontier_phi_21_43_ladder_1;
        _1571 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_670, _671, _672), _1485);
        _1567 = _1555.x * cbModelParam._m0[1u].y;
        _1569 = _1555.y * cbModelParam._m0[1u].y;
        _1571 = _1555.z * cbModelParam._m0[1u].y;
    }
    float _1575 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _576);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1575 : min(cbModelParam._m0[25u].w, _1575));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1629 = fma(_734, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726)) + cbModelParam._m0[21u].w;
        float _1633 = fma(_734, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726)) + cbModelParam._m0[22u].w;
        float _1637 = fma(_734, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726)) + cbModelParam._m0[23u].w;
        float _1640 = fma(_672, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _670));
        float _1643 = fma(_672, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _670));
        float _1646 = fma(_672, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _670));
        float _1788;
        if (_1640 > 0.0)
        {
            _1788 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1788 = frontier_phi_33_29_ladder;
        }
        float _2064;
        if (_1643 > 0.0)
        {
            _2064 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2064 = frontier_phi_45_40_ladder;
        }
        float _2277;
        if (_1646 > 0.0)
        {
            _2277 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2277 = frontier_phi_54_51_ladder;
        }
        float _2279 = isnan(_2064) ? _1788 : (isnan(_1788) ? _2064 : min(_1788, _2064));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1640) + _1629;
        float _2285 = (_2280 * _1643) + _1633;
        float _2286 = (_2280 * _1646) + _1637;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2287;
        float _2290 = _2287 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2286 > _2290) || ((_2286 < _2288) || ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 < _2288) || (_2284 > _2290))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2286, cbModelParam._m0[17u].z, fma(_2285, cbModelParam._m0[17u].y, _2284 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2286, cbModelParam._m0[18u].z, fma(_2285, cbModelParam._m0[18u].y, _2284 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2286, cbModelParam._m0[19u].z, fma(_2285, cbModelParam._m0[19u].y, _2284 * cbModelParam._m0[19u].x))), _1576);
            frontier_phi_30_54_ladder = _2502.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2502.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2502.x * cbModelParam._m0[1u].z;
        }
        _1665 = frontier_phi_30_54_ladder_2;
        _1667 = frontier_phi_30_54_ladder;
        _1669 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_670, _671, _672), _1576);
        _1665 = _1649.x * cbModelParam._m0[1u].z;
        _1667 = _1649.y * cbModelParam._m0[1u].z;
        _1669 = _1649.z * cbModelParam._m0[1u].z;
    }
    float _1682 = (((_697 * _647) + _698) * _662) * ((cbModelParam._m0[1u].w * (_1665 - _1567)) + _1567);
    float _1684 = (((_697 * _649) + _698) * _662) * ((cbModelParam._m0[1u].w * (_1667 - _1569)) + _1569);
    float _1686 = (((_697 * _650) + _698) * _662) * ((cbModelParam._m0[1u].w * (_1669 - _1571)) + _1571);
    float _1689 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, _1682 * cbSceneParam._m0[91u].x));
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_589 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _662 + (-1.0);
    float _1720 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1721 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1724 = _1707 + 5u;
    float _1730 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1734 = _1707 + 4u;
    float _1741 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1745 = _1707 | 1u;
    float _1756 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_443, _444, _445));
    float _1759 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_443, _444, _445));
    float _3883 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _3894 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1764 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.3183098733425140380859375;
    float _1766 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * 0.3183098733425140380859375;
    float _1773 = ((cbLight._m0[_1724].x * _1730) * _1766) + ((cbLight._m0[_1734].x * _1741) * _1764);
    float _1774 = ((_1730 * cbLight._m0[_1724].y) * _1766) + ((_1741 * cbLight._m0[_1734].y) * _1764);
    float _1775 = ((_1730 * cbLight._m0[_1724].z) * _1766) + ((_1741 * cbLight._m0[_1734].z) * _1764);
    uvec4 _1780 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1782 = _1780.x == 0u;
    float _1793;
    float _1795;
    float _1797;
    if (_1782)
    {
        _1793 = _1773;
        _1795 = _1774;
        _1797 = _1775;
    }
    else
    {
        uint _1801 = _1707 + 6u;
        float _1817 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_443, _444, _445)) * 0.5) + 0.5;
        float _1818 = _1817 * _1817;
        float _3905 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1820 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _1793 = (((cbLight._m0[_1801].x * 0.3183098733425140380859375) * _1819) * _1820) + _1773;
        _1795 = (((cbLight._m0[_1801].y * 0.3183098733425140380859375) * _1819) * _1820) + _1774;
        _1797 = (((cbLight._m0[_1801].z * 0.3183098733425140380859375) * _1819) * _1820) + _1775;
    }
    bool _1800 = _1780.y == 0u;
    float _1838;
    float _1840;
    float _1842;
    if (_1800)
    {
        _1838 = _1793;
        _1840 = _1795;
        _1842 = _1797;
    }
    else
    {
        uint _2008 = _1707 + 7u;
        float _2024 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_443, _444, _445)) * 0.5) + 0.5;
        float _2025 = _2024 * _2024;
        float _3921 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2026 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _2027 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1838 = (((cbLight._m0[_2008].x * 0.3183098733425140380859375) * _2026) * _2027) + _1793;
        _1840 = (((cbLight._m0[_2008].y * 0.3183098733425140380859375) * _2026) * _2027) + _1795;
        _1842 = (((cbLight._m0[_2008].z * 0.3183098733425140380859375) * _2026) * _2027) + _1797;
    }
    uint _1845 = _1707 + 8u;
    float _1858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _576) * 0.949999988079071044921875);
    float _1859 = _1858 * _1858;
    float _1860 = cbLight._m0[_1707].x + _525;
    float _1861 = cbLight._m0[_1707].y + _526;
    float _1862 = cbLight._m0[_1707].z + _527;
    float _1866 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
    float _1867 = _1866 * _1860;
    float _1868 = _1866 * _1861;
    float _1869 = _1866 * _1862;
    float _1870 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_1707].xyz));
    float _3937 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _1874 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _1875 = dot(vec3(_443, _444, _445), vec3(_1867, _1868, _1869));
    float _3959 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _1879 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1867, _1868, _1869));
    float _3970 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1883 = _1859 * _1859;
    float _1887 = ((_1878 * _1878) * (_1883 + (-1.0))) + 1.0;
    float _1895 = exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0);
    float _1896 = 0.959999978542327880859375 - _644;
    float _1898 = 0.959999978542327880859375 - _645;
    float _1899 = 0.959999978542327880859375 - _646;
    float _1906 = 1.0 - _1859;
    float _1917 = (0.5 / (((_1874 * ((_1873 * _1906) + _1859)) + 9.9999999392252902907785028219223e-09) + (((_1874 * _1906) + _1859) * _1873))) * _1873;
    float _3981 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1919 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1883 / ((_1887 * _1887) * 3.141590118408203125));
    uint _1930 = _1707 + 9u;
    float _1941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _576) * 0.949999988079071044921875);
    float _1942 = _1941 * _1941;
    float _1943 = cbLight._m0[_1745].x + _525;
    float _1944 = cbLight._m0[_1745].y + _526;
    float _1945 = cbLight._m0[_1745].z + _527;
    float _1949 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
    float _1950 = _1949 * _1943;
    float _1951 = _1949 * _1944;
    float _1952 = _1949 * _1945;
    float _1953 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_1745].xyz));
    float _3992 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1957 = dot(vec3(_443, _444, _445), vec3(_1950, _1951, _1952));
    float _4003 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1961 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1950, _1951, _1952));
    float _4014 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1965 = _1942 * _1942;
    float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
    float _1976 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
    float _1983 = 1.0 - _1942;
    float _1993 = (0.5 / (((_1874 * ((_1956 * _1983) + _1942)) + 9.9999999392252902907785028219223e-09) + (((_1874 * _1983) + _1942) * _1956))) * _1956;
    float _4025 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
    float _2005 = (((((_1976 * _1896) + _647) * cbLight._m0[_1930].x) * _1995) * _1730) + (((((_1895 * _1896) + _647) * cbLight._m0[_1845].x) * _1919) * _1741);
    float _2006 = (((((_1976 * _1898) + _649) * cbLight._m0[_1930].y) * _1995) * _1730) + (((((_1895 * _1898) + _649) * cbLight._m0[_1845].y) * _1919) * _1741);
    float _2007 = (((((_1976 * _1899) + _650) * cbLight._m0[_1930].z) * _1995) * _1730) + (((((_1895 * _1899) + _650) * cbLight._m0[_1845].z) * _1919) * _1741);
    float _2069;
    float _2071;
    float _2073;
    if (_1782)
    {
        _2069 = _2005;
        _2071 = _2006;
        _2073 = _2007;
    }
    else
    {
        uint _2075 = _1707 + 2u;
        uint _2079 = _1707 + 10u;
        float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _576) * 0.949999988079071044921875);
        float _2094 = _2093 * _2093;
        float _2095 = cbLight._m0[_2075].x + _525;
        float _2096 = cbLight._m0[_2075].y + _526;
        float _2097 = cbLight._m0[_2075].z + _527;
        float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
        float _2102 = _2101 * _2095;
        float _2103 = _2101 * _2096;
        float _2104 = _2101 * _2097;
        float _2105 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_2075].xyz));
        float _4036 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2108 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2109 = dot(vec3(_443, _444, _445), vec3(_2102, _2103, _2104));
        float _4047 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2113 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2102, _2103, _2104));
        float _4058 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2117 = _2094 * _2094;
        float _2121 = ((_2112 * _2112) * (_2117 + (-1.0))) + 1.0;
        float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0);
        float _2135 = 1.0 - _2094;
        float _2145 = (0.5 / (((_1874 * ((_2108 * _2135) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_1874 * _2135) + _2094) * _2108))) * _2108;
        float _4069 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2147 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2117 / ((_2121 * _2121) * 3.141590118408203125));
        float _2148 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _2069 = (((((_2128 * _1896) + _647) * cbLight._m0[_2079].x) * _2147) * _2148) + _2005;
        _2071 = (((((_2128 * _1898) + _649) * cbLight._m0[_2079].y) * _2147) * _2148) + _2006;
        _2073 = (((((_2128 * _1899) + _650) * cbLight._m0[_2079].z) * _2147) * _2148) + _2007;
    }
    float _2183;
    float _2185;
    float _2187;
    if (_1800)
    {
        _2183 = _2069;
        _2185 = _2071;
        _2187 = _2073;
    }
    else
    {
        uint _2194 = _1707 + 3u;
        uint _2198 = _1707 + 11u;
        float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _576) * 0.949999988079071044921875);
        float _2213 = _2212 * _2212;
        float _2214 = cbLight._m0[_2194].x + _525;
        float _2215 = cbLight._m0[_2194].y + _526;
        float _2216 = cbLight._m0[_2194].z + _527;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2221 = _2220 * _2214;
        float _2222 = _2220 * _2215;
        float _2223 = _2220 * _2216;
        float _2224 = dot(vec3(_443, _444, _445), vec3(cbLight._m0[_2194].xyz));
        float _4085 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2228 = dot(vec3(_443, _444, _445), vec3(_2221, _2222, _2223));
        float _4096 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2221, _2222, _2223));
        float _4107 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2236 = _2213 * _2213;
        float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
        float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0);
        float _2254 = 1.0 - _2213;
        float _2264 = (0.5 / (((_1874 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_1874 * _2254) + _2213) * _2227))) * _2227;
        float _4118 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2266 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
        float _2267 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2183 = (((((_2247 * _1896) + _647) * cbLight._m0[_2198].x) * _2266) * _2267) + _2069;
        _2185 = (((((_2247 * _1898) + _649) * cbLight._m0[_2198].y) * _2266) * _2267) + _2071;
        _2187 = (((((_2247 * _1899) + _650) * cbLight._m0[_2198].z) * _2266) * _2267) + _2073;
    }
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    if (_1705.y == 0u)
    {
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2342;
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2342;
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2342;
        uvec4 _2357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2358 = _2357.x;
        uint _2369 = uint((float(_2357.y) * floor(float(uint(cbSceneParam._m0[85u].y * _534) / _2358))) + floor(float(uint(cbSceneParam._m0[85u].x * _533) / _2358)));
        float _2379 = (log2(_2345 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2380 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        uint _2383 = uint(isnan(14.0) ? _2380 : (isnan(_2380) ? 14.0 : min(_2380, 14.0)));
        uvec4 _2388 = texelFetch(g_lightClusterGridBuffer, int(((_2383 << 2u) + (_2369 << 6u)) >> 2u));
        uint _2389 = _2388.x;
        uint _2390 = _2357.z;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((((1u << ((_2390 >> 4u) & 15u)) + 4294967295u) & _2389) == 0u) || ((_2390 & 240u) == 0u))
        {
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
        }
        else
        {
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            uint _2657 = 0u;
            uint _2666;
            bool _2667;
            for (;;)
            {
                _2666 = texelFetch(g_lightClassification, int((((_2383 << 5u) + (_2369 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                _2667 = _2666 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2667)
                {
                    frontier_phi_69_pred = _2656;
                    frontier_phi_69_pred_1 = _2655;
                    frontier_phi_69_pred_2 = _2654;
                    frontier_phi_69_pred_3 = _2652;
                    frontier_phi_69_pred_4 = _2651;
                    frontier_phi_69_pred_5 = _2653;
                }
                else
                {
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    uint _2781;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2666;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2785 = uint(findLSB(_2781)) + (_2657 << 5u);
                        uint _2782 = (_2781 + 4294967295u) & _2781;
                        uint _2787 = _2785 * 48u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2807 = (_2785 * 48u) + 4u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2826 = (_2785 * 48u) + 8u;
                        vec3 _2837 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x));
                        float _2841 = _2801.x - _2343;
                        float _2842 = _2801.y - _2344;
                        float _2843 = _2801.z - _2345;
                        float _2844 = dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843));
                        float _2847 = inversesqrt(_2844);
                        float _2848 = _2847 * _2841;
                        float _2849 = _2847 * _2842;
                        float _2850 = _2847 * _2843;
                        float _2851 = dot(vec3(_557, _560, _563), vec3(_2848, _2849, _2850));
                        float _2856 = 1.0 - (_2844 * _2801.w);
                        float _4144 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2857 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2858 = sqrt(_2844) * _2820.w;
                        float _2861 = 1.39999997615814208984375 / (_2858 + 1.39999997615814208984375);
                        float _2862 = _2861 * _2861;
                        float _2865 = ((1.0 - _2862) * _2851) + _2862;
                        float _2868 = _2858 * _2858;
                        float _2872 = ((isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))) * _2857) / ((_2868 * 0.699999988079071044921875) + 1.0);
                        float _2876 = (-0.0) - _2343;
                        float _2877 = (-0.0) - _2344;
                        float _2878 = (-0.0) - _2345;
                        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2893 = exp2(log2(1.0 / ((_2868 * 3.5) + 5.0)) * 0.25);
                        float _2894 = 1.0 - _678;
                        float _2901 = sqrt(1.0 - ((1.0 - (_2894 * _2894)) * (1.0 - (_2893 * _2893))));
                        float _2902 = _2901 * _2901;
                        float _2903 = _2902 * _2902;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2906 = _2885 + _2850;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2914 = dot(vec3(_557, _560, _563), vec3(_2883, _2884, _2885));
                        float _4160 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2918 = dot(vec3(_557, _560, _563), vec3(_2910 * _2904, _2910 * _2905, _2910 * _2906));
                        float _4171 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2921 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                        float _2925 = ((_2921 * _2921) * (_2903 + (-1.0))) + 1.0;
                        float _2926 = _2861 * _2902;
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2851) + _2927;
                        float _4182 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2932 = 1.0 - _2902;
                        float _2942 = (0.5 / (((_2931 * ((_2917 * _2932) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2931 * _2932) + _2902) * _2917))) * _2931;
                        float _4193 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2953 = (((_2903 * 3.1415927410125732421875) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) / ((_2925 * _2925) * ((_2868 * 2.1991131305694580078125) + 3.141590118408203125))) * _2857;
                        _2710 = (_2872 * _2820.x) + _2778;
                        _2711 = (_2872 * _2820.y) + _2779;
                        _2712 = (_2872 * _2820.z) + _2780;
                        _2707 = (_2953 * _2837.x) + _2775;
                        _2708 = (_2953 * _2837.y) + _2776;
                        _2709 = (_2953 * _2837.z) + _2777;
                        if (_2782 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2782;
                        }
                    }
                    frontier_phi_69_pred = _2712;
                    frontier_phi_69_pred_1 = _2711;
                    frontier_phi_69_pred_2 = _2710;
                    frontier_phi_69_pred_3 = _2708;
                    frontier_phi_69_pred_4 = _2707;
                    frontier_phi_69_pred_5 = _2709;
                }
                _2518 = frontier_phi_69_pred;
                _2516 = frontier_phi_69_pred_1;
                _2514 = frontier_phi_69_pred_2;
                _2510 = frontier_phi_69_pred_3;
                _2508 = frontier_phi_69_pred_4;
                _2512 = frontier_phi_69_pred_5;
                uint _2658 = _2657 + 1u;
                if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2651 = _2508;
                    _2652 = _2510;
                    _2653 = _2512;
                    _2654 = _2514;
                    _2655 = _2516;
                    _2656 = _2518;
                    _2657 = _2658;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
        }
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.z;
        uint _2524 = (_2522 >> 8u) & 15u;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((4294967295u << _2524) & _2389) == 0u)
        {
            _2619 = _2507;
            _2621 = _2509;
            _2623 = _2511;
            _2625 = _2513;
            _2627 = _2515;
            _2629 = _2517;
        }
        else
        {
            float _2644 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
            float _2645 = _2644 * _2343;
            float _2646 = _2644 * _2344;
            float _2647 = _2644 * _2345;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2524 < ((_2522 >> 12u) & 15u))
            {
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2758 = _2507;
                float _2759 = _2509;
                float _2760 = _2511;
                float _2761 = _2513;
                float _2762 = _2515;
                float _2763 = _2517;
                uint _2764 = _2524;
                uint _2773;
                bool _2774;
                for (;;)
                {
                    _2773 = texelFetch(g_lightClassification, int((((_2383 << 5u) + (_2369 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                    _2774 = _2773 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2774)
                    {
                        frontier_phi_75_pred = _2760;
                        frontier_phi_75_pred_1 = _2759;
                        frontier_phi_75_pred_2 = _2758;
                        frontier_phi_75_pred_3 = _2763;
                        frontier_phi_75_pred_4 = _2762;
                        frontier_phi_75_pred_5 = _2761;
                    }
                    else
                    {
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        uint _2977 = _2773;
                        uint _2978;
                        vec4 _3003;
                        float _3004;
                        vec4 _3019;
                        vec3 _3031;
                        vec4 _3047;
                        vec4 _3062;
                        float _3109;
                        bool _3110;
                        for (;;)
                        {
                            uint _2988 = ((_2764 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2977));
                            _2978 = (_2977 + 4294967295u) & _2977;
                            uint _2990 = _2988 * 40u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3004 = _3003.w;
                            uint _3006 = (_2988 * 40u) + 4u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3021 = (_2988 * 40u) + 8u;
                            _3031 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x));
                            uint _3034 = (_2988 * 40u) + 16u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3049 = (_2988 * 40u) + 20u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3065 = (_2988 * 40u) + 24u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3084 = (_2988 * 40u) + 28u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3109 = fma(_2345, _3097.z, fma(_2344, _3097.y, _3097.x * _2343)) + _3097.w;
                            _3110 = !((fma(_2345, _3078.z, fma(_2344, _3078.y, _3078.x * _2343)) + _3078.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3110)
                            {
                                float _3137 = _3003.x - _2343;
                                float _3138 = _3003.y - _2344;
                                float _3139 = _3003.z - _2345;
                                float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                                float _3143 = inversesqrt(_3140);
                                float _3144 = _3143 * _3137;
                                float _3145 = _3143 * _3138;
                                float _3146 = _3143 * _3139;
                                float _3150 = 1.0 - (_3140 / (_3004 * _3004));
                                float _4204 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3155 = sqrt(_3140) * _3019.w;
                                float _3157 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                                float _3158 = _3157 * _3157;
                                float _3161 = ((1.0 - _3158) * dot(vec3(_3144, _3145, _3146), vec3(_557, _560, _563))) + _3158;
                                float _3164 = _3155 * _3155;
                                float _3168 = (fma(_2345, _3047.z, fma(_2344, _3047.y, _3047.x * _2343)) + _3047.w) / _3109;
                                float _3169 = (fma(_2345, _3062.z, fma(_2344, _3062.y, _3062.x * _2343)) + _3062.w) / _3109;
                                float _3173 = 1.0 - dot(vec2(_3168, _3169), vec2(_3168, _3169));
                                float _4220 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3175 = _3174 * (((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3151) / ((_3164 * 0.699999988079071044921875) + 1.0));
                                float _3187 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                                float _3188 = 1.0 - _678;
                                float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                                float _3196 = _3195 * _3195;
                                float _3197 = _3196 * _3196;
                                float _3198 = _3144 - _2645;
                                float _3199 = _3145 - _2646;
                                float _3200 = _3146 - _2647;
                                float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                                float _3208 = dot(vec3(_557, _560, _563), vec3((-0.0) - _2645, (-0.0) - _2646, (-0.0) - _2647));
                                float _4231 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3212 = dot(vec3(_557, _560, _563), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                                float _4242 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                                float _3220 = _3157 * _3196;
                                float _3221 = _3220 * _3220;
                                float _3227 = ((1.0 - _3221) * dot(vec3(_557, _560, _563), vec3(_3144, _3145, _3146))) + _3221;
                                float _4253 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3229 = 1.0 - _3196;
                                float _3239 = (0.5 / (((_3228 * ((_3211 * _3229) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3196) * _3211))) * _3228;
                                float _4264 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3249 = (_3174 * _3151) * (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) / ((_3219 * _3219) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3249 * _3031.z;
                                frontier_phi_81_pred_1 = _3249 * _3031.y;
                                frontier_phi_81_pred_2 = _3249 * _3031.x;
                                frontier_phi_81_pred_3 = _3175 * _3019.z;
                                frontier_phi_81_pred_4 = _3175 * _3019.y;
                                frontier_phi_81_pred_5 = _3175 * _3019.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3255 = frontier_phi_81_pred;
                            _3254 = frontier_phi_81_pred_1;
                            _3253 = frontier_phi_81_pred_2;
                            _3258 = frontier_phi_81_pred_3;
                            _3257 = frontier_phi_81_pred_4;
                            _3256 = frontier_phi_81_pred_5;
                            _2961 = _3256 + _2974;
                            _2962 = _3257 + _2975;
                            _2963 = _3258 + _2976;
                            _2958 = _3253 + _2971;
                            _2959 = _3254 + _2972;
                            _2960 = _3255 + _2973;
                            if (_2978 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2978;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2960;
                        frontier_phi_75_pred_1 = _2959;
                        frontier_phi_75_pred_2 = _2958;
                        frontier_phi_75_pred_3 = _2963;
                        frontier_phi_75_pred_4 = _2962;
                        frontier_phi_75_pred_5 = _2961;
                    }
                    _2624 = frontier_phi_75_pred;
                    _2622 = frontier_phi_75_pred_1;
                    _2620 = frontier_phi_75_pred_2;
                    _2630 = frontier_phi_75_pred_3;
                    _2628 = frontier_phi_75_pred_4;
                    _2626 = frontier_phi_75_pred_5;
                    uint _2765 = _2764 + 1u;
                    if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2758 = _2620;
                        _2759 = _2622;
                        _2760 = _2624;
                        _2761 = _2626;
                        _2762 = _2628;
                        _2763 = _2630;
                        _2764 = _2765;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2628;
                frontier_phi_63_64_ladder_1 = _2626;
                frontier_phi_63_64_ladder_2 = _2624;
                frontier_phi_63_64_ladder_3 = _2630;
                frontier_phi_63_64_ladder_4 = _2622;
                frontier_phi_63_64_ladder_5 = _2620;
            }
            else
            {
                frontier_phi_63_64_ladder = _2515;
                frontier_phi_63_64_ladder_1 = _2513;
                frontier_phi_63_64_ladder_2 = _2511;
                frontier_phi_63_64_ladder_3 = _2517;
                frontier_phi_63_64_ladder_4 = _2509;
                frontier_phi_63_64_ladder_5 = _2507;
            }
            _2619 = frontier_phi_63_64_ladder_5;
            _2621 = frontier_phi_63_64_ladder_4;
            _2623 = frontier_phi_63_64_ladder_2;
            _2625 = frontier_phi_63_64_ladder_1;
            _2627 = frontier_phi_63_64_ladder;
            _2629 = frontier_phi_63_64_ladder_3;
        }
        float _2634 = isnan(1.0) ? _662 : (isnan(_662) ? 1.0 : min(_662, 1.0));
        _2401 = (_2634 * _2625) + _1838;
        _2403 = (_2634 * _2627) + _1840;
        _2405 = (_2634 * _2629) + _1842;
        _2407 = ((_2619 * _647) * _2634) + _2183;
        _2409 = ((_2621 * _649) * _2634) + _2185;
        _2411 = ((_2623 * _650) * _2634) + _2187;
    }
    else
    {
        _2401 = _1838;
        _2403 = _1840;
        _2405 = _1842;
        _2407 = _2183;
        _2409 = _2185;
        _2411 = _2187;
    }
    vec4 _2417 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4280 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4291 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4302 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _2441 = (((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2401 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _662))) + ((_2407 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1474)) * cbPerFrame._m0[3u].x)) + (_2417.x * cbMtdParam._m0[3u].x);
    float _2443 = ((_2417.y * cbMtdParam._m0[3u].x) + ((_2409 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1474)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2403 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _662)));
    float _2445 = ((_2417.z * cbMtdParam._m0[3u].x) + ((_2411 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1474)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2405 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _662)));
    uint _2449 = _589 + 6u;
    float _2457 = _533 / cbSceneParam._m0[86u].x;
    float _2458 = _534 / cbSceneParam._m0[86u].y;
    vec4 _2472 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, (log2((isnan(cbSceneParam._m0[77u].w) ? _466 : (isnan(_466) ? cbSceneParam._m0[77u].w : min(_466, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2474 = _2472.x;
    float _2475 = _2472.y;
    float _2476 = _2472.z;
    float _2477 = _2472.w;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_466 > cbSceneParam._m0[78u].w)
    {
        float _2532 = isnan(_466) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _466 : min(cbSceneParam._m0[80u].w, _466));
        float _2533 = _2532 / _466;
        float _2544 = _2533 * _518;
        float _2545 = _519 * _2533;
        float _2546 = (-0.0) - _2545;
        float _2547 = _2533 * _520;
        float _2549 = (cbSceneParam._m0[77u].w * _2546) / _2532;
        float _2550 = _2549 + cbSceneParam._m0[79u].w;
        float _2551 = cbSceneParam._m0[79u].w - _2545;
        float _2557 = sqrt(((_2544 * _2544) + (_2545 * _2545)) + (_2547 * _2547));
        float _2560 = (1.0 - (cbSceneParam._m0[77u].w / _2532)) * _2557;
        float _2565 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2567 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2546 - _2549) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2550 > 0.0) ? exp2(_2565 * _2550) : (2.0 - exp2(_2567 * _2550))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2560;
        }
        else
        {
            float _2680 = 1.0 / cbSceneParam._m0[80u].x;
            float _2681 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : max(_2550, _2551));
            float _2682 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : min(_2550, _2551));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            float _2692 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : min(_2682, 0.0));
            _2720 = ((abs(_2557 / _2546) * cbSceneParam._m0[80u].y) * ((((_2691 - _2692) * 2.0) - ((exp2(_2565 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0)))) - exp2(_2565 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))))) * _2680)) - ((exp2(_2567 * _2691) - exp2(_2567 * _2692)) * _2680))) + (_2560 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2477);
        _2569 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2474;
        _2571 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2475;
        _2573 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2476;
        _2575 = _2731 * _2477;
    }
    else
    {
        _2569 = _2474;
        _2571 = _2475;
        _2573 = _2476;
        _2575 = _2477;
    }
    float _2587 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2588 = _2587 == 3.0;
    float _2589 = log2(_2575);
    float _2596 = exp2(_2589 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0)));
    float _2597 = exp2(_2589 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0)));
    float _2598 = exp2(_2589 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0)));
    float _2607 = (_2587 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2607 * (_2588 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.y = _2607 * (_2588 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2571)));
    SV_Target.z = _2607 * (_2588 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2573)));
    SV_Target.w = cbInstanceData._m0[_2449].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2449].w;
}


