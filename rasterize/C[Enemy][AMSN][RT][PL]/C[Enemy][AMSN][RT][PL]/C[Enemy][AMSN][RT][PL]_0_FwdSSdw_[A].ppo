#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1212;
float _3636;
float _3637;
float _3638;
float _3639;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _269 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[14u].x;
    _196[0u] = cbMtdParam._m0[14u].y;
    _197[0u] = cbMtdParam._m0[14u].z;
    _195[1u] = cbMtdParam._m0[15u].x;
    _196[1u] = cbMtdParam._m0[15u].y;
    _197[1u] = cbMtdParam._m0[15u].z;
    _195[2u] = cbMtdParam._m0[16u].x;
    _196[2u] = cbMtdParam._m0[16u].y;
    _197[2u] = cbMtdParam._m0[16u].z;
    _195[3u] = cbMtdParam._m0[11u].x;
    _196[3u] = cbMtdParam._m0[11u].y;
    _197[3u] = cbMtdParam._m0[11u].z;
    _195[4u] = cbMtdParam._m0[12u].x;
    _196[4u] = cbMtdParam._m0[12u].y;
    _197[4u] = cbMtdParam._m0[12u].z;
    _195[5u] = cbMtdParam._m0[13u].x;
    _196[5u] = cbMtdParam._m0[13u].y;
    _197[5u] = cbMtdParam._m0[13u].z;
    vec4 _358 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _361 = _358.y;
    float _364 = (_358.x + (-0.02500000037252902984619140625)) * 8.0;
    float _366 = roundEven(_364);
    float _367 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    uint _370 = uint(int(isnan(5.0) ? _367 : (isnan(_367) ? 5.0 : min(_367, 5.0))));
    float _387 = roundEven(5.0 - _364);
    float _388 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _389 = isnan(4.0) ? _388 : (isnan(_388) ? 4.0 : min(_388, 4.0));
    float _395;
    float _397;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_269 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _395 = cbMtdParam._m0[26u].x;
        _397 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _395 = cbMtdParam._m0[22u].x;
        _397 = cbMtdParam._m0[22u].y;
    }
    float _399 = _395 * TEXCOORD.x;
    float _400 = _397 * TEXCOORD.y;
    float _411 = floor(_389);
    vec4 _414 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _399) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _400) + cbTextureTilingScale._m0[6u].w, _411));
    vec4 _436 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _269) + cbTextureTilingScale._m0[0u].w));
    float _444 = ((((((_195[_370] - cbMtdParam._m0[18u].x) * _361) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _414.x) * cbMtdParam._m0[9u].x) * _436.x;
    float _448 = ((((((_196[_370] - cbMtdParam._m0[18u].y) * _361) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _414.y) * cbMtdParam._m0[9u].y) * _436.y;
    float _452 = ((((((_197[_370] - cbMtdParam._m0[18u].z) * _361) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _414.z) * cbMtdParam._m0[9u].z) * _436.z;
    vec4 _464 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _269) + cbTextureTilingScale._m0[1u].w));
    float _468 = _464.z;
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[22u].z;
    _191[0u] = cbMtdParam._m0[22u].w;
    _190[1u] = cbMtdParam._m0[23u].z;
    _191[1u] = cbMtdParam._m0[23u].w;
    _190[2u] = cbMtdParam._m0[24u].x;
    _191[2u] = cbMtdParam._m0[24u].y;
    _190[3u] = cbMtdParam._m0[24u].z;
    _191[3u] = cbMtdParam._m0[24u].w;
    _190[4u] = cbMtdParam._m0[23u].x;
    _191[4u] = cbMtdParam._m0[23u].y;
    float _512 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    uint _514 = uint(int(isnan(4.0) ? _512 : (isnan(_512) ? 4.0 : min(_512, 4.0))));
    float _519 = _191[_514] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _399) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _400) + cbTextureTilingScale._m0[8u].w, _411)).x;
    vec4 _538 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _399) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _400) + cbTextureTilingScale._m0[7u].w, _411));
    float _545 = (_538.x * 2.0) + (-1.0);
    float _546 = (_538.y * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3678 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))));
    float _562 = (cbMtdParam._m0[20u].x * (((_468 * 2.0) * (_538.z + _190[_514])) - _468)) + _468;
    float _566 = (cbMtdParam._m0[20u].y * ((_464.x * 2.0) + (-1.0))) + _545;
    float _567 = (cbMtdParam._m0[20u].y * ((_464.y * 2.0) + (-1.0))) + _546;
    float _570 = fma(_553, _247, fma(_567, _239 * TANGENT.x, (_225 * _217) * _566));
    float _573 = fma(_553, _248, fma(_567, _239 * TANGENT.y, (_225 * _218) * _566));
    float _576 = fma(_553, _249, fma(_567, _239 * TANGENT.z, (_225 * _219) * _566));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _581 = _580 * _570;
    float _582 = _580 * _573;
    float _583 = _580 * _576;
    float _3689 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _584 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3711 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3722 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3733 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _588 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _604 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    vec4 _669 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _671 = _669.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _892 = sqrt(((_655 * _655) + (_656 * _656)) + (_657 * _657));
        float _898 = (cbMatDynParam._m0[5u].x * _892) + cbMatDynParam._m0[5u].y;
        float _3744 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _903 = (cbMatDynParam._m0[5u].z * _892) + cbMatDynParam._m0[5u].w;
        float _3755 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) - _899)) + _899) < ((_671 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _684 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _685 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _687 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _689 = _687.w;
    float _707 = fma(_583, cbSceneParam._m0[5u].z, fma(_582, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _581));
    float _710 = fma(_583, cbSceneParam._m0[6u].z, fma(_582, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _581));
    float _713 = fma(_583, cbSceneParam._m0[7u].z, fma(_582, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _581));
    vec4 _715 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _726 = (((_715.y - _584) + (_715.w * _584)) * cbMtdParam._m0[3u].x) + _584;
    uint _739 = uint(roundEven(NORMAL.w)) * 13u;
    uint _740 = _739 + 9u;
    uint _741 = _740 + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3766 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    vec4 _753 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _758 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _769 = (((_758.x - _588) + (_758.w * _588)) * cbMtdParam._m0[3u].x) + _588;
    float _782 = (cbMtdParam._m0[3u].x * (((_750 * _689) - _750) + _753.x)) + _750;
    float _783 = (cbMtdParam._m0[3u].x * (((_751 * _689) - _751) + _753.y)) + _751;
    float _784 = (cbMtdParam._m0[3u].x * (((_752 * _689) - _752) + _753.z)) + _752;
    float _785 = 1.0 - _769;
    float _786 = _785 * _782;
    float _787 = _785 * _783;
    float _788 = _785 * _784;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _769;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _769;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _769;
    float _796 = _793 + 0.039999999105930328369140625;
    float _798 = _794 + 0.039999999105930328369140625;
    float _799 = _795 + 0.039999999105930328369140625;
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _684, cbSceneParam._m0[86u].y * _685));
    float _811 = _808.x * TEXCOORD_4;
    float _812 = dot(vec3(_581, _582, _583), vec3(_662, _663, _664));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _581) - _662;
    float _820 = (_815 * _582) - _663;
    float _821 = (_815 * _583) - _664;
    float _825 = abs(dot(vec3(_662, _663, _664), vec3(_581, _582, _583)));
    float _3799 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = sqrt(_726);
    float _838 = exp2((_827 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_827 * 3.0));
    float _844 = (1.0 - _838) * ((_827 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _845 = _838 * _827;
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1211;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _936 = fma(_881, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873));
        float _940 = fma(_881, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873));
        float _944 = fma(_881, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873));
        float _969 = _873 + _581;
        float _970 = _877 + _582;
        float _971 = _881 + _583;
        float _981 = fma(_971, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969)) - _936;
        float _982 = fma(_971, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969)) - _940;
        float _983 = fma(_971, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969)) - _944;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_936 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_940 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[34u].z) + ((((((_944 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1039 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1005.x + (-0.5));
        float _1041 = _1039 * (_1005.y + (-0.5));
        float _1042 = _1039 * (_1005.z + (-0.5));
        float _1049 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1012.x + (-0.5));
        float _1051 = _1049 * (_1012.y + (-0.5));
        float _1052 = _1049 * (_1012.z + (-0.5));
        float _1059 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1019.x + (-0.5));
        float _1061 = _1059 * (_1019.y + (-0.5));
        float _1062 = _1059 * (_1019.z + (-0.5));
        float _1069 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1026.x + (-0.5));
        float _1071 = _1069 * (_1026.y + (-0.5));
        float _1072 = _1069 * (_1026.z + (-0.5));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = _1040 * 0.5;
        float _1077 = _1050 * 0.5;
        float _1078 = _1060 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1093 = (dot(vec3(_581, _582, _583), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1103 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3847 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1105 + 1.0))) + _1110) * _1073;
        float _1120 = _1041 * 0.5;
        float _1121 = _1051 * 0.5;
        float _1122 = _1061 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_581, _582, _583), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3880 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1147 + 1.0))) + _1152) * _1074;
        float _1162 = _1042 * 0.5;
        float _1163 = _1052 * 0.5;
        float _1164 = _1062 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_581, _582, _583), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3913 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1189 + 1.0))) + _1194) * _1075;
        _1211 = _1042;
        _1213 = _1041;
        _1214 = _1040;
        _1215 = _1052;
        _1216 = _1051;
        _1217 = _1050;
        _1218 = _1062;
        _1219 = _1061;
        _1220 = _1060;
        _1221 = _1075;
        _1222 = _1074;
        _1223 = _1073;
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
    }
    else
    {
        _1211 = _1212;
        _1213 = _1212;
        _1214 = _1212;
        _1215 = _1212;
        _1216 = _1212;
        _1217 = _1212;
        _1218 = _1212;
        _1219 = _1212;
        _1220 = _1212;
        _1221 = _1212;
        _1222 = _1212;
        _1223 = _1212;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1255 = fma(_881, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _873));
        float _1259 = fma(_881, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _873));
        float _1263 = fma(_881, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _873));
        float _1286 = _873 + _581;
        float _1287 = _877 + _582;
        float _1288 = _881 + _583;
        float _1298 = fma(_1288, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1286)) - _1255;
        float _1299 = fma(_1288, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1286)) - _1259;
        float _1300 = fma(_1288, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1286)) - _1263;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1255 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1259 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[35u].z) + ((((((_1263 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1354 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1321.x + (-0.5));
        float _1356 = _1354 * (_1321.y + (-0.5));
        float _1357 = _1354 * (_1321.z + (-0.5));
        float _1364 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1328.x + (-0.5));
        float _1366 = _1364 * (_1328.y + (-0.5));
        float _1367 = _1364 * (_1328.z + (-0.5));
        float _1374 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1335.x + (-0.5));
        float _1376 = _1374 * (_1335.y + (-0.5));
        float _1377 = _1374 * (_1335.z + (-0.5));
        float _1384 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1342.x + (-0.5));
        float _1386 = _1384 * (_1342.y + (-0.5));
        float _1387 = _1384 * (_1342.z + (-0.5));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = _1355 * 0.5;
        float _1392 = _1365 * 0.5;
        float _1393 = _1375 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_581, _582, _583), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3976 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1418 + 1.0))) + _1423) * _1388;
        float _1433 = _1356 * 0.5;
        float _1434 = _1366 * 0.5;
        float _1435 = _1376 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_581, _582, _583), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4009 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1460 + 1.0))) + _1465) * _1389;
        float _1475 = _1357 * 0.5;
        float _1476 = _1367 * 0.5;
        float _1477 = _1377 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_581, _582, _583), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4042 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1502 + 1.0))) + _1507) * _1390;
        _1524 = _1357;
        _1525 = _1356;
        _1526 = _1355;
        _1527 = _1367;
        _1528 = _1366;
        _1529 = _1365;
        _1530 = _1377;
        _1531 = _1376;
        _1532 = _1375;
        _1533 = _1390;
        _1534 = _1389;
        _1535 = _1388;
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
    }
    else
    {
        _1524 = _1212;
        _1525 = _1212;
        _1526 = _1212;
        _1527 = _1212;
        _1528 = _1212;
        _1529 = _1212;
        _1530 = _1212;
        _1531 = _1212;
        _1532 = _1212;
        _1533 = _1212;
        _1534 = _1212;
        _1535 = _1212;
        _1536 = 0.0;
        _1537 = 0.0;
        _1538 = 0.0;
    }
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1224)) + _1224;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1225)) + _1225;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1226)) + _1226;
    float _1571 = fma(_1550, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1548 * cbSceneParam._m0[89u].x));
    float _1574 = fma(_1550, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1548 * cbSceneParam._m0[90u].x));
    float _1577 = fma(_1550, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1548));
    float _1592 = _819 * 0.5;
    float _1593 = _820 * 0.5;
    float _1594 = _821 * 0.5;
    float _1595 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1598 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1601 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1635;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1608 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1211, _1215, _1218, _1221));
        float _1612 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1616 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1214, _1217, _1220, _1223));
        float _1623 = dot(vec4(cbModelParam._m0[39u]), vec4(_1592, _1593, _1594, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1646;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1637 = dot(vec4(cbModelParam._m0[40u]), vec4(_1592, _1593, _1594, 1.0));
        _1646 = dot(vec3(isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1646 = 1.0;
    }
    float _1650 = (_1646 * cbModelParam._m0[1u].x) + (_1635 * (1.0 - cbModelParam._m0[1u].x));
    float _1660 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _726);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1660 : min(cbModelParam._m0[25u].z, _1660));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1708 = fma(_881, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873)) + cbModelParam._m0[13u].w;
        float _1712 = fma(_881, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873)) + cbModelParam._m0[14u].w;
        float _1716 = fma(_881, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873)) + cbModelParam._m0[15u].w;
        float _1719 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1722 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1725 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1753;
        if (_1719 > 0.0)
        {
            _1753 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1753 = frontier_phi_21_19_ladder;
        }
        float _1976;
        if (_1722 > 0.0)
        {
            _1976 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1976 = frontier_phi_30_26_ladder;
        }
        float _2233;
        if (_1725 > 0.0)
        {
            _2233 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2233 = frontier_phi_42_37_ladder;
        }
        float _2235 = isnan(_1976) ? _1753 : (isnan(_1753) ? _1976 : min(_1753, _1976));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1719) + _1708;
        float _2241 = (_2236 * _1722) + _1712;
        float _2242 = (_2236 * _1725) + _1716;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2243;
        float _2247 = _2243 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 > _2247) || ((_2241 < _2245) || ((_2240 < _2245) || (_2240 > _2247))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2242, cbModelParam._m0[9u].z, fma(_2241, cbModelParam._m0[9u].y, _2240 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2242, cbModelParam._m0[10u].z, fma(_2241, cbModelParam._m0[10u].y, _2240 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2242, cbModelParam._m0[11u].z, fma(_2241, cbModelParam._m0[11u].y, _2240 * cbModelParam._m0[11u].x))), _1661);
            frontier_phi_20_42_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1741 = frontier_phi_20_42_ladder_2;
        _1743 = frontier_phi_20_42_ladder_1;
        _1745 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1661);
        _1741 = _1729.x * cbModelParam._m0[1u].y;
        _1743 = _1729.y * cbModelParam._m0[1u].y;
        _1745 = _1729.z * cbModelParam._m0[1u].y;
    }
    float _1749 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _726);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1749 : min(cbModelParam._m0[25u].w, _1749));
    float _1839;
    float _1841;
    float _1843;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1803 = fma(_881, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873)) + cbModelParam._m0[21u].w;
        float _1807 = fma(_881, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873)) + cbModelParam._m0[22u].w;
        float _1811 = fma(_881, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873)) + cbModelParam._m0[23u].w;
        float _1814 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1817 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1820 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _1981;
        if (_1814 > 0.0)
        {
            _1981 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1981 = frontier_phi_32_28_ladder;
        }
        float _2260;
        if (_1817 > 0.0)
        {
            _2260 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2260 = frontier_phi_44_39_ladder;
        }
        float _2473;
        if (_1820 > 0.0)
        {
            _2473 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2473 = frontier_phi_53_50_ladder;
        }
        float _2475 = isnan(_2260) ? _1981 : (isnan(_1981) ? _2260 : min(_1981, _2260));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1814) + _1803;
        float _2481 = (_2476 * _1817) + _1807;
        float _2482 = (_2476 * _1820) + _1811;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1750);
            frontier_phi_29_53_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1839 = frontier_phi_29_53_ladder_2;
        _1841 = frontier_phi_29_53_ladder_1;
        _1843 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1750);
        _1839 = _1823.x * cbModelParam._m0[1u].z;
        _1841 = _1823.y * cbModelParam._m0[1u].z;
        _1843 = _1823.z * cbModelParam._m0[1u].z;
    }
    float _1856 = (((_844 * _796) + _845) * _811) * ((cbModelParam._m0[1u].w * (_1839 - _1741)) + _1741);
    float _1858 = (((_844 * _798) + _845) * _811) * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1860 = (((_844 * _799) + _845) * _811) * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1863 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1858, cbSceneParam._m0[89u].y, _1856 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1858, cbSceneParam._m0[90u].y, _1856 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1858, cbSceneParam._m0[91u].y, _1856 * cbSceneParam._m0[91u].x));
    vec4 _1877 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_684, _685));
    float _1879 = _1877.w;
    float _1891 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1879);
    float _1892 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1879);
    float _1893 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1879);
    uvec4 _1897 = floatBitsToUint(cbInstanceData._m0[_739 + 5u]);
    uint _1899 = _1897.x * 14u;
    uint _1900 = _1899 + 13u;
    float _1907 = _811 + (-1.0);
    float _1912 = (cbLight._m0[_1900].x * _1907) + 1.0;
    float _1913 = (cbLight._m0[_1900].y * _1907) + 1.0;
    float _1914 = (cbLight._m0[_1900].z * _1907) + 1.0;
    float _1915 = (cbLight._m0[_1900].w * _1907) + 1.0;
    uint _1916 = _1899 + 5u;
    float _1922 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1926 = _1899 + 4u;
    float _1935 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1939 = _1899 | 1u;
    float _1950 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_581, _582, _583));
    float _1953 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_581, _582, _583));
    float _4178 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _4189 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1958 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.3183098733425140380859375;
    float _1960 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.3183098733425140380859375;
    float _1967 = ((cbLight._m0[_1916].x * _1922) * _1960) + (((cbLight._m0[_1926].x * _1891) * _1935) * _1958);
    float _1968 = ((_1922 * cbLight._m0[_1916].y) * _1960) + (((cbLight._m0[_1926].y * _1892) * _1935) * _1958);
    float _1969 = ((_1922 * cbLight._m0[_1916].z) * _1960) + (((cbLight._m0[_1926].z * _1893) * _1935) * _1958);
    uvec4 _1973 = floatBitsToUint(cbLight._m0[_1899 + 12u]);
    bool _1975 = _1973.x == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1975)
    {
        _1986 = _1967;
        _1988 = _1968;
        _1990 = _1969;
    }
    else
    {
        uint _1994 = _1899 + 6u;
        float _2010 = (dot(vec3(cbLight._m0[_1899 + 2u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2011 = _2010 * _2010;
        float _4200 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2013 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _1986 = (((cbLight._m0[_1994].x * 0.3183098733425140380859375) * _2012) * _2013) + _1967;
        _1988 = (((cbLight._m0[_1994].y * 0.3183098733425140380859375) * _2012) * _2013) + _1968;
        _1990 = (((cbLight._m0[_1994].z * 0.3183098733425140380859375) * _2012) * _2013) + _1969;
    }
    bool _1993 = _1973.y == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_1993)
    {
        _2031 = _1986;
        _2033 = _1988;
        _2035 = _1990;
    }
    else
    {
        uint _2204 = _1899 + 7u;
        float _2220 = (dot(vec3(cbLight._m0[_1899 + 3u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4216 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2223 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2031 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _1986;
        _2033 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _1988;
        _2035 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _1990;
    }
    uint _2038 = _1899 + 8u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _726) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1899].x + _662;
    float _2054 = cbLight._m0[_1899].y + _663;
    float _2055 = cbLight._m0[_1899].z + _664;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_1899].xyz));
    float _4232 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2067 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2068 = dot(vec3(_581, _582, _583), vec3(_2060, _2061, _2062));
    float _4254 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2060, _2061, _2062));
    float _4265 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2052 * _2052;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
    float _2089 = 0.959999978542327880859375 - _793;
    float _2091 = 0.959999978542327880859375 - _794;
    float _2092 = 0.959999978542327880859375 - _795;
    float _2099 = 1.0 - _2052;
    float _2110 = (0.5 / (((_2067 * ((_2066 * _2099) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2099) + _2052) * _2066))) * _2066;
    float _4276 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    uint _2126 = _1899 + 9u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _726) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1939].x + _662;
    float _2140 = cbLight._m0[_1939].y + _663;
    float _2141 = cbLight._m0[_1939].z + _664;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_1939].xyz));
    float _4287 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2153 = dot(vec3(_581, _582, _583), vec3(_2146, _2147, _2148));
    float _4298 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2146, _2147, _2148));
    float _4309 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2138 * _2138;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0);
    float _2179 = 1.0 - _2138;
    float _2189 = (0.5 / (((_2067 * ((_2152 * _2179) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2179) + _2138) * _2152))) * _2152;
    float _4320 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    float _2201 = (((((_2172 * _2089) + _796) * cbLight._m0[_2126].x) * _2191) * _1922) + ((((cbLight._m0[_2038].x * _1891) * ((_2088 * _2089) + _796)) * _2112) * _1935);
    float _2202 = (((((_2172 * _2091) + _798) * cbLight._m0[_2126].y) * _2191) * _1922) + ((((cbLight._m0[_2038].y * _1892) * ((_2088 * _2091) + _798)) * _2112) * _1935);
    float _2203 = (((((_2172 * _2092) + _799) * cbLight._m0[_2126].z) * _2191) * _1922) + ((((cbLight._m0[_2038].z * _1893) * ((_2088 * _2092) + _799)) * _2112) * _1935);
    float _2265;
    float _2267;
    float _2269;
    if (_1975)
    {
        _2265 = _2201;
        _2267 = _2202;
        _2269 = _2203;
    }
    else
    {
        uint _2271 = _1899 + 2u;
        uint _2275 = _1899 + 10u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _726) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _662;
        float _2292 = cbLight._m0[_2271].y + _663;
        float _2293 = cbLight._m0[_2271].z + _664;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2271].xyz));
        float _4331 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2305 = dot(vec3(_581, _582, _583), vec3(_2298, _2299, _2300));
        float _4342 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4353 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0);
        float _2331 = 1.0 - _2290;
        float _2341 = (0.5 / (((_2067 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2331) + _2290) * _2304))) * _2304;
        float _4364 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2265 = (((((_2324 * _2089) + _796) * cbLight._m0[_2275].x) * _2343) * _2344) + _2201;
        _2267 = (((((_2324 * _2091) + _798) * cbLight._m0[_2275].y) * _2343) * _2344) + _2202;
        _2269 = (((((_2324 * _2092) + _799) * cbLight._m0[_2275].z) * _2343) * _2344) + _2203;
    }
    float _2379;
    float _2381;
    float _2383;
    if (_1993)
    {
        _2379 = _2265;
        _2381 = _2267;
        _2383 = _2269;
    }
    else
    {
        uint _2390 = _1899 + 3u;
        uint _2394 = _1899 + 11u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _726) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _662;
        float _2411 = cbLight._m0[_2390].y + _663;
        float _2412 = cbLight._m0[_2390].z + _664;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2390].xyz));
        float _4380 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2424 = dot(vec3(_581, _582, _583), vec3(_2417, _2418, _2419));
        float _4391 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4402 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
        float _2450 = 1.0 - _2409;
        float _2460 = (0.5 / (((_2067 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2450) + _2409) * _2423))) * _2423;
        float _4413 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2379 = (((((_2443 * _2089) + _796) * cbLight._m0[_2394].x) * _2462) * _2463) + _2265;
        _2381 = (((((_2443 * _2091) + _798) * cbLight._m0[_2394].y) * _2462) * _2463) + _2267;
        _2383 = (((((_2443 * _2092) + _799) * cbLight._m0[_2394].z) * _2462) * _2463) + _2269;
    }
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    if (_1897.y == 0u)
    {
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2538;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2538;
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2538;
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.x;
        uint _2565 = uint((float(_2553.y) * floor(float(uint(cbSceneParam._m0[85u].y * _685) / _2554))) + floor(float(uint(cbSceneParam._m0[85u].x * _684) / _2554)));
        float _2575 = (log2(_2541 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2576 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        uint _2579 = uint(isnan(14.0) ? _2576 : (isnan(_2576) ? 14.0 : min(_2576, 14.0)));
        uvec4 _2584 = texelFetch(g_lightClusterGridBuffer, int(((_2579 << 2u) + (_2565 << 6u)) >> 2u));
        uint _2585 = _2584.x;
        uint _2586 = _2553.z;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((((1u << ((_2586 >> 4u) & 15u)) + 4294967295u) & _2585) == 0u) || ((_2586 & 240u) == 0u))
        {
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
        }
        else
        {
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            uint _2861 = 0u;
            uint _2870;
            bool _2871;
            for (;;)
            {
                _2870 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                _2871 = _2870 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2871)
                {
                    frontier_phi_70_pred = _2855;
                    frontier_phi_70_pred_1 = _2860;
                    frontier_phi_70_pred_2 = _2859;
                    frontier_phi_70_pred_3 = _2858;
                    frontier_phi_70_pred_4 = _2857;
                    frontier_phi_70_pred_5 = _2856;
                }
                else
                {
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    uint _3006;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2870;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    for (;;)
                    {
                        uint _3010 = uint(findLSB(_3006)) + (_2861 << 5u);
                        uint _3007 = (_3006 + 4294967295u) & _3006;
                        uint _3012 = _3010 * 48u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3032 = (_3010 * 48u) + 4u;
                        vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3051 = (_3010 * 48u) + 8u;
                        vec3 _3062 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x));
                        float _3066 = _3026.x - _2539;
                        float _3067 = _3026.y - _2540;
                        float _3068 = _3026.z - _2541;
                        float _3069 = dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068));
                        float _3072 = inversesqrt(_3069);
                        float _3073 = _3072 * _3066;
                        float _3074 = _3072 * _3067;
                        float _3075 = _3072 * _3068;
                        float _3076 = dot(vec3(_707, _710, _713), vec3(_3073, _3074, _3075));
                        float _3081 = 1.0 - (_3069 * _3026.w);
                        float _4439 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3083 = sqrt(_3069) * _3045.w;
                        float _3086 = 1.39999997615814208984375 / (_3083 + 1.39999997615814208984375);
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3076) + _3087;
                        float _3093 = _3083 * _3083;
                        float _3097 = ((isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))) * _3082) / ((_3093 * 0.699999988079071044921875) + 1.0);
                        float _3101 = (-0.0) - _2539;
                        float _3102 = (-0.0) - _2540;
                        float _3103 = (-0.0) - _2541;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3118 = exp2(log2(1.0 / ((_3093 * 3.5) + 5.0)) * 0.25);
                        float _3119 = 1.0 - _827;
                        float _3126 = sqrt(1.0 - ((1.0 - (_3119 * _3119)) * (1.0 - (_3118 * _3118))));
                        float _3127 = _3126 * _3126;
                        float _3128 = _3127 * _3127;
                        float _3129 = _3108 + _3073;
                        float _3130 = _3109 + _3074;
                        float _3131 = _3110 + _3075;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3139 = dot(vec3(_707, _710, _713), vec3(_3108, _3109, _3110));
                        float _4455 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3143 = dot(vec3(_707, _710, _713), vec3(_3135 * _3129, _3135 * _3130, _3135 * _3131));
                        float _4466 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3150 = ((_3146 * _3146) * (_3128 + (-1.0))) + 1.0;
                        float _3151 = _3086 * _3127;
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3076) + _3152;
                        float _4477 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3157 = 1.0 - _3127;
                        float _3167 = (0.5 / (((_3156 * ((_3142 * _3157) + _3127)) + 9.9999999392252902907785028219223e-09) + (((_3156 * _3157) + _3127) * _3142))) * _3156;
                        float _4488 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3178 = (((_3128 * 3.1415927410125732421875) * (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) / ((_3150 * _3150) * ((_3093 * 2.1991131305694580078125) + 3.141590118408203125))) * _3082;
                        _2930 = (_3097 * _3045.x) + _3003;
                        _2931 = (_3097 * _3045.y) + _3004;
                        _2932 = (_3097 * _3045.z) + _3005;
                        _2927 = (_3178 * _3062.x) + _3000;
                        _2928 = (_3178 * _3062.y) + _3001;
                        _2929 = (_3178 * _3062.z) + _3002;
                        if (_3007 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _3007;
                        }
                    }
                    frontier_phi_70_pred = _2927;
                    frontier_phi_70_pred_1 = _2932;
                    frontier_phi_70_pred_2 = _2931;
                    frontier_phi_70_pred_3 = _2930;
                    frontier_phi_70_pred_4 = _2929;
                    frontier_phi_70_pred_5 = _2928;
                }
                _2704 = frontier_phi_70_pred;
                _2714 = frontier_phi_70_pred_1;
                _2712 = frontier_phi_70_pred_2;
                _2710 = frontier_phi_70_pred_3;
                _2708 = frontier_phi_70_pred_4;
                _2706 = frontier_phi_70_pred_5;
                uint _2862 = _2861 + 1u;
                if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2855 = _2704;
                    _2856 = _2706;
                    _2857 = _2708;
                    _2858 = _2710;
                    _2859 = _2712;
                    _2860 = _2714;
                    _2861 = _2862;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
        }
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.z;
        uint _2720 = (_2718 >> 8u) & 15u;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((4294967295u << _2720) & _2585) == 0u)
        {
            _2823 = _2703;
            _2825 = _2705;
            _2827 = _2707;
            _2829 = _2709;
            _2831 = _2711;
            _2833 = _2713;
        }
        else
        {
            float _2848 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
            float _2849 = _2848 * _2539;
            float _2850 = _2848 * _2540;
            float _2851 = _2848 * _2541;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2720 < ((_2718 >> 12u) & 15u))
            {
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2983 = _2703;
                float _2984 = _2705;
                float _2985 = _2707;
                float _2986 = _2709;
                float _2987 = _2711;
                float _2988 = _2713;
                uint _2989 = _2720;
                uint _2998;
                bool _2999;
                for (;;)
                {
                    _2998 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                    _2999 = _2998 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2999)
                    {
                        frontier_phi_81_pred = _2988;
                        frontier_phi_81_pred_1 = _2987;
                        frontier_phi_81_pred_2 = _2986;
                        frontier_phi_81_pred_3 = _2985;
                        frontier_phi_81_pred_4 = _2984;
                        frontier_phi_81_pred_5 = _2983;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        float _3209 = _2987;
                        float _3210 = _2988;
                        uint _3211 = _2998;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3280;
                        vec4 _3295;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3222 = ((_2989 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3267 = (_3222 * 40u) + 16u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3222 * 40u) + 20u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3222 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3222 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_2541, _3329.z, fma(_2540, _3329.y, _3329.x * _2539)) + _3329.w;
                            _3342 = !((fma(_2541, _3310.z, fma(_2540, _3310.y, _3310.x * _2539)) + _3310.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3237.x - _2539;
                                float _3370 = _3237.y - _2540;
                                float _3371 = _3237.z - _2541;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3238 * _3238));
                                float _4499 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3387 = sqrt(_3372) * _3253.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_707, _710, _713))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_2541, _3280.z, fma(_2540, _3280.y, _3280.x * _2539)) + _3280.w) / _3341;
                                float _3401 = (fma(_2541, _3295.z, fma(_2540, _3295.y, _3295.x * _2539)) + _3295.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4515 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _827;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2849;
                                float _3431 = _3377 - _2850;
                                float _3432 = _3378 - _2851;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_707, _710, _713), vec3((-0.0) - _2849, (-0.0) - _2850, (-0.0) - _2851));
                                float _4526 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3444 = dot(vec3(_707, _710, _713), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4537 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_707, _710, _713), vec3(_3376, _3377, _3378))) + _3453;
                                float _4548 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4559 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3407 * _3253.z;
                                frontier_phi_87_pred_1 = _3407 * _3253.y;
                                frontier_phi_87_pred_2 = _3407 * _3253.x;
                                frontier_phi_87_pred_3 = _3481 * _3265.z;
                                frontier_phi_87_pred_4 = _3481 * _3265.y;
                                frontier_phi_87_pred_5 = _3481 * _3265.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3490 = frontier_phi_87_pred;
                            _3489 = frontier_phi_87_pred_1;
                            _3488 = frontier_phi_87_pred_2;
                            _3487 = frontier_phi_87_pred_3;
                            _3486 = frontier_phi_87_pred_4;
                            _3485 = frontier_phi_87_pred_5;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            _3192 = _3485 + _3205;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3197;
                        frontier_phi_81_pred_1 = _3196;
                        frontier_phi_81_pred_2 = _3195;
                        frontier_phi_81_pred_3 = _3194;
                        frontier_phi_81_pred_4 = _3193;
                        frontier_phi_81_pred_5 = _3192;
                    }
                    _2834 = frontier_phi_81_pred;
                    _2832 = frontier_phi_81_pred_1;
                    _2830 = frontier_phi_81_pred_2;
                    _2828 = frontier_phi_81_pred_3;
                    _2826 = frontier_phi_81_pred_4;
                    _2824 = frontier_phi_81_pred_5;
                    uint _2990 = _2989 + 1u;
                    if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2983 = _2824;
                        _2984 = _2826;
                        _2985 = _2828;
                        _2986 = _2830;
                        _2987 = _2832;
                        _2988 = _2834;
                        _2989 = _2990;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2830;
                frontier_phi_62_63_ladder_1 = _2834;
                frontier_phi_62_63_ladder_2 = _2832;
                frontier_phi_62_63_ladder_3 = _2828;
                frontier_phi_62_63_ladder_4 = _2826;
                frontier_phi_62_63_ladder_5 = _2824;
            }
            else
            {
                frontier_phi_62_63_ladder = _2709;
                frontier_phi_62_63_ladder_1 = _2713;
                frontier_phi_62_63_ladder_2 = _2711;
                frontier_phi_62_63_ladder_3 = _2707;
                frontier_phi_62_63_ladder_4 = _2705;
                frontier_phi_62_63_ladder_5 = _2703;
            }
            _2823 = frontier_phi_62_63_ladder_5;
            _2825 = frontier_phi_62_63_ladder_4;
            _2827 = frontier_phi_62_63_ladder_3;
            _2829 = frontier_phi_62_63_ladder;
            _2831 = frontier_phi_62_63_ladder_2;
            _2833 = frontier_phi_62_63_ladder_1;
        }
        float _2838 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2597 = (_2838 * _2829) + _2031;
        _2599 = (_2838 * _2831) + _2033;
        _2601 = (_2838 * _2833) + _2035;
        _2603 = ((_2823 * _796) * _2838) + _2379;
        _2605 = ((_2825 * _798) * _2838) + _2381;
        _2607 = ((_2827 * _799) * _2838) + _2383;
    }
    else
    {
        _2597 = _2031;
        _2599 = _2033;
        _2601 = _2035;
        _2603 = _2379;
        _2605 = _2381;
        _2607 = _2383;
    }
    vec4 _2613 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4575 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4586 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4597 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2637 = (((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2597 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _811))) + ((_2603 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1650)) * cbPerFrame._m0[3u].x)) + (_2613.x * cbMtdParam._m0[3u].x);
    float _2639 = ((_2613.y * cbMtdParam._m0[3u].x) + ((_2605 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1650)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2599 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _811)));
    float _2641 = ((_2613.z * cbMtdParam._m0[3u].x) + ((_2607 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1650)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2601 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _811)));
    float _2642 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2643 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2644 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    uint _2645 = _739 + 6u;
    float _2653 = _684 / cbSceneParam._m0[86u].x;
    float _2654 = _685 / cbSceneParam._m0[86u].y;
    vec4 _2668 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, (log2((isnan(cbSceneParam._m0[77u].w) ? _604 : (isnan(_604) ? cbSceneParam._m0[77u].w : min(_604, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2670 = _2668.x;
    float _2671 = _2668.y;
    float _2672 = _2668.z;
    float _2673 = _2668.w;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_604 > cbSceneParam._m0[78u].w)
    {
        float _2728 = isnan(_604) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _604 : min(cbSceneParam._m0[80u].w, _604));
        float _2729 = _2728 / _604;
        float _2740 = _2729 * _655;
        float _2741 = _656 * _2729;
        float _2742 = (-0.0) - _2741;
        float _2743 = _2729 * _657;
        float _2745 = (cbSceneParam._m0[77u].w * _2742) / _2728;
        float _2746 = _2745 + cbSceneParam._m0[79u].w;
        float _2747 = cbSceneParam._m0[79u].w - _2741;
        float _2753 = sqrt(((_2740 * _2740) + (_2741 * _2741)) + (_2743 * _2743));
        float _2756 = (1.0 - (cbSceneParam._m0[77u].w / _2728)) * _2753;
        float _2761 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2763 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2940;
        if (abs((_2742 - _2745) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2940 = ((((_2746 > 0.0) ? exp2(_2761 * _2746) : (2.0 - exp2(_2763 * _2746))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2756;
        }
        else
        {
            float _2884 = 1.0 / cbSceneParam._m0[80u].x;
            float _2885 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : max(_2746, _2747));
            float _2886 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : min(_2746, _2747));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            _2940 = ((abs(_2753 / _2742) * cbSceneParam._m0[80u].y) * ((((_2895 - _2896) * 2.0) - ((exp2(_2761 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0)))) - exp2(_2761 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))))) * _2884)) - ((exp2(_2763 * _2895) - exp2(_2763 * _2896)) * _2884))) + (_2756 * cbSceneParam._m0[80u].z);
        }
        vec4 _2942 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, 1.0), 0.0);
        float _2951 = exp2((_2940 * (-1.44269502162933349609375)) * (1.0 - _2942.w));
        float _2952 = log2(_2951);
        float _2968 = log2(_2673);
        _2765 = (exp2(_2968 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].x)) * _2942.x) / cbSceneParam._m0[78u].x)) + _2670;
        _2767 = (exp2(_2968 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].y)) * _2942.y) / cbSceneParam._m0[78u].y)) + _2671;
        _2769 = (exp2(_2968 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].z)) * _2942.z) / cbSceneParam._m0[78u].z)) + _2672;
        _2771 = _2951 * _2673;
    }
    else
    {
        _2765 = _2670;
        _2767 = _2671;
        _2769 = _2672;
        _2771 = _2673;
    }
    bool _2978;
    vec4 _2781;
    vec4 _2803;
    float _2805;
    float _2809;
    float _2810;
    float _2811;
    float _2812;
    bool _2822;
    for (;;)
    {
        _2781 = cbMatDynParam._m0[0u];
        float _2783 = roundEven(_2781.y);
        bool _2784 = _2783 == 3.0;
        float _2785 = log2(_2771);
        float _2792 = exp2(_2785 * cbSceneParam._m0[78u].x) * _2642;
        float _2793 = exp2(_2785 * cbSceneParam._m0[78u].y) * _2643;
        float _2794 = exp2(_2785 * cbSceneParam._m0[78u].z) * _2644;
        float _2801 = _671 + (-0.5);
        _2803 = cbMtdParam._m0[1u];
        _2805 = _2803.y * _2801;
        float _2808 = (_2783 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2809 = _2808 * (_2784 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2765)));
        _2810 = _2808 * (_2784 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2767)));
        _2811 = _2808 * (_2784 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2769)));
        _2812 = _2801 * 0.999000012874603271484375;
        _2822 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2822)
        {
            if ((cbInstanceData._m0[_739 + 7u].x + _2812) < 0.5)
            {
                _2978 = true;
                break;
            }
        }
        uint _2919 = _740 + uint(_2781.w);
        if ((cbInstanceData._m0[_2919].w < 1.0) && ((cbInstanceData._m0[_2919].w + _2812) < 0.5))
        {
            _2978 = true;
            break;
        }
        if ((_2805 + 1.0) < _2803.x)
        {
            _2978 = true;
            break;
        }
        _2978 = false;
        break;
    }
    float _3183;
    if (_2978)
    {
        discard_state = true;
        _3183 = 0.0;
    }
    else
    {
        _3183 = cbInstanceData._m0[_2645].w;
    }
    SV_Target.x = _2809;
    SV_Target.y = _2810;
    SV_Target.z = _2811;
    SV_Target.w = _3183;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2645].w;
    discard_exit();
}


