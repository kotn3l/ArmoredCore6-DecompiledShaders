#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1100;
float _3510;
float _3511;
float _3512;
float _3513;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _266 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _277 = exp2(log2(_266.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _278;
    float _280;
    float _282;
    if (_277)
    {
        _278 = cbMtdParam._m0[18u].x;
        _280 = cbMtdParam._m0[18u].y;
        _282 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _278 = cbMtdParam._m0[17u].x;
        _280 = cbMtdParam._m0[17u].y;
        _282 = cbMtdParam._m0[17u].z;
    }
    float _287;
    if (_277)
    {
        _287 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _287 = cbMtdParam._m0[19u].z;
    }
    float _293;
    float _295;
    if (_277)
    {
        _293 = cbMtdParam._m0[26u].x;
        _295 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _293 = cbMtdParam._m0[22u].x;
        _295 = cbMtdParam._m0[22u].y;
    }
    float _297 = _293 * TEXCOORD.x;
    float _298 = _295 * TEXCOORD.y;
    float _310 = floor(_287);
    vec4 _313 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _297) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _298) + cbTextureTilingScale._m0[6u].w, _310));
    vec4 _335 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _343 = (((_278 * cbMtdParam._m0[19u].w) * _313.x) * cbMtdParam._m0[9u].x) * _335.x;
    float _347 = (((_280 * cbMtdParam._m0[19u].w) * _313.y) * cbMtdParam._m0[9u].y) * _335.y;
    float _351 = (((_282 * cbMtdParam._m0[19u].w) * _313.z) * cbMtdParam._m0[9u].z) * _335.z;
    vec4 _363 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _367 = _363.z;
    vec4 _380 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _297) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _298) + cbTextureTilingScale._m0[8u].w, _310));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[25u].x;
    _186[0u] = cbMtdParam._m0[25u].y;
    _185[1u] = cbMtdParam._m0[25u].z;
    _186[1u] = cbMtdParam._m0[25u].w;
    float _394 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _397 = uint(int(isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0))));
    float _402 = _186[_397] + _380.x;
    vec4 _421 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _297) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _298) + cbTextureTilingScale._m0[7u].w, _310));
    float _428 = (_421.x * 2.0) + (-1.0);
    float _429 = (_421.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3532 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))));
    float _444 = (cbMtdParam._m0[20u].x * (((_367 * 2.0) * (_421.z + _185[_397])) - _367)) + _367;
    float _448 = (cbMtdParam._m0[20u].y * ((_363.x * 2.0) + (-1.0))) + _428;
    float _449 = (cbMtdParam._m0[20u].y * ((_363.y * 2.0) + (-1.0))) + _429;
    float _452 = fma(_435, _236, fma(_449, _228 * TANGENT.x, (_214 * _206) * _448));
    float _455 = fma(_435, _237, fma(_449, _228 * TANGENT.y, (_214 * _207) * _448));
    float _458 = fma(_435, _238, fma(_449, _228 * TANGENT.z, (_214 * _208) * _448));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _3543 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _466 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _3554 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3565 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3576 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3587 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _470 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _486 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _538 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _528);
    float _539 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _528);
    float _540 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _528);
    float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
    float _545 = _538 * _544;
    float _546 = _539 * _544;
    float _547 = _540 * _544;
    vec4 _552 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _554 = _552.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _780 = sqrt(((_538 * _538) + (_539 * _539)) + (_540 * _540));
        float _786 = (cbMatDynParam._m0[5u].x * _780) + cbMatDynParam._m0[5u].y;
        float _3598 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _791 = (cbMatDynParam._m0[5u].z * _780) + cbMatDynParam._m0[5u].w;
        float _3609 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) - _787)) + _787) < ((_554 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _568 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _569 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _571 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _573 = _571.w;
    float _592 = fma(_465, cbSceneParam._m0[5u].z, fma(_464, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _463));
    float _595 = fma(_465, cbSceneParam._m0[6u].z, fma(_464, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _463));
    float _598 = fma(_465, cbSceneParam._m0[7u].z, fma(_464, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _463));
    vec4 _600 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _611 = (((_600.y - _466) + (_600.w * _466)) * cbMtdParam._m0[3u].x) + _466;
    uint _624 = uint(roundEven(NORMAL.w)) * 13u;
    uint _626 = _624 + 9u;
    uint _627 = _626 + uint(cbMatDynParam._m0[0u].w);
    float _633 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_627].x;
    float _634 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_627].y;
    float _635 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * cbInstanceData._m0[_627].z;
    float _3620 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    vec4 _639 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _644 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _655 = (((_644.x - _470) + (_644.w * _470)) * cbMtdParam._m0[3u].x) + _470;
    float _668 = (cbMtdParam._m0[3u].x * (((_636 * _573) - _636) + _639.x)) + _636;
    float _669 = (cbMtdParam._m0[3u].x * (((_637 * _573) - _637) + _639.y)) + _637;
    float _670 = (cbMtdParam._m0[3u].x * (((_638 * _573) - _638) + _639.z)) + _638;
    float _671 = 1.0 - _655;
    float _672 = _671 * _668;
    float _673 = _671 * _669;
    float _674 = _671 * _670;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _655;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _655;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _655;
    float _682 = _679 + 0.039999999105930328369140625;
    float _684 = _680 + 0.039999999105930328369140625;
    float _685 = _681 + 0.039999999105930328369140625;
    vec4 _694 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _568, cbSceneParam._m0[86u].y * _569));
    float _697 = _694.x * TEXCOORD_4;
    float _698 = dot(vec3(_463, _464, _465), vec3(_545, _546, _547));
    float _701 = _698 * 2.0;
    float _705 = (_701 * _463) - _545;
    float _706 = (_701 * _464) - _546;
    float _707 = (_701 * _465) - _547;
    float _711 = abs(dot(vec3(_545, _546, _547), vec3(_463, _464, _465)));
    float _3653 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _713 = sqrt(_611);
    float _726 = exp2((_713 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_713 * 3.0));
    float _732 = (1.0 - _726) * ((_713 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _733 = _726 * _713;
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1099;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _824 = fma(_769, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761));
        float _828 = fma(_769, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761));
        float _832 = fma(_769, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761));
        float _857 = _761 + _463;
        float _858 = _765 + _464;
        float _859 = _769 + _465;
        float _869 = fma(_859, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857)) - _824;
        float _870 = fma(_859, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857)) - _828;
        float _871 = fma(_859, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857)) - _832;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_824 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_828 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[34u].z) + ((((((_832 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _927 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_893.x + (-0.5));
        float _929 = _927 * (_893.y + (-0.5));
        float _930 = _927 * (_893.z + (-0.5));
        float _937 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_900.x + (-0.5));
        float _939 = _937 * (_900.y + (-0.5));
        float _940 = _937 * (_900.z + (-0.5));
        float _947 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_907.x + (-0.5));
        float _949 = _947 * (_907.y + (-0.5));
        float _950 = _947 * (_907.z + (-0.5));
        float _957 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_914.x + (-0.5));
        float _959 = _957 * (_914.y + (-0.5));
        float _960 = _957 * (_914.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _981 = (dot(vec3(_463, _464, _465), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _991 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3701 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_993 + 1.0))) + _998) * _961;
        float _1008 = _929 * 0.5;
        float _1009 = _939 * 0.5;
        float _1010 = _949 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_463, _464, _465), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3734 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1035 + 1.0))) + _1040) * _962;
        float _1050 = _930 * 0.5;
        float _1051 = _940 * 0.5;
        float _1052 = _950 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_463, _464, _465), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3767 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1077 + 1.0))) + _1082) * _963;
        _1099 = _930;
        _1101 = _929;
        _1102 = _928;
        _1103 = _940;
        _1104 = _939;
        _1105 = _938;
        _1106 = _950;
        _1107 = _949;
        _1108 = _948;
        _1109 = _963;
        _1110 = _962;
        _1111 = _961;
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _1100;
        _1101 = _1100;
        _1102 = _1100;
        _1103 = _1100;
        _1104 = _1100;
        _1105 = _1100;
        _1106 = _1100;
        _1107 = _1100;
        _1108 = _1100;
        _1109 = _1100;
        _1110 = _1100;
        _1111 = _1100;
        _1112 = 0.0;
        _1113 = 0.0;
        _1114 = 0.0;
    }
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1143 = fma(_769, cbModelParam._m0[30u].z, fma(_765, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _761));
        float _1147 = fma(_769, cbModelParam._m0[31u].z, fma(_765, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _761));
        float _1151 = fma(_769, cbModelParam._m0[32u].z, fma(_765, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _761));
        float _1174 = _761 + _463;
        float _1175 = _765 + _464;
        float _1176 = _769 + _465;
        float _1186 = fma(_1176, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174)) - _1143;
        float _1187 = fma(_1176, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174)) - _1147;
        float _1188 = fma(_1176, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174)) - _1151;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1143 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1147 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[35u].z) + ((((((_1151 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1242 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1209.x + (-0.5));
        float _1244 = _1242 * (_1209.y + (-0.5));
        float _1245 = _1242 * (_1209.z + (-0.5));
        float _1252 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1216.x + (-0.5));
        float _1254 = _1252 * (_1216.y + (-0.5));
        float _1255 = _1252 * (_1216.z + (-0.5));
        float _1262 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1223.x + (-0.5));
        float _1264 = _1262 * (_1223.y + (-0.5));
        float _1265 = _1262 * (_1223.z + (-0.5));
        float _1272 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1230.x + (-0.5));
        float _1274 = _1272 * (_1230.y + (-0.5));
        float _1275 = _1272 * (_1230.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_463, _464, _465), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3830 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1306 + 1.0))) + _1311) * _1276;
        float _1321 = _1244 * 0.5;
        float _1322 = _1254 * 0.5;
        float _1323 = _1264 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_463, _464, _465), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3863 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1348 + 1.0))) + _1353) * _1277;
        float _1363 = _1245 * 0.5;
        float _1364 = _1255 * 0.5;
        float _1365 = _1265 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_463, _464, _465), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3896 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1390 + 1.0))) + _1395) * _1278;
        _1412 = _1245;
        _1413 = _1244;
        _1414 = _1243;
        _1415 = _1255;
        _1416 = _1254;
        _1417 = _1253;
        _1418 = _1265;
        _1419 = _1264;
        _1420 = _1263;
        _1421 = _1278;
        _1422 = _1277;
        _1423 = _1276;
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
    }
    else
    {
        _1412 = _1100;
        _1413 = _1100;
        _1414 = _1100;
        _1415 = _1100;
        _1416 = _1100;
        _1417 = _1100;
        _1418 = _1100;
        _1419 = _1100;
        _1420 = _1100;
        _1421 = _1100;
        _1422 = _1100;
        _1423 = _1100;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1112)) + _1112;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1113)) + _1113;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1114)) + _1114;
    float _1459 = fma(_1438, cbSceneParam._m0[89u].z, fma(_1437, cbSceneParam._m0[89u].y, _1436 * cbSceneParam._m0[89u].x));
    float _1462 = fma(_1438, cbSceneParam._m0[90u].z, fma(_1437, cbSceneParam._m0[90u].y, _1436 * cbSceneParam._m0[90u].x));
    float _1465 = fma(_1438, cbSceneParam._m0[91u].z, fma(_1437, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1436));
    float _1480 = _705 * 0.5;
    float _1481 = _706 * 0.5;
    float _1482 = _707 * 0.5;
    float _1483 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1486 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1489 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1523;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1496 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1099, _1103, _1106, _1109));
        float _1500 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1101, _1104, _1107, _1110));
        float _1504 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1511 = dot(vec4(cbModelParam._m0[39u]), vec4(_1480, _1481, _1482, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1534;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1525 = dot(vec4(cbModelParam._m0[40u]), vec4(_1480, _1481, _1482, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1538 = (_1534 * cbModelParam._m0[1u].x) + (_1523 * (1.0 - cbModelParam._m0[1u].x));
    float _1548 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _611);
    float _1549 = isnan(_1548) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1548 : min(cbModelParam._m0[25u].z, _1548));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1598 = fma(_769, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761)) + cbModelParam._m0[13u].w;
        float _1602 = fma(_769, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761)) + cbModelParam._m0[14u].w;
        float _1606 = fma(_769, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761)) + cbModelParam._m0[15u].w;
        float _1609 = fma(_707, cbModelParam._m0[13u].z, fma(_706, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705));
        float _1612 = fma(_707, cbModelParam._m0[14u].z, fma(_706, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705));
        float _1615 = fma(_707, cbModelParam._m0[15u].z, fma(_706, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705));
        float _1643;
        if (_1609 > 0.0)
        {
            _1643 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1643 = frontier_phi_25_23_ladder;
        }
        float _1847;
        if (_1612 > 0.0)
        {
            _1847 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1847 = frontier_phi_34_30_ladder;
        }
        float _2101;
        if (_1615 > 0.0)
        {
            _2101 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2101 = frontier_phi_46_41_ladder;
        }
        float _2103 = isnan(_1847) ? _1643 : (isnan(_1643) ? _1847 : min(_1643, _1847));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1609) + _1598;
        float _2109 = (_2104 * _1612) + _1602;
        float _2110 = (_2104 * _1615) + _1606;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2113 = (-1.0) - _2111;
        float _2115 = _2111 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2110 > _2115) || ((_2110 < _2113) || ((_2109 > _2115) || ((_2109 < _2113) || ((_2108 < _2113) || (_2108 > _2115))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2238 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2110, cbModelParam._m0[9u].z, fma(_2109, cbModelParam._m0[9u].y, _2108 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2110, cbModelParam._m0[10u].z, fma(_2109, cbModelParam._m0[10u].y, _2108 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2110, cbModelParam._m0[11u].z, fma(_2109, cbModelParam._m0[11u].y, _2108 * cbModelParam._m0[11u].x))), _1549);
            frontier_phi_24_46_ladder = _2238.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2238.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2238.x * cbModelParam._m0[1u].y;
        }
        _1631 = frontier_phi_24_46_ladder_2;
        _1633 = frontier_phi_24_46_ladder_1;
        _1635 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_705, _706, _707), _1549);
        _1631 = _1619.x * cbModelParam._m0[1u].y;
        _1633 = _1619.y * cbModelParam._m0[1u].y;
        _1635 = _1619.z * cbModelParam._m0[1u].y;
    }
    float _1639 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _611);
    float _1640 = isnan(_1639) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1639 : min(cbModelParam._m0[25u].w, _1639));
    float _1729;
    float _1731;
    float _1733;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1693 = fma(_769, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761)) + cbModelParam._m0[21u].w;
        float _1697 = fma(_769, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761)) + cbModelParam._m0[22u].w;
        float _1701 = fma(_769, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761)) + cbModelParam._m0[23u].w;
        float _1704 = fma(_707, cbModelParam._m0[21u].z, fma(_706, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705));
        float _1707 = fma(_707, cbModelParam._m0[22u].z, fma(_706, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705));
        float _1710 = fma(_707, cbModelParam._m0[23u].z, fma(_706, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705));
        float _1852;
        if (_1704 > 0.0)
        {
            _1852 = abs((1.0 - _1693) / _1704);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1693 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1852 = frontier_phi_36_32_ladder;
        }
        float _2128;
        if (_1707 > 0.0)
        {
            _2128 = abs((1.0 - _1697) / _1707);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1697 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2128 = frontier_phi_48_43_ladder;
        }
        float _2341;
        if (_1710 > 0.0)
        {
            _2341 = abs((1.0 - _1701) / _1710);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1701 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2341 = frontier_phi_57_54_ladder;
        }
        float _2343 = isnan(_2128) ? _1852 : (isnan(_1852) ? _2128 : min(_1852, _2128));
        float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
        float _2348 = (_2344 * _1704) + _1693;
        float _2349 = (_2344 * _1707) + _1697;
        float _2350 = (_2344 * _1710) + _1701;
        float _2351 = _2344 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2351;
        float _2354 = _2351 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2350 > _2354) || ((_2350 < _2352) || ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 < _2352) || (_2348 > _2354))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2350, cbModelParam._m0[17u].z, fma(_2349, cbModelParam._m0[17u].y, _2348 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2350, cbModelParam._m0[18u].z, fma(_2349, cbModelParam._m0[18u].y, _2348 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2350, cbModelParam._m0[19u].z, fma(_2349, cbModelParam._m0[19u].y, _2348 * cbModelParam._m0[19u].x))), _1640);
            frontier_phi_33_57_ladder = _2566.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2566.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2566.z * cbModelParam._m0[1u].z;
        }
        _1729 = frontier_phi_33_57_ladder_1;
        _1731 = frontier_phi_33_57_ladder;
        _1733 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_705, _706, _707), _1640);
        _1729 = _1713.x * cbModelParam._m0[1u].z;
        _1731 = _1713.y * cbModelParam._m0[1u].z;
        _1733 = _1713.z * cbModelParam._m0[1u].z;
    }
    float _1746 = (((_732 * _682) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1729 - _1631)) + _1631);
    float _1748 = (((_732 * _684) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1731 - _1633)) + _1633);
    float _1750 = (((_732 * _685) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1733 - _1635)) + _1635);
    float _1753 = fma(_1750, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1750, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1750, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, _1746 * cbSceneParam._m0[91u].x));
    uvec4 _1769 = floatBitsToUint(cbInstanceData._m0[_624 + 5u]);
    uint _1771 = _1769.x * 14u;
    uint _1772 = _1771 + 13u;
    float _1779 = _697 + (-1.0);
    float _1784 = (cbLight._m0[_1772].x * _1779) + 1.0;
    float _1785 = (cbLight._m0[_1772].y * _1779) + 1.0;
    float _1786 = (cbLight._m0[_1772].z * _1779) + 1.0;
    float _1787 = (cbLight._m0[_1772].w * _1779) + 1.0;
    uint _1788 = _1771 + 5u;
    float _1794 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1798 = _1771 + 4u;
    float _1805 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1809 = _1771 | 1u;
    float _1820 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_463, _464, _465));
    float _1823 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_463, _464, _465));
    float _4032 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _4043 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1828 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1830 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1837 = ((cbLight._m0[_1788].x * _1794) * _1830) + ((cbLight._m0[_1798].x * _1805) * _1828);
    float _1838 = ((_1794 * cbLight._m0[_1788].y) * _1830) + ((_1805 * cbLight._m0[_1798].y) * _1828);
    float _1839 = ((_1794 * cbLight._m0[_1788].z) * _1830) + ((_1805 * cbLight._m0[_1798].z) * _1828);
    uvec4 _1844 = floatBitsToUint(cbLight._m0[_1771 + 12u]);
    bool _1846 = _1844.x == 0u;
    float _1857;
    float _1859;
    float _1861;
    if (_1846)
    {
        _1857 = _1837;
        _1859 = _1838;
        _1861 = _1839;
    }
    else
    {
        uint _1865 = _1771 + 6u;
        float _1881 = (dot(vec3(cbLight._m0[_1771 + 2u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _1882 = _1881 * _1881;
        float _4054 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1884 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1857 = (((cbLight._m0[_1865].x * 0.3183098733425140380859375) * _1883) * _1884) + _1837;
        _1859 = (((cbLight._m0[_1865].y * 0.3183098733425140380859375) * _1883) * _1884) + _1838;
        _1861 = (((cbLight._m0[_1865].z * 0.3183098733425140380859375) * _1883) * _1884) + _1839;
    }
    bool _1864 = _1844.y == 0u;
    float _1902;
    float _1904;
    float _1906;
    if (_1864)
    {
        _1902 = _1857;
        _1904 = _1859;
        _1906 = _1861;
    }
    else
    {
        uint _2072 = _1771 + 7u;
        float _2088 = (dot(vec3(cbLight._m0[_1771 + 3u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2089 = _2088 * _2088;
        float _4070 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2090 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2091 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _1902 = (((cbLight._m0[_2072].x * 0.3183098733425140380859375) * _2090) * _2091) + _1857;
        _1904 = (((cbLight._m0[_2072].y * 0.3183098733425140380859375) * _2090) * _2091) + _1859;
        _1906 = (((cbLight._m0[_2072].z * 0.3183098733425140380859375) * _2090) * _2091) + _1861;
    }
    uint _1909 = _1771 + 8u;
    float _1922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _611) * 0.949999988079071044921875);
    float _1923 = _1922 * _1922;
    float _1924 = cbLight._m0[_1771].x + _545;
    float _1925 = cbLight._m0[_1771].y + _546;
    float _1926 = cbLight._m0[_1771].z + _547;
    float _1930 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
    float _1931 = _1930 * _1924;
    float _1932 = _1930 * _1925;
    float _1933 = _1930 * _1926;
    float _1934 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1771].xyz));
    float _4086 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _1938 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1939 = dot(vec3(_463, _464, _465), vec3(_1931, _1932, _1933));
    float _4108 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _1943 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1931, _1932, _1933));
    float _4119 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1947 = _1923 * _1923;
    float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
    float _1959 = exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0);
    float _1960 = 0.959999978542327880859375 - _679;
    float _1962 = 0.959999978542327880859375 - _680;
    float _1963 = 0.959999978542327880859375 - _681;
    float _1970 = 1.0 - _1923;
    float _1981 = (0.5 / (((_1938 * ((_1937 * _1970) + _1923)) + 9.9999999392252902907785028219223e-09) + (((_1938 * _1970) + _1923) * _1937))) * _1937;
    float _4130 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1983 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
    uint _1994 = _1771 + 9u;
    float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _611) * 0.949999988079071044921875);
    float _2006 = _2005 * _2005;
    float _2007 = cbLight._m0[_1809].x + _545;
    float _2008 = cbLight._m0[_1809].y + _546;
    float _2009 = cbLight._m0[_1809].z + _547;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2014 = _2013 * _2007;
    float _2015 = _2013 * _2008;
    float _2016 = _2013 * _2009;
    float _2017 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1809].xyz));
    float _4141 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2021 = dot(vec3(_463, _464, _465), vec3(_2014, _2015, _2016));
    float _4152 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_2014, _2015, _2016));
    float _4163 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = _2006 * _2006;
    float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
    float _2040 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
    float _2047 = 1.0 - _2006;
    float _2057 = (0.5 / (((_1938 * ((_2020 * _2047) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_1938 * _2047) + _2006) * _2020))) * _2020;
    float _4174 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
    float _2069 = (((((_2040 * _1960) + _682) * cbLight._m0[_1994].x) * _2059) * _1794) + (((((_1959 * _1960) + _682) * cbLight._m0[_1909].x) * _1983) * _1805);
    float _2070 = (((((_2040 * _1962) + _684) * cbLight._m0[_1994].y) * _2059) * _1794) + (((((_1959 * _1962) + _684) * cbLight._m0[_1909].y) * _1983) * _1805);
    float _2071 = (((((_2040 * _1963) + _685) * cbLight._m0[_1994].z) * _2059) * _1794) + (((((_1959 * _1963) + _685) * cbLight._m0[_1909].z) * _1983) * _1805);
    float _2133;
    float _2135;
    float _2137;
    if (_1846)
    {
        _2133 = _2069;
        _2135 = _2070;
        _2137 = _2071;
    }
    else
    {
        uint _2139 = _1771 + 2u;
        uint _2143 = _1771 + 10u;
        float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _611) * 0.949999988079071044921875);
        float _2158 = _2157 * _2157;
        float _2159 = cbLight._m0[_2139].x + _545;
        float _2160 = cbLight._m0[_2139].y + _546;
        float _2161 = cbLight._m0[_2139].z + _547;
        float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
        float _2166 = _2165 * _2159;
        float _2167 = _2165 * _2160;
        float _2168 = _2165 * _2161;
        float _2169 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2139].xyz));
        float _4185 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2173 = dot(vec3(_463, _464, _465), vec3(_2166, _2167, _2168));
        float _4196 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2177 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2166, _2167, _2168));
        float _4207 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2181 = _2158 * _2158;
        float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
        float _2192 = exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0);
        float _2199 = 1.0 - _2158;
        float _2209 = (0.5 / (((_1938 * ((_2172 * _2199) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_1938 * _2199) + _2158) * _2172))) * _2172;
        float _4218 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
        float _2212 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2133 = (((((_2192 * _1960) + _682) * cbLight._m0[_2143].x) * _2211) * _2212) + _2069;
        _2135 = (((((_2192 * _1962) + _684) * cbLight._m0[_2143].y) * _2211) * _2212) + _2070;
        _2137 = (((((_2192 * _1963) + _685) * cbLight._m0[_2143].z) * _2211) * _2212) + _2071;
    }
    float _2247;
    float _2249;
    float _2251;
    if (_1864)
    {
        _2247 = _2133;
        _2249 = _2135;
        _2251 = _2137;
    }
    else
    {
        uint _2258 = _1771 + 3u;
        uint _2262 = _1771 + 11u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _611) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _545;
        float _2279 = cbLight._m0[_2258].y + _546;
        float _2280 = cbLight._m0[_2258].z + _547;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2258].xyz));
        float _4234 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2292 = dot(vec3(_463, _464, _465), vec3(_2285, _2286, _2287));
        float _4245 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4256 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
        float _2318 = 1.0 - _2277;
        float _2328 = (0.5 / (((_1938 * ((_2291 * _2318) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_1938 * _2318) + _2277) * _2291))) * _2291;
        float _4267 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2330 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2331 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2247 = (((((_2311 * _1960) + _682) * cbLight._m0[_2262].x) * _2330) * _2331) + _2133;
        _2249 = (((((_2311 * _1962) + _684) * cbLight._m0[_2262].y) * _2330) * _2331) + _2135;
        _2251 = (((((_2311 * _1963) + _685) * cbLight._m0[_2262].z) * _2330) * _2331) + _2137;
    }
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_1769.y == 0u)
    {
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2406;
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2406;
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2406;
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.x;
        uint _2433 = uint((float(_2421.y) * floor(float(uint(cbSceneParam._m0[85u].y * _569) / _2422))) + floor(float(uint(cbSceneParam._m0[85u].x * _568) / _2422)));
        float _2443 = (log2(_2409 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2444 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        uint _2447 = uint(isnan(14.0) ? _2444 : (isnan(_2444) ? 14.0 : min(_2444, 14.0)));
        uvec4 _2452 = texelFetch(g_lightClusterGridBuffer, int(((_2447 << 2u) + (_2433 << 6u)) >> 2u));
        uint _2453 = _2452.x;
        uint _2454 = _2421.z;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        if (((((1u << ((_2454 >> 4u) & 15u)) + 4294967295u) & _2453) == 0u) || ((_2454 & 240u) == 0u))
        {
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
        }
        else
        {
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            uint _2729 = 0u;
            uint _2738;
            bool _2739;
            for (;;)
            {
                _2738 = texelFetch(g_lightClassification, int((((_2447 << 5u) + (_2433 << 9u)) + (_2729 << 2u)) >> 2u)).x;
                _2739 = _2738 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2739)
                {
                    frontier_phi_74_pred = _2728;
                    frontier_phi_74_pred_1 = _2727;
                    frontier_phi_74_pred_2 = _2726;
                    frontier_phi_74_pred_3 = _2725;
                    frontier_phi_74_pred_4 = _2724;
                    frontier_phi_74_pred_5 = _2723;
                }
                else
                {
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    uint _2874;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2738;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    for (;;)
                    {
                        uint _2878 = uint(findLSB(_2874)) + (_2729 << 5u);
                        uint _2875 = (_2874 + 4294967295u) & _2874;
                        uint _2880 = _2878 * 48u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2900 = (_2878 * 48u) + 4u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2919 = (_2878 * 48u) + 8u;
                        vec3 _2930 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x));
                        float _2934 = _2894.x - _2407;
                        float _2935 = _2894.y - _2408;
                        float _2936 = _2894.z - _2409;
                        float _2937 = dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936));
                        float _2940 = inversesqrt(_2937);
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2944 = dot(vec3(_592, _595, _598), vec3(_2941, _2942, _2943));
                        float _2949 = 1.0 - (_2937 * _2894.w);
                        float _4293 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2951 = sqrt(_2937) * _2913.w;
                        float _2954 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2944) + _2955;
                        float _2961 = _2951 * _2951;
                        float _2965 = ((isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))) * _2950) / ((_2961 * 0.699999988079071044921875) + 1.0);
                        float _2969 = (-0.0) - _2407;
                        float _2970 = (-0.0) - _2408;
                        float _2971 = (-0.0) - _2409;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2986 = exp2(log2(1.0 / ((_2961 * 3.5) + 5.0)) * 0.25);
                        float _2987 = 1.0 - _713;
                        float _2994 = sqrt(1.0 - ((1.0 - (_2987 * _2987)) * (1.0 - (_2986 * _2986))));
                        float _2995 = _2994 * _2994;
                        float _2996 = _2995 * _2995;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3007 = dot(vec3(_592, _595, _598), vec3(_2976, _2977, _2978));
                        float _4309 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3011 = dot(vec3(_592, _595, _598), vec3(_3003 * _2997, _3003 * _2998, _3003 * _2999));
                        float _4320 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3018 = ((_3014 * _3014) * (_2996 + (-1.0))) + 1.0;
                        float _3019 = _2954 * _2995;
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _2944) + _3020;
                        float _4331 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3024 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3025 = 1.0 - _2995;
                        float _3035 = (0.5 / (((_3024 * ((_3010 * _3025) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2995) * _3010))) * _3024;
                        float _4342 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3046 = (((_2996 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_3018 * _3018) * ((_2961 * 2.1991131305694580078125) + 3.141590118408203125))) * _2950;
                        _2798 = (_2965 * _2913.x) + _2871;
                        _2799 = (_2965 * _2913.y) + _2872;
                        _2800 = (_2965 * _2913.z) + _2873;
                        _2795 = (_3046 * _2930.x) + _2868;
                        _2796 = (_3046 * _2930.y) + _2869;
                        _2797 = (_3046 * _2930.z) + _2870;
                        if (_2875 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2875;
                        }
                    }
                    frontier_phi_74_pred = _2800;
                    frontier_phi_74_pred_1 = _2799;
                    frontier_phi_74_pred_2 = _2798;
                    frontier_phi_74_pred_3 = _2797;
                    frontier_phi_74_pred_4 = _2796;
                    frontier_phi_74_pred_5 = _2795;
                }
                _2582 = frontier_phi_74_pred;
                _2580 = frontier_phi_74_pred_1;
                _2578 = frontier_phi_74_pred_2;
                _2576 = frontier_phi_74_pred_3;
                _2574 = frontier_phi_74_pred_4;
                _2572 = frontier_phi_74_pred_5;
                uint _2730 = _2729 + 1u;
                if (_2730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2723 = _2572;
                    _2724 = _2574;
                    _2725 = _2576;
                    _2726 = _2578;
                    _2727 = _2580;
                    _2728 = _2582;
                    _2729 = _2730;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
        }
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.z;
        uint _2588 = (_2586 >> 8u) & 15u;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((4294967295u << _2588) & _2453) == 0u)
        {
            _2691 = _2571;
            _2693 = _2573;
            _2695 = _2575;
            _2697 = _2577;
            _2699 = _2579;
            _2701 = _2581;
        }
        else
        {
            float _2716 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
            float _2717 = _2716 * _2407;
            float _2718 = _2716 * _2408;
            float _2719 = _2716 * _2409;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2588 < ((_2586 >> 12u) & 15u))
            {
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2851 = _2571;
                float _2852 = _2573;
                float _2853 = _2575;
                float _2854 = _2577;
                float _2855 = _2579;
                float _2856 = _2581;
                uint _2857 = _2588;
                uint _2866;
                bool _2867;
                for (;;)
                {
                    _2866 = texelFetch(g_lightClassification, int((((_2447 << 5u) + (_2433 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                    _2867 = _2866 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2867)
                    {
                        frontier_phi_85_pred = _2855;
                        frontier_phi_85_pred_1 = _2854;
                        frontier_phi_85_pred_2 = _2853;
                        frontier_phi_85_pred_3 = _2852;
                        frontier_phi_85_pred_4 = _2851;
                        frontier_phi_85_pred_5 = _2856;
                    }
                    else
                    {
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        uint _3079 = _2866;
                        uint _3080;
                        vec4 _3105;
                        float _3106;
                        vec4 _3121;
                        vec3 _3133;
                        vec4 _3149;
                        vec4 _3164;
                        float _3211;
                        bool _3212;
                        for (;;)
                        {
                            uint _3090 = ((_2857 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3079));
                            _3080 = (_3079 + 4294967295u) & _3079;
                            uint _3092 = _3090 * 40u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3106 = _3105.w;
                            uint _3108 = (_3090 * 40u) + 4u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3123 = (_3090 * 40u) + 8u;
                            _3133 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x));
                            uint _3136 = (_3090 * 40u) + 16u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3090 * 40u) + 20u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3167 = (_3090 * 40u) + 24u;
                            vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3186 = (_3090 * 40u) + 28u;
                            vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            _3211 = fma(_2409, _3199.z, fma(_2408, _3199.y, _3199.x * _2407)) + _3199.w;
                            _3212 = !((fma(_2409, _3180.z, fma(_2408, _3180.y, _3180.x * _2407)) + _3180.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3212)
                            {
                                float _3239 = _3105.x - _2407;
                                float _3240 = _3105.y - _2408;
                                float _3241 = _3105.z - _2409;
                                float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                                float _3245 = inversesqrt(_3242);
                                float _3246 = _3245 * _3239;
                                float _3247 = _3245 * _3240;
                                float _3248 = _3245 * _3241;
                                float _3252 = 1.0 - (_3242 / (_3106 * _3106));
                                float _4353 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3257 = sqrt(_3242) * _3121.w;
                                float _3259 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                                float _3260 = _3259 * _3259;
                                float _3263 = ((1.0 - _3260) * dot(vec3(_3246, _3247, _3248), vec3(_592, _595, _598))) + _3260;
                                float _3266 = _3257 * _3257;
                                float _3270 = (fma(_2409, _3149.z, fma(_2408, _3149.y, _3149.x * _2407)) + _3149.w) / _3211;
                                float _3271 = (fma(_2409, _3164.z, fma(_2408, _3164.y, _3164.x * _2407)) + _3164.w) / _3211;
                                float _3275 = 1.0 - dot(vec2(_3270, _3271), vec2(_3270, _3271));
                                float _4369 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3277 = _3276 * (((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3253) / ((_3266 * 0.699999988079071044921875) + 1.0));
                                float _3289 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                                float _3290 = 1.0 - _713;
                                float _3297 = sqrt(1.0 - ((1.0 - (_3290 * _3290)) * (1.0 - (_3289 * _3289))));
                                float _3298 = _3297 * _3297;
                                float _3299 = _3298 * _3298;
                                float _3300 = _3246 - _2717;
                                float _3301 = _3247 - _2718;
                                float _3302 = _3248 - _2719;
                                float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                                float _3310 = dot(vec3(_592, _595, _598), vec3((-0.0) - _2717, (-0.0) - _2718, (-0.0) - _2719));
                                float _4380 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3314 = dot(vec3(_592, _595, _598), vec3(_3306 * _3300, _3306 * _3301, _3306 * _3302));
                                float _4391 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3321 = ((_3317 * _3317) * (_3299 + (-1.0))) + 1.0;
                                float _3322 = _3259 * _3298;
                                float _3323 = _3322 * _3322;
                                float _3329 = ((1.0 - _3323) * dot(vec3(_592, _595, _598), vec3(_3246, _3247, _3248))) + _3323;
                                float _4402 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3331 = 1.0 - _3298;
                                float _3341 = (0.5 / (((_3330 * ((_3313 * _3331) + _3298)) + 9.9999999392252902907785028219223e-09) + (((_3330 * _3331) + _3298) * _3313))) * _3330;
                                float _4413 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3351 = (_3276 * _3253) * (((_3299 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3321 * _3321) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3277 * _3121.y;
                                frontier_phi_91_pred_1 = _3277 * _3121.x;
                                frontier_phi_91_pred_2 = _3351 * _3133.z;
                                frontier_phi_91_pred_3 = _3351 * _3133.y;
                                frontier_phi_91_pred_4 = _3351 * _3133.x;
                                frontier_phi_91_pred_5 = _3277 * _3121.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3359 = frontier_phi_91_pred;
                            _3358 = frontier_phi_91_pred_1;
                            _3357 = frontier_phi_91_pred_2;
                            _3356 = frontier_phi_91_pred_3;
                            _3355 = frontier_phi_91_pred_4;
                            _3360 = frontier_phi_91_pred_5;
                            _3063 = _3358 + _3076;
                            _3064 = _3359 + _3077;
                            _3065 = _3360 + _3078;
                            _3060 = _3355 + _3073;
                            _3061 = _3356 + _3074;
                            _3062 = _3357 + _3075;
                            if (_3080 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3080;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3064;
                        frontier_phi_85_pred_1 = _3063;
                        frontier_phi_85_pred_2 = _3062;
                        frontier_phi_85_pred_3 = _3061;
                        frontier_phi_85_pred_4 = _3060;
                        frontier_phi_85_pred_5 = _3065;
                    }
                    _2700 = frontier_phi_85_pred;
                    _2698 = frontier_phi_85_pred_1;
                    _2696 = frontier_phi_85_pred_2;
                    _2694 = frontier_phi_85_pred_3;
                    _2692 = frontier_phi_85_pred_4;
                    _2702 = frontier_phi_85_pred_5;
                    uint _2858 = _2857 + 1u;
                    if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2851 = _2692;
                        _2852 = _2694;
                        _2853 = _2696;
                        _2854 = _2698;
                        _2855 = _2700;
                        _2856 = _2702;
                        _2857 = _2858;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2702;
                frontier_phi_66_67_ladder_1 = _2698;
                frontier_phi_66_67_ladder_2 = _2700;
                frontier_phi_66_67_ladder_3 = _2694;
                frontier_phi_66_67_ladder_4 = _2692;
                frontier_phi_66_67_ladder_5 = _2696;
            }
            else
            {
                frontier_phi_66_67_ladder = _2581;
                frontier_phi_66_67_ladder_1 = _2577;
                frontier_phi_66_67_ladder_2 = _2579;
                frontier_phi_66_67_ladder_3 = _2573;
                frontier_phi_66_67_ladder_4 = _2571;
                frontier_phi_66_67_ladder_5 = _2575;
            }
            _2691 = frontier_phi_66_67_ladder_4;
            _2693 = frontier_phi_66_67_ladder_3;
            _2695 = frontier_phi_66_67_ladder_5;
            _2697 = frontier_phi_66_67_ladder_1;
            _2699 = frontier_phi_66_67_ladder_2;
            _2701 = frontier_phi_66_67_ladder;
        }
        float _2706 = isnan(1.0) ? _697 : (isnan(_697) ? 1.0 : min(_697, 1.0));
        _2465 = (_2706 * _2697) + _1902;
        _2467 = (_2706 * _2699) + _1904;
        _2469 = (_2706 * _2701) + _1906;
        _2471 = ((_2691 * _682) * _2706) + _2247;
        _2473 = ((_2693 * _684) * _2706) + _2249;
        _2475 = ((_2695 * _685) * _2706) + _2251;
    }
    else
    {
        _2465 = _1902;
        _2467 = _1904;
        _2469 = _1906;
        _2471 = _2247;
        _2473 = _2249;
        _2475 = _2251;
    }
    vec4 _2481 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4429 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4440 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4451 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _2505 = (((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2465 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _697))) + ((_2471 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1538)) * cbPerFrame._m0[3u].x)) + (_2481.x * cbMtdParam._m0[3u].x);
    float _2507 = ((_2481.y * cbMtdParam._m0[3u].x) + ((_2473 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1538)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2467 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _697)));
    float _2509 = ((_2481.z * cbMtdParam._m0[3u].x) + ((_2475 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1538)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2469 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _697)));
    float _2510 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2511 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2512 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    uint _2513 = _624 + 6u;
    float _2521 = _568 / cbSceneParam._m0[86u].x;
    float _2522 = _569 / cbSceneParam._m0[86u].y;
    vec4 _2536 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2521, _2522, (log2((isnan(cbSceneParam._m0[77u].w) ? _486 : (isnan(_486) ? cbSceneParam._m0[77u].w : min(_486, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2538 = _2536.x;
    float _2539 = _2536.y;
    float _2540 = _2536.z;
    float _2541 = _2536.w;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_486 > cbSceneParam._m0[78u].w)
    {
        float _2596 = isnan(_486) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _486 : min(cbSceneParam._m0[80u].w, _486));
        float _2597 = _2596 / _486;
        float _2608 = _2597 * _538;
        float _2609 = _539 * _2597;
        float _2610 = (-0.0) - _2609;
        float _2611 = _2597 * _540;
        float _2613 = (cbSceneParam._m0[77u].w * _2610) / _2596;
        float _2614 = _2613 + cbSceneParam._m0[79u].w;
        float _2615 = cbSceneParam._m0[79u].w - _2609;
        float _2621 = sqrt(((_2608 * _2608) + (_2609 * _2609)) + (_2611 * _2611));
        float _2624 = (1.0 - (cbSceneParam._m0[77u].w / _2596)) * _2621;
        float _2629 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2631 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2808;
        if (abs((_2610 - _2613) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2808 = ((((_2614 > 0.0) ? exp2(_2629 * _2614) : (2.0 - exp2(_2631 * _2614))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2624;
        }
        else
        {
            float _2752 = 1.0 / cbSceneParam._m0[80u].x;
            float _2753 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : max(_2614, _2615));
            float _2754 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : min(_2614, _2615));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            _2808 = ((abs(_2621 / _2610) * cbSceneParam._m0[80u].y) * ((((_2763 - _2764) * 2.0) - ((exp2(_2629 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0)))) - exp2(_2629 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))))) * _2752)) - ((exp2(_2631 * _2763) - exp2(_2631 * _2764)) * _2752))) + (_2624 * cbSceneParam._m0[80u].z);
        }
        vec4 _2810 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2521, _2522, 1.0), 0.0);
        float _2819 = exp2((_2808 * (-1.44269502162933349609375)) * (1.0 - _2810.w));
        float _2820 = log2(_2819);
        float _2836 = log2(_2541);
        _2633 = (exp2(_2836 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].x)) * _2810.x) / cbSceneParam._m0[78u].x)) + _2538;
        _2635 = (exp2(_2836 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].y)) * _2810.y) / cbSceneParam._m0[78u].y)) + _2539;
        _2637 = (exp2(_2836 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].z)) * _2810.z) / cbSceneParam._m0[78u].z)) + _2540;
        _2639 = _2819 * _2541;
    }
    else
    {
        _2633 = _2538;
        _2635 = _2539;
        _2637 = _2540;
        _2639 = _2541;
    }
    bool _2846;
    vec4 _2649;
    vec4 _2671;
    float _2673;
    float _2677;
    float _2678;
    float _2679;
    float _2680;
    bool _2690;
    for (;;)
    {
        _2649 = cbMatDynParam._m0[0u];
        float _2651 = roundEven(_2649.y);
        bool _2652 = _2651 == 3.0;
        float _2653 = log2(_2639);
        float _2660 = exp2(_2653 * cbSceneParam._m0[78u].x) * _2510;
        float _2661 = exp2(_2653 * cbSceneParam._m0[78u].y) * _2511;
        float _2662 = exp2(_2653 * cbSceneParam._m0[78u].z) * _2512;
        float _2669 = _554 + (-0.5);
        _2671 = cbMtdParam._m0[1u];
        _2673 = _2671.y * _2669;
        float _2676 = (_2651 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2677 = _2676 * (_2652 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2633)));
        _2678 = _2676 * (_2652 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2635)));
        _2679 = _2676 * (_2652 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2637)));
        _2680 = _2669 * 0.999000012874603271484375;
        _2690 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2690)
        {
            if ((cbInstanceData._m0[_624 + 7u].x + _2680) < 0.5)
            {
                _2846 = true;
                break;
            }
        }
        uint _2787 = _626 + uint(_2649.w);
        if ((cbInstanceData._m0[_2787].w < 1.0) && ((cbInstanceData._m0[_2787].w + _2680) < 0.5))
        {
            _2846 = true;
            break;
        }
        if ((_2673 + 1.0) < _2671.x)
        {
            _2846 = true;
            break;
        }
        _2846 = false;
        break;
    }
    float _3051;
    if (_2846)
    {
        discard_state = true;
        _3051 = 0.0;
    }
    else
    {
        _3051 = cbInstanceData._m0[_2513].w;
    }
    SV_Target.x = _2677;
    SV_Target.y = _2678;
    SV_Target.z = _2679;
    SV_Target.w = _3051;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2513].w;
    discard_exit();
}


