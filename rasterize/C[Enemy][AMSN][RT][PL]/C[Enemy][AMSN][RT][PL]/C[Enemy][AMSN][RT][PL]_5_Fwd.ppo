#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1041;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _252 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _254 = log2(0.0);
    bool _257 = exp2(_254 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _258;
    float _260;
    float _262;
    if (_257)
    {
        _258 = cbMtdParam._m0[18u].x;
        _260 = cbMtdParam._m0[18u].y;
        _262 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _258 = cbMtdParam._m0[17u].x;
        _260 = cbMtdParam._m0[17u].y;
        _262 = cbMtdParam._m0[17u].z;
    }
    float _267;
    if (_257)
    {
        _267 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _267 = cbMtdParam._m0[19u].z;
    }
    float _273;
    float _275;
    if (_257)
    {
        _273 = cbMtdParam._m0[26u].x;
        _275 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _273 = cbMtdParam._m0[22u].x;
        _275 = cbMtdParam._m0[22u].y;
    }
    float _277 = _273 * TEXCOORD.x;
    float _278 = _275 * TEXCOORD.y;
    float _290 = floor(_267);
    vec4 _293 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _277) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _278) + cbTextureTilingScale._m0[6u].w, _290));
    vec4 _316 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _252) + cbTextureTilingScale._m0[0u].w));
    float _325 = (((_258 * cbMtdParam._m0[19u].w) * _293.x) * cbMtdParam._m0[9u].x) * _316.x;
    float _329 = (((_260 * cbMtdParam._m0[19u].w) * _293.y) * cbMtdParam._m0[9u].y) * _316.y;
    float _333 = (((_262 * cbMtdParam._m0[19u].w) * _293.z) * cbMtdParam._m0[9u].z) * _316.z;
    vec4 _345 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _252) + cbTextureTilingScale._m0[1u].w));
    float _349 = _345.z;
    vec4 _362 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _277) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _278) + cbTextureTilingScale._m0[8u].w, _290));
    float _179[2];
    float _180[2];
    _179[0u] = cbMtdParam._m0[25u].x;
    _180[0u] = cbMtdParam._m0[25u].y;
    _179[1u] = cbMtdParam._m0[25u].z;
    _180[1u] = cbMtdParam._m0[25u].w;
    float _376 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _379 = uint(int(isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0))));
    float _384 = _180[_379] + _362.x;
    vec4 _403 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _277) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _278) + cbTextureTilingScale._m0[7u].w, _290));
    float _410 = (_403.x * 2.0) + (-1.0);
    float _411 = (_403.y * 2.0) + (-1.0);
    float _412 = dot(vec2(_410, _411), vec2(_410, _411));
    float _3407 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _417 = sqrt(1.0 - (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))));
    float _426 = (cbMtdParam._m0[20u].x * (((_349 * 2.0) * (_403.z + _179[_379])) - _349)) + _349;
    float _430 = (cbMtdParam._m0[20u].y * ((_345.x * 2.0) + (-1.0))) + _410;
    float _431 = (cbMtdParam._m0[20u].y * ((_345.y * 2.0) + (-1.0))) + _411;
    float _434 = fma(_417, _230, fma(_431, _222 * TANGENT.x, (_208 * _200) * _430));
    float _437 = fma(_417, _231, fma(_431, _222 * TANGENT.y, (_208 * _201) * _430));
    float _440 = fma(_417, _232, fma(_431, _222 * TANGENT.z, (_208 * _202) * _430));
    float _444 = inversesqrt(dot(vec3(_434, _437, _440), vec3(_434, _437, _440)));
    float _445 = _444 * _434;
    float _446 = _444 * _437;
    float _447 = _444 * _440;
    float _3418 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _448 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3440 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3451 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3462 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _452 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _520 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _510);
    float _521 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _510);
    float _522 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _510);
    float _526 = inversesqrt(dot(vec3(_520, _521, _522), vec3(_520, _521, _522)));
    float _527 = _520 * _526;
    float _528 = _521 * _526;
    float _529 = _522 * _526;
    float _535 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _536 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _538 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _540 = _538.w;
    float _559 = fma(_447, cbSceneParam._m0[5u].z, fma(_446, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _445));
    float _562 = fma(_447, cbSceneParam._m0[6u].z, fma(_446, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _445));
    float _565 = fma(_447, cbSceneParam._m0[7u].z, fma(_446, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _445));
    vec4 _567 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _578 = (((_567.y - _448) + (_567.w * _448)) * cbMtdParam._m0[3u].x) + _448;
    uint _591 = uint(roundEven(NORMAL.w)) * 13u;
    uint _594 = (_591 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _600 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_594].x;
    float _601 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) * cbInstanceData._m0[_594].y;
    float _602 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_594].z;
    float _3473 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    vec4 _606 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _611 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _622 = (((_611.x - _452) + (_611.w * _452)) * cbMtdParam._m0[3u].x) + _452;
    float _635 = (cbMtdParam._m0[3u].x * (((_603 * _540) - _603) + _606.x)) + _603;
    float _636 = (cbMtdParam._m0[3u].x * (((_604 * _540) - _604) + _606.y)) + _604;
    float _637 = (cbMtdParam._m0[3u].x * (((_605 * _540) - _605) + _606.z)) + _605;
    float _638 = 1.0 - _622;
    float _639 = _638 * _635;
    float _640 = _638 * _636;
    float _641 = _638 * _637;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _622;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _622;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _622;
    float _649 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    float _652 = _648 + 0.039999999105930328369140625;
    vec4 _661 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _535, cbSceneParam._m0[86u].y * _536));
    float _664 = _661.x * TEXCOORD_4;
    float _665 = dot(vec3(_445, _446, _447), vec3(_527, _528, _529));
    float _668 = _665 * 2.0;
    float _672 = (_668 * _445) - _527;
    float _673 = (_668 * _446) - _528;
    float _674 = (_668 * _447) - _529;
    float _678 = abs(dot(vec3(_527, _528, _529), vec3(_445, _446, _447)));
    float _3506 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _680 = sqrt(_578);
    float _693 = exp2((_680 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_680 * 3.0));
    float _699 = (1.0 - _693) * ((_680 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _700 = _693 * _680;
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _765 = fma(_736, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728));
        float _769 = fma(_736, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728));
        float _773 = fma(_736, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728));
        float _798 = _728 + _445;
        float _799 = _732 + _446;
        float _800 = _736 + _447;
        float _810 = fma(_800, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798)) - _765;
        float _811 = fma(_800, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798)) - _769;
        float _812 = fma(_800, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798)) - _773;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_765 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_769 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[34u].z) + ((((((_773 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _868 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_834.x + (-0.5));
        float _870 = _868 * (_834.y + (-0.5));
        float _871 = _868 * (_834.z + (-0.5));
        float _878 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_841.x + (-0.5));
        float _880 = _878 * (_841.y + (-0.5));
        float _881 = _878 * (_841.z + (-0.5));
        float _888 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_848.x + (-0.5));
        float _890 = _888 * (_848.y + (-0.5));
        float _891 = _888 * (_848.z + (-0.5));
        float _898 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_855.x + (-0.5));
        float _900 = _898 * (_855.y + (-0.5));
        float _901 = _898 * (_855.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _922 = (dot(vec3(_445, _446, _447), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _932 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3554 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_934 + 1.0))) + _939) * _902;
        float _949 = _870 * 0.5;
        float _950 = _880 * 0.5;
        float _951 = _890 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_445, _446, _447), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3587 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_976 + 1.0))) + _981) * _903;
        float _991 = _871 * 0.5;
        float _992 = _881 * 0.5;
        float _993 = _891 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_445, _446, _447), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3620 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1018 + 1.0))) + _1023) * _904;
        _1040 = _871;
        _1042 = _870;
        _1043 = _869;
        _1044 = _881;
        _1045 = _880;
        _1046 = _879;
        _1047 = _891;
        _1048 = _890;
        _1049 = _889;
        _1050 = _904;
        _1051 = _903;
        _1052 = _902;
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _1041;
        _1042 = _1041;
        _1043 = _1041;
        _1044 = _1041;
        _1045 = _1041;
        _1046 = _1041;
        _1047 = _1041;
        _1048 = _1041;
        _1049 = _1041;
        _1050 = _1041;
        _1051 = _1041;
        _1052 = _1041;
        _1053 = 0.0;
        _1054 = 0.0;
        _1055 = 0.0;
    }
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1081 = fma(_736, cbModelParam._m0[30u].z, fma(_732, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _728));
        float _1085 = fma(_736, cbModelParam._m0[31u].z, fma(_732, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _728));
        float _1089 = fma(_736, cbModelParam._m0[32u].z, fma(_732, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _728));
        float _1112 = _728 + _445;
        float _1113 = _732 + _446;
        float _1114 = _736 + _447;
        float _1124 = fma(_1114, cbModelParam._m0[30u].z, fma(_1113, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1112)) - _1081;
        float _1125 = fma(_1114, cbModelParam._m0[31u].z, fma(_1113, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1112)) - _1085;
        float _1126 = fma(_1114, cbModelParam._m0[32u].z, fma(_1113, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1112)) - _1089;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1081 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1085 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[35u].z) + ((((((_1089 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1180 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1147.x + (-0.5));
        float _1182 = _1180 * (_1147.y + (-0.5));
        float _1183 = _1180 * (_1147.z + (-0.5));
        float _1190 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1154.x + (-0.5));
        float _1192 = _1190 * (_1154.y + (-0.5));
        float _1193 = _1190 * (_1154.z + (-0.5));
        float _1200 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1161.x + (-0.5));
        float _1202 = _1200 * (_1161.y + (-0.5));
        float _1203 = _1200 * (_1161.z + (-0.5));
        float _1210 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1168.x + (-0.5));
        float _1212 = _1210 * (_1168.y + (-0.5));
        float _1213 = _1210 * (_1168.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_445, _446, _447), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3683 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1244 + 1.0))) + _1249) * _1214;
        float _1259 = _1182 * 0.5;
        float _1260 = _1192 * 0.5;
        float _1261 = _1202 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_445, _446, _447), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3716 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1286 + 1.0))) + _1291) * _1215;
        float _1301 = _1183 * 0.5;
        float _1302 = _1193 * 0.5;
        float _1303 = _1203 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_445, _446, _447), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3749 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1328 + 1.0))) + _1333) * _1216;
        _1350 = _1183;
        _1351 = _1182;
        _1352 = _1181;
        _1353 = _1193;
        _1354 = _1192;
        _1355 = _1191;
        _1356 = _1203;
        _1357 = _1202;
        _1358 = _1201;
        _1359 = _1216;
        _1360 = _1215;
        _1361 = _1214;
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1041;
        _1351 = _1041;
        _1352 = _1041;
        _1353 = _1041;
        _1354 = _1041;
        _1355 = _1041;
        _1356 = _1041;
        _1357 = _1041;
        _1358 = _1041;
        _1359 = _1041;
        _1360 = _1041;
        _1361 = _1041;
        _1362 = 0.0;
        _1363 = 0.0;
        _1364 = 0.0;
    }
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1053)) + _1053;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1054)) + _1054;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1055)) + _1055;
    float _1397 = fma(_1376, cbSceneParam._m0[89u].z, fma(_1375, cbSceneParam._m0[89u].y, _1374 * cbSceneParam._m0[89u].x));
    float _1400 = fma(_1376, cbSceneParam._m0[90u].z, fma(_1375, cbSceneParam._m0[90u].y, _1374 * cbSceneParam._m0[90u].x));
    float _1403 = fma(_1376, cbSceneParam._m0[91u].z, fma(_1375, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1374));
    float _1418 = _672 * 0.5;
    float _1419 = _673 * 0.5;
    float _1420 = _674 * 0.5;
    float _1421 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1424 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1427 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1461;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1434 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1040, _1044, _1047, _1050));
        float _1438 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1442 = dot(vec4(_1418, _1419, _1420, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1449 = dot(vec4(cbModelParam._m0[39u]), vec4(_1418, _1419, _1420, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1449) ? 0.0 : (isnan(0.0) ? _1449 : max(0.0, _1449))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1472;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1463 = dot(vec4(cbModelParam._m0[40u]), vec4(_1418, _1419, _1420, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1476 = (_1472 * cbModelParam._m0[1u].x) + (_1461 * (1.0 - cbModelParam._m0[1u].x));
    float _1486 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _578);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1486 : min(cbModelParam._m0[25u].z, _1486));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1536 = fma(_736, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728)) + cbModelParam._m0[13u].w;
        float _1540 = fma(_736, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728)) + cbModelParam._m0[14u].w;
        float _1544 = fma(_736, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728)) + cbModelParam._m0[15u].w;
        float _1547 = fma(_674, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _672));
        float _1550 = fma(_674, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _672));
        float _1553 = fma(_674, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _672));
        float _1581;
        if (_1547 > 0.0)
        {
            _1581 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1581 = frontier_phi_22_20_ladder;
        }
        float _1785;
        if (_1550 > 0.0)
        {
            _1785 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1785 = frontier_phi_31_27_ladder;
        }
        float _2039;
        if (_1553 > 0.0)
        {
            _2039 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2039 = frontier_phi_43_38_ladder;
        }
        float _2041 = isnan(_1785) ? _1581 : (isnan(_1581) ? _1785 : min(_1581, _1785));
        float _2042 = isnan(_2039) ? _2041 : (isnan(_2041) ? _2039 : min(_2041, _2039));
        float _2046 = (_2042 * _1547) + _1536;
        float _2047 = (_2042 * _1550) + _1540;
        float _2048 = (_2042 * _1553) + _1544;
        float _2049 = _2042 * 9.9999997473787516355514526367188e-05;
        float _2051 = (-1.0) - _2049;
        float _2053 = _2049 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2048 > _2053) || ((_2048 < _2051) || ((_2047 > _2053) || ((_2047 < _2051) || ((_2046 < _2051) || (_2046 > _2053))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2176 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2048, cbModelParam._m0[9u].z, fma(_2047, cbModelParam._m0[9u].y, _2046 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2048, cbModelParam._m0[10u].z, fma(_2047, cbModelParam._m0[10u].y, _2046 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2048, cbModelParam._m0[11u].z, fma(_2047, cbModelParam._m0[11u].y, _2046 * cbModelParam._m0[11u].x))), _1487);
            frontier_phi_21_43_ladder = _2176.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2176.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2176.x * cbModelParam._m0[1u].y;
        }
        _1569 = frontier_phi_21_43_ladder_2;
        _1571 = frontier_phi_21_43_ladder_1;
        _1573 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_672, _673, _674), _1487);
        _1569 = _1557.x * cbModelParam._m0[1u].y;
        _1571 = _1557.y * cbModelParam._m0[1u].y;
        _1573 = _1557.z * cbModelParam._m0[1u].y;
    }
    float _1577 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _578);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1577 : min(cbModelParam._m0[25u].w, _1577));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1631 = fma(_736, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728)) + cbModelParam._m0[21u].w;
        float _1635 = fma(_736, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728)) + cbModelParam._m0[22u].w;
        float _1639 = fma(_736, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728)) + cbModelParam._m0[23u].w;
        float _1642 = fma(_674, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _672));
        float _1645 = fma(_674, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _672));
        float _1648 = fma(_674, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _672));
        float _1790;
        if (_1642 > 0.0)
        {
            _1790 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1790 = frontier_phi_33_29_ladder;
        }
        float _2066;
        if (_1645 > 0.0)
        {
            _2066 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2066 = frontier_phi_45_40_ladder;
        }
        float _2279;
        if (_1648 > 0.0)
        {
            _2279 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2279 = frontier_phi_54_51_ladder;
        }
        float _2281 = isnan(_2066) ? _1790 : (isnan(_1790) ? _2066 : min(_1790, _2066));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1642) + _1631;
        float _2287 = (_2282 * _1645) + _1635;
        float _2288 = (_2282 * _1648) + _1639;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2289;
        float _2292 = _2289 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2288 > _2292) || ((_2288 < _2290) || ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 < _2290) || (_2286 > _2292))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2288, cbModelParam._m0[17u].z, fma(_2287, cbModelParam._m0[17u].y, _2286 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2288, cbModelParam._m0[18u].z, fma(_2287, cbModelParam._m0[18u].y, _2286 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2288, cbModelParam._m0[19u].z, fma(_2287, cbModelParam._m0[19u].y, _2286 * cbModelParam._m0[19u].x))), _1578);
            frontier_phi_30_54_ladder = _2504.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2504.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2504.x * cbModelParam._m0[1u].z;
        }
        _1667 = frontier_phi_30_54_ladder_2;
        _1669 = frontier_phi_30_54_ladder;
        _1671 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_672, _673, _674), _1578);
        _1667 = _1651.x * cbModelParam._m0[1u].z;
        _1669 = _1651.y * cbModelParam._m0[1u].z;
        _1671 = _1651.z * cbModelParam._m0[1u].z;
    }
    float _1684 = (((_699 * _649) + _700) * _664) * ((cbModelParam._m0[1u].w * (_1667 - _1569)) + _1569);
    float _1686 = (((_699 * _651) + _700) * _664) * ((cbModelParam._m0[1u].w * (_1669 - _1571)) + _1571);
    float _1688 = (((_699 * _652) + _700) * _664) * ((cbModelParam._m0[1u].w * (_1671 - _1573)) + _1573);
    float _1691 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1684 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1684 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, _1684 * cbSceneParam._m0[91u].x));
    uvec4 _1707 = floatBitsToUint(cbInstanceData._m0[_591 + 5u]);
    uint _1709 = _1707.x * 14u;
    uint _1710 = _1709 + 13u;
    float _1717 = _664 + (-1.0);
    float _1722 = (cbLight._m0[_1710].x * _1717) + 1.0;
    float _1723 = (cbLight._m0[_1710].y * _1717) + 1.0;
    float _1724 = (cbLight._m0[_1710].z * _1717) + 1.0;
    float _1725 = (cbLight._m0[_1710].w * _1717) + 1.0;
    uint _1726 = _1709 + 5u;
    float _1732 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1736 = _1709 + 4u;
    float _1743 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1747 = _1709 | 1u;
    float _1758 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_445, _446, _447));
    float _1761 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_445, _446, _447));
    float _3885 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _3896 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1766 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.3183098733425140380859375;
    float _1768 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.3183098733425140380859375;
    float _1775 = ((cbLight._m0[_1726].x * _1732) * _1768) + ((cbLight._m0[_1736].x * _1743) * _1766);
    float _1776 = ((_1732 * cbLight._m0[_1726].y) * _1768) + ((_1743 * cbLight._m0[_1736].y) * _1766);
    float _1777 = ((_1732 * cbLight._m0[_1726].z) * _1768) + ((_1743 * cbLight._m0[_1736].z) * _1766);
    uvec4 _1782 = floatBitsToUint(cbLight._m0[_1709 + 12u]);
    bool _1784 = _1782.x == 0u;
    float _1795;
    float _1797;
    float _1799;
    if (_1784)
    {
        _1795 = _1775;
        _1797 = _1776;
        _1799 = _1777;
    }
    else
    {
        uint _1803 = _1709 + 6u;
        float _1819 = (dot(vec3(cbLight._m0[_1709 + 2u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _1820 = _1819 * _1819;
        float _3907 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1822 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _1795 = (((cbLight._m0[_1803].x * 0.3183098733425140380859375) * _1821) * _1822) + _1775;
        _1797 = (((cbLight._m0[_1803].y * 0.3183098733425140380859375) * _1821) * _1822) + _1776;
        _1799 = (((cbLight._m0[_1803].z * 0.3183098733425140380859375) * _1821) * _1822) + _1777;
    }
    bool _1802 = _1782.y == 0u;
    float _1840;
    float _1842;
    float _1844;
    if (_1802)
    {
        _1840 = _1795;
        _1842 = _1797;
        _1844 = _1799;
    }
    else
    {
        uint _2010 = _1709 + 7u;
        float _2026 = (dot(vec3(cbLight._m0[_1709 + 3u].xyz), vec3(_445, _446, _447)) * 0.5) + 0.5;
        float _2027 = _2026 * _2026;
        float _3923 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _2029 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _1840 = (((cbLight._m0[_2010].x * 0.3183098733425140380859375) * _2028) * _2029) + _1795;
        _1842 = (((cbLight._m0[_2010].y * 0.3183098733425140380859375) * _2028) * _2029) + _1797;
        _1844 = (((cbLight._m0[_2010].z * 0.3183098733425140380859375) * _2028) * _2029) + _1799;
    }
    uint _1847 = _1709 + 8u;
    float _1860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1709].w)) * _578) * 0.949999988079071044921875);
    float _1861 = _1860 * _1860;
    float _1862 = cbLight._m0[_1709].x + _527;
    float _1863 = cbLight._m0[_1709].y + _528;
    float _1864 = cbLight._m0[_1709].z + _529;
    float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
    float _1869 = _1868 * _1862;
    float _1870 = _1868 * _1863;
    float _1871 = _1868 * _1864;
    float _1872 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1709].xyz));
    float _3939 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _1876 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1877 = dot(vec3(_445, _446, _447), vec3(_1869, _1870, _1871));
    float _3961 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1881 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1869, _1870, _1871));
    float _3972 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1885 = _1861 * _1861;
    float _1889 = ((_1880 * _1880) * (_1885 + (-1.0))) + 1.0;
    float _1897 = exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0);
    float _1898 = 0.959999978542327880859375 - _646;
    float _1900 = 0.959999978542327880859375 - _647;
    float _1901 = 0.959999978542327880859375 - _648;
    float _1908 = 1.0 - _1861;
    float _1919 = (0.5 / (((_1876 * ((_1875 * _1908) + _1861)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _1908) + _1861) * _1875))) * _1875;
    float _3983 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1885 / ((_1889 * _1889) * 3.141590118408203125));
    uint _1932 = _1709 + 9u;
    float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _578) * 0.949999988079071044921875);
    float _1944 = _1943 * _1943;
    float _1945 = cbLight._m0[_1747].x + _527;
    float _1946 = cbLight._m0[_1747].y + _528;
    float _1947 = cbLight._m0[_1747].z + _529;
    float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
    float _1952 = _1951 * _1945;
    float _1953 = _1951 * _1946;
    float _1954 = _1951 * _1947;
    float _1955 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_1747].xyz));
    float _3994 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1959 = dot(vec3(_445, _446, _447), vec3(_1952, _1953, _1954));
    float _4005 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1952, _1953, _1954));
    float _4016 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1944 * _1944;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1978 = exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0);
    float _1985 = 1.0 - _1944;
    float _1995 = (0.5 / (((_1876 * ((_1958 * _1985) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _1985) + _1944) * _1958))) * _1958;
    float _4027 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1997 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    float _2007 = (((((_1978 * _1898) + _649) * cbLight._m0[_1932].x) * _1997) * _1732) + (((((_1897 * _1898) + _649) * cbLight._m0[_1847].x) * _1921) * _1743);
    float _2008 = (((((_1978 * _1900) + _651) * cbLight._m0[_1932].y) * _1997) * _1732) + (((((_1897 * _1900) + _651) * cbLight._m0[_1847].y) * _1921) * _1743);
    float _2009 = (((((_1978 * _1901) + _652) * cbLight._m0[_1932].z) * _1997) * _1732) + (((((_1897 * _1901) + _652) * cbLight._m0[_1847].z) * _1921) * _1743);
    float _2071;
    float _2073;
    float _2075;
    if (_1784)
    {
        _2071 = _2007;
        _2073 = _2008;
        _2075 = _2009;
    }
    else
    {
        uint _2077 = _1709 + 2u;
        uint _2081 = _1709 + 10u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _578) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _527;
        float _2098 = cbLight._m0[_2077].y + _528;
        float _2099 = cbLight._m0[_2077].z + _529;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_2077].xyz));
        float _4038 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2111 = dot(vec3(_445, _446, _447), vec3(_2104, _2105, _2106));
        float _4049 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _4060 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0);
        float _2137 = 1.0 - _2096;
        float _2147 = (0.5 / (((_1876 * ((_2110 * _2137) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _2137) + _2096) * _2110))) * _2110;
        float _4071 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2149 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2150 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _2071 = (((((_2130 * _1898) + _649) * cbLight._m0[_2081].x) * _2149) * _2150) + _2007;
        _2073 = (((((_2130 * _1900) + _651) * cbLight._m0[_2081].y) * _2149) * _2150) + _2008;
        _2075 = (((((_2130 * _1901) + _652) * cbLight._m0[_2081].z) * _2149) * _2150) + _2009;
    }
    float _2185;
    float _2187;
    float _2189;
    if (_1802)
    {
        _2185 = _2071;
        _2187 = _2073;
        _2189 = _2075;
    }
    else
    {
        uint _2196 = _1709 + 3u;
        uint _2200 = _1709 + 11u;
        float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _578) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2196].x + _527;
        float _2217 = cbLight._m0[_2196].y + _528;
        float _2218 = cbLight._m0[_2196].z + _529;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_445, _446, _447), vec3(cbLight._m0[_2196].xyz));
        float _4087 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2230 = dot(vec3(_445, _446, _447), vec3(_2223, _2224, _2225));
        float _4098 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
        float _4109 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
        float _2256 = 1.0 - _2215;
        float _2266 = (0.5 / (((_1876 * ((_2229 * _2256) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _2256) + _2215) * _2229))) * _2229;
        float _4120 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2268 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2269 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _2185 = (((((_2249 * _1898) + _649) * cbLight._m0[_2200].x) * _2268) * _2269) + _2071;
        _2187 = (((((_2249 * _1900) + _651) * cbLight._m0[_2200].y) * _2268) * _2269) + _2073;
        _2189 = (((((_2249 * _1901) + _652) * cbLight._m0[_2200].z) * _2268) * _2269) + _2075;
    }
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    if (_1707.y == 0u)
    {
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2344;
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2344;
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2344;
        uvec4 _2359 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2360 = _2359.x;
        uint _2371 = uint((float(_2359.y) * floor(float(uint(cbSceneParam._m0[85u].y * _536) / _2360))) + floor(float(uint(cbSceneParam._m0[85u].x * _535) / _2360)));
        float _2381 = (log2(_2347 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2382 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        uint _2385 = uint(isnan(14.0) ? _2382 : (isnan(_2382) ? 14.0 : min(_2382, 14.0)));
        uvec4 _2390 = texelFetch(g_lightClusterGridBuffer, int(((_2385 << 2u) + (_2371 << 6u)) >> 2u));
        uint _2391 = _2390.x;
        uint _2392 = _2359.z;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        if (((((1u << ((_2392 >> 4u) & 15u)) + 4294967295u) & _2391) == 0u) || ((_2392 & 240u) == 0u))
        {
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
        }
        else
        {
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            uint _2659 = 0u;
            uint _2668;
            bool _2669;
            for (;;)
            {
                _2668 = texelFetch(g_lightClassification, int((((_2385 << 5u) + (_2371 << 9u)) + (_2659 << 2u)) >> 2u)).x;
                _2669 = _2668 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2669)
                {
                    frontier_phi_69_pred = _2658;
                    frontier_phi_69_pred_1 = _2657;
                    frontier_phi_69_pred_2 = _2656;
                    frontier_phi_69_pred_3 = _2654;
                    frontier_phi_69_pred_4 = _2653;
                    frontier_phi_69_pred_5 = _2655;
                }
                else
                {
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    uint _2783;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2668;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    for (;;)
                    {
                        uint _2787 = uint(findLSB(_2783)) + (_2659 << 5u);
                        uint _2784 = (_2783 + 4294967295u) & _2783;
                        uint _2789 = _2787 * 48u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        uint _2809 = (_2787 * 48u) + 4u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2828 = (_2787 * 48u) + 8u;
                        vec3 _2839 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x));
                        float _2843 = _2803.x - _2345;
                        float _2844 = _2803.y - _2346;
                        float _2845 = _2803.z - _2347;
                        float _2846 = dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845));
                        float _2849 = inversesqrt(_2846);
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2853 = dot(vec3(_559, _562, _565), vec3(_2850, _2851, _2852));
                        float _2858 = 1.0 - (_2846 * _2803.w);
                        float _4146 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2859 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2860 = sqrt(_2846) * _2822.w;
                        float _2863 = 1.39999997615814208984375 / (_2860 + 1.39999997615814208984375);
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2853) + _2864;
                        float _2870 = _2860 * _2860;
                        float _2874 = ((isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))) * _2859) / ((_2870 * 0.699999988079071044921875) + 1.0);
                        float _2878 = (-0.0) - _2345;
                        float _2879 = (-0.0) - _2346;
                        float _2880 = (-0.0) - _2347;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2885 = _2884 * _2878;
                        float _2886 = _2884 * _2879;
                        float _2887 = _2884 * _2880;
                        float _2895 = exp2(log2(1.0 / ((_2870 * 3.5) + 5.0)) * 0.25);
                        float _2896 = 1.0 - _680;
                        float _2903 = sqrt(1.0 - ((1.0 - (_2896 * _2896)) * (1.0 - (_2895 * _2895))));
                        float _2904 = _2903 * _2903;
                        float _2905 = _2904 * _2904;
                        float _2906 = _2885 + _2850;
                        float _2907 = _2886 + _2851;
                        float _2908 = _2887 + _2852;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2916 = dot(vec3(_559, _562, _565), vec3(_2885, _2886, _2887));
                        float _4162 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2920 = dot(vec3(_559, _562, _565), vec3(_2912 * _2906, _2912 * _2907, _2912 * _2908));
                        float _4173 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2927 = ((_2923 * _2923) * (_2905 + (-1.0))) + 1.0;
                        float _2928 = _2863 * _2904;
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2853) + _2929;
                        float _4184 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2934 = 1.0 - _2904;
                        float _2944 = (0.5 / (((_2933 * ((_2919 * _2934) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2933 * _2934) + _2904) * _2919))) * _2933;
                        float _4195 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2955 = (((_2905 * 3.1415927410125732421875) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) / ((_2927 * _2927) * ((_2870 * 2.1991131305694580078125) + 3.141590118408203125))) * _2859;
                        _2712 = (_2874 * _2822.x) + _2780;
                        _2713 = (_2874 * _2822.y) + _2781;
                        _2714 = (_2874 * _2822.z) + _2782;
                        _2709 = (_2955 * _2839.x) + _2777;
                        _2710 = (_2955 * _2839.y) + _2778;
                        _2711 = (_2955 * _2839.z) + _2779;
                        if (_2784 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2784;
                        }
                    }
                    frontier_phi_69_pred = _2714;
                    frontier_phi_69_pred_1 = _2713;
                    frontier_phi_69_pred_2 = _2712;
                    frontier_phi_69_pred_3 = _2710;
                    frontier_phi_69_pred_4 = _2709;
                    frontier_phi_69_pred_5 = _2711;
                }
                _2520 = frontier_phi_69_pred;
                _2518 = frontier_phi_69_pred_1;
                _2516 = frontier_phi_69_pred_2;
                _2512 = frontier_phi_69_pred_3;
                _2510 = frontier_phi_69_pred_4;
                _2514 = frontier_phi_69_pred_5;
                uint _2660 = _2659 + 1u;
                if (_2660 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2653 = _2510;
                    _2654 = _2512;
                    _2655 = _2514;
                    _2656 = _2516;
                    _2657 = _2518;
                    _2658 = _2520;
                    _2659 = _2660;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
        }
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.z;
        uint _2526 = (_2524 >> 8u) & 15u;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((4294967295u << _2526) & _2391) == 0u)
        {
            _2621 = _2509;
            _2623 = _2511;
            _2625 = _2513;
            _2627 = _2515;
            _2629 = _2517;
            _2631 = _2519;
        }
        else
        {
            float _2646 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
            float _2647 = _2646 * _2345;
            float _2648 = _2646 * _2346;
            float _2649 = _2646 * _2347;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2526 < ((_2524 >> 12u) & 15u))
            {
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2760 = _2509;
                float _2761 = _2511;
                float _2762 = _2513;
                float _2763 = _2515;
                float _2764 = _2517;
                float _2765 = _2519;
                uint _2766 = _2526;
                uint _2775;
                bool _2776;
                for (;;)
                {
                    _2775 = texelFetch(g_lightClassification, int((((_2385 << 5u) + (_2371 << 9u)) + (_2766 << 2u)) >> 2u)).x;
                    _2776 = _2775 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2776)
                    {
                        frontier_phi_75_pred = _2762;
                        frontier_phi_75_pred_1 = _2761;
                        frontier_phi_75_pred_2 = _2760;
                        frontier_phi_75_pred_3 = _2765;
                        frontier_phi_75_pred_4 = _2764;
                        frontier_phi_75_pred_5 = _2763;
                    }
                    else
                    {
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        uint _2979 = _2775;
                        uint _2980;
                        vec4 _3005;
                        float _3006;
                        vec4 _3021;
                        vec3 _3033;
                        vec4 _3049;
                        vec4 _3064;
                        float _3111;
                        bool _3112;
                        for (;;)
                        {
                            uint _2990 = ((_2766 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2979));
                            _2980 = (_2979 + 4294967295u) & _2979;
                            uint _2992 = _2990 * 40u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3006 = _3005.w;
                            uint _3008 = (_2990 * 40u) + 4u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3023 = (_2990 * 40u) + 8u;
                            _3033 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x));
                            uint _3036 = (_2990 * 40u) + 16u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3051 = (_2990 * 40u) + 20u;
                            _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            uint _3067 = (_2990 * 40u) + 24u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3086 = (_2990 * 40u) + 28u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3111 = fma(_2347, _3099.z, fma(_2346, _3099.y, _3099.x * _2345)) + _3099.w;
                            _3112 = !((fma(_2347, _3080.z, fma(_2346, _3080.y, _3080.x * _2345)) + _3080.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3112)
                            {
                                float _3139 = _3005.x - _2345;
                                float _3140 = _3005.y - _2346;
                                float _3141 = _3005.z - _2347;
                                float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                                float _3145 = inversesqrt(_3142);
                                float _3146 = _3145 * _3139;
                                float _3147 = _3145 * _3140;
                                float _3148 = _3145 * _3141;
                                float _3152 = 1.0 - (_3142 / (_3006 * _3006));
                                float _4206 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3157 = sqrt(_3142) * _3021.w;
                                float _3159 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                                float _3160 = _3159 * _3159;
                                float _3163 = ((1.0 - _3160) * dot(vec3(_3146, _3147, _3148), vec3(_559, _562, _565))) + _3160;
                                float _3166 = _3157 * _3157;
                                float _3170 = (fma(_2347, _3049.z, fma(_2346, _3049.y, _3049.x * _2345)) + _3049.w) / _3111;
                                float _3171 = (fma(_2347, _3064.z, fma(_2346, _3064.y, _3064.x * _2345)) + _3064.w) / _3111;
                                float _3175 = 1.0 - dot(vec2(_3170, _3171), vec2(_3170, _3171));
                                float _4222 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3177 = _3176 * (((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3153) / ((_3166 * 0.699999988079071044921875) + 1.0));
                                float _3189 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                                float _3190 = 1.0 - _680;
                                float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                                float _3198 = _3197 * _3197;
                                float _3199 = _3198 * _3198;
                                float _3200 = _3146 - _2647;
                                float _3201 = _3147 - _2648;
                                float _3202 = _3148 - _2649;
                                float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                                float _3210 = dot(vec3(_559, _562, _565), vec3((-0.0) - _2647, (-0.0) - _2648, (-0.0) - _2649));
                                float _4233 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3213 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3214 = dot(vec3(_559, _562, _565), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                                float _4244 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3217 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                                float _3222 = _3159 * _3198;
                                float _3223 = _3222 * _3222;
                                float _3229 = ((1.0 - _3223) * dot(vec3(_559, _562, _565), vec3(_3146, _3147, _3148))) + _3223;
                                float _4255 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3231 = 1.0 - _3198;
                                float _3241 = (0.5 / (((_3230 * ((_3213 * _3231) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3198) * _3213))) * _3230;
                                float _4266 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3251 = (_3176 * _3153) * (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_3221 * _3221) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3251 * _3033.z;
                                frontier_phi_81_pred_1 = _3251 * _3033.y;
                                frontier_phi_81_pred_2 = _3251 * _3033.x;
                                frontier_phi_81_pred_3 = _3177 * _3021.z;
                                frontier_phi_81_pred_4 = _3177 * _3021.y;
                                frontier_phi_81_pred_5 = _3177 * _3021.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3257 = frontier_phi_81_pred;
                            _3256 = frontier_phi_81_pred_1;
                            _3255 = frontier_phi_81_pred_2;
                            _3260 = frontier_phi_81_pred_3;
                            _3259 = frontier_phi_81_pred_4;
                            _3258 = frontier_phi_81_pred_5;
                            _2963 = _3258 + _2976;
                            _2964 = _3259 + _2977;
                            _2965 = _3260 + _2978;
                            _2960 = _3255 + _2973;
                            _2961 = _3256 + _2974;
                            _2962 = _3257 + _2975;
                            if (_2980 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2980;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2962;
                        frontier_phi_75_pred_1 = _2961;
                        frontier_phi_75_pred_2 = _2960;
                        frontier_phi_75_pred_3 = _2965;
                        frontier_phi_75_pred_4 = _2964;
                        frontier_phi_75_pred_5 = _2963;
                    }
                    _2626 = frontier_phi_75_pred;
                    _2624 = frontier_phi_75_pred_1;
                    _2622 = frontier_phi_75_pred_2;
                    _2632 = frontier_phi_75_pred_3;
                    _2630 = frontier_phi_75_pred_4;
                    _2628 = frontier_phi_75_pred_5;
                    uint _2767 = _2766 + 1u;
                    if (_2767 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2760 = _2622;
                        _2761 = _2624;
                        _2762 = _2626;
                        _2763 = _2628;
                        _2764 = _2630;
                        _2765 = _2632;
                        _2766 = _2767;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2630;
                frontier_phi_63_64_ladder_1 = _2628;
                frontier_phi_63_64_ladder_2 = _2626;
                frontier_phi_63_64_ladder_3 = _2632;
                frontier_phi_63_64_ladder_4 = _2624;
                frontier_phi_63_64_ladder_5 = _2622;
            }
            else
            {
                frontier_phi_63_64_ladder = _2517;
                frontier_phi_63_64_ladder_1 = _2515;
                frontier_phi_63_64_ladder_2 = _2513;
                frontier_phi_63_64_ladder_3 = _2519;
                frontier_phi_63_64_ladder_4 = _2511;
                frontier_phi_63_64_ladder_5 = _2509;
            }
            _2621 = frontier_phi_63_64_ladder_5;
            _2623 = frontier_phi_63_64_ladder_4;
            _2625 = frontier_phi_63_64_ladder_2;
            _2627 = frontier_phi_63_64_ladder_1;
            _2629 = frontier_phi_63_64_ladder;
            _2631 = frontier_phi_63_64_ladder_3;
        }
        float _2636 = isnan(1.0) ? _664 : (isnan(_664) ? 1.0 : min(_664, 1.0));
        _2403 = (_2636 * _2627) + _1840;
        _2405 = (_2636 * _2629) + _1842;
        _2407 = (_2636 * _2631) + _1844;
        _2409 = ((_2621 * _649) * _2636) + _2185;
        _2411 = ((_2623 * _651) * _2636) + _2187;
        _2413 = ((_2625 * _652) * _2636) + _2189;
    }
    else
    {
        _2403 = _1840;
        _2405 = _1842;
        _2407 = _1844;
        _2409 = _2185;
        _2411 = _2187;
        _2413 = _2189;
    }
    vec4 _2419 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4282 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4293 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4304 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _2443 = (((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2403 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _664))) + ((_2409 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + (_2419.x * cbMtdParam._m0[3u].x);
    float _2445 = ((_2419.y * cbMtdParam._m0[3u].x) + ((_2411 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2405 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _664)));
    float _2447 = ((_2419.z * cbMtdParam._m0[3u].x) + ((_2413 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1476)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2407 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _664)));
    uint _2451 = _591 + 6u;
    float _2459 = _535 / cbSceneParam._m0[86u].x;
    float _2460 = _536 / cbSceneParam._m0[86u].y;
    vec4 _2474 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2476 = _2474.x;
    float _2477 = _2474.y;
    float _2478 = _2474.z;
    float _2479 = _2474.w;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2534 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2535 = _2534 / _468;
        float _2546 = _2535 * _520;
        float _2547 = _521 * _2535;
        float _2548 = (-0.0) - _2547;
        float _2549 = _2535 * _522;
        float _2551 = (cbSceneParam._m0[77u].w * _2548) / _2534;
        float _2552 = _2551 + cbSceneParam._m0[79u].w;
        float _2553 = cbSceneParam._m0[79u].w - _2547;
        float _2559 = sqrt(((_2546 * _2546) + (_2547 * _2547)) + (_2549 * _2549));
        float _2562 = (1.0 - (cbSceneParam._m0[77u].w / _2534)) * _2559;
        float _2567 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2569 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2722;
        if (abs((_2548 - _2551) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2722 = ((((_2552 > 0.0) ? exp2(_2567 * _2552) : (2.0 - exp2(_2569 * _2552))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2562;
        }
        else
        {
            float _2682 = 1.0 / cbSceneParam._m0[80u].x;
            float _2683 = isnan(_2553) ? _2552 : (isnan(_2552) ? _2553 : max(_2552, _2553));
            float _2684 = isnan(_2553) ? _2552 : (isnan(_2552) ? _2553 : min(_2552, _2553));
            float _2693 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : min(_2683, 0.0));
            float _2694 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : min(_2684, 0.0));
            _2722 = ((abs(_2559 / _2548) * cbSceneParam._m0[80u].y) * ((((_2693 - _2694) * 2.0) - ((exp2(_2567 * (isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0)))) - exp2(_2567 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0))))) * _2682)) - ((exp2(_2569 * _2693) - exp2(_2569 * _2694)) * _2682))) + (_2562 * cbSceneParam._m0[80u].z);
        }
        vec4 _2724 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, 1.0), 0.0);
        float _2733 = exp2((_2722 * (-1.44269502162933349609375)) * (1.0 - _2724.w));
        float _2734 = log2(_2733);
        float _2750 = log2(_2479);
        _2571 = (exp2(_2750 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2734 * cbSceneParam._m0[78u].x)) * _2724.x) / cbSceneParam._m0[78u].x)) + _2476;
        _2573 = (exp2(_2750 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2734 * cbSceneParam._m0[78u].y)) * _2724.y) / cbSceneParam._m0[78u].y)) + _2477;
        _2575 = (exp2(_2750 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2734 * cbSceneParam._m0[78u].z)) * _2724.z) / cbSceneParam._m0[78u].z)) + _2478;
        _2577 = _2733 * _2479;
    }
    else
    {
        _2571 = _2476;
        _2573 = _2477;
        _2575 = _2478;
        _2577 = _2479;
    }
    float _2589 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2590 = _2589 == 3.0;
    float _2591 = log2(_2577);
    float _2598 = exp2(_2591 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0)));
    float _2599 = exp2(_2591 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0)));
    float _2600 = exp2(_2591 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0)));
    float _2609 = (_2589 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2609 * (_2590 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2571)));
    SV_Target.y = _2609 * (_2590 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2573)));
    SV_Target.z = _2609 * (_2590 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2575)));
    SV_Target.w = cbInstanceData._m0[_2451].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2451].w;
}


