#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1059;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _266 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _277 = exp2(log2(_266.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _278;
    float _280;
    float _282;
    if (_277)
    {
        _278 = cbMtdParam._m0[18u].x;
        _280 = cbMtdParam._m0[18u].y;
        _282 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _278 = cbMtdParam._m0[17u].x;
        _280 = cbMtdParam._m0[17u].y;
        _282 = cbMtdParam._m0[17u].z;
    }
    float _287;
    if (_277)
    {
        _287 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _287 = cbMtdParam._m0[19u].z;
    }
    float _293;
    float _295;
    if (_277)
    {
        _293 = cbMtdParam._m0[26u].x;
        _295 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _293 = cbMtdParam._m0[22u].x;
        _295 = cbMtdParam._m0[22u].y;
    }
    float _297 = _293 * TEXCOORD.x;
    float _298 = _295 * TEXCOORD.y;
    float _310 = floor(_287);
    vec4 _313 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _297) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _298) + cbTextureTilingScale._m0[6u].w, _310));
    vec4 _335 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _343 = (((_278 * cbMtdParam._m0[19u].w) * _313.x) * cbMtdParam._m0[9u].x) * _335.x;
    float _347 = (((_280 * cbMtdParam._m0[19u].w) * _313.y) * cbMtdParam._m0[9u].y) * _335.y;
    float _351 = (((_282 * cbMtdParam._m0[19u].w) * _313.z) * cbMtdParam._m0[9u].z) * _335.z;
    vec4 _363 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _367 = _363.z;
    vec4 _380 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _297) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _298) + cbTextureTilingScale._m0[8u].w, _310));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[25u].x;
    _186[0u] = cbMtdParam._m0[25u].y;
    _185[1u] = cbMtdParam._m0[25u].z;
    _186[1u] = cbMtdParam._m0[25u].w;
    float _394 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _397 = uint(int(isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0))));
    float _402 = _186[_397] + _380.x;
    vec4 _421 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _297) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _298) + cbTextureTilingScale._m0[7u].w, _310));
    float _428 = (_421.x * 2.0) + (-1.0);
    float _429 = (_421.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3708 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))));
    float _444 = (cbMtdParam._m0[20u].x * (((_367 * 2.0) * (_421.z + _185[_397])) - _367)) + _367;
    float _448 = (cbMtdParam._m0[20u].y * ((_363.x * 2.0) + (-1.0))) + _428;
    float _449 = (cbMtdParam._m0[20u].y * ((_363.y * 2.0) + (-1.0))) + _429;
    float _452 = fma(_435, _236, fma(_449, _228 * TANGENT.x, (_214 * _206) * _448));
    float _455 = fma(_435, _237, fma(_449, _228 * TANGENT.y, (_214 * _207) * _448));
    float _458 = fma(_435, _238, fma(_449, _228 * TANGENT.z, (_214 * _208) * _448));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _3719 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _466 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3741 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3752 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3763 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _470 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _486 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _538 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _528);
    float _539 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _528);
    float _540 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _528);
    float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
    float _545 = _538 * _544;
    float _546 = _539 * _544;
    float _547 = _540 * _544;
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _556 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _558 = _556.w;
    float _577 = fma(_465, cbSceneParam._m0[5u].z, fma(_464, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _463));
    float _580 = fma(_465, cbSceneParam._m0[6u].z, fma(_464, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _463));
    float _583 = fma(_465, cbSceneParam._m0[7u].z, fma(_464, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _463));
    vec4 _585 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _596 = (((_585.y - _466) + (_585.w * _466)) * cbMtdParam._m0[3u].x) + _466;
    uint _609 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = (_609 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3774 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    vec4 _624 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _629 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _640 = (((_629.x - _470) + (_629.w * _470)) * cbMtdParam._m0[3u].x) + _470;
    float _653 = (cbMtdParam._m0[3u].x * (((_621 * _558) - _621) + _624.x)) + _621;
    float _654 = (cbMtdParam._m0[3u].x * (((_622 * _558) - _622) + _624.y)) + _622;
    float _655 = (cbMtdParam._m0[3u].x * (((_623 * _558) - _623) + _624.z)) + _623;
    float _656 = 1.0 - _640;
    float _657 = _656 * _653;
    float _658 = _656 * _654;
    float _659 = _656 * _655;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _640;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _640;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _640;
    float _667 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _682 = _679.x * TEXCOORD_4;
    float _683 = dot(vec3(_463, _464, _465), vec3(_545, _546, _547));
    float _686 = _683 * 2.0;
    float _690 = (_686 * _463) - _545;
    float _691 = (_686 * _464) - _546;
    float _692 = (_686 * _465) - _547;
    float _696 = abs(dot(vec3(_545, _546, _547), vec3(_463, _464, _465)));
    float _3807 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _698 = sqrt(_596);
    float _711 = exp2((_698 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_698 * 3.0));
    float _717 = (1.0 - _711) * ((_698 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _718 = _711 * _698;
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1058;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _783 = fma(_754, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746));
        float _787 = fma(_754, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746));
        float _791 = fma(_754, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746));
        float _816 = _746 + _463;
        float _817 = _750 + _464;
        float _818 = _754 + _465;
        float _828 = fma(_818, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816)) - _783;
        float _829 = fma(_818, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816)) - _787;
        float _830 = fma(_818, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816)) - _791;
        float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
        float _847 = ((_834 * _828) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_783 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_834 * _829) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_787 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_834 * _830) / cbModelParam._m0[34u].z) + ((((((_791 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        float _886 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_852.x + (-0.5));
        float _888 = _886 * (_852.y + (-0.5));
        float _889 = _886 * (_852.z + (-0.5));
        float _896 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_859.x + (-0.5));
        float _898 = _896 * (_859.y + (-0.5));
        float _899 = _896 * (_859.z + (-0.5));
        float _906 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_866.x + (-0.5));
        float _908 = _906 * (_866.y + (-0.5));
        float _909 = _906 * (_866.z + (-0.5));
        float _916 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_873.x + (-0.5));
        float _918 = _916 * (_873.y + (-0.5));
        float _919 = _916 * (_873.z + (-0.5));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = _887 * 0.5;
        float _924 = _897 * 0.5;
        float _925 = _907 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _940 = (dot(vec3(_463, _464, _465), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _950 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3855 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_952 + 1.0))) + _957) * _920;
        float _967 = _888 * 0.5;
        float _968 = _898 * 0.5;
        float _969 = _908 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_463, _464, _465), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3888 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_994 + 1.0))) + _999) * _921;
        float _1009 = _889 * 0.5;
        float _1010 = _899 * 0.5;
        float _1011 = _909 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_463, _464, _465), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3921 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1036 + 1.0))) + _1041) * _922;
        _1058 = _889;
        _1060 = _888;
        _1061 = _887;
        _1062 = _899;
        _1063 = _898;
        _1064 = _897;
        _1065 = _909;
        _1066 = _908;
        _1067 = _907;
        _1068 = _922;
        _1069 = _921;
        _1070 = _920;
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _1059;
        _1060 = _1059;
        _1061 = _1059;
        _1062 = _1059;
        _1063 = _1059;
        _1064 = _1059;
        _1065 = _1059;
        _1066 = _1059;
        _1067 = _1059;
        _1068 = _1059;
        _1069 = _1059;
        _1070 = _1059;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1099 = fma(_754, cbModelParam._m0[30u].z, fma(_750, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746));
        float _1103 = fma(_754, cbModelParam._m0[31u].z, fma(_750, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746));
        float _1107 = fma(_754, cbModelParam._m0[32u].z, fma(_750, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746));
        float _1130 = _746 + _463;
        float _1131 = _750 + _464;
        float _1132 = _754 + _465;
        float _1142 = fma(_1132, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130)) - _1099;
        float _1143 = fma(_1132, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130)) - _1103;
        float _1144 = fma(_1132, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130)) - _1107;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1099 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1103 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[35u].z) + ((((((_1107 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_463, _464, _465), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3984 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_463, _464, _465), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4017 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_463, _464, _465), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4050 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1059;
        _1369 = _1059;
        _1370 = _1059;
        _1371 = _1059;
        _1372 = _1059;
        _1373 = _1059;
        _1374 = _1059;
        _1375 = _1059;
        _1376 = _1059;
        _1377 = _1059;
        _1378 = _1059;
        _1379 = _1059;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1071)) + _1071;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1072)) + _1072;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1073)) + _1073;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _690 * 0.5;
    float _1437 = _691 * 0.5;
    float _1438 = _692 * 0.5;
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1058, _1062, _1065, _1068));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1504 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _596);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1504 : min(cbModelParam._m0[25u].z, _1504));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1554 = fma(_754, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746)) + cbModelParam._m0[13u].w;
        float _1558 = fma(_754, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746)) + cbModelParam._m0[14u].w;
        float _1562 = fma(_754, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746)) + cbModelParam._m0[15u].w;
        float _1565 = fma(_692, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690));
        float _1568 = fma(_692, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690));
        float _1571 = fma(_692, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690));
        float _1599;
        if (_1565 > 0.0)
        {
            _1599 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1599 = frontier_phi_22_20_ladder;
        }
        float _1771;
        if (_1568 > 0.0)
        {
            _1771 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1771 = frontier_phi_31_27_ladder;
        }
        float _2067;
        if (_1571 > 0.0)
        {
            _2067 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2067 = frontier_phi_43_38_ladder;
        }
        float _2069 = isnan(_1771) ? _1599 : (isnan(_1599) ? _1771 : min(_1599, _1771));
        float _2070 = isnan(_2067) ? _2069 : (isnan(_2069) ? _2067 : min(_2069, _2067));
        float _2074 = (_2070 * _1565) + _1554;
        float _2075 = (_2070 * _1568) + _1558;
        float _2076 = (_2070 * _1571) + _1562;
        float _2077 = _2070 * 9.9999997473787516355514526367188e-05;
        float _2079 = (-1.0) - _2077;
        float _2081 = _2077 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2076 > _2081) || ((_2076 < _2079) || ((_2075 > _2081) || ((_2075 < _2079) || ((_2074 < _2079) || (_2074 > _2081))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2076, cbModelParam._m0[9u].z, fma(_2075, cbModelParam._m0[9u].y, _2074 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2076, cbModelParam._m0[10u].z, fma(_2075, cbModelParam._m0[10u].y, _2074 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2076, cbModelParam._m0[11u].z, fma(_2075, cbModelParam._m0[11u].y, _2074 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_21_43_ladder = _2221.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2221.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2221.x * cbModelParam._m0[1u].y;
        }
        _1587 = frontier_phi_21_43_ladder_2;
        _1589 = frontier_phi_21_43_ladder_1;
        _1591 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_690, _691, _692), _1505);
        _1587 = _1575.x * cbModelParam._m0[1u].y;
        _1589 = _1575.y * cbModelParam._m0[1u].y;
        _1591 = _1575.z * cbModelParam._m0[1u].y;
    }
    float _1595 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _596);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1595 : min(cbModelParam._m0[25u].w, _1595));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1649 = fma(_754, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746)) + cbModelParam._m0[21u].w;
        float _1653 = fma(_754, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746)) + cbModelParam._m0[22u].w;
        float _1657 = fma(_754, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746)) + cbModelParam._m0[23u].w;
        float _1660 = fma(_692, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690));
        float _1663 = fma(_692, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690));
        float _1666 = fma(_692, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690));
        float _1776;
        if (_1660 > 0.0)
        {
            _1776 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1776 = frontier_phi_33_29_ladder;
        }
        float _2094;
        if (_1663 > 0.0)
        {
            _2094 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2094 = frontier_phi_45_40_ladder;
        }
        float _2432;
        if (_1666 > 0.0)
        {
            _2432 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_55_52_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_55_52_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_55_52_ladder = 5000.0;
            }
            _2432 = frontier_phi_55_52_ladder;
        }
        float _2434 = isnan(_2094) ? _1776 : (isnan(_1776) ? _2094 : min(_1776, _2094));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1660) + _1649;
        float _2440 = (_2435 * _1663) + _1653;
        float _2441 = (_2435 * _1666) + _1657;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2443 = (-1.0) - _2442;
        float _2445 = _2442 + 1.0;
        float frontier_phi_30_55_ladder;
        float frontier_phi_30_55_ladder_1;
        float frontier_phi_30_55_ladder_2;
        if ((_2441 > _2445) || ((_2441 < _2443) || ((_2440 > _2445) || ((_2440 < _2443) || ((_2439 < _2443) || (_2439 > _2445))))))
        {
            frontier_phi_30_55_ladder = 0.0;
            frontier_phi_30_55_ladder_1 = 0.0;
            frontier_phi_30_55_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2441, cbModelParam._m0[17u].z, fma(_2440, cbModelParam._m0[17u].y, _2439 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2441, cbModelParam._m0[18u].z, fma(_2440, cbModelParam._m0[18u].y, _2439 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2441, cbModelParam._m0[19u].z, fma(_2440, cbModelParam._m0[19u].y, _2439 * cbModelParam._m0[19u].x))), _1596);
            frontier_phi_30_55_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_30_55_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1685 = frontier_phi_30_55_ladder_2;
        _1687 = frontier_phi_30_55_ladder_1;
        _1689 = frontier_phi_30_55_ladder;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_690, _691, _692), _1596);
        _1685 = _1669.x * cbModelParam._m0[1u].z;
        _1687 = _1669.y * cbModelParam._m0[1u].z;
        _1689 = _1669.z * cbModelParam._m0[1u].z;
    }
    float _1702 = (((_717 * _667) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1685 - _1587)) + _1587);
    float _1704 = (((_717 * _669) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1687 - _1589)) + _1589);
    float _1706 = (((_717 * _670) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1689 - _1591)) + _1591);
    float _1709 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, _1702 * cbSceneParam._m0[91u].x));
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1754 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1763 = _1750 / _1762;
    float _1764 = _1754 / _1762;
    float _1765 = _1758 / _1762;
    float _1912;
    float _1913;
    float _1914;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1792 = ((uint(_1765 > cbSceneParam._m0[59u].y) + uint(_1765 > cbSceneParam._m0[59u].x)) + uint(_1765 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1793 = _1792 + 43u;
        uint _1801 = _1792 + 44u;
        uint _1809 = _1792 + 45u;
        uint _1817 = _1792 + 46u;
        float _1828 = fma(_1762, cbSceneParam._m0[_1793].w, fma(_1758, cbSceneParam._m0[_1793].z, fma(_1754, cbSceneParam._m0[_1793].y, _1750 * cbSceneParam._m0[_1793].x)));
        float _1832 = fma(_1762, cbSceneParam._m0[_1801].w, fma(_1758, cbSceneParam._m0[_1801].z, fma(_1754, cbSceneParam._m0[_1801].y, _1750 * cbSceneParam._m0[_1801].x)));
        float _1840 = fma(_1762, cbSceneParam._m0[_1817].w, fma(_1758, cbSceneParam._m0[_1817].z, fma(_1754, cbSceneParam._m0[_1817].y, _1750 * cbSceneParam._m0[_1817].x)));
        float _1845 = cbSceneParam._m0[33u].z * _1840;
        float _1847 = cbSceneParam._m0[33u].w * _1840;
        float _1850 = fma(_1762, cbSceneParam._m0[_1809].w, fma(_1758, cbSceneParam._m0[_1809].z, fma(_1754, cbSceneParam._m0[_1809].y, _1750 * cbSceneParam._m0[_1809].x))) / _1840;
        float _1898 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
        float _4176 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1905 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 + _1828) / _1840, (_1847 + _1832) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1847 + _1828) / _1840, (_1832 - _1845) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1845) / _1840, (_1832 - _1847) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1847) / _1840, (_1845 + _1832) / _1840), _1850), 0.0)).x), vec4(0.25)));
        _1912 = 1.0 - (_1905 * cbSceneParam._m0[34u].x);
        _1913 = 1.0 - (_1905 * cbSceneParam._m0[34u].y);
        _1914 = 1.0 - (_1905 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1912 = 1.0;
        _1913 = 1.0;
        _1914 = 1.0;
    }
    float _1978;
    float _1980;
    float _1982;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1966 = fma(_1762, cbSceneParam._m0[63u].w, fma(_1758, cbSceneParam._m0[63u].z, fma(_1754, cbSceneParam._m0[63u].y, _1750 * cbSceneParam._m0[63u].x)));
        float _1967 = fma(_1762, cbSceneParam._m0[60u].w, fma(_1758, cbSceneParam._m0[60u].z, fma(_1754, cbSceneParam._m0[60u].y, _1750 * cbSceneParam._m0[60u].x))) / _1966;
        float _1968 = fma(_1762, cbSceneParam._m0[61u].w, fma(_1758, cbSceneParam._m0[61u].z, fma(_1754, cbSceneParam._m0[61u].y, _1750 * cbSceneParam._m0[61u].x))) / _1966;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1967 >= cbSceneParam._m0[64u].x) && (_1968 >= cbSceneParam._m0[64u].y)) && (_1967 <= cbSceneParam._m0[64u].z)) && (_1968 <= cbSceneParam._m0[64u].w))
        {
            float _2107 = fma(_1762, cbSceneParam._m0[62u].w, fma(_1758, cbSceneParam._m0[62u].z, fma(_1754, cbSceneParam._m0[62u].y, _1750 * cbSceneParam._m0[62u].x))) / _1966;
            float _2111 = isnan(cbSceneParam._m0[41u].w) ? _2107 : (isnan(_2107) ? cbSceneParam._m0[41u].w : max(_2107, cbSceneParam._m0[41u].w));
            float _2154 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
            float _4192 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
            float _2161 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1967, cbSceneParam._m0[33u].w + _1968), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1967, _1968 - cbSceneParam._m0[33u].z), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].z, _1968 - cbSceneParam._m0[33u].w), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1968), _2111), 0.0)).x), vec4(0.25)));
            float _2165 = 1.0 - (_2161 * cbSceneParam._m0[34u].x);
            float _2166 = 1.0 - (_2161 * cbSceneParam._m0[34u].y);
            float _2167 = 1.0 - (_2161 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2167) ? _1914 : (isnan(_1914) ? _2167 : min(_1914, _2167));
            frontier_phi_42_41_ladder_1 = isnan(_2166) ? _1913 : (isnan(_1913) ? _2166 : min(_1913, _2166));
            frontier_phi_42_41_ladder_2 = isnan(_2165) ? _1912 : (isnan(_1912) ? _2165 : min(_1912, _2165));
        }
        else
        {
            frontier_phi_42_41_ladder = _1914;
            frontier_phi_42_41_ladder_1 = _1913;
            frontier_phi_42_41_ladder_2 = _1912;
        }
        _1978 = frontier_phi_42_41_ladder_2;
        _1980 = frontier_phi_42_41_ladder_1;
        _1982 = frontier_phi_42_41_ladder;
    }
    else
    {
        _1978 = _1912;
        _1980 = _1913;
        _1982 = _1914;
    }
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_609 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _682 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2026 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2030 = _1989 | 1u;
    float _2041 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_463, _464, _465));
    float _2044 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_463, _464, _465));
    float _4228 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _4239 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2049 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.3183098733425140380859375;
    float _2051 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.3183098733425140380859375;
    float _2058 = ((cbLight._m0[_2006].x * _2012) * _2051) + (((cbLight._m0[_2016].x * _1978) * _2026) * _2049);
    float _2059 = ((_2012 * cbLight._m0[_2006].y) * _2051) + (((cbLight._m0[_2016].y * _1980) * _2026) * _2049);
    float _2060 = ((_2012 * cbLight._m0[_2006].z) * _2051) + (((cbLight._m0[_2016].z * _1982) * _2026) * _2049);
    uvec4 _2064 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2066 = _2064.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2066)
    {
        _2168 = _2058;
        _2170 = _2059;
        _2172 = _2060;
    }
    else
    {
        uint _2176 = _1989 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4250 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2195 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2058;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2059;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2060;
    }
    bool _2175 = _2064.y == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2175)
    {
        _2230 = _2168;
        _2232 = _2170;
        _2234 = _2172;
    }
    else
    {
        uint _2403 = _1989 + 7u;
        float _2419 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4266 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2422 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2230 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2168;
        _2232 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2170;
        _2234 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2172;
    }
    uint _2237 = _1989 + 8u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _596) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_1989].x + _545;
    float _2253 = cbLight._m0[_1989].y + _546;
    float _2254 = cbLight._m0[_1989].z + _547;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1989].xyz));
    float _4282 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _2266 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2267 = dot(vec3(_463, _464, _465), vec3(_2259, _2260, _2261));
    float _4304 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2259, _2260, _2261));
    float _4315 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2251 * _2251;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0);
    float _2288 = 0.959999978542327880859375 - _664;
    float _2290 = 0.959999978542327880859375 - _665;
    float _2291 = 0.959999978542327880859375 - _666;
    float _2298 = 1.0 - _2251;
    float _2309 = (0.5 / (((_2266 * ((_2265 * _2298) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2298) + _2251) * _2265))) * _2265;
    float _4326 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    uint _2325 = _1989 + 9u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _596) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2030].x + _545;
    float _2339 = cbLight._m0[_2030].y + _546;
    float _2340 = cbLight._m0[_2030].z + _547;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2030].xyz));
    float _4337 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2352 = dot(vec3(_463, _464, _465), vec3(_2345, _2346, _2347));
    float _4348 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2345, _2346, _2347));
    float _4359 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2337 * _2337;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0);
    float _2378 = 1.0 - _2337;
    float _2388 = (0.5 / (((_2266 * ((_2351 * _2378) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2378) + _2337) * _2351))) * _2351;
    float _4370 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2390 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    float _2400 = (((((_2371 * _2288) + _667) * cbLight._m0[_2325].x) * _2390) * _2012) + ((((cbLight._m0[_2237].x * _1978) * ((_2287 * _2288) + _667)) * _2311) * _2026);
    float _2401 = (((((_2371 * _2290) + _669) * cbLight._m0[_2325].y) * _2390) * _2012) + ((((cbLight._m0[_2237].y * _1980) * ((_2287 * _2290) + _669)) * _2311) * _2026);
    float _2402 = (((((_2371 * _2291) + _670) * cbLight._m0[_2325].z) * _2390) * _2012) + ((((cbLight._m0[_2237].z * _1982) * ((_2287 * _2291) + _670)) * _2311) * _2026);
    float _2458;
    float _2460;
    float _2462;
    if (_2066)
    {
        _2458 = _2400;
        _2460 = _2401;
        _2462 = _2402;
    }
    else
    {
        uint _2464 = _1989 + 2u;
        uint _2468 = _1989 + 10u;
        float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _596) * 0.949999988079071044921875);
        float _2483 = _2482 * _2482;
        float _2484 = cbLight._m0[_2464].x + _545;
        float _2485 = cbLight._m0[_2464].y + _546;
        float _2486 = cbLight._m0[_2464].z + _547;
        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
        float _2491 = _2490 * _2484;
        float _2492 = _2490 * _2485;
        float _2493 = _2490 * _2486;
        float _2494 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2464].xyz));
        float _4381 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2498 = dot(vec3(_463, _464, _465), vec3(_2491, _2492, _2493));
        float _4392 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2502 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2491, _2492, _2493));
        float _4403 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2506 = _2483 * _2483;
        float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
        float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0);
        float _2524 = 1.0 - _2483;
        float _2534 = (0.5 / (((_2266 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2524) + _2483) * _2497))) * _2497;
        float _4414 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2458 = (((((_2517 * _2288) + _667) * cbLight._m0[_2468].x) * _2536) * _2537) + _2400;
        _2460 = (((((_2517 * _2290) + _669) * cbLight._m0[_2468].y) * _2536) * _2537) + _2401;
        _2462 = (((((_2517 * _2291) + _670) * cbLight._m0[_2468].z) * _2536) * _2537) + _2402;
    }
    float _2568;
    float _2570;
    float _2572;
    if (_2175)
    {
        _2568 = _2458;
        _2570 = _2460;
        _2572 = _2462;
    }
    else
    {
        uint _2579 = _1989 + 3u;
        uint _2583 = _1989 + 11u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _596) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _545;
        float _2600 = cbLight._m0[_2579].y + _546;
        float _2601 = cbLight._m0[_2579].z + _547;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2579].xyz));
        float _4430 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2613 = dot(vec3(_463, _464, _465), vec3(_2606, _2607, _2608));
        float _4441 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4452 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
        float _2639 = 1.0 - _2598;
        float _2649 = (0.5 / (((_2266 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2639) + _2598) * _2612))) * _2612;
        float _4463 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2568 = (((((_2632 * _2288) + _667) * cbLight._m0[_2583].x) * _2651) * _2652) + _2458;
        _2570 = (((((_2632 * _2290) + _669) * cbLight._m0[_2583].y) * _2651) * _2652) + _2460;
        _2572 = (((((_2632 * _2291) + _670) * cbLight._m0[_2583].z) * _2651) * _2652) + _2462;
    }
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_1987.y == 0u)
    {
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.x;
        uint _2685 = uint((float(_2673.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2674))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2674)));
        float _2695 = (log2(_1765 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2696 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        uint _2699 = uint(isnan(14.0) ? _2696 : (isnan(_2696) ? 14.0 : min(_2696, 14.0)));
        uvec4 _2704 = texelFetch(g_lightClusterGridBuffer, int(((_2699 << 2u) + (_2685 << 6u)) >> 2u));
        uint _2705 = _2704.x;
        uint _2706 = _2673.z;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((((1u << ((_2706 >> 4u) & 15u)) + 4294967295u) & _2705) == 0u) || ((_2706 & 240u) == 0u))
        {
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
        }
        else
        {
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            uint _2952 = 0u;
            uint _2961;
            bool _2962;
            for (;;)
            {
                _2961 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                _2962 = _2961 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2962)
                {
                    frontier_phi_74_pred = _2950;
                    frontier_phi_74_pred_1 = _2951;
                    frontier_phi_74_pred_2 = _2949;
                    frontier_phi_74_pred_3 = _2948;
                    frontier_phi_74_pred_4 = _2947;
                    frontier_phi_74_pred_5 = _2946;
                }
                else
                {
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    uint _3076;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2961;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    for (;;)
                    {
                        uint _3080 = uint(findLSB(_3076)) + (_2952 << 5u);
                        uint _3077 = (_3076 + 4294967295u) & _3076;
                        uint _3082 = _3080 * 48u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3102 = (_3080 * 48u) + 4u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3121 = (_3080 * 48u) + 8u;
                        vec3 _3132 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x));
                        float _3136 = _3096.x - _1763;
                        float _3137 = _3096.y - _1764;
                        float _3138 = _3096.z - _1765;
                        float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                        float _3142 = inversesqrt(_3139);
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3146 = dot(vec3(_577, _580, _583), vec3(_3143, _3144, _3145));
                        float _3151 = 1.0 - (_3139 * _3096.w);
                        float _4489 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3153 = sqrt(_3139) * _3115.w;
                        float _3156 = 1.39999997615814208984375 / (_3153 + 1.39999997615814208984375);
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3146) + _3157;
                        float _3163 = _3153 * _3153;
                        float _3167 = ((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3152) / ((_3163 * 0.699999988079071044921875) + 1.0);
                        float _3171 = (-0.0) - _1763;
                        float _3172 = (-0.0) - _1764;
                        float _3173 = (-0.0) - _1765;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3187 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                        float _3188 = 1.0 - _698;
                        float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                        float _3196 = _3195 * _3195;
                        float _3197 = _3196 * _3196;
                        float _3198 = _3178 + _3143;
                        float _3199 = _3179 + _3144;
                        float _3200 = _3180 + _3145;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3208 = dot(vec3(_577, _580, _583), vec3(_3178, _3179, _3180));
                        float _4505 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3212 = dot(vec3(_577, _580, _583), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                        float _4516 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                        float _3220 = _3156 * _3196;
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3146) + _3221;
                        float _4527 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3226 = 1.0 - _3196;
                        float _3236 = (0.5 / (((_3225 * ((_3211 * _3226) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3196) * _3211))) * _3225;
                        float _4538 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3247 = (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) / ((_3219 * _3219) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125))) * _3152;
                        _3005 = (_3167 * _3115.x) + _3073;
                        _3006 = (_3167 * _3115.y) + _3074;
                        _3007 = (_3167 * _3115.z) + _3075;
                        _3002 = (_3247 * _3132.x) + _3070;
                        _3003 = (_3247 * _3132.y) + _3071;
                        _3004 = (_3247 * _3132.z) + _3072;
                        if (_3077 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3077;
                        }
                    }
                    frontier_phi_74_pred = _3006;
                    frontier_phi_74_pred_1 = _3007;
                    frontier_phi_74_pred_2 = _3005;
                    frontier_phi_74_pred_3 = _3004;
                    frontier_phi_74_pred_4 = _3003;
                    frontier_phi_74_pred_5 = _3002;
                }
                _2811 = frontier_phi_74_pred;
                _2813 = frontier_phi_74_pred_1;
                _2809 = frontier_phi_74_pred_2;
                _2807 = frontier_phi_74_pred_3;
                _2805 = frontier_phi_74_pred_4;
                _2803 = frontier_phi_74_pred_5;
                uint _2953 = _2952 + 1u;
                if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2946 = _2803;
                    _2947 = _2805;
                    _2948 = _2807;
                    _2949 = _2809;
                    _2950 = _2811;
                    _2951 = _2813;
                    _2952 = _2953;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
        }
        uvec4 _2816 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2817 = _2816.z;
        uint _2819 = (_2817 >> 8u) & 15u;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((4294967295u << _2819) & _2705) == 0u)
        {
            _2914 = _2802;
            _2916 = _2804;
            _2918 = _2806;
            _2920 = _2808;
            _2922 = _2810;
            _2924 = _2812;
        }
        else
        {
            float _2939 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
            float _2940 = _2939 * _1763;
            float _2941 = _2939 * _1764;
            float _2942 = _2939 * _1765;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2819 < ((_2817 >> 12u) & 15u))
            {
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _3053 = _2802;
                float _3054 = _2804;
                float _3055 = _2806;
                float _3056 = _2808;
                float _3057 = _2810;
                float _3058 = _2812;
                uint _3059 = _2819;
                uint _3068;
                bool _3069;
                for (;;)
                {
                    _3068 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                    _3069 = _3068 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    float frontier_phi_80_pred_3;
                    float frontier_phi_80_pred_4;
                    float frontier_phi_80_pred_5;
                    if (_3069)
                    {
                        frontier_phi_80_pred = _3058;
                        frontier_phi_80_pred_1 = _3057;
                        frontier_phi_80_pred_2 = _3056;
                        frontier_phi_80_pred_3 = _3055;
                        frontier_phi_80_pred_4 = _3053;
                        frontier_phi_80_pred_5 = _3054;
                    }
                    else
                    {
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3265 = _3053;
                        float _3266 = _3054;
                        float _3267 = _3055;
                        float _3268 = _3056;
                        float _3269 = _3057;
                        float _3270 = _3058;
                        uint _3271 = _3068;
                        uint _3272;
                        vec4 _3297;
                        float _3298;
                        vec4 _3313;
                        vec3 _3325;
                        vec4 _3341;
                        vec4 _3356;
                        float _3403;
                        bool _3404;
                        for (;;)
                        {
                            uint _3282 = ((_3059 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3271));
                            _3272 = (_3271 + 4294967295u) & _3271;
                            uint _3284 = _3282 * 40u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3298 = _3297.w;
                            uint _3300 = (_3282 * 40u) + 4u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3282 * 40u) + 8u;
                            _3325 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x));
                            uint _3328 = (_3282 * 40u) + 16u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3282 * 40u) + 20u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3359 = (_3282 * 40u) + 24u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3378 = (_3282 * 40u) + 28u;
                            vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3403 = fma(_1765, _3391.z, fma(_1764, _3391.y, _3391.x * _1763)) + _3391.w;
                            _3404 = !((fma(_1765, _3372.z, fma(_1764, _3372.y, _3372.x * _1763)) + _3372.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            float frontier_phi_86_pred_3;
                            float frontier_phi_86_pred_4;
                            float frontier_phi_86_pred_5;
                            if (_3404)
                            {
                                float _3431 = _3297.x - _1763;
                                float _3432 = _3297.y - _1764;
                                float _3433 = _3297.z - _1765;
                                float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                                float _3437 = inversesqrt(_3434);
                                float _3438 = _3437 * _3431;
                                float _3439 = _3437 * _3432;
                                float _3440 = _3437 * _3433;
                                float _3444 = 1.0 - (_3434 / (_3298 * _3298));
                                float _4549 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3449 = sqrt(_3434) * _3313.w;
                                float _3451 = 1.39999997615814208984375 / (_3449 + 1.39999997615814208984375);
                                float _3452 = _3451 * _3451;
                                float _3455 = ((1.0 - _3452) * dot(vec3(_3438, _3439, _3440), vec3(_577, _580, _583))) + _3452;
                                float _3458 = _3449 * _3449;
                                float _3462 = (fma(_1765, _3341.z, fma(_1764, _3341.y, _3341.x * _1763)) + _3341.w) / _3403;
                                float _3463 = (fma(_1765, _3356.z, fma(_1764, _3356.y, _3356.x * _1763)) + _3356.w) / _3403;
                                float _3467 = 1.0 - dot(vec2(_3462, _3463), vec2(_3462, _3463));
                                float _4565 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3469 = _3468 * (((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3445) / ((_3458 * 0.699999988079071044921875) + 1.0));
                                float _3481 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                                float _3482 = 1.0 - _698;
                                float _3489 = sqrt(1.0 - ((1.0 - (_3482 * _3482)) * (1.0 - (_3481 * _3481))));
                                float _3490 = _3489 * _3489;
                                float _3491 = _3490 * _3490;
                                float _3492 = _3438 - _2940;
                                float _3493 = _3439 - _2941;
                                float _3494 = _3440 - _2942;
                                float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                                float _3502 = dot(vec3(_577, _580, _583), vec3((-0.0) - _2940, (-0.0) - _2941, (-0.0) - _2942));
                                float _4576 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3506 = dot(vec3(_577, _580, _583), vec3(_3498 * _3492, _3498 * _3493, _3498 * _3494));
                                float _4587 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3513 = ((_3509 * _3509) * (_3491 + (-1.0))) + 1.0;
                                float _3514 = _3451 * _3490;
                                float _3515 = _3514 * _3514;
                                float _3521 = ((1.0 - _3515) * dot(vec3(_577, _580, _583), vec3(_3438, _3439, _3440))) + _3515;
                                float _4598 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3523 = 1.0 - _3490;
                                float _3533 = (0.5 / (((_3522 * ((_3505 * _3523) + _3490)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3490) * _3505))) * _3522;
                                float _4609 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3543 = (_3468 * _3445) * (((_3491 * 3.1415927410125732421875) * (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) / ((_3513 * _3513) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_86_pred = _3469 * _3313.z;
                                frontier_phi_86_pred_1 = _3469 * _3313.y;
                                frontier_phi_86_pred_2 = _3469 * _3313.x;
                                frontier_phi_86_pred_3 = _3543 * _3325.z;
                                frontier_phi_86_pred_4 = _3543 * _3325.y;
                                frontier_phi_86_pred_5 = _3543 * _3325.x;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                                frontier_phi_86_pred_3 = 0.0;
                                frontier_phi_86_pred_4 = 0.0;
                                frontier_phi_86_pred_5 = 0.0;
                            }
                            _3552 = frontier_phi_86_pred;
                            _3551 = frontier_phi_86_pred_1;
                            _3550 = frontier_phi_86_pred_2;
                            _3549 = frontier_phi_86_pred_3;
                            _3548 = frontier_phi_86_pred_4;
                            _3547 = frontier_phi_86_pred_5;
                            _3255 = _3550 + _3268;
                            _3256 = _3551 + _3269;
                            _3257 = _3552 + _3270;
                            _3252 = _3547 + _3265;
                            _3253 = _3548 + _3266;
                            _3254 = _3549 + _3267;
                            if (_3272 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3272;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _3257;
                        frontier_phi_80_pred_1 = _3256;
                        frontier_phi_80_pred_2 = _3255;
                        frontier_phi_80_pred_3 = _3254;
                        frontier_phi_80_pred_4 = _3252;
                        frontier_phi_80_pred_5 = _3253;
                    }
                    _2925 = frontier_phi_80_pred;
                    _2923 = frontier_phi_80_pred_1;
                    _2921 = frontier_phi_80_pred_2;
                    _2919 = frontier_phi_80_pred_3;
                    _2915 = frontier_phi_80_pred_4;
                    _2917 = frontier_phi_80_pred_5;
                    uint _3060 = _3059 + 1u;
                    if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3053 = _2915;
                        _3054 = _2917;
                        _3055 = _2919;
                        _3056 = _2921;
                        _3057 = _2923;
                        _3058 = _2925;
                        _3059 = _3060;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2925;
                frontier_phi_68_69_ladder_1 = _2923;
                frontier_phi_68_69_ladder_2 = _2921;
                frontier_phi_68_69_ladder_3 = _2919;
                frontier_phi_68_69_ladder_4 = _2917;
                frontier_phi_68_69_ladder_5 = _2915;
            }
            else
            {
                frontier_phi_68_69_ladder = _2812;
                frontier_phi_68_69_ladder_1 = _2810;
                frontier_phi_68_69_ladder_2 = _2808;
                frontier_phi_68_69_ladder_3 = _2806;
                frontier_phi_68_69_ladder_4 = _2804;
                frontier_phi_68_69_ladder_5 = _2802;
            }
            _2914 = frontier_phi_68_69_ladder_5;
            _2916 = frontier_phi_68_69_ladder_4;
            _2918 = frontier_phi_68_69_ladder_3;
            _2920 = frontier_phi_68_69_ladder_2;
            _2922 = frontier_phi_68_69_ladder_1;
            _2924 = frontier_phi_68_69_ladder;
        }
        float _2929 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
        _2717 = (_2929 * _2920) + _2230;
        _2719 = (_2929 * _2922) + _2232;
        _2721 = (_2929 * _2924) + _2234;
        _2723 = ((_2914 * _667) * _2929) + _2568;
        _2725 = ((_2916 * _669) * _2929) + _2570;
        _2727 = ((_2918 * _670) * _2929) + _2572;
    }
    else
    {
        _2717 = _2230;
        _2719 = _2232;
        _2721 = _2234;
        _2723 = _2568;
        _2725 = _2570;
        _2727 = _2572;
    }
    vec4 _2733 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4625 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4636 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4647 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _2757 = (((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2717 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _682))) + ((_2723 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + (_2733.x * cbMtdParam._m0[3u].x);
    float _2759 = ((_2733.y * cbMtdParam._m0[3u].x) + ((_2725 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2719 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _682)));
    float _2761 = ((_2733.z * cbMtdParam._m0[3u].x) + ((_2727 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2721 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _682)));
    uint _2765 = _609 + 6u;
    float _2773 = _553 / cbSceneParam._m0[86u].x;
    float _2774 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2788 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, (log2((isnan(cbSceneParam._m0[77u].w) ? _486 : (isnan(_486) ? cbSceneParam._m0[77u].w : min(_486, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2790 = _2788.x;
    float _2791 = _2788.y;
    float _2792 = _2788.z;
    float _2793 = _2788.w;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_486 > cbSceneParam._m0[78u].w)
    {
        float _2827 = isnan(_486) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _486 : min(cbSceneParam._m0[80u].w, _486));
        float _2828 = _2827 / _486;
        float _2839 = _2828 * _538;
        float _2840 = _539 * _2828;
        float _2841 = (-0.0) - _2840;
        float _2842 = _2828 * _540;
        float _2844 = (cbSceneParam._m0[77u].w * _2841) / _2827;
        float _2845 = _2844 + cbSceneParam._m0[79u].w;
        float _2846 = cbSceneParam._m0[79u].w - _2840;
        float _2852 = sqrt(((_2839 * _2839) + (_2840 * _2840)) + (_2842 * _2842));
        float _2855 = (1.0 - (cbSceneParam._m0[77u].w / _2827)) * _2852;
        float _2860 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2862 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3015;
        if (abs((_2841 - _2844) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3015 = ((((_2845 > 0.0) ? exp2(_2860 * _2845) : (2.0 - exp2(_2862 * _2845))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2855;
        }
        else
        {
            float _2975 = 1.0 / cbSceneParam._m0[80u].x;
            float _2976 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : max(_2845, _2846));
            float _2977 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : min(_2845, _2846));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            _3015 = ((abs(_2852 / _2841) * cbSceneParam._m0[80u].y) * ((((_2986 - _2987) * 2.0) - ((exp2(_2860 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0)))) - exp2(_2860 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))))) * _2975)) - ((exp2(_2862 * _2986) - exp2(_2862 * _2987)) * _2975))) + (_2855 * cbSceneParam._m0[80u].z);
        }
        vec4 _3017 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, 1.0), 0.0);
        float _3026 = exp2((_3015 * (-1.44269502162933349609375)) * (1.0 - _3017.w));
        float _3027 = log2(_3026);
        float _3043 = log2(_2793);
        _2864 = (exp2(_3043 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].x)) * _3017.x) / cbSceneParam._m0[78u].x)) + _2790;
        _2866 = (exp2(_3043 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].y)) * _3017.y) / cbSceneParam._m0[78u].y)) + _2791;
        _2868 = (exp2(_3043 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].z)) * _3017.z) / cbSceneParam._m0[78u].z)) + _2792;
        _2870 = _3026 * _2793;
    }
    else
    {
        _2864 = _2790;
        _2866 = _2791;
        _2868 = _2792;
        _2870 = _2793;
    }
    float _2882 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2883 = _2882 == 3.0;
    float _2884 = log2(_2870);
    float _2891 = exp2(_2884 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0)));
    float _2892 = exp2(_2884 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)));
    float _2893 = exp2(_2884 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)));
    float _2902 = (_2882 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2902 * (_2883 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.y = _2902 * (_2883 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2866)));
    SV_Target.z = _2902 * (_2883 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2868)));
    SV_Target.w = cbInstanceData._m0[_2765].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2765].w;
}


