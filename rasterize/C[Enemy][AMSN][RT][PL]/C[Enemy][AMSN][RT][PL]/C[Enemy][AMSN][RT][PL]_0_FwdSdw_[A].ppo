#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1214;
float _3897;
float _3898;
float _3899;
float _3900;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    float _271 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _197[6];
    float _198[6];
    float _199[6];
    _197[0u] = cbMtdParam._m0[14u].x;
    _198[0u] = cbMtdParam._m0[14u].y;
    _199[0u] = cbMtdParam._m0[14u].z;
    _197[1u] = cbMtdParam._m0[15u].x;
    _198[1u] = cbMtdParam._m0[15u].y;
    _199[1u] = cbMtdParam._m0[15u].z;
    _197[2u] = cbMtdParam._m0[16u].x;
    _198[2u] = cbMtdParam._m0[16u].y;
    _199[2u] = cbMtdParam._m0[16u].z;
    _197[3u] = cbMtdParam._m0[11u].x;
    _198[3u] = cbMtdParam._m0[11u].y;
    _199[3u] = cbMtdParam._m0[11u].z;
    _197[4u] = cbMtdParam._m0[12u].x;
    _198[4u] = cbMtdParam._m0[12u].y;
    _199[4u] = cbMtdParam._m0[12u].z;
    _197[5u] = cbMtdParam._m0[13u].x;
    _198[5u] = cbMtdParam._m0[13u].y;
    _199[5u] = cbMtdParam._m0[13u].z;
    vec4 _360 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _363 = _360.y;
    float _366 = (_360.x + (-0.02500000037252902984619140625)) * 8.0;
    float _368 = roundEven(_366);
    float _369 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    uint _372 = uint(int(isnan(5.0) ? _369 : (isnan(_369) ? 5.0 : min(_369, 5.0))));
    float _389 = roundEven(5.0 - _366);
    float _390 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _391 = isnan(4.0) ? _390 : (isnan(_390) ? 4.0 : min(_390, 4.0));
    float _397;
    float _399;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_271 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _397 = cbMtdParam._m0[26u].x;
        _399 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _397 = cbMtdParam._m0[22u].x;
        _399 = cbMtdParam._m0[22u].y;
    }
    float _401 = _397 * TEXCOORD.x;
    float _402 = _399 * TEXCOORD.y;
    float _413 = floor(_391);
    vec4 _416 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _401) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _402) + cbTextureTilingScale._m0[6u].w, _413));
    vec4 _438 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _271) + cbTextureTilingScale._m0[0u].w));
    float _446 = ((((((_197[_372] - cbMtdParam._m0[18u].x) * _363) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _416.x) * cbMtdParam._m0[9u].x) * _438.x;
    float _450 = ((((((_198[_372] - cbMtdParam._m0[18u].y) * _363) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _416.y) * cbMtdParam._m0[9u].y) * _438.y;
    float _454 = ((((((_199[_372] - cbMtdParam._m0[18u].z) * _363) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _416.z) * cbMtdParam._m0[9u].z) * _438.z;
    vec4 _466 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _271) + cbTextureTilingScale._m0[1u].w));
    float _470 = _466.z;
    float _192[5];
    float _193[5];
    _192[0u] = cbMtdParam._m0[22u].z;
    _193[0u] = cbMtdParam._m0[22u].w;
    _192[1u] = cbMtdParam._m0[23u].z;
    _193[1u] = cbMtdParam._m0[23u].w;
    _192[2u] = cbMtdParam._m0[24u].x;
    _193[2u] = cbMtdParam._m0[24u].y;
    _192[3u] = cbMtdParam._m0[24u].z;
    _193[3u] = cbMtdParam._m0[24u].w;
    _192[4u] = cbMtdParam._m0[23u].x;
    _193[4u] = cbMtdParam._m0[23u].y;
    float _514 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    uint _516 = uint(int(isnan(4.0) ? _514 : (isnan(_514) ? 4.0 : min(_514, 4.0))));
    float _521 = _193[_516] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _401) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _402) + cbTextureTilingScale._m0[8u].w, _413)).x;
    vec4 _540 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _401) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _402) + cbTextureTilingScale._m0[7u].w, _413));
    float _547 = (_540.x * 2.0) + (-1.0);
    float _548 = (_540.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3939 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))));
    float _564 = (cbMtdParam._m0[20u].x * (((_470 * 2.0) * (_540.z + _192[_516])) - _470)) + _470;
    float _568 = (cbMtdParam._m0[20u].y * ((_466.x * 2.0) + (-1.0))) + _547;
    float _569 = (cbMtdParam._m0[20u].y * ((_466.y * 2.0) + (-1.0))) + _548;
    float _572 = fma(_555, _249, fma(_569, _241 * TANGENT.x, (_227 * _219) * _568));
    float _575 = fma(_555, _250, fma(_569, _241 * TANGENT.y, (_227 * _220) * _568));
    float _578 = fma(_555, _251, fma(_569, _241 * TANGENT.z, (_227 * _221) * _568));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    float _583 = _582 * _572;
    float _584 = _582 * _575;
    float _585 = _582 * _578;
    float _3950 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _586 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3972 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3983 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3994 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _590 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _606 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _657 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _647);
    float _658 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _647);
    float _659 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _647);
    float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
    float _664 = _657 * _663;
    float _665 = _658 * _663;
    float _666 = _659 * _663;
    vec4 _671 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _673 = _671.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _894 = sqrt(((_657 * _657) + (_658 * _658)) + (_659 * _659));
        float _900 = (cbMatDynParam._m0[5u].x * _894) + cbMatDynParam._m0[5u].y;
        float _4005 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _905 = (cbMatDynParam._m0[5u].z * _894) + cbMatDynParam._m0[5u].w;
        float _4016 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) - _901)) + _901) < ((_673 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _686 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _687 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _689 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _691 = _689.w;
    float _709 = fma(_585, cbSceneParam._m0[5u].z, fma(_584, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _583));
    float _712 = fma(_585, cbSceneParam._m0[6u].z, fma(_584, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _583));
    float _715 = fma(_585, cbSceneParam._m0[7u].z, fma(_584, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _583));
    vec4 _717 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _728 = (((_717.y - _586) + (_717.w * _586)) * cbMtdParam._m0[3u].x) + _586;
    uint _741 = uint(roundEven(NORMAL.w)) * 13u;
    uint _742 = _741 + 9u;
    uint _743 = _742 + uint(cbMatDynParam._m0[0u].w);
    float _749 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * cbInstanceData._m0[_743].x;
    float _750 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_743].y;
    float _751 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * cbInstanceData._m0[_743].z;
    float _4027 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    vec4 _755 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _760 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _771 = (((_760.x - _590) + (_760.w * _590)) * cbMtdParam._m0[3u].x) + _590;
    float _784 = (cbMtdParam._m0[3u].x * (((_752 * _691) - _752) + _755.x)) + _752;
    float _785 = (cbMtdParam._m0[3u].x * (((_753 * _691) - _753) + _755.y)) + _753;
    float _786 = (cbMtdParam._m0[3u].x * (((_754 * _691) - _754) + _755.z)) + _754;
    float _787 = 1.0 - _771;
    float _788 = _787 * _784;
    float _789 = _787 * _785;
    float _790 = _787 * _786;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _771;
    float _796 = (_785 + (-0.039999999105930328369140625)) * _771;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _771;
    float _798 = _795 + 0.039999999105930328369140625;
    float _800 = _796 + 0.039999999105930328369140625;
    float _801 = _797 + 0.039999999105930328369140625;
    vec4 _810 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _686, cbSceneParam._m0[86u].y * _687));
    float _813 = _810.x * TEXCOORD_4;
    float _814 = dot(vec3(_583, _584, _585), vec3(_664, _665, _666));
    float _817 = _814 * 2.0;
    float _821 = (_817 * _583) - _664;
    float _822 = (_817 * _584) - _665;
    float _823 = (_817 * _585) - _666;
    float _827 = abs(dot(vec3(_664, _665, _666), vec3(_583, _584, _585)));
    float _4060 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _829 = sqrt(_728);
    float _840 = exp2((_829 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_829 * 3.0));
    float _846 = (1.0 - _840) * ((_829 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _847 = _840 * _829;
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1213;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_883, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875));
        float _942 = fma(_883, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875));
        float _946 = fma(_883, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875));
        float _971 = _875 + _583;
        float _972 = _879 + _584;
        float _973 = _883 + _585;
        float _983 = fma(_973, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971)) - _938;
        float _984 = fma(_973, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971)) - _942;
        float _985 = fma(_973, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971)) - _946;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1041 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1007.x + (-0.5));
        float _1043 = _1041 * (_1007.y + (-0.5));
        float _1044 = _1041 * (_1007.z + (-0.5));
        float _1051 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1014.x + (-0.5));
        float _1053 = _1051 * (_1014.y + (-0.5));
        float _1054 = _1051 * (_1014.z + (-0.5));
        float _1061 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1021.x + (-0.5));
        float _1063 = _1061 * (_1021.y + (-0.5));
        float _1064 = _1061 * (_1021.z + (-0.5));
        float _1071 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1028.x + (-0.5));
        float _1073 = _1071 * (_1028.y + (-0.5));
        float _1074 = _1071 * (_1028.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1095 = (dot(vec3(_583, _584, _585), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1105 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _4108 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1107 + 1.0))) + _1112) * _1075;
        float _1122 = _1043 * 0.5;
        float _1123 = _1053 * 0.5;
        float _1124 = _1063 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_583, _584, _585), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _4141 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1149 + 1.0))) + _1154) * _1076;
        float _1164 = _1044 * 0.5;
        float _1165 = _1054 * 0.5;
        float _1166 = _1064 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_583, _584, _585), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _4174 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1191 + 1.0))) + _1196) * _1077;
        _1213 = _1044;
        _1215 = _1043;
        _1216 = _1042;
        _1217 = _1054;
        _1218 = _1053;
        _1219 = _1052;
        _1220 = _1064;
        _1221 = _1063;
        _1222 = _1062;
        _1223 = _1077;
        _1224 = _1076;
        _1225 = _1075;
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _1214;
        _1215 = _1214;
        _1216 = _1214;
        _1217 = _1214;
        _1218 = _1214;
        _1219 = _1214;
        _1220 = _1214;
        _1221 = _1214;
        _1222 = _1214;
        _1223 = _1214;
        _1224 = _1214;
        _1225 = _1214;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1257 = fma(_883, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _875));
        float _1261 = fma(_883, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _875));
        float _1265 = fma(_883, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _875));
        float _1288 = _875 + _583;
        float _1289 = _879 + _584;
        float _1290 = _883 + _585;
        float _1300 = fma(_1290, cbModelParam._m0[30u].z, fma(_1289, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288)) - _1257;
        float _1301 = fma(_1290, cbModelParam._m0[31u].z, fma(_1289, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288)) - _1261;
        float _1302 = fma(_1290, cbModelParam._m0[32u].z, fma(_1289, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288)) - _1265;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1257 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1261 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[35u].z) + ((((((_1265 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1356 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1323.x + (-0.5));
        float _1358 = _1356 * (_1323.y + (-0.5));
        float _1359 = _1356 * (_1323.z + (-0.5));
        float _1366 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1330.x + (-0.5));
        float _1368 = _1366 * (_1330.y + (-0.5));
        float _1369 = _1366 * (_1330.z + (-0.5));
        float _1376 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1337.x + (-0.5));
        float _1378 = _1376 * (_1337.y + (-0.5));
        float _1379 = _1376 * (_1337.z + (-0.5));
        float _1386 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1344.x + (-0.5));
        float _1388 = _1386 * (_1344.y + (-0.5));
        float _1389 = _1386 * (_1344.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_583, _584, _585), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4237 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1420 + 1.0))) + _1425) * _1390;
        float _1435 = _1358 * 0.5;
        float _1436 = _1368 * 0.5;
        float _1437 = _1378 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_583, _584, _585), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4270 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1462 + 1.0))) + _1467) * _1391;
        float _1477 = _1359 * 0.5;
        float _1478 = _1369 * 0.5;
        float _1479 = _1379 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_583, _584, _585), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4303 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1504 + 1.0))) + _1509) * _1392;
        _1526 = _1359;
        _1527 = _1358;
        _1528 = _1357;
        _1529 = _1369;
        _1530 = _1368;
        _1531 = _1367;
        _1532 = _1379;
        _1533 = _1378;
        _1534 = _1377;
        _1535 = _1392;
        _1536 = _1391;
        _1537 = _1390;
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1214;
        _1527 = _1214;
        _1528 = _1214;
        _1529 = _1214;
        _1530 = _1214;
        _1531 = _1214;
        _1532 = _1214;
        _1533 = _1214;
        _1534 = _1214;
        _1535 = _1214;
        _1536 = _1214;
        _1537 = _1214;
        _1538 = 0.0;
        _1539 = 0.0;
        _1540 = 0.0;
    }
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1226)) + _1226;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1227)) + _1227;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1228)) + _1228;
    float _1573 = fma(_1552, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1552, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1552, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1550));
    float _1594 = _821 * 0.5;
    float _1595 = _822 * 0.5;
    float _1596 = _823 * 0.5;
    float _1597 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1600 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1603 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1637;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1610 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1213, _1217, _1220, _1223));
        float _1614 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1618 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1625 = dot(vec4(cbModelParam._m0[39u]), vec4(_1594, _1595, _1596, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1648;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1639 = dot(vec4(cbModelParam._m0[40u]), vec4(_1594, _1595, _1596, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1652 = (_1648 * cbModelParam._m0[1u].x) + (_1637 * (1.0 - cbModelParam._m0[1u].x));
    float _1662 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _728);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1662 : min(cbModelParam._m0[25u].z, _1662));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1710 = fma(_883, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875)) + cbModelParam._m0[13u].w;
        float _1714 = fma(_883, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875)) + cbModelParam._m0[14u].w;
        float _1718 = fma(_883, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875)) + cbModelParam._m0[15u].w;
        float _1721 = fma(_823, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821));
        float _1724 = fma(_823, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821));
        float _1727 = fma(_823, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821));
        float _1755;
        if (_1721 > 0.0)
        {
            _1755 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1755 = frontier_phi_21_19_ladder;
        }
        float _1926;
        if (_1724 > 0.0)
        {
            _1926 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1926 = frontier_phi_30_26_ladder;
        }
        float _2221;
        if (_1727 > 0.0)
        {
            _2221 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2221 = frontier_phi_42_37_ladder;
        }
        float _2223 = isnan(_1926) ? _1755 : (isnan(_1755) ? _1926 : min(_1755, _1926));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1721) + _1710;
        float _2229 = (_2224 * _1724) + _1714;
        float _2230 = (_2224 * _1727) + _1718;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2231;
        float _2235 = _2231 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 > _2235) || ((_2229 < _2233) || ((_2228 < _2233) || (_2228 > _2235))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2230, cbModelParam._m0[9u].z, fma(_2229, cbModelParam._m0[9u].y, _2228 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2230, cbModelParam._m0[10u].z, fma(_2229, cbModelParam._m0[10u].y, _2228 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2230, cbModelParam._m0[11u].z, fma(_2229, cbModelParam._m0[11u].y, _2228 * cbModelParam._m0[11u].x))), _1663);
            frontier_phi_20_42_ladder = _2375.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2375.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2375.x * cbModelParam._m0[1u].y;
        }
        _1743 = frontier_phi_20_42_ladder_2;
        _1745 = frontier_phi_20_42_ladder_1;
        _1747 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_821, _822, _823), _1663);
        _1743 = _1731.x * cbModelParam._m0[1u].y;
        _1745 = _1731.y * cbModelParam._m0[1u].y;
        _1747 = _1731.z * cbModelParam._m0[1u].y;
    }
    float _1751 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _728);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1751 : min(cbModelParam._m0[25u].w, _1751));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1805 = fma(_883, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875)) + cbModelParam._m0[21u].w;
        float _1809 = fma(_883, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875)) + cbModelParam._m0[22u].w;
        float _1813 = fma(_883, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875)) + cbModelParam._m0[23u].w;
        float _1816 = fma(_823, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821));
        float _1819 = fma(_823, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821));
        float _1822 = fma(_823, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821));
        float _1931;
        if (_1816 > 0.0)
        {
            _1931 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1931 = frontier_phi_32_28_ladder;
        }
        float _2248;
        if (_1819 > 0.0)
        {
            _2248 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2248 = frontier_phi_44_39_ladder;
        }
        float _2586;
        if (_1822 > 0.0)
        {
            _2586 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2586 = frontier_phi_54_51_ladder;
        }
        float _2588 = isnan(_2248) ? _1931 : (isnan(_1931) ? _2248 : min(_1931, _2248));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1816) + _1805;
        float _2594 = (_2589 * _1819) + _1809;
        float _2595 = (_2589 * _1822) + _1813;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_29_54_ladder;
        float frontier_phi_29_54_ladder_1;
        float frontier_phi_29_54_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_29_54_ladder = 0.0;
            frontier_phi_29_54_ladder_1 = 0.0;
            frontier_phi_29_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1752);
            frontier_phi_29_54_ladder = _2717.z * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_1 = _2717.y * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_2 = _2717.x * cbModelParam._m0[1u].z;
        }
        _1841 = frontier_phi_29_54_ladder_2;
        _1843 = frontier_phi_29_54_ladder_1;
        _1845 = frontier_phi_29_54_ladder;
    }
    else
    {
        vec4 _1825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_821, _822, _823), _1752);
        _1841 = _1825.x * cbModelParam._m0[1u].z;
        _1843 = _1825.y * cbModelParam._m0[1u].z;
        _1845 = _1825.z * cbModelParam._m0[1u].z;
    }
    float _1858 = (((_846 * _798) + _847) * _813) * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1860 = (((_846 * _800) + _847) * _813) * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1862 = (((_846 * _801) + _847) * _813) * ((cbModelParam._m0[1u].w * (_1845 - _1747)) + _1747);
    float _1865 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1860, cbSceneParam._m0[89u].y, _1858 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1860, cbSceneParam._m0[90u].y, _1858 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1860, cbSceneParam._m0[91u].y, _1858 * cbSceneParam._m0[91u].x));
    float _1905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1909 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1913 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1917 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1918 = _1905 / _1917;
    float _1919 = _1909 / _1917;
    float _1920 = _1913 / _1917;
    float _2067;
    float _2068;
    float _2069;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1947 = ((uint(_1920 > cbSceneParam._m0[59u].y) + uint(_1920 > cbSceneParam._m0[59u].x)) + uint(_1920 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1948 = _1947 + 43u;
        uint _1956 = _1947 + 44u;
        uint _1964 = _1947 + 45u;
        uint _1972 = _1947 + 46u;
        float _1983 = fma(_1917, cbSceneParam._m0[_1948].w, fma(_1913, cbSceneParam._m0[_1948].z, fma(_1909, cbSceneParam._m0[_1948].y, _1905 * cbSceneParam._m0[_1948].x)));
        float _1987 = fma(_1917, cbSceneParam._m0[_1956].w, fma(_1913, cbSceneParam._m0[_1956].z, fma(_1909, cbSceneParam._m0[_1956].y, _1905 * cbSceneParam._m0[_1956].x)));
        float _1995 = fma(_1917, cbSceneParam._m0[_1972].w, fma(_1913, cbSceneParam._m0[_1972].z, fma(_1909, cbSceneParam._m0[_1972].y, _1905 * cbSceneParam._m0[_1972].x)));
        float _2000 = cbSceneParam._m0[33u].z * _1995;
        float _2002 = cbSceneParam._m0[33u].w * _1995;
        float _2005 = fma(_1917, cbSceneParam._m0[_1964].w, fma(_1913, cbSceneParam._m0[_1964].z, fma(_1909, cbSceneParam._m0[_1964].y, _1905 * cbSceneParam._m0[_1964].x))) / _1995;
        float _2053 = (cbSceneParam._m0[33u].x - sqrt(((_1919 * _1919) + (_1918 * _1918)) + (_1920 * _1920))) * cbSceneParam._m0[33u].y;
        float _4429 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2060 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2000 + _1983) / _1995, (_2002 + _1987) / _1995), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2002 + _1983) / _1995, (_1987 - _2000) / _1995), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 - _2000) / _1995, (_1987 - _2002) / _1995), _2005), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 - _2002) / _1995, (_2000 + _1987) / _1995), _2005), 0.0)).x), vec4(0.25)));
        _2067 = 1.0 - (_2060 * cbSceneParam._m0[34u].x);
        _2068 = 1.0 - (_2060 * cbSceneParam._m0[34u].y);
        _2069 = 1.0 - (_2060 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2067 = 1.0;
        _2068 = 1.0;
        _2069 = 1.0;
    }
    float _2133;
    float _2135;
    float _2137;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2121 = fma(_1917, cbSceneParam._m0[63u].w, fma(_1913, cbSceneParam._m0[63u].z, fma(_1909, cbSceneParam._m0[63u].y, _1905 * cbSceneParam._m0[63u].x)));
        float _2122 = fma(_1917, cbSceneParam._m0[60u].w, fma(_1913, cbSceneParam._m0[60u].z, fma(_1909, cbSceneParam._m0[60u].y, _1905 * cbSceneParam._m0[60u].x))) / _2121;
        float _2123 = fma(_1917, cbSceneParam._m0[61u].w, fma(_1913, cbSceneParam._m0[61u].z, fma(_1909, cbSceneParam._m0[61u].y, _1905 * cbSceneParam._m0[61u].x))) / _2121;
        float frontier_phi_41_40_ladder;
        float frontier_phi_41_40_ladder_1;
        float frontier_phi_41_40_ladder_2;
        if ((((_2122 >= cbSceneParam._m0[64u].x) && (_2123 >= cbSceneParam._m0[64u].y)) && (_2122 <= cbSceneParam._m0[64u].z)) && (_2123 <= cbSceneParam._m0[64u].w))
        {
            float _2261 = fma(_1917, cbSceneParam._m0[62u].w, fma(_1913, cbSceneParam._m0[62u].z, fma(_1909, cbSceneParam._m0[62u].y, _1905 * cbSceneParam._m0[62u].x))) / _2121;
            float _2265 = isnan(cbSceneParam._m0[41u].w) ? _2261 : (isnan(_2261) ? cbSceneParam._m0[41u].w : max(_2261, cbSceneParam._m0[41u].w));
            float _2308 = (cbSceneParam._m0[33u].x - sqrt(((_1919 * _1919) + (_1918 * _1918)) + (_1920 * _1920))) * cbSceneParam._m0[33u].y;
            float _4445 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
            float _2315 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2122, cbSceneParam._m0[33u].w + _2123), _2265), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2122, _2123 - cbSceneParam._m0[33u].z), _2265), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2122 - cbSceneParam._m0[33u].z, _2123 - cbSceneParam._m0[33u].w), _2265), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2122 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2123), _2265), 0.0)).x), vec4(0.25)));
            float _2319 = 1.0 - (_2315 * cbSceneParam._m0[34u].x);
            float _2320 = 1.0 - (_2315 * cbSceneParam._m0[34u].y);
            float _2321 = 1.0 - (_2315 * cbSceneParam._m0[34u].z);
            frontier_phi_41_40_ladder = isnan(_2321) ? _2069 : (isnan(_2069) ? _2321 : min(_2069, _2321));
            frontier_phi_41_40_ladder_1 = isnan(_2320) ? _2068 : (isnan(_2068) ? _2320 : min(_2068, _2320));
            frontier_phi_41_40_ladder_2 = isnan(_2319) ? _2067 : (isnan(_2067) ? _2319 : min(_2067, _2319));
        }
        else
        {
            frontier_phi_41_40_ladder = _2069;
            frontier_phi_41_40_ladder_1 = _2068;
            frontier_phi_41_40_ladder_2 = _2067;
        }
        _2133 = frontier_phi_41_40_ladder_2;
        _2135 = frontier_phi_41_40_ladder_1;
        _2137 = frontier_phi_41_40_ladder;
    }
    else
    {
        _2133 = _2067;
        _2135 = _2068;
        _2137 = _2069;
    }
    uvec4 _2142 = floatBitsToUint(cbInstanceData._m0[_741 + 5u]);
    uint _2144 = _2142.x * 14u;
    uint _2145 = _2144 + 13u;
    float _2152 = _813 + (-1.0);
    float _2157 = (cbLight._m0[_2145].x * _2152) + 1.0;
    float _2158 = (cbLight._m0[_2145].y * _2152) + 1.0;
    float _2159 = (cbLight._m0[_2145].z * _2152) + 1.0;
    float _2160 = (cbLight._m0[_2145].w * _2152) + 1.0;
    uint _2161 = _2144 + 5u;
    float _2167 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2171 = _2144 + 4u;
    float _2180 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2184 = _2144 | 1u;
    float _2195 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_583, _584, _585));
    float _2198 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_583, _584, _585));
    float _4481 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _4492 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2203 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * 0.3183098733425140380859375;
    float _2205 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * 0.3183098733425140380859375;
    float _2212 = ((cbLight._m0[_2161].x * _2167) * _2205) + (((cbLight._m0[_2171].x * _2133) * _2180) * _2203);
    float _2213 = ((_2167 * cbLight._m0[_2161].y) * _2205) + (((cbLight._m0[_2171].y * _2135) * _2180) * _2203);
    float _2214 = ((_2167 * cbLight._m0[_2161].z) * _2205) + (((cbLight._m0[_2171].z * _2137) * _2180) * _2203);
    uvec4 _2218 = floatBitsToUint(cbLight._m0[_2144 + 12u]);
    bool _2220 = _2218.x == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2220)
    {
        _2322 = _2212;
        _2324 = _2213;
        _2326 = _2214;
    }
    else
    {
        uint _2330 = _2144 + 6u;
        float _2346 = (dot(vec3(cbLight._m0[_2144 + 2u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2347 = _2346 * _2346;
        float _4503 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2348 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2349 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2322 = (((cbLight._m0[_2330].x * 0.3183098733425140380859375) * _2348) * _2349) + _2212;
        _2324 = (((cbLight._m0[_2330].y * 0.3183098733425140380859375) * _2348) * _2349) + _2213;
        _2326 = (((cbLight._m0[_2330].z * 0.3183098733425140380859375) * _2348) * _2349) + _2214;
    }
    bool _2329 = _2218.y == 0u;
    float _2384;
    float _2386;
    float _2388;
    if (_2329)
    {
        _2384 = _2322;
        _2386 = _2324;
        _2388 = _2326;
    }
    else
    {
        uint _2557 = _2144 + 7u;
        float _2573 = (dot(vec3(cbLight._m0[_2144 + 3u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2574 = _2573 * _2573;
        float _4519 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2575 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2576 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2384 = (((cbLight._m0[_2557].x * 0.3183098733425140380859375) * _2575) * _2576) + _2322;
        _2386 = (((cbLight._m0[_2557].y * 0.3183098733425140380859375) * _2575) * _2576) + _2324;
        _2388 = (((cbLight._m0[_2557].z * 0.3183098733425140380859375) * _2575) * _2576) + _2326;
    }
    uint _2391 = _2144 + 8u;
    float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _728) * 0.949999988079071044921875);
    float _2405 = _2404 * _2404;
    float _2406 = cbLight._m0[_2144].x + _664;
    float _2407 = cbLight._m0[_2144].y + _665;
    float _2408 = cbLight._m0[_2144].z + _666;
    float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
    float _2413 = _2412 * _2406;
    float _2414 = _2412 * _2407;
    float _2415 = _2412 * _2408;
    float _2416 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2144].xyz));
    float _4535 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _4546 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2420 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2421 = dot(vec3(_583, _584, _585), vec3(_2413, _2414, _2415));
    float _4557 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2425 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2413, _2414, _2415));
    float _4568 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2429 = _2405 * _2405;
    float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
    float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2442 = 0.959999978542327880859375 - _795;
    float _2444 = 0.959999978542327880859375 - _796;
    float _2445 = 0.959999978542327880859375 - _797;
    float _2452 = 1.0 - _2405;
    float _2463 = (0.5 / (((_2420 * ((_2419 * _2452) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2452) + _2405) * _2419))) * _2419;
    float _4579 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2465 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
    uint _2479 = _2144 + 9u;
    float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _728) * 0.949999988079071044921875);
    float _2491 = _2490 * _2490;
    float _2492 = cbLight._m0[_2184].x + _664;
    float _2493 = cbLight._m0[_2184].y + _665;
    float _2494 = cbLight._m0[_2184].z + _666;
    float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
    float _2499 = _2498 * _2492;
    float _2500 = _2498 * _2493;
    float _2501 = _2498 * _2494;
    float _2502 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2184].xyz));
    float _4590 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2506 = dot(vec3(_583, _584, _585), vec3(_2499, _2500, _2501));
    float _4601 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2510 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2499, _2500, _2501));
    float _4612 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2514 = _2491 * _2491;
    float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
    float _2525 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
    float _2532 = 1.0 - _2491;
    float _2542 = (0.5 / (((_2420 * ((_2505 * _2532) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2532) + _2491) * _2505))) * _2505;
    float _4623 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2544 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
    float _2554 = (((((_2525 * _2442) + _798) * cbLight._m0[_2479].x) * _2544) * _2167) + ((((cbLight._m0[_2391].x * _2133) * ((_2441 * _2442) + _798)) * _2465) * _2180);
    float _2555 = (((((_2525 * _2444) + _800) * cbLight._m0[_2479].y) * _2544) * _2167) + ((((cbLight._m0[_2391].y * _2135) * ((_2441 * _2444) + _800)) * _2465) * _2180);
    float _2556 = (((((_2525 * _2445) + _801) * cbLight._m0[_2479].z) * _2544) * _2167) + ((((cbLight._m0[_2391].z * _2137) * ((_2441 * _2445) + _801)) * _2465) * _2180);
    float _2612;
    float _2614;
    float _2616;
    if (_2220)
    {
        _2612 = _2554;
        _2614 = _2555;
        _2616 = _2556;
    }
    else
    {
        uint _2618 = _2144 + 2u;
        uint _2622 = _2144 + 10u;
        float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2618].w)) * _728) * 0.949999988079071044921875);
        float _2637 = _2636 * _2636;
        float _2638 = cbLight._m0[_2618].x + _664;
        float _2639 = cbLight._m0[_2618].y + _665;
        float _2640 = cbLight._m0[_2618].z + _666;
        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
        float _2645 = _2644 * _2638;
        float _2646 = _2644 * _2639;
        float _2647 = _2644 * _2640;
        float _2648 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2618].xyz));
        float _4634 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2652 = dot(vec3(_583, _584, _585), vec3(_2645, _2646, _2647));
        float _4645 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2656 = dot(vec3(cbLight._m0[_2618].xyz), vec3(_2645, _2646, _2647));
        float _4656 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _2637 * _2637;
        float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
        float _2671 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
        float _2678 = 1.0 - _2637;
        float _2688 = (0.5 / (((_2420 * ((_2651 * _2678) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2678) + _2637) * _2651))) * _2651;
        float _4667 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2690 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
        float _2691 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2612 = (((((_2671 * _2442) + _798) * cbLight._m0[_2622].x) * _2690) * _2691) + _2554;
        _2614 = (((((_2671 * _2444) + _800) * cbLight._m0[_2622].y) * _2690) * _2691) + _2555;
        _2616 = (((((_2671 * _2445) + _801) * cbLight._m0[_2622].z) * _2690) * _2691) + _2556;
    }
    float _2722;
    float _2724;
    float _2726;
    if (_2329)
    {
        _2722 = _2612;
        _2724 = _2614;
        _2726 = _2616;
    }
    else
    {
        uint _2733 = _2144 + 3u;
        uint _2737 = _2144 + 11u;
        float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2733].w)) * _728) * 0.949999988079071044921875);
        float _2752 = _2751 * _2751;
        float _2753 = cbLight._m0[_2733].x + _664;
        float _2754 = cbLight._m0[_2733].y + _665;
        float _2755 = cbLight._m0[_2733].z + _666;
        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
        float _2760 = _2759 * _2753;
        float _2761 = _2759 * _2754;
        float _2762 = _2759 * _2755;
        float _2763 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2733].xyz));
        float _4683 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2767 = dot(vec3(_583, _584, _585), vec3(_2760, _2761, _2762));
        float _4694 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2771 = dot(vec3(cbLight._m0[_2733].xyz), vec3(_2760, _2761, _2762));
        float _4705 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2775 = _2752 * _2752;
        float _2779 = ((_2770 * _2770) * (_2775 + (-1.0))) + 1.0;
        float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2793 = 1.0 - _2752;
        float _2803 = (0.5 / (((_2420 * ((_2766 * _2793) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2793) + _2752) * _2766))) * _2766;
        float _4716 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2805 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2775 / ((_2779 * _2779) * 3.141590118408203125));
        float _2806 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2722 = (((((_2786 * _2442) + _798) * cbLight._m0[_2737].x) * _2805) * _2806) + _2612;
        _2724 = (((((_2786 * _2444) + _800) * cbLight._m0[_2737].y) * _2805) * _2806) + _2614;
        _2726 = (((((_2786 * _2445) + _801) * cbLight._m0[_2737].z) * _2805) * _2806) + _2616;
    }
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_2142.y == 0u)
    {
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.x;
        uint _2839 = uint((float(_2827.y) * floor(float(uint(cbSceneParam._m0[85u].y * _687) / _2828))) + floor(float(uint(cbSceneParam._m0[85u].x * _686) / _2828)));
        float _2849 = (log2(_1920 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2850 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        uint _2853 = uint(isnan(14.0) ? _2850 : (isnan(_2850) ? 14.0 : min(_2850, 14.0)));
        uvec4 _2858 = texelFetch(g_lightClusterGridBuffer, int(((_2853 << 2u) + (_2839 << 6u)) >> 2u));
        uint _2859 = _2858.x;
        uint _2860 = _2827.z;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        if (((((1u << ((_2860 >> 4u) & 15u)) + 4294967295u) & _2859) == 0u) || ((_2860 & 240u) == 0u))
        {
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
        }
        else
        {
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            uint _3114 = 0u;
            uint _3123;
            bool _3124;
            for (;;)
            {
                _3123 = texelFetch(g_lightClassification, int((((_2853 << 5u) + (_2839 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                _3124 = _3123 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_3124)
                {
                    frontier_phi_75_pred = _3113;
                    frontier_phi_75_pred_1 = _3112;
                    frontier_phi_75_pred_2 = _3111;
                    frontier_phi_75_pred_3 = _3110;
                    frontier_phi_75_pred_4 = _3108;
                    frontier_phi_75_pred_5 = _3109;
                }
                else
                {
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    uint _3259;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3123;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    for (;;)
                    {
                        uint _3263 = uint(findLSB(_3259)) + (_3114 << 5u);
                        uint _3260 = (_3259 + 4294967295u) & _3259;
                        uint _3265 = _3263 * 48u;
                        vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3285 = (_3263 * 48u) + 4u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3304 = (_3263 * 48u) + 8u;
                        vec3 _3315 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x));
                        float _3319 = _3279.x - _1918;
                        float _3320 = _3279.y - _1919;
                        float _3321 = _3279.z - _1920;
                        float _3322 = dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321));
                        float _3325 = inversesqrt(_3322);
                        float _3326 = _3325 * _3319;
                        float _3327 = _3325 * _3320;
                        float _3328 = _3325 * _3321;
                        float _3329 = dot(vec3(_709, _712, _715), vec3(_3326, _3327, _3328));
                        float _3334 = 1.0 - (_3322 * _3279.w);
                        float _4742 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3336 = sqrt(_3322) * _3298.w;
                        float _3339 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3329) + _3340;
                        float _3346 = _3336 * _3336;
                        float _3350 = ((isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))) * _3335) / ((_3346 * 0.699999988079071044921875) + 1.0);
                        float _3354 = (-0.0) - _1918;
                        float _3355 = (-0.0) - _1919;
                        float _3356 = (-0.0) - _1920;
                        float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3370 = exp2(log2(1.0 / ((_3346 * 3.5) + 5.0)) * 0.25);
                        float _3371 = 1.0 - _829;
                        float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3361 + _3326;
                        float _3382 = _3362 + _3327;
                        float _3383 = _3363 + _3328;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_709, _712, _715), vec3(_3361, _3362, _3363));
                        float _4758 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3395 = dot(vec3(_709, _712, _715), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4769 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3339 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3329) + _3404;
                        float _4780 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4791 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3430 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3402 * _3402) * ((_3346 * 2.1991131305694580078125) + 3.141590118408203125))) * _3335;
                        _3183 = (_3350 * _3298.x) + _3256;
                        _3184 = (_3350 * _3298.y) + _3257;
                        _3185 = (_3350 * _3298.z) + _3258;
                        _3180 = (_3430 * _3315.x) + _3253;
                        _3181 = (_3430 * _3315.y) + _3254;
                        _3182 = (_3430 * _3315.z) + _3255;
                        if (_3260 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3260;
                        }
                    }
                    frontier_phi_75_pred = _3185;
                    frontier_phi_75_pred_1 = _3184;
                    frontier_phi_75_pred_2 = _3183;
                    frontier_phi_75_pred_3 = _3182;
                    frontier_phi_75_pred_4 = _3180;
                    frontier_phi_75_pred_5 = _3181;
                }
                _2967 = frontier_phi_75_pred;
                _2965 = frontier_phi_75_pred_1;
                _2963 = frontier_phi_75_pred_2;
                _2961 = frontier_phi_75_pred_3;
                _2957 = frontier_phi_75_pred_4;
                _2959 = frontier_phi_75_pred_5;
                uint _3115 = _3114 + 1u;
                if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3108 = _2957;
                    _3109 = _2959;
                    _3110 = _2961;
                    _3111 = _2963;
                    _3112 = _2965;
                    _3113 = _2967;
                    _3114 = _3115;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
        }
        uvec4 _2970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2971 = _2970.z;
        uint _2973 = (_2971 >> 8u) & 15u;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        if (((4294967295u << _2973) & _2859) == 0u)
        {
            _3076 = _2956;
            _3078 = _2958;
            _3080 = _2960;
            _3082 = _2962;
            _3084 = _2964;
            _3086 = _2966;
        }
        else
        {
            float _3101 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
            float _3102 = _3101 * _1918;
            float _3103 = _3101 * _1919;
            float _3104 = _3101 * _1920;
            float frontier_phi_67_68_ladder;
            float frontier_phi_67_68_ladder_1;
            float frontier_phi_67_68_ladder_2;
            float frontier_phi_67_68_ladder_3;
            float frontier_phi_67_68_ladder_4;
            float frontier_phi_67_68_ladder_5;
            if (_2973 < ((_2971 >> 12u) & 15u))
            {
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3236 = _2956;
                float _3237 = _2958;
                float _3238 = _2960;
                float _3239 = _2962;
                float _3240 = _2964;
                float _3241 = _2966;
                uint _3242 = _2973;
                uint _3251;
                bool _3252;
                for (;;)
                {
                    _3251 = texelFetch(g_lightClassification, int((((_2853 << 5u) + (_2839 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                    _3252 = _3251 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_3252)
                    {
                        frontier_phi_86_pred = _3238;
                        frontier_phi_86_pred_1 = _3237;
                        frontier_phi_86_pred_2 = _3236;
                        frontier_phi_86_pred_3 = _3241;
                        frontier_phi_86_pred_4 = _3240;
                        frontier_phi_86_pred_5 = _3239;
                    }
                    else
                    {
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3457 = _3236;
                        float _3458 = _3237;
                        float _3459 = _3238;
                        float _3460 = _3239;
                        float _3461 = _3240;
                        float _3462 = _3241;
                        uint _3463 = _3251;
                        uint _3464;
                        vec4 _3489;
                        float _3490;
                        vec4 _3505;
                        vec3 _3517;
                        vec4 _3532;
                        vec4 _3547;
                        float _3593;
                        bool _3594;
                        for (;;)
                        {
                            uint _3474 = ((_3242 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3463));
                            _3464 = (_3463 + 4294967295u) & _3463;
                            uint _3476 = _3474 * 40u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3490 = _3489.w;
                            uint _3492 = (_3474 * 40u) + 4u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3474 * 40u) + 8u;
                            _3517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x));
                            uint _3519 = (_3474 * 40u) + 16u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3474 * 40u) + 20u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3474 * 40u) + 24u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3568 = (_3474 * 40u) + 28u;
                            vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3593 = fma(_1920, _3581.z, fma(_1919, _3581.y, _3581.x * _1918)) + _3581.w;
                            _3594 = !((fma(_1920, _3562.z, fma(_1919, _3562.y, _3562.x * _1918)) + _3562.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3594)
                            {
                                float _3621 = _3489.x - _1918;
                                float _3622 = _3489.y - _1919;
                                float _3623 = _3489.z - _1920;
                                float _3624 = dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623));
                                float _3627 = inversesqrt(_3624);
                                float _3628 = _3627 * _3621;
                                float _3629 = _3627 * _3622;
                                float _3630 = _3627 * _3623;
                                float _3634 = 1.0 - (_3624 / (_3490 * _3490));
                                float _4802 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3639 = sqrt(_3624) * _3505.w;
                                float _3641 = 1.39999997615814208984375 / (_3639 + 1.39999997615814208984375);
                                float _3642 = _3641 * _3641;
                                float _3645 = ((1.0 - _3642) * dot(vec3(_3628, _3629, _3630), vec3(_709, _712, _715))) + _3642;
                                float _3648 = _3639 * _3639;
                                float _3652 = (fma(_1920, _3532.z, fma(_1919, _3532.y, _3532.x * _1918)) + _3532.w) / _3593;
                                float _3653 = (fma(_1920, _3547.z, fma(_1919, _3547.y, _3547.x * _1918)) + _3547.w) / _3593;
                                float _3657 = 1.0 - dot(vec2(_3652, _3653), vec2(_3652, _3653));
                                float _4818 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3659 = _3658 * (((isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0))) * _3635) / ((_3648 * 0.699999988079071044921875) + 1.0));
                                float _3671 = exp2(log2(1.0 / ((_3648 * 3.5) + 5.0)) * 0.25);
                                float _3672 = 1.0 - _829;
                                float _3679 = sqrt(1.0 - ((1.0 - (_3672 * _3672)) * (1.0 - (_3671 * _3671))));
                                float _3680 = _3679 * _3679;
                                float _3681 = _3680 * _3680;
                                float _3682 = _3628 - _3102;
                                float _3683 = _3629 - _3103;
                                float _3684 = _3630 - _3104;
                                float _3688 = inversesqrt(dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684)));
                                float _3692 = dot(vec3(_709, _712, _715), vec3((-0.0) - _3102, (-0.0) - _3103, (-0.0) - _3104));
                                float _4829 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3696 = dot(vec3(_709, _712, _715), vec3(_3688 * _3682, _3688 * _3683, _3688 * _3684));
                                float _4840 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3703 = ((_3699 * _3699) * (_3681 + (-1.0))) + 1.0;
                                float _3704 = _3641 * _3680;
                                float _3705 = _3704 * _3704;
                                float _3711 = ((1.0 - _3705) * dot(vec3(_709, _712, _715), vec3(_3628, _3629, _3630))) + _3705;
                                float _4851 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3713 = 1.0 - _3680;
                                float _3723 = (0.5 / (((_3712 * ((_3695 * _3713) + _3680)) + 9.9999999392252902907785028219223e-09) + (((_3712 * _3713) + _3680) * _3695))) * _3712;
                                float _4862 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3733 = (_3658 * _3635) * (((_3681 * 3.1415927410125732421875) * (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) / ((_3703 * _3703) * ((_3648 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3733 * _3517.z;
                                frontier_phi_92_pred_1 = _3733 * _3517.y;
                                frontier_phi_92_pred_2 = _3733 * _3517.x;
                                frontier_phi_92_pred_3 = _3659 * _3505.z;
                                frontier_phi_92_pred_4 = _3659 * _3505.y;
                                frontier_phi_92_pred_5 = _3659 * _3505.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3739 = frontier_phi_92_pred;
                            _3738 = frontier_phi_92_pred_1;
                            _3737 = frontier_phi_92_pred_2;
                            _3742 = frontier_phi_92_pred_3;
                            _3741 = frontier_phi_92_pred_4;
                            _3740 = frontier_phi_92_pred_5;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            if (_3464 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3464;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3446;
                        frontier_phi_86_pred_1 = _3445;
                        frontier_phi_86_pred_2 = _3444;
                        frontier_phi_86_pred_3 = _3449;
                        frontier_phi_86_pred_4 = _3448;
                        frontier_phi_86_pred_5 = _3447;
                    }
                    _3081 = frontier_phi_86_pred;
                    _3079 = frontier_phi_86_pred_1;
                    _3077 = frontier_phi_86_pred_2;
                    _3087 = frontier_phi_86_pred_3;
                    _3085 = frontier_phi_86_pred_4;
                    _3083 = frontier_phi_86_pred_5;
                    uint _3243 = _3242 + 1u;
                    if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3236 = _3077;
                        _3237 = _3079;
                        _3238 = _3081;
                        _3239 = _3083;
                        _3240 = _3085;
                        _3241 = _3087;
                        _3242 = _3243;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_67_68_ladder = _3087;
                frontier_phi_67_68_ladder_1 = _3083;
                frontier_phi_67_68_ladder_2 = _3081;
                frontier_phi_67_68_ladder_3 = _3079;
                frontier_phi_67_68_ladder_4 = _3085;
                frontier_phi_67_68_ladder_5 = _3077;
            }
            else
            {
                frontier_phi_67_68_ladder = _2966;
                frontier_phi_67_68_ladder_1 = _2962;
                frontier_phi_67_68_ladder_2 = _2960;
                frontier_phi_67_68_ladder_3 = _2958;
                frontier_phi_67_68_ladder_4 = _2964;
                frontier_phi_67_68_ladder_5 = _2956;
            }
            _3076 = frontier_phi_67_68_ladder_5;
            _3078 = frontier_phi_67_68_ladder_3;
            _3080 = frontier_phi_67_68_ladder_2;
            _3082 = frontier_phi_67_68_ladder_1;
            _3084 = frontier_phi_67_68_ladder_4;
            _3086 = frontier_phi_67_68_ladder;
        }
        float _3091 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
        _2871 = (_3091 * _3082) + _2384;
        _2873 = (_3091 * _3084) + _2386;
        _2875 = (_3091 * _3086) + _2388;
        _2877 = ((_3076 * _798) * _3091) + _2722;
        _2879 = ((_3078 * _800) * _3091) + _2724;
        _2881 = ((_3080 * _801) * _3091) + _2726;
    }
    else
    {
        _2871 = _2384;
        _2873 = _2386;
        _2875 = _2388;
        _2877 = _2722;
        _2879 = _2724;
        _2881 = _2726;
    }
    vec4 _2887 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4878 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4889 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4900 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _2911 = (((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2871 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _813))) + ((_2877 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1652)) * cbPerFrame._m0[3u].x)) + (_2887.x * cbMtdParam._m0[3u].x);
    float _2913 = ((_2887.y * cbMtdParam._m0[3u].x) + ((_2879 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1652)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2873 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _813)));
    float _2915 = ((_2887.z * cbMtdParam._m0[3u].x) + ((_2881 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1652)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2875 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _813)));
    float _2916 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2917 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
    float _2918 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
    uint _2919 = _741 + 6u;
    float _2927 = _686 / cbSceneParam._m0[86u].x;
    float _2928 = _687 / cbSceneParam._m0[86u].y;
    vec4 _2942 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, (log2((isnan(cbSceneParam._m0[77u].w) ? _606 : (isnan(_606) ? cbSceneParam._m0[77u].w : min(_606, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2944 = _2942.x;
    float _2945 = _2942.y;
    float _2946 = _2942.z;
    float _2947 = _2942.w;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_606 > cbSceneParam._m0[78u].w)
    {
        float _2981 = isnan(_606) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _606 : min(cbSceneParam._m0[80u].w, _606));
        float _2982 = _2981 / _606;
        float _2993 = _2982 * _657;
        float _2994 = _658 * _2982;
        float _2995 = (-0.0) - _2994;
        float _2996 = _2982 * _659;
        float _2998 = (cbSceneParam._m0[77u].w * _2995) / _2981;
        float _2999 = _2998 + cbSceneParam._m0[79u].w;
        float _3000 = cbSceneParam._m0[79u].w - _2994;
        float _3006 = sqrt(((_2993 * _2993) + (_2994 * _2994)) + (_2996 * _2996));
        float _3009 = (1.0 - (cbSceneParam._m0[77u].w / _2981)) * _3006;
        float _3014 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3016 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3193;
        if (abs((_2995 - _2998) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3193 = ((((_2999 > 0.0) ? exp2(_3014 * _2999) : (2.0 - exp2(_3016 * _2999))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3009;
        }
        else
        {
            float _3137 = 1.0 / cbSceneParam._m0[80u].x;
            float _3138 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : max(_2999, _3000));
            float _3139 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : min(_2999, _3000));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            float _3149 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : min(_3139, 0.0));
            _3193 = ((abs(_3006 / _2995) * cbSceneParam._m0[80u].y) * ((((_3148 - _3149) * 2.0) - ((exp2(_3014 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0)))) - exp2(_3014 * (isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))))) * _3137)) - ((exp2(_3016 * _3148) - exp2(_3016 * _3149)) * _3137))) + (_3009 * cbSceneParam._m0[80u].z);
        }
        vec4 _3195 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, 1.0), 0.0);
        float _3204 = exp2((_3193 * (-1.44269502162933349609375)) * (1.0 - _3195.w));
        float _3205 = log2(_3204);
        float _3221 = log2(_2947);
        _3018 = (exp2(_3221 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].x)) * _3195.x) / cbSceneParam._m0[78u].x)) + _2944;
        _3020 = (exp2(_3221 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].y)) * _3195.y) / cbSceneParam._m0[78u].y)) + _2945;
        _3022 = (exp2(_3221 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].z)) * _3195.z) / cbSceneParam._m0[78u].z)) + _2946;
        _3024 = _3204 * _2947;
    }
    else
    {
        _3018 = _2944;
        _3020 = _2945;
        _3022 = _2946;
        _3024 = _2947;
    }
    bool _3231;
    vec4 _3034;
    vec4 _3056;
    float _3058;
    float _3062;
    float _3063;
    float _3064;
    float _3065;
    bool _3075;
    for (;;)
    {
        _3034 = cbMatDynParam._m0[0u];
        float _3036 = roundEven(_3034.y);
        bool _3037 = _3036 == 3.0;
        float _3038 = log2(_3024);
        float _3045 = exp2(_3038 * cbSceneParam._m0[78u].x) * _2916;
        float _3046 = exp2(_3038 * cbSceneParam._m0[78u].y) * _2917;
        float _3047 = exp2(_3038 * cbSceneParam._m0[78u].z) * _2918;
        float _3054 = _673 + (-0.5);
        _3056 = cbMtdParam._m0[1u];
        _3058 = _3056.y * _3054;
        float _3061 = (_3036 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3062 = _3061 * (_3037 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3018)));
        _3063 = _3061 * (_3037 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3020)));
        _3064 = _3061 * (_3037 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3022)));
        _3065 = _3054 * 0.999000012874603271484375;
        _3075 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3075)
        {
            if ((cbInstanceData._m0[_741 + 7u].x + _3065) < 0.5)
            {
                _3231 = true;
                break;
            }
        }
        uint _3172 = _742 + uint(_3034.w);
        if ((cbInstanceData._m0[_3172].w < 1.0) && ((cbInstanceData._m0[_3172].w + _3065) < 0.5))
        {
            _3231 = true;
            break;
        }
        if ((_3058 + 1.0) < _3056.x)
        {
            _3231 = true;
            break;
        }
        _3231 = false;
        break;
    }
    float _3435;
    if (_3231)
    {
        discard_state = true;
        _3435 = 0.0;
    }
    else
    {
        _3435 = cbInstanceData._m0[_2919].w;
    }
    SV_Target.x = _3062;
    SV_Target.y = _3063;
    SV_Target.z = _3064;
    SV_Target.w = _3435;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2919].w;
    discard_exit();
}


