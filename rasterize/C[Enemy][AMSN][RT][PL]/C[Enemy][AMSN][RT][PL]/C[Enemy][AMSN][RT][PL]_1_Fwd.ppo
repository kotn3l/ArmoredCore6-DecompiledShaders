#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1149;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    float _261 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _263 = log2(0.0);
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[14u].x;
    _188[0u] = cbMtdParam._m0[14u].y;
    _189[0u] = cbMtdParam._m0[14u].z;
    _187[1u] = cbMtdParam._m0[15u].x;
    _188[1u] = cbMtdParam._m0[15u].y;
    _189[1u] = cbMtdParam._m0[15u].z;
    _187[2u] = cbMtdParam._m0[16u].x;
    _188[2u] = cbMtdParam._m0[16u].y;
    _189[2u] = cbMtdParam._m0[16u].z;
    _187[3u] = cbMtdParam._m0[11u].x;
    _188[3u] = cbMtdParam._m0[11u].y;
    _189[3u] = cbMtdParam._m0[11u].z;
    _187[4u] = cbMtdParam._m0[12u].x;
    _188[4u] = cbMtdParam._m0[12u].y;
    _189[4u] = cbMtdParam._m0[12u].z;
    _187[5u] = cbMtdParam._m0[13u].x;
    _188[5u] = cbMtdParam._m0[13u].y;
    _189[5u] = cbMtdParam._m0[13u].z;
    vec4 _335 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _339 = _335.y;
    float _342 = (_335.x + (-0.02500000037252902984619140625)) * 8.0;
    float _344 = roundEven(_342);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    uint _348 = uint(int(isnan(5.0) ? _345 : (isnan(_345) ? 5.0 : min(_345, 5.0))));
    float _365 = roundEven(5.0 - _342);
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _367 = isnan(4.0) ? _366 : (isnan(_366) ? 4.0 : min(_366, 4.0));
    float _373;
    float _375;
    if (exp2(_263 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _373 = cbMtdParam._m0[26u].x;
        _375 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _373 = cbMtdParam._m0[22u].x;
        _375 = cbMtdParam._m0[22u].y;
    }
    float _377 = _373 * TEXCOORD.x;
    float _378 = _375 * TEXCOORD.y;
    float _389 = floor(_367);
    vec4 _392 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _377) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _378) + cbTextureTilingScale._m0[6u].w, _389));
    vec4 _414 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _261) + cbTextureTilingScale._m0[0u].w));
    float _422 = ((((((_187[_348] - cbMtdParam._m0[18u].x) * _339) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _392.x) * cbMtdParam._m0[9u].x) * _414.x;
    float _426 = ((((((_188[_348] - cbMtdParam._m0[18u].y) * _339) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _392.y) * cbMtdParam._m0[9u].y) * _414.y;
    float _430 = ((((((_189[_348] - cbMtdParam._m0[18u].z) * _339) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _392.z) * cbMtdParam._m0[9u].z) * _414.z;
    vec4 _442 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _261) + cbTextureTilingScale._m0[1u].w));
    float _446 = _442.z;
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[22u].z;
    _183[0u] = cbMtdParam._m0[22u].w;
    _182[1u] = cbMtdParam._m0[23u].z;
    _183[1u] = cbMtdParam._m0[23u].w;
    _182[2u] = cbMtdParam._m0[24u].x;
    _183[2u] = cbMtdParam._m0[24u].y;
    _182[3u] = cbMtdParam._m0[24u].z;
    _183[3u] = cbMtdParam._m0[24u].w;
    _182[4u] = cbMtdParam._m0[23u].x;
    _183[4u] = cbMtdParam._m0[23u].y;
    float _490 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    uint _492 = uint(int(isnan(4.0) ? _490 : (isnan(_490) ? 4.0 : min(_490, 4.0))));
    float _497 = _183[_492] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _377) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _378) + cbTextureTilingScale._m0[8u].w, _389)).x;
    vec4 _516 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _377) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _378) + cbTextureTilingScale._m0[7u].w, _389));
    float _523 = (_516.x * 2.0) + (-1.0);
    float _524 = (_516.y * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3525 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _531 = sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))));
    float _540 = (cbMtdParam._m0[20u].x * (((_446 * 2.0) * (_516.z + _182[_492])) - _446)) + _446;
    float _544 = (cbMtdParam._m0[20u].y * ((_442.x * 2.0) + (-1.0))) + _523;
    float _545 = (cbMtdParam._m0[20u].y * ((_442.y * 2.0) + (-1.0))) + _524;
    float _548 = fma(_531, _239, fma(_545, _231 * TANGENT.x, (_217 * _209) * _544));
    float _551 = fma(_531, _240, fma(_545, _231 * TANGENT.y, (_217 * _210) * _544));
    float _554 = fma(_531, _241, fma(_545, _231 * TANGENT.z, (_217 * _211) * _544));
    float _558 = inversesqrt(dot(vec3(_548, _551, _554), vec3(_548, _551, _554)));
    float _559 = _558 * _548;
    float _560 = _558 * _551;
    float _561 = _558 * _554;
    float _3536 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _562 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3558 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3569 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3580 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _566 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _582 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _633 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _623);
    float _634 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _623);
    float _635 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _623);
    float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
    float _640 = _633 * _639;
    float _641 = _634 * _639;
    float _642 = _635 * _639;
    float _648 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _649 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _651 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _653 = _651.w;
    float _671 = fma(_561, cbSceneParam._m0[5u].z, fma(_560, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _559));
    float _674 = fma(_561, cbSceneParam._m0[6u].z, fma(_560, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _559));
    float _677 = fma(_561, cbSceneParam._m0[7u].z, fma(_560, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _559));
    vec4 _679 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _690 = (((_679.y - _562) + (_679.w * _562)) * cbMtdParam._m0[3u].x) + _562;
    uint _703 = uint(roundEven(NORMAL.w)) * 13u;
    uint _705 = (_703 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _711 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_705].x;
    float _712 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_705].y;
    float _713 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_705].z;
    float _3591 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    vec4 _717 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _722 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _733 = (((_722.x - _566) + (_722.w * _566)) * cbMtdParam._m0[3u].x) + _566;
    float _746 = (cbMtdParam._m0[3u].x * (((_714 * _653) - _714) + _717.x)) + _714;
    float _747 = (cbMtdParam._m0[3u].x * (((_715 * _653) - _715) + _717.y)) + _715;
    float _748 = (cbMtdParam._m0[3u].x * (((_716 * _653) - _716) + _717.z)) + _716;
    float _749 = 1.0 - _733;
    float _750 = _749 * _746;
    float _751 = _749 * _747;
    float _752 = _749 * _748;
    float _757 = (_746 + (-0.039999999105930328369140625)) * _733;
    float _758 = (_747 + (-0.039999999105930328369140625)) * _733;
    float _759 = (_748 + (-0.039999999105930328369140625)) * _733;
    float _760 = _757 + 0.039999999105930328369140625;
    float _762 = _758 + 0.039999999105930328369140625;
    float _763 = _759 + 0.039999999105930328369140625;
    vec4 _772 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _648, cbSceneParam._m0[86u].y * _649));
    float _775 = _772.x * TEXCOORD_4;
    float _776 = dot(vec3(_559, _560, _561), vec3(_640, _641, _642));
    float _779 = _776 * 2.0;
    float _783 = (_779 * _559) - _640;
    float _784 = (_779 * _560) - _641;
    float _785 = (_779 * _561) - _642;
    float _789 = abs(dot(vec3(_640, _641, _642), vec3(_559, _560, _561)));
    float _3624 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _791 = sqrt(_690);
    float _802 = exp2((_791 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_791 * 3.0));
    float _808 = (1.0 - _802) * ((_791 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _809 = _802 * _791;
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1148;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _873 = fma(_845, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837));
        float _877 = fma(_845, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837));
        float _881 = fma(_845, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837));
        float _906 = _837 + _559;
        float _907 = _841 + _560;
        float _908 = _845 + _561;
        float _918 = fma(_908, cbModelParam._m0[26u].z, fma(_907, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _906)) - _873;
        float _919 = fma(_908, cbModelParam._m0[27u].z, fma(_907, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _906)) - _877;
        float _920 = fma(_908, cbModelParam._m0[28u].z, fma(_907, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _906)) - _881;
        float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
        float _937 = ((_924 * _918) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_873 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_924 * _919) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_877 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_924 * _920) / cbModelParam._m0[34u].z) + ((((((_881 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        float _976 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_942.x + (-0.5));
        float _978 = _976 * (_942.y + (-0.5));
        float _979 = _976 * (_942.z + (-0.5));
        float _986 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_949.x + (-0.5));
        float _988 = _986 * (_949.y + (-0.5));
        float _989 = _986 * (_949.z + (-0.5));
        float _996 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_956.x + (-0.5));
        float _998 = _996 * (_956.y + (-0.5));
        float _999 = _996 * (_956.z + (-0.5));
        float _1006 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_963.x + (-0.5));
        float _1008 = _1006 * (_963.y + (-0.5));
        float _1009 = _1006 * (_963.z + (-0.5));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = _977 * 0.5;
        float _1014 = _987 * 0.5;
        float _1015 = _997 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1030 = (dot(vec3(_559, _560, _561), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1040 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3672 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1042 + 1.0))) + _1047) * _1010;
        float _1057 = _978 * 0.5;
        float _1058 = _988 * 0.5;
        float _1059 = _998 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_559, _560, _561), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3705 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1084 + 1.0))) + _1089) * _1011;
        float _1099 = _979 * 0.5;
        float _1100 = _989 * 0.5;
        float _1101 = _999 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_559, _560, _561), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3738 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1126 + 1.0))) + _1131) * _1012;
        _1148 = _979;
        _1150 = _978;
        _1151 = _977;
        _1152 = _989;
        _1153 = _988;
        _1154 = _987;
        _1155 = _999;
        _1156 = _998;
        _1157 = _997;
        _1158 = _1012;
        _1159 = _1011;
        _1160 = _1010;
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
    }
    else
    {
        _1148 = _1149;
        _1150 = _1149;
        _1151 = _1149;
        _1152 = _1149;
        _1153 = _1149;
        _1154 = _1149;
        _1155 = _1149;
        _1156 = _1149;
        _1157 = _1149;
        _1158 = _1149;
        _1159 = _1149;
        _1160 = _1149;
        _1161 = 0.0;
        _1162 = 0.0;
        _1163 = 0.0;
    }
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1189 = fma(_845, cbModelParam._m0[30u].z, fma(_841, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _837));
        float _1193 = fma(_845, cbModelParam._m0[31u].z, fma(_841, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _837));
        float _1197 = fma(_845, cbModelParam._m0[32u].z, fma(_841, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _837));
        float _1220 = _837 + _559;
        float _1221 = _841 + _560;
        float _1222 = _845 + _561;
        float _1232 = fma(_1222, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1220)) - _1189;
        float _1233 = fma(_1222, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1220)) - _1193;
        float _1234 = fma(_1222, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1220)) - _1197;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1189 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1193 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[35u].z) + ((((((_1197 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1288 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1255.x + (-0.5));
        float _1290 = _1288 * (_1255.y + (-0.5));
        float _1291 = _1288 * (_1255.z + (-0.5));
        float _1298 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1262.x + (-0.5));
        float _1300 = _1298 * (_1262.y + (-0.5));
        float _1301 = _1298 * (_1262.z + (-0.5));
        float _1308 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1269.x + (-0.5));
        float _1310 = _1308 * (_1269.y + (-0.5));
        float _1311 = _1308 * (_1269.z + (-0.5));
        float _1318 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1276.x + (-0.5));
        float _1320 = _1318 * (_1276.y + (-0.5));
        float _1321 = _1318 * (_1276.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_559, _560, _561), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3801 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1352 + 1.0))) + _1357) * _1322;
        float _1367 = _1290 * 0.5;
        float _1368 = _1300 * 0.5;
        float _1369 = _1310 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_559, _560, _561), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3834 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1394 + 1.0))) + _1399) * _1323;
        float _1409 = _1291 * 0.5;
        float _1410 = _1301 * 0.5;
        float _1411 = _1311 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_559, _560, _561), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _3867 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1436 + 1.0))) + _1441) * _1324;
        _1458 = _1291;
        _1459 = _1290;
        _1460 = _1289;
        _1461 = _1301;
        _1462 = _1300;
        _1463 = _1299;
        _1464 = _1311;
        _1465 = _1310;
        _1466 = _1309;
        _1467 = _1324;
        _1468 = _1323;
        _1469 = _1322;
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1149;
        _1459 = _1149;
        _1460 = _1149;
        _1461 = _1149;
        _1462 = _1149;
        _1463 = _1149;
        _1464 = _1149;
        _1465 = _1149;
        _1466 = _1149;
        _1467 = _1149;
        _1468 = _1149;
        _1469 = _1149;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1161)) + _1161;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1162)) + _1162;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1163)) + _1163;
    float _1505 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1482));
    float _1526 = _783 * 0.5;
    float _1527 = _784 * 0.5;
    float _1528 = _785 * 0.5;
    float _1529 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1532 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1535 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1569;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1542 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1148, _1152, _1155, _1158));
        float _1546 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1150, _1153, _1156, _1159));
        float _1550 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1151, _1154, _1157, _1160));
        float _1557 = dot(vec4(cbModelParam._m0[39u]), vec4(_1526, _1527, _1528, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1580;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1571 = dot(vec4(cbModelParam._m0[40u]), vec4(_1526, _1527, _1528, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1584 = (_1580 * cbModelParam._m0[1u].x) + (_1569 * (1.0 - cbModelParam._m0[1u].x));
    float _1594 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _690);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1594 : min(cbModelParam._m0[25u].z, _1594));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1642 = fma(_845, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837)) + cbModelParam._m0[13u].w;
        float _1646 = fma(_845, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837)) + cbModelParam._m0[14u].w;
        float _1650 = fma(_845, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837)) + cbModelParam._m0[15u].w;
        float _1653 = fma(_785, cbModelParam._m0[13u].z, fma(_784, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _783));
        float _1656 = fma(_785, cbModelParam._m0[14u].z, fma(_784, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _783));
        float _1659 = fma(_785, cbModelParam._m0[15u].z, fma(_784, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _783));
        float _1687;
        if (_1653 > 0.0)
        {
            _1687 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1687 = frontier_phi_18_16_ladder;
        }
        float _1889;
        if (_1656 > 0.0)
        {
            _1889 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1889 = frontier_phi_27_23_ladder;
        }
        float _2143;
        if (_1659 > 0.0)
        {
            _2143 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2143 = frontier_phi_39_34_ladder;
        }
        float _2145 = isnan(_1889) ? _1687 : (isnan(_1687) ? _1889 : min(_1687, _1889));
        float _2146 = isnan(_2143) ? _2145 : (isnan(_2145) ? _2143 : min(_2145, _2143));
        float _2150 = (_2146 * _1653) + _1642;
        float _2151 = (_2146 * _1656) + _1646;
        float _2152 = (_2146 * _1659) + _1650;
        float _2153 = _2146 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2153;
        float _2157 = _2153 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 > _2157) || ((_2151 < _2155) || ((_2150 < _2155) || (_2150 > _2157))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2280 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2152, cbModelParam._m0[9u].z, fma(_2151, cbModelParam._m0[9u].y, _2150 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2152, cbModelParam._m0[10u].z, fma(_2151, cbModelParam._m0[10u].y, _2150 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2152, cbModelParam._m0[11u].z, fma(_2151, cbModelParam._m0[11u].y, _2150 * cbModelParam._m0[11u].x))), _1595);
            frontier_phi_17_39_ladder = _2280.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2280.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2280.x * cbModelParam._m0[1u].y;
        }
        _1675 = frontier_phi_17_39_ladder_2;
        _1677 = frontier_phi_17_39_ladder_1;
        _1679 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_783, _784, _785), _1595);
        _1675 = _1663.x * cbModelParam._m0[1u].y;
        _1677 = _1663.y * cbModelParam._m0[1u].y;
        _1679 = _1663.z * cbModelParam._m0[1u].y;
    }
    float _1683 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _690);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1683 : min(cbModelParam._m0[25u].w, _1683));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1737 = fma(_845, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837)) + cbModelParam._m0[21u].w;
        float _1741 = fma(_845, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837)) + cbModelParam._m0[22u].w;
        float _1745 = fma(_845, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837)) + cbModelParam._m0[23u].w;
        float _1748 = fma(_785, cbModelParam._m0[21u].z, fma(_784, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _783));
        float _1751 = fma(_785, cbModelParam._m0[22u].z, fma(_784, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _783));
        float _1754 = fma(_785, cbModelParam._m0[23u].z, fma(_784, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _783));
        float _1894;
        if (_1748 > 0.0)
        {
            _1894 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1894 = frontier_phi_29_25_ladder;
        }
        float _2170;
        if (_1751 > 0.0)
        {
            _2170 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2170 = frontier_phi_41_36_ladder;
        }
        float _2383;
        if (_1754 > 0.0)
        {
            _2383 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2383 = frontier_phi_50_47_ladder;
        }
        float _2385 = isnan(_2170) ? _1894 : (isnan(_1894) ? _2170 : min(_1894, _2170));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1748) + _1737;
        float _2391 = (_2386 * _1751) + _1741;
        float _2392 = (_2386 * _1754) + _1745;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2392, cbModelParam._m0[17u].z, fma(_2391, cbModelParam._m0[17u].y, _2390 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2392, cbModelParam._m0[18u].z, fma(_2391, cbModelParam._m0[18u].y, _2390 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2392, cbModelParam._m0[19u].z, fma(_2391, cbModelParam._m0[19u].y, _2390 * cbModelParam._m0[19u].x))), _1684);
            frontier_phi_26_50_ladder = _2608.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2608.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2608.x * cbModelParam._m0[1u].z;
        }
        _1773 = frontier_phi_26_50_ladder_2;
        _1775 = frontier_phi_26_50_ladder_1;
        _1777 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_783, _784, _785), _1684);
        _1773 = _1757.x * cbModelParam._m0[1u].z;
        _1775 = _1757.y * cbModelParam._m0[1u].z;
        _1777 = _1757.z * cbModelParam._m0[1u].z;
    }
    float _1790 = (((_808 * _760) + _809) * _775) * ((cbModelParam._m0[1u].w * (_1773 - _1675)) + _1675);
    float _1792 = (((_808 * _762) + _809) * _775) * ((cbModelParam._m0[1u].w * (_1775 - _1677)) + _1677);
    float _1794 = (((_808 * _763) + _809) * _775) * ((cbModelParam._m0[1u].w * (_1777 - _1679)) + _1679);
    float _1797 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, _1790 * cbSceneParam._m0[91u].x));
    uvec4 _1813 = floatBitsToUint(cbInstanceData._m0[_703 + 5u]);
    uint _1815 = _1813.x * 14u;
    uint _1816 = _1815 + 13u;
    float _1823 = _775 + (-1.0);
    float _1828 = (cbLight._m0[_1816].x * _1823) + 1.0;
    float _1829 = (cbLight._m0[_1816].y * _1823) + 1.0;
    float _1830 = (cbLight._m0[_1816].z * _1823) + 1.0;
    float _1831 = (cbLight._m0[_1816].w * _1823) + 1.0;
    uint _1832 = _1815 + 5u;
    float _1838 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1842 = _1815 + 4u;
    float _1848 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1852 = _1815 | 1u;
    float _1863 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_559, _560, _561));
    float _1866 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_559, _560, _561));
    float _4003 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _4014 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1871 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1873 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.3183098733425140380859375;
    float _1880 = ((cbLight._m0[_1832].x * _1838) * _1873) + ((cbLight._m0[_1842].x * _1848) * _1871);
    float _1881 = ((_1838 * cbLight._m0[_1832].y) * _1873) + ((_1848 * cbLight._m0[_1842].y) * _1871);
    float _1882 = ((_1838 * cbLight._m0[_1832].z) * _1873) + ((_1848 * cbLight._m0[_1842].z) * _1871);
    uvec4 _1886 = floatBitsToUint(cbLight._m0[_1815 + 12u]);
    bool _1888 = _1886.x == 0u;
    float _1899;
    float _1901;
    float _1903;
    if (_1888)
    {
        _1899 = _1880;
        _1901 = _1881;
        _1903 = _1882;
    }
    else
    {
        uint _1907 = _1815 + 6u;
        float _1923 = (dot(vec3(cbLight._m0[_1815 + 2u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _1924 = _1923 * _1923;
        float _4025 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1926 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _1899 = (((cbLight._m0[_1907].x * 0.3183098733425140380859375) * _1925) * _1926) + _1880;
        _1901 = (((cbLight._m0[_1907].y * 0.3183098733425140380859375) * _1925) * _1926) + _1881;
        _1903 = (((cbLight._m0[_1907].z * 0.3183098733425140380859375) * _1925) * _1926) + _1882;
    }
    bool _1906 = _1886.y == 0u;
    float _1944;
    float _1946;
    float _1948;
    if (_1906)
    {
        _1944 = _1899;
        _1946 = _1901;
        _1948 = _1903;
    }
    else
    {
        uint _2114 = _1815 + 7u;
        float _2130 = (dot(vec3(cbLight._m0[_1815 + 3u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _2131 = _2130 * _2130;
        float _4041 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2132 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2133 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1944 = (((cbLight._m0[_2114].x * 0.3183098733425140380859375) * _2132) * _2133) + _1899;
        _1946 = (((cbLight._m0[_2114].y * 0.3183098733425140380859375) * _2132) * _2133) + _1901;
        _1948 = (((cbLight._m0[_2114].z * 0.3183098733425140380859375) * _2132) * _2133) + _1903;
    }
    uint _1951 = _1815 + 8u;
    float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _690) * 0.949999988079071044921875);
    float _1965 = _1964 * _1964;
    float _1966 = cbLight._m0[_1815].x + _640;
    float _1967 = cbLight._m0[_1815].y + _641;
    float _1968 = cbLight._m0[_1815].z + _642;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1973 = _1972 * _1966;
    float _1974 = _1972 * _1967;
    float _1975 = _1972 * _1968;
    float _1976 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_1815].xyz));
    float _4057 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _1980 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1981 = dot(vec3(_559, _560, _561), vec3(_1973, _1974, _1975));
    float _4079 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_1973, _1974, _1975));
    float _4090 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1965 * _1965;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2001 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
    float _2002 = 0.959999978542327880859375 - _757;
    float _2004 = 0.959999978542327880859375 - _758;
    float _2005 = 0.959999978542327880859375 - _759;
    float _2012 = 1.0 - _1965;
    float _2023 = (0.5 / (((_1980 * ((_1979 * _2012) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2012) + _1965) * _1979))) * _1979;
    float _4101 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2025 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    uint _2036 = _1815 + 9u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _690) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1852].x + _640;
    float _2050 = cbLight._m0[_1852].y + _641;
    float _2051 = cbLight._m0[_1852].z + _642;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_1852].xyz));
    float _4112 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2063 = dot(vec3(_559, _560, _561), vec3(_2056, _2057, _2058));
    float _4123 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2056, _2057, _2058));
    float _4134 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2048 * _2048;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2082 = exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0);
    float _2089 = 1.0 - _2048;
    float _2099 = (0.5 / (((_1980 * ((_2062 * _2089) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2089) + _2048) * _2062))) * _2062;
    float _4145 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2101 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    float _2111 = (((((_2082 * _2002) + _760) * cbLight._m0[_2036].x) * _2101) * _1838) + (((((_2001 * _2002) + _760) * cbLight._m0[_1951].x) * _2025) * _1848);
    float _2112 = (((((_2082 * _2004) + _762) * cbLight._m0[_2036].y) * _2101) * _1838) + (((((_2001 * _2004) + _762) * cbLight._m0[_1951].y) * _2025) * _1848);
    float _2113 = (((((_2082 * _2005) + _763) * cbLight._m0[_2036].z) * _2101) * _1838) + (((((_2001 * _2005) + _763) * cbLight._m0[_1951].z) * _2025) * _1848);
    float _2175;
    float _2177;
    float _2179;
    if (_1888)
    {
        _2175 = _2111;
        _2177 = _2112;
        _2179 = _2113;
    }
    else
    {
        uint _2181 = _1815 + 2u;
        uint _2185 = _1815 + 10u;
        float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _690) * 0.949999988079071044921875);
        float _2200 = _2199 * _2199;
        float _2201 = cbLight._m0[_2181].x + _640;
        float _2202 = cbLight._m0[_2181].y + _641;
        float _2203 = cbLight._m0[_2181].z + _642;
        float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
        float _2208 = _2207 * _2201;
        float _2209 = _2207 * _2202;
        float _2210 = _2207 * _2203;
        float _2211 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2181].xyz));
        float _4156 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2215 = dot(vec3(_559, _560, _561), vec3(_2208, _2209, _2210));
        float _4167 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2219 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2208, _2209, _2210));
        float _4178 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2223 = _2200 * _2200;
        float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
        float _2234 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
        float _2241 = 1.0 - _2200;
        float _2251 = (0.5 / (((_1980 * ((_2214 * _2241) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2241) + _2200) * _2214))) * _2214;
        float _4189 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2253 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
        float _2254 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _2175 = (((((_2234 * _2002) + _760) * cbLight._m0[_2185].x) * _2253) * _2254) + _2111;
        _2177 = (((((_2234 * _2004) + _762) * cbLight._m0[_2185].y) * _2253) * _2254) + _2112;
        _2179 = (((((_2234 * _2005) + _763) * cbLight._m0[_2185].z) * _2253) * _2254) + _2113;
    }
    float _2289;
    float _2291;
    float _2293;
    if (_1906)
    {
        _2289 = _2175;
        _2291 = _2177;
        _2293 = _2179;
    }
    else
    {
        uint _2300 = _1815 + 3u;
        uint _2304 = _1815 + 11u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _690) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _640;
        float _2321 = cbLight._m0[_2300].y + _641;
        float _2322 = cbLight._m0[_2300].z + _642;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2300].xyz));
        float _4205 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2334 = dot(vec3(_559, _560, _561), vec3(_2327, _2328, _2329));
        float _4216 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4227 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
        float _2360 = 1.0 - _2319;
        float _2370 = (0.5 / (((_1980 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2360) + _2319) * _2333))) * _2333;
        float _4238 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2289 = (((((_2353 * _2002) + _760) * cbLight._m0[_2304].x) * _2372) * _2373) + _2175;
        _2291 = (((((_2353 * _2004) + _762) * cbLight._m0[_2304].y) * _2372) * _2373) + _2177;
        _2293 = (((((_2353 * _2005) + _763) * cbLight._m0[_2304].z) * _2372) * _2373) + _2179;
    }
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    if (_1813.y == 0u)
    {
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2448;
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2448;
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2448;
        uvec4 _2463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2464 = _2463.x;
        uint _2475 = uint((float(_2463.y) * floor(float(uint(cbSceneParam._m0[85u].y * _649) / _2464))) + floor(float(uint(cbSceneParam._m0[85u].x * _648) / _2464)));
        float _2485 = (log2(_2451 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2486 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        uint _2489 = uint(isnan(14.0) ? _2486 : (isnan(_2486) ? 14.0 : min(_2486, 14.0)));
        uvec4 _2494 = texelFetch(g_lightClusterGridBuffer, int(((_2489 << 2u) + (_2475 << 6u)) >> 2u));
        uint _2495 = _2494.x;
        uint _2496 = _2463.z;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        if (((((1u << ((_2496 >> 4u) & 15u)) + 4294967295u) & _2495) == 0u) || ((_2496 & 240u) == 0u))
        {
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
        }
        else
        {
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            uint _2763 = 0u;
            uint _2772;
            bool _2773;
            for (;;)
            {
                _2772 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                _2773 = _2772 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2773)
                {
                    frontier_phi_65_pred = _2762;
                    frontier_phi_65_pred_1 = _2761;
                    frontier_phi_65_pred_2 = _2760;
                    frontier_phi_65_pred_3 = _2759;
                    frontier_phi_65_pred_4 = _2758;
                    frontier_phi_65_pred_5 = _2757;
                }
                else
                {
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    uint _2887;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2772;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    for (;;)
                    {
                        uint _2891 = uint(findLSB(_2887)) + (_2763 << 5u);
                        uint _2888 = (_2887 + 4294967295u) & _2887;
                        uint _2893 = _2891 * 48u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 3u)).x));
                        uint _2913 = (_2891 * 48u) + 4u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2932 = (_2891 * 48u) + 8u;
                        vec3 _2943 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x));
                        float _2947 = _2907.x - _2449;
                        float _2948 = _2907.y - _2450;
                        float _2949 = _2907.z - _2451;
                        float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                        float _2953 = inversesqrt(_2950);
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2957 = dot(vec3(_671, _674, _677), vec3(_2954, _2955, _2956));
                        float _2962 = 1.0 - (_2950 * _2907.w);
                        float _4264 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2964 = sqrt(_2950) * _2926.w;
                        float _2967 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2957) + _2968;
                        float _2974 = _2964 * _2964;
                        float _2978 = ((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2963) / ((_2974 * 0.699999988079071044921875) + 1.0);
                        float _2982 = (-0.0) - _2449;
                        float _2983 = (-0.0) - _2450;
                        float _2984 = (-0.0) - _2451;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2999 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                        float _3000 = 1.0 - _791;
                        float _3007 = sqrt(1.0 - ((1.0 - (_3000 * _3000)) * (1.0 - (_2999 * _2999))));
                        float _3008 = _3007 * _3007;
                        float _3009 = _3008 * _3008;
                        float _3010 = _2989 + _2954;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3020 = dot(vec3(_671, _674, _677), vec3(_2989, _2990, _2991));
                        float _4280 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3024 = dot(vec3(_671, _674, _677), vec3(_3016 * _3010, _3016 * _3011, _3016 * _3012));
                        float _4291 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3031 = ((_3027 * _3027) * (_3009 + (-1.0))) + 1.0;
                        float _3032 = _2967 * _3008;
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _2957) + _3033;
                        float _4302 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3038 = 1.0 - _3008;
                        float _3048 = (0.5 / (((_3037 * ((_3023 * _3038) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_3037 * _3038) + _3008) * _3023))) * _3037;
                        float _4313 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3059 = (((_3009 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_3031 * _3031) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125))) * _2963;
                        _2816 = (_2978 * _2926.x) + _2884;
                        _2817 = (_2978 * _2926.y) + _2885;
                        _2818 = (_2978 * _2926.z) + _2886;
                        _2813 = (_3059 * _2943.x) + _2881;
                        _2814 = (_3059 * _2943.y) + _2882;
                        _2815 = (_3059 * _2943.z) + _2883;
                        if (_2888 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2888;
                        }
                    }
                    frontier_phi_65_pred = _2818;
                    frontier_phi_65_pred_1 = _2817;
                    frontier_phi_65_pred_2 = _2816;
                    frontier_phi_65_pred_3 = _2815;
                    frontier_phi_65_pred_4 = _2814;
                    frontier_phi_65_pred_5 = _2813;
                }
                _2624 = frontier_phi_65_pred;
                _2622 = frontier_phi_65_pred_1;
                _2620 = frontier_phi_65_pred_2;
                _2618 = frontier_phi_65_pred_3;
                _2616 = frontier_phi_65_pred_4;
                _2614 = frontier_phi_65_pred_5;
                uint _2764 = _2763 + 1u;
                if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2757 = _2614;
                    _2758 = _2616;
                    _2759 = _2618;
                    _2760 = _2620;
                    _2761 = _2622;
                    _2762 = _2624;
                    _2763 = _2764;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
        }
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.z;
        uint _2630 = (_2628 >> 8u) & 15u;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((4294967295u << _2630) & _2495) == 0u)
        {
            _2725 = _2613;
            _2727 = _2615;
            _2729 = _2617;
            _2731 = _2619;
            _2733 = _2621;
            _2735 = _2623;
        }
        else
        {
            float _2750 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
            float _2751 = _2750 * _2449;
            float _2752 = _2750 * _2450;
            float _2753 = _2750 * _2451;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2630 < ((_2628 >> 12u) & 15u))
            {
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2864 = _2613;
                float _2865 = _2615;
                float _2866 = _2617;
                float _2867 = _2619;
                float _2868 = _2621;
                float _2869 = _2623;
                uint _2870 = _2630;
                uint _2879;
                bool _2880;
                for (;;)
                {
                    _2879 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                    _2880 = _2879 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2880)
                    {
                        frontier_phi_71_pred = _2869;
                        frontier_phi_71_pred_1 = _2868;
                        frontier_phi_71_pred_2 = _2867;
                        frontier_phi_71_pred_3 = _2866;
                        frontier_phi_71_pred_4 = _2865;
                        frontier_phi_71_pred_5 = _2864;
                    }
                    else
                    {
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3077 = _2864;
                        float _3078 = _2865;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        uint _3083 = _2879;
                        uint _3084;
                        vec4 _3109;
                        float _3110;
                        vec4 _3125;
                        vec3 _3137;
                        vec4 _3152;
                        vec4 _3167;
                        float _3213;
                        bool _3214;
                        for (;;)
                        {
                            uint _3094 = ((_2870 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3083));
                            _3084 = (_3083 + 4294967295u) & _3083;
                            uint _3096 = _3094 * 40u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            _3110 = _3109.w;
                            uint _3112 = (_3094 * 40u) + 4u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3094 * 40u) + 8u;
                            _3137 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x));
                            uint _3139 = (_3094 * 40u) + 16u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3094 * 40u) + 20u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3094 * 40u) + 24u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3188 = (_3094 * 40u) + 28u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3213 = fma(_2451, _3201.z, fma(_2450, _3201.y, _3201.x * _2449)) + _3201.w;
                            _3214 = !((fma(_2451, _3182.z, fma(_2450, _3182.y, _3182.x * _2449)) + _3182.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3214)
                            {
                                float _3241 = _3109.x - _2449;
                                float _3242 = _3109.y - _2450;
                                float _3243 = _3109.z - _2451;
                                float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                                float _3247 = inversesqrt(_3244);
                                float _3248 = _3247 * _3241;
                                float _3249 = _3247 * _3242;
                                float _3250 = _3247 * _3243;
                                float _3254 = 1.0 - (_3244 / (_3110 * _3110));
                                float _4324 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3259 = sqrt(_3244) * _3125.w;
                                float _3261 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                                float _3262 = _3261 * _3261;
                                float _3265 = ((1.0 - _3262) * dot(vec3(_3248, _3249, _3250), vec3(_671, _674, _677))) + _3262;
                                float _3268 = _3259 * _3259;
                                float _3272 = (fma(_2451, _3152.z, fma(_2450, _3152.y, _3152.x * _2449)) + _3152.w) / _3213;
                                float _3273 = (fma(_2451, _3167.z, fma(_2450, _3167.y, _3167.x * _2449)) + _3167.w) / _3213;
                                float _3277 = 1.0 - dot(vec2(_3272, _3273), vec2(_3272, _3273));
                                float _4340 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3279 = _3278 * (((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3255) / ((_3268 * 0.699999988079071044921875) + 1.0));
                                float _3291 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                                float _3292 = 1.0 - _791;
                                float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                                float _3300 = _3299 * _3299;
                                float _3301 = _3300 * _3300;
                                float _3302 = _3248 - _2751;
                                float _3303 = _3249 - _2752;
                                float _3304 = _3250 - _2753;
                                float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                                float _3312 = dot(vec3(_671, _674, _677), vec3((-0.0) - _2751, (-0.0) - _2752, (-0.0) - _2753));
                                float _4351 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3316 = dot(vec3(_671, _674, _677), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                                float _4362 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                                float _3324 = _3261 * _3300;
                                float _3325 = _3324 * _3324;
                                float _3331 = ((1.0 - _3325) * dot(vec3(_671, _674, _677), vec3(_3248, _3249, _3250))) + _3325;
                                float _4373 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3333 = 1.0 - _3300;
                                float _3343 = (0.5 / (((_3332 * ((_3315 * _3333) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3300) * _3315))) * _3332;
                                float _4384 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3353 = (_3278 * _3255) * (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) / ((_3323 * _3323) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3279 * _3125.z;
                                frontier_phi_77_pred_1 = _3279 * _3125.y;
                                frontier_phi_77_pred_2 = _3279 * _3125.x;
                                frontier_phi_77_pred_3 = _3353 * _3137.z;
                                frontier_phi_77_pred_4 = _3353 * _3137.y;
                                frontier_phi_77_pred_5 = _3353 * _3137.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3362 = frontier_phi_77_pred;
                            _3361 = frontier_phi_77_pred_1;
                            _3360 = frontier_phi_77_pred_2;
                            _3359 = frontier_phi_77_pred_3;
                            _3358 = frontier_phi_77_pred_4;
                            _3357 = frontier_phi_77_pred_5;
                            _3067 = _3360 + _3080;
                            _3068 = _3361 + _3081;
                            _3069 = _3362 + _3082;
                            _3064 = _3357 + _3077;
                            _3065 = _3358 + _3078;
                            _3066 = _3359 + _3079;
                            if (_3084 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3084;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _3069;
                        frontier_phi_71_pred_1 = _3068;
                        frontier_phi_71_pred_2 = _3067;
                        frontier_phi_71_pred_3 = _3066;
                        frontier_phi_71_pred_4 = _3065;
                        frontier_phi_71_pred_5 = _3064;
                    }
                    _2736 = frontier_phi_71_pred;
                    _2734 = frontier_phi_71_pred_1;
                    _2732 = frontier_phi_71_pred_2;
                    _2730 = frontier_phi_71_pred_3;
                    _2728 = frontier_phi_71_pred_4;
                    _2726 = frontier_phi_71_pred_5;
                    uint _2871 = _2870 + 1u;
                    if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2864 = _2726;
                        _2865 = _2728;
                        _2866 = _2730;
                        _2867 = _2732;
                        _2868 = _2734;
                        _2869 = _2736;
                        _2870 = _2871;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2736;
                frontier_phi_59_60_ladder_1 = _2734;
                frontier_phi_59_60_ladder_2 = _2732;
                frontier_phi_59_60_ladder_3 = _2730;
                frontier_phi_59_60_ladder_4 = _2728;
                frontier_phi_59_60_ladder_5 = _2726;
            }
            else
            {
                frontier_phi_59_60_ladder = _2623;
                frontier_phi_59_60_ladder_1 = _2621;
                frontier_phi_59_60_ladder_2 = _2619;
                frontier_phi_59_60_ladder_3 = _2617;
                frontier_phi_59_60_ladder_4 = _2615;
                frontier_phi_59_60_ladder_5 = _2613;
            }
            _2725 = frontier_phi_59_60_ladder_5;
            _2727 = frontier_phi_59_60_ladder_4;
            _2729 = frontier_phi_59_60_ladder_3;
            _2731 = frontier_phi_59_60_ladder_2;
            _2733 = frontier_phi_59_60_ladder_1;
            _2735 = frontier_phi_59_60_ladder;
        }
        float _2740 = isnan(1.0) ? _775 : (isnan(_775) ? 1.0 : min(_775, 1.0));
        _2507 = (_2740 * _2731) + _1944;
        _2509 = (_2740 * _2733) + _1946;
        _2511 = (_2740 * _2735) + _1948;
        _2513 = ((_2725 * _760) * _2740) + _2289;
        _2515 = ((_2727 * _762) * _2740) + _2291;
        _2517 = ((_2729 * _763) * _2740) + _2293;
    }
    else
    {
        _2507 = _1944;
        _2509 = _1946;
        _2511 = _1948;
        _2513 = _2289;
        _2515 = _2291;
        _2517 = _2293;
    }
    vec4 _2523 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4400 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4411 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4422 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _2547 = (((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2507 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _775))) + ((_2513 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1584)) * cbPerFrame._m0[3u].x)) + (_2523.x * cbMtdParam._m0[3u].x);
    float _2549 = ((_2523.y * cbMtdParam._m0[3u].x) + ((_2515 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1584)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2509 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _775)));
    float _2551 = ((_2523.z * cbMtdParam._m0[3u].x) + ((_2517 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1584)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2511 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _775)));
    uint _2555 = _703 + 6u;
    float _2563 = _648 / cbSceneParam._m0[86u].x;
    float _2564 = _649 / cbSceneParam._m0[86u].y;
    vec4 _2578 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2563, _2564, (log2((isnan(cbSceneParam._m0[77u].w) ? _582 : (isnan(_582) ? cbSceneParam._m0[77u].w : min(_582, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2580 = _2578.x;
    float _2581 = _2578.y;
    float _2582 = _2578.z;
    float _2583 = _2578.w;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_582 > cbSceneParam._m0[78u].w)
    {
        float _2638 = isnan(_582) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _582 : min(cbSceneParam._m0[80u].w, _582));
        float _2639 = _2638 / _582;
        float _2650 = _2639 * _633;
        float _2651 = _634 * _2639;
        float _2652 = (-0.0) - _2651;
        float _2653 = _2639 * _635;
        float _2655 = (cbSceneParam._m0[77u].w * _2652) / _2638;
        float _2656 = _2655 + cbSceneParam._m0[79u].w;
        float _2657 = cbSceneParam._m0[79u].w - _2651;
        float _2663 = sqrt(((_2650 * _2650) + (_2651 * _2651)) + (_2653 * _2653));
        float _2666 = (1.0 - (cbSceneParam._m0[77u].w / _2638)) * _2663;
        float _2671 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2673 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2826;
        if (abs((_2652 - _2655) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2826 = ((((_2656 > 0.0) ? exp2(_2671 * _2656) : (2.0 - exp2(_2673 * _2656))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2666;
        }
        else
        {
            float _2786 = 1.0 / cbSceneParam._m0[80u].x;
            float _2787 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : max(_2656, _2657));
            float _2788 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : min(_2656, _2657));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            _2826 = ((abs(_2663 / _2652) * cbSceneParam._m0[80u].y) * ((((_2797 - _2798) * 2.0) - ((exp2(_2671 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0)))) - exp2(_2671 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))))) * _2786)) - ((exp2(_2673 * _2797) - exp2(_2673 * _2798)) * _2786))) + (_2666 * cbSceneParam._m0[80u].z);
        }
        vec4 _2828 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2563, _2564, 1.0), 0.0);
        float _2837 = exp2((_2826 * (-1.44269502162933349609375)) * (1.0 - _2828.w));
        float _2838 = log2(_2837);
        float _2854 = log2(_2583);
        _2675 = (exp2(_2854 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].x)) * _2828.x) / cbSceneParam._m0[78u].x)) + _2580;
        _2677 = (exp2(_2854 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].y)) * _2828.y) / cbSceneParam._m0[78u].y)) + _2581;
        _2679 = (exp2(_2854 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].z)) * _2828.z) / cbSceneParam._m0[78u].z)) + _2582;
        _2681 = _2837 * _2583;
    }
    else
    {
        _2675 = _2580;
        _2677 = _2581;
        _2679 = _2582;
        _2681 = _2583;
    }
    float _2693 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2694 = _2693 == 3.0;
    float _2695 = log2(_2681);
    float _2702 = exp2(_2695 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)));
    float _2703 = exp2(_2695 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)));
    float _2704 = exp2(_2695 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0)));
    float _2713 = (_2693 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2713 * (_2694 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2675)));
    SV_Target.y = _2713 * (_2694 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2677)));
    SV_Target.z = _2713 * (_2694 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.w = cbInstanceData._m0[_2555].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2555].w;
}


