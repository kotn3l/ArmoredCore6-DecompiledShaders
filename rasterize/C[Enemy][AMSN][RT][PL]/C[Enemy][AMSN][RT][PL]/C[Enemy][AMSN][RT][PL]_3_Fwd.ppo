#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1147;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    float _261 = log2(0.0);
    float _187[6];
    float _188[6];
    float _189[6];
    _187[0u] = cbMtdParam._m0[14u].x;
    _188[0u] = cbMtdParam._m0[14u].y;
    _189[0u] = cbMtdParam._m0[14u].z;
    _187[1u] = cbMtdParam._m0[15u].x;
    _188[1u] = cbMtdParam._m0[15u].y;
    _189[1u] = cbMtdParam._m0[15u].z;
    _187[2u] = cbMtdParam._m0[16u].x;
    _188[2u] = cbMtdParam._m0[16u].y;
    _189[2u] = cbMtdParam._m0[16u].z;
    _187[3u] = cbMtdParam._m0[11u].x;
    _188[3u] = cbMtdParam._m0[11u].y;
    _189[3u] = cbMtdParam._m0[11u].z;
    _187[4u] = cbMtdParam._m0[12u].x;
    _188[4u] = cbMtdParam._m0[12u].y;
    _189[4u] = cbMtdParam._m0[12u].z;
    _187[5u] = cbMtdParam._m0[13u].x;
    _188[5u] = cbMtdParam._m0[13u].y;
    _189[5u] = cbMtdParam._m0[13u].z;
    vec4 _333 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _337 = _333.y;
    float _340 = (_333.x + (-0.02500000037252902984619140625)) * 8.0;
    float _342 = roundEven(_340);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    uint _346 = uint(int(isnan(5.0) ? _343 : (isnan(_343) ? 5.0 : min(_343, 5.0))));
    float _363 = roundEven(5.0 - _340);
    float _364 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _365 = isnan(4.0) ? _364 : (isnan(_364) ? 4.0 : min(_364, 4.0));
    float _371;
    float _373;
    if (exp2(_261 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _371 = cbMtdParam._m0[26u].x;
        _373 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _371 = cbMtdParam._m0[22u].x;
        _373 = cbMtdParam._m0[22u].y;
    }
    float _375 = _371 * TEXCOORD.x;
    float _376 = _373 * TEXCOORD.y;
    float _387 = floor(_365);
    vec4 _390 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _375) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _376) + cbTextureTilingScale._m0[6u].w, _387));
    vec4 _412 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _420 = ((((((_187[_346] - cbMtdParam._m0[18u].x) * _337) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _390.x) * cbMtdParam._m0[9u].x) * _412.x;
    float _424 = ((((((_188[_346] - cbMtdParam._m0[18u].y) * _337) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _390.y) * cbMtdParam._m0[9u].y) * _412.y;
    float _428 = ((((((_189[_346] - cbMtdParam._m0[18u].z) * _337) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _390.z) * cbMtdParam._m0[9u].z) * _412.z;
    vec4 _440 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _444 = _440.z;
    float _182[5];
    float _183[5];
    _182[0u] = cbMtdParam._m0[22u].z;
    _183[0u] = cbMtdParam._m0[22u].w;
    _182[1u] = cbMtdParam._m0[23u].z;
    _183[1u] = cbMtdParam._m0[23u].w;
    _182[2u] = cbMtdParam._m0[24u].x;
    _183[2u] = cbMtdParam._m0[24u].y;
    _182[3u] = cbMtdParam._m0[24u].z;
    _183[3u] = cbMtdParam._m0[24u].w;
    _182[4u] = cbMtdParam._m0[23u].x;
    _183[4u] = cbMtdParam._m0[23u].y;
    float _488 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    uint _490 = uint(int(isnan(4.0) ? _488 : (isnan(_488) ? 4.0 : min(_488, 4.0))));
    float _495 = _183[_490] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _375) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _376) + cbTextureTilingScale._m0[8u].w, _387)).x;
    vec4 _514 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _375) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _376) + cbTextureTilingScale._m0[7u].w, _387));
    float _521 = (_514.x * 2.0) + (-1.0);
    float _522 = (_514.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3523 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _529 = sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))));
    float _538 = (cbMtdParam._m0[20u].x * (((_444 * 2.0) * (_514.z + _182[_490])) - _444)) + _444;
    float _542 = (cbMtdParam._m0[20u].y * ((_440.x * 2.0) + (-1.0))) + _521;
    float _543 = (cbMtdParam._m0[20u].y * ((_440.y * 2.0) + (-1.0))) + _522;
    float _546 = fma(_529, _239, fma(_543, _231 * TANGENT.x, (_217 * _209) * _542));
    float _549 = fma(_529, _240, fma(_543, _231 * TANGENT.y, (_217 * _210) * _542));
    float _552 = fma(_529, _241, fma(_543, _231 * TANGENT.z, (_217 * _211) * _542));
    float _556 = inversesqrt(dot(vec3(_546, _549, _552), vec3(_546, _549, _552)));
    float _557 = _556 * _546;
    float _558 = _556 * _549;
    float _559 = _556 * _552;
    float _3534 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _560 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _3556 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3567 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3578 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _564 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _580 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _631 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _621);
    float _632 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _621);
    float _633 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _621);
    float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
    float _638 = _631 * _637;
    float _639 = _632 * _637;
    float _640 = _633 * _637;
    float _646 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _647 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _649 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _651 = _649.w;
    float _669 = fma(_559, cbSceneParam._m0[5u].z, fma(_558, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _557));
    float _672 = fma(_559, cbSceneParam._m0[6u].z, fma(_558, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _557));
    float _675 = fma(_559, cbSceneParam._m0[7u].z, fma(_558, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _557));
    vec4 _677 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _688 = (((_677.y - _560) + (_677.w * _560)) * cbMtdParam._m0[3u].x) + _560;
    uint _701 = uint(roundEven(NORMAL.w)) * 13u;
    uint _703 = (_701 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _709 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_703].x;
    float _710 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_703].y;
    float _711 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_703].z;
    float _3589 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    vec4 _715 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _720 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _731 = (((_720.x - _564) + (_720.w * _564)) * cbMtdParam._m0[3u].x) + _564;
    float _744 = (cbMtdParam._m0[3u].x * (((_712 * _651) - _712) + _715.x)) + _712;
    float _745 = (cbMtdParam._m0[3u].x * (((_713 * _651) - _713) + _715.y)) + _713;
    float _746 = (cbMtdParam._m0[3u].x * (((_714 * _651) - _714) + _715.z)) + _714;
    float _747 = 1.0 - _731;
    float _748 = _747 * _744;
    float _749 = _747 * _745;
    float _750 = _747 * _746;
    float _755 = (_744 + (-0.039999999105930328369140625)) * _731;
    float _756 = (_745 + (-0.039999999105930328369140625)) * _731;
    float _757 = (_746 + (-0.039999999105930328369140625)) * _731;
    float _758 = _755 + 0.039999999105930328369140625;
    float _760 = _756 + 0.039999999105930328369140625;
    float _761 = _757 + 0.039999999105930328369140625;
    vec4 _770 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _646, cbSceneParam._m0[86u].y * _647));
    float _773 = _770.x * TEXCOORD_4;
    float _774 = dot(vec3(_557, _558, _559), vec3(_638, _639, _640));
    float _777 = _774 * 2.0;
    float _781 = (_777 * _557) - _638;
    float _782 = (_777 * _558) - _639;
    float _783 = (_777 * _559) - _640;
    float _787 = abs(dot(vec3(_638, _639, _640), vec3(_557, _558, _559)));
    float _3622 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _789 = sqrt(_688);
    float _800 = exp2((_789 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_789 * 3.0));
    float _806 = (1.0 - _800) * ((_789 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _807 = _800 * _789;
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1146;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _871 = fma(_843, cbModelParam._m0[26u].z, fma(_839, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835));
        float _875 = fma(_843, cbModelParam._m0[27u].z, fma(_839, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835));
        float _879 = fma(_843, cbModelParam._m0[28u].z, fma(_839, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835));
        float _904 = _835 + _557;
        float _905 = _839 + _558;
        float _906 = _843 + _559;
        float _916 = fma(_906, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _904)) - _871;
        float _917 = fma(_906, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _904)) - _875;
        float _918 = fma(_906, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _904)) - _879;
        float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
        float _935 = ((_922 * _916) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_871 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_922 * _917) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_875 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_922 * _918) / cbModelParam._m0[34u].z) + ((((((_879 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        float _974 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_940.x + (-0.5));
        float _976 = _974 * (_940.y + (-0.5));
        float _977 = _974 * (_940.z + (-0.5));
        float _984 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_947.x + (-0.5));
        float _986 = _984 * (_947.y + (-0.5));
        float _987 = _984 * (_947.z + (-0.5));
        float _994 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_954.x + (-0.5));
        float _996 = _994 * (_954.y + (-0.5));
        float _997 = _994 * (_954.z + (-0.5));
        float _1004 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_961.x + (-0.5));
        float _1006 = _1004 * (_961.y + (-0.5));
        float _1007 = _1004 * (_961.z + (-0.5));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = _975 * 0.5;
        float _1012 = _985 * 0.5;
        float _1013 = _995 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1028 = (dot(vec3(_557, _558, _559), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1038 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3670 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1040 + 1.0))) + _1045) * _1008;
        float _1055 = _976 * 0.5;
        float _1056 = _986 * 0.5;
        float _1057 = _996 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_557, _558, _559), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3703 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1082 + 1.0))) + _1087) * _1009;
        float _1097 = _977 * 0.5;
        float _1098 = _987 * 0.5;
        float _1099 = _997 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_557, _558, _559), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3736 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1124 + 1.0))) + _1129) * _1010;
        _1146 = _977;
        _1148 = _976;
        _1149 = _975;
        _1150 = _987;
        _1151 = _986;
        _1152 = _985;
        _1153 = _997;
        _1154 = _996;
        _1155 = _995;
        _1156 = _1010;
        _1157 = _1009;
        _1158 = _1008;
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
    }
    else
    {
        _1146 = _1147;
        _1148 = _1147;
        _1149 = _1147;
        _1150 = _1147;
        _1151 = _1147;
        _1152 = _1147;
        _1153 = _1147;
        _1154 = _1147;
        _1155 = _1147;
        _1156 = _1147;
        _1157 = _1147;
        _1158 = _1147;
        _1159 = 0.0;
        _1160 = 0.0;
        _1161 = 0.0;
    }
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1187 = fma(_843, cbModelParam._m0[30u].z, fma(_839, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _835));
        float _1191 = fma(_843, cbModelParam._m0[31u].z, fma(_839, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _835));
        float _1195 = fma(_843, cbModelParam._m0[32u].z, fma(_839, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _835));
        float _1218 = _835 + _557;
        float _1219 = _839 + _558;
        float _1220 = _843 + _559;
        float _1230 = fma(_1220, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1218)) - _1187;
        float _1231 = fma(_1220, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1218)) - _1191;
        float _1232 = fma(_1220, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1218)) - _1195;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1249 = ((_1236 * _1230) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1187 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1231) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1191 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1236 * _1232) / cbModelParam._m0[35u].z) + ((((((_1195 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        float _1286 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1253.x + (-0.5));
        float _1288 = _1286 * (_1253.y + (-0.5));
        float _1289 = _1286 * (_1253.z + (-0.5));
        float _1296 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1260.x + (-0.5));
        float _1298 = _1296 * (_1260.y + (-0.5));
        float _1299 = _1296 * (_1260.z + (-0.5));
        float _1306 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1267.x + (-0.5));
        float _1308 = _1306 * (_1267.y + (-0.5));
        float _1309 = _1306 * (_1267.z + (-0.5));
        float _1316 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1274.x + (-0.5));
        float _1318 = _1316 * (_1274.y + (-0.5));
        float _1319 = _1316 * (_1274.z + (-0.5));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = _1287 * 0.5;
        float _1324 = _1297 * 0.5;
        float _1325 = _1307 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_557, _558, _559), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3799 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1350 + 1.0))) + _1355) * _1320;
        float _1365 = _1288 * 0.5;
        float _1366 = _1298 * 0.5;
        float _1367 = _1308 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_557, _558, _559), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _3832 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1392 + 1.0))) + _1397) * _1321;
        float _1407 = _1289 * 0.5;
        float _1408 = _1299 * 0.5;
        float _1409 = _1309 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_557, _558, _559), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3865 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1434 + 1.0))) + _1439) * _1322;
        _1456 = _1289;
        _1457 = _1288;
        _1458 = _1287;
        _1459 = _1299;
        _1460 = _1298;
        _1461 = _1297;
        _1462 = _1309;
        _1463 = _1308;
        _1464 = _1307;
        _1465 = _1322;
        _1466 = _1321;
        _1467 = _1320;
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1147;
        _1457 = _1147;
        _1458 = _1147;
        _1459 = _1147;
        _1460 = _1147;
        _1461 = _1147;
        _1462 = _1147;
        _1463 = _1147;
        _1464 = _1147;
        _1465 = _1147;
        _1466 = _1147;
        _1467 = _1147;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1159)) + _1159;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1160)) + _1160;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1161)) + _1161;
    float _1503 = fma(_1482, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1480 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1482, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1480 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1482, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1480));
    float _1524 = _781 * 0.5;
    float _1525 = _782 * 0.5;
    float _1526 = _783 * 0.5;
    float _1527 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1530 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1533 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1567;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1540 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1146, _1150, _1153, _1156));
        float _1544 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1148, _1151, _1154, _1157));
        float _1548 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1149, _1152, _1155, _1158));
        float _1555 = dot(vec4(cbModelParam._m0[39u]), vec4(_1524, _1525, _1526, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1578;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1569 = dot(vec4(cbModelParam._m0[40u]), vec4(_1524, _1525, _1526, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1582 = (_1578 * cbModelParam._m0[1u].x) + (_1567 * (1.0 - cbModelParam._m0[1u].x));
    float _1592 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _688);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1592 : min(cbModelParam._m0[25u].z, _1592));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1640 = fma(_843, cbModelParam._m0[13u].z, fma(_839, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835)) + cbModelParam._m0[13u].w;
        float _1644 = fma(_843, cbModelParam._m0[14u].z, fma(_839, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835)) + cbModelParam._m0[14u].w;
        float _1648 = fma(_843, cbModelParam._m0[15u].z, fma(_839, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835)) + cbModelParam._m0[15u].w;
        float _1651 = fma(_783, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781));
        float _1654 = fma(_783, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781));
        float _1657 = fma(_783, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781));
        float _1685;
        if (_1651 > 0.0)
        {
            _1685 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1685 = frontier_phi_18_16_ladder;
        }
        float _1887;
        if (_1654 > 0.0)
        {
            _1887 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1887 = frontier_phi_27_23_ladder;
        }
        float _2141;
        if (_1657 > 0.0)
        {
            _2141 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2141 = frontier_phi_39_34_ladder;
        }
        float _2143 = isnan(_1887) ? _1685 : (isnan(_1685) ? _1887 : min(_1685, _1887));
        float _2144 = isnan(_2141) ? _2143 : (isnan(_2143) ? _2141 : min(_2143, _2141));
        float _2148 = (_2144 * _1651) + _1640;
        float _2149 = (_2144 * _1654) + _1644;
        float _2150 = (_2144 * _1657) + _1648;
        float _2151 = _2144 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2151;
        float _2155 = _2151 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 > _2155) || ((_2149 < _2153) || ((_2148 < _2153) || (_2148 > _2155))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2150, cbModelParam._m0[9u].z, fma(_2149, cbModelParam._m0[9u].y, _2148 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2150, cbModelParam._m0[10u].z, fma(_2149, cbModelParam._m0[10u].y, _2148 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2150, cbModelParam._m0[11u].z, fma(_2149, cbModelParam._m0[11u].y, _2148 * cbModelParam._m0[11u].x))), _1593);
            frontier_phi_17_39_ladder = _2278.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2278.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2278.x * cbModelParam._m0[1u].y;
        }
        _1673 = frontier_phi_17_39_ladder_2;
        _1675 = frontier_phi_17_39_ladder_1;
        _1677 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_781, _782, _783), _1593);
        _1673 = _1661.x * cbModelParam._m0[1u].y;
        _1675 = _1661.y * cbModelParam._m0[1u].y;
        _1677 = _1661.z * cbModelParam._m0[1u].y;
    }
    float _1681 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _688);
    float _1682 = isnan(_1681) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1681 : min(cbModelParam._m0[25u].w, _1681));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1735 = fma(_843, cbModelParam._m0[21u].z, fma(_839, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835)) + cbModelParam._m0[21u].w;
        float _1739 = fma(_843, cbModelParam._m0[22u].z, fma(_839, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835)) + cbModelParam._m0[22u].w;
        float _1743 = fma(_843, cbModelParam._m0[23u].z, fma(_839, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835)) + cbModelParam._m0[23u].w;
        float _1746 = fma(_783, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781));
        float _1749 = fma(_783, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781));
        float _1752 = fma(_783, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781));
        float _1892;
        if (_1746 > 0.0)
        {
            _1892 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1892 = frontier_phi_29_25_ladder;
        }
        float _2168;
        if (_1749 > 0.0)
        {
            _2168 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2168 = frontier_phi_41_36_ladder;
        }
        float _2381;
        if (_1752 > 0.0)
        {
            _2381 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2381 = frontier_phi_50_47_ladder;
        }
        float _2383 = isnan(_2168) ? _1892 : (isnan(_1892) ? _2168 : min(_1892, _2168));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1746) + _1735;
        float _2389 = (_2384 * _1749) + _1739;
        float _2390 = (_2384 * _1752) + _1743;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2390, cbModelParam._m0[17u].z, fma(_2389, cbModelParam._m0[17u].y, _2388 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2390, cbModelParam._m0[18u].z, fma(_2389, cbModelParam._m0[18u].y, _2388 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2390, cbModelParam._m0[19u].z, fma(_2389, cbModelParam._m0[19u].y, _2388 * cbModelParam._m0[19u].x))), _1682);
            frontier_phi_26_50_ladder = _2606.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2606.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2606.x * cbModelParam._m0[1u].z;
        }
        _1771 = frontier_phi_26_50_ladder_2;
        _1773 = frontier_phi_26_50_ladder_1;
        _1775 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_781, _782, _783), _1682);
        _1771 = _1755.x * cbModelParam._m0[1u].z;
        _1773 = _1755.y * cbModelParam._m0[1u].z;
        _1775 = _1755.z * cbModelParam._m0[1u].z;
    }
    float _1788 = (((_806 * _758) + _807) * _773) * ((cbModelParam._m0[1u].w * (_1771 - _1673)) + _1673);
    float _1790 = (((_806 * _760) + _807) * _773) * ((cbModelParam._m0[1u].w * (_1773 - _1675)) + _1675);
    float _1792 = (((_806 * _761) + _807) * _773) * ((cbModelParam._m0[1u].w * (_1775 - _1677)) + _1677);
    float _1795 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1790, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1798 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1790, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1801 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1790, cbSceneParam._m0[91u].y, _1788 * cbSceneParam._m0[91u].x));
    uvec4 _1811 = floatBitsToUint(cbInstanceData._m0[_701 + 5u]);
    uint _1813 = _1811.x * 14u;
    uint _1814 = _1813 + 13u;
    float _1821 = _773 + (-1.0);
    float _1826 = (cbLight._m0[_1814].x * _1821) + 1.0;
    float _1827 = (cbLight._m0[_1814].y * _1821) + 1.0;
    float _1828 = (cbLight._m0[_1814].z * _1821) + 1.0;
    float _1829 = (cbLight._m0[_1814].w * _1821) + 1.0;
    uint _1830 = _1813 + 5u;
    float _1836 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
    uint _1840 = _1813 + 4u;
    float _1846 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1850 = _1813 | 1u;
    float _1861 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_557, _558, _559));
    float _1864 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_557, _558, _559));
    float _4001 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _4012 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1869 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.3183098733425140380859375;
    float _1871 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.3183098733425140380859375;
    float _1878 = ((cbLight._m0[_1830].x * _1836) * _1871) + ((cbLight._m0[_1840].x * _1846) * _1869);
    float _1879 = ((_1836 * cbLight._m0[_1830].y) * _1871) + ((_1846 * cbLight._m0[_1840].y) * _1869);
    float _1880 = ((_1836 * cbLight._m0[_1830].z) * _1871) + ((_1846 * cbLight._m0[_1840].z) * _1869);
    uvec4 _1884 = floatBitsToUint(cbLight._m0[_1813 + 12u]);
    bool _1886 = _1884.x == 0u;
    float _1897;
    float _1899;
    float _1901;
    if (_1886)
    {
        _1897 = _1878;
        _1899 = _1879;
        _1901 = _1880;
    }
    else
    {
        uint _1905 = _1813 + 6u;
        float _1921 = (dot(vec3(cbLight._m0[_1813 + 2u].xyz), vec3(_557, _558, _559)) * 0.5) + 0.5;
        float _1922 = _1921 * _1921;
        float _4023 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1924 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _1897 = (((cbLight._m0[_1905].x * 0.3183098733425140380859375) * _1923) * _1924) + _1878;
        _1899 = (((cbLight._m0[_1905].y * 0.3183098733425140380859375) * _1923) * _1924) + _1879;
        _1901 = (((cbLight._m0[_1905].z * 0.3183098733425140380859375) * _1923) * _1924) + _1880;
    }
    bool _1904 = _1884.y == 0u;
    float _1942;
    float _1944;
    float _1946;
    if (_1904)
    {
        _1942 = _1897;
        _1944 = _1899;
        _1946 = _1901;
    }
    else
    {
        uint _2112 = _1813 + 7u;
        float _2128 = (dot(vec3(cbLight._m0[_1813 + 3u].xyz), vec3(_557, _558, _559)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4039 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2131 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _1942 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _1897;
        _1944 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _1899;
        _1946 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _1901;
    }
    uint _1949 = _1813 + 8u;
    float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1813].w)) * _688) * 0.949999988079071044921875);
    float _1963 = _1962 * _1962;
    float _1964 = cbLight._m0[_1813].x + _638;
    float _1965 = cbLight._m0[_1813].y + _639;
    float _1966 = cbLight._m0[_1813].z + _640;
    float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
    float _1971 = _1970 * _1964;
    float _1972 = _1970 * _1965;
    float _1973 = _1970 * _1966;
    float _1974 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_1813].xyz));
    float _4055 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _1978 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1979 = dot(vec3(_557, _558, _559), vec3(_1971, _1972, _1973));
    float _4077 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_1971, _1972, _1973));
    float _4088 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1963 * _1963;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _1999 = exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0);
    float _2000 = 0.959999978542327880859375 - _755;
    float _2002 = 0.959999978542327880859375 - _756;
    float _2003 = 0.959999978542327880859375 - _757;
    float _2010 = 1.0 - _1963;
    float _2021 = (0.5 / (((_1978 * ((_1977 * _2010) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2010) + _1963) * _1977))) * _1977;
    float _4099 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    uint _2034 = _1813 + 9u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _688) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1850].x + _638;
    float _2048 = cbLight._m0[_1850].y + _639;
    float _2049 = cbLight._m0[_1850].z + _640;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_1850].xyz));
    float _4110 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2061 = dot(vec3(_557, _558, _559), vec3(_2054, _2055, _2056));
    float _4121 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_2054, _2055, _2056));
    float _4132 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2046 * _2046;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
    float _2087 = 1.0 - _2046;
    float _2097 = (0.5 / (((_1978 * ((_2060 * _2087) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2087) + _2046) * _2060))) * _2060;
    float _4143 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    float _2109 = (((((_2080 * _2000) + _758) * cbLight._m0[_2034].x) * _2099) * _1836) + (((((_1999 * _2000) + _758) * cbLight._m0[_1949].x) * _2023) * _1846);
    float _2110 = (((((_2080 * _2002) + _760) * cbLight._m0[_2034].y) * _2099) * _1836) + (((((_1999 * _2002) + _760) * cbLight._m0[_1949].y) * _2023) * _1846);
    float _2111 = (((((_2080 * _2003) + _761) * cbLight._m0[_2034].z) * _2099) * _1836) + (((((_1999 * _2003) + _761) * cbLight._m0[_1949].z) * _2023) * _1846);
    float _2173;
    float _2175;
    float _2177;
    if (_1886)
    {
        _2173 = _2109;
        _2175 = _2110;
        _2177 = _2111;
    }
    else
    {
        uint _2179 = _1813 + 2u;
        uint _2183 = _1813 + 10u;
        float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _688) * 0.949999988079071044921875);
        float _2198 = _2197 * _2197;
        float _2199 = cbLight._m0[_2179].x + _638;
        float _2200 = cbLight._m0[_2179].y + _639;
        float _2201 = cbLight._m0[_2179].z + _640;
        float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
        float _2206 = _2205 * _2199;
        float _2207 = _2205 * _2200;
        float _2208 = _2205 * _2201;
        float _2209 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2179].xyz));
        float _4154 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2213 = dot(vec3(_557, _558, _559), vec3(_2206, _2207, _2208));
        float _4165 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2217 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2206, _2207, _2208));
        float _4176 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2221 = _2198 * _2198;
        float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
        float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0);
        float _2239 = 1.0 - _2198;
        float _2249 = (0.5 / (((_1978 * ((_2212 * _2239) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2239) + _2198) * _2212))) * _2212;
        float _4187 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2251 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
        float _2252 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2173 = (((((_2232 * _2000) + _758) * cbLight._m0[_2183].x) * _2251) * _2252) + _2109;
        _2175 = (((((_2232 * _2002) + _760) * cbLight._m0[_2183].y) * _2251) * _2252) + _2110;
        _2177 = (((((_2232 * _2003) + _761) * cbLight._m0[_2183].z) * _2251) * _2252) + _2111;
    }
    float _2287;
    float _2289;
    float _2291;
    if (_1904)
    {
        _2287 = _2173;
        _2289 = _2175;
        _2291 = _2177;
    }
    else
    {
        uint _2298 = _1813 + 3u;
        uint _2302 = _1813 + 11u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _688) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _638;
        float _2319 = cbLight._m0[_2298].y + _639;
        float _2320 = cbLight._m0[_2298].z + _640;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_2298].xyz));
        float _4203 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2332 = dot(vec3(_557, _558, _559), vec3(_2325, _2326, _2327));
        float _4214 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4225 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0);
        float _2358 = 1.0 - _2317;
        float _2368 = (0.5 / (((_1978 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2358) + _2317) * _2331))) * _2331;
        float _4236 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _2287 = (((((_2351 * _2000) + _758) * cbLight._m0[_2302].x) * _2370) * _2371) + _2173;
        _2289 = (((((_2351 * _2002) + _760) * cbLight._m0[_2302].y) * _2370) * _2371) + _2175;
        _2291 = (((((_2351 * _2003) + _761) * cbLight._m0[_2302].z) * _2370) * _2371) + _2177;
    }
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    if (_1811.y == 0u)
    {
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2446;
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2446;
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2446;
        uvec4 _2461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2462 = _2461.x;
        uint _2473 = uint((float(_2461.y) * floor(float(uint(cbSceneParam._m0[85u].y * _647) / _2462))) + floor(float(uint(cbSceneParam._m0[85u].x * _646) / _2462)));
        float _2483 = (log2(_2449 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2484 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        uint _2487 = uint(isnan(14.0) ? _2484 : (isnan(_2484) ? 14.0 : min(_2484, 14.0)));
        uvec4 _2492 = texelFetch(g_lightClusterGridBuffer, int(((_2487 << 2u) + (_2473 << 6u)) >> 2u));
        uint _2493 = _2492.x;
        uint _2494 = _2461.z;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        if (((((1u << ((_2494 >> 4u) & 15u)) + 4294967295u) & _2493) == 0u) || ((_2494 & 240u) == 0u))
        {
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
        }
        else
        {
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            uint _2761 = 0u;
            uint _2770;
            bool _2771;
            for (;;)
            {
                _2770 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                _2771 = _2770 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2771)
                {
                    frontier_phi_65_pred = _2760;
                    frontier_phi_65_pred_1 = _2759;
                    frontier_phi_65_pred_2 = _2758;
                    frontier_phi_65_pred_3 = _2757;
                    frontier_phi_65_pred_4 = _2756;
                    frontier_phi_65_pred_5 = _2755;
                }
                else
                {
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    uint _2885;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2770;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    for (;;)
                    {
                        uint _2889 = uint(findLSB(_2885)) + (_2761 << 5u);
                        uint _2886 = (_2885 + 4294967295u) & _2885;
                        uint _2891 = _2889 * 48u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2911 = (_2889 * 48u) + 4u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2930 = (_2889 * 48u) + 8u;
                        vec3 _2941 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x));
                        float _2945 = _2905.x - _2447;
                        float _2946 = _2905.y - _2448;
                        float _2947 = _2905.z - _2449;
                        float _2948 = dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947));
                        float _2951 = inversesqrt(_2948);
                        float _2952 = _2951 * _2945;
                        float _2953 = _2951 * _2946;
                        float _2954 = _2951 * _2947;
                        float _2955 = dot(vec3(_669, _672, _675), vec3(_2952, _2953, _2954));
                        float _2960 = 1.0 - (_2948 * _2905.w);
                        float _4262 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                        float _2962 = sqrt(_2948) * _2924.w;
                        float _2965 = 1.39999997615814208984375 / (_2962 + 1.39999997615814208984375);
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2955) + _2966;
                        float _2972 = _2962 * _2962;
                        float _2976 = ((isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))) * _2961) / ((_2972 * 0.699999988079071044921875) + 1.0);
                        float _2980 = (-0.0) - _2447;
                        float _2981 = (-0.0) - _2448;
                        float _2982 = (-0.0) - _2449;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2997 = exp2(log2(1.0 / ((_2972 * 3.5) + 5.0)) * 0.25);
                        float _2998 = 1.0 - _789;
                        float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                        float _3006 = _3005 * _3005;
                        float _3007 = _3006 * _3006;
                        float _3008 = _2987 + _2952;
                        float _3009 = _2988 + _2953;
                        float _3010 = _2989 + _2954;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3018 = dot(vec3(_669, _672, _675), vec3(_2987, _2988, _2989));
                        float _4278 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _3022 = dot(vec3(_669, _672, _675), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                        float _4289 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                        float _3030 = _2965 * _3006;
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _2955) + _3031;
                        float _4300 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3035 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _3036 = 1.0 - _3006;
                        float _3046 = (0.5 / (((_3035 * ((_3021 * _3036) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3035 * _3036) + _3006) * _3021))) * _3035;
                        float _4311 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3057 = (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_3029 * _3029) * ((_2972 * 2.1991131305694580078125) + 3.141590118408203125))) * _2961;
                        _2814 = (_2976 * _2924.x) + _2882;
                        _2815 = (_2976 * _2924.y) + _2883;
                        _2816 = (_2976 * _2924.z) + _2884;
                        _2811 = (_3057 * _2941.x) + _2879;
                        _2812 = (_3057 * _2941.y) + _2880;
                        _2813 = (_3057 * _2941.z) + _2881;
                        if (_2886 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2886;
                        }
                    }
                    frontier_phi_65_pred = _2816;
                    frontier_phi_65_pred_1 = _2815;
                    frontier_phi_65_pred_2 = _2814;
                    frontier_phi_65_pred_3 = _2813;
                    frontier_phi_65_pred_4 = _2812;
                    frontier_phi_65_pred_5 = _2811;
                }
                _2622 = frontier_phi_65_pred;
                _2620 = frontier_phi_65_pred_1;
                _2618 = frontier_phi_65_pred_2;
                _2616 = frontier_phi_65_pred_3;
                _2614 = frontier_phi_65_pred_4;
                _2612 = frontier_phi_65_pred_5;
                uint _2762 = _2761 + 1u;
                if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2755 = _2612;
                    _2756 = _2614;
                    _2757 = _2616;
                    _2758 = _2618;
                    _2759 = _2620;
                    _2760 = _2622;
                    _2761 = _2762;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
        }
        uvec4 _2625 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2626 = _2625.z;
        uint _2628 = (_2626 >> 8u) & 15u;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((4294967295u << _2628) & _2493) == 0u)
        {
            _2723 = _2611;
            _2725 = _2613;
            _2727 = _2615;
            _2729 = _2617;
            _2731 = _2619;
            _2733 = _2621;
        }
        else
        {
            float _2748 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
            float _2749 = _2748 * _2447;
            float _2750 = _2748 * _2448;
            float _2751 = _2748 * _2449;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2628 < ((_2626 >> 12u) & 15u))
            {
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2862 = _2611;
                float _2863 = _2613;
                float _2864 = _2615;
                float _2865 = _2617;
                float _2866 = _2619;
                float _2867 = _2621;
                uint _2868 = _2628;
                uint _2877;
                bool _2878;
                for (;;)
                {
                    _2877 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                    _2878 = _2877 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2878)
                    {
                        frontier_phi_71_pred = _2867;
                        frontier_phi_71_pred_1 = _2866;
                        frontier_phi_71_pred_2 = _2865;
                        frontier_phi_71_pred_3 = _2864;
                        frontier_phi_71_pred_4 = _2863;
                        frontier_phi_71_pred_5 = _2862;
                    }
                    else
                    {
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3075 = _2862;
                        float _3076 = _2863;
                        float _3077 = _2864;
                        float _3078 = _2865;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        uint _3081 = _2877;
                        uint _3082;
                        vec4 _3107;
                        float _3108;
                        vec4 _3123;
                        vec3 _3135;
                        vec4 _3150;
                        vec4 _3165;
                        float _3211;
                        bool _3212;
                        for (;;)
                        {
                            uint _3092 = ((_2868 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3081));
                            _3082 = (_3081 + 4294967295u) & _3081;
                            uint _3094 = _3092 * 40u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            _3108 = _3107.w;
                            uint _3110 = (_3092 * 40u) + 4u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3125 = (_3092 * 40u) + 8u;
                            _3135 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x));
                            uint _3137 = (_3092 * 40u) + 16u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3152 = (_3092 * 40u) + 20u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3167 = (_3092 * 40u) + 24u;
                            vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3186 = (_3092 * 40u) + 28u;
                            vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            _3211 = fma(_2449, _3199.z, fma(_2448, _3199.y, _3199.x * _2447)) + _3199.w;
                            _3212 = !((fma(_2449, _3180.z, fma(_2448, _3180.y, _3180.x * _2447)) + _3180.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3212)
                            {
                                float _3239 = _3107.x - _2447;
                                float _3240 = _3107.y - _2448;
                                float _3241 = _3107.z - _2449;
                                float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                                float _3245 = inversesqrt(_3242);
                                float _3246 = _3245 * _3239;
                                float _3247 = _3245 * _3240;
                                float _3248 = _3245 * _3241;
                                float _3252 = 1.0 - (_3242 / (_3108 * _3108));
                                float _4322 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3257 = sqrt(_3242) * _3123.w;
                                float _3259 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                                float _3260 = _3259 * _3259;
                                float _3263 = ((1.0 - _3260) * dot(vec3(_3246, _3247, _3248), vec3(_669, _672, _675))) + _3260;
                                float _3266 = _3257 * _3257;
                                float _3270 = (fma(_2449, _3150.z, fma(_2448, _3150.y, _3150.x * _2447)) + _3150.w) / _3211;
                                float _3271 = (fma(_2449, _3165.z, fma(_2448, _3165.y, _3165.x * _2447)) + _3165.w) / _3211;
                                float _3275 = 1.0 - dot(vec2(_3270, _3271), vec2(_3270, _3271));
                                float _4338 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3277 = _3276 * (((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3253) / ((_3266 * 0.699999988079071044921875) + 1.0));
                                float _3289 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                                float _3290 = 1.0 - _789;
                                float _3297 = sqrt(1.0 - ((1.0 - (_3290 * _3290)) * (1.0 - (_3289 * _3289))));
                                float _3298 = _3297 * _3297;
                                float _3299 = _3298 * _3298;
                                float _3300 = _3246 - _2749;
                                float _3301 = _3247 - _2750;
                                float _3302 = _3248 - _2751;
                                float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                                float _3310 = dot(vec3(_669, _672, _675), vec3((-0.0) - _2749, (-0.0) - _2750, (-0.0) - _2751));
                                float _4349 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3314 = dot(vec3(_669, _672, _675), vec3(_3306 * _3300, _3306 * _3301, _3306 * _3302));
                                float _4360 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3321 = ((_3317 * _3317) * (_3299 + (-1.0))) + 1.0;
                                float _3322 = _3259 * _3298;
                                float _3323 = _3322 * _3322;
                                float _3329 = ((1.0 - _3323) * dot(vec3(_669, _672, _675), vec3(_3246, _3247, _3248))) + _3323;
                                float _4371 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3331 = 1.0 - _3298;
                                float _3341 = (0.5 / (((_3330 * ((_3313 * _3331) + _3298)) + 9.9999999392252902907785028219223e-09) + (((_3330 * _3331) + _3298) * _3313))) * _3330;
                                float _4382 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3351 = (_3276 * _3253) * (((_3299 * 3.1415927410125732421875) * (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) / ((_3321 * _3321) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3277 * _3123.z;
                                frontier_phi_77_pred_1 = _3277 * _3123.y;
                                frontier_phi_77_pred_2 = _3277 * _3123.x;
                                frontier_phi_77_pred_3 = _3351 * _3135.z;
                                frontier_phi_77_pred_4 = _3351 * _3135.y;
                                frontier_phi_77_pred_5 = _3351 * _3135.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3360 = frontier_phi_77_pred;
                            _3359 = frontier_phi_77_pred_1;
                            _3358 = frontier_phi_77_pred_2;
                            _3357 = frontier_phi_77_pred_3;
                            _3356 = frontier_phi_77_pred_4;
                            _3355 = frontier_phi_77_pred_5;
                            _3065 = _3358 + _3078;
                            _3066 = _3359 + _3079;
                            _3067 = _3360 + _3080;
                            _3062 = _3355 + _3075;
                            _3063 = _3356 + _3076;
                            _3064 = _3357 + _3077;
                            if (_3082 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3082;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _3067;
                        frontier_phi_71_pred_1 = _3066;
                        frontier_phi_71_pred_2 = _3065;
                        frontier_phi_71_pred_3 = _3064;
                        frontier_phi_71_pred_4 = _3063;
                        frontier_phi_71_pred_5 = _3062;
                    }
                    _2734 = frontier_phi_71_pred;
                    _2732 = frontier_phi_71_pred_1;
                    _2730 = frontier_phi_71_pred_2;
                    _2728 = frontier_phi_71_pred_3;
                    _2726 = frontier_phi_71_pred_4;
                    _2724 = frontier_phi_71_pred_5;
                    uint _2869 = _2868 + 1u;
                    if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2862 = _2724;
                        _2863 = _2726;
                        _2864 = _2728;
                        _2865 = _2730;
                        _2866 = _2732;
                        _2867 = _2734;
                        _2868 = _2869;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2734;
                frontier_phi_59_60_ladder_1 = _2732;
                frontier_phi_59_60_ladder_2 = _2730;
                frontier_phi_59_60_ladder_3 = _2728;
                frontier_phi_59_60_ladder_4 = _2726;
                frontier_phi_59_60_ladder_5 = _2724;
            }
            else
            {
                frontier_phi_59_60_ladder = _2621;
                frontier_phi_59_60_ladder_1 = _2619;
                frontier_phi_59_60_ladder_2 = _2617;
                frontier_phi_59_60_ladder_3 = _2615;
                frontier_phi_59_60_ladder_4 = _2613;
                frontier_phi_59_60_ladder_5 = _2611;
            }
            _2723 = frontier_phi_59_60_ladder_5;
            _2725 = frontier_phi_59_60_ladder_4;
            _2727 = frontier_phi_59_60_ladder_3;
            _2729 = frontier_phi_59_60_ladder_2;
            _2731 = frontier_phi_59_60_ladder_1;
            _2733 = frontier_phi_59_60_ladder;
        }
        float _2738 = isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0));
        _2505 = (_2738 * _2729) + _1942;
        _2507 = (_2738 * _2731) + _1944;
        _2509 = (_2738 * _2733) + _1946;
        _2511 = ((_2723 * _758) * _2738) + _2287;
        _2513 = ((_2725 * _760) * _2738) + _2289;
        _2515 = ((_2727 * _761) * _2738) + _2291;
    }
    else
    {
        _2505 = _1942;
        _2507 = _1944;
        _2509 = _1946;
        _2511 = _2287;
        _2513 = _2289;
        _2515 = _2291;
    }
    vec4 _2521 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4398 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4409 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4420 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _2545 = (((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2505 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _773))) + ((_2511 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1582)) * cbPerFrame._m0[3u].x)) + (_2521.x * cbMtdParam._m0[3u].x);
    float _2547 = ((_2521.y * cbMtdParam._m0[3u].x) + ((_2513 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1582)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2507 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _773)));
    float _2549 = ((_2521.z * cbMtdParam._m0[3u].x) + ((_2515 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1582)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2509 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _773)));
    uint _2553 = _701 + 6u;
    float _2561 = _646 / cbSceneParam._m0[86u].x;
    float _2562 = _647 / cbSceneParam._m0[86u].y;
    vec4 _2576 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, (log2((isnan(cbSceneParam._m0[77u].w) ? _580 : (isnan(_580) ? cbSceneParam._m0[77u].w : min(_580, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2578 = _2576.x;
    float _2579 = _2576.y;
    float _2580 = _2576.z;
    float _2581 = _2576.w;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_580 > cbSceneParam._m0[78u].w)
    {
        float _2636 = isnan(_580) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _580 : min(cbSceneParam._m0[80u].w, _580));
        float _2637 = _2636 / _580;
        float _2648 = _2637 * _631;
        float _2649 = _632 * _2637;
        float _2650 = (-0.0) - _2649;
        float _2651 = _2637 * _633;
        float _2653 = (cbSceneParam._m0[77u].w * _2650) / _2636;
        float _2654 = _2653 + cbSceneParam._m0[79u].w;
        float _2655 = cbSceneParam._m0[79u].w - _2649;
        float _2661 = sqrt(((_2648 * _2648) + (_2649 * _2649)) + (_2651 * _2651));
        float _2664 = (1.0 - (cbSceneParam._m0[77u].w / _2636)) * _2661;
        float _2669 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2671 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2824;
        if (abs((_2650 - _2653) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2824 = ((((_2654 > 0.0) ? exp2(_2669 * _2654) : (2.0 - exp2(_2671 * _2654))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2664;
        }
        else
        {
            float _2784 = 1.0 / cbSceneParam._m0[80u].x;
            float _2785 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : max(_2654, _2655));
            float _2786 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : min(_2654, _2655));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            _2824 = ((abs(_2661 / _2650) * cbSceneParam._m0[80u].y) * ((((_2795 - _2796) * 2.0) - ((exp2(_2669 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)))) - exp2(_2669 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))))) * _2784)) - ((exp2(_2671 * _2795) - exp2(_2671 * _2796)) * _2784))) + (_2664 * cbSceneParam._m0[80u].z);
        }
        vec4 _2826 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, 1.0), 0.0);
        float _2835 = exp2((_2824 * (-1.44269502162933349609375)) * (1.0 - _2826.w));
        float _2836 = log2(_2835);
        float _2852 = log2(_2581);
        _2673 = (exp2(_2852 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].x)) * _2826.x) / cbSceneParam._m0[78u].x)) + _2578;
        _2675 = (exp2(_2852 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].y)) * _2826.y) / cbSceneParam._m0[78u].y)) + _2579;
        _2677 = (exp2(_2852 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].z)) * _2826.z) / cbSceneParam._m0[78u].z)) + _2580;
        _2679 = _2835 * _2581;
    }
    else
    {
        _2673 = _2578;
        _2675 = _2579;
        _2677 = _2580;
        _2679 = _2581;
    }
    float _2691 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2692 = _2691 == 3.0;
    float _2693 = log2(_2679);
    float _2700 = exp2(_2693 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)));
    float _2701 = exp2(_2693 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)));
    float _2702 = exp2(_2693 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)));
    float _2711 = (_2691 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2711 * (_2692 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2673)));
    SV_Target.y = _2711 * (_2692 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2675)));
    SV_Target.z = _2711 * (_2692 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2677)));
    SV_Target.w = cbInstanceData._m0[_2553].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2553].w;
}


