#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1090;
float _3783;
float _3784;
float _3785;
float _3786;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    float _260 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _262 = log2(0.0);
    bool _265 = exp2(_262 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _266;
    float _268;
    float _270;
    if (_265)
    {
        _266 = cbMtdParam._m0[18u].x;
        _268 = cbMtdParam._m0[18u].y;
        _270 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _266 = cbMtdParam._m0[17u].x;
        _268 = cbMtdParam._m0[17u].y;
        _270 = cbMtdParam._m0[17u].z;
    }
    float _275;
    if (_265)
    {
        _275 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _275 = cbMtdParam._m0[19u].z;
    }
    float _281;
    float _283;
    if (_265)
    {
        _281 = cbMtdParam._m0[26u].x;
        _283 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _281 = cbMtdParam._m0[22u].x;
        _283 = cbMtdParam._m0[22u].y;
    }
    float _285 = _281 * TEXCOORD.x;
    float _286 = _283 * TEXCOORD.y;
    float _298 = floor(_275);
    vec4 _301 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _285) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _286) + cbTextureTilingScale._m0[6u].w, _298));
    vec4 _324 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _260) + cbTextureTilingScale._m0[0u].w));
    float _333 = (((_266 * cbMtdParam._m0[19u].w) * _301.x) * cbMtdParam._m0[9u].x) * _324.x;
    float _337 = (((_268 * cbMtdParam._m0[19u].w) * _301.y) * cbMtdParam._m0[9u].y) * _324.y;
    float _341 = (((_270 * cbMtdParam._m0[19u].w) * _301.z) * cbMtdParam._m0[9u].z) * _324.z;
    vec4 _353 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _260) + cbTextureTilingScale._m0[1u].w));
    float _357 = _353.z;
    vec4 _370 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _285) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _286) + cbTextureTilingScale._m0[8u].w, _298));
    float _187[2];
    float _188[2];
    _187[0u] = cbMtdParam._m0[25u].x;
    _188[0u] = cbMtdParam._m0[25u].y;
    _187[1u] = cbMtdParam._m0[25u].z;
    _188[1u] = cbMtdParam._m0[25u].w;
    float _384 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _387 = uint(int(isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0))));
    float _392 = _188[_387] + _370.x;
    vec4 _411 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _285) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _286) + cbTextureTilingScale._m0[7u].w, _298));
    float _418 = (_411.x * 2.0) + (-1.0);
    float _419 = (_411.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3805 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    float _434 = (cbMtdParam._m0[20u].x * (((_357 * 2.0) * (_411.z + _187[_387])) - _357)) + _357;
    float _438 = (cbMtdParam._m0[20u].y * ((_353.x * 2.0) + (-1.0))) + _418;
    float _439 = (cbMtdParam._m0[20u].y * ((_353.y * 2.0) + (-1.0))) + _419;
    float _442 = fma(_425, _238, fma(_439, _230 * TANGENT.x, (_216 * _208) * _438));
    float _445 = fma(_425, _239, fma(_439, _230 * TANGENT.y, (_216 * _209) * _438));
    float _448 = fma(_425, _240, fma(_439, _230 * TANGENT.z, (_216 * _210) * _438));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _3816 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _456 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3838 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3849 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3860 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _460 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _476 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _518);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _518);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _518);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    vec4 _542 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _544 = _542.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _770 = sqrt(((_528 * _528) + (_529 * _529)) + (_530 * _530));
        float _776 = (cbMatDynParam._m0[5u].x * _770) + cbMatDynParam._m0[5u].y;
        float _3871 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _781 = (cbMatDynParam._m0[5u].z * _770) + cbMatDynParam._m0[5u].w;
        float _3882 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) - _777)) + _777) < ((_544 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _561 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _563 = _561.w;
    float _582 = fma(_455, cbSceneParam._m0[5u].z, fma(_454, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _453));
    float _585 = fma(_455, cbSceneParam._m0[6u].z, fma(_454, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _453));
    float _588 = fma(_455, cbSceneParam._m0[7u].z, fma(_454, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _453));
    vec4 _590 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _601 = (((_590.y - _456) + (_590.w * _456)) * cbMtdParam._m0[3u].x) + _456;
    uint _614 = uint(roundEven(NORMAL.w)) * 13u;
    uint _616 = _614 + 9u;
    uint _617 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _623 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * cbInstanceData._m0[_617].x;
    float _624 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * cbInstanceData._m0[_617].y;
    float _625 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_617].z;
    float _3893 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    vec4 _629 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _634 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _645 = (((_634.x - _460) + (_634.w * _460)) * cbMtdParam._m0[3u].x) + _460;
    float _658 = (cbMtdParam._m0[3u].x * (((_626 * _563) - _626) + _629.x)) + _626;
    float _659 = (cbMtdParam._m0[3u].x * (((_627 * _563) - _627) + _629.y)) + _627;
    float _660 = (cbMtdParam._m0[3u].x * (((_628 * _563) - _628) + _629.z)) + _628;
    float _661 = 1.0 - _645;
    float _662 = _661 * _658;
    float _663 = _661 * _659;
    float _664 = _661 * _660;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _645;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _645;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _645;
    float _672 = _669 + 0.039999999105930328369140625;
    float _674 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    vec4 _684 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _687 = _684.x * TEXCOORD_4;
    float _688 = dot(vec3(_453, _454, _455), vec3(_535, _536, _537));
    float _691 = _688 * 2.0;
    float _695 = (_691 * _453) - _535;
    float _696 = (_691 * _454) - _536;
    float _697 = (_691 * _455) - _537;
    float _701 = abs(dot(vec3(_535, _536, _537), vec3(_453, _454, _455)));
    float _3926 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _703 = sqrt(_601);
    float _716 = exp2((_703 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_703 * 3.0));
    float _722 = (1.0 - _716) * ((_703 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _723 = _716 * _703;
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1089;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _814 = fma(_759, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751));
        float _818 = fma(_759, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751));
        float _822 = fma(_759, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751));
        float _847 = _751 + _453;
        float _848 = _755 + _454;
        float _849 = _759 + _455;
        float _859 = fma(_849, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847)) - _814;
        float _860 = fma(_849, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847)) - _818;
        float _861 = fma(_849, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847)) - _822;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_814 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_818 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[34u].z) + ((((((_822 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _917 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_883.x + (-0.5));
        float _919 = _917 * (_883.y + (-0.5));
        float _920 = _917 * (_883.z + (-0.5));
        float _927 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_890.x + (-0.5));
        float _929 = _927 * (_890.y + (-0.5));
        float _930 = _927 * (_890.z + (-0.5));
        float _937 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_897.x + (-0.5));
        float _939 = _937 * (_897.y + (-0.5));
        float _940 = _937 * (_897.z + (-0.5));
        float _947 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_904.x + (-0.5));
        float _949 = _947 * (_904.y + (-0.5));
        float _950 = _947 * (_904.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _971 = (dot(vec3(_453, _454, _455), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _981 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3974 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_983 + 1.0))) + _988) * _951;
        float _998 = _919 * 0.5;
        float _999 = _929 * 0.5;
        float _1000 = _939 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_453, _454, _455), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _4007 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1025 + 1.0))) + _1030) * _952;
        float _1040 = _920 * 0.5;
        float _1041 = _930 * 0.5;
        float _1042 = _940 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_453, _454, _455), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _4040 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1067 + 1.0))) + _1072) * _953;
        _1089 = _920;
        _1091 = _919;
        _1092 = _918;
        _1093 = _930;
        _1094 = _929;
        _1095 = _928;
        _1096 = _940;
        _1097 = _939;
        _1098 = _938;
        _1099 = _953;
        _1100 = _952;
        _1101 = _951;
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _1090;
        _1091 = _1090;
        _1092 = _1090;
        _1093 = _1090;
        _1094 = _1090;
        _1095 = _1090;
        _1096 = _1090;
        _1097 = _1090;
        _1098 = _1090;
        _1099 = _1090;
        _1100 = _1090;
        _1101 = _1090;
        _1102 = 0.0;
        _1103 = 0.0;
        _1104 = 0.0;
    }
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = fma(_759, cbModelParam._m0[30u].z, fma(_755, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _751));
        float _1137 = fma(_759, cbModelParam._m0[31u].z, fma(_755, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _751));
        float _1141 = fma(_759, cbModelParam._m0[32u].z, fma(_755, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _751));
        float _1164 = _751 + _453;
        float _1165 = _755 + _454;
        float _1166 = _759 + _455;
        float _1176 = fma(_1166, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164)) - _1133;
        float _1177 = fma(_1166, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164)) - _1137;
        float _1178 = fma(_1166, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164)) - _1141;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1133 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1137 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[35u].z) + ((((((_1141 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1232 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1199.x + (-0.5));
        float _1234 = _1232 * (_1199.y + (-0.5));
        float _1235 = _1232 * (_1199.z + (-0.5));
        float _1242 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1206.x + (-0.5));
        float _1244 = _1242 * (_1206.y + (-0.5));
        float _1245 = _1242 * (_1206.z + (-0.5));
        float _1252 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1213.x + (-0.5));
        float _1254 = _1252 * (_1213.y + (-0.5));
        float _1255 = _1252 * (_1213.z + (-0.5));
        float _1262 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1220.x + (-0.5));
        float _1264 = _1262 * (_1220.y + (-0.5));
        float _1265 = _1262 * (_1220.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_453, _454, _455), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4103 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1296 + 1.0))) + _1301) * _1266;
        float _1311 = _1234 * 0.5;
        float _1312 = _1244 * 0.5;
        float _1313 = _1254 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_453, _454, _455), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4136 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1338 + 1.0))) + _1343) * _1267;
        float _1353 = _1235 * 0.5;
        float _1354 = _1245 * 0.5;
        float _1355 = _1255 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_453, _454, _455), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4169 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1380 + 1.0))) + _1385) * _1268;
        _1402 = _1235;
        _1403 = _1234;
        _1404 = _1233;
        _1405 = _1245;
        _1406 = _1244;
        _1407 = _1243;
        _1408 = _1255;
        _1409 = _1254;
        _1410 = _1253;
        _1411 = _1268;
        _1412 = _1267;
        _1413 = _1266;
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1090;
        _1403 = _1090;
        _1404 = _1090;
        _1405 = _1090;
        _1406 = _1090;
        _1407 = _1090;
        _1408 = _1090;
        _1409 = _1090;
        _1410 = _1090;
        _1411 = _1090;
        _1412 = _1090;
        _1413 = _1090;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1449 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1426));
    float _1470 = _695 * 0.5;
    float _1471 = _696 * 0.5;
    float _1472 = _697 * 0.5;
    float _1473 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1476 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1479 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1513;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1486 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1089, _1093, _1096, _1099));
        float _1490 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1494 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1501 = dot(vec4(cbModelParam._m0[39u]), vec4(_1470, _1471, _1472, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1524;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1515 = dot(vec4(cbModelParam._m0[40u]), vec4(_1470, _1471, _1472, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1528 = (_1524 * cbModelParam._m0[1u].x) + (_1513 * (1.0 - cbModelParam._m0[1u].x));
    float _1538 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _601);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1538 : min(cbModelParam._m0[25u].z, _1538));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_759, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_759, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_759, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_697, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695));
        float _1602 = fma(_697, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695));
        float _1605 = fma(_697, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1633 = frontier_phi_25_23_ladder;
        }
        float _1805;
        if (_1602 > 0.0)
        {
            _1805 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1805 = frontier_phi_34_30_ladder;
        }
        float _2101;
        if (_1605 > 0.0)
        {
            _2101 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2101 = frontier_phi_46_41_ladder;
        }
        float _2103 = isnan(_1805) ? _1633 : (isnan(_1633) ? _1805 : min(_1633, _1805));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1599) + _1588;
        float _2109 = (_2104 * _1602) + _1592;
        float _2110 = (_2104 * _1605) + _1596;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2113 = (-1.0) - _2111;
        float _2115 = _2111 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2110 > _2115) || ((_2110 < _2113) || ((_2109 > _2115) || ((_2109 < _2113) || ((_2108 < _2113) || (_2108 > _2115))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2255 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2110, cbModelParam._m0[9u].z, fma(_2109, cbModelParam._m0[9u].y, _2108 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2110, cbModelParam._m0[10u].z, fma(_2109, cbModelParam._m0[10u].y, _2108 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2110, cbModelParam._m0[11u].z, fma(_2109, cbModelParam._m0[11u].y, _2108 * cbModelParam._m0[11u].x))), _1539);
            frontier_phi_24_46_ladder = _2255.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2255.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2255.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_24_46_ladder_2;
        _1623 = frontier_phi_24_46_ladder_1;
        _1625 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_695, _696, _697), _1539);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _601);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1683 = fma(_759, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751)) + cbModelParam._m0[21u].w;
        float _1687 = fma(_759, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751)) + cbModelParam._m0[22u].w;
        float _1691 = fma(_759, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751)) + cbModelParam._m0[23u].w;
        float _1694 = fma(_697, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695));
        float _1697 = fma(_697, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695));
        float _1700 = fma(_697, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695));
        float _1810;
        if (_1694 > 0.0)
        {
            _1810 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1810 = frontier_phi_36_32_ladder;
        }
        float _2128;
        if (_1697 > 0.0)
        {
            _2128 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2128 = frontier_phi_48_43_ladder;
        }
        float _2466;
        if (_1700 > 0.0)
        {
            _2466 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2466 = frontier_phi_58_55_ladder;
        }
        float _2468 = isnan(_2128) ? _1810 : (isnan(_1810) ? _2128 : min(_1810, _2128));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1694) + _1683;
        float _2474 = (_2469 * _1697) + _1687;
        float _2475 = (_2469 * _1700) + _1691;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2476;
        float _2479 = _2476 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2475 > _2479) || ((_2475 < _2477) || ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 < _2477) || (_2473 > _2479))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2475, cbModelParam._m0[17u].z, fma(_2474, cbModelParam._m0[17u].y, _2473 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2475, cbModelParam._m0[18u].z, fma(_2474, cbModelParam._m0[18u].y, _2473 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2475, cbModelParam._m0[19u].z, fma(_2474, cbModelParam._m0[19u].y, _2473 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_33_58_ladder = _2597.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2597.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2597.x * cbModelParam._m0[1u].z;
        }
        _1719 = frontier_phi_33_58_ladder_2;
        _1721 = frontier_phi_33_58_ladder_1;
        _1723 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_695, _696, _697), _1630);
        _1719 = _1703.x * cbModelParam._m0[1u].z;
        _1721 = _1703.y * cbModelParam._m0[1u].z;
        _1723 = _1703.z * cbModelParam._m0[1u].z;
    }
    float _1736 = (((_722 * _672) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1719 - _1621)) + _1621);
    float _1738 = (((_722 * _674) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1721 - _1623)) + _1623);
    float _1740 = (((_722 * _675) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1723 - _1625)) + _1625);
    float _1743 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1736 * cbSceneParam._m0[91u].x));
    float _1784 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1788 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1792 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1797 = _1784 / _1796;
    float _1798 = _1788 / _1796;
    float _1799 = _1792 / _1796;
    float _1946;
    float _1947;
    float _1948;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1826 = ((uint(_1799 > cbSceneParam._m0[59u].y) + uint(_1799 > cbSceneParam._m0[59u].x)) + uint(_1799 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1827 = _1826 + 43u;
        uint _1835 = _1826 + 44u;
        uint _1843 = _1826 + 45u;
        uint _1851 = _1826 + 46u;
        float _1862 = fma(_1796, cbSceneParam._m0[_1827].w, fma(_1792, cbSceneParam._m0[_1827].z, fma(_1788, cbSceneParam._m0[_1827].y, _1784 * cbSceneParam._m0[_1827].x)));
        float _1866 = fma(_1796, cbSceneParam._m0[_1835].w, fma(_1792, cbSceneParam._m0[_1835].z, fma(_1788, cbSceneParam._m0[_1835].y, _1784 * cbSceneParam._m0[_1835].x)));
        float _1874 = fma(_1796, cbSceneParam._m0[_1851].w, fma(_1792, cbSceneParam._m0[_1851].z, fma(_1788, cbSceneParam._m0[_1851].y, _1784 * cbSceneParam._m0[_1851].x)));
        float _1879 = cbSceneParam._m0[33u].z * _1874;
        float _1881 = cbSceneParam._m0[33u].w * _1874;
        float _1884 = fma(_1796, cbSceneParam._m0[_1843].w, fma(_1792, cbSceneParam._m0[_1843].z, fma(_1788, cbSceneParam._m0[_1843].y, _1784 * cbSceneParam._m0[_1843].x))) / _1874;
        float _1932 = (cbSceneParam._m0[33u].x - sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799))) * cbSceneParam._m0[33u].y;
        float _4295 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1939 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1879 + _1862) / _1874, (_1881 + _1866) / _1874), _1884), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 + _1862) / _1874, (_1866 - _1879) / _1874), _1884), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 - _1879) / _1874, (_1866 - _1881) / _1874), _1884), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 - _1881) / _1874, (_1879 + _1866) / _1874), _1884), 0.0)).x), vec4(0.25)));
        _1946 = 1.0 - (_1939 * cbSceneParam._m0[34u].x);
        _1947 = 1.0 - (_1939 * cbSceneParam._m0[34u].y);
        _1948 = 1.0 - (_1939 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1946 = 1.0;
        _1947 = 1.0;
        _1948 = 1.0;
    }
    float _2012;
    float _2014;
    float _2016;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2000 = fma(_1796, cbSceneParam._m0[63u].w, fma(_1792, cbSceneParam._m0[63u].z, fma(_1788, cbSceneParam._m0[63u].y, _1784 * cbSceneParam._m0[63u].x)));
        float _2001 = fma(_1796, cbSceneParam._m0[60u].w, fma(_1792, cbSceneParam._m0[60u].z, fma(_1788, cbSceneParam._m0[60u].y, _1784 * cbSceneParam._m0[60u].x))) / _2000;
        float _2002 = fma(_1796, cbSceneParam._m0[61u].w, fma(_1792, cbSceneParam._m0[61u].z, fma(_1788, cbSceneParam._m0[61u].y, _1784 * cbSceneParam._m0[61u].x))) / _2000;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_2001 >= cbSceneParam._m0[64u].x) && (_2002 >= cbSceneParam._m0[64u].y)) && (_2001 <= cbSceneParam._m0[64u].z)) && (_2002 <= cbSceneParam._m0[64u].w))
        {
            float _2141 = fma(_1796, cbSceneParam._m0[62u].w, fma(_1792, cbSceneParam._m0[62u].z, fma(_1788, cbSceneParam._m0[62u].y, _1784 * cbSceneParam._m0[62u].x))) / _2000;
            float _2145 = isnan(cbSceneParam._m0[41u].w) ? _2141 : (isnan(_2141) ? cbSceneParam._m0[41u].w : max(_2141, cbSceneParam._m0[41u].w));
            float _2188 = (cbSceneParam._m0[33u].x - sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799))) * cbSceneParam._m0[33u].y;
            float _4311 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
            float _2195 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2001, cbSceneParam._m0[33u].w + _2002), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2001, _2002 - cbSceneParam._m0[33u].z), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2001 - cbSceneParam._m0[33u].z, _2002 - cbSceneParam._m0[33u].w), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2001 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2002), _2145), 0.0)).x), vec4(0.25)));
            float _2199 = 1.0 - (_2195 * cbSceneParam._m0[34u].x);
            float _2200 = 1.0 - (_2195 * cbSceneParam._m0[34u].y);
            float _2201 = 1.0 - (_2195 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2201) ? _1948 : (isnan(_1948) ? _2201 : min(_1948, _2201));
            frontier_phi_45_44_ladder_1 = isnan(_2200) ? _1947 : (isnan(_1947) ? _2200 : min(_1947, _2200));
            frontier_phi_45_44_ladder_2 = isnan(_2199) ? _1946 : (isnan(_1946) ? _2199 : min(_1946, _2199));
        }
        else
        {
            frontier_phi_45_44_ladder = _1948;
            frontier_phi_45_44_ladder_1 = _1947;
            frontier_phi_45_44_ladder_2 = _1946;
        }
        _2012 = frontier_phi_45_44_ladder_2;
        _2014 = frontier_phi_45_44_ladder_1;
        _2016 = frontier_phi_45_44_ladder;
    }
    else
    {
        _2012 = _1946;
        _2014 = _1947;
        _2016 = _1948;
    }
    uvec4 _2021 = floatBitsToUint(cbInstanceData._m0[_614 + 5u]);
    uint _2023 = _2021.x * 14u;
    uint _2024 = _2023 + 13u;
    float _2031 = _687 + (-1.0);
    float _2036 = (cbLight._m0[_2024].x * _2031) + 1.0;
    float _2037 = (cbLight._m0[_2024].y * _2031) + 1.0;
    float _2038 = (cbLight._m0[_2024].z * _2031) + 1.0;
    float _2039 = (cbLight._m0[_2024].w * _2031) + 1.0;
    uint _2040 = _2023 + 5u;
    float _2046 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2050 = _2023 + 4u;
    float _2060 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2064 = _2023 | 1u;
    float _2075 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_453, _454, _455));
    float _2078 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_453, _454, _455));
    float _4347 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _4358 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2083 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.3183098733425140380859375;
    float _2085 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2092 = ((cbLight._m0[_2040].x * _2046) * _2085) + (((cbLight._m0[_2050].x * _2012) * _2060) * _2083);
    float _2093 = ((_2046 * cbLight._m0[_2040].y) * _2085) + (((cbLight._m0[_2050].y * _2014) * _2060) * _2083);
    float _2094 = ((_2046 * cbLight._m0[_2040].z) * _2085) + (((cbLight._m0[_2050].z * _2016) * _2060) * _2083);
    uvec4 _2098 = floatBitsToUint(cbLight._m0[_2023 + 12u]);
    bool _2100 = _2098.x == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2100)
    {
        _2202 = _2092;
        _2204 = _2093;
        _2206 = _2094;
    }
    else
    {
        uint _2210 = _2023 + 6u;
        float _2226 = (dot(vec3(cbLight._m0[_2023 + 2u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _2227 = _2226 * _2226;
        float _4369 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2228 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2229 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2202 = (((cbLight._m0[_2210].x * 0.3183098733425140380859375) * _2228) * _2229) + _2092;
        _2204 = (((cbLight._m0[_2210].y * 0.3183098733425140380859375) * _2228) * _2229) + _2093;
        _2206 = (((cbLight._m0[_2210].z * 0.3183098733425140380859375) * _2228) * _2229) + _2094;
    }
    bool _2209 = _2098.y == 0u;
    float _2264;
    float _2266;
    float _2268;
    if (_2209)
    {
        _2264 = _2202;
        _2266 = _2204;
        _2268 = _2206;
    }
    else
    {
        uint _2437 = _2023 + 7u;
        float _2453 = (dot(vec3(cbLight._m0[_2023 + 3u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4385 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2456 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2264 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2202;
        _2266 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2204;
        _2268 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2206;
    }
    uint _2271 = _2023 + 8u;
    float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _601) * 0.949999988079071044921875);
    float _2285 = _2284 * _2284;
    float _2286 = cbLight._m0[_2023].x + _535;
    float _2287 = cbLight._m0[_2023].y + _536;
    float _2288 = cbLight._m0[_2023].z + _537;
    float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
    float _2293 = _2292 * _2286;
    float _2294 = _2292 * _2287;
    float _2295 = _2292 * _2288;
    float _2296 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2023].xyz));
    float _4401 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _2300 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2301 = dot(vec3(_453, _454, _455), vec3(_2293, _2294, _2295));
    float _4423 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2293, _2294, _2295));
    float _4434 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2285 * _2285;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
    float _2322 = 0.959999978542327880859375 - _669;
    float _2324 = 0.959999978542327880859375 - _670;
    float _2325 = 0.959999978542327880859375 - _671;
    float _2332 = 1.0 - _2285;
    float _2343 = (0.5 / (((_2300 * ((_2299 * _2332) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2332) + _2285) * _2299))) * _2299;
    float _4445 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    uint _2359 = _2023 + 9u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _601) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2064].x + _535;
    float _2373 = cbLight._m0[_2064].y + _536;
    float _2374 = cbLight._m0[_2064].z + _537;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2064].xyz));
    float _4456 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2386 = dot(vec3(_453, _454, _455), vec3(_2379, _2380, _2381));
    float _4467 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2379, _2380, _2381));
    float _4478 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2371 * _2371;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
    float _2412 = 1.0 - _2371;
    float _2422 = (0.5 / (((_2300 * ((_2385 * _2412) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2412) + _2371) * _2385))) * _2385;
    float _4489 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    float _2434 = (((((_2405 * _2322) + _672) * cbLight._m0[_2359].x) * _2424) * _2046) + ((((cbLight._m0[_2271].x * _2012) * ((_2321 * _2322) + _672)) * _2345) * _2060);
    float _2435 = (((((_2405 * _2324) + _674) * cbLight._m0[_2359].y) * _2424) * _2046) + ((((cbLight._m0[_2271].y * _2014) * ((_2321 * _2324) + _674)) * _2345) * _2060);
    float _2436 = (((((_2405 * _2325) + _675) * cbLight._m0[_2359].z) * _2424) * _2046) + ((((cbLight._m0[_2271].z * _2016) * ((_2321 * _2325) + _675)) * _2345) * _2060);
    float _2492;
    float _2494;
    float _2496;
    if (_2100)
    {
        _2492 = _2434;
        _2494 = _2435;
        _2496 = _2436;
    }
    else
    {
        uint _2498 = _2023 + 2u;
        uint _2502 = _2023 + 10u;
        float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _601) * 0.949999988079071044921875);
        float _2517 = _2516 * _2516;
        float _2518 = cbLight._m0[_2498].x + _535;
        float _2519 = cbLight._m0[_2498].y + _536;
        float _2520 = cbLight._m0[_2498].z + _537;
        float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
        float _2525 = _2524 * _2518;
        float _2526 = _2524 * _2519;
        float _2527 = _2524 * _2520;
        float _2528 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2498].xyz));
        float _4500 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2532 = dot(vec3(_453, _454, _455), vec3(_2525, _2526, _2527));
        float _4511 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2536 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2525, _2526, _2527));
        float _4522 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2540 = _2517 * _2517;
        float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
        float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
        float _2558 = 1.0 - _2517;
        float _2568 = (0.5 / (((_2300 * ((_2531 * _2558) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2558) + _2517) * _2531))) * _2531;
        float _4533 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2570 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
        float _2571 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2492 = (((((_2551 * _2322) + _672) * cbLight._m0[_2502].x) * _2570) * _2571) + _2434;
        _2494 = (((((_2551 * _2324) + _674) * cbLight._m0[_2502].y) * _2570) * _2571) + _2435;
        _2496 = (((((_2551 * _2325) + _675) * cbLight._m0[_2502].z) * _2570) * _2571) + _2436;
    }
    float _2602;
    float _2604;
    float _2606;
    if (_2209)
    {
        _2602 = _2492;
        _2604 = _2494;
        _2606 = _2496;
    }
    else
    {
        uint _2613 = _2023 + 3u;
        uint _2617 = _2023 + 11u;
        float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _601) * 0.949999988079071044921875);
        float _2632 = _2631 * _2631;
        float _2633 = cbLight._m0[_2613].x + _535;
        float _2634 = cbLight._m0[_2613].y + _536;
        float _2635 = cbLight._m0[_2613].z + _537;
        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
        float _2640 = _2639 * _2633;
        float _2641 = _2639 * _2634;
        float _2642 = _2639 * _2635;
        float _2643 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2613].xyz));
        float _4549 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2647 = dot(vec3(_453, _454, _455), vec3(_2640, _2641, _2642));
        float _4560 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2651 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2640, _2641, _2642));
        float _4571 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2655 = _2632 * _2632;
        float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
        float _2666 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
        float _2673 = 1.0 - _2632;
        float _2683 = (0.5 / (((_2300 * ((_2646 * _2673) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2673) + _2632) * _2646))) * _2646;
        float _4582 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2602 = (((((_2666 * _2322) + _672) * cbLight._m0[_2617].x) * _2685) * _2686) + _2492;
        _2604 = (((((_2666 * _2324) + _674) * cbLight._m0[_2617].y) * _2685) * _2686) + _2494;
        _2606 = (((((_2666 * _2325) + _675) * cbLight._m0[_2617].z) * _2685) * _2686) + _2496;
    }
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_2021.y == 0u)
    {
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.x;
        uint _2719 = uint((float(_2707.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _2708))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _2708)));
        float _2729 = (log2(_1799 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2730 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        uint _2733 = uint(isnan(14.0) ? _2730 : (isnan(_2730) ? 14.0 : min(_2730, 14.0)));
        uvec4 _2738 = texelFetch(g_lightClusterGridBuffer, int(((_2733 << 2u) + (_2719 << 6u)) >> 2u));
        uint _2739 = _2738.x;
        uint _2740 = _2707.z;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((((1u << ((_2740 >> 4u) & 15u)) + 4294967295u) & _2739) == 0u) || ((_2740 & 240u) == 0u))
        {
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
        }
        else
        {
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            uint _2994 = 0u;
            uint _3003;
            bool _3004;
            for (;;)
            {
                _3003 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_2994 << 2u)) >> 2u)).x;
                _3004 = _3003 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_3004)
                {
                    frontier_phi_79_pred = _2991;
                    frontier_phi_79_pred_1 = _2993;
                    frontier_phi_79_pred_2 = _2992;
                    frontier_phi_79_pred_3 = _2990;
                    frontier_phi_79_pred_4 = _2989;
                    frontier_phi_79_pred_5 = _2988;
                }
                else
                {
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    uint _3139;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _3003;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    for (;;)
                    {
                        uint _3143 = uint(findLSB(_3139)) + (_2994 << 5u);
                        uint _3140 = (_3139 + 4294967295u) & _3139;
                        uint _3145 = _3143 * 48u;
                        vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 3u)).x));
                        uint _3165 = (_3143 * 48u) + 4u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3184 = (_3143 * 48u) + 8u;
                        vec3 _3195 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x));
                        float _3199 = _3159.x - _1797;
                        float _3200 = _3159.y - _1798;
                        float _3201 = _3159.z - _1799;
                        float _3202 = dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201));
                        float _3205 = inversesqrt(_3202);
                        float _3206 = _3205 * _3199;
                        float _3207 = _3205 * _3200;
                        float _3208 = _3205 * _3201;
                        float _3209 = dot(vec3(_582, _585, _588), vec3(_3206, _3207, _3208));
                        float _3214 = 1.0 - (_3202 * _3159.w);
                        float _4608 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3216 = sqrt(_3202) * _3178.w;
                        float _3219 = 1.39999997615814208984375 / (_3216 + 1.39999997615814208984375);
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3209) + _3220;
                        float _3226 = _3216 * _3216;
                        float _3230 = ((isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * _3215) / ((_3226 * 0.699999988079071044921875) + 1.0);
                        float _3234 = (-0.0) - _1797;
                        float _3235 = (-0.0) - _1798;
                        float _3236 = (-0.0) - _1799;
                        float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                        float _3241 = _3240 * _3234;
                        float _3242 = _3240 * _3235;
                        float _3243 = _3240 * _3236;
                        float _3250 = exp2(log2(1.0 / ((_3226 * 3.5) + 5.0)) * 0.25);
                        float _3251 = 1.0 - _703;
                        float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                        float _3259 = _3258 * _3258;
                        float _3260 = _3259 * _3259;
                        float _3261 = _3241 + _3206;
                        float _3262 = _3242 + _3207;
                        float _3263 = _3243 + _3208;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3271 = dot(vec3(_582, _585, _588), vec3(_3241, _3242, _3243));
                        float _4624 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3275 = dot(vec3(_582, _585, _588), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                        float _4635 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                        float _3283 = _3219 * _3259;
                        float _3284 = _3283 * _3283;
                        float _3287 = ((1.0 - _3284) * _3209) + _3284;
                        float _4646 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3289 = 1.0 - _3259;
                        float _3299 = (0.5 / (((_3288 * ((_3274 * _3289) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3259) * _3274))) * _3288;
                        float _4657 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3310 = (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) / ((_3282 * _3282) * ((_3226 * 2.1991131305694580078125) + 3.141590118408203125))) * _3215;
                        _3063 = (_3230 * _3178.x) + _3136;
                        _3064 = (_3230 * _3178.y) + _3137;
                        _3065 = (_3230 * _3178.z) + _3138;
                        _3060 = (_3310 * _3195.x) + _3133;
                        _3061 = (_3310 * _3195.y) + _3134;
                        _3062 = (_3310 * _3195.z) + _3135;
                        if (_3140 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3140;
                        }
                    }
                    frontier_phi_79_pred = _3063;
                    frontier_phi_79_pred_1 = _3065;
                    frontier_phi_79_pred_2 = _3064;
                    frontier_phi_79_pred_3 = _3062;
                    frontier_phi_79_pred_4 = _3061;
                    frontier_phi_79_pred_5 = _3060;
                }
                _2843 = frontier_phi_79_pred;
                _2847 = frontier_phi_79_pred_1;
                _2845 = frontier_phi_79_pred_2;
                _2841 = frontier_phi_79_pred_3;
                _2839 = frontier_phi_79_pred_4;
                _2837 = frontier_phi_79_pred_5;
                uint _2995 = _2994 + 1u;
                if (_2995 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2988 = _2837;
                    _2989 = _2839;
                    _2990 = _2841;
                    _2991 = _2843;
                    _2992 = _2845;
                    _2993 = _2847;
                    _2994 = _2995;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
        }
        uvec4 _2850 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2851 = _2850.z;
        uint _2853 = (_2851 >> 8u) & 15u;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        if (((4294967295u << _2853) & _2739) == 0u)
        {
            _2956 = _2836;
            _2958 = _2838;
            _2960 = _2840;
            _2962 = _2842;
            _2964 = _2844;
            _2966 = _2846;
        }
        else
        {
            float _2981 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
            float _2982 = _2981 * _1797;
            float _2983 = _2981 * _1798;
            float _2984 = _2981 * _1799;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2853 < ((_2851 >> 12u) & 15u))
            {
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _3116 = _2836;
                float _3117 = _2838;
                float _3118 = _2840;
                float _3119 = _2842;
                float _3120 = _2844;
                float _3121 = _2846;
                uint _3122 = _2853;
                uint _3131;
                bool _3132;
                for (;;)
                {
                    _3131 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_3122 << 2u)) >> 2u)).x;
                    _3132 = _3131 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_3132)
                    {
                        frontier_phi_90_pred = _3118;
                        frontier_phi_90_pred_1 = _3119;
                        frontier_phi_90_pred_2 = _3121;
                        frontier_phi_90_pred_3 = _3120;
                        frontier_phi_90_pred_4 = _3117;
                        frontier_phi_90_pred_5 = _3116;
                    }
                    else
                    {
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3337 = _3116;
                        float _3338 = _3117;
                        float _3339 = _3118;
                        float _3340 = _3119;
                        float _3341 = _3120;
                        float _3342 = _3121;
                        uint _3343 = _3131;
                        uint _3344;
                        vec4 _3369;
                        float _3370;
                        vec4 _3385;
                        vec3 _3397;
                        vec4 _3413;
                        vec4 _3428;
                        float _3475;
                        bool _3476;
                        for (;;)
                        {
                            uint _3354 = ((_3122 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3343));
                            _3344 = (_3343 + 4294967295u) & _3343;
                            uint _3356 = _3354 * 40u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3370 = _3369.w;
                            uint _3372 = (_3354 * 40u) + 4u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3354 * 40u) + 8u;
                            _3397 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x));
                            uint _3400 = (_3354 * 40u) + 16u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3354 * 40u) + 20u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3431 = (_3354 * 40u) + 24u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3450 = (_3354 * 40u) + 28u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            _3475 = fma(_1799, _3463.z, fma(_1798, _3463.y, _3463.x * _1797)) + _3463.w;
                            _3476 = !((fma(_1799, _3444.z, fma(_1798, _3444.y, _3444.x * _1797)) + _3444.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_3476)
                            {
                                float _3503 = _3369.x - _1797;
                                float _3504 = _3369.y - _1798;
                                float _3505 = _3369.z - _1799;
                                float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                                float _3509 = inversesqrt(_3506);
                                float _3510 = _3509 * _3503;
                                float _3511 = _3509 * _3504;
                                float _3512 = _3509 * _3505;
                                float _3516 = 1.0 - (_3506 / (_3370 * _3370));
                                float _4668 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3521 = sqrt(_3506) * _3385.w;
                                float _3523 = 1.39999997615814208984375 / (_3521 + 1.39999997615814208984375);
                                float _3524 = _3523 * _3523;
                                float _3527 = ((1.0 - _3524) * dot(vec3(_3510, _3511, _3512), vec3(_582, _585, _588))) + _3524;
                                float _3530 = _3521 * _3521;
                                float _3534 = (fma(_1799, _3413.z, fma(_1798, _3413.y, _3413.x * _1797)) + _3413.w) / _3475;
                                float _3535 = (fma(_1799, _3428.z, fma(_1798, _3428.y, _3428.x * _1797)) + _3428.w) / _3475;
                                float _3539 = 1.0 - dot(vec2(_3534, _3535), vec2(_3534, _3535));
                                float _4684 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3541 = _3540 * (((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3517) / ((_3530 * 0.699999988079071044921875) + 1.0));
                                float _3553 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                                float _3554 = 1.0 - _703;
                                float _3561 = sqrt(1.0 - ((1.0 - (_3554 * _3554)) * (1.0 - (_3553 * _3553))));
                                float _3562 = _3561 * _3561;
                                float _3563 = _3562 * _3562;
                                float _3564 = _3510 - _2982;
                                float _3565 = _3511 - _2983;
                                float _3566 = _3512 - _2984;
                                float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                                float _3574 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2982, (-0.0) - _2983, (-0.0) - _2984));
                                float _4695 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3578 = dot(vec3(_582, _585, _588), vec3(_3570 * _3564, _3570 * _3565, _3570 * _3566));
                                float _4706 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3585 = ((_3581 * _3581) * (_3563 + (-1.0))) + 1.0;
                                float _3586 = _3523 * _3562;
                                float _3587 = _3586 * _3586;
                                float _3593 = ((1.0 - _3587) * dot(vec3(_582, _585, _588), vec3(_3510, _3511, _3512))) + _3587;
                                float _4717 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3594 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3595 = 1.0 - _3562;
                                float _3605 = (0.5 / (((_3594 * ((_3577 * _3595) + _3562)) + 9.9999999392252902907785028219223e-09) + (((_3594 * _3595) + _3562) * _3577))) * _3594;
                                float _4728 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3615 = (_3540 * _3517) * (((_3563 * 3.1415927410125732421875) * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) / ((_3585 * _3585) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_96_pred = _3541 * _3385.z;
                                frontier_phi_96_pred_1 = _3541 * _3385.y;
                                frontier_phi_96_pred_2 = _3541 * _3385.x;
                                frontier_phi_96_pred_3 = _3615 * _3397.z;
                                frontier_phi_96_pred_4 = _3615 * _3397.y;
                                frontier_phi_96_pred_5 = _3615 * _3397.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _3624 = frontier_phi_96_pred;
                            _3623 = frontier_phi_96_pred_1;
                            _3622 = frontier_phi_96_pred_2;
                            _3621 = frontier_phi_96_pred_3;
                            _3620 = frontier_phi_96_pred_4;
                            _3619 = frontier_phi_96_pred_5;
                            _3327 = _3622 + _3340;
                            _3328 = _3623 + _3341;
                            _3329 = _3624 + _3342;
                            _3324 = _3619 + _3337;
                            _3325 = _3620 + _3338;
                            _3326 = _3621 + _3339;
                            if (_3344 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3344;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _3326;
                        frontier_phi_90_pred_1 = _3327;
                        frontier_phi_90_pred_2 = _3329;
                        frontier_phi_90_pred_3 = _3328;
                        frontier_phi_90_pred_4 = _3325;
                        frontier_phi_90_pred_5 = _3324;
                    }
                    _2961 = frontier_phi_90_pred;
                    _2963 = frontier_phi_90_pred_1;
                    _2967 = frontier_phi_90_pred_2;
                    _2965 = frontier_phi_90_pred_3;
                    _2959 = frontier_phi_90_pred_4;
                    _2957 = frontier_phi_90_pred_5;
                    uint _3123 = _3122 + 1u;
                    if (_3123 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3116 = _2957;
                        _3117 = _2959;
                        _3118 = _2961;
                        _3119 = _2963;
                        _3120 = _2965;
                        _3121 = _2967;
                        _3122 = _3123;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2965;
                frontier_phi_71_72_ladder_1 = _2967;
                frontier_phi_71_72_ladder_2 = _2963;
                frontier_phi_71_72_ladder_3 = _2961;
                frontier_phi_71_72_ladder_4 = _2959;
                frontier_phi_71_72_ladder_5 = _2957;
            }
            else
            {
                frontier_phi_71_72_ladder = _2844;
                frontier_phi_71_72_ladder_1 = _2846;
                frontier_phi_71_72_ladder_2 = _2842;
                frontier_phi_71_72_ladder_3 = _2840;
                frontier_phi_71_72_ladder_4 = _2838;
                frontier_phi_71_72_ladder_5 = _2836;
            }
            _2956 = frontier_phi_71_72_ladder_5;
            _2958 = frontier_phi_71_72_ladder_4;
            _2960 = frontier_phi_71_72_ladder_3;
            _2962 = frontier_phi_71_72_ladder_2;
            _2964 = frontier_phi_71_72_ladder;
            _2966 = frontier_phi_71_72_ladder_1;
        }
        float _2971 = isnan(1.0) ? _687 : (isnan(_687) ? 1.0 : min(_687, 1.0));
        _2751 = (_2971 * _2962) + _2264;
        _2753 = (_2971 * _2964) + _2266;
        _2755 = (_2971 * _2966) + _2268;
        _2757 = ((_2956 * _672) * _2971) + _2602;
        _2759 = ((_2958 * _674) * _2971) + _2604;
        _2761 = ((_2960 * _675) * _2971) + _2606;
    }
    else
    {
        _2751 = _2264;
        _2753 = _2266;
        _2755 = _2268;
        _2757 = _2602;
        _2759 = _2604;
        _2761 = _2606;
    }
    vec4 _2767 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4744 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4755 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4766 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _2791 = (((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2751 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _687))) + ((_2757 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1528)) * cbPerFrame._m0[3u].x)) + (_2767.x * cbMtdParam._m0[3u].x);
    float _2793 = ((_2767.y * cbMtdParam._m0[3u].x) + ((_2759 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1528)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2753 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _687)));
    float _2795 = ((_2767.z * cbMtdParam._m0[3u].x) + ((_2761 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1528)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2755 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _687)));
    float _2796 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2797 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2798 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    uint _2799 = _614 + 6u;
    float _2807 = _558 / cbSceneParam._m0[86u].x;
    float _2808 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _476 : (isnan(_476) ? cbSceneParam._m0[77u].w : min(_476, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    if (_476 > cbSceneParam._m0[78u].w)
    {
        float _2861 = isnan(_476) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _476 : min(cbSceneParam._m0[80u].w, _476));
        float _2862 = _2861 / _476;
        float _2873 = _2862 * _528;
        float _2874 = _529 * _2862;
        float _2875 = (-0.0) - _2874;
        float _2876 = _2862 * _530;
        float _2878 = (cbSceneParam._m0[77u].w * _2875) / _2861;
        float _2879 = _2878 + cbSceneParam._m0[79u].w;
        float _2880 = cbSceneParam._m0[79u].w - _2874;
        float _2886 = sqrt(((_2873 * _2873) + (_2874 * _2874)) + (_2876 * _2876));
        float _2889 = (1.0 - (cbSceneParam._m0[77u].w / _2861)) * _2886;
        float _2894 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2896 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3073;
        if (abs((_2875 - _2878) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3073 = ((((_2879 > 0.0) ? exp2(_2894 * _2879) : (2.0 - exp2(_2896 * _2879))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2889;
        }
        else
        {
            float _3017 = 1.0 / cbSceneParam._m0[80u].x;
            float _3018 = isnan(_2880) ? _2879 : (isnan(_2879) ? _2880 : max(_2879, _2880));
            float _3019 = isnan(_2880) ? _2879 : (isnan(_2879) ? _2880 : min(_2879, _2880));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            float _3029 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : min(_3019, 0.0));
            _3073 = ((abs(_2886 / _2875) * cbSceneParam._m0[80u].y) * ((((_3028 - _3029) * 2.0) - ((exp2(_2894 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0)))) - exp2(_2894 * (isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0))))) * _3017)) - ((exp2(_2896 * _3028) - exp2(_2896 * _3029)) * _3017))) + (_2889 * cbSceneParam._m0[80u].z);
        }
        vec4 _3075 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3084 = exp2((_3073 * (-1.44269502162933349609375)) * (1.0 - _3075.w));
        float _3085 = log2(_3084);
        float _3101 = log2(_2827);
        _2898 = (exp2(_3101 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].x)) * _3075.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2900 = (exp2(_3101 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].y)) * _3075.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2902 = (exp2(_3101 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].z)) * _3075.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2904 = _3084 * _2827;
    }
    else
    {
        _2898 = _2824;
        _2900 = _2825;
        _2902 = _2826;
        _2904 = _2827;
    }
    bool _3111;
    vec4 _2914;
    vec4 _2936;
    float _2938;
    float _2942;
    float _2943;
    float _2944;
    float _2945;
    bool _2955;
    for (;;)
    {
        _2914 = cbMatDynParam._m0[0u];
        float _2916 = roundEven(_2914.y);
        bool _2917 = _2916 == 3.0;
        float _2918 = log2(_2904);
        float _2925 = exp2(_2918 * cbSceneParam._m0[78u].x) * _2796;
        float _2926 = exp2(_2918 * cbSceneParam._m0[78u].y) * _2797;
        float _2927 = exp2(_2918 * cbSceneParam._m0[78u].z) * _2798;
        float _2934 = _544 + (-0.5);
        _2936 = cbMtdParam._m0[1u];
        _2938 = _2936.y * _2934;
        float _2941 = (_2916 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2942 = _2941 * (_2917 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2898)));
        _2943 = _2941 * (_2917 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2900)));
        _2944 = _2941 * (_2917 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2902)));
        _2945 = _2934 * 0.999000012874603271484375;
        _2955 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2955)
        {
            if ((cbInstanceData._m0[_614 + 7u].x + _2945) < 0.5)
            {
                _3111 = true;
                break;
            }
        }
        uint _3052 = _616 + uint(_2914.w);
        if ((cbInstanceData._m0[_3052].w < 1.0) && ((cbInstanceData._m0[_3052].w + _2945) < 0.5))
        {
            _3111 = true;
            break;
        }
        if ((_2938 + 1.0) < _2936.x)
        {
            _3111 = true;
            break;
        }
        _3111 = false;
        break;
    }
    float _3315;
    if (_3111)
    {
        discard_state = true;
        _3315 = 0.0;
    }
    else
    {
        _3315 = cbInstanceData._m0[_2799].w;
    }
    SV_Target.x = _2942;
    SV_Target.y = _2943;
    SV_Target.z = _2944;
    SV_Target.w = _3315;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2799].w;
    discard_exit();
}


