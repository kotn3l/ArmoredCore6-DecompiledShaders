#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1057;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    float _254 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    vec4 _267 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_254 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    bool _275 = exp2(log2(_267.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _276;
    float _278;
    float _280;
    if (_275)
    {
        _276 = cbMtdParam._m0[18u].x;
        _278 = cbMtdParam._m0[18u].y;
        _280 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _276 = cbMtdParam._m0[17u].x;
        _278 = cbMtdParam._m0[17u].y;
        _280 = cbMtdParam._m0[17u].z;
    }
    float _285;
    if (_275)
    {
        _285 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _285 = cbMtdParam._m0[19u].z;
    }
    float _291;
    float _293;
    if (_275)
    {
        _291 = cbMtdParam._m0[26u].x;
        _293 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _291 = cbMtdParam._m0[22u].x;
        _293 = cbMtdParam._m0[22u].y;
    }
    float _295 = _291 * TEXCOORD.x;
    float _296 = _293 * TEXCOORD.y;
    float _308 = floor(_285);
    vec4 _311 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _295) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _296) + cbTextureTilingScale._m0[6u].w, _308));
    vec4 _333 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _254) + cbTextureTilingScale._m0[0u].w));
    float _341 = (((_276 * cbMtdParam._m0[19u].w) * _311.x) * cbMtdParam._m0[9u].x) * _333.x;
    float _345 = (((_278 * cbMtdParam._m0[19u].w) * _311.y) * cbMtdParam._m0[9u].y) * _333.y;
    float _349 = (((_280 * cbMtdParam._m0[19u].w) * _311.z) * cbMtdParam._m0[9u].z) * _333.z;
    vec4 _361 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _254) + cbTextureTilingScale._m0[1u].w));
    float _365 = _361.z;
    vec4 _378 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _295) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _296) + cbTextureTilingScale._m0[8u].w, _308));
    float _181[2];
    float _182[2];
    _181[0u] = cbMtdParam._m0[25u].x;
    _182[0u] = cbMtdParam._m0[25u].y;
    _181[1u] = cbMtdParam._m0[25u].z;
    _182[1u] = cbMtdParam._m0[25u].w;
    float _392 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _395 = uint(int(isnan(1.0) ? _392 : (isnan(_392) ? 1.0 : min(_392, 1.0))));
    float _400 = _182[_395] + _378.x;
    vec4 _419 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _295) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _296) + cbTextureTilingScale._m0[7u].w, _308));
    float _426 = (_419.x * 2.0) + (-1.0);
    float _427 = (_419.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_426, _427), vec2(_426, _427));
    float _3423 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))));
    float _442 = (cbMtdParam._m0[20u].x * (((_365 * 2.0) * (_419.z + _181[_395])) - _365)) + _365;
    float _446 = (cbMtdParam._m0[20u].y * ((_361.x * 2.0) + (-1.0))) + _426;
    float _447 = (cbMtdParam._m0[20u].y * ((_361.y * 2.0) + (-1.0))) + _427;
    float _450 = fma(_433, _232, fma(_447, _224 * TANGENT.x, (_210 * _202) * _446));
    float _453 = fma(_433, _233, fma(_447, _224 * TANGENT.y, (_210 * _203) * _446));
    float _456 = fma(_433, _234, fma(_447, _224 * TANGENT.z, (_210 * _204) * _446));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _3434 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _464 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3456 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3467 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3478 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _468 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _484 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _536 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _526);
    float _537 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _526);
    float _538 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _526);
    float _542 = inversesqrt(dot(vec3(_536, _537, _538), vec3(_536, _537, _538)));
    float _543 = _536 * _542;
    float _544 = _537 * _542;
    float _545 = _538 * _542;
    float _551 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _552 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _554 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _556 = _554.w;
    float _575 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _578 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _581 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    vec4 _583 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _594 = (((_583.y - _464) + (_583.w * _464)) * cbMtdParam._m0[3u].x) + _464;
    uint _607 = uint(roundEven(NORMAL.w)) * 13u;
    uint _610 = (_607 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3489 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    vec4 _622 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _627 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _638 = (((_627.x - _468) + (_627.w * _468)) * cbMtdParam._m0[3u].x) + _468;
    float _651 = (cbMtdParam._m0[3u].x * (((_619 * _556) - _619) + _622.x)) + _619;
    float _652 = (cbMtdParam._m0[3u].x * (((_620 * _556) - _620) + _622.y)) + _620;
    float _653 = (cbMtdParam._m0[3u].x * (((_621 * _556) - _621) + _622.z)) + _621;
    float _654 = 1.0 - _638;
    float _655 = _654 * _651;
    float _656 = _654 * _652;
    float _657 = _654 * _653;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _638;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _638;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _638;
    float _665 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _551, cbSceneParam._m0[86u].y * _552));
    float _680 = _677.x * TEXCOORD_4;
    float _681 = dot(vec3(_461, _462, _463), vec3(_543, _544, _545));
    float _684 = _681 * 2.0;
    float _688 = (_684 * _461) - _543;
    float _689 = (_684 * _462) - _544;
    float _690 = (_684 * _463) - _545;
    float _694 = abs(dot(vec3(_543, _544, _545), vec3(_461, _462, _463)));
    float _3522 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = sqrt(_594);
    float _709 = exp2((_696 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_696 * 3.0));
    float _715 = (1.0 - _709) * ((_696 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _716 = _709 * _696;
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1056;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _781 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _785 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _789 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _814 = _744 + _461;
        float _815 = _748 + _462;
        float _816 = _752 + _463;
        float _826 = fma(_816, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814)) - _781;
        float _827 = fma(_816, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814)) - _785;
        float _828 = fma(_816, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814)) - _789;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_781 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_785 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[34u].z) + ((((((_789 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _884 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_850.x + (-0.5));
        float _886 = _884 * (_850.y + (-0.5));
        float _887 = _884 * (_850.z + (-0.5));
        float _894 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_857.x + (-0.5));
        float _896 = _894 * (_857.y + (-0.5));
        float _897 = _894 * (_857.z + (-0.5));
        float _904 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_864.x + (-0.5));
        float _906 = _904 * (_864.y + (-0.5));
        float _907 = _904 * (_864.z + (-0.5));
        float _914 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_871.x + (-0.5));
        float _916 = _914 * (_871.y + (-0.5));
        float _917 = _914 * (_871.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _938 = (dot(vec3(_461, _462, _463), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _948 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3570 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_950 + 1.0))) + _955) * _918;
        float _965 = _886 * 0.5;
        float _966 = _896 * 0.5;
        float _967 = _906 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_461, _462, _463), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3603 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_992 + 1.0))) + _997) * _919;
        float _1007 = _887 * 0.5;
        float _1008 = _897 * 0.5;
        float _1009 = _907 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_461, _462, _463), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3636 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1034 + 1.0))) + _1039) * _920;
        _1056 = _887;
        _1058 = _886;
        _1059 = _885;
        _1060 = _897;
        _1061 = _896;
        _1062 = _895;
        _1063 = _907;
        _1064 = _906;
        _1065 = _905;
        _1066 = _920;
        _1067 = _919;
        _1068 = _918;
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _1057;
        _1058 = _1057;
        _1059 = _1057;
        _1060 = _1057;
        _1061 = _1057;
        _1062 = _1057;
        _1063 = _1057;
        _1064 = _1057;
        _1065 = _1057;
        _1066 = _1057;
        _1067 = _1057;
        _1068 = _1057;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1097 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1101 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1105 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1128 = _744 + _461;
        float _1129 = _748 + _462;
        float _1130 = _752 + _463;
        float _1140 = fma(_1130, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128)) - _1097;
        float _1141 = fma(_1130, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128)) - _1101;
        float _1142 = fma(_1130, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128)) - _1105;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1097 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1101 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[35u].z) + ((((((_1105 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1196 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1163.x + (-0.5));
        float _1198 = _1196 * (_1163.y + (-0.5));
        float _1199 = _1196 * (_1163.z + (-0.5));
        float _1206 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1170.x + (-0.5));
        float _1208 = _1206 * (_1170.y + (-0.5));
        float _1209 = _1206 * (_1170.z + (-0.5));
        float _1216 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1177.x + (-0.5));
        float _1218 = _1216 * (_1177.y + (-0.5));
        float _1219 = _1216 * (_1177.z + (-0.5));
        float _1226 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1184.x + (-0.5));
        float _1228 = _1226 * (_1184.y + (-0.5));
        float _1229 = _1226 * (_1184.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_461, _462, _463), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3699 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1260 + 1.0))) + _1265) * _1230;
        float _1275 = _1198 * 0.5;
        float _1276 = _1208 * 0.5;
        float _1277 = _1218 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_461, _462, _463), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3732 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1302 + 1.0))) + _1307) * _1231;
        float _1317 = _1199 * 0.5;
        float _1318 = _1209 * 0.5;
        float _1319 = _1219 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_461, _462, _463), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3765 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1344 + 1.0))) + _1349) * _1232;
        _1366 = _1199;
        _1367 = _1198;
        _1368 = _1197;
        _1369 = _1209;
        _1370 = _1208;
        _1371 = _1207;
        _1372 = _1219;
        _1373 = _1218;
        _1374 = _1217;
        _1375 = _1232;
        _1376 = _1231;
        _1377 = _1230;
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1057;
        _1367 = _1057;
        _1368 = _1057;
        _1369 = _1057;
        _1370 = _1057;
        _1371 = _1057;
        _1372 = _1057;
        _1373 = _1057;
        _1374 = _1057;
        _1375 = _1057;
        _1376 = _1057;
        _1377 = _1057;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1069)) + _1069;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1070)) + _1070;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1071)) + _1071;
    float _1413 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1416 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1419 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1390));
    float _1434 = _688 * 0.5;
    float _1435 = _689 * 0.5;
    float _1436 = _690 * 0.5;
    float _1437 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1440 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1443 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1477;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1450 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1056, _1060, _1063, _1066));
        float _1454 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1458 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1465 = dot(vec4(cbModelParam._m0[39u]), vec4(_1434, _1435, _1436, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1488;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1479 = dot(vec4(cbModelParam._m0[40u]), vec4(_1434, _1435, _1436, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1492 = (_1488 * cbModelParam._m0[1u].x) + (_1477 * (1.0 - cbModelParam._m0[1u].x));
    float _1502 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _594);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1502 : min(cbModelParam._m0[25u].z, _1502));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1552 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1556 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1560 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1563 = fma(_690, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688));
        float _1566 = fma(_690, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688));
        float _1569 = fma(_690, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688));
        float _1597;
        if (_1563 > 0.0)
        {
            _1597 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1597 = frontier_phi_22_20_ladder;
        }
        float _1801;
        if (_1566 > 0.0)
        {
            _1801 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1801 = frontier_phi_31_27_ladder;
        }
        float _2055;
        if (_1569 > 0.0)
        {
            _2055 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2055 = frontier_phi_43_38_ladder;
        }
        float _2057 = isnan(_1801) ? _1597 : (isnan(_1597) ? _1801 : min(_1597, _1801));
        float _2058 = isnan(_2055) ? _2057 : (isnan(_2057) ? _2055 : min(_2057, _2055));
        float _2062 = (_2058 * _1563) + _1552;
        float _2063 = (_2058 * _1566) + _1556;
        float _2064 = (_2058 * _1569) + _1560;
        float _2065 = _2058 * 9.9999997473787516355514526367188e-05;
        float _2067 = (-1.0) - _2065;
        float _2069 = _2065 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2064 > _2069) || ((_2064 < _2067) || ((_2063 > _2069) || ((_2063 < _2067) || ((_2062 < _2067) || (_2062 > _2069))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2192 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2064, cbModelParam._m0[9u].z, fma(_2063, cbModelParam._m0[9u].y, _2062 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2064, cbModelParam._m0[10u].z, fma(_2063, cbModelParam._m0[10u].y, _2062 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2064, cbModelParam._m0[11u].z, fma(_2063, cbModelParam._m0[11u].y, _2062 * cbModelParam._m0[11u].x))), _1503);
            frontier_phi_21_43_ladder = _2192.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2192.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2192.x * cbModelParam._m0[1u].y;
        }
        _1585 = frontier_phi_21_43_ladder_2;
        _1587 = frontier_phi_21_43_ladder_1;
        _1589 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_688, _689, _690), _1503);
        _1585 = _1573.x * cbModelParam._m0[1u].y;
        _1587 = _1573.y * cbModelParam._m0[1u].y;
        _1589 = _1573.z * cbModelParam._m0[1u].y;
    }
    float _1593 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _594);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1593 : min(cbModelParam._m0[25u].w, _1593));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1647 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1651 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1655 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1658 = fma(_690, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688));
        float _1661 = fma(_690, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688));
        float _1664 = fma(_690, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688));
        float _1806;
        if (_1658 > 0.0)
        {
            _1806 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1806 = frontier_phi_33_29_ladder;
        }
        float _2082;
        if (_1661 > 0.0)
        {
            _2082 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2082 = frontier_phi_45_40_ladder;
        }
        float _2295;
        if (_1664 > 0.0)
        {
            _2295 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2295 = frontier_phi_54_51_ladder;
        }
        float _2297 = isnan(_2082) ? _1806 : (isnan(_1806) ? _2082 : min(_1806, _2082));
        float _2298 = isnan(_2295) ? _2297 : (isnan(_2297) ? _2295 : min(_2297, _2295));
        float _2302 = (_2298 * _1658) + _1647;
        float _2303 = (_2298 * _1661) + _1651;
        float _2304 = (_2298 * _1664) + _1655;
        float _2305 = _2298 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2305;
        float _2308 = _2305 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2304 > _2308) || ((_2304 < _2306) || ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 < _2306) || (_2302 > _2308))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2304, cbModelParam._m0[17u].z, fma(_2303, cbModelParam._m0[17u].y, _2302 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2304, cbModelParam._m0[18u].z, fma(_2303, cbModelParam._m0[18u].y, _2302 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2304, cbModelParam._m0[19u].z, fma(_2303, cbModelParam._m0[19u].y, _2302 * cbModelParam._m0[19u].x))), _1594);
            frontier_phi_30_54_ladder = _2520.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2520.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2520.x * cbModelParam._m0[1u].z;
        }
        _1683 = frontier_phi_30_54_ladder_2;
        _1685 = frontier_phi_30_54_ladder;
        _1687 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_688, _689, _690), _1594);
        _1683 = _1667.x * cbModelParam._m0[1u].z;
        _1685 = _1667.y * cbModelParam._m0[1u].z;
        _1687 = _1667.z * cbModelParam._m0[1u].z;
    }
    float _1700 = (((_715 * _665) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1683 - _1585)) + _1585);
    float _1702 = (((_715 * _667) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1685 - _1587)) + _1587);
    float _1704 = (((_715 * _668) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1687 - _1589)) + _1589);
    float _1707 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, _1700 * cbSceneParam._m0[91u].x));
    uvec4 _1723 = floatBitsToUint(cbInstanceData._m0[_607 + 5u]);
    uint _1725 = _1723.x * 14u;
    uint _1726 = _1725 + 13u;
    float _1733 = _680 + (-1.0);
    float _1738 = (cbLight._m0[_1726].x * _1733) + 1.0;
    float _1739 = (cbLight._m0[_1726].y * _1733) + 1.0;
    float _1740 = (cbLight._m0[_1726].z * _1733) + 1.0;
    float _1741 = (cbLight._m0[_1726].w * _1733) + 1.0;
    uint _1742 = _1725 + 5u;
    float _1748 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1752 = _1725 + 4u;
    float _1759 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1763 = _1725 | 1u;
    float _1774 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_461, _462, _463));
    float _1777 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_461, _462, _463));
    float _3901 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _3912 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1782 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.3183098733425140380859375;
    float _1784 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.3183098733425140380859375;
    float _1791 = ((cbLight._m0[_1742].x * _1748) * _1784) + ((cbLight._m0[_1752].x * _1759) * _1782);
    float _1792 = ((_1748 * cbLight._m0[_1742].y) * _1784) + ((_1759 * cbLight._m0[_1752].y) * _1782);
    float _1793 = ((_1748 * cbLight._m0[_1742].z) * _1784) + ((_1759 * cbLight._m0[_1752].z) * _1782);
    uvec4 _1798 = floatBitsToUint(cbLight._m0[_1725 + 12u]);
    bool _1800 = _1798.x == 0u;
    float _1811;
    float _1813;
    float _1815;
    if (_1800)
    {
        _1811 = _1791;
        _1813 = _1792;
        _1815 = _1793;
    }
    else
    {
        uint _1819 = _1725 + 6u;
        float _1835 = (dot(vec3(cbLight._m0[_1725 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _1836 = _1835 * _1835;
        float _3923 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1838 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1811 = (((cbLight._m0[_1819].x * 0.3183098733425140380859375) * _1837) * _1838) + _1791;
        _1813 = (((cbLight._m0[_1819].y * 0.3183098733425140380859375) * _1837) * _1838) + _1792;
        _1815 = (((cbLight._m0[_1819].z * 0.3183098733425140380859375) * _1837) * _1838) + _1793;
    }
    bool _1818 = _1798.y == 0u;
    float _1856;
    float _1858;
    float _1860;
    if (_1818)
    {
        _1856 = _1811;
        _1858 = _1813;
        _1860 = _1815;
    }
    else
    {
        uint _2026 = _1725 + 7u;
        float _2042 = (dot(vec3(cbLight._m0[_1725 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2043 = _2042 * _2042;
        float _3939 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _2045 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _1856 = (((cbLight._m0[_2026].x * 0.3183098733425140380859375) * _2044) * _2045) + _1811;
        _1858 = (((cbLight._m0[_2026].y * 0.3183098733425140380859375) * _2044) * _2045) + _1813;
        _1860 = (((cbLight._m0[_2026].z * 0.3183098733425140380859375) * _2044) * _2045) + _1815;
    }
    uint _1863 = _1725 + 8u;
    float _1876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _594) * 0.949999988079071044921875);
    float _1877 = _1876 * _1876;
    float _1878 = cbLight._m0[_1725].x + _543;
    float _1879 = cbLight._m0[_1725].y + _544;
    float _1880 = cbLight._m0[_1725].z + _545;
    float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
    float _1885 = _1884 * _1878;
    float _1886 = _1884 * _1879;
    float _1887 = _1884 * _1880;
    float _1888 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1725].xyz));
    float _3955 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _1892 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1893 = dot(vec3(_461, _462, _463), vec3(_1885, _1886, _1887));
    float _3977 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1897 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1885, _1886, _1887));
    float _3988 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1901 = _1877 * _1877;
    float _1905 = ((_1896 * _1896) * (_1901 + (-1.0))) + 1.0;
    float _1913 = exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0);
    float _1914 = 0.959999978542327880859375 - _662;
    float _1916 = 0.959999978542327880859375 - _663;
    float _1917 = 0.959999978542327880859375 - _664;
    float _1924 = 1.0 - _1877;
    float _1935 = (0.5 / (((_1892 * ((_1891 * _1924) + _1877)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _1924) + _1877) * _1891))) * _1891;
    float _3999 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1937 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1901 / ((_1905 * _1905) * 3.141590118408203125));
    uint _1948 = _1725 + 9u;
    float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1763].w)) * _594) * 0.949999988079071044921875);
    float _1960 = _1959 * _1959;
    float _1961 = cbLight._m0[_1763].x + _543;
    float _1962 = cbLight._m0[_1763].y + _544;
    float _1963 = cbLight._m0[_1763].z + _545;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1968 = _1967 * _1961;
    float _1969 = _1967 * _1962;
    float _1970 = _1967 * _1963;
    float _1971 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1763].xyz));
    float _4010 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1975 = dot(vec3(_461, _462, _463), vec3(_1968, _1969, _1970));
    float _4021 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1968, _1969, _1970));
    float _4032 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1960 * _1960;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1994 = exp2(log2(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * 5.0);
    float _2001 = 1.0 - _1960;
    float _2011 = (0.5 / (((_1892 * ((_1974 * _2001) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _2001) + _1960) * _1974))) * _1974;
    float _4043 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    float _2023 = (((((_1994 * _1914) + _665) * cbLight._m0[_1948].x) * _2013) * _1748) + (((((_1913 * _1914) + _665) * cbLight._m0[_1863].x) * _1937) * _1759);
    float _2024 = (((((_1994 * _1916) + _667) * cbLight._m0[_1948].y) * _2013) * _1748) + (((((_1913 * _1916) + _667) * cbLight._m0[_1863].y) * _1937) * _1759);
    float _2025 = (((((_1994 * _1917) + _668) * cbLight._m0[_1948].z) * _2013) * _1748) + (((((_1913 * _1917) + _668) * cbLight._m0[_1863].z) * _1937) * _1759);
    float _2087;
    float _2089;
    float _2091;
    if (_1800)
    {
        _2087 = _2023;
        _2089 = _2024;
        _2091 = _2025;
    }
    else
    {
        uint _2093 = _1725 + 2u;
        uint _2097 = _1725 + 10u;
        float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _594) * 0.949999988079071044921875);
        float _2112 = _2111 * _2111;
        float _2113 = cbLight._m0[_2093].x + _543;
        float _2114 = cbLight._m0[_2093].y + _544;
        float _2115 = cbLight._m0[_2093].z + _545;
        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
        float _2120 = _2119 * _2113;
        float _2121 = _2119 * _2114;
        float _2122 = _2119 * _2115;
        float _2123 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2093].xyz));
        float _4054 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2127 = dot(vec3(_461, _462, _463), vec3(_2120, _2121, _2122));
        float _4065 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2131 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2120, _2121, _2122));
        float _4076 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2135 = _2112 * _2112;
        float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
        float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0);
        float _2153 = 1.0 - _2112;
        float _2163 = (0.5 / (((_1892 * ((_2126 * _2153) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _2153) + _2112) * _2126))) * _2126;
        float _4087 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2165 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
        float _2166 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2087 = (((((_2146 * _1914) + _665) * cbLight._m0[_2097].x) * _2165) * _2166) + _2023;
        _2089 = (((((_2146 * _1916) + _667) * cbLight._m0[_2097].y) * _2165) * _2166) + _2024;
        _2091 = (((((_2146 * _1917) + _668) * cbLight._m0[_2097].z) * _2165) * _2166) + _2025;
    }
    float _2201;
    float _2203;
    float _2205;
    if (_1818)
    {
        _2201 = _2087;
        _2203 = _2089;
        _2205 = _2091;
    }
    else
    {
        uint _2212 = _1725 + 3u;
        uint _2216 = _1725 + 11u;
        float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _594) * 0.949999988079071044921875);
        float _2231 = _2230 * _2230;
        float _2232 = cbLight._m0[_2212].x + _543;
        float _2233 = cbLight._m0[_2212].y + _544;
        float _2234 = cbLight._m0[_2212].z + _545;
        float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
        float _2239 = _2238 * _2232;
        float _2240 = _2238 * _2233;
        float _2241 = _2238 * _2234;
        float _2242 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2212].xyz));
        float _4103 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2246 = dot(vec3(_461, _462, _463), vec3(_2239, _2240, _2241));
        float _4114 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2250 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2239, _2240, _2241));
        float _4125 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2254 = _2231 * _2231;
        float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
        float _2265 = exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0);
        float _2272 = 1.0 - _2231;
        float _2282 = (0.5 / (((_1892 * ((_2245 * _2272) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _2272) + _2231) * _2245))) * _2245;
        float _4136 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2284 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
        float _2285 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _2201 = (((((_2265 * _1914) + _665) * cbLight._m0[_2216].x) * _2284) * _2285) + _2087;
        _2203 = (((((_2265 * _1916) + _667) * cbLight._m0[_2216].y) * _2284) * _2285) + _2089;
        _2205 = (((((_2265 * _1917) + _668) * cbLight._m0[_2216].z) * _2284) * _2285) + _2091;
    }
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    if (_1723.y == 0u)
    {
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2360;
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2360;
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2360;
        uvec4 _2375 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2376 = _2375.x;
        uint _2387 = uint((float(_2375.y) * floor(float(uint(cbSceneParam._m0[85u].y * _552) / _2376))) + floor(float(uint(cbSceneParam._m0[85u].x * _551) / _2376)));
        float _2397 = (log2(_2363 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2398 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        uint _2401 = uint(isnan(14.0) ? _2398 : (isnan(_2398) ? 14.0 : min(_2398, 14.0)));
        uvec4 _2406 = texelFetch(g_lightClusterGridBuffer, int(((_2401 << 2u) + (_2387 << 6u)) >> 2u));
        uint _2407 = _2406.x;
        uint _2408 = _2375.z;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        if (((((1u << ((_2408 >> 4u) & 15u)) + 4294967295u) & _2407) == 0u) || ((_2408 & 240u) == 0u))
        {
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
        }
        else
        {
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            uint _2675 = 0u;
            uint _2684;
            bool _2685;
            for (;;)
            {
                _2684 = texelFetch(g_lightClassification, int((((_2401 << 5u) + (_2387 << 9u)) + (_2675 << 2u)) >> 2u)).x;
                _2685 = _2684 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2685)
                {
                    frontier_phi_69_pred = _2674;
                    frontier_phi_69_pred_1 = _2673;
                    frontier_phi_69_pred_2 = _2672;
                    frontier_phi_69_pred_3 = _2670;
                    frontier_phi_69_pred_4 = _2669;
                    frontier_phi_69_pred_5 = _2671;
                }
                else
                {
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    uint _2799;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2684;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    for (;;)
                    {
                        uint _2803 = uint(findLSB(_2799)) + (_2675 << 5u);
                        uint _2800 = (_2799 + 4294967295u) & _2799;
                        uint _2805 = _2803 * 48u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2825 = (_2803 * 48u) + 4u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2844 = (_2803 * 48u) + 8u;
                        vec3 _2855 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x));
                        float _2859 = _2819.x - _2361;
                        float _2860 = _2819.y - _2362;
                        float _2861 = _2819.z - _2363;
                        float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                        float _2865 = inversesqrt(_2862);
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2869 = dot(vec3(_575, _578, _581), vec3(_2866, _2867, _2868));
                        float _2874 = 1.0 - (_2862 * _2819.w);
                        float _4162 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2876 = sqrt(_2862) * _2838.w;
                        float _2879 = 1.39999997615814208984375 / (_2876 + 1.39999997615814208984375);
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2869) + _2880;
                        float _2886 = _2876 * _2876;
                        float _2890 = ((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2875) / ((_2886 * 0.699999988079071044921875) + 1.0);
                        float _2894 = (-0.0) - _2361;
                        float _2895 = (-0.0) - _2362;
                        float _2896 = (-0.0) - _2363;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2911 = exp2(log2(1.0 / ((_2886 * 3.5) + 5.0)) * 0.25);
                        float _2912 = 1.0 - _696;
                        float _2919 = sqrt(1.0 - ((1.0 - (_2912 * _2912)) * (1.0 - (_2911 * _2911))));
                        float _2920 = _2919 * _2919;
                        float _2921 = _2920 * _2920;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2932 = dot(vec3(_575, _578, _581), vec3(_2901, _2902, _2903));
                        float _4178 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2936 = dot(vec3(_575, _578, _581), vec3(_2928 * _2922, _2928 * _2923, _2928 * _2924));
                        float _4189 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2943 = ((_2939 * _2939) * (_2921 + (-1.0))) + 1.0;
                        float _2944 = _2879 * _2920;
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2869) + _2945;
                        float _4200 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2950 = 1.0 - _2920;
                        float _2960 = (0.5 / (((_2949 * ((_2935 * _2950) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2949 * _2950) + _2920) * _2935))) * _2949;
                        float _4211 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2971 = (((_2921 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_2943 * _2943) * ((_2886 * 2.1991131305694580078125) + 3.141590118408203125))) * _2875;
                        _2728 = (_2890 * _2838.x) + _2796;
                        _2729 = (_2890 * _2838.y) + _2797;
                        _2730 = (_2890 * _2838.z) + _2798;
                        _2725 = (_2971 * _2855.x) + _2793;
                        _2726 = (_2971 * _2855.y) + _2794;
                        _2727 = (_2971 * _2855.z) + _2795;
                        if (_2800 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2800;
                        }
                    }
                    frontier_phi_69_pred = _2730;
                    frontier_phi_69_pred_1 = _2729;
                    frontier_phi_69_pred_2 = _2728;
                    frontier_phi_69_pred_3 = _2726;
                    frontier_phi_69_pred_4 = _2725;
                    frontier_phi_69_pred_5 = _2727;
                }
                _2536 = frontier_phi_69_pred;
                _2534 = frontier_phi_69_pred_1;
                _2532 = frontier_phi_69_pred_2;
                _2528 = frontier_phi_69_pred_3;
                _2526 = frontier_phi_69_pred_4;
                _2530 = frontier_phi_69_pred_5;
                uint _2676 = _2675 + 1u;
                if (_2676 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2669 = _2526;
                    _2670 = _2528;
                    _2671 = _2530;
                    _2672 = _2532;
                    _2673 = _2534;
                    _2674 = _2536;
                    _2675 = _2676;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
        }
        uvec4 _2539 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2540 = _2539.z;
        uint _2542 = (_2540 >> 8u) & 15u;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((4294967295u << _2542) & _2407) == 0u)
        {
            _2637 = _2525;
            _2639 = _2527;
            _2641 = _2529;
            _2643 = _2531;
            _2645 = _2533;
            _2647 = _2535;
        }
        else
        {
            float _2662 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
            float _2663 = _2662 * _2361;
            float _2664 = _2662 * _2362;
            float _2665 = _2662 * _2363;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2542 < ((_2540 >> 12u) & 15u))
            {
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2776 = _2525;
                float _2777 = _2527;
                float _2778 = _2529;
                float _2779 = _2531;
                float _2780 = _2533;
                float _2781 = _2535;
                uint _2782 = _2542;
                uint _2791;
                bool _2792;
                for (;;)
                {
                    _2791 = texelFetch(g_lightClassification, int((((_2401 << 5u) + (_2387 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                    _2792 = _2791 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2792)
                    {
                        frontier_phi_75_pred = _2778;
                        frontier_phi_75_pred_1 = _2777;
                        frontier_phi_75_pred_2 = _2776;
                        frontier_phi_75_pred_3 = _2781;
                        frontier_phi_75_pred_4 = _2780;
                        frontier_phi_75_pred_5 = _2779;
                    }
                    else
                    {
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _2989 = _2776;
                        float _2990 = _2777;
                        float _2991 = _2778;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        uint _2995 = _2791;
                        uint _2996;
                        vec4 _3021;
                        float _3022;
                        vec4 _3037;
                        vec3 _3049;
                        vec4 _3065;
                        vec4 _3080;
                        float _3127;
                        bool _3128;
                        for (;;)
                        {
                            uint _3006 = ((_2782 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2995));
                            _2996 = (_2995 + 4294967295u) & _2995;
                            uint _3008 = _3006 * 40u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            _3022 = _3021.w;
                            uint _3024 = (_3006 * 40u) + 4u;
                            _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3039 = (_3006 * 40u) + 8u;
                            _3049 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x));
                            uint _3052 = (_3006 * 40u) + 16u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3067 = (_3006 * 40u) + 20u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3083 = (_3006 * 40u) + 24u;
                            vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3102 = (_3006 * 40u) + 28u;
                            vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3127 = fma(_2363, _3115.z, fma(_2362, _3115.y, _3115.x * _2361)) + _3115.w;
                            _3128 = !((fma(_2363, _3096.z, fma(_2362, _3096.y, _3096.x * _2361)) + _3096.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3128)
                            {
                                float _3155 = _3021.x - _2361;
                                float _3156 = _3021.y - _2362;
                                float _3157 = _3021.z - _2363;
                                float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                                float _3161 = inversesqrt(_3158);
                                float _3162 = _3161 * _3155;
                                float _3163 = _3161 * _3156;
                                float _3164 = _3161 * _3157;
                                float _3168 = 1.0 - (_3158 / (_3022 * _3022));
                                float _4222 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3173 = sqrt(_3158) * _3037.w;
                                float _3175 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                                float _3176 = _3175 * _3175;
                                float _3179 = ((1.0 - _3176) * dot(vec3(_3162, _3163, _3164), vec3(_575, _578, _581))) + _3176;
                                float _3182 = _3173 * _3173;
                                float _3186 = (fma(_2363, _3065.z, fma(_2362, _3065.y, _3065.x * _2361)) + _3065.w) / _3127;
                                float _3187 = (fma(_2363, _3080.z, fma(_2362, _3080.y, _3080.x * _2361)) + _3080.w) / _3127;
                                float _3191 = 1.0 - dot(vec2(_3186, _3187), vec2(_3186, _3187));
                                float _4238 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3193 = _3192 * (((isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * _3169) / ((_3182 * 0.699999988079071044921875) + 1.0));
                                float _3205 = exp2(log2(1.0 / ((_3182 * 3.5) + 5.0)) * 0.25);
                                float _3206 = 1.0 - _696;
                                float _3213 = sqrt(1.0 - ((1.0 - (_3206 * _3206)) * (1.0 - (_3205 * _3205))));
                                float _3214 = _3213 * _3213;
                                float _3215 = _3214 * _3214;
                                float _3216 = _3162 - _2663;
                                float _3217 = _3163 - _2664;
                                float _3218 = _3164 - _2665;
                                float _3222 = inversesqrt(dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218)));
                                float _3226 = dot(vec3(_575, _578, _581), vec3((-0.0) - _2663, (-0.0) - _2664, (-0.0) - _2665));
                                float _4249 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3229 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3230 = dot(vec3(_575, _578, _581), vec3(_3222 * _3216, _3222 * _3217, _3222 * _3218));
                                float _4260 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3237 = ((_3233 * _3233) * (_3215 + (-1.0))) + 1.0;
                                float _3238 = _3175 * _3214;
                                float _3239 = _3238 * _3238;
                                float _3245 = ((1.0 - _3239) * dot(vec3(_575, _578, _581), vec3(_3162, _3163, _3164))) + _3239;
                                float _4271 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3247 = 1.0 - _3214;
                                float _3257 = (0.5 / (((_3246 * ((_3229 * _3247) + _3214)) + 9.9999999392252902907785028219223e-09) + (((_3246 * _3247) + _3214) * _3229))) * _3246;
                                float _4282 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3267 = (_3192 * _3169) * (((_3215 * 3.1415927410125732421875) * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) / ((_3237 * _3237) * ((_3182 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3267 * _3049.z;
                                frontier_phi_81_pred_1 = _3267 * _3049.y;
                                frontier_phi_81_pred_2 = _3267 * _3049.x;
                                frontier_phi_81_pred_3 = _3193 * _3037.z;
                                frontier_phi_81_pred_4 = _3193 * _3037.y;
                                frontier_phi_81_pred_5 = _3193 * _3037.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3273 = frontier_phi_81_pred;
                            _3272 = frontier_phi_81_pred_1;
                            _3271 = frontier_phi_81_pred_2;
                            _3276 = frontier_phi_81_pred_3;
                            _3275 = frontier_phi_81_pred_4;
                            _3274 = frontier_phi_81_pred_5;
                            _2979 = _3274 + _2992;
                            _2980 = _3275 + _2993;
                            _2981 = _3276 + _2994;
                            _2976 = _3271 + _2989;
                            _2977 = _3272 + _2990;
                            _2978 = _3273 + _2991;
                            if (_2996 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2996;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2978;
                        frontier_phi_75_pred_1 = _2977;
                        frontier_phi_75_pred_2 = _2976;
                        frontier_phi_75_pred_3 = _2981;
                        frontier_phi_75_pred_4 = _2980;
                        frontier_phi_75_pred_5 = _2979;
                    }
                    _2642 = frontier_phi_75_pred;
                    _2640 = frontier_phi_75_pred_1;
                    _2638 = frontier_phi_75_pred_2;
                    _2648 = frontier_phi_75_pred_3;
                    _2646 = frontier_phi_75_pred_4;
                    _2644 = frontier_phi_75_pred_5;
                    uint _2783 = _2782 + 1u;
                    if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2776 = _2638;
                        _2777 = _2640;
                        _2778 = _2642;
                        _2779 = _2644;
                        _2780 = _2646;
                        _2781 = _2648;
                        _2782 = _2783;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2646;
                frontier_phi_63_64_ladder_1 = _2644;
                frontier_phi_63_64_ladder_2 = _2642;
                frontier_phi_63_64_ladder_3 = _2648;
                frontier_phi_63_64_ladder_4 = _2640;
                frontier_phi_63_64_ladder_5 = _2638;
            }
            else
            {
                frontier_phi_63_64_ladder = _2533;
                frontier_phi_63_64_ladder_1 = _2531;
                frontier_phi_63_64_ladder_2 = _2529;
                frontier_phi_63_64_ladder_3 = _2535;
                frontier_phi_63_64_ladder_4 = _2527;
                frontier_phi_63_64_ladder_5 = _2525;
            }
            _2637 = frontier_phi_63_64_ladder_5;
            _2639 = frontier_phi_63_64_ladder_4;
            _2641 = frontier_phi_63_64_ladder_2;
            _2643 = frontier_phi_63_64_ladder_1;
            _2645 = frontier_phi_63_64_ladder;
            _2647 = frontier_phi_63_64_ladder_3;
        }
        float _2652 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
        _2419 = (_2652 * _2643) + _1856;
        _2421 = (_2652 * _2645) + _1858;
        _2423 = (_2652 * _2647) + _1860;
        _2425 = ((_2637 * _665) * _2652) + _2201;
        _2427 = ((_2639 * _667) * _2652) + _2203;
        _2429 = ((_2641 * _668) * _2652) + _2205;
    }
    else
    {
        _2419 = _1856;
        _2421 = _1858;
        _2423 = _1860;
        _2425 = _2201;
        _2427 = _2203;
        _2429 = _2205;
    }
    vec4 _2435 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4298 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4309 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4320 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2459 = (((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2419 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _680))) + ((_2425 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1492)) * cbPerFrame._m0[3u].x)) + (_2435.x * cbMtdParam._m0[3u].x);
    float _2461 = ((_2435.y * cbMtdParam._m0[3u].x) + ((_2427 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1492)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2421 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _680)));
    float _2463 = ((_2435.z * cbMtdParam._m0[3u].x) + ((_2429 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1492)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2423 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _680)));
    uint _2467 = _607 + 6u;
    float _2475 = _551 / cbSceneParam._m0[86u].x;
    float _2476 = _552 / cbSceneParam._m0[86u].y;
    vec4 _2490 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2475, _2476, (log2((isnan(cbSceneParam._m0[77u].w) ? _484 : (isnan(_484) ? cbSceneParam._m0[77u].w : min(_484, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2492 = _2490.x;
    float _2493 = _2490.y;
    float _2494 = _2490.z;
    float _2495 = _2490.w;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_484 > cbSceneParam._m0[78u].w)
    {
        float _2550 = isnan(_484) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _484 : min(cbSceneParam._m0[80u].w, _484));
        float _2551 = _2550 / _484;
        float _2562 = _2551 * _536;
        float _2563 = _537 * _2551;
        float _2564 = (-0.0) - _2563;
        float _2565 = _2551 * _538;
        float _2567 = (cbSceneParam._m0[77u].w * _2564) / _2550;
        float _2568 = _2567 + cbSceneParam._m0[79u].w;
        float _2569 = cbSceneParam._m0[79u].w - _2563;
        float _2575 = sqrt(((_2562 * _2562) + (_2563 * _2563)) + (_2565 * _2565));
        float _2578 = (1.0 - (cbSceneParam._m0[77u].w / _2550)) * _2575;
        float _2583 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2585 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2738;
        if (abs((_2564 - _2567) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2738 = ((((_2568 > 0.0) ? exp2(_2583 * _2568) : (2.0 - exp2(_2585 * _2568))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2578;
        }
        else
        {
            float _2698 = 1.0 / cbSceneParam._m0[80u].x;
            float _2699 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : max(_2568, _2569));
            float _2700 = isnan(_2569) ? _2568 : (isnan(_2568) ? _2569 : min(_2568, _2569));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            _2738 = ((abs(_2575 / _2564) * cbSceneParam._m0[80u].y) * ((((_2709 - _2710) * 2.0) - ((exp2(_2583 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0)))) - exp2(_2583 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))))) * _2698)) - ((exp2(_2585 * _2709) - exp2(_2585 * _2710)) * _2698))) + (_2578 * cbSceneParam._m0[80u].z);
        }
        vec4 _2740 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2475, _2476, 1.0), 0.0);
        float _2749 = exp2((_2738 * (-1.44269502162933349609375)) * (1.0 - _2740.w));
        float _2750 = log2(_2749);
        float _2766 = log2(_2495);
        _2587 = (exp2(_2766 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].x)) * _2740.x) / cbSceneParam._m0[78u].x)) + _2492;
        _2589 = (exp2(_2766 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].y)) * _2740.y) / cbSceneParam._m0[78u].y)) + _2493;
        _2591 = (exp2(_2766 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2750 * cbSceneParam._m0[78u].z)) * _2740.z) / cbSceneParam._m0[78u].z)) + _2494;
        _2593 = _2749 * _2495;
    }
    else
    {
        _2587 = _2492;
        _2589 = _2493;
        _2591 = _2494;
        _2593 = _2495;
    }
    float _2605 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2606 = _2605 == 3.0;
    float _2607 = log2(_2593);
    float _2614 = exp2(_2607 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0)));
    float _2615 = exp2(_2607 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0)));
    float _2616 = exp2(_2607 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0)));
    float _2625 = (_2605 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2625 * (_2606 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.y = _2625 * (_2606 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.z = _2625 * (_2606 ? _2616 : (_2616 + (cbSceneParam._m0[72u].w * _2591)));
    SV_Target.w = cbInstanceData._m0[_2467].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2467].w;
}


