#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1198;
float _3881;
float _3882;
float _3883;
float _3884;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _269 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _271 = log2(0.0);
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[14u].x;
    _196[0u] = cbMtdParam._m0[14u].y;
    _197[0u] = cbMtdParam._m0[14u].z;
    _195[1u] = cbMtdParam._m0[15u].x;
    _196[1u] = cbMtdParam._m0[15u].y;
    _197[1u] = cbMtdParam._m0[15u].z;
    _195[2u] = cbMtdParam._m0[16u].x;
    _196[2u] = cbMtdParam._m0[16u].y;
    _197[2u] = cbMtdParam._m0[16u].z;
    _195[3u] = cbMtdParam._m0[11u].x;
    _196[3u] = cbMtdParam._m0[11u].y;
    _197[3u] = cbMtdParam._m0[11u].z;
    _195[4u] = cbMtdParam._m0[12u].x;
    _196[4u] = cbMtdParam._m0[12u].y;
    _197[4u] = cbMtdParam._m0[12u].z;
    _195[5u] = cbMtdParam._m0[13u].x;
    _196[5u] = cbMtdParam._m0[13u].y;
    _197[5u] = cbMtdParam._m0[13u].z;
    vec4 _343 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _347 = _343.y;
    float _350 = (_343.x + (-0.02500000037252902984619140625)) * 8.0;
    float _352 = roundEven(_350);
    float _353 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    uint _356 = uint(int(isnan(5.0) ? _353 : (isnan(_353) ? 5.0 : min(_353, 5.0))));
    float _373 = roundEven(5.0 - _350);
    float _374 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = isnan(4.0) ? _374 : (isnan(_374) ? 4.0 : min(_374, 4.0));
    float _381;
    float _383;
    if (exp2(_271 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _381 = cbMtdParam._m0[26u].x;
        _383 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _381 = cbMtdParam._m0[22u].x;
        _383 = cbMtdParam._m0[22u].y;
    }
    float _385 = _381 * TEXCOORD.x;
    float _386 = _383 * TEXCOORD.y;
    float _397 = floor(_375);
    vec4 _400 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _385) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _386) + cbTextureTilingScale._m0[6u].w, _397));
    vec4 _422 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _269) + cbTextureTilingScale._m0[0u].w));
    float _430 = ((((((_195[_356] - cbMtdParam._m0[18u].x) * _347) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _400.x) * cbMtdParam._m0[9u].x) * _422.x;
    float _434 = ((((((_196[_356] - cbMtdParam._m0[18u].y) * _347) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _400.y) * cbMtdParam._m0[9u].y) * _422.y;
    float _438 = ((((((_197[_356] - cbMtdParam._m0[18u].z) * _347) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _400.z) * cbMtdParam._m0[9u].z) * _422.z;
    vec4 _450 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _269) + cbTextureTilingScale._m0[1u].w));
    float _454 = _450.z;
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[22u].z;
    _191[0u] = cbMtdParam._m0[22u].w;
    _190[1u] = cbMtdParam._m0[23u].z;
    _191[1u] = cbMtdParam._m0[23u].w;
    _190[2u] = cbMtdParam._m0[24u].x;
    _191[2u] = cbMtdParam._m0[24u].y;
    _190[3u] = cbMtdParam._m0[24u].z;
    _191[3u] = cbMtdParam._m0[24u].w;
    _190[4u] = cbMtdParam._m0[23u].x;
    _191[4u] = cbMtdParam._m0[23u].y;
    float _498 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    uint _500 = uint(int(isnan(4.0) ? _498 : (isnan(_498) ? 4.0 : min(_498, 4.0))));
    float _505 = _191[_500] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _385) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _386) + cbTextureTilingScale._m0[8u].w, _397)).x;
    vec4 _524 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _385) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _386) + cbTextureTilingScale._m0[7u].w, _397));
    float _531 = (_524.x * 2.0) + (-1.0);
    float _532 = (_524.y * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _3923 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))));
    float _548 = (cbMtdParam._m0[20u].x * (((_454 * 2.0) * (_524.z + _190[_500])) - _454)) + _454;
    float _552 = (cbMtdParam._m0[20u].y * ((_450.x * 2.0) + (-1.0))) + _531;
    float _553 = (cbMtdParam._m0[20u].y * ((_450.y * 2.0) + (-1.0))) + _532;
    float _556 = fma(_539, _247, fma(_553, _239 * TANGENT.x, (_225 * _217) * _552));
    float _559 = fma(_539, _248, fma(_553, _239 * TANGENT.y, (_225 * _218) * _552));
    float _562 = fma(_539, _249, fma(_553, _239 * TANGENT.z, (_225 * _219) * _552));
    float _566 = inversesqrt(dot(vec3(_556, _559, _562), vec3(_556, _559, _562)));
    float _567 = _566 * _556;
    float _568 = _566 * _559;
    float _569 = _566 * _562;
    float _3934 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _570 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3956 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3967 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3978 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _574 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _590 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _641 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _631);
    float _642 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _631);
    float _643 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _631);
    float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
    float _648 = _641 * _647;
    float _649 = _642 * _647;
    float _650 = _643 * _647;
    vec4 _655 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _657 = _655.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _878 = sqrt(((_641 * _641) + (_642 * _642)) + (_643 * _643));
        float _884 = (cbMatDynParam._m0[5u].x * _878) + cbMatDynParam._m0[5u].y;
        float _3989 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _889 = (cbMatDynParam._m0[5u].z * _878) + cbMatDynParam._m0[5u].w;
        float _4000 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) - _885)) + _885) < ((_657 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _673 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _675 = _673.w;
    float _693 = fma(_569, cbSceneParam._m0[5u].z, fma(_568, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _567));
    float _696 = fma(_569, cbSceneParam._m0[6u].z, fma(_568, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _567));
    float _699 = fma(_569, cbSceneParam._m0[7u].z, fma(_568, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _567));
    vec4 _701 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _712 = (((_701.y - _570) + (_701.w * _570)) * cbMtdParam._m0[3u].x) + _570;
    uint _725 = uint(roundEven(NORMAL.w)) * 13u;
    uint _726 = _725 + 9u;
    uint _727 = _726 + uint(cbMatDynParam._m0[0u].w);
    float _733 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_727].x;
    float _734 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * cbInstanceData._m0[_727].y;
    float _735 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * cbInstanceData._m0[_727].z;
    float _4011 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    vec4 _739 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _744 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _755 = (((_744.x - _574) + (_744.w * _574)) * cbMtdParam._m0[3u].x) + _574;
    float _768 = (cbMtdParam._m0[3u].x * (((_736 * _675) - _736) + _739.x)) + _736;
    float _769 = (cbMtdParam._m0[3u].x * (((_737 * _675) - _737) + _739.y)) + _737;
    float _770 = (cbMtdParam._m0[3u].x * (((_738 * _675) - _738) + _739.z)) + _738;
    float _771 = 1.0 - _755;
    float _772 = _771 * _768;
    float _773 = _771 * _769;
    float _774 = _771 * _770;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _755;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _755;
    float _781 = (_770 + (-0.039999999105930328369140625)) * _755;
    float _782 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    float _785 = _781 + 0.039999999105930328369140625;
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _797 = _794.x * TEXCOORD_4;
    float _798 = dot(vec3(_567, _568, _569), vec3(_648, _649, _650));
    float _801 = _798 * 2.0;
    float _805 = (_801 * _567) - _648;
    float _806 = (_801 * _568) - _649;
    float _807 = (_801 * _569) - _650;
    float _811 = abs(dot(vec3(_648, _649, _650), vec3(_567, _568, _569)));
    float _4044 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _813 = sqrt(_712);
    float _824 = exp2((_813 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_813 * 3.0));
    float _830 = (1.0 - _824) * ((_813 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _831 = _824 * _813;
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1197;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _922 = fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859));
        float _926 = fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859));
        float _930 = fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859));
        float _955 = _859 + _567;
        float _956 = _863 + _568;
        float _957 = _867 + _569;
        float _967 = fma(_957, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955)) - _922;
        float _968 = fma(_957, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955)) - _926;
        float _969 = fma(_957, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955)) - _930;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_922 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_926 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[34u].z) + ((((((_930 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1025 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_991.x + (-0.5));
        float _1027 = _1025 * (_991.y + (-0.5));
        float _1028 = _1025 * (_991.z + (-0.5));
        float _1035 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_998.x + (-0.5));
        float _1037 = _1035 * (_998.y + (-0.5));
        float _1038 = _1035 * (_998.z + (-0.5));
        float _1045 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1005.x + (-0.5));
        float _1047 = _1045 * (_1005.y + (-0.5));
        float _1048 = _1045 * (_1005.z + (-0.5));
        float _1055 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1012.x + (-0.5));
        float _1057 = _1055 * (_1012.y + (-0.5));
        float _1058 = _1055 * (_1012.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1079 = (dot(vec3(_567, _568, _569), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1089 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _4092 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1091 + 1.0))) + _1096) * _1059;
        float _1106 = _1027 * 0.5;
        float _1107 = _1037 * 0.5;
        float _1108 = _1047 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_567, _568, _569), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4125 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1133 + 1.0))) + _1138) * _1060;
        float _1148 = _1028 * 0.5;
        float _1149 = _1038 * 0.5;
        float _1150 = _1048 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_567, _568, _569), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4158 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1175 + 1.0))) + _1180) * _1061;
        _1197 = _1028;
        _1199 = _1027;
        _1200 = _1026;
        _1201 = _1038;
        _1202 = _1037;
        _1203 = _1036;
        _1204 = _1048;
        _1205 = _1047;
        _1206 = _1046;
        _1207 = _1061;
        _1208 = _1060;
        _1209 = _1059;
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _1198;
        _1199 = _1198;
        _1200 = _1198;
        _1201 = _1198;
        _1202 = _1198;
        _1203 = _1198;
        _1204 = _1198;
        _1205 = _1198;
        _1206 = _1198;
        _1207 = _1198;
        _1208 = _1198;
        _1209 = _1198;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1241 = fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859));
        float _1245 = fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859));
        float _1249 = fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859));
        float _1272 = _859 + _567;
        float _1273 = _863 + _568;
        float _1274 = _867 + _569;
        float _1284 = fma(_1274, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272)) - _1241;
        float _1285 = fma(_1274, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272)) - _1245;
        float _1286 = fma(_1274, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272)) - _1249;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1241 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1245 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[35u].z) + ((((((_1249 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1340 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1307.x + (-0.5));
        float _1342 = _1340 * (_1307.y + (-0.5));
        float _1343 = _1340 * (_1307.z + (-0.5));
        float _1350 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1314.x + (-0.5));
        float _1352 = _1350 * (_1314.y + (-0.5));
        float _1353 = _1350 * (_1314.z + (-0.5));
        float _1360 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1321.x + (-0.5));
        float _1362 = _1360 * (_1321.y + (-0.5));
        float _1363 = _1360 * (_1321.z + (-0.5));
        float _1370 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1328.x + (-0.5));
        float _1372 = _1370 * (_1328.y + (-0.5));
        float _1373 = _1370 * (_1328.z + (-0.5));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = _1341 * 0.5;
        float _1378 = _1351 * 0.5;
        float _1379 = _1361 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_567, _568, _569), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4221 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1404 + 1.0))) + _1409) * _1374;
        float _1419 = _1342 * 0.5;
        float _1420 = _1352 * 0.5;
        float _1421 = _1362 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_567, _568, _569), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4254 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1446 + 1.0))) + _1451) * _1375;
        float _1461 = _1343 * 0.5;
        float _1462 = _1353 * 0.5;
        float _1463 = _1363 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_567, _568, _569), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4287 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1488 + 1.0))) + _1493) * _1376;
        _1510 = _1343;
        _1511 = _1342;
        _1512 = _1341;
        _1513 = _1353;
        _1514 = _1352;
        _1515 = _1351;
        _1516 = _1363;
        _1517 = _1362;
        _1518 = _1361;
        _1519 = _1376;
        _1520 = _1375;
        _1521 = _1374;
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
    }
    else
    {
        _1510 = _1198;
        _1511 = _1198;
        _1512 = _1198;
        _1513 = _1198;
        _1514 = _1198;
        _1515 = _1198;
        _1516 = _1198;
        _1517 = _1198;
        _1518 = _1198;
        _1519 = _1198;
        _1520 = _1198;
        _1521 = _1198;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1210)) + _1210;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1211)) + _1211;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1212)) + _1212;
    float _1557 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1534));
    float _1578 = _805 * 0.5;
    float _1579 = _806 * 0.5;
    float _1580 = _807 * 0.5;
    float _1581 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1584 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1587 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1621;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1594 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1197, _1201, _1204, _1207));
        float _1598 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1602 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1609 = dot(vec4(cbModelParam._m0[39u]), vec4(_1578, _1579, _1580, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1632;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1623 = dot(vec4(cbModelParam._m0[40u]), vec4(_1578, _1579, _1580, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1636 = (_1632 * cbModelParam._m0[1u].x) + (_1621 * (1.0 - cbModelParam._m0[1u].x));
    float _1646 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _712);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1646 : min(cbModelParam._m0[25u].z, _1646));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1694 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1698 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1702 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1705 = fma(_807, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805));
        float _1708 = fma(_807, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805));
        float _1711 = fma(_807, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805));
        float _1739;
        if (_1705 > 0.0)
        {
            _1739 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1739 = frontier_phi_21_19_ladder;
        }
        float _1910;
        if (_1708 > 0.0)
        {
            _1910 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1910 = frontier_phi_30_26_ladder;
        }
        float _2205;
        if (_1711 > 0.0)
        {
            _2205 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2205 = frontier_phi_42_37_ladder;
        }
        float _2207 = isnan(_1910) ? _1739 : (isnan(_1739) ? _1910 : min(_1739, _1910));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1705) + _1694;
        float _2213 = (_2208 * _1708) + _1698;
        float _2214 = (_2208 * _1711) + _1702;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2215;
        float _2219 = _2215 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 > _2219) || ((_2213 < _2217) || ((_2212 < _2217) || (_2212 > _2219))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2214, cbModelParam._m0[9u].z, fma(_2213, cbModelParam._m0[9u].y, _2212 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2214, cbModelParam._m0[10u].z, fma(_2213, cbModelParam._m0[10u].y, _2212 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2214, cbModelParam._m0[11u].z, fma(_2213, cbModelParam._m0[11u].y, _2212 * cbModelParam._m0[11u].x))), _1647);
            frontier_phi_20_42_ladder = _2359.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2359.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2359.x * cbModelParam._m0[1u].y;
        }
        _1727 = frontier_phi_20_42_ladder_2;
        _1729 = frontier_phi_20_42_ladder_1;
        _1731 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_805, _806, _807), _1647);
        _1727 = _1715.x * cbModelParam._m0[1u].y;
        _1729 = _1715.y * cbModelParam._m0[1u].y;
        _1731 = _1715.z * cbModelParam._m0[1u].y;
    }
    float _1735 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _712);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1735 : min(cbModelParam._m0[25u].w, _1735));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1789 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1793 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1797 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1800 = fma(_807, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805));
        float _1803 = fma(_807, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805));
        float _1806 = fma(_807, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805));
        float _1915;
        if (_1800 > 0.0)
        {
            _1915 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1915 = frontier_phi_32_28_ladder;
        }
        float _2232;
        if (_1803 > 0.0)
        {
            _2232 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2232 = frontier_phi_44_39_ladder;
        }
        float _2570;
        if (_1806 > 0.0)
        {
            _2570 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2570 = frontier_phi_54_51_ladder;
        }
        float _2572 = isnan(_2232) ? _1915 : (isnan(_1915) ? _2232 : min(_1915, _2232));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _1800) + _1789;
        float _2578 = (_2573 * _1803) + _1793;
        float _2579 = (_2573 * _1806) + _1797;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2581 = (-1.0) - _2580;
        float _2583 = _2580 + 1.0;
        float frontier_phi_29_54_ladder;
        float frontier_phi_29_54_ladder_1;
        float frontier_phi_29_54_ladder_2;
        if ((_2579 > _2583) || ((_2579 < _2581) || ((_2578 > _2583) || ((_2578 < _2581) || ((_2577 < _2581) || (_2577 > _2583))))))
        {
            frontier_phi_29_54_ladder = 0.0;
            frontier_phi_29_54_ladder_1 = 0.0;
            frontier_phi_29_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2579, cbModelParam._m0[17u].z, fma(_2578, cbModelParam._m0[17u].y, _2577 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2579, cbModelParam._m0[18u].z, fma(_2578, cbModelParam._m0[18u].y, _2577 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2579, cbModelParam._m0[19u].z, fma(_2578, cbModelParam._m0[19u].y, _2577 * cbModelParam._m0[19u].x))), _1736);
            frontier_phi_29_54_ladder = _2701.z * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_1 = _2701.y * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_2 = _2701.x * cbModelParam._m0[1u].z;
        }
        _1825 = frontier_phi_29_54_ladder_2;
        _1827 = frontier_phi_29_54_ladder_1;
        _1829 = frontier_phi_29_54_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_805, _806, _807), _1736);
        _1825 = _1809.x * cbModelParam._m0[1u].z;
        _1827 = _1809.y * cbModelParam._m0[1u].z;
        _1829 = _1809.z * cbModelParam._m0[1u].z;
    }
    float _1842 = (((_830 * _782) + _831) * _797) * ((cbModelParam._m0[1u].w * (_1825 - _1727)) + _1727);
    float _1844 = (((_830 * _784) + _831) * _797) * ((cbModelParam._m0[1u].w * (_1827 - _1729)) + _1729);
    float _1846 = (((_830 * _785) + _831) * _797) * ((cbModelParam._m0[1u].w * (_1829 - _1731)) + _1731);
    float _1849 = fma(_1846, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1852 = fma(_1846, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1855 = fma(_1846, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, _1842 * cbSceneParam._m0[91u].x));
    float _1889 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1893 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1897 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1901 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1902 = _1889 / _1901;
    float _1903 = _1893 / _1901;
    float _1904 = _1897 / _1901;
    float _2051;
    float _2052;
    float _2053;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1931 = ((uint(_1904 > cbSceneParam._m0[59u].y) + uint(_1904 > cbSceneParam._m0[59u].x)) + uint(_1904 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1932 = _1931 + 43u;
        uint _1940 = _1931 + 44u;
        uint _1948 = _1931 + 45u;
        uint _1956 = _1931 + 46u;
        float _1967 = fma(_1901, cbSceneParam._m0[_1932].w, fma(_1897, cbSceneParam._m0[_1932].z, fma(_1893, cbSceneParam._m0[_1932].y, _1889 * cbSceneParam._m0[_1932].x)));
        float _1971 = fma(_1901, cbSceneParam._m0[_1940].w, fma(_1897, cbSceneParam._m0[_1940].z, fma(_1893, cbSceneParam._m0[_1940].y, _1889 * cbSceneParam._m0[_1940].x)));
        float _1979 = fma(_1901, cbSceneParam._m0[_1956].w, fma(_1897, cbSceneParam._m0[_1956].z, fma(_1893, cbSceneParam._m0[_1956].y, _1889 * cbSceneParam._m0[_1956].x)));
        float _1984 = cbSceneParam._m0[33u].z * _1979;
        float _1986 = cbSceneParam._m0[33u].w * _1979;
        float _1989 = fma(_1901, cbSceneParam._m0[_1948].w, fma(_1897, cbSceneParam._m0[_1948].z, fma(_1893, cbSceneParam._m0[_1948].y, _1889 * cbSceneParam._m0[_1948].x))) / _1979;
        float _2037 = (cbSceneParam._m0[33u].x - sqrt(((_1903 * _1903) + (_1902 * _1902)) + (_1904 * _1904))) * cbSceneParam._m0[33u].y;
        float _4413 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2044 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 + _1967) / _1979, (_1986 + _1971) / _1979), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 + _1967) / _1979, (_1971 - _1984) / _1979), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1967 - _1984) / _1979, (_1971 - _1986) / _1979), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1967 - _1986) / _1979, (_1984 + _1971) / _1979), _1989), 0.0)).x), vec4(0.25)));
        _2051 = 1.0 - (_2044 * cbSceneParam._m0[34u].x);
        _2052 = 1.0 - (_2044 * cbSceneParam._m0[34u].y);
        _2053 = 1.0 - (_2044 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2051 = 1.0;
        _2052 = 1.0;
        _2053 = 1.0;
    }
    float _2117;
    float _2119;
    float _2121;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2105 = fma(_1901, cbSceneParam._m0[63u].w, fma(_1897, cbSceneParam._m0[63u].z, fma(_1893, cbSceneParam._m0[63u].y, _1889 * cbSceneParam._m0[63u].x)));
        float _2106 = fma(_1901, cbSceneParam._m0[60u].w, fma(_1897, cbSceneParam._m0[60u].z, fma(_1893, cbSceneParam._m0[60u].y, _1889 * cbSceneParam._m0[60u].x))) / _2105;
        float _2107 = fma(_1901, cbSceneParam._m0[61u].w, fma(_1897, cbSceneParam._m0[61u].z, fma(_1893, cbSceneParam._m0[61u].y, _1889 * cbSceneParam._m0[61u].x))) / _2105;
        float frontier_phi_41_40_ladder;
        float frontier_phi_41_40_ladder_1;
        float frontier_phi_41_40_ladder_2;
        if ((((_2106 >= cbSceneParam._m0[64u].x) && (_2107 >= cbSceneParam._m0[64u].y)) && (_2106 <= cbSceneParam._m0[64u].z)) && (_2107 <= cbSceneParam._m0[64u].w))
        {
            float _2245 = fma(_1901, cbSceneParam._m0[62u].w, fma(_1897, cbSceneParam._m0[62u].z, fma(_1893, cbSceneParam._m0[62u].y, _1889 * cbSceneParam._m0[62u].x))) / _2105;
            float _2249 = isnan(cbSceneParam._m0[41u].w) ? _2245 : (isnan(_2245) ? cbSceneParam._m0[41u].w : max(_2245, cbSceneParam._m0[41u].w));
            float _2292 = (cbSceneParam._m0[33u].x - sqrt(((_1903 * _1903) + (_1902 * _1902)) + (_1904 * _1904))) * cbSceneParam._m0[33u].y;
            float _4429 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
            float _2299 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2106, cbSceneParam._m0[33u].w + _2107), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2106, _2107 - cbSceneParam._m0[33u].z), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2106 - cbSceneParam._m0[33u].z, _2107 - cbSceneParam._m0[33u].w), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2106 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2107), _2249), 0.0)).x), vec4(0.25)));
            float _2303 = 1.0 - (_2299 * cbSceneParam._m0[34u].x);
            float _2304 = 1.0 - (_2299 * cbSceneParam._m0[34u].y);
            float _2305 = 1.0 - (_2299 * cbSceneParam._m0[34u].z);
            frontier_phi_41_40_ladder = isnan(_2305) ? _2053 : (isnan(_2053) ? _2305 : min(_2053, _2305));
            frontier_phi_41_40_ladder_1 = isnan(_2304) ? _2052 : (isnan(_2052) ? _2304 : min(_2052, _2304));
            frontier_phi_41_40_ladder_2 = isnan(_2303) ? _2051 : (isnan(_2051) ? _2303 : min(_2051, _2303));
        }
        else
        {
            frontier_phi_41_40_ladder = _2053;
            frontier_phi_41_40_ladder_1 = _2052;
            frontier_phi_41_40_ladder_2 = _2051;
        }
        _2117 = frontier_phi_41_40_ladder_2;
        _2119 = frontier_phi_41_40_ladder_1;
        _2121 = frontier_phi_41_40_ladder;
    }
    else
    {
        _2117 = _2051;
        _2119 = _2052;
        _2121 = _2053;
    }
    uvec4 _2126 = floatBitsToUint(cbInstanceData._m0[_725 + 5u]);
    uint _2128 = _2126.x * 14u;
    uint _2129 = _2128 + 13u;
    float _2136 = _797 + (-1.0);
    float _2141 = (cbLight._m0[_2129].x * _2136) + 1.0;
    float _2142 = (cbLight._m0[_2129].y * _2136) + 1.0;
    float _2143 = (cbLight._m0[_2129].z * _2136) + 1.0;
    float _2144 = (cbLight._m0[_2129].w * _2136) + 1.0;
    uint _2145 = _2128 + 5u;
    float _2151 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2155 = _2128 + 4u;
    float _2164 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2168 = _2128 | 1u;
    float _2179 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_567, _568, _569));
    float _2182 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_567, _568, _569));
    float _4465 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _4476 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2187 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * 0.3183098733425140380859375;
    float _2189 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.3183098733425140380859375;
    float _2196 = ((cbLight._m0[_2145].x * _2151) * _2189) + (((cbLight._m0[_2155].x * _2117) * _2164) * _2187);
    float _2197 = ((_2151 * cbLight._m0[_2145].y) * _2189) + (((cbLight._m0[_2155].y * _2119) * _2164) * _2187);
    float _2198 = ((_2151 * cbLight._m0[_2145].z) * _2189) + (((cbLight._m0[_2155].z * _2121) * _2164) * _2187);
    uvec4 _2202 = floatBitsToUint(cbLight._m0[_2128 + 12u]);
    bool _2204 = _2202.x == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2204)
    {
        _2306 = _2196;
        _2308 = _2197;
        _2310 = _2198;
    }
    else
    {
        uint _2314 = _2128 + 6u;
        float _2330 = (dot(vec3(cbLight._m0[_2128 + 2u].xyz), vec3(_567, _568, _569)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4487 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2333 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2306 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2196;
        _2308 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2197;
        _2310 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2198;
    }
    bool _2313 = _2202.y == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2313)
    {
        _2368 = _2306;
        _2370 = _2308;
        _2372 = _2310;
    }
    else
    {
        uint _2541 = _2128 + 7u;
        float _2557 = (dot(vec3(cbLight._m0[_2128 + 3u].xyz), vec3(_567, _568, _569)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4503 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2560 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2368 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2306;
        _2370 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2308;
        _2372 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2310;
    }
    uint _2375 = _2128 + 8u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _712) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2128].x + _648;
    float _2391 = cbLight._m0[_2128].y + _649;
    float _2392 = cbLight._m0[_2128].z + _650;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2128].xyz));
    float _4519 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _4530 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2404 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2405 = dot(vec3(_567, _568, _569), vec3(_2397, _2398, _2399));
    float _4541 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2397, _2398, _2399));
    float _4552 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2389 * _2389;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
    float _2426 = 0.959999978542327880859375 - _779;
    float _2428 = 0.959999978542327880859375 - _780;
    float _2429 = 0.959999978542327880859375 - _781;
    float _2436 = 1.0 - _2389;
    float _2447 = (0.5 / (((_2404 * ((_2403 * _2436) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2436) + _2389) * _2403))) * _2403;
    float _4563 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    uint _2463 = _2128 + 9u;
    float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _712) * 0.949999988079071044921875);
    float _2475 = _2474 * _2474;
    float _2476 = cbLight._m0[_2168].x + _648;
    float _2477 = cbLight._m0[_2168].y + _649;
    float _2478 = cbLight._m0[_2168].z + _650;
    float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
    float _2483 = _2482 * _2476;
    float _2484 = _2482 * _2477;
    float _2485 = _2482 * _2478;
    float _2486 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2168].xyz));
    float _4574 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2490 = dot(vec3(_567, _568, _569), vec3(_2483, _2484, _2485));
    float _4585 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2483, _2484, _2485));
    float _4596 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2475 * _2475;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
    float _2516 = 1.0 - _2475;
    float _2526 = (0.5 / (((_2404 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2516) + _2475) * _2489))) * _2489;
    float _4607 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    float _2538 = (((((_2509 * _2426) + _782) * cbLight._m0[_2463].x) * _2528) * _2151) + ((((cbLight._m0[_2375].x * _2117) * ((_2425 * _2426) + _782)) * _2449) * _2164);
    float _2539 = (((((_2509 * _2428) + _784) * cbLight._m0[_2463].y) * _2528) * _2151) + ((((cbLight._m0[_2375].y * _2119) * ((_2425 * _2428) + _784)) * _2449) * _2164);
    float _2540 = (((((_2509 * _2429) + _785) * cbLight._m0[_2463].z) * _2528) * _2151) + ((((cbLight._m0[_2375].z * _2121) * ((_2425 * _2429) + _785)) * _2449) * _2164);
    float _2596;
    float _2598;
    float _2600;
    if (_2204)
    {
        _2596 = _2538;
        _2598 = _2539;
        _2600 = _2540;
    }
    else
    {
        uint _2602 = _2128 + 2u;
        uint _2606 = _2128 + 10u;
        float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2602].w)) * _712) * 0.949999988079071044921875);
        float _2621 = _2620 * _2620;
        float _2622 = cbLight._m0[_2602].x + _648;
        float _2623 = cbLight._m0[_2602].y + _649;
        float _2624 = cbLight._m0[_2602].z + _650;
        float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
        float _2629 = _2628 * _2622;
        float _2630 = _2628 * _2623;
        float _2631 = _2628 * _2624;
        float _2632 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2602].xyz));
        float _4618 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2636 = dot(vec3(_567, _568, _569), vec3(_2629, _2630, _2631));
        float _4629 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2640 = dot(vec3(cbLight._m0[_2602].xyz), vec3(_2629, _2630, _2631));
        float _4640 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2644 = _2621 * _2621;
        float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
        float _2655 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2662 = 1.0 - _2621;
        float _2672 = (0.5 / (((_2404 * ((_2635 * _2662) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2662) + _2621) * _2635))) * _2635;
        float _4651 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2674 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
        float _2675 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2596 = (((((_2655 * _2426) + _782) * cbLight._m0[_2606].x) * _2674) * _2675) + _2538;
        _2598 = (((((_2655 * _2428) + _784) * cbLight._m0[_2606].y) * _2674) * _2675) + _2539;
        _2600 = (((((_2655 * _2429) + _785) * cbLight._m0[_2606].z) * _2674) * _2675) + _2540;
    }
    float _2706;
    float _2708;
    float _2710;
    if (_2313)
    {
        _2706 = _2596;
        _2708 = _2598;
        _2710 = _2600;
    }
    else
    {
        uint _2717 = _2128 + 3u;
        uint _2721 = _2128 + 11u;
        float _2735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2717].w)) * _712) * 0.949999988079071044921875);
        float _2736 = _2735 * _2735;
        float _2737 = cbLight._m0[_2717].x + _648;
        float _2738 = cbLight._m0[_2717].y + _649;
        float _2739 = cbLight._m0[_2717].z + _650;
        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
        float _2744 = _2743 * _2737;
        float _2745 = _2743 * _2738;
        float _2746 = _2743 * _2739;
        float _2747 = dot(vec3(_567, _568, _569), vec3(cbLight._m0[_2717].xyz));
        float _4667 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2751 = dot(vec3(_567, _568, _569), vec3(_2744, _2745, _2746));
        float _4678 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2755 = dot(vec3(cbLight._m0[_2717].xyz), vec3(_2744, _2745, _2746));
        float _4689 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2759 = _2736 * _2736;
        float _2763 = ((_2754 * _2754) * (_2759 + (-1.0))) + 1.0;
        float _2770 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
        float _2777 = 1.0 - _2736;
        float _2787 = (0.5 / (((_2404 * ((_2750 * _2777) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2777) + _2736) * _2750))) * _2750;
        float _4700 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2789 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2759 / ((_2763 * _2763) * 3.141590118408203125));
        float _2790 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2706 = (((((_2770 * _2426) + _782) * cbLight._m0[_2721].x) * _2789) * _2790) + _2596;
        _2708 = (((((_2770 * _2428) + _784) * cbLight._m0[_2721].y) * _2789) * _2790) + _2598;
        _2710 = (((((_2770 * _2429) + _785) * cbLight._m0[_2721].z) * _2789) * _2790) + _2600;
    }
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_2126.y == 0u)
    {
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.x;
        uint _2823 = uint((float(_2811.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2812))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2812)));
        float _2833 = (log2(_1904 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2834 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        uint _2837 = uint(isnan(14.0) ? _2834 : (isnan(_2834) ? 14.0 : min(_2834, 14.0)));
        uvec4 _2842 = texelFetch(g_lightClusterGridBuffer, int(((_2837 << 2u) + (_2823 << 6u)) >> 2u));
        uint _2843 = _2842.x;
        uint _2844 = _2811.z;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((((1u << ((_2844 >> 4u) & 15u)) + 4294967295u) & _2843) == 0u) || ((_2844 & 240u) == 0u))
        {
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
        }
        else
        {
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            uint _3098 = 0u;
            uint _3107;
            bool _3108;
            for (;;)
            {
                _3107 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3098 << 2u)) >> 2u)).x;
                _3108 = _3107 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_3108)
                {
                    frontier_phi_75_pred = _3097;
                    frontier_phi_75_pred_1 = _3096;
                    frontier_phi_75_pred_2 = _3095;
                    frontier_phi_75_pred_3 = _3094;
                    frontier_phi_75_pred_4 = _3092;
                    frontier_phi_75_pred_5 = _3093;
                }
                else
                {
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    uint _3243;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3107;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    for (;;)
                    {
                        uint _3247 = uint(findLSB(_3243)) + (_3098 << 5u);
                        uint _3244 = (_3243 + 4294967295u) & _3243;
                        uint _3249 = _3247 * 48u;
                        vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3249)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 3u)).x));
                        uint _3269 = (_3247 * 48u) + 4u;
                        vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3269)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 3u)).x));
                        uint _3288 = (_3247 * 48u) + 8u;
                        vec3 _3299 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x));
                        float _3303 = _3263.x - _1902;
                        float _3304 = _3263.y - _1903;
                        float _3305 = _3263.z - _1904;
                        float _3306 = dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305));
                        float _3309 = inversesqrt(_3306);
                        float _3310 = _3309 * _3303;
                        float _3311 = _3309 * _3304;
                        float _3312 = _3309 * _3305;
                        float _3313 = dot(vec3(_693, _696, _699), vec3(_3310, _3311, _3312));
                        float _3318 = 1.0 - (_3306 * _3263.w);
                        float _4726 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3320 = sqrt(_3306) * _3282.w;
                        float _3323 = 1.39999997615814208984375 / (_3320 + 1.39999997615814208984375);
                        float _3324 = _3323 * _3323;
                        float _3327 = ((1.0 - _3324) * _3313) + _3324;
                        float _3330 = _3320 * _3320;
                        float _3334 = ((isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0))) * _3319) / ((_3330 * 0.699999988079071044921875) + 1.0);
                        float _3338 = (-0.0) - _1902;
                        float _3339 = (-0.0) - _1903;
                        float _3340 = (-0.0) - _1904;
                        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3354 = exp2(log2(1.0 / ((_3330 * 3.5) + 5.0)) * 0.25);
                        float _3355 = 1.0 - _813;
                        float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                        float _3363 = _3362 * _3362;
                        float _3364 = _3363 * _3363;
                        float _3365 = _3345 + _3310;
                        float _3366 = _3346 + _3311;
                        float _3367 = _3347 + _3312;
                        float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                        float _3375 = dot(vec3(_693, _696, _699), vec3(_3345, _3346, _3347));
                        float _4742 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3378 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3379 = dot(vec3(_693, _696, _699), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                        float _4753 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3382 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                        float _3387 = _3323 * _3363;
                        float _3388 = _3387 * _3387;
                        float _3391 = ((1.0 - _3388) * _3313) + _3388;
                        float _4764 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3392 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3393 = 1.0 - _3363;
                        float _3403 = (0.5 / (((_3392 * ((_3378 * _3393) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3392 * _3393) + _3363) * _3378))) * _3392;
                        float _4775 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3414 = (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3386 * _3386) * ((_3330 * 2.1991131305694580078125) + 3.141590118408203125))) * _3319;
                        _3167 = (_3334 * _3282.x) + _3240;
                        _3168 = (_3334 * _3282.y) + _3241;
                        _3169 = (_3334 * _3282.z) + _3242;
                        _3164 = (_3414 * _3299.x) + _3237;
                        _3165 = (_3414 * _3299.y) + _3238;
                        _3166 = (_3414 * _3299.z) + _3239;
                        if (_3244 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3244;
                        }
                    }
                    frontier_phi_75_pred = _3169;
                    frontier_phi_75_pred_1 = _3168;
                    frontier_phi_75_pred_2 = _3167;
                    frontier_phi_75_pred_3 = _3166;
                    frontier_phi_75_pred_4 = _3164;
                    frontier_phi_75_pred_5 = _3165;
                }
                _2951 = frontier_phi_75_pred;
                _2949 = frontier_phi_75_pred_1;
                _2947 = frontier_phi_75_pred_2;
                _2945 = frontier_phi_75_pred_3;
                _2941 = frontier_phi_75_pred_4;
                _2943 = frontier_phi_75_pred_5;
                uint _3099 = _3098 + 1u;
                if (_3099 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3092 = _2941;
                    _3093 = _2943;
                    _3094 = _2945;
                    _3095 = _2947;
                    _3096 = _2949;
                    _3097 = _2951;
                    _3098 = _3099;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
        }
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.z;
        uint _2957 = (_2955 >> 8u) & 15u;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        if (((4294967295u << _2957) & _2843) == 0u)
        {
            _3060 = _2940;
            _3062 = _2942;
            _3064 = _2944;
            _3066 = _2946;
            _3068 = _2948;
            _3070 = _2950;
        }
        else
        {
            float _3085 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
            float _3086 = _3085 * _1902;
            float _3087 = _3085 * _1903;
            float _3088 = _3085 * _1904;
            float frontier_phi_67_68_ladder;
            float frontier_phi_67_68_ladder_1;
            float frontier_phi_67_68_ladder_2;
            float frontier_phi_67_68_ladder_3;
            float frontier_phi_67_68_ladder_4;
            float frontier_phi_67_68_ladder_5;
            if (_2957 < ((_2955 >> 12u) & 15u))
            {
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3220 = _2940;
                float _3221 = _2942;
                float _3222 = _2944;
                float _3223 = _2946;
                float _3224 = _2948;
                float _3225 = _2950;
                uint _3226 = _2957;
                uint _3235;
                bool _3236;
                for (;;)
                {
                    _3235 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3226 << 2u)) >> 2u)).x;
                    _3236 = _3235 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_3236)
                    {
                        frontier_phi_86_pred = _3222;
                        frontier_phi_86_pred_1 = _3221;
                        frontier_phi_86_pred_2 = _3220;
                        frontier_phi_86_pred_3 = _3225;
                        frontier_phi_86_pred_4 = _3224;
                        frontier_phi_86_pred_5 = _3223;
                    }
                    else
                    {
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3441 = _3220;
                        float _3442 = _3221;
                        float _3443 = _3222;
                        float _3444 = _3223;
                        float _3445 = _3224;
                        float _3446 = _3225;
                        uint _3447 = _3235;
                        uint _3448;
                        vec4 _3473;
                        float _3474;
                        vec4 _3489;
                        vec3 _3501;
                        vec4 _3516;
                        vec4 _3531;
                        float _3577;
                        bool _3578;
                        for (;;)
                        {
                            uint _3458 = ((_3226 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3447));
                            _3448 = (_3447 + 4294967295u) & _3447;
                            uint _3460 = _3458 * 40u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3474 = _3473.w;
                            uint _3476 = (_3458 * 40u) + 4u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3458 * 40u) + 8u;
                            _3501 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x));
                            uint _3503 = (_3458 * 40u) + 16u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3458 * 40u) + 20u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3458 * 40u) + 24u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3552 = (_3458 * 40u) + 28u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3577 = fma(_1904, _3565.z, fma(_1903, _3565.y, _3565.x * _1902)) + _3565.w;
                            _3578 = !((fma(_1904, _3546.z, fma(_1903, _3546.y, _3546.x * _1902)) + _3546.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3578)
                            {
                                float _3605 = _3473.x - _1902;
                                float _3606 = _3473.y - _1903;
                                float _3607 = _3473.z - _1904;
                                float _3608 = dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607));
                                float _3611 = inversesqrt(_3608);
                                float _3612 = _3611 * _3605;
                                float _3613 = _3611 * _3606;
                                float _3614 = _3611 * _3607;
                                float _3618 = 1.0 - (_3608 / (_3474 * _3474));
                                float _4786 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3623 = sqrt(_3608) * _3489.w;
                                float _3625 = 1.39999997615814208984375 / (_3623 + 1.39999997615814208984375);
                                float _3626 = _3625 * _3625;
                                float _3629 = ((1.0 - _3626) * dot(vec3(_3612, _3613, _3614), vec3(_693, _696, _699))) + _3626;
                                float _3632 = _3623 * _3623;
                                float _3636 = (fma(_1904, _3516.z, fma(_1903, _3516.y, _3516.x * _1902)) + _3516.w) / _3577;
                                float _3637 = (fma(_1904, _3531.z, fma(_1903, _3531.y, _3531.x * _1902)) + _3531.w) / _3577;
                                float _3641 = 1.0 - dot(vec2(_3636, _3637), vec2(_3636, _3637));
                                float _4802 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3643 = _3642 * (((isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0))) * _3619) / ((_3632 * 0.699999988079071044921875) + 1.0));
                                float _3655 = exp2(log2(1.0 / ((_3632 * 3.5) + 5.0)) * 0.25);
                                float _3656 = 1.0 - _813;
                                float _3663 = sqrt(1.0 - ((1.0 - (_3656 * _3656)) * (1.0 - (_3655 * _3655))));
                                float _3664 = _3663 * _3663;
                                float _3665 = _3664 * _3664;
                                float _3666 = _3612 - _3086;
                                float _3667 = _3613 - _3087;
                                float _3668 = _3614 - _3088;
                                float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                                float _3676 = dot(vec3(_693, _696, _699), vec3((-0.0) - _3086, (-0.0) - _3087, (-0.0) - _3088));
                                float _4813 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3680 = dot(vec3(_693, _696, _699), vec3(_3672 * _3666, _3672 * _3667, _3672 * _3668));
                                float _4824 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3687 = ((_3683 * _3683) * (_3665 + (-1.0))) + 1.0;
                                float _3688 = _3625 * _3664;
                                float _3689 = _3688 * _3688;
                                float _3695 = ((1.0 - _3689) * dot(vec3(_693, _696, _699), vec3(_3612, _3613, _3614))) + _3689;
                                float _4835 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3697 = 1.0 - _3664;
                                float _3707 = (0.5 / (((_3696 * ((_3679 * _3697) + _3664)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3664) * _3679))) * _3696;
                                float _4846 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3717 = (_3642 * _3619) * (((_3665 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3687 * _3687) * ((_3632 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3717 * _3501.z;
                                frontier_phi_92_pred_1 = _3717 * _3501.y;
                                frontier_phi_92_pred_2 = _3717 * _3501.x;
                                frontier_phi_92_pred_3 = _3643 * _3489.z;
                                frontier_phi_92_pred_4 = _3643 * _3489.y;
                                frontier_phi_92_pred_5 = _3643 * _3489.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3723 = frontier_phi_92_pred;
                            _3722 = frontier_phi_92_pred_1;
                            _3721 = frontier_phi_92_pred_2;
                            _3726 = frontier_phi_92_pred_3;
                            _3725 = frontier_phi_92_pred_4;
                            _3724 = frontier_phi_92_pred_5;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            if (_3448 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3448;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3430;
                        frontier_phi_86_pred_1 = _3429;
                        frontier_phi_86_pred_2 = _3428;
                        frontier_phi_86_pred_3 = _3433;
                        frontier_phi_86_pred_4 = _3432;
                        frontier_phi_86_pred_5 = _3431;
                    }
                    _3065 = frontier_phi_86_pred;
                    _3063 = frontier_phi_86_pred_1;
                    _3061 = frontier_phi_86_pred_2;
                    _3071 = frontier_phi_86_pred_3;
                    _3069 = frontier_phi_86_pred_4;
                    _3067 = frontier_phi_86_pred_5;
                    uint _3227 = _3226 + 1u;
                    if (_3227 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3220 = _3061;
                        _3221 = _3063;
                        _3222 = _3065;
                        _3223 = _3067;
                        _3224 = _3069;
                        _3225 = _3071;
                        _3226 = _3227;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_67_68_ladder = _3071;
                frontier_phi_67_68_ladder_1 = _3067;
                frontier_phi_67_68_ladder_2 = _3065;
                frontier_phi_67_68_ladder_3 = _3063;
                frontier_phi_67_68_ladder_4 = _3069;
                frontier_phi_67_68_ladder_5 = _3061;
            }
            else
            {
                frontier_phi_67_68_ladder = _2950;
                frontier_phi_67_68_ladder_1 = _2946;
                frontier_phi_67_68_ladder_2 = _2944;
                frontier_phi_67_68_ladder_3 = _2942;
                frontier_phi_67_68_ladder_4 = _2948;
                frontier_phi_67_68_ladder_5 = _2940;
            }
            _3060 = frontier_phi_67_68_ladder_5;
            _3062 = frontier_phi_67_68_ladder_3;
            _3064 = frontier_phi_67_68_ladder_2;
            _3066 = frontier_phi_67_68_ladder_1;
            _3068 = frontier_phi_67_68_ladder_4;
            _3070 = frontier_phi_67_68_ladder;
        }
        float _3075 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
        _2855 = (_3075 * _3066) + _2368;
        _2857 = (_3075 * _3068) + _2370;
        _2859 = (_3075 * _3070) + _2372;
        _2861 = ((_3060 * _782) * _3075) + _2706;
        _2863 = ((_3062 * _784) * _3075) + _2708;
        _2865 = ((_3064 * _785) * _3075) + _2710;
    }
    else
    {
        _2855 = _2368;
        _2857 = _2370;
        _2859 = _2372;
        _2861 = _2706;
        _2863 = _2708;
        _2865 = _2710;
    }
    vec4 _2871 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4862 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4873 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4884 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2895 = (((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2855 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _797))) + ((_2861 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1636)) * cbPerFrame._m0[3u].x)) + (_2871.x * cbMtdParam._m0[3u].x);
    float _2897 = ((_2871.y * cbMtdParam._m0[3u].x) + ((_2863 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1636)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2857 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _797)));
    float _2899 = ((_2871.z * cbMtdParam._m0[3u].x) + ((_2865 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1636)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2859 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _797)));
    float _2900 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
    float _2901 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
    float _2902 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
    uint _2903 = _725 + 6u;
    float _2911 = _670 / cbSceneParam._m0[86u].x;
    float _2912 = _671 / cbSceneParam._m0[86u].y;
    vec4 _2926 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, (log2((isnan(cbSceneParam._m0[77u].w) ? _590 : (isnan(_590) ? cbSceneParam._m0[77u].w : min(_590, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2928 = _2926.x;
    float _2929 = _2926.y;
    float _2930 = _2926.z;
    float _2931 = _2926.w;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    if (_590 > cbSceneParam._m0[78u].w)
    {
        float _2965 = isnan(_590) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _590 : min(cbSceneParam._m0[80u].w, _590));
        float _2966 = _2965 / _590;
        float _2977 = _2966 * _641;
        float _2978 = _642 * _2966;
        float _2979 = (-0.0) - _2978;
        float _2980 = _2966 * _643;
        float _2982 = (cbSceneParam._m0[77u].w * _2979) / _2965;
        float _2983 = _2982 + cbSceneParam._m0[79u].w;
        float _2984 = cbSceneParam._m0[79u].w - _2978;
        float _2990 = sqrt(((_2977 * _2977) + (_2978 * _2978)) + (_2980 * _2980));
        float _2993 = (1.0 - (cbSceneParam._m0[77u].w / _2965)) * _2990;
        float _2998 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3000 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3177;
        if (abs((_2979 - _2982) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3177 = ((((_2983 > 0.0) ? exp2(_2998 * _2983) : (2.0 - exp2(_3000 * _2983))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2993;
        }
        else
        {
            float _3121 = 1.0 / cbSceneParam._m0[80u].x;
            float _3122 = isnan(_2984) ? _2983 : (isnan(_2983) ? _2984 : max(_2983, _2984));
            float _3123 = isnan(_2984) ? _2983 : (isnan(_2983) ? _2984 : min(_2983, _2984));
            float _3132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : min(_3122, 0.0));
            float _3133 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : min(_3123, 0.0));
            _3177 = ((abs(_2990 / _2979) * cbSceneParam._m0[80u].y) * ((((_3132 - _3133) * 2.0) - ((exp2(_2998 * (isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0)))) - exp2(_2998 * (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))))) * _3121)) - ((exp2(_3000 * _3132) - exp2(_3000 * _3133)) * _3121))) + (_2993 * cbSceneParam._m0[80u].z);
        }
        vec4 _3179 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, 1.0), 0.0);
        float _3188 = exp2((_3177 * (-1.44269502162933349609375)) * (1.0 - _3179.w));
        float _3189 = log2(_3188);
        float _3205 = log2(_2931);
        _3002 = (exp2(_3205 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3189 * cbSceneParam._m0[78u].x)) * _3179.x) / cbSceneParam._m0[78u].x)) + _2928;
        _3004 = (exp2(_3205 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3189 * cbSceneParam._m0[78u].y)) * _3179.y) / cbSceneParam._m0[78u].y)) + _2929;
        _3006 = (exp2(_3205 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3189 * cbSceneParam._m0[78u].z)) * _3179.z) / cbSceneParam._m0[78u].z)) + _2930;
        _3008 = _3188 * _2931;
    }
    else
    {
        _3002 = _2928;
        _3004 = _2929;
        _3006 = _2930;
        _3008 = _2931;
    }
    bool _3215;
    vec4 _3018;
    vec4 _3040;
    float _3042;
    float _3046;
    float _3047;
    float _3048;
    float _3049;
    bool _3059;
    for (;;)
    {
        _3018 = cbMatDynParam._m0[0u];
        float _3020 = roundEven(_3018.y);
        bool _3021 = _3020 == 3.0;
        float _3022 = log2(_3008);
        float _3029 = exp2(_3022 * cbSceneParam._m0[78u].x) * _2900;
        float _3030 = exp2(_3022 * cbSceneParam._m0[78u].y) * _2901;
        float _3031 = exp2(_3022 * cbSceneParam._m0[78u].z) * _2902;
        float _3038 = _657 + (-0.5);
        _3040 = cbMtdParam._m0[1u];
        _3042 = _3040.y * _3038;
        float _3045 = (_3020 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3046 = _3045 * (_3021 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3002)));
        _3047 = _3045 * (_3021 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3004)));
        _3048 = _3045 * (_3021 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3006)));
        _3049 = _3038 * 0.999000012874603271484375;
        _3059 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3059)
        {
            if ((cbInstanceData._m0[_725 + 7u].x + _3049) < 0.5)
            {
                _3215 = true;
                break;
            }
        }
        uint _3156 = _726 + uint(_3018.w);
        if ((cbInstanceData._m0[_3156].w < 1.0) && ((cbInstanceData._m0[_3156].w + _3049) < 0.5))
        {
            _3215 = true;
            break;
        }
        if ((_3042 + 1.0) < _3040.x)
        {
            _3215 = true;
            break;
        }
        _3215 = false;
        break;
    }
    float _3419;
    if (_3215)
    {
        discard_state = true;
        _3419 = 0.0;
    }
    else
    {
        _3419 = cbInstanceData._m0[_2903].w;
    }
    SV_Target.x = _3046;
    SV_Target.y = _3047;
    SV_Target.z = _3048;
    SV_Target.w = _3419;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2903].w;
    discard_exit();
}


