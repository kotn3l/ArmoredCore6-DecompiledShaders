#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1196;
float _3879;
float _3880;
float _3881;
float _3882;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _269 = log2(0.0);
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[14u].x;
    _196[0u] = cbMtdParam._m0[14u].y;
    _197[0u] = cbMtdParam._m0[14u].z;
    _195[1u] = cbMtdParam._m0[15u].x;
    _196[1u] = cbMtdParam._m0[15u].y;
    _197[1u] = cbMtdParam._m0[15u].z;
    _195[2u] = cbMtdParam._m0[16u].x;
    _196[2u] = cbMtdParam._m0[16u].y;
    _197[2u] = cbMtdParam._m0[16u].z;
    _195[3u] = cbMtdParam._m0[11u].x;
    _196[3u] = cbMtdParam._m0[11u].y;
    _197[3u] = cbMtdParam._m0[11u].z;
    _195[4u] = cbMtdParam._m0[12u].x;
    _196[4u] = cbMtdParam._m0[12u].y;
    _197[4u] = cbMtdParam._m0[12u].z;
    _195[5u] = cbMtdParam._m0[13u].x;
    _196[5u] = cbMtdParam._m0[13u].y;
    _197[5u] = cbMtdParam._m0[13u].z;
    vec4 _341 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _345 = _341.y;
    float _348 = (_341.x + (-0.02500000037252902984619140625)) * 8.0;
    float _350 = roundEven(_348);
    float _351 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    uint _354 = uint(int(isnan(5.0) ? _351 : (isnan(_351) ? 5.0 : min(_351, 5.0))));
    float _371 = roundEven(5.0 - _348);
    float _372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = isnan(4.0) ? _372 : (isnan(_372) ? 4.0 : min(_372, 4.0));
    float _379;
    float _381;
    if (exp2(_269 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _379 = cbMtdParam._m0[26u].x;
        _381 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _379 = cbMtdParam._m0[22u].x;
        _381 = cbMtdParam._m0[22u].y;
    }
    float _383 = _379 * TEXCOORD.x;
    float _384 = _381 * TEXCOORD.y;
    float _395 = floor(_373);
    vec4 _398 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _383) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _384) + cbTextureTilingScale._m0[6u].w, _395));
    vec4 _420 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _428 = ((((((_195[_354] - cbMtdParam._m0[18u].x) * _345) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _398.x) * cbMtdParam._m0[9u].x) * _420.x;
    float _432 = ((((((_196[_354] - cbMtdParam._m0[18u].y) * _345) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _398.y) * cbMtdParam._m0[9u].y) * _420.y;
    float _436 = ((((((_197[_354] - cbMtdParam._m0[18u].z) * _345) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _398.z) * cbMtdParam._m0[9u].z) * _420.z;
    vec4 _448 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _452 = _448.z;
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[22u].z;
    _191[0u] = cbMtdParam._m0[22u].w;
    _190[1u] = cbMtdParam._m0[23u].z;
    _191[1u] = cbMtdParam._m0[23u].w;
    _190[2u] = cbMtdParam._m0[24u].x;
    _191[2u] = cbMtdParam._m0[24u].y;
    _190[3u] = cbMtdParam._m0[24u].z;
    _191[3u] = cbMtdParam._m0[24u].w;
    _190[4u] = cbMtdParam._m0[23u].x;
    _191[4u] = cbMtdParam._m0[23u].y;
    float _496 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    uint _498 = uint(int(isnan(4.0) ? _496 : (isnan(_496) ? 4.0 : min(_496, 4.0))));
    float _503 = _191[_498] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _383) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _384) + cbTextureTilingScale._m0[8u].w, _395)).x;
    vec4 _522 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _383) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _384) + cbTextureTilingScale._m0[7u].w, _395));
    float _529 = (_522.x * 2.0) + (-1.0);
    float _530 = (_522.y * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3921 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))));
    float _546 = (cbMtdParam._m0[20u].x * (((_452 * 2.0) * (_522.z + _190[_498])) - _452)) + _452;
    float _550 = (cbMtdParam._m0[20u].y * ((_448.x * 2.0) + (-1.0))) + _529;
    float _551 = (cbMtdParam._m0[20u].y * ((_448.y * 2.0) + (-1.0))) + _530;
    float _554 = fma(_537, _247, fma(_551, _239 * TANGENT.x, (_225 * _217) * _550));
    float _557 = fma(_537, _248, fma(_551, _239 * TANGENT.y, (_225 * _218) * _550));
    float _560 = fma(_537, _249, fma(_551, _239 * TANGENT.z, (_225 * _219) * _550));
    float _564 = inversesqrt(dot(vec3(_554, _557, _560), vec3(_554, _557, _560)));
    float _565 = _564 * _554;
    float _566 = _564 * _557;
    float _567 = _564 * _560;
    float _3932 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _568 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3954 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3965 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3976 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _572 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _588 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _639 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _629);
    float _640 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _629);
    float _641 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _629);
    float _645 = inversesqrt(dot(vec3(_639, _640, _641), vec3(_639, _640, _641)));
    float _646 = _639 * _645;
    float _647 = _640 * _645;
    float _648 = _641 * _645;
    vec4 _653 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _655 = _653.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _876 = sqrt(((_639 * _639) + (_640 * _640)) + (_641 * _641));
        float _882 = (cbMatDynParam._m0[5u].x * _876) + cbMatDynParam._m0[5u].y;
        float _3987 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _887 = (cbMatDynParam._m0[5u].z * _876) + cbMatDynParam._m0[5u].w;
        float _3998 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) - _883)) + _883) < ((_655 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _668 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _669 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _671 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _673 = _671.w;
    float _691 = fma(_567, cbSceneParam._m0[5u].z, fma(_566, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _565));
    float _694 = fma(_567, cbSceneParam._m0[6u].z, fma(_566, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _565));
    float _697 = fma(_567, cbSceneParam._m0[7u].z, fma(_566, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _565));
    vec4 _699 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _710 = (((_699.y - _568) + (_699.w * _568)) * cbMtdParam._m0[3u].x) + _568;
    uint _723 = uint(roundEven(NORMAL.w)) * 13u;
    uint _724 = _723 + 9u;
    uint _725 = _724 + uint(cbMatDynParam._m0[0u].w);
    float _731 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * cbInstanceData._m0[_725].x;
    float _732 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * cbInstanceData._m0[_725].y;
    float _733 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * cbInstanceData._m0[_725].z;
    float _4009 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    vec4 _737 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _742 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _753 = (((_742.x - _572) + (_742.w * _572)) * cbMtdParam._m0[3u].x) + _572;
    float _766 = (cbMtdParam._m0[3u].x * (((_734 * _673) - _734) + _737.x)) + _734;
    float _767 = (cbMtdParam._m0[3u].x * (((_735 * _673) - _735) + _737.y)) + _735;
    float _768 = (cbMtdParam._m0[3u].x * (((_736 * _673) - _736) + _737.z)) + _736;
    float _769 = 1.0 - _753;
    float _770 = _769 * _766;
    float _771 = _769 * _767;
    float _772 = _769 * _768;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _753;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _753;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _753;
    float _780 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _668, cbSceneParam._m0[86u].y * _669));
    float _795 = _792.x * TEXCOORD_4;
    float _796 = dot(vec3(_565, _566, _567), vec3(_646, _647, _648));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _565) - _646;
    float _804 = (_799 * _566) - _647;
    float _805 = (_799 * _567) - _648;
    float _809 = abs(dot(vec3(_646, _647, _648), vec3(_565, _566, _567)));
    float _4042 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _811 = sqrt(_710);
    float _822 = exp2((_811 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _828 = (1.0 - _822) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _829 = _822 * _811;
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1195;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _920 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _924 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _928 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _953 = _857 + _565;
        float _954 = _861 + _566;
        float _955 = _865 + _567;
        float _965 = fma(_955, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953)) - _920;
        float _966 = fma(_955, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953)) - _924;
        float _967 = fma(_955, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953)) - _928;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_920 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_924 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[34u].z) + ((((((_928 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1023 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_989.x + (-0.5));
        float _1025 = _1023 * (_989.y + (-0.5));
        float _1026 = _1023 * (_989.z + (-0.5));
        float _1033 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_996.x + (-0.5));
        float _1035 = _1033 * (_996.y + (-0.5));
        float _1036 = _1033 * (_996.z + (-0.5));
        float _1043 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1003.x + (-0.5));
        float _1045 = _1043 * (_1003.y + (-0.5));
        float _1046 = _1043 * (_1003.z + (-0.5));
        float _1053 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1010.x + (-0.5));
        float _1055 = _1053 * (_1010.y + (-0.5));
        float _1056 = _1053 * (_1010.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1077 = (dot(vec3(_565, _566, _567), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1087 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _4090 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1089 + 1.0))) + _1094) * _1057;
        float _1104 = _1025 * 0.5;
        float _1105 = _1035 * 0.5;
        float _1106 = _1045 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_565, _566, _567), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _4123 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1131 + 1.0))) + _1136) * _1058;
        float _1146 = _1026 * 0.5;
        float _1147 = _1036 * 0.5;
        float _1148 = _1046 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_565, _566, _567), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4156 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1173 + 1.0))) + _1178) * _1059;
        _1195 = _1026;
        _1197 = _1025;
        _1198 = _1024;
        _1199 = _1036;
        _1200 = _1035;
        _1201 = _1034;
        _1202 = _1046;
        _1203 = _1045;
        _1204 = _1044;
        _1205 = _1059;
        _1206 = _1058;
        _1207 = _1057;
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _1196;
        _1197 = _1196;
        _1198 = _1196;
        _1199 = _1196;
        _1200 = _1196;
        _1201 = _1196;
        _1202 = _1196;
        _1203 = _1196;
        _1204 = _1196;
        _1205 = _1196;
        _1206 = _1196;
        _1207 = _1196;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1239 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1243 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1247 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1270 = _857 + _565;
        float _1271 = _861 + _566;
        float _1272 = _865 + _567;
        float _1282 = fma(_1272, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1270)) - _1239;
        float _1283 = fma(_1272, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1270)) - _1243;
        float _1284 = fma(_1272, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1270)) - _1247;
        float _1288 = inversesqrt(dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284)));
        float _1301 = ((_1288 * _1282) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1239 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1288 * _1283) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1243 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1288 * _1284) / cbModelParam._m0[35u].z) + ((((((_1247 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        float _1338 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1305.x + (-0.5));
        float _1340 = _1338 * (_1305.y + (-0.5));
        float _1341 = _1338 * (_1305.z + (-0.5));
        float _1348 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1312.x + (-0.5));
        float _1350 = _1348 * (_1312.y + (-0.5));
        float _1351 = _1348 * (_1312.z + (-0.5));
        float _1358 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1319.x + (-0.5));
        float _1360 = _1358 * (_1319.y + (-0.5));
        float _1361 = _1358 * (_1319.z + (-0.5));
        float _1368 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1326.x + (-0.5));
        float _1370 = _1368 * (_1326.y + (-0.5));
        float _1371 = _1368 * (_1326.z + (-0.5));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = _1339 * 0.5;
        float _1376 = _1349 * 0.5;
        float _1377 = _1359 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_565, _566, _567), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4219 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1402 + 1.0))) + _1407) * _1372;
        float _1417 = _1340 * 0.5;
        float _1418 = _1350 * 0.5;
        float _1419 = _1360 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_565, _566, _567), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4252 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1444 + 1.0))) + _1449) * _1373;
        float _1459 = _1341 * 0.5;
        float _1460 = _1351 * 0.5;
        float _1461 = _1361 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_565, _566, _567), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4285 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1486 + 1.0))) + _1491) * _1374;
        _1508 = _1341;
        _1509 = _1340;
        _1510 = _1339;
        _1511 = _1351;
        _1512 = _1350;
        _1513 = _1349;
        _1514 = _1361;
        _1515 = _1360;
        _1516 = _1359;
        _1517 = _1374;
        _1518 = _1373;
        _1519 = _1372;
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1196;
        _1509 = _1196;
        _1510 = _1196;
        _1511 = _1196;
        _1512 = _1196;
        _1513 = _1196;
        _1514 = _1196;
        _1515 = _1196;
        _1516 = _1196;
        _1517 = _1196;
        _1518 = _1196;
        _1519 = _1196;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1208)) + _1208;
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1209)) + _1209;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1210)) + _1210;
    float _1555 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1532 * cbSceneParam._m0[89u].x));
    float _1558 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1532 * cbSceneParam._m0[90u].x));
    float _1561 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1532));
    float _1576 = _803 * 0.5;
    float _1577 = _804 * 0.5;
    float _1578 = _805 * 0.5;
    float _1579 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1582 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1585 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1619;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1592 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1195, _1199, _1202, _1205));
        float _1596 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1600 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1607 = dot(vec4(cbModelParam._m0[39u]), vec4(_1576, _1577, _1578, 1.0));
        _1619 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1619 = 1.0;
    }
    float _1630;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1621 = dot(vec4(cbModelParam._m0[40u]), vec4(_1576, _1577, _1578, 1.0));
        _1630 = dot(vec3(isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1630 = 1.0;
    }
    float _1634 = (_1630 * cbModelParam._m0[1u].x) + (_1619 * (1.0 - cbModelParam._m0[1u].x));
    float _1644 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1644 : min(cbModelParam._m0[25u].z, _1644));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1692 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1696 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1700 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1703 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1706 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1709 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1737;
        if (_1703 > 0.0)
        {
            _1737 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1737 = frontier_phi_21_19_ladder;
        }
        float _1908;
        if (_1706 > 0.0)
        {
            _1908 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1908 = frontier_phi_30_26_ladder;
        }
        float _2203;
        if (_1709 > 0.0)
        {
            _2203 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2203 = frontier_phi_42_37_ladder;
        }
        float _2205 = isnan(_1908) ? _1737 : (isnan(_1737) ? _1908 : min(_1737, _1908));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1703) + _1692;
        float _2211 = (_2206 * _1706) + _1696;
        float _2212 = (_2206 * _1709) + _1700;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1645);
            frontier_phi_20_42_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1725 = frontier_phi_20_42_ladder_2;
        _1727 = frontier_phi_20_42_ladder_1;
        _1729 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1645);
        _1725 = _1713.x * cbModelParam._m0[1u].y;
        _1727 = _1713.y * cbModelParam._m0[1u].y;
        _1729 = _1713.z * cbModelParam._m0[1u].y;
    }
    float _1733 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1733 : min(cbModelParam._m0[25u].w, _1733));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1787 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1791 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1795 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1798 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1801 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1804 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1913;
        if (_1798 > 0.0)
        {
            _1913 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1913 = frontier_phi_32_28_ladder;
        }
        float _2230;
        if (_1801 > 0.0)
        {
            _2230 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2230 = frontier_phi_44_39_ladder;
        }
        float _2568;
        if (_1804 > 0.0)
        {
            _2568 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2568 = frontier_phi_54_51_ladder;
        }
        float _2570 = isnan(_2230) ? _1913 : (isnan(_1913) ? _2230 : min(_1913, _2230));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1798) + _1787;
        float _2576 = (_2571 * _1801) + _1791;
        float _2577 = (_2571 * _1804) + _1795;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_29_54_ladder;
        float frontier_phi_29_54_ladder_1;
        float frontier_phi_29_54_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_29_54_ladder = 0.0;
            frontier_phi_29_54_ladder_1 = 0.0;
            frontier_phi_29_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1734);
            frontier_phi_29_54_ladder = _2699.z * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_1 = _2699.y * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_2 = _2699.x * cbModelParam._m0[1u].z;
        }
        _1823 = frontier_phi_29_54_ladder_2;
        _1825 = frontier_phi_29_54_ladder_1;
        _1827 = frontier_phi_29_54_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1734);
        _1823 = _1807.x * cbModelParam._m0[1u].z;
        _1825 = _1807.y * cbModelParam._m0[1u].z;
        _1827 = _1807.z * cbModelParam._m0[1u].z;
    }
    float _1840 = (((_828 * _780) + _829) * _795) * ((cbModelParam._m0[1u].w * (_1823 - _1725)) + _1725);
    float _1842 = (((_828 * _782) + _829) * _795) * ((cbModelParam._m0[1u].w * (_1825 - _1727)) + _1727);
    float _1844 = (((_828 * _783) + _829) * _795) * ((cbModelParam._m0[1u].w * (_1827 - _1729)) + _1729);
    float _1847 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1842, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1850 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1842, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1853 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1842, cbSceneParam._m0[91u].y, _1840 * cbSceneParam._m0[91u].x));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1895 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1899 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1900 = _1887 / _1899;
    float _1901 = _1891 / _1899;
    float _1902 = _1895 / _1899;
    float _2049;
    float _2050;
    float _2051;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1929 = ((uint(_1902 > cbSceneParam._m0[59u].y) + uint(_1902 > cbSceneParam._m0[59u].x)) + uint(_1902 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1930 = _1929 + 43u;
        uint _1938 = _1929 + 44u;
        uint _1946 = _1929 + 45u;
        uint _1954 = _1929 + 46u;
        float _1965 = fma(_1899, cbSceneParam._m0[_1930].w, fma(_1895, cbSceneParam._m0[_1930].z, fma(_1891, cbSceneParam._m0[_1930].y, _1887 * cbSceneParam._m0[_1930].x)));
        float _1969 = fma(_1899, cbSceneParam._m0[_1938].w, fma(_1895, cbSceneParam._m0[_1938].z, fma(_1891, cbSceneParam._m0[_1938].y, _1887 * cbSceneParam._m0[_1938].x)));
        float _1977 = fma(_1899, cbSceneParam._m0[_1954].w, fma(_1895, cbSceneParam._m0[_1954].z, fma(_1891, cbSceneParam._m0[_1954].y, _1887 * cbSceneParam._m0[_1954].x)));
        float _1982 = cbSceneParam._m0[33u].z * _1977;
        float _1984 = cbSceneParam._m0[33u].w * _1977;
        float _1987 = fma(_1899, cbSceneParam._m0[_1946].w, fma(_1895, cbSceneParam._m0[_1946].z, fma(_1891, cbSceneParam._m0[_1946].y, _1887 * cbSceneParam._m0[_1946].x))) / _1977;
        float _2035 = (cbSceneParam._m0[33u].x - sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902))) * cbSceneParam._m0[33u].y;
        float _4411 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2042 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1982 + _1965) / _1977, (_1984 + _1969) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 + _1965) / _1977, (_1969 - _1982) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 - _1982) / _1977, (_1969 - _1984) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 - _1984) / _1977, (_1982 + _1969) / _1977), _1987), 0.0)).x), vec4(0.25)));
        _2049 = 1.0 - (_2042 * cbSceneParam._m0[34u].x);
        _2050 = 1.0 - (_2042 * cbSceneParam._m0[34u].y);
        _2051 = 1.0 - (_2042 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2049 = 1.0;
        _2050 = 1.0;
        _2051 = 1.0;
    }
    float _2115;
    float _2117;
    float _2119;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2103 = fma(_1899, cbSceneParam._m0[63u].w, fma(_1895, cbSceneParam._m0[63u].z, fma(_1891, cbSceneParam._m0[63u].y, _1887 * cbSceneParam._m0[63u].x)));
        float _2104 = fma(_1899, cbSceneParam._m0[60u].w, fma(_1895, cbSceneParam._m0[60u].z, fma(_1891, cbSceneParam._m0[60u].y, _1887 * cbSceneParam._m0[60u].x))) / _2103;
        float _2105 = fma(_1899, cbSceneParam._m0[61u].w, fma(_1895, cbSceneParam._m0[61u].z, fma(_1891, cbSceneParam._m0[61u].y, _1887 * cbSceneParam._m0[61u].x))) / _2103;
        float frontier_phi_41_40_ladder;
        float frontier_phi_41_40_ladder_1;
        float frontier_phi_41_40_ladder_2;
        if ((((_2104 >= cbSceneParam._m0[64u].x) && (_2105 >= cbSceneParam._m0[64u].y)) && (_2104 <= cbSceneParam._m0[64u].z)) && (_2105 <= cbSceneParam._m0[64u].w))
        {
            float _2243 = fma(_1899, cbSceneParam._m0[62u].w, fma(_1895, cbSceneParam._m0[62u].z, fma(_1891, cbSceneParam._m0[62u].y, _1887 * cbSceneParam._m0[62u].x))) / _2103;
            float _2247 = isnan(cbSceneParam._m0[41u].w) ? _2243 : (isnan(_2243) ? cbSceneParam._m0[41u].w : max(_2243, cbSceneParam._m0[41u].w));
            float _2290 = (cbSceneParam._m0[33u].x - sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902))) * cbSceneParam._m0[33u].y;
            float _4427 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
            float _2297 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2104, cbSceneParam._m0[33u].w + _2105), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2104, _2105 - cbSceneParam._m0[33u].z), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2104 - cbSceneParam._m0[33u].z, _2105 - cbSceneParam._m0[33u].w), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2104 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2105), _2247), 0.0)).x), vec4(0.25)));
            float _2301 = 1.0 - (_2297 * cbSceneParam._m0[34u].x);
            float _2302 = 1.0 - (_2297 * cbSceneParam._m0[34u].y);
            float _2303 = 1.0 - (_2297 * cbSceneParam._m0[34u].z);
            frontier_phi_41_40_ladder = isnan(_2303) ? _2051 : (isnan(_2051) ? _2303 : min(_2051, _2303));
            frontier_phi_41_40_ladder_1 = isnan(_2302) ? _2050 : (isnan(_2050) ? _2302 : min(_2050, _2302));
            frontier_phi_41_40_ladder_2 = isnan(_2301) ? _2049 : (isnan(_2049) ? _2301 : min(_2049, _2301));
        }
        else
        {
            frontier_phi_41_40_ladder = _2051;
            frontier_phi_41_40_ladder_1 = _2050;
            frontier_phi_41_40_ladder_2 = _2049;
        }
        _2115 = frontier_phi_41_40_ladder_2;
        _2117 = frontier_phi_41_40_ladder_1;
        _2119 = frontier_phi_41_40_ladder;
    }
    else
    {
        _2115 = _2049;
        _2117 = _2050;
        _2119 = _2051;
    }
    uvec4 _2124 = floatBitsToUint(cbInstanceData._m0[_723 + 5u]);
    uint _2126 = _2124.x * 14u;
    uint _2127 = _2126 + 13u;
    float _2134 = _795 + (-1.0);
    float _2139 = (cbLight._m0[_2127].x * _2134) + 1.0;
    float _2140 = (cbLight._m0[_2127].y * _2134) + 1.0;
    float _2141 = (cbLight._m0[_2127].z * _2134) + 1.0;
    float _2142 = (cbLight._m0[_2127].w * _2134) + 1.0;
    uint _2143 = _2126 + 5u;
    float _2149 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2153 = _2126 + 4u;
    float _2162 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2166 = _2126 | 1u;
    float _2177 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_565, _566, _567));
    float _2180 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_565, _566, _567));
    float _4463 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _4474 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2185 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * 0.3183098733425140380859375;
    float _2187 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * 0.3183098733425140380859375;
    float _2194 = ((cbLight._m0[_2143].x * _2149) * _2187) + (((cbLight._m0[_2153].x * _2115) * _2162) * _2185);
    float _2195 = ((_2149 * cbLight._m0[_2143].y) * _2187) + (((cbLight._m0[_2153].y * _2117) * _2162) * _2185);
    float _2196 = ((_2149 * cbLight._m0[_2143].z) * _2187) + (((cbLight._m0[_2153].z * _2119) * _2162) * _2185);
    uvec4 _2200 = floatBitsToUint(cbLight._m0[_2126 + 12u]);
    bool _2202 = _2200.x == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2202)
    {
        _2304 = _2194;
        _2306 = _2195;
        _2308 = _2196;
    }
    else
    {
        uint _2312 = _2126 + 6u;
        float _2328 = (dot(vec3(cbLight._m0[_2126 + 2u].xyz), vec3(_565, _566, _567)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4485 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2331 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2304 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2194;
        _2306 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2195;
        _2308 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2196;
    }
    bool _2311 = _2200.y == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2311)
    {
        _2366 = _2304;
        _2368 = _2306;
        _2370 = _2308;
    }
    else
    {
        uint _2539 = _2126 + 7u;
        float _2555 = (dot(vec3(cbLight._m0[_2126 + 3u].xyz), vec3(_565, _566, _567)) * 0.5) + 0.5;
        float _2556 = _2555 * _2555;
        float _4501 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2557 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2558 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2366 = (((cbLight._m0[_2539].x * 0.3183098733425140380859375) * _2557) * _2558) + _2304;
        _2368 = (((cbLight._m0[_2539].y * 0.3183098733425140380859375) * _2557) * _2558) + _2306;
        _2370 = (((cbLight._m0[_2539].z * 0.3183098733425140380859375) * _2557) * _2558) + _2308;
    }
    uint _2373 = _2126 + 8u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _710) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2126].x + _646;
    float _2389 = cbLight._m0[_2126].y + _647;
    float _2390 = cbLight._m0[_2126].z + _648;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_2126].xyz));
    float _4517 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _4528 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2402 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2403 = dot(vec3(_565, _566, _567), vec3(_2395, _2396, _2397));
    float _4539 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2395, _2396, _2397));
    float _4550 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2387 * _2387;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2423 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
    float _2424 = 0.959999978542327880859375 - _777;
    float _2426 = 0.959999978542327880859375 - _778;
    float _2427 = 0.959999978542327880859375 - _779;
    float _2434 = 1.0 - _2387;
    float _2445 = (0.5 / (((_2402 * ((_2401 * _2434) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2434) + _2387) * _2401))) * _2401;
    float _4561 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    uint _2461 = _2126 + 9u;
    float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _710) * 0.949999988079071044921875);
    float _2473 = _2472 * _2472;
    float _2474 = cbLight._m0[_2166].x + _646;
    float _2475 = cbLight._m0[_2166].y + _647;
    float _2476 = cbLight._m0[_2166].z + _648;
    float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
    float _2481 = _2480 * _2474;
    float _2482 = _2480 * _2475;
    float _2483 = _2480 * _2476;
    float _2484 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_2166].xyz));
    float _4572 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2488 = dot(vec3(_565, _566, _567), vec3(_2481, _2482, _2483));
    float _4583 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2492 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2481, _2482, _2483));
    float _4594 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2496 = _2473 * _2473;
    float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
    float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0);
    float _2514 = 1.0 - _2473;
    float _2524 = (0.5 / (((_2402 * ((_2487 * _2514) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2514) + _2473) * _2487))) * _2487;
    float _4605 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2526 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
    float _2536 = (((((_2507 * _2424) + _780) * cbLight._m0[_2461].x) * _2526) * _2149) + ((((cbLight._m0[_2373].x * _2115) * ((_2423 * _2424) + _780)) * _2447) * _2162);
    float _2537 = (((((_2507 * _2426) + _782) * cbLight._m0[_2461].y) * _2526) * _2149) + ((((cbLight._m0[_2373].y * _2117) * ((_2423 * _2426) + _782)) * _2447) * _2162);
    float _2538 = (((((_2507 * _2427) + _783) * cbLight._m0[_2461].z) * _2526) * _2149) + ((((cbLight._m0[_2373].z * _2119) * ((_2423 * _2427) + _783)) * _2447) * _2162);
    float _2594;
    float _2596;
    float _2598;
    if (_2202)
    {
        _2594 = _2536;
        _2596 = _2537;
        _2598 = _2538;
    }
    else
    {
        uint _2600 = _2126 + 2u;
        uint _2604 = _2126 + 10u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _710) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _646;
        float _2621 = cbLight._m0[_2600].y + _647;
        float _2622 = cbLight._m0[_2600].z + _648;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_2600].xyz));
        float _4616 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2634 = dot(vec3(_565, _566, _567), vec3(_2627, _2628, _2629));
        float _4627 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4638 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2653 = exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0);
        float _2660 = 1.0 - _2619;
        float _2670 = (0.5 / (((_2402 * ((_2633 * _2660) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2660) + _2619) * _2633))) * _2633;
        float _4649 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2672 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2673 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2594 = (((((_2653 * _2424) + _780) * cbLight._m0[_2604].x) * _2672) * _2673) + _2536;
        _2596 = (((((_2653 * _2426) + _782) * cbLight._m0[_2604].y) * _2672) * _2673) + _2537;
        _2598 = (((((_2653 * _2427) + _783) * cbLight._m0[_2604].z) * _2672) * _2673) + _2538;
    }
    float _2704;
    float _2706;
    float _2708;
    if (_2311)
    {
        _2704 = _2594;
        _2706 = _2596;
        _2708 = _2598;
    }
    else
    {
        uint _2715 = _2126 + 3u;
        uint _2719 = _2126 + 11u;
        float _2733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2715].w)) * _710) * 0.949999988079071044921875);
        float _2734 = _2733 * _2733;
        float _2735 = cbLight._m0[_2715].x + _646;
        float _2736 = cbLight._m0[_2715].y + _647;
        float _2737 = cbLight._m0[_2715].z + _648;
        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
        float _2742 = _2741 * _2735;
        float _2743 = _2741 * _2736;
        float _2744 = _2741 * _2737;
        float _2745 = dot(vec3(_565, _566, _567), vec3(cbLight._m0[_2715].xyz));
        float _4665 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2748 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2749 = dot(vec3(_565, _566, _567), vec3(_2742, _2743, _2744));
        float _4676 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2753 = dot(vec3(cbLight._m0[_2715].xyz), vec3(_2742, _2743, _2744));
        float _4687 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2757 = _2734 * _2734;
        float _2761 = ((_2752 * _2752) * (_2757 + (-1.0))) + 1.0;
        float _2768 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
        float _2775 = 1.0 - _2734;
        float _2785 = (0.5 / (((_2402 * ((_2748 * _2775) + _2734)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2775) + _2734) * _2748))) * _2748;
        float _4698 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2787 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2757 / ((_2761 * _2761) * 3.141590118408203125));
        float _2788 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2704 = (((((_2768 * _2424) + _780) * cbLight._m0[_2719].x) * _2787) * _2788) + _2594;
        _2706 = (((((_2768 * _2426) + _782) * cbLight._m0[_2719].y) * _2787) * _2788) + _2596;
        _2708 = (((((_2768 * _2427) + _783) * cbLight._m0[_2719].z) * _2787) * _2788) + _2598;
    }
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_2124.y == 0u)
    {
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.x;
        uint _2821 = uint((float(_2809.y) * floor(float(uint(cbSceneParam._m0[85u].y * _669) / _2810))) + floor(float(uint(cbSceneParam._m0[85u].x * _668) / _2810)));
        float _2831 = (log2(_1902 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2832 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        uint _2835 = uint(isnan(14.0) ? _2832 : (isnan(_2832) ? 14.0 : min(_2832, 14.0)));
        uvec4 _2840 = texelFetch(g_lightClusterGridBuffer, int(((_2835 << 2u) + (_2821 << 6u)) >> 2u));
        uint _2841 = _2840.x;
        uint _2842 = _2809.z;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((((1u << ((_2842 >> 4u) & 15u)) + 4294967295u) & _2841) == 0u) || ((_2842 & 240u) == 0u))
        {
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
        }
        else
        {
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            uint _3096 = 0u;
            uint _3105;
            bool _3106;
            for (;;)
            {
                _3105 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3096 << 2u)) >> 2u)).x;
                _3106 = _3105 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_3106)
                {
                    frontier_phi_75_pred = _3095;
                    frontier_phi_75_pred_1 = _3094;
                    frontier_phi_75_pred_2 = _3093;
                    frontier_phi_75_pred_3 = _3092;
                    frontier_phi_75_pred_4 = _3090;
                    frontier_phi_75_pred_5 = _3091;
                }
                else
                {
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    uint _3241;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3105;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    for (;;)
                    {
                        uint _3245 = uint(findLSB(_3241)) + (_3096 << 5u);
                        uint _3242 = (_3241 + 4294967295u) & _3241;
                        uint _3247 = _3245 * 48u;
                        vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 3u)).x));
                        uint _3267 = (_3245 * 48u) + 4u;
                        vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 3u)).x));
                        uint _3286 = (_3245 * 48u) + 8u;
                        vec3 _3297 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x));
                        float _3301 = _3261.x - _1900;
                        float _3302 = _3261.y - _1901;
                        float _3303 = _3261.z - _1902;
                        float _3304 = dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303));
                        float _3307 = inversesqrt(_3304);
                        float _3308 = _3307 * _3301;
                        float _3309 = _3307 * _3302;
                        float _3310 = _3307 * _3303;
                        float _3311 = dot(vec3(_691, _694, _697), vec3(_3308, _3309, _3310));
                        float _3316 = 1.0 - (_3304 * _3261.w);
                        float _4724 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                        float _3318 = sqrt(_3304) * _3280.w;
                        float _3321 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3311) + _3322;
                        float _3328 = _3318 * _3318;
                        float _3332 = ((isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))) * _3317) / ((_3328 * 0.699999988079071044921875) + 1.0);
                        float _3336 = (-0.0) - _1900;
                        float _3337 = (-0.0) - _1901;
                        float _3338 = (-0.0) - _1902;
                        float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                        float _3343 = _3342 * _3336;
                        float _3344 = _3342 * _3337;
                        float _3345 = _3342 * _3338;
                        float _3352 = exp2(log2(1.0 / ((_3328 * 3.5) + 5.0)) * 0.25);
                        float _3353 = 1.0 - _811;
                        float _3360 = sqrt(1.0 - ((1.0 - (_3353 * _3353)) * (1.0 - (_3352 * _3352))));
                        float _3361 = _3360 * _3360;
                        float _3362 = _3361 * _3361;
                        float _3363 = _3343 + _3308;
                        float _3364 = _3344 + _3309;
                        float _3365 = _3345 + _3310;
                        float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                        float _3373 = dot(vec3(_691, _694, _697), vec3(_3343, _3344, _3345));
                        float _4740 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3376 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3377 = dot(vec3(_691, _694, _697), vec3(_3369 * _3363, _3369 * _3364, _3369 * _3365));
                        float _4751 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3380 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3384 = ((_3380 * _3380) * (_3362 + (-1.0))) + 1.0;
                        float _3385 = _3321 * _3361;
                        float _3386 = _3385 * _3385;
                        float _3389 = ((1.0 - _3386) * _3311) + _3386;
                        float _4762 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3391 = 1.0 - _3361;
                        float _3401 = (0.5 / (((_3390 * ((_3376 * _3391) + _3361)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3361) * _3376))) * _3390;
                        float _4773 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3412 = (((_3362 * 3.1415927410125732421875) * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) / ((_3384 * _3384) * ((_3328 * 2.1991131305694580078125) + 3.141590118408203125))) * _3317;
                        _3165 = (_3332 * _3280.x) + _3238;
                        _3166 = (_3332 * _3280.y) + _3239;
                        _3167 = (_3332 * _3280.z) + _3240;
                        _3162 = (_3412 * _3297.x) + _3235;
                        _3163 = (_3412 * _3297.y) + _3236;
                        _3164 = (_3412 * _3297.z) + _3237;
                        if (_3242 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3242;
                        }
                    }
                    frontier_phi_75_pred = _3167;
                    frontier_phi_75_pred_1 = _3166;
                    frontier_phi_75_pred_2 = _3165;
                    frontier_phi_75_pred_3 = _3164;
                    frontier_phi_75_pred_4 = _3162;
                    frontier_phi_75_pred_5 = _3163;
                }
                _2949 = frontier_phi_75_pred;
                _2947 = frontier_phi_75_pred_1;
                _2945 = frontier_phi_75_pred_2;
                _2943 = frontier_phi_75_pred_3;
                _2939 = frontier_phi_75_pred_4;
                _2941 = frontier_phi_75_pred_5;
                uint _3097 = _3096 + 1u;
                if (_3097 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3090 = _2939;
                    _3091 = _2941;
                    _3092 = _2943;
                    _3093 = _2945;
                    _3094 = _2947;
                    _3095 = _2949;
                    _3096 = _3097;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
        }
        uvec4 _2952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2953 = _2952.z;
        uint _2955 = (_2953 >> 8u) & 15u;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((4294967295u << _2955) & _2841) == 0u)
        {
            _3058 = _2938;
            _3060 = _2940;
            _3062 = _2942;
            _3064 = _2944;
            _3066 = _2946;
            _3068 = _2948;
        }
        else
        {
            float _3083 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
            float _3084 = _3083 * _1900;
            float _3085 = _3083 * _1901;
            float _3086 = _3083 * _1902;
            float frontier_phi_67_68_ladder;
            float frontier_phi_67_68_ladder_1;
            float frontier_phi_67_68_ladder_2;
            float frontier_phi_67_68_ladder_3;
            float frontier_phi_67_68_ladder_4;
            float frontier_phi_67_68_ladder_5;
            if (_2955 < ((_2953 >> 12u) & 15u))
            {
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3218 = _2938;
                float _3219 = _2940;
                float _3220 = _2942;
                float _3221 = _2944;
                float _3222 = _2946;
                float _3223 = _2948;
                uint _3224 = _2955;
                uint _3233;
                bool _3234;
                for (;;)
                {
                    _3233 = texelFetch(g_lightClassification, int((((_2835 << 5u) + (_2821 << 9u)) + (_3224 << 2u)) >> 2u)).x;
                    _3234 = _3233 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_3234)
                    {
                        frontier_phi_86_pred = _3220;
                        frontier_phi_86_pred_1 = _3219;
                        frontier_phi_86_pred_2 = _3218;
                        frontier_phi_86_pred_3 = _3223;
                        frontier_phi_86_pred_4 = _3222;
                        frontier_phi_86_pred_5 = _3221;
                    }
                    else
                    {
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3439 = _3218;
                        float _3440 = _3219;
                        float _3441 = _3220;
                        float _3442 = _3221;
                        float _3443 = _3222;
                        float _3444 = _3223;
                        uint _3445 = _3233;
                        uint _3446;
                        vec4 _3471;
                        float _3472;
                        vec4 _3487;
                        vec3 _3499;
                        vec4 _3514;
                        vec4 _3529;
                        float _3575;
                        bool _3576;
                        for (;;)
                        {
                            uint _3456 = ((_3224 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3445));
                            _3446 = (_3445 + 4294967295u) & _3445;
                            uint _3458 = _3456 * 40u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3472 = _3471.w;
                            uint _3474 = (_3456 * 40u) + 4u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3489 = (_3456 * 40u) + 8u;
                            _3499 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x));
                            uint _3501 = (_3456 * 40u) + 16u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3456 * 40u) + 20u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3456 * 40u) + 24u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3550 = (_3456 * 40u) + 28u;
                            vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            _3575 = fma(_1902, _3563.z, fma(_1901, _3563.y, _3563.x * _1900)) + _3563.w;
                            _3576 = !((fma(_1902, _3544.z, fma(_1901, _3544.y, _3544.x * _1900)) + _3544.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3576)
                            {
                                float _3603 = _3471.x - _1900;
                                float _3604 = _3471.y - _1901;
                                float _3605 = _3471.z - _1902;
                                float _3606 = dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605));
                                float _3609 = inversesqrt(_3606);
                                float _3610 = _3609 * _3603;
                                float _3611 = _3609 * _3604;
                                float _3612 = _3609 * _3605;
                                float _3616 = 1.0 - (_3606 / (_3472 * _3472));
                                float _4784 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3621 = sqrt(_3606) * _3487.w;
                                float _3623 = 1.39999997615814208984375 / (_3621 + 1.39999997615814208984375);
                                float _3624 = _3623 * _3623;
                                float _3627 = ((1.0 - _3624) * dot(vec3(_3610, _3611, _3612), vec3(_691, _694, _697))) + _3624;
                                float _3630 = _3621 * _3621;
                                float _3634 = (fma(_1902, _3514.z, fma(_1901, _3514.y, _3514.x * _1900)) + _3514.w) / _3575;
                                float _3635 = (fma(_1902, _3529.z, fma(_1901, _3529.y, _3529.x * _1900)) + _3529.w) / _3575;
                                float _3639 = 1.0 - dot(vec2(_3634, _3635), vec2(_3634, _3635));
                                float _4800 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3641 = _3640 * (((isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0))) * _3617) / ((_3630 * 0.699999988079071044921875) + 1.0));
                                float _3653 = exp2(log2(1.0 / ((_3630 * 3.5) + 5.0)) * 0.25);
                                float _3654 = 1.0 - _811;
                                float _3661 = sqrt(1.0 - ((1.0 - (_3654 * _3654)) * (1.0 - (_3653 * _3653))));
                                float _3662 = _3661 * _3661;
                                float _3663 = _3662 * _3662;
                                float _3664 = _3610 - _3084;
                                float _3665 = _3611 - _3085;
                                float _3666 = _3612 - _3086;
                                float _3670 = inversesqrt(dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666)));
                                float _3674 = dot(vec3(_691, _694, _697), vec3((-0.0) - _3084, (-0.0) - _3085, (-0.0) - _3086));
                                float _4811 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3678 = dot(vec3(_691, _694, _697), vec3(_3670 * _3664, _3670 * _3665, _3670 * _3666));
                                float _4822 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3681 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3685 = ((_3681 * _3681) * (_3663 + (-1.0))) + 1.0;
                                float _3686 = _3623 * _3662;
                                float _3687 = _3686 * _3686;
                                float _3693 = ((1.0 - _3687) * dot(vec3(_691, _694, _697), vec3(_3610, _3611, _3612))) + _3687;
                                float _4833 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3695 = 1.0 - _3662;
                                float _3705 = (0.5 / (((_3694 * ((_3677 * _3695) + _3662)) + 9.9999999392252902907785028219223e-09) + (((_3694 * _3695) + _3662) * _3677))) * _3694;
                                float _4844 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3715 = (_3640 * _3617) * (((_3663 * 3.1415927410125732421875) * (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) / ((_3685 * _3685) * ((_3630 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3715 * _3499.z;
                                frontier_phi_92_pred_1 = _3715 * _3499.y;
                                frontier_phi_92_pred_2 = _3715 * _3499.x;
                                frontier_phi_92_pred_3 = _3641 * _3487.z;
                                frontier_phi_92_pred_4 = _3641 * _3487.y;
                                frontier_phi_92_pred_5 = _3641 * _3487.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3721 = frontier_phi_92_pred;
                            _3720 = frontier_phi_92_pred_1;
                            _3719 = frontier_phi_92_pred_2;
                            _3724 = frontier_phi_92_pred_3;
                            _3723 = frontier_phi_92_pred_4;
                            _3722 = frontier_phi_92_pred_5;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            if (_3446 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3446;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3428;
                        frontier_phi_86_pred_1 = _3427;
                        frontier_phi_86_pred_2 = _3426;
                        frontier_phi_86_pred_3 = _3431;
                        frontier_phi_86_pred_4 = _3430;
                        frontier_phi_86_pred_5 = _3429;
                    }
                    _3063 = frontier_phi_86_pred;
                    _3061 = frontier_phi_86_pred_1;
                    _3059 = frontier_phi_86_pred_2;
                    _3069 = frontier_phi_86_pred_3;
                    _3067 = frontier_phi_86_pred_4;
                    _3065 = frontier_phi_86_pred_5;
                    uint _3225 = _3224 + 1u;
                    if (_3225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3218 = _3059;
                        _3219 = _3061;
                        _3220 = _3063;
                        _3221 = _3065;
                        _3222 = _3067;
                        _3223 = _3069;
                        _3224 = _3225;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_67_68_ladder = _3069;
                frontier_phi_67_68_ladder_1 = _3065;
                frontier_phi_67_68_ladder_2 = _3063;
                frontier_phi_67_68_ladder_3 = _3061;
                frontier_phi_67_68_ladder_4 = _3067;
                frontier_phi_67_68_ladder_5 = _3059;
            }
            else
            {
                frontier_phi_67_68_ladder = _2948;
                frontier_phi_67_68_ladder_1 = _2944;
                frontier_phi_67_68_ladder_2 = _2942;
                frontier_phi_67_68_ladder_3 = _2940;
                frontier_phi_67_68_ladder_4 = _2946;
                frontier_phi_67_68_ladder_5 = _2938;
            }
            _3058 = frontier_phi_67_68_ladder_5;
            _3060 = frontier_phi_67_68_ladder_3;
            _3062 = frontier_phi_67_68_ladder_2;
            _3064 = frontier_phi_67_68_ladder_1;
            _3066 = frontier_phi_67_68_ladder_4;
            _3068 = frontier_phi_67_68_ladder;
        }
        float _3073 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2853 = (_3073 * _3064) + _2366;
        _2855 = (_3073 * _3066) + _2368;
        _2857 = (_3073 * _3068) + _2370;
        _2859 = ((_3058 * _780) * _3073) + _2704;
        _2861 = ((_3060 * _782) * _3073) + _2706;
        _2863 = ((_3062 * _783) * _3073) + _2708;
    }
    else
    {
        _2853 = _2366;
        _2855 = _2368;
        _2857 = _2370;
        _2859 = _2704;
        _2861 = _2706;
        _2863 = _2708;
    }
    vec4 _2869 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4860 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4871 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4882 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2893 = (((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2853 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _795))) + ((_2859 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1634)) * cbPerFrame._m0[3u].x)) + (_2869.x * cbMtdParam._m0[3u].x);
    float _2895 = ((_2869.y * cbMtdParam._m0[3u].x) + ((_2861 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1634)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2855 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _795)));
    float _2897 = ((_2869.z * cbMtdParam._m0[3u].x) + ((_2863 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1634)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2857 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _795)));
    float _2898 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
    float _2899 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
    float _2900 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
    uint _2901 = _723 + 6u;
    float _2909 = _668 / cbSceneParam._m0[86u].x;
    float _2910 = _669 / cbSceneParam._m0[86u].y;
    vec4 _2924 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, (log2((isnan(cbSceneParam._m0[77u].w) ? _588 : (isnan(_588) ? cbSceneParam._m0[77u].w : min(_588, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2926 = _2924.x;
    float _2927 = _2924.y;
    float _2928 = _2924.z;
    float _2929 = _2924.w;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    if (_588 > cbSceneParam._m0[78u].w)
    {
        float _2963 = isnan(_588) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _588 : min(cbSceneParam._m0[80u].w, _588));
        float _2964 = _2963 / _588;
        float _2975 = _2964 * _639;
        float _2976 = _640 * _2964;
        float _2977 = (-0.0) - _2976;
        float _2978 = _2964 * _641;
        float _2980 = (cbSceneParam._m0[77u].w * _2977) / _2963;
        float _2981 = _2980 + cbSceneParam._m0[79u].w;
        float _2982 = cbSceneParam._m0[79u].w - _2976;
        float _2988 = sqrt(((_2975 * _2975) + (_2976 * _2976)) + (_2978 * _2978));
        float _2991 = (1.0 - (cbSceneParam._m0[77u].w / _2963)) * _2988;
        float _2996 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2998 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3175;
        if (abs((_2977 - _2980) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3175 = ((((_2981 > 0.0) ? exp2(_2996 * _2981) : (2.0 - exp2(_2998 * _2981))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2991;
        }
        else
        {
            float _3119 = 1.0 / cbSceneParam._m0[80u].x;
            float _3120 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : max(_2981, _2982));
            float _3121 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : min(_2981, _2982));
            float _3130 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : min(_3120, 0.0));
            float _3131 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : min(_3121, 0.0));
            _3175 = ((abs(_2988 / _2977) * cbSceneParam._m0[80u].y) * ((((_3130 - _3131) * 2.0) - ((exp2(_2996 * (isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0)))) - exp2(_2996 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))))) * _3119)) - ((exp2(_2998 * _3130) - exp2(_2998 * _3131)) * _3119))) + (_2991 * cbSceneParam._m0[80u].z);
        }
        vec4 _3177 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, 1.0), 0.0);
        float _3186 = exp2((_3175 * (-1.44269502162933349609375)) * (1.0 - _3177.w));
        float _3187 = log2(_3186);
        float _3203 = log2(_2929);
        _3000 = (exp2(_3203 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3187 * cbSceneParam._m0[78u].x)) * _3177.x) / cbSceneParam._m0[78u].x)) + _2926;
        _3002 = (exp2(_3203 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3187 * cbSceneParam._m0[78u].y)) * _3177.y) / cbSceneParam._m0[78u].y)) + _2927;
        _3004 = (exp2(_3203 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3187 * cbSceneParam._m0[78u].z)) * _3177.z) / cbSceneParam._m0[78u].z)) + _2928;
        _3006 = _3186 * _2929;
    }
    else
    {
        _3000 = _2926;
        _3002 = _2927;
        _3004 = _2928;
        _3006 = _2929;
    }
    bool _3213;
    vec4 _3016;
    vec4 _3038;
    float _3040;
    float _3044;
    float _3045;
    float _3046;
    float _3047;
    bool _3057;
    for (;;)
    {
        _3016 = cbMatDynParam._m0[0u];
        float _3018 = roundEven(_3016.y);
        bool _3019 = _3018 == 3.0;
        float _3020 = log2(_3006);
        float _3027 = exp2(_3020 * cbSceneParam._m0[78u].x) * _2898;
        float _3028 = exp2(_3020 * cbSceneParam._m0[78u].y) * _2899;
        float _3029 = exp2(_3020 * cbSceneParam._m0[78u].z) * _2900;
        float _3036 = _655 + (-0.5);
        _3038 = cbMtdParam._m0[1u];
        _3040 = _3038.y * _3036;
        float _3043 = (_3018 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3044 = _3043 * (_3019 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3000)));
        _3045 = _3043 * (_3019 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3002)));
        _3046 = _3043 * (_3019 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3004)));
        _3047 = _3036 * 0.999000012874603271484375;
        _3057 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3057)
        {
            if ((cbInstanceData._m0[_723 + 7u].x + _3047) < 0.5)
            {
                _3213 = true;
                break;
            }
        }
        uint _3154 = _724 + uint(_3016.w);
        if ((cbInstanceData._m0[_3154].w < 1.0) && ((cbInstanceData._m0[_3154].w + _3047) < 0.5))
        {
            _3213 = true;
            break;
        }
        if ((_3040 + 1.0) < _3038.x)
        {
            _3213 = true;
            break;
        }
        _3213 = false;
        break;
    }
    float _3417;
    if (_3213)
    {
        discard_state = true;
        _3417 = 0.0;
    }
    else
    {
        _3417 = cbInstanceData._m0[_2901].w;
    }
    SV_Target.x = _3044;
    SV_Target.y = _3045;
    SV_Target.z = _3046;
    SV_Target.w = _3417;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2901].w;
    discard_exit();
}


