#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1212;
float _3895;
float _3896;
float _3897;
float _3898;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249;
    float _250;
    float _251;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
    }
    else
    {
        _249 = _235;
        _250 = _236;
        _251 = _237;
    }
    float _197[6];
    float _198[6];
    float _199[6];
    _197[0u] = cbMtdParam._m0[14u].x;
    _198[0u] = cbMtdParam._m0[14u].y;
    _199[0u] = cbMtdParam._m0[14u].z;
    _197[1u] = cbMtdParam._m0[15u].x;
    _198[1u] = cbMtdParam._m0[15u].y;
    _199[1u] = cbMtdParam._m0[15u].z;
    _197[2u] = cbMtdParam._m0[16u].x;
    _198[2u] = cbMtdParam._m0[16u].y;
    _199[2u] = cbMtdParam._m0[16u].z;
    _197[3u] = cbMtdParam._m0[11u].x;
    _198[3u] = cbMtdParam._m0[11u].y;
    _199[3u] = cbMtdParam._m0[11u].z;
    _197[4u] = cbMtdParam._m0[12u].x;
    _198[4u] = cbMtdParam._m0[12u].y;
    _199[4u] = cbMtdParam._m0[12u].z;
    _197[5u] = cbMtdParam._m0[13u].x;
    _198[5u] = cbMtdParam._m0[13u].y;
    _199[5u] = cbMtdParam._m0[13u].z;
    vec4 _358 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _361 = _358.y;
    float _364 = (_358.x + (-0.02500000037252902984619140625)) * 8.0;
    float _366 = roundEven(_364);
    float _367 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    uint _370 = uint(int(isnan(5.0) ? _367 : (isnan(_367) ? 5.0 : min(_367, 5.0))));
    float _387 = roundEven(5.0 - _364);
    float _388 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _389 = isnan(4.0) ? _388 : (isnan(_388) ? 4.0 : min(_388, 4.0));
    float _395;
    float _397;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _395 = cbMtdParam._m0[26u].x;
        _397 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _395 = cbMtdParam._m0[22u].x;
        _397 = cbMtdParam._m0[22u].y;
    }
    float _399 = _395 * TEXCOORD.x;
    float _400 = _397 * TEXCOORD.y;
    float _411 = floor(_389);
    vec4 _414 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _399) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _400) + cbTextureTilingScale._m0[6u].w, _411));
    vec4 _436 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _444 = ((((((_197[_370] - cbMtdParam._m0[18u].x) * _361) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _414.x) * cbMtdParam._m0[9u].x) * _436.x;
    float _448 = ((((((_198[_370] - cbMtdParam._m0[18u].y) * _361) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _414.y) * cbMtdParam._m0[9u].y) * _436.y;
    float _452 = ((((((_199[_370] - cbMtdParam._m0[18u].z) * _361) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _414.z) * cbMtdParam._m0[9u].z) * _436.z;
    vec4 _464 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _468 = _464.z;
    float _192[5];
    float _193[5];
    _192[0u] = cbMtdParam._m0[22u].z;
    _193[0u] = cbMtdParam._m0[22u].w;
    _192[1u] = cbMtdParam._m0[23u].z;
    _193[1u] = cbMtdParam._m0[23u].w;
    _192[2u] = cbMtdParam._m0[24u].x;
    _193[2u] = cbMtdParam._m0[24u].y;
    _192[3u] = cbMtdParam._m0[24u].z;
    _193[3u] = cbMtdParam._m0[24u].w;
    _192[4u] = cbMtdParam._m0[23u].x;
    _193[4u] = cbMtdParam._m0[23u].y;
    float _512 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    uint _514 = uint(int(isnan(4.0) ? _512 : (isnan(_512) ? 4.0 : min(_512, 4.0))));
    float _519 = _193[_514] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _399) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _400) + cbTextureTilingScale._m0[8u].w, _411)).x;
    vec4 _538 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _399) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _400) + cbTextureTilingScale._m0[7u].w, _411));
    float _545 = (_538.x * 2.0) + (-1.0);
    float _546 = (_538.y * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3937 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))));
    float _562 = (cbMtdParam._m0[20u].x * (((_468 * 2.0) * (_538.z + _192[_514])) - _468)) + _468;
    float _566 = (cbMtdParam._m0[20u].y * ((_464.x * 2.0) + (-1.0))) + _545;
    float _567 = (cbMtdParam._m0[20u].y * ((_464.y * 2.0) + (-1.0))) + _546;
    float _570 = fma(_553, _249, fma(_567, _241 * TANGENT.x, (_227 * _219) * _566));
    float _573 = fma(_553, _250, fma(_567, _241 * TANGENT.y, (_227 * _220) * _566));
    float _576 = fma(_553, _251, fma(_567, _241 * TANGENT.z, (_227 * _221) * _566));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _581 = _580 * _570;
    float _582 = _580 * _573;
    float _583 = _580 * _576;
    float _3948 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _584 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3970 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3981 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3992 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _588 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _604 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    vec4 _669 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _671 = _669.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _892 = sqrt(((_655 * _655) + (_656 * _656)) + (_657 * _657));
        float _898 = (cbMatDynParam._m0[5u].x * _892) + cbMatDynParam._m0[5u].y;
        float _4003 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _903 = (cbMatDynParam._m0[5u].z * _892) + cbMatDynParam._m0[5u].w;
        float _4014 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) - _899)) + _899) < ((_671 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _684 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _685 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _687 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _689 = _687.w;
    float _707 = fma(_583, cbSceneParam._m0[5u].z, fma(_582, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _581));
    float _710 = fma(_583, cbSceneParam._m0[6u].z, fma(_582, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _581));
    float _713 = fma(_583, cbSceneParam._m0[7u].z, fma(_582, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _581));
    vec4 _715 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _726 = (((_715.y - _584) + (_715.w * _584)) * cbMtdParam._m0[3u].x) + _584;
    uint _739 = uint(roundEven(NORMAL.w)) * 13u;
    uint _740 = _739 + 9u;
    uint _741 = _740 + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_741].z;
    float _4025 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    vec4 _753 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _758 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _769 = (((_758.x - _588) + (_758.w * _588)) * cbMtdParam._m0[3u].x) + _588;
    float _782 = (cbMtdParam._m0[3u].x * (((_750 * _689) - _750) + _753.x)) + _750;
    float _783 = (cbMtdParam._m0[3u].x * (((_751 * _689) - _751) + _753.y)) + _751;
    float _784 = (cbMtdParam._m0[3u].x * (((_752 * _689) - _752) + _753.z)) + _752;
    float _785 = 1.0 - _769;
    float _786 = _785 * _782;
    float _787 = _785 * _783;
    float _788 = _785 * _784;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _769;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _769;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _769;
    float _796 = _793 + 0.039999999105930328369140625;
    float _798 = _794 + 0.039999999105930328369140625;
    float _799 = _795 + 0.039999999105930328369140625;
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _684, cbSceneParam._m0[86u].y * _685));
    float _811 = _808.x * TEXCOORD_4;
    float _812 = dot(vec3(_581, _582, _583), vec3(_662, _663, _664));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _581) - _662;
    float _820 = (_815 * _582) - _663;
    float _821 = (_815 * _583) - _664;
    float _825 = abs(dot(vec3(_662, _663, _664), vec3(_581, _582, _583)));
    float _4058 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = sqrt(_726);
    float _838 = exp2((_827 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_827 * 3.0));
    float _844 = (1.0 - _838) * ((_827 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _845 = _838 * _827;
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1211;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _936 = fma(_881, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873));
        float _940 = fma(_881, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873));
        float _944 = fma(_881, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873));
        float _969 = _873 + _581;
        float _970 = _877 + _582;
        float _971 = _881 + _583;
        float _981 = fma(_971, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969)) - _936;
        float _982 = fma(_971, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969)) - _940;
        float _983 = fma(_971, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969)) - _944;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_936 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_940 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[34u].z) + ((((((_944 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1039 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1005.x + (-0.5));
        float _1041 = _1039 * (_1005.y + (-0.5));
        float _1042 = _1039 * (_1005.z + (-0.5));
        float _1049 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1012.x + (-0.5));
        float _1051 = _1049 * (_1012.y + (-0.5));
        float _1052 = _1049 * (_1012.z + (-0.5));
        float _1059 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1019.x + (-0.5));
        float _1061 = _1059 * (_1019.y + (-0.5));
        float _1062 = _1059 * (_1019.z + (-0.5));
        float _1069 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1026.x + (-0.5));
        float _1071 = _1069 * (_1026.y + (-0.5));
        float _1072 = _1069 * (_1026.z + (-0.5));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = _1040 * 0.5;
        float _1077 = _1050 * 0.5;
        float _1078 = _1060 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1093 = (dot(vec3(_581, _582, _583), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1103 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _4106 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1105 + 1.0))) + _1110) * _1073;
        float _1120 = _1041 * 0.5;
        float _1121 = _1051 * 0.5;
        float _1122 = _1061 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_581, _582, _583), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _4139 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1147 + 1.0))) + _1152) * _1074;
        float _1162 = _1042 * 0.5;
        float _1163 = _1052 * 0.5;
        float _1164 = _1062 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_581, _582, _583), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _4172 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1189 + 1.0))) + _1194) * _1075;
        _1211 = _1042;
        _1213 = _1041;
        _1214 = _1040;
        _1215 = _1052;
        _1216 = _1051;
        _1217 = _1050;
        _1218 = _1062;
        _1219 = _1061;
        _1220 = _1060;
        _1221 = _1075;
        _1222 = _1074;
        _1223 = _1073;
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
    }
    else
    {
        _1211 = _1212;
        _1213 = _1212;
        _1214 = _1212;
        _1215 = _1212;
        _1216 = _1212;
        _1217 = _1212;
        _1218 = _1212;
        _1219 = _1212;
        _1220 = _1212;
        _1221 = _1212;
        _1222 = _1212;
        _1223 = _1212;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1255 = fma(_881, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _873));
        float _1259 = fma(_881, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _873));
        float _1263 = fma(_881, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _873));
        float _1286 = _873 + _581;
        float _1287 = _877 + _582;
        float _1288 = _881 + _583;
        float _1298 = fma(_1288, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1286)) - _1255;
        float _1299 = fma(_1288, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1286)) - _1259;
        float _1300 = fma(_1288, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1286)) - _1263;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1255 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1259 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[35u].z) + ((((((_1263 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1354 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1321.x + (-0.5));
        float _1356 = _1354 * (_1321.y + (-0.5));
        float _1357 = _1354 * (_1321.z + (-0.5));
        float _1364 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1328.x + (-0.5));
        float _1366 = _1364 * (_1328.y + (-0.5));
        float _1367 = _1364 * (_1328.z + (-0.5));
        float _1374 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1335.x + (-0.5));
        float _1376 = _1374 * (_1335.y + (-0.5));
        float _1377 = _1374 * (_1335.z + (-0.5));
        float _1384 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1342.x + (-0.5));
        float _1386 = _1384 * (_1342.y + (-0.5));
        float _1387 = _1384 * (_1342.z + (-0.5));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = _1355 * 0.5;
        float _1392 = _1365 * 0.5;
        float _1393 = _1375 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_581, _582, _583), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4235 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1418 + 1.0))) + _1423) * _1388;
        float _1433 = _1356 * 0.5;
        float _1434 = _1366 * 0.5;
        float _1435 = _1376 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_581, _582, _583), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4268 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1460 + 1.0))) + _1465) * _1389;
        float _1475 = _1357 * 0.5;
        float _1476 = _1367 * 0.5;
        float _1477 = _1377 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_581, _582, _583), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4301 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1502 + 1.0))) + _1507) * _1390;
        _1524 = _1357;
        _1525 = _1356;
        _1526 = _1355;
        _1527 = _1367;
        _1528 = _1366;
        _1529 = _1365;
        _1530 = _1377;
        _1531 = _1376;
        _1532 = _1375;
        _1533 = _1390;
        _1534 = _1389;
        _1535 = _1388;
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
    }
    else
    {
        _1524 = _1212;
        _1525 = _1212;
        _1526 = _1212;
        _1527 = _1212;
        _1528 = _1212;
        _1529 = _1212;
        _1530 = _1212;
        _1531 = _1212;
        _1532 = _1212;
        _1533 = _1212;
        _1534 = _1212;
        _1535 = _1212;
        _1536 = 0.0;
        _1537 = 0.0;
        _1538 = 0.0;
    }
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1224)) + _1224;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1225)) + _1225;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1226)) + _1226;
    float _1571 = fma(_1550, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1548 * cbSceneParam._m0[89u].x));
    float _1574 = fma(_1550, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1548 * cbSceneParam._m0[90u].x));
    float _1577 = fma(_1550, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1548));
    float _1592 = _819 * 0.5;
    float _1593 = _820 * 0.5;
    float _1594 = _821 * 0.5;
    float _1595 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1598 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1601 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1635;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1608 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1211, _1215, _1218, _1221));
        float _1612 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1616 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1214, _1217, _1220, _1223));
        float _1623 = dot(vec4(cbModelParam._m0[39u]), vec4(_1592, _1593, _1594, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1646;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1637 = dot(vec4(cbModelParam._m0[40u]), vec4(_1592, _1593, _1594, 1.0));
        _1646 = dot(vec3(isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1646 = 1.0;
    }
    float _1650 = (_1646 * cbModelParam._m0[1u].x) + (_1635 * (1.0 - cbModelParam._m0[1u].x));
    float _1660 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _726);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1660 : min(cbModelParam._m0[25u].z, _1660));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1708 = fma(_881, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873)) + cbModelParam._m0[13u].w;
        float _1712 = fma(_881, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873)) + cbModelParam._m0[14u].w;
        float _1716 = fma(_881, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873)) + cbModelParam._m0[15u].w;
        float _1719 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1722 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1725 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1753;
        if (_1719 > 0.0)
        {
            _1753 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1753 = frontier_phi_21_19_ladder;
        }
        float _1924;
        if (_1722 > 0.0)
        {
            _1924 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1924 = frontier_phi_30_26_ladder;
        }
        float _2219;
        if (_1725 > 0.0)
        {
            _2219 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2219 = frontier_phi_42_37_ladder;
        }
        float _2221 = isnan(_1924) ? _1753 : (isnan(_1753) ? _1924 : min(_1753, _1924));
        float _2222 = isnan(_2219) ? _2221 : (isnan(_2221) ? _2219 : min(_2221, _2219));
        float _2226 = (_2222 * _1719) + _1708;
        float _2227 = (_2222 * _1722) + _1712;
        float _2228 = (_2222 * _1725) + _1716;
        float _2229 = _2222 * 9.9999997473787516355514526367188e-05;
        float _2231 = (-1.0) - _2229;
        float _2233 = _2229 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2228 > _2233) || ((_2228 < _2231) || ((_2227 > _2233) || ((_2227 < _2231) || ((_2226 < _2231) || (_2226 > _2233))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2228, cbModelParam._m0[9u].z, fma(_2227, cbModelParam._m0[9u].y, _2226 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2228, cbModelParam._m0[10u].z, fma(_2227, cbModelParam._m0[10u].y, _2226 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2228, cbModelParam._m0[11u].z, fma(_2227, cbModelParam._m0[11u].y, _2226 * cbModelParam._m0[11u].x))), _1661);
            frontier_phi_20_42_ladder = _2373.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2373.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2373.x * cbModelParam._m0[1u].y;
        }
        _1741 = frontier_phi_20_42_ladder_2;
        _1743 = frontier_phi_20_42_ladder_1;
        _1745 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1661);
        _1741 = _1729.x * cbModelParam._m0[1u].y;
        _1743 = _1729.y * cbModelParam._m0[1u].y;
        _1745 = _1729.z * cbModelParam._m0[1u].y;
    }
    float _1749 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _726);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1749 : min(cbModelParam._m0[25u].w, _1749));
    float _1839;
    float _1841;
    float _1843;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1803 = fma(_881, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873)) + cbModelParam._m0[21u].w;
        float _1807 = fma(_881, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873)) + cbModelParam._m0[22u].w;
        float _1811 = fma(_881, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873)) + cbModelParam._m0[23u].w;
        float _1814 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1817 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1820 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _1929;
        if (_1814 > 0.0)
        {
            _1929 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1929 = frontier_phi_32_28_ladder;
        }
        float _2246;
        if (_1817 > 0.0)
        {
            _2246 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2246 = frontier_phi_44_39_ladder;
        }
        float _2584;
        if (_1820 > 0.0)
        {
            _2584 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2584 = frontier_phi_54_51_ladder;
        }
        float _2586 = isnan(_2246) ? _1929 : (isnan(_1929) ? _2246 : min(_1929, _2246));
        float _2587 = isnan(_2584) ? _2586 : (isnan(_2586) ? _2584 : min(_2586, _2584));
        float _2591 = (_2587 * _1814) + _1803;
        float _2592 = (_2587 * _1817) + _1807;
        float _2593 = (_2587 * _1820) + _1811;
        float _2594 = _2587 * 9.9999997473787516355514526367188e-05;
        float _2595 = (-1.0) - _2594;
        float _2597 = _2594 + 1.0;
        float frontier_phi_29_54_ladder;
        float frontier_phi_29_54_ladder_1;
        float frontier_phi_29_54_ladder_2;
        if ((_2593 > _2597) || ((_2593 < _2595) || ((_2592 > _2597) || ((_2592 < _2595) || ((_2591 < _2595) || (_2591 > _2597))))))
        {
            frontier_phi_29_54_ladder = 0.0;
            frontier_phi_29_54_ladder_1 = 0.0;
            frontier_phi_29_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2593, cbModelParam._m0[17u].z, fma(_2592, cbModelParam._m0[17u].y, _2591 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2593, cbModelParam._m0[18u].z, fma(_2592, cbModelParam._m0[18u].y, _2591 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2593, cbModelParam._m0[19u].z, fma(_2592, cbModelParam._m0[19u].y, _2591 * cbModelParam._m0[19u].x))), _1750);
            frontier_phi_29_54_ladder = _2715.z * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_1 = _2715.y * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_2 = _2715.x * cbModelParam._m0[1u].z;
        }
        _1839 = frontier_phi_29_54_ladder_2;
        _1841 = frontier_phi_29_54_ladder_1;
        _1843 = frontier_phi_29_54_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1750);
        _1839 = _1823.x * cbModelParam._m0[1u].z;
        _1841 = _1823.y * cbModelParam._m0[1u].z;
        _1843 = _1823.z * cbModelParam._m0[1u].z;
    }
    float _1856 = (((_844 * _796) + _845) * _811) * ((cbModelParam._m0[1u].w * (_1839 - _1741)) + _1741);
    float _1858 = (((_844 * _798) + _845) * _811) * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1860 = (((_844 * _799) + _845) * _811) * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1863 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1858, cbSceneParam._m0[89u].y, _1856 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1858, cbSceneParam._m0[90u].y, _1856 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1858, cbSceneParam._m0[91u].y, _1856 * cbSceneParam._m0[91u].x));
    float _1903 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1907 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1911 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1915 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1916 = _1903 / _1915;
    float _1917 = _1907 / _1915;
    float _1918 = _1911 / _1915;
    float _2065;
    float _2066;
    float _2067;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1945 = ((uint(_1918 > cbSceneParam._m0[59u].y) + uint(_1918 > cbSceneParam._m0[59u].x)) + uint(_1918 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1946 = _1945 + 43u;
        uint _1954 = _1945 + 44u;
        uint _1962 = _1945 + 45u;
        uint _1970 = _1945 + 46u;
        float _1981 = fma(_1915, cbSceneParam._m0[_1946].w, fma(_1911, cbSceneParam._m0[_1946].z, fma(_1907, cbSceneParam._m0[_1946].y, _1903 * cbSceneParam._m0[_1946].x)));
        float _1985 = fma(_1915, cbSceneParam._m0[_1954].w, fma(_1911, cbSceneParam._m0[_1954].z, fma(_1907, cbSceneParam._m0[_1954].y, _1903 * cbSceneParam._m0[_1954].x)));
        float _1993 = fma(_1915, cbSceneParam._m0[_1970].w, fma(_1911, cbSceneParam._m0[_1970].z, fma(_1907, cbSceneParam._m0[_1970].y, _1903 * cbSceneParam._m0[_1970].x)));
        float _1998 = cbSceneParam._m0[33u].z * _1993;
        float _2000 = cbSceneParam._m0[33u].w * _1993;
        float _2003 = fma(_1915, cbSceneParam._m0[_1962].w, fma(_1911, cbSceneParam._m0[_1962].z, fma(_1907, cbSceneParam._m0[_1962].y, _1903 * cbSceneParam._m0[_1962].x))) / _1993;
        float _2051 = (cbSceneParam._m0[33u].x - sqrt(((_1917 * _1917) + (_1916 * _1916)) + (_1918 * _1918))) * cbSceneParam._m0[33u].y;
        float _4427 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2058 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1998 + _1981) / _1993, (_2000 + _1985) / _1993), _2003), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2000 + _1981) / _1993, (_1985 - _1998) / _1993), _2003), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 - _1998) / _1993, (_1985 - _2000) / _1993), _2003), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 - _2000) / _1993, (_1998 + _1985) / _1993), _2003), 0.0)).x), vec4(0.25)));
        _2065 = 1.0 - (_2058 * cbSceneParam._m0[34u].x);
        _2066 = 1.0 - (_2058 * cbSceneParam._m0[34u].y);
        _2067 = 1.0 - (_2058 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2065 = 1.0;
        _2066 = 1.0;
        _2067 = 1.0;
    }
    float _2131;
    float _2133;
    float _2135;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2119 = fma(_1915, cbSceneParam._m0[63u].w, fma(_1911, cbSceneParam._m0[63u].z, fma(_1907, cbSceneParam._m0[63u].y, _1903 * cbSceneParam._m0[63u].x)));
        float _2120 = fma(_1915, cbSceneParam._m0[60u].w, fma(_1911, cbSceneParam._m0[60u].z, fma(_1907, cbSceneParam._m0[60u].y, _1903 * cbSceneParam._m0[60u].x))) / _2119;
        float _2121 = fma(_1915, cbSceneParam._m0[61u].w, fma(_1911, cbSceneParam._m0[61u].z, fma(_1907, cbSceneParam._m0[61u].y, _1903 * cbSceneParam._m0[61u].x))) / _2119;
        float frontier_phi_41_40_ladder;
        float frontier_phi_41_40_ladder_1;
        float frontier_phi_41_40_ladder_2;
        if ((((_2120 >= cbSceneParam._m0[64u].x) && (_2121 >= cbSceneParam._m0[64u].y)) && (_2120 <= cbSceneParam._m0[64u].z)) && (_2121 <= cbSceneParam._m0[64u].w))
        {
            float _2259 = fma(_1915, cbSceneParam._m0[62u].w, fma(_1911, cbSceneParam._m0[62u].z, fma(_1907, cbSceneParam._m0[62u].y, _1903 * cbSceneParam._m0[62u].x))) / _2119;
            float _2263 = isnan(cbSceneParam._m0[41u].w) ? _2259 : (isnan(_2259) ? cbSceneParam._m0[41u].w : max(_2259, cbSceneParam._m0[41u].w));
            float _2306 = (cbSceneParam._m0[33u].x - sqrt(((_1917 * _1917) + (_1916 * _1916)) + (_1918 * _1918))) * cbSceneParam._m0[33u].y;
            float _4443 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
            float _2313 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2120, cbSceneParam._m0[33u].w + _2121), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2120, _2121 - cbSceneParam._m0[33u].z), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2120 - cbSceneParam._m0[33u].z, _2121 - cbSceneParam._m0[33u].w), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2120 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2121), _2263), 0.0)).x), vec4(0.25)));
            float _2317 = 1.0 - (_2313 * cbSceneParam._m0[34u].x);
            float _2318 = 1.0 - (_2313 * cbSceneParam._m0[34u].y);
            float _2319 = 1.0 - (_2313 * cbSceneParam._m0[34u].z);
            frontier_phi_41_40_ladder = isnan(_2319) ? _2067 : (isnan(_2067) ? _2319 : min(_2067, _2319));
            frontier_phi_41_40_ladder_1 = isnan(_2318) ? _2066 : (isnan(_2066) ? _2318 : min(_2066, _2318));
            frontier_phi_41_40_ladder_2 = isnan(_2317) ? _2065 : (isnan(_2065) ? _2317 : min(_2065, _2317));
        }
        else
        {
            frontier_phi_41_40_ladder = _2067;
            frontier_phi_41_40_ladder_1 = _2066;
            frontier_phi_41_40_ladder_2 = _2065;
        }
        _2131 = frontier_phi_41_40_ladder_2;
        _2133 = frontier_phi_41_40_ladder_1;
        _2135 = frontier_phi_41_40_ladder;
    }
    else
    {
        _2131 = _2065;
        _2133 = _2066;
        _2135 = _2067;
    }
    uvec4 _2140 = floatBitsToUint(cbInstanceData._m0[_739 + 5u]);
    uint _2142 = _2140.x * 14u;
    uint _2143 = _2142 + 13u;
    float _2150 = _811 + (-1.0);
    float _2155 = (cbLight._m0[_2143].x * _2150) + 1.0;
    float _2156 = (cbLight._m0[_2143].y * _2150) + 1.0;
    float _2157 = (cbLight._m0[_2143].z * _2150) + 1.0;
    float _2158 = (cbLight._m0[_2143].w * _2150) + 1.0;
    uint _2159 = _2142 + 5u;
    float _2165 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2169 = _2142 + 4u;
    float _2178 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
    uint _2182 = _2142 | 1u;
    float _2193 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_581, _582, _583));
    float _2196 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_581, _582, _583));
    float _4479 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _4490 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2201 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2203 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2210 = ((cbLight._m0[_2159].x * _2165) * _2203) + (((cbLight._m0[_2169].x * _2131) * _2178) * _2201);
    float _2211 = ((_2165 * cbLight._m0[_2159].y) * _2203) + (((cbLight._m0[_2169].y * _2133) * _2178) * _2201);
    float _2212 = ((_2165 * cbLight._m0[_2159].z) * _2203) + (((cbLight._m0[_2169].z * _2135) * _2178) * _2201);
    uvec4 _2216 = floatBitsToUint(cbLight._m0[_2142 + 12u]);
    bool _2218 = _2216.x == 0u;
    float _2320;
    float _2322;
    float _2324;
    if (_2218)
    {
        _2320 = _2210;
        _2322 = _2211;
        _2324 = _2212;
    }
    else
    {
        uint _2328 = _2142 + 6u;
        float _2344 = (dot(vec3(cbLight._m0[_2142 + 2u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2345 = _2344 * _2344;
        float _4501 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2346 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2347 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2320 = (((cbLight._m0[_2328].x * 0.3183098733425140380859375) * _2346) * _2347) + _2210;
        _2322 = (((cbLight._m0[_2328].y * 0.3183098733425140380859375) * _2346) * _2347) + _2211;
        _2324 = (((cbLight._m0[_2328].z * 0.3183098733425140380859375) * _2346) * _2347) + _2212;
    }
    bool _2327 = _2216.y == 0u;
    float _2382;
    float _2384;
    float _2386;
    if (_2327)
    {
        _2382 = _2320;
        _2384 = _2322;
        _2386 = _2324;
    }
    else
    {
        uint _2555 = _2142 + 7u;
        float _2571 = (dot(vec3(cbLight._m0[_2142 + 3u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2572 = _2571 * _2571;
        float _4517 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2573 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2574 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2382 = (((cbLight._m0[_2555].x * 0.3183098733425140380859375) * _2573) * _2574) + _2320;
        _2384 = (((cbLight._m0[_2555].y * 0.3183098733425140380859375) * _2573) * _2574) + _2322;
        _2386 = (((cbLight._m0[_2555].z * 0.3183098733425140380859375) * _2573) * _2574) + _2324;
    }
    uint _2389 = _2142 + 8u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _726) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2142].x + _662;
    float _2405 = cbLight._m0[_2142].y + _663;
    float _2406 = cbLight._m0[_2142].z + _664;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2142].xyz));
    float _4533 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2418 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2419 = dot(vec3(_581, _582, _583), vec3(_2411, _2412, _2413));
    float _4555 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2423 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2411, _2412, _2413));
    float _4566 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2427 = _2403 * _2403;
    float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
    float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
    float _2440 = 0.959999978542327880859375 - _793;
    float _2442 = 0.959999978542327880859375 - _794;
    float _2443 = 0.959999978542327880859375 - _795;
    float _2450 = 1.0 - _2403;
    float _2461 = (0.5 / (((_2418 * ((_2417 * _2450) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2450) + _2403) * _2417))) * _2417;
    float _4577 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
    uint _2477 = _2142 + 9u;
    float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _726) * 0.949999988079071044921875);
    float _2489 = _2488 * _2488;
    float _2490 = cbLight._m0[_2182].x + _662;
    float _2491 = cbLight._m0[_2182].y + _663;
    float _2492 = cbLight._m0[_2182].z + _664;
    float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
    float _2497 = _2496 * _2490;
    float _2498 = _2496 * _2491;
    float _2499 = _2496 * _2492;
    float _2500 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2182].xyz));
    float _4588 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2504 = dot(vec3(_581, _582, _583), vec3(_2497, _2498, _2499));
    float _4599 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2508 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2497, _2498, _2499));
    float _4610 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2512 = _2489 * _2489;
    float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
    float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
    float _2530 = 1.0 - _2489;
    float _2540 = (0.5 / (((_2418 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2530) + _2489) * _2503))) * _2503;
    float _4621 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2542 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
    float _2552 = (((((_2523 * _2440) + _796) * cbLight._m0[_2477].x) * _2542) * _2165) + ((((cbLight._m0[_2389].x * _2131) * ((_2439 * _2440) + _796)) * _2463) * _2178);
    float _2553 = (((((_2523 * _2442) + _798) * cbLight._m0[_2477].y) * _2542) * _2165) + ((((cbLight._m0[_2389].y * _2133) * ((_2439 * _2442) + _798)) * _2463) * _2178);
    float _2554 = (((((_2523 * _2443) + _799) * cbLight._m0[_2477].z) * _2542) * _2165) + ((((cbLight._m0[_2389].z * _2135) * ((_2439 * _2443) + _799)) * _2463) * _2178);
    float _2610;
    float _2612;
    float _2614;
    if (_2218)
    {
        _2610 = _2552;
        _2612 = _2553;
        _2614 = _2554;
    }
    else
    {
        uint _2616 = _2142 + 2u;
        uint _2620 = _2142 + 10u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _726) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _662;
        float _2637 = cbLight._m0[_2616].y + _663;
        float _2638 = cbLight._m0[_2616].z + _664;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2616].xyz));
        float _4632 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2650 = dot(vec3(_581, _582, _583), vec3(_2643, _2644, _2645));
        float _4643 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4654 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
        float _2676 = 1.0 - _2635;
        float _2686 = (0.5 / (((_2418 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2676) + _2635) * _2649))) * _2649;
        float _4665 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2610 = (((((_2669 * _2440) + _796) * cbLight._m0[_2620].x) * _2688) * _2689) + _2552;
        _2612 = (((((_2669 * _2442) + _798) * cbLight._m0[_2620].y) * _2688) * _2689) + _2553;
        _2614 = (((((_2669 * _2443) + _799) * cbLight._m0[_2620].z) * _2688) * _2689) + _2554;
    }
    float _2720;
    float _2722;
    float _2724;
    if (_2327)
    {
        _2720 = _2610;
        _2722 = _2612;
        _2724 = _2614;
    }
    else
    {
        uint _2731 = _2142 + 3u;
        uint _2735 = _2142 + 11u;
        float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2731].w)) * _726) * 0.949999988079071044921875);
        float _2750 = _2749 * _2749;
        float _2751 = cbLight._m0[_2731].x + _662;
        float _2752 = cbLight._m0[_2731].y + _663;
        float _2753 = cbLight._m0[_2731].z + _664;
        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
        float _2758 = _2757 * _2751;
        float _2759 = _2757 * _2752;
        float _2760 = _2757 * _2753;
        float _2761 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2731].xyz));
        float _4681 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2765 = dot(vec3(_581, _582, _583), vec3(_2758, _2759, _2760));
        float _4692 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2769 = dot(vec3(cbLight._m0[_2731].xyz), vec3(_2758, _2759, _2760));
        float _4703 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2773 = _2750 * _2750;
        float _2777 = ((_2768 * _2768) * (_2773 + (-1.0))) + 1.0;
        float _2784 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2791 = 1.0 - _2750;
        float _2801 = (0.5 / (((_2418 * ((_2764 * _2791) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2791) + _2750) * _2764))) * _2764;
        float _4714 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2803 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2773 / ((_2777 * _2777) * 3.141590118408203125));
        float _2804 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2720 = (((((_2784 * _2440) + _796) * cbLight._m0[_2735].x) * _2803) * _2804) + _2610;
        _2722 = (((((_2784 * _2442) + _798) * cbLight._m0[_2735].y) * _2803) * _2804) + _2612;
        _2724 = (((((_2784 * _2443) + _799) * cbLight._m0[_2735].z) * _2803) * _2804) + _2614;
    }
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_2140.y == 0u)
    {
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.x;
        uint _2837 = uint((float(_2825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _685) / _2826))) + floor(float(uint(cbSceneParam._m0[85u].x * _684) / _2826)));
        float _2847 = (log2(_1918 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2848 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        uint _2851 = uint(isnan(14.0) ? _2848 : (isnan(_2848) ? 14.0 : min(_2848, 14.0)));
        uvec4 _2856 = texelFetch(g_lightClusterGridBuffer, int(((_2851 << 2u) + (_2837 << 6u)) >> 2u));
        uint _2857 = _2856.x;
        uint _2858 = _2825.z;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        if (((((1u << ((_2858 >> 4u) & 15u)) + 4294967295u) & _2857) == 0u) || ((_2858 & 240u) == 0u))
        {
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
        }
        else
        {
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            uint _3112 = 0u;
            uint _3121;
            bool _3122;
            for (;;)
            {
                _3121 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3112 << 2u)) >> 2u)).x;
                _3122 = _3121 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_3122)
                {
                    frontier_phi_75_pred = _3111;
                    frontier_phi_75_pred_1 = _3110;
                    frontier_phi_75_pred_2 = _3109;
                    frontier_phi_75_pred_3 = _3108;
                    frontier_phi_75_pred_4 = _3106;
                    frontier_phi_75_pred_5 = _3107;
                }
                else
                {
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    uint _3257;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3121;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    for (;;)
                    {
                        uint _3261 = uint(findLSB(_3257)) + (_3112 << 5u);
                        uint _3258 = (_3257 + 4294967295u) & _3257;
                        uint _3263 = _3261 * 48u;
                        vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3283 = (_3261 * 48u) + 4u;
                        vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 3u)).x));
                        uint _3302 = (_3261 * 48u) + 8u;
                        vec3 _3313 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x));
                        float _3317 = _3277.x - _1916;
                        float _3318 = _3277.y - _1917;
                        float _3319 = _3277.z - _1918;
                        float _3320 = dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319));
                        float _3323 = inversesqrt(_3320);
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3327 = dot(vec3(_707, _710, _713), vec3(_3324, _3325, _3326));
                        float _3332 = 1.0 - (_3320 * _3277.w);
                        float _4740 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3334 = sqrt(_3320) * _3296.w;
                        float _3337 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3327) + _3338;
                        float _3344 = _3334 * _3334;
                        float _3348 = ((isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))) * _3333) / ((_3344 * 0.699999988079071044921875) + 1.0);
                        float _3352 = (-0.0) - _1916;
                        float _3353 = (-0.0) - _1917;
                        float _3354 = (-0.0) - _1918;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3368 = exp2(log2(1.0 / ((_3344 * 3.5) + 5.0)) * 0.25);
                        float _3369 = 1.0 - _827;
                        float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                        float _3377 = _3376 * _3376;
                        float _3378 = _3377 * _3377;
                        float _3379 = _3359 + _3324;
                        float _3380 = _3360 + _3325;
                        float _3381 = _3361 + _3326;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3389 = dot(vec3(_707, _710, _713), vec3(_3359, _3360, _3361));
                        float _4756 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3393 = dot(vec3(_707, _710, _713), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                        float _4767 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                        float _3401 = _3337 * _3377;
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3327) + _3402;
                        float _4778 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3407 = 1.0 - _3377;
                        float _3417 = (0.5 / (((_3406 * ((_3392 * _3407) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3377) * _3392))) * _3406;
                        float _4789 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3428 = (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3400 * _3400) * ((_3344 * 2.1991131305694580078125) + 3.141590118408203125))) * _3333;
                        _3181 = (_3348 * _3296.x) + _3254;
                        _3182 = (_3348 * _3296.y) + _3255;
                        _3183 = (_3348 * _3296.z) + _3256;
                        _3178 = (_3428 * _3313.x) + _3251;
                        _3179 = (_3428 * _3313.y) + _3252;
                        _3180 = (_3428 * _3313.z) + _3253;
                        if (_3258 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3258;
                        }
                    }
                    frontier_phi_75_pred = _3183;
                    frontier_phi_75_pred_1 = _3182;
                    frontier_phi_75_pred_2 = _3181;
                    frontier_phi_75_pred_3 = _3180;
                    frontier_phi_75_pred_4 = _3178;
                    frontier_phi_75_pred_5 = _3179;
                }
                _2965 = frontier_phi_75_pred;
                _2963 = frontier_phi_75_pred_1;
                _2961 = frontier_phi_75_pred_2;
                _2959 = frontier_phi_75_pred_3;
                _2955 = frontier_phi_75_pred_4;
                _2957 = frontier_phi_75_pred_5;
                uint _3113 = _3112 + 1u;
                if (_3113 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3106 = _2955;
                    _3107 = _2957;
                    _3108 = _2959;
                    _3109 = _2961;
                    _3110 = _2963;
                    _3111 = _2965;
                    _3112 = _3113;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
        }
        uvec4 _2968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2969 = _2968.z;
        uint _2971 = (_2969 >> 8u) & 15u;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        if (((4294967295u << _2971) & _2857) == 0u)
        {
            _3074 = _2954;
            _3076 = _2956;
            _3078 = _2958;
            _3080 = _2960;
            _3082 = _2962;
            _3084 = _2964;
        }
        else
        {
            float _3099 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
            float _3100 = _3099 * _1916;
            float _3101 = _3099 * _1917;
            float _3102 = _3099 * _1918;
            float frontier_phi_67_68_ladder;
            float frontier_phi_67_68_ladder_1;
            float frontier_phi_67_68_ladder_2;
            float frontier_phi_67_68_ladder_3;
            float frontier_phi_67_68_ladder_4;
            float frontier_phi_67_68_ladder_5;
            if (_2971 < ((_2969 >> 12u) & 15u))
            {
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3234 = _2954;
                float _3235 = _2956;
                float _3236 = _2958;
                float _3237 = _2960;
                float _3238 = _2962;
                float _3239 = _2964;
                uint _3240 = _2971;
                uint _3249;
                bool _3250;
                for (;;)
                {
                    _3249 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3240 << 2u)) >> 2u)).x;
                    _3250 = _3249 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_3250)
                    {
                        frontier_phi_86_pred = _3236;
                        frontier_phi_86_pred_1 = _3235;
                        frontier_phi_86_pred_2 = _3234;
                        frontier_phi_86_pred_3 = _3239;
                        frontier_phi_86_pred_4 = _3238;
                        frontier_phi_86_pred_5 = _3237;
                    }
                    else
                    {
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3455 = _3234;
                        float _3456 = _3235;
                        float _3457 = _3236;
                        float _3458 = _3237;
                        float _3459 = _3238;
                        float _3460 = _3239;
                        uint _3461 = _3249;
                        uint _3462;
                        vec4 _3487;
                        float _3488;
                        vec4 _3503;
                        vec3 _3515;
                        vec4 _3530;
                        vec4 _3545;
                        float _3591;
                        bool _3592;
                        for (;;)
                        {
                            uint _3472 = ((_3240 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3461));
                            _3462 = (_3461 + 4294967295u) & _3461;
                            uint _3474 = _3472 * 40u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3488 = _3487.w;
                            uint _3490 = (_3472 * 40u) + 4u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3472 * 40u) + 8u;
                            _3515 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x));
                            uint _3517 = (_3472 * 40u) + 16u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3472 * 40u) + 20u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3472 * 40u) + 24u;
                            vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3566 = (_3472 * 40u) + 28u;
                            vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            _3591 = fma(_1918, _3579.z, fma(_1917, _3579.y, _3579.x * _1916)) + _3579.w;
                            _3592 = !((fma(_1918, _3560.z, fma(_1917, _3560.y, _3560.x * _1916)) + _3560.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3592)
                            {
                                float _3619 = _3487.x - _1916;
                                float _3620 = _3487.y - _1917;
                                float _3621 = _3487.z - _1918;
                                float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                                float _3625 = inversesqrt(_3622);
                                float _3626 = _3625 * _3619;
                                float _3627 = _3625 * _3620;
                                float _3628 = _3625 * _3621;
                                float _3632 = 1.0 - (_3622 / (_3488 * _3488));
                                float _4800 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3637 = sqrt(_3622) * _3503.w;
                                float _3639 = 1.39999997615814208984375 / (_3637 + 1.39999997615814208984375);
                                float _3640 = _3639 * _3639;
                                float _3643 = ((1.0 - _3640) * dot(vec3(_3626, _3627, _3628), vec3(_707, _710, _713))) + _3640;
                                float _3646 = _3637 * _3637;
                                float _3650 = (fma(_1918, _3530.z, fma(_1917, _3530.y, _3530.x * _1916)) + _3530.w) / _3591;
                                float _3651 = (fma(_1918, _3545.z, fma(_1917, _3545.y, _3545.x * _1916)) + _3545.w) / _3591;
                                float _3655 = 1.0 - dot(vec2(_3650, _3651), vec2(_3650, _3651));
                                float _4816 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3657 = _3656 * (((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3633) / ((_3646 * 0.699999988079071044921875) + 1.0));
                                float _3669 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                                float _3670 = 1.0 - _827;
                                float _3677 = sqrt(1.0 - ((1.0 - (_3670 * _3670)) * (1.0 - (_3669 * _3669))));
                                float _3678 = _3677 * _3677;
                                float _3679 = _3678 * _3678;
                                float _3680 = _3626 - _3100;
                                float _3681 = _3627 - _3101;
                                float _3682 = _3628 - _3102;
                                float _3686 = inversesqrt(dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682)));
                                float _3690 = dot(vec3(_707, _710, _713), vec3((-0.0) - _3100, (-0.0) - _3101, (-0.0) - _3102));
                                float _4827 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3694 = dot(vec3(_707, _710, _713), vec3(_3686 * _3680, _3686 * _3681, _3686 * _3682));
                                float _4838 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3701 = ((_3697 * _3697) * (_3679 + (-1.0))) + 1.0;
                                float _3702 = _3639 * _3678;
                                float _3703 = _3702 * _3702;
                                float _3709 = ((1.0 - _3703) * dot(vec3(_707, _710, _713), vec3(_3626, _3627, _3628))) + _3703;
                                float _4849 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3710 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3711 = 1.0 - _3678;
                                float _3721 = (0.5 / (((_3710 * ((_3693 * _3711) + _3678)) + 9.9999999392252902907785028219223e-09) + (((_3710 * _3711) + _3678) * _3693))) * _3710;
                                float _4860 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3731 = (_3656 * _3633) * (((_3679 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3701 * _3701) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3731 * _3515.z;
                                frontier_phi_92_pred_1 = _3731 * _3515.y;
                                frontier_phi_92_pred_2 = _3731 * _3515.x;
                                frontier_phi_92_pred_3 = _3657 * _3503.z;
                                frontier_phi_92_pred_4 = _3657 * _3503.y;
                                frontier_phi_92_pred_5 = _3657 * _3503.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3737 = frontier_phi_92_pred;
                            _3736 = frontier_phi_92_pred_1;
                            _3735 = frontier_phi_92_pred_2;
                            _3740 = frontier_phi_92_pred_3;
                            _3739 = frontier_phi_92_pred_4;
                            _3738 = frontier_phi_92_pred_5;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            if (_3462 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3462;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3444;
                        frontier_phi_86_pred_1 = _3443;
                        frontier_phi_86_pred_2 = _3442;
                        frontier_phi_86_pred_3 = _3447;
                        frontier_phi_86_pred_4 = _3446;
                        frontier_phi_86_pred_5 = _3445;
                    }
                    _3079 = frontier_phi_86_pred;
                    _3077 = frontier_phi_86_pred_1;
                    _3075 = frontier_phi_86_pred_2;
                    _3085 = frontier_phi_86_pred_3;
                    _3083 = frontier_phi_86_pred_4;
                    _3081 = frontier_phi_86_pred_5;
                    uint _3241 = _3240 + 1u;
                    if (_3241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3234 = _3075;
                        _3235 = _3077;
                        _3236 = _3079;
                        _3237 = _3081;
                        _3238 = _3083;
                        _3239 = _3085;
                        _3240 = _3241;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_67_68_ladder = _3085;
                frontier_phi_67_68_ladder_1 = _3081;
                frontier_phi_67_68_ladder_2 = _3079;
                frontier_phi_67_68_ladder_3 = _3077;
                frontier_phi_67_68_ladder_4 = _3083;
                frontier_phi_67_68_ladder_5 = _3075;
            }
            else
            {
                frontier_phi_67_68_ladder = _2964;
                frontier_phi_67_68_ladder_1 = _2960;
                frontier_phi_67_68_ladder_2 = _2958;
                frontier_phi_67_68_ladder_3 = _2956;
                frontier_phi_67_68_ladder_4 = _2962;
                frontier_phi_67_68_ladder_5 = _2954;
            }
            _3074 = frontier_phi_67_68_ladder_5;
            _3076 = frontier_phi_67_68_ladder_3;
            _3078 = frontier_phi_67_68_ladder_2;
            _3080 = frontier_phi_67_68_ladder_1;
            _3082 = frontier_phi_67_68_ladder_4;
            _3084 = frontier_phi_67_68_ladder;
        }
        float _3089 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2869 = (_3089 * _3080) + _2382;
        _2871 = (_3089 * _3082) + _2384;
        _2873 = (_3089 * _3084) + _2386;
        _2875 = ((_3074 * _796) * _3089) + _2720;
        _2877 = ((_3076 * _798) * _3089) + _2722;
        _2879 = ((_3078 * _799) * _3089) + _2724;
    }
    else
    {
        _2869 = _2382;
        _2871 = _2384;
        _2873 = _2386;
        _2875 = _2720;
        _2877 = _2722;
        _2879 = _2724;
    }
    vec4 _2885 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4876 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4887 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4898 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2909 = (((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2869 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _811))) + ((_2875 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1650)) * cbPerFrame._m0[3u].x)) + (_2885.x * cbMtdParam._m0[3u].x);
    float _2911 = ((_2885.y * cbMtdParam._m0[3u].x) + ((_2877 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1650)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2871 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _811)));
    float _2913 = ((_2885.z * cbMtdParam._m0[3u].x) + ((_2879 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1650)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2873 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _811)));
    float _2914 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
    float _2915 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2916 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
    uint _2917 = _739 + 6u;
    float _2925 = _684 / cbSceneParam._m0[86u].x;
    float _2926 = _685 / cbSceneParam._m0[86u].y;
    vec4 _2940 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2925, _2926, (log2((isnan(cbSceneParam._m0[77u].w) ? _604 : (isnan(_604) ? cbSceneParam._m0[77u].w : min(_604, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2942 = _2940.x;
    float _2943 = _2940.y;
    float _2944 = _2940.z;
    float _2945 = _2940.w;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_604 > cbSceneParam._m0[78u].w)
    {
        float _2979 = isnan(_604) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _604 : min(cbSceneParam._m0[80u].w, _604));
        float _2980 = _2979 / _604;
        float _2991 = _2980 * _655;
        float _2992 = _656 * _2980;
        float _2993 = (-0.0) - _2992;
        float _2994 = _2980 * _657;
        float _2996 = (cbSceneParam._m0[77u].w * _2993) / _2979;
        float _2997 = _2996 + cbSceneParam._m0[79u].w;
        float _2998 = cbSceneParam._m0[79u].w - _2992;
        float _3004 = sqrt(((_2991 * _2991) + (_2992 * _2992)) + (_2994 * _2994));
        float _3007 = (1.0 - (cbSceneParam._m0[77u].w / _2979)) * _3004;
        float _3012 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3014 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3191;
        if (abs((_2993 - _2996) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3191 = ((((_2997 > 0.0) ? exp2(_3012 * _2997) : (2.0 - exp2(_3014 * _2997))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3007;
        }
        else
        {
            float _3135 = 1.0 / cbSceneParam._m0[80u].x;
            float _3136 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : max(_2997, _2998));
            float _3137 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : min(_2997, _2998));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            float _3147 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : min(_3137, 0.0));
            _3191 = ((abs(_3004 / _2993) * cbSceneParam._m0[80u].y) * ((((_3146 - _3147) * 2.0) - ((exp2(_3012 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0)))) - exp2(_3012 * (isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))))) * _3135)) - ((exp2(_3014 * _3146) - exp2(_3014 * _3147)) * _3135))) + (_3007 * cbSceneParam._m0[80u].z);
        }
        vec4 _3193 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2925, _2926, 1.0), 0.0);
        float _3202 = exp2((_3191 * (-1.44269502162933349609375)) * (1.0 - _3193.w));
        float _3203 = log2(_3202);
        float _3219 = log2(_2945);
        _3016 = (exp2(_3219 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].x)) * _3193.x) / cbSceneParam._m0[78u].x)) + _2942;
        _3018 = (exp2(_3219 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].y)) * _3193.y) / cbSceneParam._m0[78u].y)) + _2943;
        _3020 = (exp2(_3219 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3203 * cbSceneParam._m0[78u].z)) * _3193.z) / cbSceneParam._m0[78u].z)) + _2944;
        _3022 = _3202 * _2945;
    }
    else
    {
        _3016 = _2942;
        _3018 = _2943;
        _3020 = _2944;
        _3022 = _2945;
    }
    bool _3229;
    vec4 _3032;
    vec4 _3054;
    float _3056;
    float _3060;
    float _3061;
    float _3062;
    float _3063;
    bool _3073;
    for (;;)
    {
        _3032 = cbMatDynParam._m0[0u];
        float _3034 = roundEven(_3032.y);
        bool _3035 = _3034 == 3.0;
        float _3036 = log2(_3022);
        float _3043 = exp2(_3036 * cbSceneParam._m0[78u].x) * _2914;
        float _3044 = exp2(_3036 * cbSceneParam._m0[78u].y) * _2915;
        float _3045 = exp2(_3036 * cbSceneParam._m0[78u].z) * _2916;
        float _3052 = _671 + (-0.5);
        _3054 = cbMtdParam._m0[1u];
        _3056 = _3054.y * _3052;
        float _3059 = (_3034 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3060 = _3059 * (_3035 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3016)));
        _3061 = _3059 * (_3035 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3018)));
        _3062 = _3059 * (_3035 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3020)));
        _3063 = _3052 * 0.999000012874603271484375;
        _3073 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3073)
        {
            if ((cbInstanceData._m0[_739 + 7u].x + _3063) < 0.5)
            {
                _3229 = true;
                break;
            }
        }
        uint _3170 = _740 + uint(_3032.w);
        if ((cbInstanceData._m0[_3170].w < 1.0) && ((cbInstanceData._m0[_3170].w + _3063) < 0.5))
        {
            _3229 = true;
            break;
        }
        if ((_3056 + 1.0) < _3054.x)
        {
            _3229 = true;
            break;
        }
        _3229 = false;
        break;
    }
    float _3433;
    if (_3229)
    {
        discard_state = true;
        _3433 = 0.0;
    }
    else
    {
        _3433 = cbInstanceData._m0[_2917].w;
    }
    SV_Target.x = _3060;
    SV_Target.y = _3061;
    SV_Target.z = _3062;
    SV_Target.w = _3433;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2917].w;
    discard_exit();
}


