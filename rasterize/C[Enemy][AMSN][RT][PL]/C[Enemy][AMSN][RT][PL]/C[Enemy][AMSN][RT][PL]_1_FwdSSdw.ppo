#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1151;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _263 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _265 = log2(0.0);
    float _189[6];
    float _190[6];
    float _191[6];
    _189[0u] = cbMtdParam._m0[14u].x;
    _190[0u] = cbMtdParam._m0[14u].y;
    _191[0u] = cbMtdParam._m0[14u].z;
    _189[1u] = cbMtdParam._m0[15u].x;
    _190[1u] = cbMtdParam._m0[15u].y;
    _191[1u] = cbMtdParam._m0[15u].z;
    _189[2u] = cbMtdParam._m0[16u].x;
    _190[2u] = cbMtdParam._m0[16u].y;
    _191[2u] = cbMtdParam._m0[16u].z;
    _189[3u] = cbMtdParam._m0[11u].x;
    _190[3u] = cbMtdParam._m0[11u].y;
    _191[3u] = cbMtdParam._m0[11u].z;
    _189[4u] = cbMtdParam._m0[12u].x;
    _190[4u] = cbMtdParam._m0[12u].y;
    _191[4u] = cbMtdParam._m0[12u].z;
    _189[5u] = cbMtdParam._m0[13u].x;
    _190[5u] = cbMtdParam._m0[13u].y;
    _191[5u] = cbMtdParam._m0[13u].z;
    vec4 _337 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _341 = _337.y;
    float _344 = (_337.x + (-0.02500000037252902984619140625)) * 8.0;
    float _346 = roundEven(_344);
    float _347 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    uint _350 = uint(int(isnan(5.0) ? _347 : (isnan(_347) ? 5.0 : min(_347, 5.0))));
    float _367 = roundEven(5.0 - _344);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(4.0) ? _368 : (isnan(_368) ? 4.0 : min(_368, 4.0));
    float _375;
    float _377;
    if (exp2(_265 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _375 = cbMtdParam._m0[26u].x;
        _377 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _375 = cbMtdParam._m0[22u].x;
        _377 = cbMtdParam._m0[22u].y;
    }
    float _379 = _375 * TEXCOORD.x;
    float _380 = _377 * TEXCOORD.y;
    float _391 = floor(_369);
    vec4 _394 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _379) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _380) + cbTextureTilingScale._m0[6u].w, _391));
    vec4 _416 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _263) + cbTextureTilingScale._m0[0u].w));
    float _424 = ((((((_189[_350] - cbMtdParam._m0[18u].x) * _341) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _394.x) * cbMtdParam._m0[9u].x) * _416.x;
    float _428 = ((((((_190[_350] - cbMtdParam._m0[18u].y) * _341) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _394.y) * cbMtdParam._m0[9u].y) * _416.y;
    float _432 = ((((((_191[_350] - cbMtdParam._m0[18u].z) * _341) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _394.z) * cbMtdParam._m0[9u].z) * _416.z;
    vec4 _444 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _263) + cbTextureTilingScale._m0[1u].w));
    float _448 = _444.z;
    float _184[5];
    float _185[5];
    _184[0u] = cbMtdParam._m0[22u].z;
    _185[0u] = cbMtdParam._m0[22u].w;
    _184[1u] = cbMtdParam._m0[23u].z;
    _185[1u] = cbMtdParam._m0[23u].w;
    _184[2u] = cbMtdParam._m0[24u].x;
    _185[2u] = cbMtdParam._m0[24u].y;
    _184[3u] = cbMtdParam._m0[24u].z;
    _185[3u] = cbMtdParam._m0[24u].w;
    _184[4u] = cbMtdParam._m0[23u].x;
    _185[4u] = cbMtdParam._m0[23u].y;
    float _492 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    uint _494 = uint(int(isnan(4.0) ? _492 : (isnan(_492) ? 4.0 : min(_492, 4.0))));
    float _499 = _185[_494] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _379) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _380) + cbTextureTilingScale._m0[8u].w, _391)).x;
    vec4 _518 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _379) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _380) + cbTextureTilingScale._m0[7u].w, _391));
    float _525 = (_518.x * 2.0) + (-1.0);
    float _526 = (_518.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3551 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _542 = (cbMtdParam._m0[20u].x * (((_448 * 2.0) * (_518.z + _184[_494])) - _448)) + _448;
    float _546 = (cbMtdParam._m0[20u].y * ((_444.x * 2.0) + (-1.0))) + _525;
    float _547 = (cbMtdParam._m0[20u].y * ((_444.y * 2.0) + (-1.0))) + _526;
    float _550 = fma(_533, _241, fma(_547, _233 * TANGENT.x, (_219 * _211) * _546));
    float _553 = fma(_533, _242, fma(_547, _233 * TANGENT.y, (_219 * _212) * _546));
    float _556 = fma(_533, _243, fma(_547, _233 * TANGENT.z, (_219 * _213) * _546));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _3562 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _564 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3584 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3595 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3606 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _568 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _584 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _635 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _625);
    float _636 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _625);
    float _637 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _625);
    float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
    float _642 = _635 * _641;
    float _643 = _636 * _641;
    float _644 = _637 * _641;
    float _650 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _651 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _653 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _655 = _653.w;
    float _673 = fma(_563, cbSceneParam._m0[5u].z, fma(_562, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _561));
    float _676 = fma(_563, cbSceneParam._m0[6u].z, fma(_562, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _561));
    float _679 = fma(_563, cbSceneParam._m0[7u].z, fma(_562, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _561));
    vec4 _681 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _692 = (((_681.y - _564) + (_681.w * _564)) * cbMtdParam._m0[3u].x) + _564;
    uint _705 = uint(roundEven(NORMAL.w)) * 13u;
    uint _707 = (_705 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _713 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_707].x;
    float _714 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_707].y;
    float _715 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_707].z;
    float _3617 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    vec4 _719 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _724 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _735 = (((_724.x - _568) + (_724.w * _568)) * cbMtdParam._m0[3u].x) + _568;
    float _748 = (cbMtdParam._m0[3u].x * (((_716 * _655) - _716) + _719.x)) + _716;
    float _749 = (cbMtdParam._m0[3u].x * (((_717 * _655) - _717) + _719.y)) + _717;
    float _750 = (cbMtdParam._m0[3u].x * (((_718 * _655) - _718) + _719.z)) + _718;
    float _751 = 1.0 - _735;
    float _752 = _751 * _748;
    float _753 = _751 * _749;
    float _754 = _751 * _750;
    float _759 = (_748 + (-0.039999999105930328369140625)) * _735;
    float _760 = (_749 + (-0.039999999105930328369140625)) * _735;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _735;
    float _762 = _759 + 0.039999999105930328369140625;
    float _764 = _760 + 0.039999999105930328369140625;
    float _765 = _761 + 0.039999999105930328369140625;
    vec4 _774 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _650, cbSceneParam._m0[86u].y * _651));
    float _777 = _774.x * TEXCOORD_4;
    float _778 = dot(vec3(_561, _562, _563), vec3(_642, _643, _644));
    float _781 = _778 * 2.0;
    float _785 = (_781 * _561) - _642;
    float _786 = (_781 * _562) - _643;
    float _787 = (_781 * _563) - _644;
    float _791 = abs(dot(vec3(_642, _643, _644), vec3(_561, _562, _563)));
    float _3650 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _793 = sqrt(_692);
    float _804 = exp2((_793 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_793 * 3.0));
    float _810 = (1.0 - _804) * ((_793 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _811 = _804 * _793;
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1150;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _875 = fma(_847, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839));
        float _879 = fma(_847, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839));
        float _883 = fma(_847, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839));
        float _908 = _839 + _561;
        float _909 = _843 + _562;
        float _910 = _847 + _563;
        float _920 = fma(_910, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908)) - _875;
        float _921 = fma(_910, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908)) - _879;
        float _922 = fma(_910, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908)) - _883;
        float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
        float _939 = ((_926 * _920) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_875 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_926 * _921) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_879 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_926 * _922) / cbModelParam._m0[34u].z) + ((((((_883 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        float _978 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_944.x + (-0.5));
        float _980 = _978 * (_944.y + (-0.5));
        float _981 = _978 * (_944.z + (-0.5));
        float _988 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_951.x + (-0.5));
        float _990 = _988 * (_951.y + (-0.5));
        float _991 = _988 * (_951.z + (-0.5));
        float _998 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_958.x + (-0.5));
        float _1000 = _998 * (_958.y + (-0.5));
        float _1001 = _998 * (_958.z + (-0.5));
        float _1008 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_965.x + (-0.5));
        float _1010 = _1008 * (_965.y + (-0.5));
        float _1011 = _1008 * (_965.z + (-0.5));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = _979 * 0.5;
        float _1016 = _989 * 0.5;
        float _1017 = _999 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1032 = (dot(vec3(_561, _562, _563), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1042 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3698 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1044 + 1.0))) + _1049) * _1012;
        float _1059 = _980 * 0.5;
        float _1060 = _990 * 0.5;
        float _1061 = _1000 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_561, _562, _563), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3731 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1086 + 1.0))) + _1091) * _1013;
        float _1101 = _981 * 0.5;
        float _1102 = _991 * 0.5;
        float _1103 = _1001 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_561, _562, _563), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3764 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1128 + 1.0))) + _1133) * _1014;
        _1150 = _981;
        _1152 = _980;
        _1153 = _979;
        _1154 = _991;
        _1155 = _990;
        _1156 = _989;
        _1157 = _1001;
        _1158 = _1000;
        _1159 = _999;
        _1160 = _1014;
        _1161 = _1013;
        _1162 = _1012;
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
    }
    else
    {
        _1150 = _1151;
        _1152 = _1151;
        _1153 = _1151;
        _1154 = _1151;
        _1155 = _1151;
        _1156 = _1151;
        _1157 = _1151;
        _1158 = _1151;
        _1159 = _1151;
        _1160 = _1151;
        _1161 = _1151;
        _1162 = _1151;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1191 = fma(_847, cbModelParam._m0[30u].z, fma(_843, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _839));
        float _1195 = fma(_847, cbModelParam._m0[31u].z, fma(_843, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _839));
        float _1199 = fma(_847, cbModelParam._m0[32u].z, fma(_843, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _839));
        float _1222 = _839 + _561;
        float _1223 = _843 + _562;
        float _1224 = _847 + _563;
        float _1234 = fma(_1224, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222)) - _1191;
        float _1235 = fma(_1224, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222)) - _1195;
        float _1236 = fma(_1224, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222)) - _1199;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1191 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1195 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[35u].z) + ((((((_1199 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1290 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1257.x + (-0.5));
        float _1292 = _1290 * (_1257.y + (-0.5));
        float _1293 = _1290 * (_1257.z + (-0.5));
        float _1300 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1264.x + (-0.5));
        float _1302 = _1300 * (_1264.y + (-0.5));
        float _1303 = _1300 * (_1264.z + (-0.5));
        float _1310 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1271.x + (-0.5));
        float _1312 = _1310 * (_1271.y + (-0.5));
        float _1313 = _1310 * (_1271.z + (-0.5));
        float _1320 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1278.x + (-0.5));
        float _1322 = _1320 * (_1278.y + (-0.5));
        float _1323 = _1320 * (_1278.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_561, _562, _563), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3827 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1354 + 1.0))) + _1359) * _1324;
        float _1369 = _1292 * 0.5;
        float _1370 = _1302 * 0.5;
        float _1371 = _1312 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_561, _562, _563), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3860 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1396 + 1.0))) + _1401) * _1325;
        float _1411 = _1293 * 0.5;
        float _1412 = _1303 * 0.5;
        float _1413 = _1313 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_561, _562, _563), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3893 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1438 + 1.0))) + _1443) * _1326;
        _1460 = _1293;
        _1461 = _1292;
        _1462 = _1291;
        _1463 = _1303;
        _1464 = _1302;
        _1465 = _1301;
        _1466 = _1313;
        _1467 = _1312;
        _1468 = _1311;
        _1469 = _1326;
        _1470 = _1325;
        _1471 = _1324;
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1151;
        _1461 = _1151;
        _1462 = _1151;
        _1463 = _1151;
        _1464 = _1151;
        _1465 = _1151;
        _1466 = _1151;
        _1467 = _1151;
        _1468 = _1151;
        _1469 = _1151;
        _1470 = _1151;
        _1471 = _1151;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1163)) + _1163;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1164)) + _1164;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1165)) + _1165;
    float _1507 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1484));
    float _1528 = _785 * 0.5;
    float _1529 = _786 * 0.5;
    float _1530 = _787 * 0.5;
    float _1531 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1534 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1537 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1571;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1544 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1150, _1154, _1157, _1160));
        float _1548 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1552 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1559 = dot(vec4(cbModelParam._m0[39u]), vec4(_1528, _1529, _1530, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1582;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1573 = dot(vec4(cbModelParam._m0[40u]), vec4(_1528, _1529, _1530, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1586 = (_1582 * cbModelParam._m0[1u].x) + (_1571 * (1.0 - cbModelParam._m0[1u].x));
    float _1596 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _692);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1596 : min(cbModelParam._m0[25u].z, _1596));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1644 = fma(_847, cbModelParam._m0[13u].z, fma(_843, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839)) + cbModelParam._m0[13u].w;
        float _1648 = fma(_847, cbModelParam._m0[14u].z, fma(_843, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839)) + cbModelParam._m0[14u].w;
        float _1652 = fma(_847, cbModelParam._m0[15u].z, fma(_843, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839)) + cbModelParam._m0[15u].w;
        float _1655 = fma(_787, cbModelParam._m0[13u].z, fma(_786, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785));
        float _1658 = fma(_787, cbModelParam._m0[14u].z, fma(_786, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785));
        float _1661 = fma(_787, cbModelParam._m0[15u].z, fma(_786, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785));
        float _1689;
        if (_1655 > 0.0)
        {
            _1689 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1689 = frontier_phi_18_16_ladder;
        }
        float _1912;
        if (_1658 > 0.0)
        {
            _1912 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1912 = frontier_phi_27_23_ladder;
        }
        float _2169;
        if (_1661 > 0.0)
        {
            _2169 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2169 = frontier_phi_39_34_ladder;
        }
        float _2171 = isnan(_1912) ? _1689 : (isnan(_1689) ? _1912 : min(_1689, _1912));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1655) + _1644;
        float _2177 = (_2172 * _1658) + _1648;
        float _2178 = (_2172 * _1661) + _1652;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2181 = (-1.0) - _2179;
        float _2183 = _2179 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_2178 > _2183) || ((_2178 < _2181) || ((_2177 > _2183) || ((_2177 < _2181) || ((_2176 < _2181) || (_2176 > _2183))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2178, cbModelParam._m0[9u].z, fma(_2177, cbModelParam._m0[9u].y, _2176 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2178, cbModelParam._m0[10u].z, fma(_2177, cbModelParam._m0[10u].y, _2176 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2178, cbModelParam._m0[11u].z, fma(_2177, cbModelParam._m0[11u].y, _2176 * cbModelParam._m0[11u].x))), _1597);
            frontier_phi_17_39_ladder = _2306.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2306.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2306.x * cbModelParam._m0[1u].y;
        }
        _1677 = frontier_phi_17_39_ladder_2;
        _1679 = frontier_phi_17_39_ladder_1;
        _1681 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_785, _786, _787), _1597);
        _1677 = _1665.x * cbModelParam._m0[1u].y;
        _1679 = _1665.y * cbModelParam._m0[1u].y;
        _1681 = _1665.z * cbModelParam._m0[1u].y;
    }
    float _1685 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _692);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1685 : min(cbModelParam._m0[25u].w, _1685));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1739 = fma(_847, cbModelParam._m0[21u].z, fma(_843, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839)) + cbModelParam._m0[21u].w;
        float _1743 = fma(_847, cbModelParam._m0[22u].z, fma(_843, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839)) + cbModelParam._m0[22u].w;
        float _1747 = fma(_847, cbModelParam._m0[23u].z, fma(_843, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839)) + cbModelParam._m0[23u].w;
        float _1750 = fma(_787, cbModelParam._m0[21u].z, fma(_786, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785));
        float _1753 = fma(_787, cbModelParam._m0[22u].z, fma(_786, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785));
        float _1756 = fma(_787, cbModelParam._m0[23u].z, fma(_786, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785));
        float _1917;
        if (_1750 > 0.0)
        {
            _1917 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1917 = frontier_phi_29_25_ladder;
        }
        float _2196;
        if (_1753 > 0.0)
        {
            _2196 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2196 = frontier_phi_41_36_ladder;
        }
        float _2409;
        if (_1756 > 0.0)
        {
            _2409 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2409 = frontier_phi_50_47_ladder;
        }
        float _2411 = isnan(_2196) ? _1917 : (isnan(_1917) ? _2196 : min(_1917, _2196));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1750) + _1739;
        float _2417 = (_2412 * _1753) + _1743;
        float _2418 = (_2412 * _1756) + _1747;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2419;
        float _2422 = _2419 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2418 > _2422) || ((_2418 < _2420) || ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 < _2420) || (_2416 > _2422))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2418, cbModelParam._m0[17u].z, fma(_2417, cbModelParam._m0[17u].y, _2416 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2418, cbModelParam._m0[18u].z, fma(_2417, cbModelParam._m0[18u].y, _2416 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2418, cbModelParam._m0[19u].z, fma(_2417, cbModelParam._m0[19u].y, _2416 * cbModelParam._m0[19u].x))), _1686);
            frontier_phi_26_50_ladder = _2634.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2634.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2634.x * cbModelParam._m0[1u].z;
        }
        _1775 = frontier_phi_26_50_ladder_2;
        _1777 = frontier_phi_26_50_ladder_1;
        _1779 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_785, _786, _787), _1686);
        _1775 = _1759.x * cbModelParam._m0[1u].z;
        _1777 = _1759.y * cbModelParam._m0[1u].z;
        _1779 = _1759.z * cbModelParam._m0[1u].z;
    }
    float _1792 = (((_810 * _762) + _811) * _777) * ((cbModelParam._m0[1u].w * (_1775 - _1677)) + _1677);
    float _1794 = (((_810 * _764) + _811) * _777) * ((cbModelParam._m0[1u].w * (_1777 - _1679)) + _1679);
    float _1796 = (((_810 * _765) + _811) * _777) * ((cbModelParam._m0[1u].w * (_1779 - _1681)) + _1681);
    float _1799 = fma(_1796, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1796, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1796, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, _1792 * cbSceneParam._m0[91u].x));
    vec4 _1813 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_650, _651));
    float _1815 = _1813.w;
    float _1827 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1815);
    float _1828 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1815);
    float _1829 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1815);
    uvec4 _1833 = floatBitsToUint(cbInstanceData._m0[_705 + 5u]);
    uint _1835 = _1833.x * 14u;
    uint _1836 = _1835 + 13u;
    float _1843 = _777 + (-1.0);
    float _1848 = (cbLight._m0[_1836].x * _1843) + 1.0;
    float _1849 = (cbLight._m0[_1836].y * _1843) + 1.0;
    float _1850 = (cbLight._m0[_1836].z * _1843) + 1.0;
    float _1851 = (cbLight._m0[_1836].w * _1843) + 1.0;
    uint _1852 = _1835 + 5u;
    float _1858 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1862 = _1835 + 4u;
    float _1871 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1875 = _1835 | 1u;
    float _1886 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_561, _562, _563));
    float _1889 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_561, _562, _563));
    float _4029 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _4040 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1894 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1896 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1903 = ((cbLight._m0[_1852].x * _1858) * _1896) + (((cbLight._m0[_1862].x * _1827) * _1871) * _1894);
    float _1904 = ((_1858 * cbLight._m0[_1852].y) * _1896) + (((cbLight._m0[_1862].y * _1828) * _1871) * _1894);
    float _1905 = ((_1858 * cbLight._m0[_1852].z) * _1896) + (((cbLight._m0[_1862].z * _1829) * _1871) * _1894);
    uvec4 _1909 = floatBitsToUint(cbLight._m0[_1835 + 12u]);
    bool _1911 = _1909.x == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1911)
    {
        _1922 = _1903;
        _1924 = _1904;
        _1926 = _1905;
    }
    else
    {
        uint _1930 = _1835 + 6u;
        float _1946 = (dot(vec3(cbLight._m0[_1835 + 2u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _1947 = _1946 * _1946;
        float _4051 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1949 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1922 = (((cbLight._m0[_1930].x * 0.3183098733425140380859375) * _1948) * _1949) + _1903;
        _1924 = (((cbLight._m0[_1930].y * 0.3183098733425140380859375) * _1948) * _1949) + _1904;
        _1926 = (((cbLight._m0[_1930].z * 0.3183098733425140380859375) * _1948) * _1949) + _1905;
    }
    bool _1929 = _1909.y == 0u;
    float _1967;
    float _1969;
    float _1971;
    if (_1929)
    {
        _1967 = _1922;
        _1969 = _1924;
        _1971 = _1926;
    }
    else
    {
        uint _2140 = _1835 + 7u;
        float _2156 = (dot(vec3(cbLight._m0[_1835 + 3u].xyz), vec3(_561, _562, _563)) * 0.5) + 0.5;
        float _2157 = _2156 * _2156;
        float _4067 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2158 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2159 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _1967 = (((cbLight._m0[_2140].x * 0.3183098733425140380859375) * _2158) * _2159) + _1922;
        _1969 = (((cbLight._m0[_2140].y * 0.3183098733425140380859375) * _2158) * _2159) + _1924;
        _1971 = (((cbLight._m0[_2140].z * 0.3183098733425140380859375) * _2158) * _2159) + _1926;
    }
    uint _1974 = _1835 + 8u;
    float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _692) * 0.949999988079071044921875);
    float _1988 = _1987 * _1987;
    float _1989 = cbLight._m0[_1835].x + _642;
    float _1990 = cbLight._m0[_1835].y + _643;
    float _1991 = cbLight._m0[_1835].z + _644;
    float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
    float _1996 = _1995 * _1989;
    float _1997 = _1995 * _1990;
    float _1998 = _1995 * _1991;
    float _1999 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1835].xyz));
    float _4083 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2003 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _2004 = dot(vec3(_561, _562, _563), vec3(_1996, _1997, _1998));
    float _4105 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2008 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1996, _1997, _1998));
    float _4116 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2012 = _1988 * _1988;
    float _2016 = ((_2007 * _2007) * (_2012 + (-1.0))) + 1.0;
    float _2024 = exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0);
    float _2025 = 0.959999978542327880859375 - _759;
    float _2027 = 0.959999978542327880859375 - _760;
    float _2028 = 0.959999978542327880859375 - _761;
    float _2035 = 1.0 - _1988;
    float _2046 = (0.5 / (((_2003 * ((_2002 * _2035) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_2003 * _2035) + _1988) * _2002))) * _2002;
    float _4127 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2012 / ((_2016 * _2016) * 3.141590118408203125));
    uint _2062 = _1835 + 9u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _692) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1875].x + _642;
    float _2076 = cbLight._m0[_1875].y + _643;
    float _2077 = cbLight._m0[_1875].z + _644;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1875].xyz));
    float _4138 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2089 = dot(vec3(_561, _562, _563), vec3(_2082, _2083, _2084));
    float _4149 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2082, _2083, _2084));
    float _4160 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2074 * _2074;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2108 = exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0);
    float _2115 = 1.0 - _2074;
    float _2125 = (0.5 / (((_2003 * ((_2088 * _2115) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2003 * _2115) + _2074) * _2088))) * _2088;
    float _4171 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2127 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    float _2137 = (((((_2108 * _2025) + _762) * cbLight._m0[_2062].x) * _2127) * _1858) + ((((cbLight._m0[_1974].x * _1827) * ((_2024 * _2025) + _762)) * _2048) * _1871);
    float _2138 = (((((_2108 * _2027) + _764) * cbLight._m0[_2062].y) * _2127) * _1858) + ((((cbLight._m0[_1974].y * _1828) * ((_2024 * _2027) + _764)) * _2048) * _1871);
    float _2139 = (((((_2108 * _2028) + _765) * cbLight._m0[_2062].z) * _2127) * _1858) + ((((cbLight._m0[_1974].z * _1829) * ((_2024 * _2028) + _765)) * _2048) * _1871);
    float _2201;
    float _2203;
    float _2205;
    if (_1911)
    {
        _2201 = _2137;
        _2203 = _2138;
        _2205 = _2139;
    }
    else
    {
        uint _2207 = _1835 + 2u;
        uint _2211 = _1835 + 10u;
        float _2225 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _692) * 0.949999988079071044921875);
        float _2226 = _2225 * _2225;
        float _2227 = cbLight._m0[_2207].x + _642;
        float _2228 = cbLight._m0[_2207].y + _643;
        float _2229 = cbLight._m0[_2207].z + _644;
        float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
        float _2234 = _2233 * _2227;
        float _2235 = _2233 * _2228;
        float _2236 = _2233 * _2229;
        float _2237 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2207].xyz));
        float _4182 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2241 = dot(vec3(_561, _562, _563), vec3(_2234, _2235, _2236));
        float _4193 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2245 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2234, _2235, _2236));
        float _4204 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2249 = _2226 * _2226;
        float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
        float _2260 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
        float _2267 = 1.0 - _2226;
        float _2277 = (0.5 / (((_2003 * ((_2240 * _2267) + _2226)) + 9.9999999392252902907785028219223e-09) + (((_2003 * _2267) + _2226) * _2240))) * _2240;
        float _4215 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2279 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
        float _2280 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2201 = (((((_2260 * _2025) + _762) * cbLight._m0[_2211].x) * _2279) * _2280) + _2137;
        _2203 = (((((_2260 * _2027) + _764) * cbLight._m0[_2211].y) * _2279) * _2280) + _2138;
        _2205 = (((((_2260 * _2028) + _765) * cbLight._m0[_2211].z) * _2279) * _2280) + _2139;
    }
    float _2315;
    float _2317;
    float _2319;
    if (_1929)
    {
        _2315 = _2201;
        _2317 = _2203;
        _2319 = _2205;
    }
    else
    {
        uint _2326 = _1835 + 3u;
        uint _2330 = _1835 + 11u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _692) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _642;
        float _2347 = cbLight._m0[_2326].y + _643;
        float _2348 = cbLight._m0[_2326].z + _644;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_2326].xyz));
        float _4231 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2360 = dot(vec3(_561, _562, _563), vec3(_2353, _2354, _2355));
        float _4242 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4253 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
        float _2386 = 1.0 - _2345;
        float _2396 = (0.5 / (((_2003 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2003 * _2386) + _2345) * _2359))) * _2359;
        float _4264 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2315 = (((((_2379 * _2025) + _762) * cbLight._m0[_2330].x) * _2398) * _2399) + _2201;
        _2317 = (((((_2379 * _2027) + _764) * cbLight._m0[_2330].y) * _2398) * _2399) + _2203;
        _2319 = (((((_2379 * _2028) + _765) * cbLight._m0[_2330].z) * _2398) * _2399) + _2205;
    }
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_1833.y == 0u)
    {
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2474;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2474;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2474;
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.x;
        uint _2501 = uint((float(_2489.y) * floor(float(uint(cbSceneParam._m0[85u].y * _651) / _2490))) + floor(float(uint(cbSceneParam._m0[85u].x * _650) / _2490)));
        float _2511 = (log2(_2477 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2512 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        uint _2515 = uint(isnan(14.0) ? _2512 : (isnan(_2512) ? 14.0 : min(_2512, 14.0)));
        uvec4 _2520 = texelFetch(g_lightClusterGridBuffer, int(((_2515 << 2u) + (_2501 << 6u)) >> 2u));
        uint _2521 = _2520.x;
        uint _2522 = _2489.z;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((((1u << ((_2522 >> 4u) & 15u)) + 4294967295u) & _2521) == 0u) || ((_2522 & 240u) == 0u))
        {
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
        }
        else
        {
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            uint _2789 = 0u;
            uint _2798;
            bool _2799;
            for (;;)
            {
                _2798 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                _2799 = _2798 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2799)
                {
                    frontier_phi_65_pred = _2788;
                    frontier_phi_65_pred_1 = _2787;
                    frontier_phi_65_pred_2 = _2786;
                    frontier_phi_65_pred_3 = _2785;
                    frontier_phi_65_pred_4 = _2784;
                    frontier_phi_65_pred_5 = _2783;
                }
                else
                {
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    uint _2913;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2798;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    for (;;)
                    {
                        uint _2917 = uint(findLSB(_2913)) + (_2789 << 5u);
                        uint _2914 = (_2913 + 4294967295u) & _2913;
                        uint _2919 = _2917 * 48u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2939 = (_2917 * 48u) + 4u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2958 = (_2917 * 48u) + 8u;
                        vec3 _2969 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x));
                        float _2973 = _2933.x - _2475;
                        float _2974 = _2933.y - _2476;
                        float _2975 = _2933.z - _2477;
                        float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                        float _2979 = inversesqrt(_2976);
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2983 = dot(vec3(_673, _676, _679), vec3(_2980, _2981, _2982));
                        float _2988 = 1.0 - (_2976 * _2933.w);
                        float _4290 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2990 = sqrt(_2976) * _2952.w;
                        float _2993 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2983) + _2994;
                        float _3000 = _2990 * _2990;
                        float _3004 = ((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2989) / ((_3000 * 0.699999988079071044921875) + 1.0);
                        float _3008 = (-0.0) - _2475;
                        float _3009 = (-0.0) - _2476;
                        float _3010 = (-0.0) - _2477;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3015 = _3014 * _3008;
                        float _3016 = _3014 * _3009;
                        float _3017 = _3014 * _3010;
                        float _3025 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                        float _3026 = 1.0 - _793;
                        float _3033 = sqrt(1.0 - ((1.0 - (_3026 * _3026)) * (1.0 - (_3025 * _3025))));
                        float _3034 = _3033 * _3033;
                        float _3035 = _3034 * _3034;
                        float _3036 = _3015 + _2980;
                        float _3037 = _3016 + _2981;
                        float _3038 = _3017 + _2982;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3046 = dot(vec3(_673, _676, _679), vec3(_3015, _3016, _3017));
                        float _4306 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3050 = dot(vec3(_673, _676, _679), vec3(_3042 * _3036, _3042 * _3037, _3042 * _3038));
                        float _4317 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3057 = ((_3053 * _3053) * (_3035 + (-1.0))) + 1.0;
                        float _3058 = _2993 * _3034;
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _2983) + _3059;
                        float _4328 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3064 = 1.0 - _3034;
                        float _3074 = (0.5 / (((_3063 * ((_3049 * _3064) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_3063 * _3064) + _3034) * _3049))) * _3063;
                        float _4339 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3085 = (((_3035 * 3.1415927410125732421875) * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) / ((_3057 * _3057) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125))) * _2989;
                        _2842 = (_3004 * _2952.x) + _2910;
                        _2843 = (_3004 * _2952.y) + _2911;
                        _2844 = (_3004 * _2952.z) + _2912;
                        _2839 = (_3085 * _2969.x) + _2907;
                        _2840 = (_3085 * _2969.y) + _2908;
                        _2841 = (_3085 * _2969.z) + _2909;
                        if (_2914 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2914;
                        }
                    }
                    frontier_phi_65_pred = _2844;
                    frontier_phi_65_pred_1 = _2843;
                    frontier_phi_65_pred_2 = _2842;
                    frontier_phi_65_pred_3 = _2841;
                    frontier_phi_65_pred_4 = _2840;
                    frontier_phi_65_pred_5 = _2839;
                }
                _2650 = frontier_phi_65_pred;
                _2648 = frontier_phi_65_pred_1;
                _2646 = frontier_phi_65_pred_2;
                _2644 = frontier_phi_65_pred_3;
                _2642 = frontier_phi_65_pred_4;
                _2640 = frontier_phi_65_pred_5;
                uint _2790 = _2789 + 1u;
                if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2783 = _2640;
                    _2784 = _2642;
                    _2785 = _2644;
                    _2786 = _2646;
                    _2787 = _2648;
                    _2788 = _2650;
                    _2789 = _2790;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
        }
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.z;
        uint _2656 = (_2654 >> 8u) & 15u;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((4294967295u << _2656) & _2521) == 0u)
        {
            _2751 = _2639;
            _2753 = _2641;
            _2755 = _2643;
            _2757 = _2645;
            _2759 = _2647;
            _2761 = _2649;
        }
        else
        {
            float _2776 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
            float _2777 = _2776 * _2475;
            float _2778 = _2776 * _2476;
            float _2779 = _2776 * _2477;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2656 < ((_2654 >> 12u) & 15u))
            {
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2890 = _2639;
                float _2891 = _2641;
                float _2892 = _2643;
                float _2893 = _2645;
                float _2894 = _2647;
                float _2895 = _2649;
                uint _2896 = _2656;
                uint _2905;
                bool _2906;
                for (;;)
                {
                    _2905 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                    _2906 = _2905 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2906)
                    {
                        frontier_phi_71_pred = _2895;
                        frontier_phi_71_pred_1 = _2894;
                        frontier_phi_71_pred_2 = _2893;
                        frontier_phi_71_pred_3 = _2892;
                        frontier_phi_71_pred_4 = _2891;
                        frontier_phi_71_pred_5 = _2890;
                    }
                    else
                    {
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        float _3106 = _2893;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        uint _3109 = _2905;
                        uint _3110;
                        vec4 _3135;
                        float _3136;
                        vec4 _3151;
                        vec3 _3163;
                        vec4 _3178;
                        vec4 _3193;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3120 = ((_2896 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3109));
                            _3110 = (_3109 + 4294967295u) & _3109;
                            uint _3122 = _3120 * 40u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3136 = _3135.w;
                            uint _3138 = (_3120 * 40u) + 4u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3120 * 40u) + 8u;
                            _3163 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x));
                            uint _3165 = (_3120 * 40u) + 16u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3120 * 40u) + 20u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3195 = (_3120 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3120 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_2477, _3227.z, fma(_2476, _3227.y, _3227.x * _2475)) + _3227.w;
                            _3240 = !((fma(_2477, _3208.z, fma(_2476, _3208.y, _3208.x * _2475)) + _3208.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3135.x - _2475;
                                float _3268 = _3135.y - _2476;
                                float _3269 = _3135.z - _2477;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3136 * _3136));
                                float _4350 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3285 = sqrt(_3270) * _3151.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_673, _676, _679))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_2477, _3178.z, fma(_2476, _3178.y, _3178.x * _2475)) + _3178.w) / _3239;
                                float _3299 = (fma(_2477, _3193.z, fma(_2476, _3193.y, _3193.x * _2475)) + _3193.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4366 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _793;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2777;
                                float _3329 = _3275 - _2778;
                                float _3330 = _3276 - _2779;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_673, _676, _679), vec3((-0.0) - _2777, (-0.0) - _2778, (-0.0) - _2779));
                                float _4377 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3342 = dot(vec3(_673, _676, _679), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4388 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_673, _676, _679), vec3(_3274, _3275, _3276))) + _3351;
                                float _4399 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4410 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3305 * _3151.z;
                                frontier_phi_77_pred_1 = _3305 * _3151.y;
                                frontier_phi_77_pred_2 = _3305 * _3151.x;
                                frontier_phi_77_pred_3 = _3379 * _3163.z;
                                frontier_phi_77_pred_4 = _3379 * _3163.y;
                                frontier_phi_77_pred_5 = _3379 * _3163.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3388 = frontier_phi_77_pred;
                            _3387 = frontier_phi_77_pred_1;
                            _3386 = frontier_phi_77_pred_2;
                            _3385 = frontier_phi_77_pred_3;
                            _3384 = frontier_phi_77_pred_4;
                            _3383 = frontier_phi_77_pred_5;
                            _3093 = _3386 + _3106;
                            _3094 = _3387 + _3107;
                            _3095 = _3388 + _3108;
                            _3090 = _3383 + _3103;
                            _3091 = _3384 + _3104;
                            _3092 = _3385 + _3105;
                            if (_3110 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3110;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _3095;
                        frontier_phi_71_pred_1 = _3094;
                        frontier_phi_71_pred_2 = _3093;
                        frontier_phi_71_pred_3 = _3092;
                        frontier_phi_71_pred_4 = _3091;
                        frontier_phi_71_pred_5 = _3090;
                    }
                    _2762 = frontier_phi_71_pred;
                    _2760 = frontier_phi_71_pred_1;
                    _2758 = frontier_phi_71_pred_2;
                    _2756 = frontier_phi_71_pred_3;
                    _2754 = frontier_phi_71_pred_4;
                    _2752 = frontier_phi_71_pred_5;
                    uint _2897 = _2896 + 1u;
                    if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2890 = _2752;
                        _2891 = _2754;
                        _2892 = _2756;
                        _2893 = _2758;
                        _2894 = _2760;
                        _2895 = _2762;
                        _2896 = _2897;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2762;
                frontier_phi_59_60_ladder_1 = _2760;
                frontier_phi_59_60_ladder_2 = _2758;
                frontier_phi_59_60_ladder_3 = _2756;
                frontier_phi_59_60_ladder_4 = _2754;
                frontier_phi_59_60_ladder_5 = _2752;
            }
            else
            {
                frontier_phi_59_60_ladder = _2649;
                frontier_phi_59_60_ladder_1 = _2647;
                frontier_phi_59_60_ladder_2 = _2645;
                frontier_phi_59_60_ladder_3 = _2643;
                frontier_phi_59_60_ladder_4 = _2641;
                frontier_phi_59_60_ladder_5 = _2639;
            }
            _2751 = frontier_phi_59_60_ladder_5;
            _2753 = frontier_phi_59_60_ladder_4;
            _2755 = frontier_phi_59_60_ladder_3;
            _2757 = frontier_phi_59_60_ladder_2;
            _2759 = frontier_phi_59_60_ladder_1;
            _2761 = frontier_phi_59_60_ladder;
        }
        float _2766 = isnan(1.0) ? _777 : (isnan(_777) ? 1.0 : min(_777, 1.0));
        _2533 = (_2766 * _2757) + _1967;
        _2535 = (_2766 * _2759) + _1969;
        _2537 = (_2766 * _2761) + _1971;
        _2539 = ((_2751 * _762) * _2766) + _2315;
        _2541 = ((_2753 * _764) * _2766) + _2317;
        _2543 = ((_2755 * _765) * _2766) + _2319;
    }
    else
    {
        _2533 = _1967;
        _2535 = _1969;
        _2537 = _1971;
        _2539 = _2315;
        _2541 = _2317;
        _2543 = _2319;
    }
    vec4 _2549 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4426 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4437 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4448 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _2573 = (((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2533 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _777))) + ((_2539 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1586)) * cbPerFrame._m0[3u].x)) + (_2549.x * cbMtdParam._m0[3u].x);
    float _2575 = ((_2549.y * cbMtdParam._m0[3u].x) + ((_2541 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1586)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2535 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _777)));
    float _2577 = ((_2549.z * cbMtdParam._m0[3u].x) + ((_2543 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1586)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2537 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _777)));
    uint _2581 = _705 + 6u;
    float _2589 = _650 / cbSceneParam._m0[86u].x;
    float _2590 = _651 / cbSceneParam._m0[86u].y;
    vec4 _2604 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, (log2((isnan(cbSceneParam._m0[77u].w) ? _584 : (isnan(_584) ? cbSceneParam._m0[77u].w : min(_584, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2606 = _2604.x;
    float _2607 = _2604.y;
    float _2608 = _2604.z;
    float _2609 = _2604.w;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    if (_584 > cbSceneParam._m0[78u].w)
    {
        float _2664 = isnan(_584) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _584 : min(cbSceneParam._m0[80u].w, _584));
        float _2665 = _2664 / _584;
        float _2676 = _2665 * _635;
        float _2677 = _636 * _2665;
        float _2678 = (-0.0) - _2677;
        float _2679 = _2665 * _637;
        float _2681 = (cbSceneParam._m0[77u].w * _2678) / _2664;
        float _2682 = _2681 + cbSceneParam._m0[79u].w;
        float _2683 = cbSceneParam._m0[79u].w - _2677;
        float _2689 = sqrt(((_2676 * _2676) + (_2677 * _2677)) + (_2679 * _2679));
        float _2692 = (1.0 - (cbSceneParam._m0[77u].w / _2664)) * _2689;
        float _2697 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2699 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2852;
        if (abs((_2678 - _2681) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2852 = ((((_2682 > 0.0) ? exp2(_2697 * _2682) : (2.0 - exp2(_2699 * _2682))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2692;
        }
        else
        {
            float _2812 = 1.0 / cbSceneParam._m0[80u].x;
            float _2813 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : max(_2682, _2683));
            float _2814 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : min(_2682, _2683));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            _2852 = ((abs(_2689 / _2678) * cbSceneParam._m0[80u].y) * ((((_2823 - _2824) * 2.0) - ((exp2(_2697 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)))) - exp2(_2697 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))))) * _2812)) - ((exp2(_2699 * _2823) - exp2(_2699 * _2824)) * _2812))) + (_2692 * cbSceneParam._m0[80u].z);
        }
        vec4 _2854 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, 1.0), 0.0);
        float _2863 = exp2((_2852 * (-1.44269502162933349609375)) * (1.0 - _2854.w));
        float _2864 = log2(_2863);
        float _2880 = log2(_2609);
        _2701 = (exp2(_2880 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].x)) * _2854.x) / cbSceneParam._m0[78u].x)) + _2606;
        _2703 = (exp2(_2880 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].y)) * _2854.y) / cbSceneParam._m0[78u].y)) + _2607;
        _2705 = (exp2(_2880 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].z)) * _2854.z) / cbSceneParam._m0[78u].z)) + _2608;
        _2707 = _2863 * _2609;
    }
    else
    {
        _2701 = _2606;
        _2703 = _2607;
        _2705 = _2608;
        _2707 = _2609;
    }
    float _2719 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2720 = _2719 == 3.0;
    float _2721 = log2(_2707);
    float _2728 = exp2(_2721 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)));
    float _2729 = exp2(_2721 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)));
    float _2730 = exp2(_2721 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)));
    float _2739 = (_2719 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2739 * (_2720 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.y = _2739 * (_2720 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2703)));
    SV_Target.z = _2739 * (_2720 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.w = cbInstanceData._m0[_2581].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2581].w;
}


