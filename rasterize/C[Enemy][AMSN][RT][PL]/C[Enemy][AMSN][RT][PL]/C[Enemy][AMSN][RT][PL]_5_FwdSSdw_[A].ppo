#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1088;
float _3522;
float _3523;
float _3524;
float _3525;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    float _258 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _260 = log2(0.0);
    bool _263 = exp2(_260 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _264;
    float _266;
    float _268;
    if (_263)
    {
        _264 = cbMtdParam._m0[18u].x;
        _266 = cbMtdParam._m0[18u].y;
        _268 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _264 = cbMtdParam._m0[17u].x;
        _266 = cbMtdParam._m0[17u].y;
        _268 = cbMtdParam._m0[17u].z;
    }
    float _273;
    if (_263)
    {
        _273 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _273 = cbMtdParam._m0[19u].z;
    }
    float _279;
    float _281;
    if (_263)
    {
        _279 = cbMtdParam._m0[26u].x;
        _281 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _279 = cbMtdParam._m0[22u].x;
        _281 = cbMtdParam._m0[22u].y;
    }
    float _283 = _279 * TEXCOORD.x;
    float _284 = _281 * TEXCOORD.y;
    float _296 = floor(_273);
    vec4 _299 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _283) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _284) + cbTextureTilingScale._m0[6u].w, _296));
    vec4 _322 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _258) + cbTextureTilingScale._m0[0u].w));
    float _331 = (((_264 * cbMtdParam._m0[19u].w) * _299.x) * cbMtdParam._m0[9u].x) * _322.x;
    float _335 = (((_266 * cbMtdParam._m0[19u].w) * _299.y) * cbMtdParam._m0[9u].y) * _322.y;
    float _339 = (((_268 * cbMtdParam._m0[19u].w) * _299.z) * cbMtdParam._m0[9u].z) * _322.z;
    vec4 _351 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _258) + cbTextureTilingScale._m0[1u].w));
    float _355 = _351.z;
    vec4 _368 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _283) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _284) + cbTextureTilingScale._m0[8u].w, _296));
    float _185[2];
    float _186[2];
    _185[0u] = cbMtdParam._m0[25u].x;
    _186[0u] = cbMtdParam._m0[25u].y;
    _185[1u] = cbMtdParam._m0[25u].z;
    _186[1u] = cbMtdParam._m0[25u].w;
    float _382 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _385 = uint(int(isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0))));
    float _390 = _186[_385] + _368.x;
    vec4 _409 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _283) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _284) + cbTextureTilingScale._m0[7u].w, _296));
    float _416 = (_409.x * 2.0) + (-1.0);
    float _417 = (_409.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_416, _417), vec2(_416, _417));
    float _3544 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _423 = sqrt(1.0 - (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))));
    float _432 = (cbMtdParam._m0[20u].x * (((_355 * 2.0) * (_409.z + _185[_385])) - _355)) + _355;
    float _436 = (cbMtdParam._m0[20u].y * ((_351.x * 2.0) + (-1.0))) + _416;
    float _437 = (cbMtdParam._m0[20u].y * ((_351.y * 2.0) + (-1.0))) + _417;
    float _440 = fma(_423, _236, fma(_437, _228 * TANGENT.x, (_214 * _206) * _436));
    float _443 = fma(_423, _237, fma(_437, _228 * TANGENT.y, (_214 * _207) * _436));
    float _446 = fma(_423, _238, fma(_437, _228 * TANGENT.z, (_214 * _208) * _436));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    float _451 = _450 * _440;
    float _452 = _450 * _443;
    float _453 = _450 * _446;
    float _3555 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _454 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3577 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3588 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3599 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _458 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _474 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    vec4 _540 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _542 = _540.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _768 = sqrt(((_526 * _526) + (_527 * _527)) + (_528 * _528));
        float _774 = (cbMatDynParam._m0[5u].x * _768) + cbMatDynParam._m0[5u].y;
        float _3610 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _779 = (cbMatDynParam._m0[5u].z * _768) + cbMatDynParam._m0[5u].w;
        float _3621 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) - _775)) + _775) < ((_542 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _556 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _557 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _559 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _561 = _559.w;
    float _580 = fma(_453, cbSceneParam._m0[5u].z, fma(_452, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _451));
    float _583 = fma(_453, cbSceneParam._m0[6u].z, fma(_452, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _451));
    float _586 = fma(_453, cbSceneParam._m0[7u].z, fma(_452, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _451));
    vec4 _588 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _599 = (((_588.y - _454) + (_588.w * _454)) * cbMtdParam._m0[3u].x) + _454;
    uint _612 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = _612 + 9u;
    uint _615 = _614 + uint(cbMatDynParam._m0[0u].w);
    float _621 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_615].x;
    float _622 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_615].y;
    float _623 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_615].z;
    float _3632 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    vec4 _627 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _632 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _643 = (((_632.x - _458) + (_632.w * _458)) * cbMtdParam._m0[3u].x) + _458;
    float _656 = (cbMtdParam._m0[3u].x * (((_624 * _561) - _624) + _627.x)) + _624;
    float _657 = (cbMtdParam._m0[3u].x * (((_625 * _561) - _625) + _627.y)) + _625;
    float _658 = (cbMtdParam._m0[3u].x * (((_626 * _561) - _626) + _627.z)) + _626;
    float _659 = 1.0 - _643;
    float _660 = _659 * _656;
    float _661 = _659 * _657;
    float _662 = _659 * _658;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _643;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _643;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _643;
    float _670 = _667 + 0.039999999105930328369140625;
    float _672 = _668 + 0.039999999105930328369140625;
    float _673 = _669 + 0.039999999105930328369140625;
    vec4 _682 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _556, cbSceneParam._m0[86u].y * _557));
    float _685 = _682.x * TEXCOORD_4;
    float _686 = dot(vec3(_451, _452, _453), vec3(_533, _534, _535));
    float _689 = _686 * 2.0;
    float _693 = (_689 * _451) - _533;
    float _694 = (_689 * _452) - _534;
    float _695 = (_689 * _453) - _535;
    float _699 = abs(dot(vec3(_533, _534, _535), vec3(_451, _452, _453)));
    float _3665 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _701 = sqrt(_599);
    float _714 = exp2((_701 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_701 * 3.0));
    float _720 = (1.0 - _714) * ((_701 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _721 = _714 * _701;
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1087;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _812 = fma(_757, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749));
        float _816 = fma(_757, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749));
        float _820 = fma(_757, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749));
        float _845 = _749 + _451;
        float _846 = _753 + _452;
        float _847 = _757 + _453;
        float _857 = fma(_847, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845)) - _812;
        float _858 = fma(_847, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845)) - _816;
        float _859 = fma(_847, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845)) - _820;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_812 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_816 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[34u].z) + ((((((_820 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _915 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_881.x + (-0.5));
        float _917 = _915 * (_881.y + (-0.5));
        float _918 = _915 * (_881.z + (-0.5));
        float _925 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_888.x + (-0.5));
        float _927 = _925 * (_888.y + (-0.5));
        float _928 = _925 * (_888.z + (-0.5));
        float _935 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_895.x + (-0.5));
        float _937 = _935 * (_895.y + (-0.5));
        float _938 = _935 * (_895.z + (-0.5));
        float _945 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_902.x + (-0.5));
        float _947 = _945 * (_902.y + (-0.5));
        float _948 = _945 * (_902.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _969 = (dot(vec3(_451, _452, _453), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _979 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3713 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_981 + 1.0))) + _986) * _949;
        float _996 = _917 * 0.5;
        float _997 = _927 * 0.5;
        float _998 = _937 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_451, _452, _453), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3746 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1023 + 1.0))) + _1028) * _950;
        float _1038 = _918 * 0.5;
        float _1039 = _928 * 0.5;
        float _1040 = _938 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_451, _452, _453), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3779 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1065 + 1.0))) + _1070) * _951;
        _1087 = _918;
        _1089 = _917;
        _1090 = _916;
        _1091 = _928;
        _1092 = _927;
        _1093 = _926;
        _1094 = _938;
        _1095 = _937;
        _1096 = _936;
        _1097 = _951;
        _1098 = _950;
        _1099 = _949;
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
    }
    else
    {
        _1087 = _1088;
        _1089 = _1088;
        _1090 = _1088;
        _1091 = _1088;
        _1092 = _1088;
        _1093 = _1088;
        _1094 = _1088;
        _1095 = _1088;
        _1096 = _1088;
        _1097 = _1088;
        _1098 = _1088;
        _1099 = _1088;
        _1100 = 0.0;
        _1101 = 0.0;
        _1102 = 0.0;
    }
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1131 = fma(_757, cbModelParam._m0[30u].z, fma(_753, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _749));
        float _1135 = fma(_757, cbModelParam._m0[31u].z, fma(_753, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _749));
        float _1139 = fma(_757, cbModelParam._m0[32u].z, fma(_753, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _749));
        float _1162 = _749 + _451;
        float _1163 = _753 + _452;
        float _1164 = _757 + _453;
        float _1174 = fma(_1164, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162)) - _1131;
        float _1175 = fma(_1164, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162)) - _1135;
        float _1176 = fma(_1164, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162)) - _1139;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1131 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1135 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[35u].z) + ((((((_1139 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1230 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1197.x + (-0.5));
        float _1232 = _1230 * (_1197.y + (-0.5));
        float _1233 = _1230 * (_1197.z + (-0.5));
        float _1240 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1204.x + (-0.5));
        float _1242 = _1240 * (_1204.y + (-0.5));
        float _1243 = _1240 * (_1204.z + (-0.5));
        float _1250 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1211.x + (-0.5));
        float _1252 = _1250 * (_1211.y + (-0.5));
        float _1253 = _1250 * (_1211.z + (-0.5));
        float _1260 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1218.x + (-0.5));
        float _1262 = _1260 * (_1218.y + (-0.5));
        float _1263 = _1260 * (_1218.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_451, _452, _453), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3842 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1294 + 1.0))) + _1299) * _1264;
        float _1309 = _1232 * 0.5;
        float _1310 = _1242 * 0.5;
        float _1311 = _1252 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_451, _452, _453), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3875 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1336 + 1.0))) + _1341) * _1265;
        float _1351 = _1233 * 0.5;
        float _1352 = _1243 * 0.5;
        float _1353 = _1253 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_451, _452, _453), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3908 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1378 + 1.0))) + _1383) * _1266;
        _1400 = _1233;
        _1401 = _1232;
        _1402 = _1231;
        _1403 = _1243;
        _1404 = _1242;
        _1405 = _1241;
        _1406 = _1253;
        _1407 = _1252;
        _1408 = _1251;
        _1409 = _1266;
        _1410 = _1265;
        _1411 = _1264;
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1088;
        _1401 = _1088;
        _1402 = _1088;
        _1403 = _1088;
        _1404 = _1088;
        _1405 = _1088;
        _1406 = _1088;
        _1407 = _1088;
        _1408 = _1088;
        _1409 = _1088;
        _1410 = _1088;
        _1411 = _1088;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1100)) + _1100;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1101)) + _1101;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1447 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1424));
    float _1468 = _693 * 0.5;
    float _1469 = _694 * 0.5;
    float _1470 = _695 * 0.5;
    float _1471 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1474 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1477 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1511;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1484 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1087, _1091, _1094, _1097));
        float _1488 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1492 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1499 = dot(vec4(cbModelParam._m0[39u]), vec4(_1468, _1469, _1470, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1522;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1513 = dot(vec4(cbModelParam._m0[40u]), vec4(_1468, _1469, _1470, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1526 = (_1522 * cbModelParam._m0[1u].x) + (_1511 * (1.0 - cbModelParam._m0[1u].x));
    float _1536 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _599);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1536 : min(cbModelParam._m0[25u].z, _1536));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1586 = fma(_757, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749)) + cbModelParam._m0[13u].w;
        float _1590 = fma(_757, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749)) + cbModelParam._m0[14u].w;
        float _1594 = fma(_757, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749)) + cbModelParam._m0[15u].w;
        float _1597 = fma(_695, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693));
        float _1600 = fma(_695, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693));
        float _1603 = fma(_695, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693));
        float _1631;
        if (_1597 > 0.0)
        {
            _1631 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1631 = frontier_phi_25_23_ladder;
        }
        float _1856;
        if (_1600 > 0.0)
        {
            _1856 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1856 = frontier_phi_34_30_ladder;
        }
        float _2113;
        if (_1603 > 0.0)
        {
            _2113 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2113 = frontier_phi_46_41_ladder;
        }
        float _2115 = isnan(_1856) ? _1631 : (isnan(_1631) ? _1856 : min(_1631, _1856));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1597) + _1586;
        float _2121 = (_2116 * _1600) + _1590;
        float _2122 = (_2116 * _1603) + _1594;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2123;
        float _2127 = _2123 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 > _2127) || ((_2121 < _2125) || ((_2120 < _2125) || (_2120 > _2127))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2250 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2122, cbModelParam._m0[9u].z, fma(_2121, cbModelParam._m0[9u].y, _2120 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2122, cbModelParam._m0[10u].z, fma(_2121, cbModelParam._m0[10u].y, _2120 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2122, cbModelParam._m0[11u].z, fma(_2121, cbModelParam._m0[11u].y, _2120 * cbModelParam._m0[11u].x))), _1537);
            frontier_phi_24_46_ladder = _2250.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2250.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2250.x * cbModelParam._m0[1u].y;
        }
        _1619 = frontier_phi_24_46_ladder_2;
        _1621 = frontier_phi_24_46_ladder_1;
        _1623 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_693, _694, _695), _1537);
        _1619 = _1607.x * cbModelParam._m0[1u].y;
        _1621 = _1607.y * cbModelParam._m0[1u].y;
        _1623 = _1607.z * cbModelParam._m0[1u].y;
    }
    float _1627 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _599);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1627 : min(cbModelParam._m0[25u].w, _1627));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1681 = fma(_757, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749)) + cbModelParam._m0[21u].w;
        float _1685 = fma(_757, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749)) + cbModelParam._m0[22u].w;
        float _1689 = fma(_757, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749)) + cbModelParam._m0[23u].w;
        float _1692 = fma(_695, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693));
        float _1695 = fma(_695, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693));
        float _1698 = fma(_695, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693));
        float _1861;
        if (_1692 > 0.0)
        {
            _1861 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1861 = frontier_phi_36_32_ladder;
        }
        float _2140;
        if (_1695 > 0.0)
        {
            _2140 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2140 = frontier_phi_48_43_ladder;
        }
        float _2353;
        if (_1698 > 0.0)
        {
            _2353 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2353 = frontier_phi_57_54_ladder;
        }
        float _2355 = isnan(_2140) ? _1861 : (isnan(_1861) ? _2140 : min(_1861, _2140));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1692) + _1681;
        float _2361 = (_2356 * _1695) + _1685;
        float _2362 = (_2356 * _1698) + _1689;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2363;
        float _2366 = _2363 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2362 > _2366) || ((_2362 < _2364) || ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 < _2364) || (_2360 > _2366))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2362, cbModelParam._m0[17u].z, fma(_2361, cbModelParam._m0[17u].y, _2360 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2362, cbModelParam._m0[18u].z, fma(_2361, cbModelParam._m0[18u].y, _2360 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2362, cbModelParam._m0[19u].z, fma(_2361, cbModelParam._m0[19u].y, _2360 * cbModelParam._m0[19u].x))), _1628);
            frontier_phi_33_57_ladder = _2578.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2578.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2578.z * cbModelParam._m0[1u].z;
        }
        _1717 = frontier_phi_33_57_ladder_1;
        _1719 = frontier_phi_33_57_ladder;
        _1721 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_693, _694, _695), _1628);
        _1717 = _1701.x * cbModelParam._m0[1u].z;
        _1719 = _1701.y * cbModelParam._m0[1u].z;
        _1721 = _1701.z * cbModelParam._m0[1u].z;
    }
    float _1734 = (((_720 * _670) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1717 - _1619)) + _1619);
    float _1736 = (((_720 * _672) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1719 - _1621)) + _1621);
    float _1738 = (((_720 * _673) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1721 - _1623)) + _1623);
    float _1741 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, _1734 * cbSceneParam._m0[91u].x));
    vec4 _1755 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_556, _557));
    float _1757 = _1755.w;
    float _1769 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1757);
    float _1770 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1757);
    float _1771 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1757);
    uvec4 _1775 = floatBitsToUint(cbInstanceData._m0[_612 + 5u]);
    uint _1777 = _1775.x * 14u;
    uint _1778 = _1777 + 13u;
    float _1785 = _685 + (-1.0);
    float _1790 = (cbLight._m0[_1778].x * _1785) + 1.0;
    float _1791 = (cbLight._m0[_1778].y * _1785) + 1.0;
    float _1792 = (cbLight._m0[_1778].z * _1785) + 1.0;
    float _1793 = (cbLight._m0[_1778].w * _1785) + 1.0;
    uint _1794 = _1777 + 5u;
    float _1800 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1804 = _1777 + 4u;
    float _1814 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1818 = _1777 | 1u;
    float _1829 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_451, _452, _453));
    float _1832 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_451, _452, _453));
    float _4044 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _4055 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1837 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.3183098733425140380859375;
    float _1839 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1846 = ((cbLight._m0[_1794].x * _1800) * _1839) + (((cbLight._m0[_1804].x * _1769) * _1814) * _1837);
    float _1847 = ((_1800 * cbLight._m0[_1794].y) * _1839) + (((cbLight._m0[_1804].y * _1770) * _1814) * _1837);
    float _1848 = ((_1800 * cbLight._m0[_1794].z) * _1839) + (((cbLight._m0[_1804].z * _1771) * _1814) * _1837);
    uvec4 _1853 = floatBitsToUint(cbLight._m0[_1777 + 12u]);
    bool _1855 = _1853.x == 0u;
    float _1866;
    float _1868;
    float _1870;
    if (_1855)
    {
        _1866 = _1846;
        _1868 = _1847;
        _1870 = _1848;
    }
    else
    {
        uint _1874 = _1777 + 6u;
        float _1890 = (dot(vec3(cbLight._m0[_1777 + 2u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _1891 = _1890 * _1890;
        float _4066 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1893 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _1866 = (((cbLight._m0[_1874].x * 0.3183098733425140380859375) * _1892) * _1893) + _1846;
        _1868 = (((cbLight._m0[_1874].y * 0.3183098733425140380859375) * _1892) * _1893) + _1847;
        _1870 = (((cbLight._m0[_1874].z * 0.3183098733425140380859375) * _1892) * _1893) + _1848;
    }
    bool _1873 = _1853.y == 0u;
    float _1911;
    float _1913;
    float _1915;
    if (_1873)
    {
        _1911 = _1866;
        _1913 = _1868;
        _1915 = _1870;
    }
    else
    {
        uint _2084 = _1777 + 7u;
        float _2100 = (dot(vec3(cbLight._m0[_1777 + 3u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _2101 = _2100 * _2100;
        float _4082 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2103 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _1911 = (((cbLight._m0[_2084].x * 0.3183098733425140380859375) * _2102) * _2103) + _1866;
        _1913 = (((cbLight._m0[_2084].y * 0.3183098733425140380859375) * _2102) * _2103) + _1868;
        _1915 = (((cbLight._m0[_2084].z * 0.3183098733425140380859375) * _2102) * _2103) + _1870;
    }
    uint _1918 = _1777 + 8u;
    float _1931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _599) * 0.949999988079071044921875);
    float _1932 = _1931 * _1931;
    float _1933 = cbLight._m0[_1777].x + _533;
    float _1934 = cbLight._m0[_1777].y + _534;
    float _1935 = cbLight._m0[_1777].z + _535;
    float _1939 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
    float _1940 = _1939 * _1933;
    float _1941 = _1939 * _1934;
    float _1942 = _1939 * _1935;
    float _1943 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1777].xyz));
    float _4098 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _1947 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _1948 = dot(vec3(_451, _452, _453), vec3(_1940, _1941, _1942));
    float _4120 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1940, _1941, _1942));
    float _4131 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1956 = _1932 * _1932;
    float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
    float _1968 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
    float _1969 = 0.959999978542327880859375 - _667;
    float _1971 = 0.959999978542327880859375 - _668;
    float _1972 = 0.959999978542327880859375 - _669;
    float _1979 = 1.0 - _1932;
    float _1990 = (0.5 / (((_1947 * ((_1946 * _1979) + _1932)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _1979) + _1932) * _1946))) * _1946;
    float _4142 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
    uint _2006 = _1777 + 9u;
    float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _599) * 0.949999988079071044921875);
    float _2018 = _2017 * _2017;
    float _2019 = cbLight._m0[_1818].x + _533;
    float _2020 = cbLight._m0[_1818].y + _534;
    float _2021 = cbLight._m0[_1818].z + _535;
    float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
    float _2026 = _2025 * _2019;
    float _2027 = _2025 * _2020;
    float _2028 = _2025 * _2021;
    float _2029 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1818].xyz));
    float _4153 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2033 = dot(vec3(_451, _452, _453), vec3(_2026, _2027, _2028));
    float _4164 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2037 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_2026, _2027, _2028));
    float _4175 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2041 = _2018 * _2018;
    float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
    float _2052 = exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0);
    float _2059 = 1.0 - _2018;
    float _2069 = (0.5 / (((_1947 * ((_2032 * _2059) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _2059) + _2018) * _2032))) * _2032;
    float _4186 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
    float _2081 = (((((_2052 * _1969) + _670) * cbLight._m0[_2006].x) * _2071) * _1800) + ((((cbLight._m0[_1918].x * _1769) * ((_1968 * _1969) + _670)) * _1992) * _1814);
    float _2082 = (((((_2052 * _1971) + _672) * cbLight._m0[_2006].y) * _2071) * _1800) + ((((cbLight._m0[_1918].y * _1770) * ((_1968 * _1971) + _672)) * _1992) * _1814);
    float _2083 = (((((_2052 * _1972) + _673) * cbLight._m0[_2006].z) * _2071) * _1800) + ((((cbLight._m0[_1918].z * _1771) * ((_1968 * _1972) + _673)) * _1992) * _1814);
    float _2145;
    float _2147;
    float _2149;
    if (_1855)
    {
        _2145 = _2081;
        _2147 = _2082;
        _2149 = _2083;
    }
    else
    {
        uint _2151 = _1777 + 2u;
        uint _2155 = _1777 + 10u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _599) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _533;
        float _2172 = cbLight._m0[_2151].y + _534;
        float _2173 = cbLight._m0[_2151].z + _535;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2151].xyz));
        float _4197 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2185 = dot(vec3(_451, _452, _453), vec3(_2178, _2179, _2180));
        float _4208 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4219 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2204 = exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0);
        float _2211 = 1.0 - _2170;
        float _2221 = (0.5 / (((_1947 * ((_2184 * _2211) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _2211) + _2170) * _2184))) * _2184;
        float _4230 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2223 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2224 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2145 = (((((_2204 * _1969) + _670) * cbLight._m0[_2155].x) * _2223) * _2224) + _2081;
        _2147 = (((((_2204 * _1971) + _672) * cbLight._m0[_2155].y) * _2223) * _2224) + _2082;
        _2149 = (((((_2204 * _1972) + _673) * cbLight._m0[_2155].z) * _2223) * _2224) + _2083;
    }
    float _2259;
    float _2261;
    float _2263;
    if (_1873)
    {
        _2259 = _2145;
        _2261 = _2147;
        _2263 = _2149;
    }
    else
    {
        uint _2270 = _1777 + 3u;
        uint _2274 = _1777 + 11u;
        float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _599) * 0.949999988079071044921875);
        float _2289 = _2288 * _2288;
        float _2290 = cbLight._m0[_2270].x + _533;
        float _2291 = cbLight._m0[_2270].y + _534;
        float _2292 = cbLight._m0[_2270].z + _535;
        float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
        float _2297 = _2296 * _2290;
        float _2298 = _2296 * _2291;
        float _2299 = _2296 * _2292;
        float _2300 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2270].xyz));
        float _4246 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2304 = dot(vec3(_451, _452, _453), vec3(_2297, _2298, _2299));
        float _4257 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2308 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2297, _2298, _2299));
        float _4268 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2312 = _2289 * _2289;
        float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
        float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0);
        float _2330 = 1.0 - _2289;
        float _2340 = (0.5 / (((_1947 * ((_2303 * _2330) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _2330) + _2289) * _2303))) * _2303;
        float _4279 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2259 = (((((_2323 * _1969) + _670) * cbLight._m0[_2274].x) * _2342) * _2343) + _2145;
        _2261 = (((((_2323 * _1971) + _672) * cbLight._m0[_2274].y) * _2342) * _2343) + _2147;
        _2263 = (((((_2323 * _1972) + _673) * cbLight._m0[_2274].z) * _2342) * _2343) + _2149;
    }
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    if (_1775.y == 0u)
    {
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2418;
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2418;
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2418;
        uvec4 _2433 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2434 = _2433.x;
        uint _2445 = uint((float(_2433.y) * floor(float(uint(cbSceneParam._m0[85u].y * _557) / _2434))) + floor(float(uint(cbSceneParam._m0[85u].x * _556) / _2434)));
        float _2455 = (log2(_2421 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2456 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        uint _2459 = uint(isnan(14.0) ? _2456 : (isnan(_2456) ? 14.0 : min(_2456, 14.0)));
        uvec4 _2464 = texelFetch(g_lightClusterGridBuffer, int(((_2459 << 2u) + (_2445 << 6u)) >> 2u));
        uint _2465 = _2464.x;
        uint _2466 = _2433.z;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((((1u << ((_2466 >> 4u) & 15u)) + 4294967295u) & _2465) == 0u) || ((_2466 & 240u) == 0u))
        {
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
        }
        else
        {
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            uint _2741 = 0u;
            uint _2750;
            bool _2751;
            for (;;)
            {
                _2750 = texelFetch(g_lightClassification, int((((_2459 << 5u) + (_2445 << 9u)) + (_2741 << 2u)) >> 2u)).x;
                _2751 = _2750 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2751)
                {
                    frontier_phi_74_pred = _2740;
                    frontier_phi_74_pred_1 = _2739;
                    frontier_phi_74_pred_2 = _2738;
                    frontier_phi_74_pred_3 = _2737;
                    frontier_phi_74_pred_4 = _2736;
                    frontier_phi_74_pred_5 = _2735;
                }
                else
                {
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    uint _2886;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2750;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    for (;;)
                    {
                        uint _2890 = uint(findLSB(_2886)) + (_2741 << 5u);
                        uint _2887 = (_2886 + 4294967295u) & _2886;
                        uint _2892 = _2890 * 48u;
                        vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 3u)).x));
                        uint _2912 = (_2890 * 48u) + 4u;
                        vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2931 = (_2890 * 48u) + 8u;
                        vec3 _2942 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x));
                        float _2946 = _2906.x - _2419;
                        float _2947 = _2906.y - _2420;
                        float _2948 = _2906.z - _2421;
                        float _2949 = dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948));
                        float _2952 = inversesqrt(_2949);
                        float _2953 = _2952 * _2946;
                        float _2954 = _2952 * _2947;
                        float _2955 = _2952 * _2948;
                        float _2956 = dot(vec3(_580, _583, _586), vec3(_2953, _2954, _2955));
                        float _2961 = 1.0 - (_2949 * _2906.w);
                        float _4305 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2962 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2963 = sqrt(_2949) * _2925.w;
                        float _2966 = 1.39999997615814208984375 / (_2963 + 1.39999997615814208984375);
                        float _2967 = _2966 * _2966;
                        float _2970 = ((1.0 - _2967) * _2956) + _2967;
                        float _2973 = _2963 * _2963;
                        float _2977 = ((isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))) * _2962) / ((_2973 * 0.699999988079071044921875) + 1.0);
                        float _2981 = (-0.0) - _2419;
                        float _2982 = (-0.0) - _2420;
                        float _2983 = (-0.0) - _2421;
                        float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                        float _2988 = _2987 * _2981;
                        float _2989 = _2987 * _2982;
                        float _2990 = _2987 * _2983;
                        float _2998 = exp2(log2(1.0 / ((_2973 * 3.5) + 5.0)) * 0.25);
                        float _2999 = 1.0 - _701;
                        float _3006 = sqrt(1.0 - ((1.0 - (_2999 * _2999)) * (1.0 - (_2998 * _2998))));
                        float _3007 = _3006 * _3006;
                        float _3008 = _3007 * _3007;
                        float _3009 = _2988 + _2953;
                        float _3010 = _2989 + _2954;
                        float _3011 = _2990 + _2955;
                        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
                        float _3019 = dot(vec3(_580, _583, _586), vec3(_2988, _2989, _2990));
                        float _4321 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3022 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3023 = dot(vec3(_580, _583, _586), vec3(_3015 * _3009, _3015 * _3010, _3015 * _3011));
                        float _4332 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3030 = ((_3026 * _3026) * (_3008 + (-1.0))) + 1.0;
                        float _3031 = _2966 * _3007;
                        float _3032 = _3031 * _3031;
                        float _3035 = ((1.0 - _3032) * _2956) + _3032;
                        float _4343 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3036 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3037 = 1.0 - _3007;
                        float _3047 = (0.5 / (((_3036 * ((_3022 * _3037) + _3007)) + 9.9999999392252902907785028219223e-09) + (((_3036 * _3037) + _3007) * _3022))) * _3036;
                        float _4354 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3058 = (((_3008 * 3.1415927410125732421875) * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) / ((_3030 * _3030) * ((_2973 * 2.1991131305694580078125) + 3.141590118408203125))) * _2962;
                        _2810 = (_2977 * _2925.x) + _2883;
                        _2811 = (_2977 * _2925.y) + _2884;
                        _2812 = (_2977 * _2925.z) + _2885;
                        _2807 = (_3058 * _2942.x) + _2880;
                        _2808 = (_3058 * _2942.y) + _2881;
                        _2809 = (_3058 * _2942.z) + _2882;
                        if (_2887 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2887;
                        }
                    }
                    frontier_phi_74_pred = _2812;
                    frontier_phi_74_pred_1 = _2811;
                    frontier_phi_74_pred_2 = _2810;
                    frontier_phi_74_pred_3 = _2809;
                    frontier_phi_74_pred_4 = _2808;
                    frontier_phi_74_pred_5 = _2807;
                }
                _2594 = frontier_phi_74_pred;
                _2592 = frontier_phi_74_pred_1;
                _2590 = frontier_phi_74_pred_2;
                _2588 = frontier_phi_74_pred_3;
                _2586 = frontier_phi_74_pred_4;
                _2584 = frontier_phi_74_pred_5;
                uint _2742 = _2741 + 1u;
                if (_2742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2735 = _2584;
                    _2736 = _2586;
                    _2737 = _2588;
                    _2738 = _2590;
                    _2739 = _2592;
                    _2740 = _2594;
                    _2741 = _2742;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
        }
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.z;
        uint _2600 = (_2598 >> 8u) & 15u;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((4294967295u << _2600) & _2465) == 0u)
        {
            _2703 = _2583;
            _2705 = _2585;
            _2707 = _2587;
            _2709 = _2589;
            _2711 = _2591;
            _2713 = _2593;
        }
        else
        {
            float _2728 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
            float _2729 = _2728 * _2419;
            float _2730 = _2728 * _2420;
            float _2731 = _2728 * _2421;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2600 < ((_2598 >> 12u) & 15u))
            {
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2863 = _2583;
                float _2864 = _2585;
                float _2865 = _2587;
                float _2866 = _2589;
                float _2867 = _2591;
                float _2868 = _2593;
                uint _2869 = _2600;
                uint _2878;
                bool _2879;
                for (;;)
                {
                    _2878 = texelFetch(g_lightClassification, int((((_2459 << 5u) + (_2445 << 9u)) + (_2869 << 2u)) >> 2u)).x;
                    _2879 = _2878 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2879)
                    {
                        frontier_phi_85_pred = _2867;
                        frontier_phi_85_pred_1 = _2866;
                        frontier_phi_85_pred_2 = _2865;
                        frontier_phi_85_pred_3 = _2864;
                        frontier_phi_85_pred_4 = _2863;
                        frontier_phi_85_pred_5 = _2868;
                    }
                    else
                    {
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        uint _3091 = _2878;
                        uint _3092;
                        vec4 _3117;
                        float _3118;
                        vec4 _3133;
                        vec3 _3145;
                        vec4 _3161;
                        vec4 _3176;
                        float _3223;
                        bool _3224;
                        for (;;)
                        {
                            uint _3102 = ((_2869 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3091));
                            _3092 = (_3091 + 4294967295u) & _3091;
                            uint _3104 = _3102 * 40u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3118 = _3117.w;
                            uint _3120 = (_3102 * 40u) + 4u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3135 = (_3102 * 40u) + 8u;
                            _3145 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x));
                            uint _3148 = (_3102 * 40u) + 16u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3102 * 40u) + 20u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3102 * 40u) + 24u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3198 = (_3102 * 40u) + 28u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3223 = fma(_2421, _3211.z, fma(_2420, _3211.y, _3211.x * _2419)) + _3211.w;
                            _3224 = !((fma(_2421, _3192.z, fma(_2420, _3192.y, _3192.x * _2419)) + _3192.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3224)
                            {
                                float _3251 = _3117.x - _2419;
                                float _3252 = _3117.y - _2420;
                                float _3253 = _3117.z - _2421;
                                float _3254 = dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253));
                                float _3257 = inversesqrt(_3254);
                                float _3258 = _3257 * _3251;
                                float _3259 = _3257 * _3252;
                                float _3260 = _3257 * _3253;
                                float _3264 = 1.0 - (_3254 / (_3118 * _3118));
                                float _4365 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3269 = sqrt(_3254) * _3133.w;
                                float _3271 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                                float _3272 = _3271 * _3271;
                                float _3275 = ((1.0 - _3272) * dot(vec3(_3258, _3259, _3260), vec3(_580, _583, _586))) + _3272;
                                float _3278 = _3269 * _3269;
                                float _3282 = (fma(_2421, _3161.z, fma(_2420, _3161.y, _3161.x * _2419)) + _3161.w) / _3223;
                                float _3283 = (fma(_2421, _3176.z, fma(_2420, _3176.y, _3176.x * _2419)) + _3176.w) / _3223;
                                float _3287 = 1.0 - dot(vec2(_3282, _3283), vec2(_3282, _3283));
                                float _4381 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3289 = _3288 * (((isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))) * _3265) / ((_3278 * 0.699999988079071044921875) + 1.0));
                                float _3301 = exp2(log2(1.0 / ((_3278 * 3.5) + 5.0)) * 0.25);
                                float _3302 = 1.0 - _701;
                                float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                                float _3310 = _3309 * _3309;
                                float _3311 = _3310 * _3310;
                                float _3312 = _3258 - _2729;
                                float _3313 = _3259 - _2730;
                                float _3314 = _3260 - _2731;
                                float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                                float _3322 = dot(vec3(_580, _583, _586), vec3((-0.0) - _2729, (-0.0) - _2730, (-0.0) - _2731));
                                float _4392 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3326 = dot(vec3(_580, _583, _586), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                                float _4403 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                                float _3334 = _3271 * _3310;
                                float _3335 = _3334 * _3334;
                                float _3341 = ((1.0 - _3335) * dot(vec3(_580, _583, _586), vec3(_3258, _3259, _3260))) + _3335;
                                float _4414 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3343 = 1.0 - _3310;
                                float _3353 = (0.5 / (((_3342 * ((_3325 * _3343) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3310) * _3325))) * _3342;
                                float _4425 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3363 = (_3288 * _3265) * (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) / ((_3333 * _3333) * ((_3278 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3289 * _3133.y;
                                frontier_phi_91_pred_1 = _3289 * _3133.x;
                                frontier_phi_91_pred_2 = _3363 * _3145.z;
                                frontier_phi_91_pred_3 = _3363 * _3145.y;
                                frontier_phi_91_pred_4 = _3363 * _3145.x;
                                frontier_phi_91_pred_5 = _3289 * _3133.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3371 = frontier_phi_91_pred;
                            _3370 = frontier_phi_91_pred_1;
                            _3369 = frontier_phi_91_pred_2;
                            _3368 = frontier_phi_91_pred_3;
                            _3367 = frontier_phi_91_pred_4;
                            _3372 = frontier_phi_91_pred_5;
                            _3075 = _3370 + _3088;
                            _3076 = _3371 + _3089;
                            _3077 = _3372 + _3090;
                            _3072 = _3367 + _3085;
                            _3073 = _3368 + _3086;
                            _3074 = _3369 + _3087;
                            if (_3092 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3092;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3076;
                        frontier_phi_85_pred_1 = _3075;
                        frontier_phi_85_pred_2 = _3074;
                        frontier_phi_85_pred_3 = _3073;
                        frontier_phi_85_pred_4 = _3072;
                        frontier_phi_85_pred_5 = _3077;
                    }
                    _2712 = frontier_phi_85_pred;
                    _2710 = frontier_phi_85_pred_1;
                    _2708 = frontier_phi_85_pred_2;
                    _2706 = frontier_phi_85_pred_3;
                    _2704 = frontier_phi_85_pred_4;
                    _2714 = frontier_phi_85_pred_5;
                    uint _2870 = _2869 + 1u;
                    if (_2870 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2863 = _2704;
                        _2864 = _2706;
                        _2865 = _2708;
                        _2866 = _2710;
                        _2867 = _2712;
                        _2868 = _2714;
                        _2869 = _2870;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2714;
                frontier_phi_66_67_ladder_1 = _2710;
                frontier_phi_66_67_ladder_2 = _2712;
                frontier_phi_66_67_ladder_3 = _2706;
                frontier_phi_66_67_ladder_4 = _2704;
                frontier_phi_66_67_ladder_5 = _2708;
            }
            else
            {
                frontier_phi_66_67_ladder = _2593;
                frontier_phi_66_67_ladder_1 = _2589;
                frontier_phi_66_67_ladder_2 = _2591;
                frontier_phi_66_67_ladder_3 = _2585;
                frontier_phi_66_67_ladder_4 = _2583;
                frontier_phi_66_67_ladder_5 = _2587;
            }
            _2703 = frontier_phi_66_67_ladder_4;
            _2705 = frontier_phi_66_67_ladder_3;
            _2707 = frontier_phi_66_67_ladder_5;
            _2709 = frontier_phi_66_67_ladder_1;
            _2711 = frontier_phi_66_67_ladder_2;
            _2713 = frontier_phi_66_67_ladder;
        }
        float _2718 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
        _2477 = (_2718 * _2709) + _1911;
        _2479 = (_2718 * _2711) + _1913;
        _2481 = (_2718 * _2713) + _1915;
        _2483 = ((_2703 * _670) * _2718) + _2259;
        _2485 = ((_2705 * _672) * _2718) + _2261;
        _2487 = ((_2707 * _673) * _2718) + _2263;
    }
    else
    {
        _2477 = _1911;
        _2479 = _1913;
        _2481 = _1915;
        _2483 = _2259;
        _2485 = _2261;
        _2487 = _2263;
    }
    vec4 _2493 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4441 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4452 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4463 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _2517 = (((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2477 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _685))) + ((_2483 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1526)) * cbPerFrame._m0[3u].x)) + (_2493.x * cbMtdParam._m0[3u].x);
    float _2519 = ((_2493.y * cbMtdParam._m0[3u].x) + ((_2485 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1526)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2479 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _685)));
    float _2521 = ((_2493.z * cbMtdParam._m0[3u].x) + ((_2487 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1526)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2481 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _685)));
    float _2522 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2523 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2524 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    uint _2525 = _612 + 6u;
    float _2533 = _556 / cbSceneParam._m0[86u].x;
    float _2534 = _557 / cbSceneParam._m0[86u].y;
    vec4 _2548 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, (log2((isnan(cbSceneParam._m0[77u].w) ? _474 : (isnan(_474) ? cbSceneParam._m0[77u].w : min(_474, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2550 = _2548.x;
    float _2551 = _2548.y;
    float _2552 = _2548.z;
    float _2553 = _2548.w;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_474 > cbSceneParam._m0[78u].w)
    {
        float _2608 = isnan(_474) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _474 : min(cbSceneParam._m0[80u].w, _474));
        float _2609 = _2608 / _474;
        float _2620 = _2609 * _526;
        float _2621 = _527 * _2609;
        float _2622 = (-0.0) - _2621;
        float _2623 = _2609 * _528;
        float _2625 = (cbSceneParam._m0[77u].w * _2622) / _2608;
        float _2626 = _2625 + cbSceneParam._m0[79u].w;
        float _2627 = cbSceneParam._m0[79u].w - _2621;
        float _2633 = sqrt(((_2620 * _2620) + (_2621 * _2621)) + (_2623 * _2623));
        float _2636 = (1.0 - (cbSceneParam._m0[77u].w / _2608)) * _2633;
        float _2641 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2643 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2820;
        if (abs((_2622 - _2625) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2820 = ((((_2626 > 0.0) ? exp2(_2641 * _2626) : (2.0 - exp2(_2643 * _2626))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2636;
        }
        else
        {
            float _2764 = 1.0 / cbSceneParam._m0[80u].x;
            float _2765 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : max(_2626, _2627));
            float _2766 = isnan(_2627) ? _2626 : (isnan(_2626) ? _2627 : min(_2626, _2627));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            float _2776 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : min(_2766, 0.0));
            _2820 = ((abs(_2633 / _2622) * cbSceneParam._m0[80u].y) * ((((_2775 - _2776) * 2.0) - ((exp2(_2641 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0)))) - exp2(_2641 * (isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0))))) * _2764)) - ((exp2(_2643 * _2775) - exp2(_2643 * _2776)) * _2764))) + (_2636 * cbSceneParam._m0[80u].z);
        }
        vec4 _2822 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, 1.0), 0.0);
        float _2831 = exp2((_2820 * (-1.44269502162933349609375)) * (1.0 - _2822.w));
        float _2832 = log2(_2831);
        float _2848 = log2(_2553);
        _2645 = (exp2(_2848 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].x)) * _2822.x) / cbSceneParam._m0[78u].x)) + _2550;
        _2647 = (exp2(_2848 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].y)) * _2822.y) / cbSceneParam._m0[78u].y)) + _2551;
        _2649 = (exp2(_2848 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].z)) * _2822.z) / cbSceneParam._m0[78u].z)) + _2552;
        _2651 = _2831 * _2553;
    }
    else
    {
        _2645 = _2550;
        _2647 = _2551;
        _2649 = _2552;
        _2651 = _2553;
    }
    bool _2858;
    vec4 _2661;
    vec4 _2683;
    float _2685;
    float _2689;
    float _2690;
    float _2691;
    float _2692;
    bool _2702;
    for (;;)
    {
        _2661 = cbMatDynParam._m0[0u];
        float _2663 = roundEven(_2661.y);
        bool _2664 = _2663 == 3.0;
        float _2665 = log2(_2651);
        float _2672 = exp2(_2665 * cbSceneParam._m0[78u].x) * _2522;
        float _2673 = exp2(_2665 * cbSceneParam._m0[78u].y) * _2523;
        float _2674 = exp2(_2665 * cbSceneParam._m0[78u].z) * _2524;
        float _2681 = _542 + (-0.5);
        _2683 = cbMtdParam._m0[1u];
        _2685 = _2683.y * _2681;
        float _2688 = (_2663 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2689 = _2688 * (_2664 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2645)));
        _2690 = _2688 * (_2664 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2647)));
        _2691 = _2688 * (_2664 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2649)));
        _2692 = _2681 * 0.999000012874603271484375;
        _2702 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2702)
        {
            if ((cbInstanceData._m0[_612 + 7u].x + _2692) < 0.5)
            {
                _2858 = true;
                break;
            }
        }
        uint _2799 = _614 + uint(_2661.w);
        if ((cbInstanceData._m0[_2799].w < 1.0) && ((cbInstanceData._m0[_2799].w + _2692) < 0.5))
        {
            _2858 = true;
            break;
        }
        if ((_2685 + 1.0) < _2683.x)
        {
            _2858 = true;
            break;
        }
        _2858 = false;
        break;
    }
    float _3063;
    if (_2858)
    {
        discard_state = true;
        _3063 = 0.0;
    }
    else
    {
        _3063 = cbInstanceData._m0[_2525].w;
    }
    SV_Target.x = _2689;
    SV_Target.y = _2690;
    SV_Target.z = _2691;
    SV_Target.w = _3063;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2525].w;
    discard_exit();
}


