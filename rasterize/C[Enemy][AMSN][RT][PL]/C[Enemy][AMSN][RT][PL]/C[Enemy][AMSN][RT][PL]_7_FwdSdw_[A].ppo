#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1088;
float _3781;
float _3782;
float _3783;
float _3784;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    float _260 = log2(0.0);
    bool _263 = exp2(_260 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _264;
    float _266;
    float _268;
    if (_263)
    {
        _264 = cbMtdParam._m0[18u].x;
        _266 = cbMtdParam._m0[18u].y;
        _268 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _264 = cbMtdParam._m0[17u].x;
        _266 = cbMtdParam._m0[17u].y;
        _268 = cbMtdParam._m0[17u].z;
    }
    float _273;
    if (_263)
    {
        _273 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _273 = cbMtdParam._m0[19u].z;
    }
    float _279;
    float _281;
    if (_263)
    {
        _279 = cbMtdParam._m0[26u].x;
        _281 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _279 = cbMtdParam._m0[22u].x;
        _281 = cbMtdParam._m0[22u].y;
    }
    float _283 = _279 * TEXCOORD.x;
    float _284 = _281 * TEXCOORD.y;
    float _296 = floor(_273);
    vec4 _299 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _283) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _284) + cbTextureTilingScale._m0[6u].w, _296));
    vec4 _322 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = (((_264 * cbMtdParam._m0[19u].w) * _299.x) * cbMtdParam._m0[9u].x) * _322.x;
    float _335 = (((_266 * cbMtdParam._m0[19u].w) * _299.y) * cbMtdParam._m0[9u].y) * _322.y;
    float _339 = (((_268 * cbMtdParam._m0[19u].w) * _299.z) * cbMtdParam._m0[9u].z) * _322.z;
    vec4 _351 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _355 = _351.z;
    vec4 _368 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _283) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _284) + cbTextureTilingScale._m0[8u].w, _296));
    float _187[2];
    float _188[2];
    _187[0u] = cbMtdParam._m0[25u].x;
    _188[0u] = cbMtdParam._m0[25u].y;
    _187[1u] = cbMtdParam._m0[25u].z;
    _188[1u] = cbMtdParam._m0[25u].w;
    float _382 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _385 = uint(int(isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0))));
    float _390 = _188[_385] + _368.x;
    vec4 _409 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _283) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _284) + cbTextureTilingScale._m0[7u].w, _296));
    float _416 = (_409.x * 2.0) + (-1.0);
    float _417 = (_409.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_416, _417), vec2(_416, _417));
    float _3803 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _423 = sqrt(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))));
    float _432 = (cbMtdParam._m0[20u].x * (((_355 * 2.0) * (_409.z + _187[_385])) - _355)) + _355;
    float _436 = (cbMtdParam._m0[20u].y * ((_351.x * 2.0) + (-1.0))) + _416;
    float _437 = (cbMtdParam._m0[20u].y * ((_351.y * 2.0) + (-1.0))) + _417;
    float _440 = fma(_423, _238, fma(_437, _230 * TANGENT.x, (_216 * _208) * _436));
    float _443 = fma(_423, _239, fma(_437, _230 * TANGENT.y, (_216 * _209) * _436));
    float _446 = fma(_423, _240, fma(_437, _230 * TANGENT.z, (_216 * _210) * _436));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    float _451 = _450 * _440;
    float _452 = _450 * _443;
    float _453 = _450 * _446;
    float _3814 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _454 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3836 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _3847 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3858 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _458 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _474 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    vec4 _540 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _542 = _540.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _768 = sqrt(((_526 * _526) + (_527 * _527)) + (_528 * _528));
        float _774 = (cbMatDynParam._m0[5u].x * _768) + cbMatDynParam._m0[5u].y;
        float _3869 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _779 = (cbMatDynParam._m0[5u].z * _768) + cbMatDynParam._m0[5u].w;
        float _3880 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) - _775)) + _775) < ((_542 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _556 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _557 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _559 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _561 = _559.w;
    float _580 = fma(_453, cbSceneParam._m0[5u].z, fma(_452, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _451));
    float _583 = fma(_453, cbSceneParam._m0[6u].z, fma(_452, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _451));
    float _586 = fma(_453, cbSceneParam._m0[7u].z, fma(_452, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _451));
    vec4 _588 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _599 = (((_588.y - _454) + (_588.w * _454)) * cbMtdParam._m0[3u].x) + _454;
    uint _612 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = _612 + 9u;
    uint _615 = _614 + uint(cbMatDynParam._m0[0u].w);
    float _621 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_615].x;
    float _622 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_615].y;
    float _623 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_615].z;
    float _3891 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    vec4 _627 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _632 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _643 = (((_632.x - _458) + (_632.w * _458)) * cbMtdParam._m0[3u].x) + _458;
    float _656 = (cbMtdParam._m0[3u].x * (((_624 * _561) - _624) + _627.x)) + _624;
    float _657 = (cbMtdParam._m0[3u].x * (((_625 * _561) - _625) + _627.y)) + _625;
    float _658 = (cbMtdParam._m0[3u].x * (((_626 * _561) - _626) + _627.z)) + _626;
    float _659 = 1.0 - _643;
    float _660 = _659 * _656;
    float _661 = _659 * _657;
    float _662 = _659 * _658;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _643;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _643;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _643;
    float _670 = _667 + 0.039999999105930328369140625;
    float _672 = _668 + 0.039999999105930328369140625;
    float _673 = _669 + 0.039999999105930328369140625;
    vec4 _682 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _556, cbSceneParam._m0[86u].y * _557));
    float _685 = _682.x * TEXCOORD_4;
    float _686 = dot(vec3(_451, _452, _453), vec3(_533, _534, _535));
    float _689 = _686 * 2.0;
    float _693 = (_689 * _451) - _533;
    float _694 = (_689 * _452) - _534;
    float _695 = (_689 * _453) - _535;
    float _699 = abs(dot(vec3(_533, _534, _535), vec3(_451, _452, _453)));
    float _3924 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _701 = sqrt(_599);
    float _714 = exp2((_701 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_701 * 3.0));
    float _720 = (1.0 - _714) * ((_701 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _721 = _714 * _701;
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1087;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _812 = fma(_757, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749));
        float _816 = fma(_757, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749));
        float _820 = fma(_757, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749));
        float _845 = _749 + _451;
        float _846 = _753 + _452;
        float _847 = _757 + _453;
        float _857 = fma(_847, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845)) - _812;
        float _858 = fma(_847, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845)) - _816;
        float _859 = fma(_847, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845)) - _820;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_812 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_816 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[34u].z) + ((((((_820 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _915 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_881.x + (-0.5));
        float _917 = _915 * (_881.y + (-0.5));
        float _918 = _915 * (_881.z + (-0.5));
        float _925 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_888.x + (-0.5));
        float _927 = _925 * (_888.y + (-0.5));
        float _928 = _925 * (_888.z + (-0.5));
        float _935 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_895.x + (-0.5));
        float _937 = _935 * (_895.y + (-0.5));
        float _938 = _935 * (_895.z + (-0.5));
        float _945 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_902.x + (-0.5));
        float _947 = _945 * (_902.y + (-0.5));
        float _948 = _945 * (_902.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _969 = (dot(vec3(_451, _452, _453), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _979 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3972 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_981 + 1.0))) + _986) * _949;
        float _996 = _917 * 0.5;
        float _997 = _927 * 0.5;
        float _998 = _937 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_451, _452, _453), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _4005 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1023 + 1.0))) + _1028) * _950;
        float _1038 = _918 * 0.5;
        float _1039 = _928 * 0.5;
        float _1040 = _938 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_451, _452, _453), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _4038 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1065 + 1.0))) + _1070) * _951;
        _1087 = _918;
        _1089 = _917;
        _1090 = _916;
        _1091 = _928;
        _1092 = _927;
        _1093 = _926;
        _1094 = _938;
        _1095 = _937;
        _1096 = _936;
        _1097 = _951;
        _1098 = _950;
        _1099 = _949;
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
    }
    else
    {
        _1087 = _1088;
        _1089 = _1088;
        _1090 = _1088;
        _1091 = _1088;
        _1092 = _1088;
        _1093 = _1088;
        _1094 = _1088;
        _1095 = _1088;
        _1096 = _1088;
        _1097 = _1088;
        _1098 = _1088;
        _1099 = _1088;
        _1100 = 0.0;
        _1101 = 0.0;
        _1102 = 0.0;
    }
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1131 = fma(_757, cbModelParam._m0[30u].z, fma(_753, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _749));
        float _1135 = fma(_757, cbModelParam._m0[31u].z, fma(_753, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _749));
        float _1139 = fma(_757, cbModelParam._m0[32u].z, fma(_753, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _749));
        float _1162 = _749 + _451;
        float _1163 = _753 + _452;
        float _1164 = _757 + _453;
        float _1174 = fma(_1164, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162)) - _1131;
        float _1175 = fma(_1164, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162)) - _1135;
        float _1176 = fma(_1164, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162)) - _1139;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1131 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1135 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[35u].z) + ((((((_1139 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1230 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1197.x + (-0.5));
        float _1232 = _1230 * (_1197.y + (-0.5));
        float _1233 = _1230 * (_1197.z + (-0.5));
        float _1240 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1204.x + (-0.5));
        float _1242 = _1240 * (_1204.y + (-0.5));
        float _1243 = _1240 * (_1204.z + (-0.5));
        float _1250 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1211.x + (-0.5));
        float _1252 = _1250 * (_1211.y + (-0.5));
        float _1253 = _1250 * (_1211.z + (-0.5));
        float _1260 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1218.x + (-0.5));
        float _1262 = _1260 * (_1218.y + (-0.5));
        float _1263 = _1260 * (_1218.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_451, _452, _453), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4101 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1294 + 1.0))) + _1299) * _1264;
        float _1309 = _1232 * 0.5;
        float _1310 = _1242 * 0.5;
        float _1311 = _1252 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_451, _452, _453), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4134 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1336 + 1.0))) + _1341) * _1265;
        float _1351 = _1233 * 0.5;
        float _1352 = _1243 * 0.5;
        float _1353 = _1253 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_451, _452, _453), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4167 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1378 + 1.0))) + _1383) * _1266;
        _1400 = _1233;
        _1401 = _1232;
        _1402 = _1231;
        _1403 = _1243;
        _1404 = _1242;
        _1405 = _1241;
        _1406 = _1253;
        _1407 = _1252;
        _1408 = _1251;
        _1409 = _1266;
        _1410 = _1265;
        _1411 = _1264;
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1088;
        _1401 = _1088;
        _1402 = _1088;
        _1403 = _1088;
        _1404 = _1088;
        _1405 = _1088;
        _1406 = _1088;
        _1407 = _1088;
        _1408 = _1088;
        _1409 = _1088;
        _1410 = _1088;
        _1411 = _1088;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1100)) + _1100;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1101)) + _1101;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1447 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1424));
    float _1468 = _693 * 0.5;
    float _1469 = _694 * 0.5;
    float _1470 = _695 * 0.5;
    float _1471 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1474 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1477 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1511;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1484 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1087, _1091, _1094, _1097));
        float _1488 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1492 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1499 = dot(vec4(cbModelParam._m0[39u]), vec4(_1468, _1469, _1470, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1522;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1513 = dot(vec4(cbModelParam._m0[40u]), vec4(_1468, _1469, _1470, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1526 = (_1522 * cbModelParam._m0[1u].x) + (_1511 * (1.0 - cbModelParam._m0[1u].x));
    float _1536 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _599);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1536 : min(cbModelParam._m0[25u].z, _1536));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1586 = fma(_757, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749)) + cbModelParam._m0[13u].w;
        float _1590 = fma(_757, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749)) + cbModelParam._m0[14u].w;
        float _1594 = fma(_757, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749)) + cbModelParam._m0[15u].w;
        float _1597 = fma(_695, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693));
        float _1600 = fma(_695, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693));
        float _1603 = fma(_695, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693));
        float _1631;
        if (_1597 > 0.0)
        {
            _1631 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1631 = frontier_phi_25_23_ladder;
        }
        float _1803;
        if (_1600 > 0.0)
        {
            _1803 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1803 = frontier_phi_34_30_ladder;
        }
        float _2099;
        if (_1603 > 0.0)
        {
            _2099 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2099 = frontier_phi_46_41_ladder;
        }
        float _2101 = isnan(_1803) ? _1631 : (isnan(_1631) ? _1803 : min(_1631, _1803));
        float _2102 = isnan(_2099) ? _2101 : (isnan(_2101) ? _2099 : min(_2101, _2099));
        float _2106 = (_2102 * _1597) + _1586;
        float _2107 = (_2102 * _1600) + _1590;
        float _2108 = (_2102 * _1603) + _1594;
        float _2109 = _2102 * 9.9999997473787516355514526367188e-05;
        float _2111 = (-1.0) - _2109;
        float _2113 = _2109 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2108 > _2113) || ((_2108 < _2111) || ((_2107 > _2113) || ((_2107 < _2111) || ((_2106 < _2111) || (_2106 > _2113))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2108, cbModelParam._m0[9u].z, fma(_2107, cbModelParam._m0[9u].y, _2106 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2108, cbModelParam._m0[10u].z, fma(_2107, cbModelParam._m0[10u].y, _2106 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2108, cbModelParam._m0[11u].z, fma(_2107, cbModelParam._m0[11u].y, _2106 * cbModelParam._m0[11u].x))), _1537);
            frontier_phi_24_46_ladder = _2253.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2253.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2253.x * cbModelParam._m0[1u].y;
        }
        _1619 = frontier_phi_24_46_ladder_2;
        _1621 = frontier_phi_24_46_ladder_1;
        _1623 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_693, _694, _695), _1537);
        _1619 = _1607.x * cbModelParam._m0[1u].y;
        _1621 = _1607.y * cbModelParam._m0[1u].y;
        _1623 = _1607.z * cbModelParam._m0[1u].y;
    }
    float _1627 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _599);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1627 : min(cbModelParam._m0[25u].w, _1627));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1681 = fma(_757, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749)) + cbModelParam._m0[21u].w;
        float _1685 = fma(_757, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749)) + cbModelParam._m0[22u].w;
        float _1689 = fma(_757, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749)) + cbModelParam._m0[23u].w;
        float _1692 = fma(_695, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693));
        float _1695 = fma(_695, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693));
        float _1698 = fma(_695, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693));
        float _1808;
        if (_1692 > 0.0)
        {
            _1808 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1808 = frontier_phi_36_32_ladder;
        }
        float _2126;
        if (_1695 > 0.0)
        {
            _2126 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2126 = frontier_phi_48_43_ladder;
        }
        float _2464;
        if (_1698 > 0.0)
        {
            _2464 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_58_55_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_58_55_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_58_55_ladder = 5000.0;
            }
            _2464 = frontier_phi_58_55_ladder;
        }
        float _2466 = isnan(_2126) ? _1808 : (isnan(_1808) ? _2126 : min(_1808, _2126));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1692) + _1681;
        float _2472 = (_2467 * _1695) + _1685;
        float _2473 = (_2467 * _1698) + _1689;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2475 = (-1.0) - _2474;
        float _2477 = _2474 + 1.0;
        float frontier_phi_33_58_ladder;
        float frontier_phi_33_58_ladder_1;
        float frontier_phi_33_58_ladder_2;
        if ((_2473 > _2477) || ((_2473 < _2475) || ((_2472 > _2477) || ((_2472 < _2475) || ((_2471 < _2475) || (_2471 > _2477))))))
        {
            frontier_phi_33_58_ladder = 0.0;
            frontier_phi_33_58_ladder_1 = 0.0;
            frontier_phi_33_58_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2473, cbModelParam._m0[17u].z, fma(_2472, cbModelParam._m0[17u].y, _2471 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2473, cbModelParam._m0[18u].z, fma(_2472, cbModelParam._m0[18u].y, _2471 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2473, cbModelParam._m0[19u].z, fma(_2472, cbModelParam._m0[19u].y, _2471 * cbModelParam._m0[19u].x))), _1628);
            frontier_phi_33_58_ladder = _2595.z * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_1 = _2595.y * cbModelParam._m0[1u].z;
            frontier_phi_33_58_ladder_2 = _2595.x * cbModelParam._m0[1u].z;
        }
        _1717 = frontier_phi_33_58_ladder_2;
        _1719 = frontier_phi_33_58_ladder_1;
        _1721 = frontier_phi_33_58_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_693, _694, _695), _1628);
        _1717 = _1701.x * cbModelParam._m0[1u].z;
        _1719 = _1701.y * cbModelParam._m0[1u].z;
        _1721 = _1701.z * cbModelParam._m0[1u].z;
    }
    float _1734 = (((_720 * _670) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1717 - _1619)) + _1619);
    float _1736 = (((_720 * _672) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1719 - _1621)) + _1621);
    float _1738 = (((_720 * _673) + _721) * _685) * ((cbModelParam._m0[1u].w * (_1721 - _1623)) + _1623);
    float _1741 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, _1734 * cbSceneParam._m0[91u].x));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1794 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1795 = _1782 / _1794;
    float _1796 = _1786 / _1794;
    float _1797 = _1790 / _1794;
    float _1944;
    float _1945;
    float _1946;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1824 = ((uint(_1797 > cbSceneParam._m0[59u].y) + uint(_1797 > cbSceneParam._m0[59u].x)) + uint(_1797 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1825 = _1824 + 43u;
        uint _1833 = _1824 + 44u;
        uint _1841 = _1824 + 45u;
        uint _1849 = _1824 + 46u;
        float _1860 = fma(_1794, cbSceneParam._m0[_1825].w, fma(_1790, cbSceneParam._m0[_1825].z, fma(_1786, cbSceneParam._m0[_1825].y, _1782 * cbSceneParam._m0[_1825].x)));
        float _1864 = fma(_1794, cbSceneParam._m0[_1833].w, fma(_1790, cbSceneParam._m0[_1833].z, fma(_1786, cbSceneParam._m0[_1833].y, _1782 * cbSceneParam._m0[_1833].x)));
        float _1872 = fma(_1794, cbSceneParam._m0[_1849].w, fma(_1790, cbSceneParam._m0[_1849].z, fma(_1786, cbSceneParam._m0[_1849].y, _1782 * cbSceneParam._m0[_1849].x)));
        float _1877 = cbSceneParam._m0[33u].z * _1872;
        float _1879 = cbSceneParam._m0[33u].w * _1872;
        float _1882 = fma(_1794, cbSceneParam._m0[_1841].w, fma(_1790, cbSceneParam._m0[_1841].z, fma(_1786, cbSceneParam._m0[_1841].y, _1782 * cbSceneParam._m0[_1841].x))) / _1872;
        float _1930 = (cbSceneParam._m0[33u].x - sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797))) * cbSceneParam._m0[33u].y;
        float _4293 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1937 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1877 + _1860) / _1872, (_1879 + _1864) / _1872), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1879 + _1860) / _1872, (_1864 - _1877) / _1872), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 - _1877) / _1872, (_1864 - _1879) / _1872), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 - _1879) / _1872, (_1877 + _1864) / _1872), _1882), 0.0)).x), vec4(0.25)));
        _1944 = 1.0 - (_1937 * cbSceneParam._m0[34u].x);
        _1945 = 1.0 - (_1937 * cbSceneParam._m0[34u].y);
        _1946 = 1.0 - (_1937 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1944 = 1.0;
        _1945 = 1.0;
        _1946 = 1.0;
    }
    float _2010;
    float _2012;
    float _2014;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1998 = fma(_1794, cbSceneParam._m0[63u].w, fma(_1790, cbSceneParam._m0[63u].z, fma(_1786, cbSceneParam._m0[63u].y, _1782 * cbSceneParam._m0[63u].x)));
        float _1999 = fma(_1794, cbSceneParam._m0[60u].w, fma(_1790, cbSceneParam._m0[60u].z, fma(_1786, cbSceneParam._m0[60u].y, _1782 * cbSceneParam._m0[60u].x))) / _1998;
        float _2000 = fma(_1794, cbSceneParam._m0[61u].w, fma(_1790, cbSceneParam._m0[61u].z, fma(_1786, cbSceneParam._m0[61u].y, _1782 * cbSceneParam._m0[61u].x))) / _1998;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1999 >= cbSceneParam._m0[64u].x) && (_2000 >= cbSceneParam._m0[64u].y)) && (_1999 <= cbSceneParam._m0[64u].z)) && (_2000 <= cbSceneParam._m0[64u].w))
        {
            float _2139 = fma(_1794, cbSceneParam._m0[62u].w, fma(_1790, cbSceneParam._m0[62u].z, fma(_1786, cbSceneParam._m0[62u].y, _1782 * cbSceneParam._m0[62u].x))) / _1998;
            float _2143 = isnan(cbSceneParam._m0[41u].w) ? _2139 : (isnan(_2139) ? cbSceneParam._m0[41u].w : max(_2139, cbSceneParam._m0[41u].w));
            float _2186 = (cbSceneParam._m0[33u].x - sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797))) * cbSceneParam._m0[33u].y;
            float _4309 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
            float _2193 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1999, cbSceneParam._m0[33u].w + _2000), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1999, _2000 - cbSceneParam._m0[33u].z), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1999 - cbSceneParam._m0[33u].z, _2000 - cbSceneParam._m0[33u].w), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1999 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2000), _2143), 0.0)).x), vec4(0.25)));
            float _2197 = 1.0 - (_2193 * cbSceneParam._m0[34u].x);
            float _2198 = 1.0 - (_2193 * cbSceneParam._m0[34u].y);
            float _2199 = 1.0 - (_2193 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2199) ? _1946 : (isnan(_1946) ? _2199 : min(_1946, _2199));
            frontier_phi_45_44_ladder_1 = isnan(_2198) ? _1945 : (isnan(_1945) ? _2198 : min(_1945, _2198));
            frontier_phi_45_44_ladder_2 = isnan(_2197) ? _1944 : (isnan(_1944) ? _2197 : min(_1944, _2197));
        }
        else
        {
            frontier_phi_45_44_ladder = _1946;
            frontier_phi_45_44_ladder_1 = _1945;
            frontier_phi_45_44_ladder_2 = _1944;
        }
        _2010 = frontier_phi_45_44_ladder_2;
        _2012 = frontier_phi_45_44_ladder_1;
        _2014 = frontier_phi_45_44_ladder;
    }
    else
    {
        _2010 = _1944;
        _2012 = _1945;
        _2014 = _1946;
    }
    uvec4 _2019 = floatBitsToUint(cbInstanceData._m0[_612 + 5u]);
    uint _2021 = _2019.x * 14u;
    uint _2022 = _2021 + 13u;
    float _2029 = _685 + (-1.0);
    float _2034 = (cbLight._m0[_2022].x * _2029) + 1.0;
    float _2035 = (cbLight._m0[_2022].y * _2029) + 1.0;
    float _2036 = (cbLight._m0[_2022].z * _2029) + 1.0;
    float _2037 = (cbLight._m0[_2022].w * _2029) + 1.0;
    uint _2038 = _2021 + 5u;
    float _2044 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2048 = _2021 + 4u;
    float _2058 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2062 = _2021 | 1u;
    float _2073 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_451, _452, _453));
    float _2076 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_451, _452, _453));
    float _4345 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _4356 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2083 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2090 = ((cbLight._m0[_2038].x * _2044) * _2083) + (((cbLight._m0[_2048].x * _2010) * _2058) * _2081);
    float _2091 = ((_2044 * cbLight._m0[_2038].y) * _2083) + (((cbLight._m0[_2048].y * _2012) * _2058) * _2081);
    float _2092 = ((_2044 * cbLight._m0[_2038].z) * _2083) + (((cbLight._m0[_2048].z * _2014) * _2058) * _2081);
    uvec4 _2096 = floatBitsToUint(cbLight._m0[_2021 + 12u]);
    bool _2098 = _2096.x == 0u;
    float _2200;
    float _2202;
    float _2204;
    if (_2098)
    {
        _2200 = _2090;
        _2202 = _2091;
        _2204 = _2092;
    }
    else
    {
        uint _2208 = _2021 + 6u;
        float _2224 = (dot(vec3(cbLight._m0[_2021 + 2u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4367 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2227 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2200 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _2090;
        _2202 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _2091;
        _2204 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _2092;
    }
    bool _2207 = _2096.y == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2207)
    {
        _2262 = _2200;
        _2264 = _2202;
        _2266 = _2204;
    }
    else
    {
        uint _2435 = _2021 + 7u;
        float _2451 = (dot(vec3(cbLight._m0[_2021 + 3u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _2452 = _2451 * _2451;
        float _4383 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2453 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2454 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2262 = (((cbLight._m0[_2435].x * 0.3183098733425140380859375) * _2453) * _2454) + _2200;
        _2264 = (((cbLight._m0[_2435].y * 0.3183098733425140380859375) * _2453) * _2454) + _2202;
        _2266 = (((cbLight._m0[_2435].z * 0.3183098733425140380859375) * _2453) * _2454) + _2204;
    }
    uint _2269 = _2021 + 8u;
    float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _599) * 0.949999988079071044921875);
    float _2283 = _2282 * _2282;
    float _2284 = cbLight._m0[_2021].x + _533;
    float _2285 = cbLight._m0[_2021].y + _534;
    float _2286 = cbLight._m0[_2021].z + _535;
    float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
    float _2291 = _2290 * _2284;
    float _2292 = _2290 * _2285;
    float _2293 = _2290 * _2286;
    float _2294 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2021].xyz));
    float _4399 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _2298 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2299 = dot(vec3(_451, _452, _453), vec3(_2291, _2292, _2293));
    float _4421 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2303 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2291, _2292, _2293));
    float _4432 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2307 = _2283 * _2283;
    float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
    float _2319 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2320 = 0.959999978542327880859375 - _667;
    float _2322 = 0.959999978542327880859375 - _668;
    float _2323 = 0.959999978542327880859375 - _669;
    float _2330 = 1.0 - _2283;
    float _2341 = (0.5 / (((_2298 * ((_2297 * _2330) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_2298 * _2330) + _2283) * _2297))) * _2297;
    float _4443 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2343 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
    uint _2357 = _2021 + 9u;
    float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _599) * 0.949999988079071044921875);
    float _2369 = _2368 * _2368;
    float _2370 = cbLight._m0[_2062].x + _533;
    float _2371 = cbLight._m0[_2062].y + _534;
    float _2372 = cbLight._m0[_2062].z + _535;
    float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
    float _2377 = _2376 * _2370;
    float _2378 = _2376 * _2371;
    float _2379 = _2376 * _2372;
    float _2380 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2062].xyz));
    float _4454 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2384 = dot(vec3(_451, _452, _453), vec3(_2377, _2378, _2379));
    float _4465 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2388 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2377, _2378, _2379));
    float _4476 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2392 = _2369 * _2369;
    float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
    float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2410 = 1.0 - _2369;
    float _2420 = (0.5 / (((_2298 * ((_2383 * _2410) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2298 * _2410) + _2369) * _2383))) * _2383;
    float _4487 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2422 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
    float _2432 = (((((_2403 * _2320) + _670) * cbLight._m0[_2357].x) * _2422) * _2044) + ((((cbLight._m0[_2269].x * _2010) * ((_2319 * _2320) + _670)) * _2343) * _2058);
    float _2433 = (((((_2403 * _2322) + _672) * cbLight._m0[_2357].y) * _2422) * _2044) + ((((cbLight._m0[_2269].y * _2012) * ((_2319 * _2322) + _672)) * _2343) * _2058);
    float _2434 = (((((_2403 * _2323) + _673) * cbLight._m0[_2357].z) * _2422) * _2044) + ((((cbLight._m0[_2269].z * _2014) * ((_2319 * _2323) + _673)) * _2343) * _2058);
    float _2490;
    float _2492;
    float _2494;
    if (_2098)
    {
        _2490 = _2432;
        _2492 = _2433;
        _2494 = _2434;
    }
    else
    {
        uint _2496 = _2021 + 2u;
        uint _2500 = _2021 + 10u;
        float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _599) * 0.949999988079071044921875);
        float _2515 = _2514 * _2514;
        float _2516 = cbLight._m0[_2496].x + _533;
        float _2517 = cbLight._m0[_2496].y + _534;
        float _2518 = cbLight._m0[_2496].z + _535;
        float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
        float _2523 = _2522 * _2516;
        float _2524 = _2522 * _2517;
        float _2525 = _2522 * _2518;
        float _2526 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2496].xyz));
        float _4498 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2530 = dot(vec3(_451, _452, _453), vec3(_2523, _2524, _2525));
        float _4509 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2534 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2523, _2524, _2525));
        float _4520 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2538 = _2515 * _2515;
        float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
        float _2549 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
        float _2556 = 1.0 - _2515;
        float _2566 = (0.5 / (((_2298 * ((_2529 * _2556) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2298 * _2556) + _2515) * _2529))) * _2529;
        float _4531 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2490 = (((((_2549 * _2320) + _670) * cbLight._m0[_2500].x) * _2568) * _2569) + _2432;
        _2492 = (((((_2549 * _2322) + _672) * cbLight._m0[_2500].y) * _2568) * _2569) + _2433;
        _2494 = (((((_2549 * _2323) + _673) * cbLight._m0[_2500].z) * _2568) * _2569) + _2434;
    }
    float _2600;
    float _2602;
    float _2604;
    if (_2207)
    {
        _2600 = _2490;
        _2602 = _2492;
        _2604 = _2494;
    }
    else
    {
        uint _2611 = _2021 + 3u;
        uint _2615 = _2021 + 11u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _599) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _533;
        float _2632 = cbLight._m0[_2611].y + _534;
        float _2633 = cbLight._m0[_2611].z + _535;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2611].xyz));
        float _4547 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2645 = dot(vec3(_451, _452, _453), vec3(_2638, _2639, _2640));
        float _4558 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4569 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2671 = 1.0 - _2630;
        float _2681 = (0.5 / (((_2298 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2298 * _2671) + _2630) * _2644))) * _2644;
        float _4580 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2600 = (((((_2664 * _2320) + _670) * cbLight._m0[_2615].x) * _2683) * _2684) + _2490;
        _2602 = (((((_2664 * _2322) + _672) * cbLight._m0[_2615].y) * _2683) * _2684) + _2492;
        _2604 = (((((_2664 * _2323) + _673) * cbLight._m0[_2615].z) * _2683) * _2684) + _2494;
    }
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_2019.y == 0u)
    {
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.x;
        uint _2717 = uint((float(_2705.y) * floor(float(uint(cbSceneParam._m0[85u].y * _557) / _2706))) + floor(float(uint(cbSceneParam._m0[85u].x * _556) / _2706)));
        float _2727 = (log2(_1797 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2728 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        uint _2731 = uint(isnan(14.0) ? _2728 : (isnan(_2728) ? 14.0 : min(_2728, 14.0)));
        uvec4 _2736 = texelFetch(g_lightClusterGridBuffer, int(((_2731 << 2u) + (_2717 << 6u)) >> 2u));
        uint _2737 = _2736.x;
        uint _2738 = _2705.z;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((((1u << ((_2738 >> 4u) & 15u)) + 4294967295u) & _2737) == 0u) || ((_2738 & 240u) == 0u))
        {
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
        }
        else
        {
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            uint _2992 = 0u;
            uint _3001;
            bool _3002;
            for (;;)
            {
                _3001 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_2992 << 2u)) >> 2u)).x;
                _3002 = _3001 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_3002)
                {
                    frontier_phi_79_pred = _2989;
                    frontier_phi_79_pred_1 = _2991;
                    frontier_phi_79_pred_2 = _2990;
                    frontier_phi_79_pred_3 = _2988;
                    frontier_phi_79_pred_4 = _2987;
                    frontier_phi_79_pred_5 = _2986;
                }
                else
                {
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    uint _3137;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _3001;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    for (;;)
                    {
                        uint _3141 = uint(findLSB(_3137)) + (_2992 << 5u);
                        uint _3138 = (_3137 + 4294967295u) & _3137;
                        uint _3143 = _3141 * 48u;
                        vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3163 = (_3141 * 48u) + 4u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3182 = (_3141 * 48u) + 8u;
                        vec3 _3193 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x));
                        float _3197 = _3157.x - _1795;
                        float _3198 = _3157.y - _1796;
                        float _3199 = _3157.z - _1797;
                        float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                        float _3203 = inversesqrt(_3200);
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3207 = dot(vec3(_580, _583, _586), vec3(_3204, _3205, _3206));
                        float _3212 = 1.0 - (_3200 * _3157.w);
                        float _4606 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3214 = sqrt(_3200) * _3176.w;
                        float _3217 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3207) + _3218;
                        float _3224 = _3214 * _3214;
                        float _3228 = ((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3213) / ((_3224 * 0.699999988079071044921875) + 1.0);
                        float _3232 = (-0.0) - _1795;
                        float _3233 = (-0.0) - _1796;
                        float _3234 = (-0.0) - _1797;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3248 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                        float _3249 = 1.0 - _701;
                        float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                        float _3257 = _3256 * _3256;
                        float _3258 = _3257 * _3257;
                        float _3259 = _3239 + _3204;
                        float _3260 = _3240 + _3205;
                        float _3261 = _3241 + _3206;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3269 = dot(vec3(_580, _583, _586), vec3(_3239, _3240, _3241));
                        float _4622 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3273 = dot(vec3(_580, _583, _586), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                        float _4633 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                        float _3281 = _3217 * _3257;
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3207) + _3282;
                        float _4644 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3287 = 1.0 - _3257;
                        float _3297 = (0.5 / (((_3286 * ((_3272 * _3287) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3257) * _3272))) * _3286;
                        float _4655 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3308 = (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3280 * _3280) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125))) * _3213;
                        _3061 = (_3228 * _3176.x) + _3134;
                        _3062 = (_3228 * _3176.y) + _3135;
                        _3063 = (_3228 * _3176.z) + _3136;
                        _3058 = (_3308 * _3193.x) + _3131;
                        _3059 = (_3308 * _3193.y) + _3132;
                        _3060 = (_3308 * _3193.z) + _3133;
                        if (_3138 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3138;
                        }
                    }
                    frontier_phi_79_pred = _3061;
                    frontier_phi_79_pred_1 = _3063;
                    frontier_phi_79_pred_2 = _3062;
                    frontier_phi_79_pred_3 = _3060;
                    frontier_phi_79_pred_4 = _3059;
                    frontier_phi_79_pred_5 = _3058;
                }
                _2841 = frontier_phi_79_pred;
                _2845 = frontier_phi_79_pred_1;
                _2843 = frontier_phi_79_pred_2;
                _2839 = frontier_phi_79_pred_3;
                _2837 = frontier_phi_79_pred_4;
                _2835 = frontier_phi_79_pred_5;
                uint _2993 = _2992 + 1u;
                if (_2993 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2986 = _2835;
                    _2987 = _2837;
                    _2988 = _2839;
                    _2989 = _2841;
                    _2990 = _2843;
                    _2991 = _2845;
                    _2992 = _2993;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
        }
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.z;
        uint _2851 = (_2849 >> 8u) & 15u;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        if (((4294967295u << _2851) & _2737) == 0u)
        {
            _2954 = _2834;
            _2956 = _2836;
            _2958 = _2838;
            _2960 = _2840;
            _2962 = _2842;
            _2964 = _2844;
        }
        else
        {
            float _2979 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
            float _2980 = _2979 * _1795;
            float _2981 = _2979 * _1796;
            float _2982 = _2979 * _1797;
            float frontier_phi_71_72_ladder;
            float frontier_phi_71_72_ladder_1;
            float frontier_phi_71_72_ladder_2;
            float frontier_phi_71_72_ladder_3;
            float frontier_phi_71_72_ladder_4;
            float frontier_phi_71_72_ladder_5;
            if (_2851 < ((_2849 >> 12u) & 15u))
            {
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _3114 = _2834;
                float _3115 = _2836;
                float _3116 = _2838;
                float _3117 = _2840;
                float _3118 = _2842;
                float _3119 = _2844;
                uint _3120 = _2851;
                uint _3129;
                bool _3130;
                for (;;)
                {
                    _3129 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                    _3130 = _3129 == 0u;
                    float frontier_phi_90_pred;
                    float frontier_phi_90_pred_1;
                    float frontier_phi_90_pred_2;
                    float frontier_phi_90_pred_3;
                    float frontier_phi_90_pred_4;
                    float frontier_phi_90_pred_5;
                    if (_3130)
                    {
                        frontier_phi_90_pred = _3116;
                        frontier_phi_90_pred_1 = _3117;
                        frontier_phi_90_pred_2 = _3119;
                        frontier_phi_90_pred_3 = _3118;
                        frontier_phi_90_pred_4 = _3115;
                        frontier_phi_90_pred_5 = _3114;
                    }
                    else
                    {
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3335 = _3114;
                        float _3336 = _3115;
                        float _3337 = _3116;
                        float _3338 = _3117;
                        float _3339 = _3118;
                        float _3340 = _3119;
                        uint _3341 = _3129;
                        uint _3342;
                        vec4 _3367;
                        float _3368;
                        vec4 _3383;
                        vec3 _3395;
                        vec4 _3411;
                        vec4 _3426;
                        float _3473;
                        bool _3474;
                        for (;;)
                        {
                            uint _3352 = ((_3120 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3341));
                            _3342 = (_3341 + 4294967295u) & _3341;
                            uint _3354 = _3352 * 40u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3368 = _3367.w;
                            uint _3370 = (_3352 * 40u) + 4u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3352 * 40u) + 8u;
                            _3395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x));
                            uint _3398 = (_3352 * 40u) + 16u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3352 * 40u) + 20u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3429 = (_3352 * 40u) + 24u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3448 = (_3352 * 40u) + 28u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3473 = fma(_1797, _3461.z, fma(_1796, _3461.y, _3461.x * _1795)) + _3461.w;
                            _3474 = !((fma(_1797, _3442.z, fma(_1796, _3442.y, _3442.x * _1795)) + _3442.w) <= 0.0);
                            float frontier_phi_96_pred;
                            float frontier_phi_96_pred_1;
                            float frontier_phi_96_pred_2;
                            float frontier_phi_96_pred_3;
                            float frontier_phi_96_pred_4;
                            float frontier_phi_96_pred_5;
                            if (_3474)
                            {
                                float _3501 = _3367.x - _1795;
                                float _3502 = _3367.y - _1796;
                                float _3503 = _3367.z - _1797;
                                float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                                float _3507 = inversesqrt(_3504);
                                float _3508 = _3507 * _3501;
                                float _3509 = _3507 * _3502;
                                float _3510 = _3507 * _3503;
                                float _3514 = 1.0 - (_3504 / (_3368 * _3368));
                                float _4666 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3519 = sqrt(_3504) * _3383.w;
                                float _3521 = 1.39999997615814208984375 / (_3519 + 1.39999997615814208984375);
                                float _3522 = _3521 * _3521;
                                float _3525 = ((1.0 - _3522) * dot(vec3(_3508, _3509, _3510), vec3(_580, _583, _586))) + _3522;
                                float _3528 = _3519 * _3519;
                                float _3532 = (fma(_1797, _3411.z, fma(_1796, _3411.y, _3411.x * _1795)) + _3411.w) / _3473;
                                float _3533 = (fma(_1797, _3426.z, fma(_1796, _3426.y, _3426.x * _1795)) + _3426.w) / _3473;
                                float _3537 = 1.0 - dot(vec2(_3532, _3533), vec2(_3532, _3533));
                                float _4682 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3539 = _3538 * (((isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))) * _3515) / ((_3528 * 0.699999988079071044921875) + 1.0));
                                float _3551 = exp2(log2(1.0 / ((_3528 * 3.5) + 5.0)) * 0.25);
                                float _3552 = 1.0 - _701;
                                float _3559 = sqrt(1.0 - ((1.0 - (_3552 * _3552)) * (1.0 - (_3551 * _3551))));
                                float _3560 = _3559 * _3559;
                                float _3561 = _3560 * _3560;
                                float _3562 = _3508 - _2980;
                                float _3563 = _3509 - _2981;
                                float _3564 = _3510 - _2982;
                                float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                                float _3572 = dot(vec3(_580, _583, _586), vec3((-0.0) - _2980, (-0.0) - _2981, (-0.0) - _2982));
                                float _4693 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3576 = dot(vec3(_580, _583, _586), vec3(_3568 * _3562, _3568 * _3563, _3568 * _3564));
                                float _4704 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3583 = ((_3579 * _3579) * (_3561 + (-1.0))) + 1.0;
                                float _3584 = _3521 * _3560;
                                float _3585 = _3584 * _3584;
                                float _3591 = ((1.0 - _3585) * dot(vec3(_580, _583, _586), vec3(_3508, _3509, _3510))) + _3585;
                                float _4715 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3593 = 1.0 - _3560;
                                float _3603 = (0.5 / (((_3592 * ((_3575 * _3593) + _3560)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3560) * _3575))) * _3592;
                                float _4726 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3613 = (_3538 * _3515) * (((_3561 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3583 * _3583) * ((_3528 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_96_pred = _3539 * _3383.z;
                                frontier_phi_96_pred_1 = _3539 * _3383.y;
                                frontier_phi_96_pred_2 = _3539 * _3383.x;
                                frontier_phi_96_pred_3 = _3613 * _3395.z;
                                frontier_phi_96_pred_4 = _3613 * _3395.y;
                                frontier_phi_96_pred_5 = _3613 * _3395.x;
                            }
                            else
                            {
                                frontier_phi_96_pred = 0.0;
                                frontier_phi_96_pred_1 = 0.0;
                                frontier_phi_96_pred_2 = 0.0;
                                frontier_phi_96_pred_3 = 0.0;
                                frontier_phi_96_pred_4 = 0.0;
                                frontier_phi_96_pred_5 = 0.0;
                            }
                            _3622 = frontier_phi_96_pred;
                            _3621 = frontier_phi_96_pred_1;
                            _3620 = frontier_phi_96_pred_2;
                            _3619 = frontier_phi_96_pred_3;
                            _3618 = frontier_phi_96_pred_4;
                            _3617 = frontier_phi_96_pred_5;
                            _3325 = _3620 + _3338;
                            _3326 = _3621 + _3339;
                            _3327 = _3622 + _3340;
                            _3322 = _3617 + _3335;
                            _3323 = _3618 + _3336;
                            _3324 = _3619 + _3337;
                            if (_3342 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3342;
                                continue;
                            }
                        }
                        frontier_phi_90_pred = _3324;
                        frontier_phi_90_pred_1 = _3325;
                        frontier_phi_90_pred_2 = _3327;
                        frontier_phi_90_pred_3 = _3326;
                        frontier_phi_90_pred_4 = _3323;
                        frontier_phi_90_pred_5 = _3322;
                    }
                    _2959 = frontier_phi_90_pred;
                    _2961 = frontier_phi_90_pred_1;
                    _2965 = frontier_phi_90_pred_2;
                    _2963 = frontier_phi_90_pred_3;
                    _2957 = frontier_phi_90_pred_4;
                    _2955 = frontier_phi_90_pred_5;
                    uint _3121 = _3120 + 1u;
                    if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3114 = _2955;
                        _3115 = _2957;
                        _3116 = _2959;
                        _3117 = _2961;
                        _3118 = _2963;
                        _3119 = _2965;
                        _3120 = _3121;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_71_72_ladder = _2963;
                frontier_phi_71_72_ladder_1 = _2965;
                frontier_phi_71_72_ladder_2 = _2961;
                frontier_phi_71_72_ladder_3 = _2959;
                frontier_phi_71_72_ladder_4 = _2957;
                frontier_phi_71_72_ladder_5 = _2955;
            }
            else
            {
                frontier_phi_71_72_ladder = _2842;
                frontier_phi_71_72_ladder_1 = _2844;
                frontier_phi_71_72_ladder_2 = _2840;
                frontier_phi_71_72_ladder_3 = _2838;
                frontier_phi_71_72_ladder_4 = _2836;
                frontier_phi_71_72_ladder_5 = _2834;
            }
            _2954 = frontier_phi_71_72_ladder_5;
            _2956 = frontier_phi_71_72_ladder_4;
            _2958 = frontier_phi_71_72_ladder_3;
            _2960 = frontier_phi_71_72_ladder_2;
            _2962 = frontier_phi_71_72_ladder;
            _2964 = frontier_phi_71_72_ladder_1;
        }
        float _2969 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
        _2749 = (_2969 * _2960) + _2262;
        _2751 = (_2969 * _2962) + _2264;
        _2753 = (_2969 * _2964) + _2266;
        _2755 = ((_2954 * _670) * _2969) + _2600;
        _2757 = ((_2956 * _672) * _2969) + _2602;
        _2759 = ((_2958 * _673) * _2969) + _2604;
    }
    else
    {
        _2749 = _2262;
        _2751 = _2264;
        _2753 = _2266;
        _2755 = _2600;
        _2757 = _2602;
        _2759 = _2604;
    }
    vec4 _2765 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4742 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4753 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4764 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _2789 = (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2749 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _685))) + ((_2755 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1526)) * cbPerFrame._m0[3u].x)) + (_2765.x * cbMtdParam._m0[3u].x);
    float _2791 = ((_2765.y * cbMtdParam._m0[3u].x) + ((_2757 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1526)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2751 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _685)));
    float _2793 = ((_2765.z * cbMtdParam._m0[3u].x) + ((_2759 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1526)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2753 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _685)));
    float _2794 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
    float _2795 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2796 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    uint _2797 = _612 + 6u;
    float _2805 = _556 / cbSceneParam._m0[86u].x;
    float _2806 = _557 / cbSceneParam._m0[86u].y;
    vec4 _2820 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, (log2((isnan(cbSceneParam._m0[77u].w) ? _474 : (isnan(_474) ? cbSceneParam._m0[77u].w : min(_474, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2822 = _2820.x;
    float _2823 = _2820.y;
    float _2824 = _2820.z;
    float _2825 = _2820.w;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    if (_474 > cbSceneParam._m0[78u].w)
    {
        float _2859 = isnan(_474) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _474 : min(cbSceneParam._m0[80u].w, _474));
        float _2860 = _2859 / _474;
        float _2871 = _2860 * _526;
        float _2872 = _527 * _2860;
        float _2873 = (-0.0) - _2872;
        float _2874 = _2860 * _528;
        float _2876 = (cbSceneParam._m0[77u].w * _2873) / _2859;
        float _2877 = _2876 + cbSceneParam._m0[79u].w;
        float _2878 = cbSceneParam._m0[79u].w - _2872;
        float _2884 = sqrt(((_2871 * _2871) + (_2872 * _2872)) + (_2874 * _2874));
        float _2887 = (1.0 - (cbSceneParam._m0[77u].w / _2859)) * _2884;
        float _2892 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2894 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3071;
        if (abs((_2873 - _2876) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3071 = ((((_2877 > 0.0) ? exp2(_2892 * _2877) : (2.0 - exp2(_2894 * _2877))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2887;
        }
        else
        {
            float _3015 = 1.0 / cbSceneParam._m0[80u].x;
            float _3016 = isnan(_2878) ? _2877 : (isnan(_2877) ? _2878 : max(_2877, _2878));
            float _3017 = isnan(_2878) ? _2877 : (isnan(_2877) ? _2878 : min(_2877, _2878));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            _3071 = ((abs(_2884 / _2873) * cbSceneParam._m0[80u].y) * ((((_3026 - _3027) * 2.0) - ((exp2(_2892 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0)))) - exp2(_2892 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))))) * _3015)) - ((exp2(_2894 * _3026) - exp2(_2894 * _3027)) * _3015))) + (_2887 * cbSceneParam._m0[80u].z);
        }
        vec4 _3073 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, 1.0), 0.0);
        float _3082 = exp2((_3071 * (-1.44269502162933349609375)) * (1.0 - _3073.w));
        float _3083 = log2(_3082);
        float _3099 = log2(_2825);
        _2896 = (exp2(_3099 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].x)) * _3073.x) / cbSceneParam._m0[78u].x)) + _2822;
        _2898 = (exp2(_3099 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].y)) * _3073.y) / cbSceneParam._m0[78u].y)) + _2823;
        _2900 = (exp2(_3099 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].z)) * _3073.z) / cbSceneParam._m0[78u].z)) + _2824;
        _2902 = _3082 * _2825;
    }
    else
    {
        _2896 = _2822;
        _2898 = _2823;
        _2900 = _2824;
        _2902 = _2825;
    }
    bool _3109;
    vec4 _2912;
    vec4 _2934;
    float _2936;
    float _2940;
    float _2941;
    float _2942;
    float _2943;
    bool _2953;
    for (;;)
    {
        _2912 = cbMatDynParam._m0[0u];
        float _2914 = roundEven(_2912.y);
        bool _2915 = _2914 == 3.0;
        float _2916 = log2(_2902);
        float _2923 = exp2(_2916 * cbSceneParam._m0[78u].x) * _2794;
        float _2924 = exp2(_2916 * cbSceneParam._m0[78u].y) * _2795;
        float _2925 = exp2(_2916 * cbSceneParam._m0[78u].z) * _2796;
        float _2932 = _542 + (-0.5);
        _2934 = cbMtdParam._m0[1u];
        _2936 = _2934.y * _2932;
        float _2939 = (_2914 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2940 = _2939 * (_2915 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2896)));
        _2941 = _2939 * (_2915 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2898)));
        _2942 = _2939 * (_2915 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2900)));
        _2943 = _2932 * 0.999000012874603271484375;
        _2953 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2953)
        {
            if ((cbInstanceData._m0[_612 + 7u].x + _2943) < 0.5)
            {
                _3109 = true;
                break;
            }
        }
        uint _3050 = _614 + uint(_2912.w);
        if ((cbInstanceData._m0[_3050].w < 1.0) && ((cbInstanceData._m0[_3050].w + _2943) < 0.5))
        {
            _3109 = true;
            break;
        }
        if ((_2936 + 1.0) < _2934.x)
        {
            _3109 = true;
            break;
        }
        _3109 = false;
        break;
    }
    float _3313;
    if (_3109)
    {
        discard_state = true;
        _3313 = 0.0;
    }
    else
    {
        _3313 = cbInstanceData._m0[_2797].w;
    }
    SV_Target.x = _2940;
    SV_Target.y = _2941;
    SV_Target.z = _2942;
    SV_Target.w = _3313;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2797].w;
    discard_exit();
}


