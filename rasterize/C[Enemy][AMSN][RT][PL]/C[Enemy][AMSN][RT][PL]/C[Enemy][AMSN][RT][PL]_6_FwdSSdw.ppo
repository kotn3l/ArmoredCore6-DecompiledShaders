#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1057;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _264 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    bool _275 = exp2(log2(_264.x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _276;
    float _278;
    float _280;
    if (_275)
    {
        _276 = cbMtdParam._m0[18u].x;
        _278 = cbMtdParam._m0[18u].y;
        _280 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _276 = cbMtdParam._m0[17u].x;
        _278 = cbMtdParam._m0[17u].y;
        _280 = cbMtdParam._m0[17u].z;
    }
    float _285;
    if (_275)
    {
        _285 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _285 = cbMtdParam._m0[19u].z;
    }
    float _291;
    float _293;
    if (_275)
    {
        _291 = cbMtdParam._m0[26u].x;
        _293 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _291 = cbMtdParam._m0[22u].x;
        _293 = cbMtdParam._m0[22u].y;
    }
    float _295 = _291 * TEXCOORD.x;
    float _296 = _293 * TEXCOORD.y;
    float _308 = floor(_285);
    vec4 _311 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _295) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _296) + cbTextureTilingScale._m0[6u].w, _308));
    vec4 _333 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _341 = (((_276 * cbMtdParam._m0[19u].w) * _311.x) * cbMtdParam._m0[9u].x) * _333.x;
    float _345 = (((_278 * cbMtdParam._m0[19u].w) * _311.y) * cbMtdParam._m0[9u].y) * _333.y;
    float _349 = (((_280 * cbMtdParam._m0[19u].w) * _311.z) * cbMtdParam._m0[9u].z) * _333.z;
    vec4 _361 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _365 = _361.z;
    vec4 _378 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _295) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _296) + cbTextureTilingScale._m0[8u].w, _308));
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[25u].x;
    _184[0u] = cbMtdParam._m0[25u].y;
    _183[1u] = cbMtdParam._m0[25u].z;
    _184[1u] = cbMtdParam._m0[25u].w;
    float _392 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _395 = uint(int(isnan(1.0) ? _392 : (isnan(_392) ? 1.0 : min(_392, 1.0))));
    float _400 = _184[_395] + _378.x;
    vec4 _419 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _295) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _296) + cbTextureTilingScale._m0[7u].w, _308));
    float _426 = (_419.x * 2.0) + (-1.0);
    float _427 = (_419.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_426, _427), vec2(_426, _427));
    float _3447 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))));
    float _442 = (cbMtdParam._m0[20u].x * (((_365 * 2.0) * (_419.z + _183[_395])) - _365)) + _365;
    float _446 = (cbMtdParam._m0[20u].y * ((_361.x * 2.0) + (-1.0))) + _426;
    float _447 = (cbMtdParam._m0[20u].y * ((_361.y * 2.0) + (-1.0))) + _427;
    float _450 = fma(_433, _234, fma(_447, _226 * TANGENT.x, (_212 * _204) * _446));
    float _453 = fma(_433, _235, fma(_447, _226 * TANGENT.y, (_212 * _205) * _446));
    float _456 = fma(_433, _236, fma(_447, _226 * TANGENT.z, (_212 * _206) * _446));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _3458 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _464 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _3469 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3480 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3491 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3502 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _468 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _484 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _536 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _526);
    float _537 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _526);
    float _538 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _526);
    float _542 = inversesqrt(dot(vec3(_536, _537, _538), vec3(_536, _537, _538)));
    float _543 = _536 * _542;
    float _544 = _537 * _542;
    float _545 = _538 * _542;
    float _551 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _552 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _554 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _556 = _554.w;
    float _575 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _578 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _581 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    vec4 _583 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _594 = (((_583.y - _464) + (_583.w * _464)) * cbMtdParam._m0[3u].x) + _464;
    uint _607 = uint(roundEven(NORMAL.w)) * 13u;
    uint _610 = (_607 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3513 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    vec4 _622 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _627 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _638 = (((_627.x - _468) + (_627.w * _468)) * cbMtdParam._m0[3u].x) + _468;
    float _651 = (cbMtdParam._m0[3u].x * (((_619 * _556) - _619) + _622.x)) + _619;
    float _652 = (cbMtdParam._m0[3u].x * (((_620 * _556) - _620) + _622.y)) + _620;
    float _653 = (cbMtdParam._m0[3u].x * (((_621 * _556) - _621) + _622.z)) + _621;
    float _654 = 1.0 - _638;
    float _655 = _654 * _651;
    float _656 = _654 * _652;
    float _657 = _654 * _653;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _638;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _638;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _638;
    float _665 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _551, cbSceneParam._m0[86u].y * _552));
    float _680 = _677.x * TEXCOORD_4;
    float _681 = dot(vec3(_461, _462, _463), vec3(_543, _544, _545));
    float _684 = _681 * 2.0;
    float _688 = (_684 * _461) - _543;
    float _689 = (_684 * _462) - _544;
    float _690 = (_684 * _463) - _545;
    float _694 = abs(dot(vec3(_543, _544, _545), vec3(_461, _462, _463)));
    float _3546 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = sqrt(_594);
    float _709 = exp2((_696 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_696 * 3.0));
    float _715 = (1.0 - _709) * ((_696 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _716 = _709 * _696;
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1056;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _781 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _785 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _789 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _814 = _744 + _461;
        float _815 = _748 + _462;
        float _816 = _752 + _463;
        float _826 = fma(_816, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814)) - _781;
        float _827 = fma(_816, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814)) - _785;
        float _828 = fma(_816, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814)) - _789;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_781 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_785 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[34u].z) + ((((((_789 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _884 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_850.x + (-0.5));
        float _886 = _884 * (_850.y + (-0.5));
        float _887 = _884 * (_850.z + (-0.5));
        float _894 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_857.x + (-0.5));
        float _896 = _894 * (_857.y + (-0.5));
        float _897 = _894 * (_857.z + (-0.5));
        float _904 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_864.x + (-0.5));
        float _906 = _904 * (_864.y + (-0.5));
        float _907 = _904 * (_864.z + (-0.5));
        float _914 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_871.x + (-0.5));
        float _916 = _914 * (_871.y + (-0.5));
        float _917 = _914 * (_871.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _938 = (dot(vec3(_461, _462, _463), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _948 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3594 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_950 + 1.0))) + _955) * _918;
        float _965 = _886 * 0.5;
        float _966 = _896 * 0.5;
        float _967 = _906 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_461, _462, _463), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3627 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_992 + 1.0))) + _997) * _919;
        float _1007 = _887 * 0.5;
        float _1008 = _897 * 0.5;
        float _1009 = _907 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_461, _462, _463), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3660 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1034 + 1.0))) + _1039) * _920;
        _1056 = _887;
        _1058 = _886;
        _1059 = _885;
        _1060 = _897;
        _1061 = _896;
        _1062 = _895;
        _1063 = _907;
        _1064 = _906;
        _1065 = _905;
        _1066 = _920;
        _1067 = _919;
        _1068 = _918;
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _1057;
        _1058 = _1057;
        _1059 = _1057;
        _1060 = _1057;
        _1061 = _1057;
        _1062 = _1057;
        _1063 = _1057;
        _1064 = _1057;
        _1065 = _1057;
        _1066 = _1057;
        _1067 = _1057;
        _1068 = _1057;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1097 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1101 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1105 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1128 = _744 + _461;
        float _1129 = _748 + _462;
        float _1130 = _752 + _463;
        float _1140 = fma(_1130, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128)) - _1097;
        float _1141 = fma(_1130, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128)) - _1101;
        float _1142 = fma(_1130, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128)) - _1105;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1097 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1101 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[35u].z) + ((((((_1105 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1196 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1163.x + (-0.5));
        float _1198 = _1196 * (_1163.y + (-0.5));
        float _1199 = _1196 * (_1163.z + (-0.5));
        float _1206 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1170.x + (-0.5));
        float _1208 = _1206 * (_1170.y + (-0.5));
        float _1209 = _1206 * (_1170.z + (-0.5));
        float _1216 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1177.x + (-0.5));
        float _1218 = _1216 * (_1177.y + (-0.5));
        float _1219 = _1216 * (_1177.z + (-0.5));
        float _1226 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1184.x + (-0.5));
        float _1228 = _1226 * (_1184.y + (-0.5));
        float _1229 = _1226 * (_1184.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_461, _462, _463), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3723 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1260 + 1.0))) + _1265) * _1230;
        float _1275 = _1198 * 0.5;
        float _1276 = _1208 * 0.5;
        float _1277 = _1218 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_461, _462, _463), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3756 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1302 + 1.0))) + _1307) * _1231;
        float _1317 = _1199 * 0.5;
        float _1318 = _1209 * 0.5;
        float _1319 = _1219 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_461, _462, _463), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3789 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1344 + 1.0))) + _1349) * _1232;
        _1366 = _1199;
        _1367 = _1198;
        _1368 = _1197;
        _1369 = _1209;
        _1370 = _1208;
        _1371 = _1207;
        _1372 = _1219;
        _1373 = _1218;
        _1374 = _1217;
        _1375 = _1232;
        _1376 = _1231;
        _1377 = _1230;
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1057;
        _1367 = _1057;
        _1368 = _1057;
        _1369 = _1057;
        _1370 = _1057;
        _1371 = _1057;
        _1372 = _1057;
        _1373 = _1057;
        _1374 = _1057;
        _1375 = _1057;
        _1376 = _1057;
        _1377 = _1057;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1069)) + _1069;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1070)) + _1070;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1071)) + _1071;
    float _1413 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1416 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1419 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1390));
    float _1434 = _688 * 0.5;
    float _1435 = _689 * 0.5;
    float _1436 = _690 * 0.5;
    float _1437 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1440 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1443 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1477;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1450 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1056, _1060, _1063, _1066));
        float _1454 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1458 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1465 = dot(vec4(cbModelParam._m0[39u]), vec4(_1434, _1435, _1436, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1488;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1479 = dot(vec4(cbModelParam._m0[40u]), vec4(_1434, _1435, _1436, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1492 = (_1488 * cbModelParam._m0[1u].x) + (_1477 * (1.0 - cbModelParam._m0[1u].x));
    float _1502 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _594);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1502 : min(cbModelParam._m0[25u].z, _1502));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1552 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1556 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1560 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1563 = fma(_690, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688));
        float _1566 = fma(_690, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688));
        float _1569 = fma(_690, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688));
        float _1597;
        if (_1563 > 0.0)
        {
            _1597 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1597 = frontier_phi_22_20_ladder;
        }
        float _1822;
        if (_1566 > 0.0)
        {
            _1822 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1822 = frontier_phi_31_27_ladder;
        }
        float _2079;
        if (_1569 > 0.0)
        {
            _2079 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2079 = frontier_phi_43_38_ladder;
        }
        float _2081 = isnan(_1822) ? _1597 : (isnan(_1597) ? _1822 : min(_1597, _1822));
        float _2082 = isnan(_2079) ? _2081 : (isnan(_2081) ? _2079 : min(_2081, _2079));
        float _2086 = (_2082 * _1563) + _1552;
        float _2087 = (_2082 * _1566) + _1556;
        float _2088 = (_2082 * _1569) + _1560;
        float _2089 = _2082 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2089;
        float _2093 = _2089 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 > _2093) || ((_2087 < _2091) || ((_2086 < _2091) || (_2086 > _2093))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2088, cbModelParam._m0[9u].z, fma(_2087, cbModelParam._m0[9u].y, _2086 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2088, cbModelParam._m0[10u].z, fma(_2087, cbModelParam._m0[10u].y, _2086 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2088, cbModelParam._m0[11u].z, fma(_2087, cbModelParam._m0[11u].y, _2086 * cbModelParam._m0[11u].x))), _1503);
            frontier_phi_21_43_ladder = _2216.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2216.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2216.x * cbModelParam._m0[1u].y;
        }
        _1585 = frontier_phi_21_43_ladder_2;
        _1587 = frontier_phi_21_43_ladder_1;
        _1589 = frontier_phi_21_43_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_688, _689, _690), _1503);
        _1585 = _1573.x * cbModelParam._m0[1u].y;
        _1587 = _1573.y * cbModelParam._m0[1u].y;
        _1589 = _1573.z * cbModelParam._m0[1u].y;
    }
    float _1593 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _594);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1593 : min(cbModelParam._m0[25u].w, _1593));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1647 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1651 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1655 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1658 = fma(_690, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688));
        float _1661 = fma(_690, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688));
        float _1664 = fma(_690, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688));
        float _1827;
        if (_1658 > 0.0)
        {
            _1827 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1827 = frontier_phi_33_29_ladder;
        }
        float _2106;
        if (_1661 > 0.0)
        {
            _2106 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2106 = frontier_phi_45_40_ladder;
        }
        float _2319;
        if (_1664 > 0.0)
        {
            _2319 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2319 = frontier_phi_54_51_ladder;
        }
        float _2321 = isnan(_2106) ? _1827 : (isnan(_1827) ? _2106 : min(_1827, _2106));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1658) + _1647;
        float _2327 = (_2322 * _1661) + _1651;
        float _2328 = (_2322 * _1664) + _1655;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2330 = (-1.0) - _2329;
        float _2332 = _2329 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2328 > _2332) || ((_2328 < _2330) || ((_2327 > _2332) || ((_2327 < _2330) || ((_2326 < _2330) || (_2326 > _2332))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2328, cbModelParam._m0[17u].z, fma(_2327, cbModelParam._m0[17u].y, _2326 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2328, cbModelParam._m0[18u].z, fma(_2327, cbModelParam._m0[18u].y, _2326 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2328, cbModelParam._m0[19u].z, fma(_2327, cbModelParam._m0[19u].y, _2326 * cbModelParam._m0[19u].x))), _1594);
            frontier_phi_30_54_ladder = _2544.y * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_1 = _2544.z * cbModelParam._m0[1u].z;
            frontier_phi_30_54_ladder_2 = _2544.x * cbModelParam._m0[1u].z;
        }
        _1683 = frontier_phi_30_54_ladder_2;
        _1685 = frontier_phi_30_54_ladder;
        _1687 = frontier_phi_30_54_ladder_1;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_688, _689, _690), _1594);
        _1683 = _1667.x * cbModelParam._m0[1u].z;
        _1685 = _1667.y * cbModelParam._m0[1u].z;
        _1687 = _1667.z * cbModelParam._m0[1u].z;
    }
    float _1700 = (((_715 * _665) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1683 - _1585)) + _1585);
    float _1702 = (((_715 * _667) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1685 - _1587)) + _1587);
    float _1704 = (((_715 * _668) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1687 - _1589)) + _1589);
    float _1707 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, _1700 * cbSceneParam._m0[91u].x));
    vec4 _1721 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_551, _552));
    float _1723 = _1721.w;
    float _1735 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1723);
    float _1736 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1723);
    float _1737 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1723);
    uvec4 _1741 = floatBitsToUint(cbInstanceData._m0[_607 + 5u]);
    uint _1743 = _1741.x * 14u;
    uint _1744 = _1743 + 13u;
    float _1751 = _680 + (-1.0);
    float _1756 = (cbLight._m0[_1744].x * _1751) + 1.0;
    float _1757 = (cbLight._m0[_1744].y * _1751) + 1.0;
    float _1758 = (cbLight._m0[_1744].z * _1751) + 1.0;
    float _1759 = (cbLight._m0[_1744].w * _1751) + 1.0;
    uint _1760 = _1743 + 5u;
    float _1766 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1770 = _1743 + 4u;
    float _1780 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    uint _1784 = _1743 | 1u;
    float _1795 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_461, _462, _463));
    float _1798 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_461, _462, _463));
    float _3925 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _3936 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1803 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.3183098733425140380859375;
    float _1805 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.3183098733425140380859375;
    float _1812 = ((cbLight._m0[_1760].x * _1766) * _1805) + (((cbLight._m0[_1770].x * _1735) * _1780) * _1803);
    float _1813 = ((_1766 * cbLight._m0[_1760].y) * _1805) + (((cbLight._m0[_1770].y * _1736) * _1780) * _1803);
    float _1814 = ((_1766 * cbLight._m0[_1760].z) * _1805) + (((cbLight._m0[_1770].z * _1737) * _1780) * _1803);
    uvec4 _1819 = floatBitsToUint(cbLight._m0[_1743 + 12u]);
    bool _1821 = _1819.x == 0u;
    float _1832;
    float _1834;
    float _1836;
    if (_1821)
    {
        _1832 = _1812;
        _1834 = _1813;
        _1836 = _1814;
    }
    else
    {
        uint _1840 = _1743 + 6u;
        float _1856 = (dot(vec3(cbLight._m0[_1743 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _3947 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1859 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _1832 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1812;
        _1834 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1813;
        _1836 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1814;
    }
    bool _1839 = _1819.y == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1839)
    {
        _1877 = _1832;
        _1879 = _1834;
        _1881 = _1836;
    }
    else
    {
        uint _2050 = _1743 + 7u;
        float _2066 = (dot(vec3(cbLight._m0[_1743 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _3963 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _2069 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1877 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _1832;
        _1879 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _1834;
        _1881 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _1836;
    }
    uint _1884 = _1743 + 8u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _594) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1743].x + _543;
    float _1900 = cbLight._m0[_1743].y + _544;
    float _1901 = cbLight._m0[_1743].z + _545;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1743].xyz));
    float _3979 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _1913 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1914 = dot(vec3(_461, _462, _463), vec3(_1906, _1907, _1908));
    float _4001 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1906, _1907, _1908));
    float _4012 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1898 * _1898;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1934 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
    float _1935 = 0.959999978542327880859375 - _662;
    float _1937 = 0.959999978542327880859375 - _663;
    float _1938 = 0.959999978542327880859375 - _664;
    float _1945 = 1.0 - _1898;
    float _1956 = (0.5 / (((_1913 * ((_1912 * _1945) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _1945) + _1898) * _1912))) * _1912;
    float _4023 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1958 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    uint _1972 = _1743 + 9u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1784].w)) * _594) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1784].x + _543;
    float _1986 = cbLight._m0[_1784].y + _544;
    float _1987 = cbLight._m0[_1784].z + _545;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1784].xyz));
    float _4034 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1999 = dot(vec3(_461, _462, _463), vec3(_1992, _1993, _1994));
    float _4045 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1992, _1993, _1994));
    float _4056 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1984 * _1984;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2018 = exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0);
    float _2025 = 1.0 - _1984;
    float _2035 = (0.5 / (((_1913 * ((_1998 * _2025) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2025) + _1984) * _1998))) * _1998;
    float _4067 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    float _2047 = (((((_2018 * _1935) + _665) * cbLight._m0[_1972].x) * _2037) * _1766) + ((((cbLight._m0[_1884].x * _1735) * ((_1934 * _1935) + _665)) * _1958) * _1780);
    float _2048 = (((((_2018 * _1937) + _667) * cbLight._m0[_1972].y) * _2037) * _1766) + ((((cbLight._m0[_1884].y * _1736) * ((_1934 * _1937) + _667)) * _1958) * _1780);
    float _2049 = (((((_2018 * _1938) + _668) * cbLight._m0[_1972].z) * _2037) * _1766) + ((((cbLight._m0[_1884].z * _1737) * ((_1934 * _1938) + _668)) * _1958) * _1780);
    float _2111;
    float _2113;
    float _2115;
    if (_1821)
    {
        _2111 = _2047;
        _2113 = _2048;
        _2115 = _2049;
    }
    else
    {
        uint _2117 = _1743 + 2u;
        uint _2121 = _1743 + 10u;
        float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _594) * 0.949999988079071044921875);
        float _2136 = _2135 * _2135;
        float _2137 = cbLight._m0[_2117].x + _543;
        float _2138 = cbLight._m0[_2117].y + _544;
        float _2139 = cbLight._m0[_2117].z + _545;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2144 = _2143 * _2137;
        float _2145 = _2143 * _2138;
        float _2146 = _2143 * _2139;
        float _2147 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2117].xyz));
        float _4078 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2151 = dot(vec3(_461, _462, _463), vec3(_2144, _2145, _2146));
        float _4089 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2144, _2145, _2146));
        float _4100 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _2136 * _2136;
        float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
        float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0);
        float _2177 = 1.0 - _2136;
        float _2187 = (0.5 / (((_1913 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2177) + _2136) * _2150))) * _2150;
        float _4111 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
        _2111 = (((((_2170 * _1935) + _665) * cbLight._m0[_2121].x) * _2189) * _2190) + _2047;
        _2113 = (((((_2170 * _1937) + _667) * cbLight._m0[_2121].y) * _2189) * _2190) + _2048;
        _2115 = (((((_2170 * _1938) + _668) * cbLight._m0[_2121].z) * _2189) * _2190) + _2049;
    }
    float _2225;
    float _2227;
    float _2229;
    if (_1839)
    {
        _2225 = _2111;
        _2227 = _2113;
        _2229 = _2115;
    }
    else
    {
        uint _2236 = _1743 + 3u;
        uint _2240 = _1743 + 11u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _594) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _543;
        float _2257 = cbLight._m0[_2236].y + _544;
        float _2258 = cbLight._m0[_2236].z + _545;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2236].xyz));
        float _4127 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2270 = dot(vec3(_461, _462, _463), vec3(_2263, _2264, _2265));
        float _4138 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4149 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2289 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
        float _2296 = 1.0 - _2255;
        float _2306 = (0.5 / (((_1913 * ((_2269 * _2296) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2296) + _2255) * _2269))) * _2269;
        float _4160 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2308 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2309 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2225 = (((((_2289 * _1935) + _665) * cbLight._m0[_2240].x) * _2308) * _2309) + _2111;
        _2227 = (((((_2289 * _1937) + _667) * cbLight._m0[_2240].y) * _2308) * _2309) + _2113;
        _2229 = (((((_2289 * _1938) + _668) * cbLight._m0[_2240].z) * _2308) * _2309) + _2115;
    }
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_1741.y == 0u)
    {
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2384;
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2384;
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2384;
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.x;
        uint _2411 = uint((float(_2399.y) * floor(float(uint(cbSceneParam._m0[85u].y * _552) / _2400))) + floor(float(uint(cbSceneParam._m0[85u].x * _551) / _2400)));
        float _2421 = (log2(_2387 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2422 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        uint _2425 = uint(isnan(14.0) ? _2422 : (isnan(_2422) ? 14.0 : min(_2422, 14.0)));
        uvec4 _2430 = texelFetch(g_lightClusterGridBuffer, int(((_2425 << 2u) + (_2411 << 6u)) >> 2u));
        uint _2431 = _2430.x;
        uint _2432 = _2399.z;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        if (((((1u << ((_2432 >> 4u) & 15u)) + 4294967295u) & _2431) == 0u) || ((_2432 & 240u) == 0u))
        {
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
        }
        else
        {
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            uint _2699 = 0u;
            uint _2708;
            bool _2709;
            for (;;)
            {
                _2708 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                _2709 = _2708 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2709)
                {
                    frontier_phi_69_pred = _2698;
                    frontier_phi_69_pred_1 = _2697;
                    frontier_phi_69_pred_2 = _2696;
                    frontier_phi_69_pred_3 = _2694;
                    frontier_phi_69_pred_4 = _2693;
                    frontier_phi_69_pred_5 = _2695;
                }
                else
                {
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    uint _2823;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2698;
                    _2823 = _2708;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    for (;;)
                    {
                        uint _2827 = uint(findLSB(_2823)) + (_2699 << 5u);
                        uint _2824 = (_2823 + 4294967295u) & _2823;
                        uint _2829 = _2827 * 48u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2849 = (_2827 * 48u) + 4u;
                        vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2868 = (_2827 * 48u) + 8u;
                        vec3 _2879 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x));
                        float _2883 = _2843.x - _2385;
                        float _2884 = _2843.y - _2386;
                        float _2885 = _2843.z - _2387;
                        float _2886 = dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885));
                        float _2889 = inversesqrt(_2886);
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2893 = dot(vec3(_575, _578, _581), vec3(_2890, _2891, _2892));
                        float _2898 = 1.0 - (_2886 * _2843.w);
                        float _4186 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2899 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2900 = sqrt(_2886) * _2862.w;
                        float _2903 = 1.39999997615814208984375 / (_2900 + 1.39999997615814208984375);
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2893) + _2904;
                        float _2910 = _2900 * _2900;
                        float _2914 = ((isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))) * _2899) / ((_2910 * 0.699999988079071044921875) + 1.0);
                        float _2918 = (-0.0) - _2385;
                        float _2919 = (-0.0) - _2386;
                        float _2920 = (-0.0) - _2387;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2935 = exp2(log2(1.0 / ((_2910 * 3.5) + 5.0)) * 0.25);
                        float _2936 = 1.0 - _696;
                        float _2943 = sqrt(1.0 - ((1.0 - (_2936 * _2936)) * (1.0 - (_2935 * _2935))));
                        float _2944 = _2943 * _2943;
                        float _2945 = _2944 * _2944;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2948 = _2927 + _2892;
                        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                        float _2956 = dot(vec3(_575, _578, _581), vec3(_2925, _2926, _2927));
                        float _4202 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2960 = dot(vec3(_575, _578, _581), vec3(_2952 * _2946, _2952 * _2947, _2952 * _2948));
                        float _4213 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2963 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2967 = ((_2963 * _2963) * (_2945 + (-1.0))) + 1.0;
                        float _2968 = _2903 * _2944;
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2893) + _2969;
                        float _4224 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2974 = 1.0 - _2944;
                        float _2984 = (0.5 / (((_2973 * ((_2959 * _2974) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2973 * _2974) + _2944) * _2959))) * _2973;
                        float _4235 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2995 = (((_2945 * 3.1415927410125732421875) * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) / ((_2967 * _2967) * ((_2910 * 2.1991131305694580078125) + 3.141590118408203125))) * _2899;
                        _2752 = (_2914 * _2862.x) + _2820;
                        _2753 = (_2914 * _2862.y) + _2821;
                        _2754 = (_2914 * _2862.z) + _2822;
                        _2749 = (_2995 * _2879.x) + _2817;
                        _2750 = (_2995 * _2879.y) + _2818;
                        _2751 = (_2995 * _2879.z) + _2819;
                        if (_2824 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2754;
                            _2823 = _2824;
                        }
                    }
                    frontier_phi_69_pred = _2754;
                    frontier_phi_69_pred_1 = _2753;
                    frontier_phi_69_pred_2 = _2752;
                    frontier_phi_69_pred_3 = _2750;
                    frontier_phi_69_pred_4 = _2749;
                    frontier_phi_69_pred_5 = _2751;
                }
                _2560 = frontier_phi_69_pred;
                _2558 = frontier_phi_69_pred_1;
                _2556 = frontier_phi_69_pred_2;
                _2552 = frontier_phi_69_pred_3;
                _2550 = frontier_phi_69_pred_4;
                _2554 = frontier_phi_69_pred_5;
                uint _2700 = _2699 + 1u;
                if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2693 = _2550;
                    _2694 = _2552;
                    _2695 = _2554;
                    _2696 = _2556;
                    _2697 = _2558;
                    _2698 = _2560;
                    _2699 = _2700;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
        }
        uvec4 _2563 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2564 = _2563.z;
        uint _2566 = (_2564 >> 8u) & 15u;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((4294967295u << _2566) & _2431) == 0u)
        {
            _2661 = _2549;
            _2663 = _2551;
            _2665 = _2553;
            _2667 = _2555;
            _2669 = _2557;
            _2671 = _2559;
        }
        else
        {
            float _2686 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
            float _2687 = _2686 * _2385;
            float _2688 = _2686 * _2386;
            float _2689 = _2686 * _2387;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2566 < ((_2564 >> 12u) & 15u))
            {
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2800 = _2549;
                float _2801 = _2551;
                float _2802 = _2553;
                float _2803 = _2555;
                float _2804 = _2557;
                float _2805 = _2559;
                uint _2806 = _2566;
                uint _2815;
                bool _2816;
                for (;;)
                {
                    _2815 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                    _2816 = _2815 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    float frontier_phi_75_pred_3;
                    float frontier_phi_75_pred_4;
                    float frontier_phi_75_pred_5;
                    if (_2816)
                    {
                        frontier_phi_75_pred = _2802;
                        frontier_phi_75_pred_1 = _2801;
                        frontier_phi_75_pred_2 = _2800;
                        frontier_phi_75_pred_3 = _2805;
                        frontier_phi_75_pred_4 = _2804;
                        frontier_phi_75_pred_5 = _2803;
                    }
                    else
                    {
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        float _3018 = _2805;
                        uint _3019 = _2815;
                        uint _3020;
                        vec4 _3045;
                        float _3046;
                        vec4 _3061;
                        vec3 _3073;
                        vec4 _3089;
                        vec4 _3104;
                        float _3151;
                        bool _3152;
                        for (;;)
                        {
                            uint _3030 = ((_2806 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3019));
                            _3020 = (_3019 + 4294967295u) & _3019;
                            uint _3032 = _3030 * 40u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3046 = _3045.w;
                            uint _3048 = (_3030 * 40u) + 4u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3063 = (_3030 * 40u) + 8u;
                            _3073 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x));
                            uint _3076 = (_3030 * 40u) + 16u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3091 = (_3030 * 40u) + 20u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3107 = (_3030 * 40u) + 24u;
                            vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3126 = (_3030 * 40u) + 28u;
                            vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3151 = fma(_2387, _3139.z, fma(_2386, _3139.y, _3139.x * _2385)) + _3139.w;
                            _3152 = !((fma(_2387, _3120.z, fma(_2386, _3120.y, _3120.x * _2385)) + _3120.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            float frontier_phi_81_pred_3;
                            float frontier_phi_81_pred_4;
                            float frontier_phi_81_pred_5;
                            if (_3152)
                            {
                                float _3179 = _3045.x - _2385;
                                float _3180 = _3045.y - _2386;
                                float _3181 = _3045.z - _2387;
                                float _3182 = dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181));
                                float _3185 = inversesqrt(_3182);
                                float _3186 = _3185 * _3179;
                                float _3187 = _3185 * _3180;
                                float _3188 = _3185 * _3181;
                                float _3192 = 1.0 - (_3182 / (_3046 * _3046));
                                float _4246 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3197 = sqrt(_3182) * _3061.w;
                                float _3199 = 1.39999997615814208984375 / (_3197 + 1.39999997615814208984375);
                                float _3200 = _3199 * _3199;
                                float _3203 = ((1.0 - _3200) * dot(vec3(_3186, _3187, _3188), vec3(_575, _578, _581))) + _3200;
                                float _3206 = _3197 * _3197;
                                float _3210 = (fma(_2387, _3089.z, fma(_2386, _3089.y, _3089.x * _2385)) + _3089.w) / _3151;
                                float _3211 = (fma(_2387, _3104.z, fma(_2386, _3104.y, _3104.x * _2385)) + _3104.w) / _3151;
                                float _3215 = 1.0 - dot(vec2(_3210, _3211), vec2(_3210, _3211));
                                float _4262 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3217 = _3216 * (((isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))) * _3193) / ((_3206 * 0.699999988079071044921875) + 1.0));
                                float _3229 = exp2(log2(1.0 / ((_3206 * 3.5) + 5.0)) * 0.25);
                                float _3230 = 1.0 - _696;
                                float _3237 = sqrt(1.0 - ((1.0 - (_3230 * _3230)) * (1.0 - (_3229 * _3229))));
                                float _3238 = _3237 * _3237;
                                float _3239 = _3238 * _3238;
                                float _3240 = _3186 - _2687;
                                float _3241 = _3187 - _2688;
                                float _3242 = _3188 - _2689;
                                float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                                float _3250 = dot(vec3(_575, _578, _581), vec3((-0.0) - _2687, (-0.0) - _2688, (-0.0) - _2689));
                                float _4273 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3253 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3254 = dot(vec3(_575, _578, _581), vec3(_3246 * _3240, _3246 * _3241, _3246 * _3242));
                                float _4284 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3257 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3261 = ((_3257 * _3257) * (_3239 + (-1.0))) + 1.0;
                                float _3262 = _3199 * _3238;
                                float _3263 = _3262 * _3262;
                                float _3269 = ((1.0 - _3263) * dot(vec3(_575, _578, _581), vec3(_3186, _3187, _3188))) + _3263;
                                float _4295 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3271 = 1.0 - _3238;
                                float _3281 = (0.5 / (((_3270 * ((_3253 * _3271) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3270 * _3271) + _3238) * _3253))) * _3270;
                                float _4306 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3291 = (_3216 * _3193) * (((_3239 * 3.1415927410125732421875) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) / ((_3261 * _3261) * ((_3206 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _3291 * _3073.z;
                                frontier_phi_81_pred_1 = _3291 * _3073.y;
                                frontier_phi_81_pred_2 = _3291 * _3073.x;
                                frontier_phi_81_pred_3 = _3217 * _3061.z;
                                frontier_phi_81_pred_4 = _3217 * _3061.y;
                                frontier_phi_81_pred_5 = _3217 * _3061.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                                frontier_phi_81_pred_3 = 0.0;
                                frontier_phi_81_pred_4 = 0.0;
                                frontier_phi_81_pred_5 = 0.0;
                            }
                            _3297 = frontier_phi_81_pred;
                            _3296 = frontier_phi_81_pred_1;
                            _3295 = frontier_phi_81_pred_2;
                            _3300 = frontier_phi_81_pred_3;
                            _3299 = frontier_phi_81_pred_4;
                            _3298 = frontier_phi_81_pred_5;
                            _3003 = _3298 + _3016;
                            _3004 = _3299 + _3017;
                            _3005 = _3300 + _3018;
                            _3000 = _3295 + _3013;
                            _3001 = _3296 + _3014;
                            _3002 = _3297 + _3015;
                            if (_3020 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3020;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _3002;
                        frontier_phi_75_pred_1 = _3001;
                        frontier_phi_75_pred_2 = _3000;
                        frontier_phi_75_pred_3 = _3005;
                        frontier_phi_75_pred_4 = _3004;
                        frontier_phi_75_pred_5 = _3003;
                    }
                    _2666 = frontier_phi_75_pred;
                    _2664 = frontier_phi_75_pred_1;
                    _2662 = frontier_phi_75_pred_2;
                    _2672 = frontier_phi_75_pred_3;
                    _2670 = frontier_phi_75_pred_4;
                    _2668 = frontier_phi_75_pred_5;
                    uint _2807 = _2806 + 1u;
                    if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2800 = _2662;
                        _2801 = _2664;
                        _2802 = _2666;
                        _2803 = _2668;
                        _2804 = _2670;
                        _2805 = _2672;
                        _2806 = _2807;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2670;
                frontier_phi_63_64_ladder_1 = _2668;
                frontier_phi_63_64_ladder_2 = _2666;
                frontier_phi_63_64_ladder_3 = _2672;
                frontier_phi_63_64_ladder_4 = _2664;
                frontier_phi_63_64_ladder_5 = _2662;
            }
            else
            {
                frontier_phi_63_64_ladder = _2557;
                frontier_phi_63_64_ladder_1 = _2555;
                frontier_phi_63_64_ladder_2 = _2553;
                frontier_phi_63_64_ladder_3 = _2559;
                frontier_phi_63_64_ladder_4 = _2551;
                frontier_phi_63_64_ladder_5 = _2549;
            }
            _2661 = frontier_phi_63_64_ladder_5;
            _2663 = frontier_phi_63_64_ladder_4;
            _2665 = frontier_phi_63_64_ladder_2;
            _2667 = frontier_phi_63_64_ladder_1;
            _2669 = frontier_phi_63_64_ladder;
            _2671 = frontier_phi_63_64_ladder_3;
        }
        float _2676 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
        _2443 = (_2676 * _2667) + _1877;
        _2445 = (_2676 * _2669) + _1879;
        _2447 = (_2676 * _2671) + _1881;
        _2449 = ((_2661 * _665) * _2676) + _2225;
        _2451 = ((_2663 * _667) * _2676) + _2227;
        _2453 = ((_2665 * _668) * _2676) + _2229;
    }
    else
    {
        _2443 = _1877;
        _2445 = _1879;
        _2447 = _1881;
        _2449 = _2225;
        _2451 = _2227;
        _2453 = _2229;
    }
    vec4 _2459 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4322 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4333 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4344 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2483 = (((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2443 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _680))) + ((_2449 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1492)) * cbPerFrame._m0[3u].x)) + (_2459.x * cbMtdParam._m0[3u].x);
    float _2485 = ((_2459.y * cbMtdParam._m0[3u].x) + ((_2451 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1492)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2445 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _680)));
    float _2487 = ((_2459.z * cbMtdParam._m0[3u].x) + ((_2453 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1492)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2447 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _680)));
    uint _2491 = _607 + 6u;
    float _2499 = _551 / cbSceneParam._m0[86u].x;
    float _2500 = _552 / cbSceneParam._m0[86u].y;
    vec4 _2514 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2499, _2500, (log2((isnan(cbSceneParam._m0[77u].w) ? _484 : (isnan(_484) ? cbSceneParam._m0[77u].w : min(_484, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2516 = _2514.x;
    float _2517 = _2514.y;
    float _2518 = _2514.z;
    float _2519 = _2514.w;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    if (_484 > cbSceneParam._m0[78u].w)
    {
        float _2574 = isnan(_484) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _484 : min(cbSceneParam._m0[80u].w, _484));
        float _2575 = _2574 / _484;
        float _2586 = _2575 * _536;
        float _2587 = _537 * _2575;
        float _2588 = (-0.0) - _2587;
        float _2589 = _2575 * _538;
        float _2591 = (cbSceneParam._m0[77u].w * _2588) / _2574;
        float _2592 = _2591 + cbSceneParam._m0[79u].w;
        float _2593 = cbSceneParam._m0[79u].w - _2587;
        float _2599 = sqrt(((_2586 * _2586) + (_2587 * _2587)) + (_2589 * _2589));
        float _2602 = (1.0 - (cbSceneParam._m0[77u].w / _2574)) * _2599;
        float _2607 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2609 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2762;
        if (abs((_2588 - _2591) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2762 = ((((_2592 > 0.0) ? exp2(_2607 * _2592) : (2.0 - exp2(_2609 * _2592))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2602;
        }
        else
        {
            float _2722 = 1.0 / cbSceneParam._m0[80u].x;
            float _2723 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : max(_2592, _2593));
            float _2724 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : min(_2592, _2593));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            _2762 = ((abs(_2599 / _2588) * cbSceneParam._m0[80u].y) * ((((_2733 - _2734) * 2.0) - ((exp2(_2607 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)))) - exp2(_2607 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))))) * _2722)) - ((exp2(_2609 * _2733) - exp2(_2609 * _2734)) * _2722))) + (_2602 * cbSceneParam._m0[80u].z);
        }
        vec4 _2764 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2499, _2500, 1.0), 0.0);
        float _2773 = exp2((_2762 * (-1.44269502162933349609375)) * (1.0 - _2764.w));
        float _2774 = log2(_2773);
        float _2790 = log2(_2519);
        _2611 = (exp2(_2790 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].x)) * _2764.x) / cbSceneParam._m0[78u].x)) + _2516;
        _2613 = (exp2(_2790 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].y)) * _2764.y) / cbSceneParam._m0[78u].y)) + _2517;
        _2615 = (exp2(_2790 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].z)) * _2764.z) / cbSceneParam._m0[78u].z)) + _2518;
        _2617 = _2773 * _2519;
    }
    else
    {
        _2611 = _2516;
        _2613 = _2517;
        _2615 = _2518;
        _2617 = _2519;
    }
    float _2629 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2630 = _2629 == 3.0;
    float _2631 = log2(_2617);
    float _2638 = exp2(_2631 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0)));
    float _2639 = exp2(_2631 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0)));
    float _2640 = exp2(_2631 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0)));
    float _2649 = (_2629 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2649 * (_2630 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.y = _2649 * (_2630 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.z = _2649 * (_2630 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2615)));
    SV_Target.w = cbInstanceData._m0[_2491].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2491].w;
}


