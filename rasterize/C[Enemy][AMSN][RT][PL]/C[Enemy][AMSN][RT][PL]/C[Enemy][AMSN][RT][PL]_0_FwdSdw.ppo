#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1169;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245;
    float _246;
    float _247;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
    }
    else
    {
        _245 = _231;
        _246 = _232;
        _247 = _233;
    }
    float _267 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _193[6];
    float _194[6];
    float _195[6];
    _193[0u] = cbMtdParam._m0[14u].x;
    _194[0u] = cbMtdParam._m0[14u].y;
    _195[0u] = cbMtdParam._m0[14u].z;
    _193[1u] = cbMtdParam._m0[15u].x;
    _194[1u] = cbMtdParam._m0[15u].y;
    _195[1u] = cbMtdParam._m0[15u].z;
    _193[2u] = cbMtdParam._m0[16u].x;
    _194[2u] = cbMtdParam._m0[16u].y;
    _195[2u] = cbMtdParam._m0[16u].z;
    _193[3u] = cbMtdParam._m0[11u].x;
    _194[3u] = cbMtdParam._m0[11u].y;
    _195[3u] = cbMtdParam._m0[11u].z;
    _193[4u] = cbMtdParam._m0[12u].x;
    _194[4u] = cbMtdParam._m0[12u].y;
    _195[4u] = cbMtdParam._m0[12u].z;
    _193[5u] = cbMtdParam._m0[13u].x;
    _194[5u] = cbMtdParam._m0[13u].y;
    _195[5u] = cbMtdParam._m0[13u].z;
    vec4 _356 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _359 = _356.y;
    float _362 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _364 = roundEven(_362);
    float _365 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    uint _368 = uint(int(isnan(5.0) ? _365 : (isnan(_365) ? 5.0 : min(_365, 5.0))));
    float _385 = roundEven(5.0 - _362);
    float _386 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _387 = isnan(4.0) ? _386 : (isnan(_386) ? 4.0 : min(_386, 4.0));
    float _393;
    float _395;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (_267 * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _393 = cbMtdParam._m0[26u].x;
        _395 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _393 = cbMtdParam._m0[22u].x;
        _395 = cbMtdParam._m0[22u].y;
    }
    float _397 = _393 * TEXCOORD.x;
    float _398 = _395 * TEXCOORD.y;
    float _409 = floor(_387);
    vec4 _412 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _397) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _398) + cbTextureTilingScale._m0[6u].w, _409));
    vec4 _434 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _267) + cbTextureTilingScale._m0[0u].w));
    float _442 = ((((((_193[_368] - cbMtdParam._m0[18u].x) * _359) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _412.x) * cbMtdParam._m0[9u].x) * _434.x;
    float _446 = ((((((_194[_368] - cbMtdParam._m0[18u].y) * _359) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _412.y) * cbMtdParam._m0[9u].y) * _434.y;
    float _450 = ((((((_195[_368] - cbMtdParam._m0[18u].z) * _359) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _412.z) * cbMtdParam._m0[9u].z) * _434.z;
    vec4 _462 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _267) + cbTextureTilingScale._m0[1u].w));
    float _466 = _462.z;
    float _188[5];
    float _189[5];
    _188[0u] = cbMtdParam._m0[22u].z;
    _189[0u] = cbMtdParam._m0[22u].w;
    _188[1u] = cbMtdParam._m0[23u].z;
    _189[1u] = cbMtdParam._m0[23u].w;
    _188[2u] = cbMtdParam._m0[24u].x;
    _189[2u] = cbMtdParam._m0[24u].y;
    _188[3u] = cbMtdParam._m0[24u].z;
    _189[3u] = cbMtdParam._m0[24u].w;
    _188[4u] = cbMtdParam._m0[23u].x;
    _189[4u] = cbMtdParam._m0[23u].y;
    float _510 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    uint _512 = uint(int(isnan(4.0) ? _510 : (isnan(_510) ? 4.0 : min(_510, 4.0))));
    float _517 = _189[_512] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _397) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _398) + cbTextureTilingScale._m0[8u].w, _409)).x;
    vec4 _536 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _397) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _398) + cbTextureTilingScale._m0[7u].w, _409));
    float _543 = (_536.x * 2.0) + (-1.0);
    float _544 = (_536.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3828 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    float _560 = (cbMtdParam._m0[20u].x * (((_466 * 2.0) * (_536.z + _188[_512])) - _466)) + _466;
    float _564 = (cbMtdParam._m0[20u].y * ((_462.x * 2.0) + (-1.0))) + _543;
    float _565 = (cbMtdParam._m0[20u].y * ((_462.y * 2.0) + (-1.0))) + _544;
    float _568 = fma(_551, _245, fma(_565, _237 * TANGENT.x, (_223 * _215) * _564));
    float _571 = fma(_551, _246, fma(_565, _237 * TANGENT.y, (_223 * _216) * _564));
    float _574 = fma(_551, _247, fma(_565, _237 * TANGENT.z, (_223 * _217) * _564));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3839 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _582 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3861 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3872 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3883 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _586 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _602 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _653 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _643);
    float _654 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _643);
    float _655 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _643);
    float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
    float _660 = _653 * _659;
    float _661 = _654 * _659;
    float _662 = _655 * _659;
    float _668 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _669 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _671 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _673 = _671.w;
    float _691 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _694 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _697 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    vec4 _699 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _710 = (((_699.y - _582) + (_699.w * _582)) * cbMtdParam._m0[3u].x) + _582;
    uint _723 = uint(roundEven(NORMAL.w)) * 13u;
    uint _725 = (_723 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _731 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * cbInstanceData._m0[_725].x;
    float _732 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_725].y;
    float _733 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_725].z;
    float _3894 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    vec4 _737 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _742 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _753 = (((_742.x - _586) + (_742.w * _586)) * cbMtdParam._m0[3u].x) + _586;
    float _766 = (cbMtdParam._m0[3u].x * (((_734 * _673) - _734) + _737.x)) + _734;
    float _767 = (cbMtdParam._m0[3u].x * (((_735 * _673) - _735) + _737.y)) + _735;
    float _768 = (cbMtdParam._m0[3u].x * (((_736 * _673) - _736) + _737.z)) + _736;
    float _769 = 1.0 - _753;
    float _770 = _769 * _766;
    float _771 = _769 * _767;
    float _772 = _769 * _768;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _753;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _753;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _753;
    float _780 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _668, cbSceneParam._m0[86u].y * _669));
    float _795 = _792.x * TEXCOORD_4;
    float _796 = dot(vec3(_579, _580, _581), vec3(_660, _661, _662));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _579) - _660;
    float _804 = (_799 * _580) - _661;
    float _805 = (_799 * _581) - _662;
    float _809 = abs(dot(vec3(_660, _661, _662), vec3(_579, _580, _581)));
    float _3927 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _811 = sqrt(_710);
    float _822 = exp2((_811 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _828 = (1.0 - _822) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _829 = _822 * _811;
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _893 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _897 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _901 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _926 = _857 + _579;
        float _927 = _861 + _580;
        float _928 = _865 + _581;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _893;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _897;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _901;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_893 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_897 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_901 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_579, _580, _581), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3975 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_579, _580, _581), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _4008 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_579, _580, _581), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _4041 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1209 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1213 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1217 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1240 = _857 + _579;
        float _1241 = _861 + _580;
        float _1242 = _865 + _581;
        float _1252 = fma(_1242, cbModelParam._m0[30u].z, fma(_1241, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240)) - _1209;
        float _1253 = fma(_1242, cbModelParam._m0[31u].z, fma(_1241, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240)) - _1213;
        float _1254 = fma(_1242, cbModelParam._m0[32u].z, fma(_1241, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240)) - _1217;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1209 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1213 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[35u].z) + ((((((_1217 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1308 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1275.x + (-0.5));
        float _1310 = _1308 * (_1275.y + (-0.5));
        float _1311 = _1308 * (_1275.z + (-0.5));
        float _1318 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1282.x + (-0.5));
        float _1320 = _1318 * (_1282.y + (-0.5));
        float _1321 = _1318 * (_1282.z + (-0.5));
        float _1328 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1289.x + (-0.5));
        float _1330 = _1328 * (_1289.y + (-0.5));
        float _1331 = _1328 * (_1289.z + (-0.5));
        float _1338 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1296.x + (-0.5));
        float _1340 = _1338 * (_1296.y + (-0.5));
        float _1341 = _1338 * (_1296.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_579, _580, _581), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4104 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1372 + 1.0))) + _1377) * _1342;
        float _1387 = _1310 * 0.5;
        float _1388 = _1320 * 0.5;
        float _1389 = _1330 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_579, _580, _581), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4137 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1414 + 1.0))) + _1419) * _1343;
        float _1429 = _1311 * 0.5;
        float _1430 = _1321 * 0.5;
        float _1431 = _1331 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_579, _580, _581), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4170 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1456 + 1.0))) + _1461) * _1344;
        _1478 = _1311;
        _1479 = _1310;
        _1480 = _1309;
        _1481 = _1321;
        _1482 = _1320;
        _1483 = _1319;
        _1484 = _1331;
        _1485 = _1330;
        _1486 = _1329;
        _1487 = _1344;
        _1488 = _1343;
        _1489 = _1342;
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1169;
        _1479 = _1169;
        _1480 = _1169;
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = _1169;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1181)) + _1181;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1182)) + _1182;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1183)) + _1183;
    float _1525 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1502));
    float _1546 = _803 * 0.5;
    float _1547 = _804 * 0.5;
    float _1548 = _805 * 0.5;
    float _1549 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1552 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1555 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1589;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1562 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1566 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1570 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1577 = dot(vec4(cbModelParam._m0[39u]), vec4(_1546, _1547, _1548, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1600;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1591 = dot(vec4(cbModelParam._m0[40u]), vec4(_1546, _1547, _1548, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1604 = (_1600 * cbModelParam._m0[1u].x) + (_1589 * (1.0 - cbModelParam._m0[1u].x));
    float _1614 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1614 : min(cbModelParam._m0[25u].z, _1614));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1662 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1666 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1670 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1673 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1676 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1679 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1707;
        if (_1673 > 0.0)
        {
            _1707 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1707 = frontier_phi_18_16_ladder;
        }
        float _1878;
        if (_1676 > 0.0)
        {
            _1878 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1878 = frontier_phi_27_23_ladder;
        }
        float _2173;
        if (_1679 > 0.0)
        {
            _2173 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2173 = frontier_phi_39_34_ladder;
        }
        float _2175 = isnan(_1878) ? _1707 : (isnan(_1707) ? _1878 : min(_1707, _1878));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1673) + _1662;
        float _2181 = (_2176 * _1676) + _1666;
        float _2182 = (_2176 * _1679) + _1670;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2183;
        float _2187 = _2183 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 > _2187) || ((_2181 < _2185) || ((_2180 < _2185) || (_2180 > _2187))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2182, cbModelParam._m0[9u].z, fma(_2181, cbModelParam._m0[9u].y, _2180 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2182, cbModelParam._m0[10u].z, fma(_2181, cbModelParam._m0[10u].y, _2180 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2182, cbModelParam._m0[11u].z, fma(_2181, cbModelParam._m0[11u].y, _2180 * cbModelParam._m0[11u].x))), _1615);
            frontier_phi_17_39_ladder = _2327.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2327.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2327.x * cbModelParam._m0[1u].y;
        }
        _1695 = frontier_phi_17_39_ladder_2;
        _1697 = frontier_phi_17_39_ladder_1;
        _1699 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1615);
        _1695 = _1683.x * cbModelParam._m0[1u].y;
        _1697 = _1683.y * cbModelParam._m0[1u].y;
        _1699 = _1683.z * cbModelParam._m0[1u].y;
    }
    float _1703 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1703 : min(cbModelParam._m0[25u].w, _1703));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1757 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1761 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1765 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1768 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1771 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1774 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1883;
        if (_1768 > 0.0)
        {
            _1883 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1883 = frontier_phi_29_25_ladder;
        }
        float _2200;
        if (_1771 > 0.0)
        {
            _2200 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _2200 = frontier_phi_41_36_ladder;
        }
        float _2538;
        if (_1774 > 0.0)
        {
            _2538 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2538 = frontier_phi_51_48_ladder;
        }
        float _2540 = isnan(_2200) ? _1883 : (isnan(_1883) ? _2200 : min(_1883, _2200));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1768) + _1757;
        float _2546 = (_2541 * _1771) + _1761;
        float _2547 = (_2541 * _1774) + _1765;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2547, cbModelParam._m0[17u].z, fma(_2546, cbModelParam._m0[17u].y, _2545 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2547, cbModelParam._m0[18u].z, fma(_2546, cbModelParam._m0[18u].y, _2545 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2547, cbModelParam._m0[19u].z, fma(_2546, cbModelParam._m0[19u].y, _2545 * cbModelParam._m0[19u].x))), _1704);
            frontier_phi_26_51_ladder = _2669.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2669.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2669.x * cbModelParam._m0[1u].z;
        }
        _1793 = frontier_phi_26_51_ladder_2;
        _1795 = frontier_phi_26_51_ladder_1;
        _1797 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1704);
        _1793 = _1777.x * cbModelParam._m0[1u].z;
        _1795 = _1777.y * cbModelParam._m0[1u].z;
        _1797 = _1777.z * cbModelParam._m0[1u].z;
    }
    float _1810 = (((_828 * _780) + _829) * _795) * ((cbModelParam._m0[1u].w * (_1793 - _1695)) + _1695);
    float _1812 = (((_828 * _782) + _829) * _795) * ((cbModelParam._m0[1u].w * (_1795 - _1697)) + _1697);
    float _1814 = (((_828 * _783) + _829) * _795) * ((cbModelParam._m0[1u].w * (_1797 - _1699)) + _1699);
    float _1817 = fma(_1814, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1820 = fma(_1814, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1823 = fma(_1814, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1810 * cbSceneParam._m0[91u].x));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1861 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1865 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1869 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1870 = _1857 / _1869;
    float _1871 = _1861 / _1869;
    float _1872 = _1865 / _1869;
    float _2019;
    float _2020;
    float _2021;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1899 = ((uint(_1872 > cbSceneParam._m0[59u].y) + uint(_1872 > cbSceneParam._m0[59u].x)) + uint(_1872 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1900 = _1899 + 43u;
        uint _1908 = _1899 + 44u;
        uint _1916 = _1899 + 45u;
        uint _1924 = _1899 + 46u;
        float _1935 = fma(_1869, cbSceneParam._m0[_1900].w, fma(_1865, cbSceneParam._m0[_1900].z, fma(_1861, cbSceneParam._m0[_1900].y, _1857 * cbSceneParam._m0[_1900].x)));
        float _1939 = fma(_1869, cbSceneParam._m0[_1908].w, fma(_1865, cbSceneParam._m0[_1908].z, fma(_1861, cbSceneParam._m0[_1908].y, _1857 * cbSceneParam._m0[_1908].x)));
        float _1947 = fma(_1869, cbSceneParam._m0[_1924].w, fma(_1865, cbSceneParam._m0[_1924].z, fma(_1861, cbSceneParam._m0[_1924].y, _1857 * cbSceneParam._m0[_1924].x)));
        float _1952 = cbSceneParam._m0[33u].z * _1947;
        float _1954 = cbSceneParam._m0[33u].w * _1947;
        float _1957 = fma(_1869, cbSceneParam._m0[_1916].w, fma(_1865, cbSceneParam._m0[_1916].z, fma(_1861, cbSceneParam._m0[_1916].y, _1857 * cbSceneParam._m0[_1916].x))) / _1947;
        float _2005 = (cbSceneParam._m0[33u].x - sqrt(((_1871 * _1871) + (_1870 * _1870)) + (_1872 * _1872))) * cbSceneParam._m0[33u].y;
        float _4296 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2012 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 + _1935) / _1947, (_1954 + _1939) / _1947), _1957), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 + _1935) / _1947, (_1939 - _1952) / _1947), _1957), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1935 - _1952) / _1947, (_1939 - _1954) / _1947), _1957), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1935 - _1954) / _1947, (_1952 + _1939) / _1947), _1957), 0.0)).x), vec4(0.25)));
        _2019 = 1.0 - (_2012 * cbSceneParam._m0[34u].x);
        _2020 = 1.0 - (_2012 * cbSceneParam._m0[34u].y);
        _2021 = 1.0 - (_2012 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2019 = 1.0;
        _2020 = 1.0;
        _2021 = 1.0;
    }
    float _2085;
    float _2087;
    float _2089;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2073 = fma(_1869, cbSceneParam._m0[63u].w, fma(_1865, cbSceneParam._m0[63u].z, fma(_1861, cbSceneParam._m0[63u].y, _1857 * cbSceneParam._m0[63u].x)));
        float _2074 = fma(_1869, cbSceneParam._m0[60u].w, fma(_1865, cbSceneParam._m0[60u].z, fma(_1861, cbSceneParam._m0[60u].y, _1857 * cbSceneParam._m0[60u].x))) / _2073;
        float _2075 = fma(_1869, cbSceneParam._m0[61u].w, fma(_1865, cbSceneParam._m0[61u].z, fma(_1861, cbSceneParam._m0[61u].y, _1857 * cbSceneParam._m0[61u].x))) / _2073;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_2074 >= cbSceneParam._m0[64u].x) && (_2075 >= cbSceneParam._m0[64u].y)) && (_2074 <= cbSceneParam._m0[64u].z)) && (_2075 <= cbSceneParam._m0[64u].w))
        {
            float _2213 = fma(_1869, cbSceneParam._m0[62u].w, fma(_1865, cbSceneParam._m0[62u].z, fma(_1861, cbSceneParam._m0[62u].y, _1857 * cbSceneParam._m0[62u].x))) / _2073;
            float _2217 = isnan(cbSceneParam._m0[41u].w) ? _2213 : (isnan(_2213) ? cbSceneParam._m0[41u].w : max(_2213, cbSceneParam._m0[41u].w));
            float _2260 = (cbSceneParam._m0[33u].x - sqrt(((_1871 * _1871) + (_1870 * _1870)) + (_1872 * _1872))) * cbSceneParam._m0[33u].y;
            float _4312 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
            float _2267 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2074, cbSceneParam._m0[33u].w + _2075), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2074, _2075 - cbSceneParam._m0[33u].z), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2074 - cbSceneParam._m0[33u].z, _2075 - cbSceneParam._m0[33u].w), _2217), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2074 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2075), _2217), 0.0)).x), vec4(0.25)));
            float _2271 = 1.0 - (_2267 * cbSceneParam._m0[34u].x);
            float _2272 = 1.0 - (_2267 * cbSceneParam._m0[34u].y);
            float _2273 = 1.0 - (_2267 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_2273) ? _2021 : (isnan(_2021) ? _2273 : min(_2021, _2273));
            frontier_phi_38_37_ladder_1 = isnan(_2272) ? _2020 : (isnan(_2020) ? _2272 : min(_2020, _2272));
            frontier_phi_38_37_ladder_2 = isnan(_2271) ? _2019 : (isnan(_2019) ? _2271 : min(_2019, _2271));
        }
        else
        {
            frontier_phi_38_37_ladder = _2021;
            frontier_phi_38_37_ladder_1 = _2020;
            frontier_phi_38_37_ladder_2 = _2019;
        }
        _2085 = frontier_phi_38_37_ladder_2;
        _2087 = frontier_phi_38_37_ladder_1;
        _2089 = frontier_phi_38_37_ladder;
    }
    else
    {
        _2085 = _2019;
        _2087 = _2020;
        _2089 = _2021;
    }
    uvec4 _2094 = floatBitsToUint(cbInstanceData._m0[_723 + 5u]);
    uint _2096 = _2094.x * 14u;
    uint _2097 = _2096 + 13u;
    float _2104 = _795 + (-1.0);
    float _2109 = (cbLight._m0[_2097].x * _2104) + 1.0;
    float _2110 = (cbLight._m0[_2097].y * _2104) + 1.0;
    float _2111 = (cbLight._m0[_2097].z * _2104) + 1.0;
    float _2112 = (cbLight._m0[_2097].w * _2104) + 1.0;
    uint _2113 = _2096 + 5u;
    float _2119 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
    uint _2123 = _2096 + 4u;
    float _2132 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
    uint _2136 = _2096 | 1u;
    float _2147 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_579, _580, _581));
    float _2150 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_579, _580, _581));
    float _4348 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _4359 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2155 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
    float _2157 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2164 = ((cbLight._m0[_2113].x * _2119) * _2157) + (((cbLight._m0[_2123].x * _2085) * _2132) * _2155);
    float _2165 = ((_2119 * cbLight._m0[_2113].y) * _2157) + (((cbLight._m0[_2123].y * _2087) * _2132) * _2155);
    float _2166 = ((_2119 * cbLight._m0[_2113].z) * _2157) + (((cbLight._m0[_2123].z * _2089) * _2132) * _2155);
    uvec4 _2170 = floatBitsToUint(cbLight._m0[_2096 + 12u]);
    bool _2172 = _2170.x == 0u;
    float _2274;
    float _2276;
    float _2278;
    if (_2172)
    {
        _2274 = _2164;
        _2276 = _2165;
        _2278 = _2166;
    }
    else
    {
        uint _2282 = _2096 + 6u;
        float _2298 = (dot(vec3(cbLight._m0[_2096 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2299 = _2298 * _2298;
        float _4370 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2300 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2301 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2274 = (((cbLight._m0[_2282].x * 0.3183098733425140380859375) * _2300) * _2301) + _2164;
        _2276 = (((cbLight._m0[_2282].y * 0.3183098733425140380859375) * _2300) * _2301) + _2165;
        _2278 = (((cbLight._m0[_2282].z * 0.3183098733425140380859375) * _2300) * _2301) + _2166;
    }
    bool _2281 = _2170.y == 0u;
    float _2336;
    float _2338;
    float _2340;
    if (_2281)
    {
        _2336 = _2274;
        _2338 = _2276;
        _2340 = _2278;
    }
    else
    {
        uint _2509 = _2096 + 7u;
        float _2525 = (dot(vec3(cbLight._m0[_2096 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2526 = _2525 * _2525;
        float _4386 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2527 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2528 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2336 = (((cbLight._m0[_2509].x * 0.3183098733425140380859375) * _2527) * _2528) + _2274;
        _2338 = (((cbLight._m0[_2509].y * 0.3183098733425140380859375) * _2527) * _2528) + _2276;
        _2340 = (((cbLight._m0[_2509].z * 0.3183098733425140380859375) * _2527) * _2528) + _2278;
    }
    uint _2343 = _2096 + 8u;
    float _2356 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _710) * 0.949999988079071044921875);
    float _2357 = _2356 * _2356;
    float _2358 = cbLight._m0[_2096].x + _660;
    float _2359 = cbLight._m0[_2096].y + _661;
    float _2360 = cbLight._m0[_2096].z + _662;
    float _2364 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
    float _2365 = _2364 * _2358;
    float _2366 = _2364 * _2359;
    float _2367 = _2364 * _2360;
    float _2368 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2096].xyz));
    float _4402 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2372 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2373 = dot(vec3(_579, _580, _581), vec3(_2365, _2366, _2367));
    float _4424 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2377 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2365, _2366, _2367));
    float _4435 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2381 = _2357 * _2357;
    float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
    float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
    float _2394 = 0.959999978542327880859375 - _777;
    float _2396 = 0.959999978542327880859375 - _778;
    float _2397 = 0.959999978542327880859375 - _779;
    float _2404 = 1.0 - _2357;
    float _2415 = (0.5 / (((_2372 * ((_2371 * _2404) + _2357)) + 9.9999999392252902907785028219223e-09) + (((_2372 * _2404) + _2357) * _2371))) * _2371;
    float _4446 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
    uint _2431 = _2096 + 9u;
    float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _710) * 0.949999988079071044921875);
    float _2443 = _2442 * _2442;
    float _2444 = cbLight._m0[_2136].x + _660;
    float _2445 = cbLight._m0[_2136].y + _661;
    float _2446 = cbLight._m0[_2136].z + _662;
    float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
    float _2451 = _2450 * _2444;
    float _2452 = _2450 * _2445;
    float _2453 = _2450 * _2446;
    float _2454 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2136].xyz));
    float _4457 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2458 = dot(vec3(_579, _580, _581), vec3(_2451, _2452, _2453));
    float _4468 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2451, _2452, _2453));
    float _4479 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2443 * _2443;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
    float _2484 = 1.0 - _2443;
    float _2494 = (0.5 / (((_2372 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2372 * _2484) + _2443) * _2457))) * _2457;
    float _4490 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2496 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    float _2506 = (((((_2477 * _2394) + _780) * cbLight._m0[_2431].x) * _2496) * _2119) + ((((cbLight._m0[_2343].x * _2085) * ((_2393 * _2394) + _780)) * _2417) * _2132);
    float _2507 = (((((_2477 * _2396) + _782) * cbLight._m0[_2431].y) * _2496) * _2119) + ((((cbLight._m0[_2343].y * _2087) * ((_2393 * _2396) + _782)) * _2417) * _2132);
    float _2508 = (((((_2477 * _2397) + _783) * cbLight._m0[_2431].z) * _2496) * _2119) + ((((cbLight._m0[_2343].z * _2089) * ((_2393 * _2397) + _783)) * _2417) * _2132);
    float _2564;
    float _2566;
    float _2568;
    if (_2172)
    {
        _2564 = _2506;
        _2566 = _2507;
        _2568 = _2508;
    }
    else
    {
        uint _2570 = _2096 + 2u;
        uint _2574 = _2096 + 10u;
        float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _710) * 0.949999988079071044921875);
        float _2589 = _2588 * _2588;
        float _2590 = cbLight._m0[_2570].x + _660;
        float _2591 = cbLight._m0[_2570].y + _661;
        float _2592 = cbLight._m0[_2570].z + _662;
        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
        float _2597 = _2596 * _2590;
        float _2598 = _2596 * _2591;
        float _2599 = _2596 * _2592;
        float _2600 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2570].xyz));
        float _4501 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2604 = dot(vec3(_579, _580, _581), vec3(_2597, _2598, _2599));
        float _4512 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2608 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2597, _2598, _2599));
        float _4523 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2612 = _2589 * _2589;
        float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
        float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0);
        float _2630 = 1.0 - _2589;
        float _2640 = (0.5 / (((_2372 * ((_2603 * _2630) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2372 * _2630) + _2589) * _2603))) * _2603;
        float _4534 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2642 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
        float _2643 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
        _2564 = (((((_2623 * _2394) + _780) * cbLight._m0[_2574].x) * _2642) * _2643) + _2506;
        _2566 = (((((_2623 * _2396) + _782) * cbLight._m0[_2574].y) * _2642) * _2643) + _2507;
        _2568 = (((((_2623 * _2397) + _783) * cbLight._m0[_2574].z) * _2642) * _2643) + _2508;
    }
    float _2674;
    float _2676;
    float _2678;
    if (_2281)
    {
        _2674 = _2564;
        _2676 = _2566;
        _2678 = _2568;
    }
    else
    {
        uint _2685 = _2096 + 3u;
        uint _2689 = _2096 + 11u;
        float _2703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2685].w)) * _710) * 0.949999988079071044921875);
        float _2704 = _2703 * _2703;
        float _2705 = cbLight._m0[_2685].x + _660;
        float _2706 = cbLight._m0[_2685].y + _661;
        float _2707 = cbLight._m0[_2685].z + _662;
        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
        float _2712 = _2711 * _2705;
        float _2713 = _2711 * _2706;
        float _2714 = _2711 * _2707;
        float _2715 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2685].xyz));
        float _4550 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2719 = dot(vec3(_579, _580, _581), vec3(_2712, _2713, _2714));
        float _4561 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2723 = dot(vec3(cbLight._m0[_2685].xyz), vec3(_2712, _2713, _2714));
        float _4572 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2727 = _2704 * _2704;
        float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
        float _2738 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
        float _2745 = 1.0 - _2704;
        float _2755 = (0.5 / (((_2372 * ((_2718 * _2745) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2372 * _2745) + _2704) * _2718))) * _2718;
        float _4583 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2757 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
        float _2758 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2674 = (((((_2738 * _2394) + _780) * cbLight._m0[_2689].x) * _2757) * _2758) + _2564;
        _2676 = (((((_2738 * _2396) + _782) * cbLight._m0[_2689].y) * _2757) * _2758) + _2566;
        _2678 = (((((_2738 * _2397) + _783) * cbLight._m0[_2689].z) * _2757) * _2758) + _2568;
    }
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_2094.y == 0u)
    {
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.x;
        uint _2791 = uint((float(_2779.y) * floor(float(uint(cbSceneParam._m0[85u].y * _669) / _2780))) + floor(float(uint(cbSceneParam._m0[85u].x * _668) / _2780)));
        float _2801 = (log2(_1872 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2802 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        uint _2805 = uint(isnan(14.0) ? _2802 : (isnan(_2802) ? 14.0 : min(_2802, 14.0)));
        uvec4 _2810 = texelFetch(g_lightClusterGridBuffer, int(((_2805 << 2u) + (_2791 << 6u)) >> 2u));
        uint _2811 = _2810.x;
        uint _2812 = _2779.z;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        if (((((1u << ((_2812 >> 4u) & 15u)) + 4294967295u) & _2811) == 0u) || ((_2812 & 240u) == 0u))
        {
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
        }
        else
        {
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            uint _3058 = 0u;
            uint _3067;
            bool _3068;
            for (;;)
            {
                _3067 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                _3068 = _3067 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_3068)
                {
                    frontier_phi_70_pred = _3057;
                    frontier_phi_70_pred_1 = _3056;
                    frontier_phi_70_pred_2 = _3055;
                    frontier_phi_70_pred_3 = _3053;
                    frontier_phi_70_pred_4 = _3052;
                    frontier_phi_70_pred_5 = _3054;
                }
                else
                {
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    uint _3182;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3067;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    for (;;)
                    {
                        uint _3186 = uint(findLSB(_3182)) + (_3058 << 5u);
                        uint _3183 = (_3182 + 4294967295u) & _3182;
                        uint _3188 = _3186 * 48u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 3u)).x));
                        uint _3208 = (_3186 * 48u) + 4u;
                        vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3227 = (_3186 * 48u) + 8u;
                        vec3 _3238 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x));
                        float _3242 = _3202.x - _1870;
                        float _3243 = _3202.y - _1871;
                        float _3244 = _3202.z - _1872;
                        float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                        float _3248 = inversesqrt(_3245);
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3252 = dot(vec3(_691, _694, _697), vec3(_3249, _3250, _3251));
                        float _3257 = 1.0 - (_3245 * _3202.w);
                        float _4609 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3258 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3259 = sqrt(_3245) * _3221.w;
                        float _3262 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3252) + _3263;
                        float _3269 = _3259 * _3259;
                        float _3273 = ((isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))) * _3258) / ((_3269 * 0.699999988079071044921875) + 1.0);
                        float _3277 = (-0.0) - _1870;
                        float _3278 = (-0.0) - _1871;
                        float _3279 = (-0.0) - _1872;
                        float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3293 = exp2(log2(1.0 / ((_3269 * 3.5) + 5.0)) * 0.25);
                        float _3294 = 1.0 - _811;
                        float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                        float _3302 = _3301 * _3301;
                        float _3303 = _3302 * _3302;
                        float _3304 = _3284 + _3249;
                        float _3305 = _3285 + _3250;
                        float _3306 = _3286 + _3251;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3314 = dot(vec3(_691, _694, _697), vec3(_3284, _3285, _3286));
                        float _4625 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3318 = dot(vec3(_691, _694, _697), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                        float _4636 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                        float _3326 = _3262 * _3302;
                        float _3327 = _3326 * _3326;
                        float _3330 = ((1.0 - _3327) * _3252) + _3327;
                        float _4647 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3332 = 1.0 - _3302;
                        float _3342 = (0.5 / (((_3331 * ((_3317 * _3332) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3331 * _3332) + _3302) * _3317))) * _3331;
                        float _4658 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3353 = (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3325 * _3325) * ((_3269 * 2.1991131305694580078125) + 3.141590118408203125))) * _3258;
                        _3111 = (_3273 * _3221.x) + _3179;
                        _3112 = (_3273 * _3221.y) + _3180;
                        _3113 = (_3273 * _3221.z) + _3181;
                        _3108 = (_3353 * _3238.x) + _3176;
                        _3109 = (_3353 * _3238.y) + _3177;
                        _3110 = (_3353 * _3238.z) + _3178;
                        if (_3183 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3183;
                        }
                    }
                    frontier_phi_70_pred = _3113;
                    frontier_phi_70_pred_1 = _3112;
                    frontier_phi_70_pred_2 = _3111;
                    frontier_phi_70_pred_3 = _3109;
                    frontier_phi_70_pred_4 = _3108;
                    frontier_phi_70_pred_5 = _3110;
                }
                _2919 = frontier_phi_70_pred;
                _2917 = frontier_phi_70_pred_1;
                _2915 = frontier_phi_70_pred_2;
                _2911 = frontier_phi_70_pred_3;
                _2909 = frontier_phi_70_pred_4;
                _2913 = frontier_phi_70_pred_5;
                uint _3059 = _3058 + 1u;
                if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3052 = _2909;
                    _3053 = _2911;
                    _3054 = _2913;
                    _3055 = _2915;
                    _3056 = _2917;
                    _3057 = _2919;
                    _3058 = _3059;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
        }
        uvec4 _2922 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2923 = _2922.z;
        uint _2925 = (_2923 >> 8u) & 15u;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((4294967295u << _2925) & _2811) == 0u)
        {
            _3020 = _2908;
            _3022 = _2910;
            _3024 = _2912;
            _3026 = _2914;
            _3028 = _2916;
            _3030 = _2918;
        }
        else
        {
            float _3045 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
            float _3046 = _3045 * _1870;
            float _3047 = _3045 * _1871;
            float _3048 = _3045 * _1872;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2925 < ((_2923 >> 12u) & 15u))
            {
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3159 = _2908;
                float _3160 = _2910;
                float _3161 = _2912;
                float _3162 = _2914;
                float _3163 = _2916;
                float _3164 = _2918;
                uint _3165 = _2925;
                uint _3174;
                bool _3175;
                for (;;)
                {
                    _3174 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                    _3175 = _3174 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_3175)
                    {
                        frontier_phi_76_pred = _3159;
                        frontier_phi_76_pred_1 = _3164;
                        frontier_phi_76_pred_2 = _3163;
                        frontier_phi_76_pred_3 = _3162;
                        frontier_phi_76_pred_4 = _3161;
                        frontier_phi_76_pred_5 = _3160;
                    }
                    else
                    {
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3371 = _3159;
                        float _3372 = _3160;
                        float _3373 = _3161;
                        float _3374 = _3162;
                        float _3375 = _3163;
                        float _3376 = _3164;
                        uint _3377 = _3174;
                        uint _3378;
                        vec4 _3403;
                        float _3404;
                        vec4 _3419;
                        vec3 _3431;
                        vec4 _3446;
                        vec4 _3461;
                        float _3507;
                        bool _3508;
                        for (;;)
                        {
                            uint _3388 = ((_3165 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3377));
                            _3378 = (_3377 + 4294967295u) & _3377;
                            uint _3390 = _3388 * 40u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3404 = _3403.w;
                            uint _3406 = (_3388 * 40u) + 4u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3388 * 40u) + 8u;
                            _3431 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x));
                            uint _3433 = (_3388 * 40u) + 16u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3388 * 40u) + 20u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3388 * 40u) + 24u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3482 = (_3388 * 40u) + 28u;
                            vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3507 = fma(_1872, _3495.z, fma(_1871, _3495.y, _3495.x * _1870)) + _3495.w;
                            _3508 = !((fma(_1872, _3476.z, fma(_1871, _3476.y, _3476.x * _1870)) + _3476.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3508)
                            {
                                float _3535 = _3403.x - _1870;
                                float _3536 = _3403.y - _1871;
                                float _3537 = _3403.z - _1872;
                                float _3538 = dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537));
                                float _3541 = inversesqrt(_3538);
                                float _3542 = _3541 * _3535;
                                float _3543 = _3541 * _3536;
                                float _3544 = _3541 * _3537;
                                float _3548 = 1.0 - (_3538 / (_3404 * _3404));
                                float _4669 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3553 = sqrt(_3538) * _3419.w;
                                float _3555 = 1.39999997615814208984375 / (_3553 + 1.39999997615814208984375);
                                float _3556 = _3555 * _3555;
                                float _3559 = ((1.0 - _3556) * dot(vec3(_3542, _3543, _3544), vec3(_691, _694, _697))) + _3556;
                                float _3562 = _3553 * _3553;
                                float _3566 = (fma(_1872, _3446.z, fma(_1871, _3446.y, _3446.x * _1870)) + _3446.w) / _3507;
                                float _3567 = (fma(_1872, _3461.z, fma(_1871, _3461.y, _3461.x * _1870)) + _3461.w) / _3507;
                                float _3571 = 1.0 - dot(vec2(_3566, _3567), vec2(_3566, _3567));
                                float _4685 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3573 = _3572 * (((isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0))) * _3549) / ((_3562 * 0.699999988079071044921875) + 1.0));
                                float _3585 = exp2(log2(1.0 / ((_3562 * 3.5) + 5.0)) * 0.25);
                                float _3586 = 1.0 - _811;
                                float _3593 = sqrt(1.0 - ((1.0 - (_3586 * _3586)) * (1.0 - (_3585 * _3585))));
                                float _3594 = _3593 * _3593;
                                float _3595 = _3594 * _3594;
                                float _3596 = _3542 - _3046;
                                float _3597 = _3543 - _3047;
                                float _3598 = _3544 - _3048;
                                float _3602 = inversesqrt(dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598)));
                                float _3606 = dot(vec3(_691, _694, _697), vec3((-0.0) - _3046, (-0.0) - _3047, (-0.0) - _3048));
                                float _4696 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3610 = dot(vec3(_691, _694, _697), vec3(_3602 * _3596, _3602 * _3597, _3602 * _3598));
                                float _4707 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3617 = ((_3613 * _3613) * (_3595 + (-1.0))) + 1.0;
                                float _3618 = _3555 * _3594;
                                float _3619 = _3618 * _3618;
                                float _3625 = ((1.0 - _3619) * dot(vec3(_691, _694, _697), vec3(_3542, _3543, _3544))) + _3619;
                                float _4718 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3627 = 1.0 - _3594;
                                float _3637 = (0.5 / (((_3626 * ((_3609 * _3627) + _3594)) + 9.9999999392252902907785028219223e-09) + (((_3626 * _3627) + _3594) * _3609))) * _3626;
                                float _4729 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3647 = (_3572 * _3549) * (((_3595 * 3.1415927410125732421875) * (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) / ((_3617 * _3617) * ((_3562 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3647 * _3431.x;
                                frontier_phi_82_pred_1 = _3573 * _3419.z;
                                frontier_phi_82_pred_2 = _3573 * _3419.y;
                                frontier_phi_82_pred_3 = _3573 * _3419.x;
                                frontier_phi_82_pred_4 = _3647 * _3431.z;
                                frontier_phi_82_pred_5 = _3647 * _3431.y;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3651 = frontier_phi_82_pred;
                            _3656 = frontier_phi_82_pred_1;
                            _3655 = frontier_phi_82_pred_2;
                            _3654 = frontier_phi_82_pred_3;
                            _3653 = frontier_phi_82_pred_4;
                            _3652 = frontier_phi_82_pred_5;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            if (_3378 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3378;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3358;
                        frontier_phi_76_pred_1 = _3363;
                        frontier_phi_76_pred_2 = _3362;
                        frontier_phi_76_pred_3 = _3361;
                        frontier_phi_76_pred_4 = _3360;
                        frontier_phi_76_pred_5 = _3359;
                    }
                    _3021 = frontier_phi_76_pred;
                    _3031 = frontier_phi_76_pred_1;
                    _3029 = frontier_phi_76_pred_2;
                    _3027 = frontier_phi_76_pred_3;
                    _3025 = frontier_phi_76_pred_4;
                    _3023 = frontier_phi_76_pred_5;
                    uint _3166 = _3165 + 1u;
                    if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3159 = _3021;
                        _3160 = _3023;
                        _3161 = _3025;
                        _3162 = _3027;
                        _3163 = _3029;
                        _3164 = _3031;
                        _3165 = _3166;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _3031;
                frontier_phi_64_65_ladder_1 = _3029;
                frontier_phi_64_65_ladder_2 = _3027;
                frontier_phi_64_65_ladder_3 = _3025;
                frontier_phi_64_65_ladder_4 = _3023;
                frontier_phi_64_65_ladder_5 = _3021;
            }
            else
            {
                frontier_phi_64_65_ladder = _2918;
                frontier_phi_64_65_ladder_1 = _2916;
                frontier_phi_64_65_ladder_2 = _2914;
                frontier_phi_64_65_ladder_3 = _2912;
                frontier_phi_64_65_ladder_4 = _2910;
                frontier_phi_64_65_ladder_5 = _2908;
            }
            _3020 = frontier_phi_64_65_ladder_5;
            _3022 = frontier_phi_64_65_ladder_4;
            _3024 = frontier_phi_64_65_ladder_3;
            _3026 = frontier_phi_64_65_ladder_2;
            _3028 = frontier_phi_64_65_ladder_1;
            _3030 = frontier_phi_64_65_ladder;
        }
        float _3035 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2823 = (_3035 * _3026) + _2336;
        _2825 = (_3035 * _3028) + _2338;
        _2827 = (_3035 * _3030) + _2340;
        _2829 = ((_3020 * _780) * _3035) + _2674;
        _2831 = ((_3022 * _782) * _3035) + _2676;
        _2833 = ((_3024 * _783) * _3035) + _2678;
    }
    else
    {
        _2823 = _2336;
        _2825 = _2338;
        _2827 = _2340;
        _2829 = _2674;
        _2831 = _2676;
        _2833 = _2678;
    }
    vec4 _2839 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4745 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4756 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4767 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2863 = (((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2823 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _795))) + ((_2829 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1604)) * cbPerFrame._m0[3u].x)) + (_2839.x * cbMtdParam._m0[3u].x);
    float _2865 = ((_2839.y * cbMtdParam._m0[3u].x) + ((_2831 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1604)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2825 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _795)));
    float _2867 = ((_2839.z * cbMtdParam._m0[3u].x) + ((_2833 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1604)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2827 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _795)));
    uint _2871 = _723 + 6u;
    float _2879 = _668 / cbSceneParam._m0[86u].x;
    float _2880 = _669 / cbSceneParam._m0[86u].y;
    vec4 _2894 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, (log2((isnan(cbSceneParam._m0[77u].w) ? _602 : (isnan(_602) ? cbSceneParam._m0[77u].w : min(_602, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2896 = _2894.x;
    float _2897 = _2894.y;
    float _2898 = _2894.z;
    float _2899 = _2894.w;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_602 > cbSceneParam._m0[78u].w)
    {
        float _2933 = isnan(_602) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _602 : min(cbSceneParam._m0[80u].w, _602));
        float _2934 = _2933 / _602;
        float _2945 = _2934 * _653;
        float _2946 = _654 * _2934;
        float _2947 = (-0.0) - _2946;
        float _2948 = _2934 * _655;
        float _2950 = (cbSceneParam._m0[77u].w * _2947) / _2933;
        float _2951 = _2950 + cbSceneParam._m0[79u].w;
        float _2952 = cbSceneParam._m0[79u].w - _2946;
        float _2958 = sqrt(((_2945 * _2945) + (_2946 * _2946)) + (_2948 * _2948));
        float _2961 = (1.0 - (cbSceneParam._m0[77u].w / _2933)) * _2958;
        float _2966 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2968 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3121;
        if (abs((_2947 - _2950) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3121 = ((((_2951 > 0.0) ? exp2(_2966 * _2951) : (2.0 - exp2(_2968 * _2951))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2961;
        }
        else
        {
            float _3081 = 1.0 / cbSceneParam._m0[80u].x;
            float _3082 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : max(_2951, _2952));
            float _3083 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : min(_2951, _2952));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            float _3093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : min(_3083, 0.0));
            _3121 = ((abs(_2958 / _2947) * cbSceneParam._m0[80u].y) * ((((_3092 - _3093) * 2.0) - ((exp2(_2966 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0)))) - exp2(_2966 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))))) * _3081)) - ((exp2(_2968 * _3092) - exp2(_2968 * _3093)) * _3081))) + (_2961 * cbSceneParam._m0[80u].z);
        }
        vec4 _3123 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, 1.0), 0.0);
        float _3132 = exp2((_3121 * (-1.44269502162933349609375)) * (1.0 - _3123.w));
        float _3133 = log2(_3132);
        float _3149 = log2(_2899);
        _2970 = (exp2(_3149 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].x)) * _3123.x) / cbSceneParam._m0[78u].x)) + _2896;
        _2972 = (exp2(_3149 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].y)) * _3123.y) / cbSceneParam._m0[78u].y)) + _2897;
        _2974 = (exp2(_3149 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].z)) * _3123.z) / cbSceneParam._m0[78u].z)) + _2898;
        _2976 = _3132 * _2899;
    }
    else
    {
        _2970 = _2896;
        _2972 = _2897;
        _2974 = _2898;
        _2976 = _2899;
    }
    float _2988 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2989 = _2988 == 3.0;
    float _2990 = log2(_2976);
    float _2997 = exp2(_2990 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0)));
    float _2998 = exp2(_2990 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0)));
    float _2999 = exp2(_2990 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0)));
    float _3008 = (_2988 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3008 * (_2989 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2970)));
    SV_Target.y = _3008 * (_2989 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2972)));
    SV_Target.z = _3008 * (_2989 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2974)));
    SV_Target.w = cbInstanceData._m0[_2871].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2871].w;
}


