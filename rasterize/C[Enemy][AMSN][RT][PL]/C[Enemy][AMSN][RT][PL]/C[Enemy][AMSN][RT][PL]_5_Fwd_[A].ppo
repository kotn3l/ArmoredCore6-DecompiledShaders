#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1086;
float _3496;
float _3497;
float _3498;
float _3499;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _256 = cbMtdParam._m0[20u].z + TEXCOORD.y;
    float _258 = log2(0.0);
    bool _261 = exp2(_258 * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x;
    float _262;
    float _264;
    float _266;
    if (_261)
    {
        _262 = cbMtdParam._m0[18u].x;
        _264 = cbMtdParam._m0[18u].y;
        _266 = cbMtdParam._m0[18u].z;
    }
    else
    {
        _262 = cbMtdParam._m0[17u].x;
        _264 = cbMtdParam._m0[17u].y;
        _266 = cbMtdParam._m0[17u].z;
    }
    float _271;
    if (_261)
    {
        _271 = cbMtdParam._m0[19u].y;
    }
    else
    {
        _271 = cbMtdParam._m0[19u].z;
    }
    float _277;
    float _279;
    if (_261)
    {
        _277 = cbMtdParam._m0[26u].x;
        _279 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _277 = cbMtdParam._m0[22u].x;
        _279 = cbMtdParam._m0[22u].y;
    }
    float _281 = _277 * TEXCOORD.x;
    float _282 = _279 * TEXCOORD.y;
    float _294 = floor(_271);
    vec4 _297 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _281) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _282) + cbTextureTilingScale._m0[6u].w, _294));
    vec4 _320 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _256) + cbTextureTilingScale._m0[0u].w));
    float _329 = (((_262 * cbMtdParam._m0[19u].w) * _297.x) * cbMtdParam._m0[9u].x) * _320.x;
    float _333 = (((_264 * cbMtdParam._m0[19u].w) * _297.y) * cbMtdParam._m0[9u].y) * _320.y;
    float _337 = (((_266 * cbMtdParam._m0[19u].w) * _297.z) * cbMtdParam._m0[9u].z) * _320.z;
    vec4 _349 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _256) + cbTextureTilingScale._m0[1u].w));
    float _353 = _349.z;
    vec4 _366 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _281) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _282) + cbTextureTilingScale._m0[8u].w, _294));
    float _183[2];
    float _184[2];
    _183[0u] = cbMtdParam._m0[25u].x;
    _184[0u] = cbMtdParam._m0[25u].y;
    _183[1u] = cbMtdParam._m0[25u].z;
    _184[1u] = cbMtdParam._m0[25u].w;
    float _380 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _383 = uint(int(isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0))));
    float _388 = _184[_383] + _366.x;
    vec4 _407 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _281) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _282) + cbTextureTilingScale._m0[7u].w, _294));
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3518 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _421 = sqrt(1.0 - (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))));
    float _430 = (cbMtdParam._m0[20u].x * (((_353 * 2.0) * (_407.z + _183[_383])) - _353)) + _353;
    float _434 = (cbMtdParam._m0[20u].y * ((_349.x * 2.0) + (-1.0))) + _414;
    float _435 = (cbMtdParam._m0[20u].y * ((_349.y * 2.0) + (-1.0))) + _415;
    float _438 = fma(_421, _234, fma(_435, _226 * TANGENT.x, (_212 * _204) * _434));
    float _441 = fma(_421, _235, fma(_435, _226 * TANGENT.y, (_212 * _205) * _434));
    float _444 = fma(_421, _236, fma(_435, _226 * TANGENT.z, (_212 * _206) * _434));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    float _449 = _448 * _438;
    float _450 = _448 * _441;
    float _451 = _448 * _444;
    float _3529 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _452 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3551 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3562 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3573 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _456 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _472 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _524 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _514);
    float _525 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _514);
    float _526 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _514);
    float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
    float _531 = _524 * _530;
    float _532 = _525 * _530;
    float _533 = _526 * _530;
    vec4 _538 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _540 = _538.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _766 = sqrt(((_524 * _524) + (_525 * _525)) + (_526 * _526));
        float _772 = (cbMatDynParam._m0[5u].x * _766) + cbMatDynParam._m0[5u].y;
        float _3584 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _777 = (cbMatDynParam._m0[5u].z * _766) + cbMatDynParam._m0[5u].w;
        float _3595 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) - _773)) + _773) < ((_540 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _557 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _559 = _557.w;
    float _578 = fma(_451, cbSceneParam._m0[5u].z, fma(_450, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _449));
    float _581 = fma(_451, cbSceneParam._m0[6u].z, fma(_450, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _449));
    float _584 = fma(_451, cbSceneParam._m0[7u].z, fma(_450, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _449));
    vec4 _586 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _597 = (((_586.y - _452) + (_586.w * _452)) * cbMtdParam._m0[3u].x) + _452;
    uint _610 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = _610 + 9u;
    uint _613 = _612 + uint(cbMatDynParam._m0[0u].w);
    float _619 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_613].x;
    float _620 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_613].y;
    float _621 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_613].z;
    float _3606 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    vec4 _625 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _630 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _641 = (((_630.x - _456) + (_630.w * _456)) * cbMtdParam._m0[3u].x) + _456;
    float _654 = (cbMtdParam._m0[3u].x * (((_622 * _559) - _622) + _625.x)) + _622;
    float _655 = (cbMtdParam._m0[3u].x * (((_623 * _559) - _623) + _625.y)) + _623;
    float _656 = (cbMtdParam._m0[3u].x * (((_624 * _559) - _624) + _625.z)) + _624;
    float _657 = 1.0 - _641;
    float _658 = _657 * _654;
    float _659 = _657 * _655;
    float _660 = _657 * _656;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _641;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _641;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _641;
    float _668 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    float _671 = _667 + 0.039999999105930328369140625;
    vec4 _680 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _683 = _680.x * TEXCOORD_4;
    float _684 = dot(vec3(_449, _450, _451), vec3(_531, _532, _533));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _449) - _531;
    float _692 = (_687 * _450) - _532;
    float _693 = (_687 * _451) - _533;
    float _697 = abs(dot(vec3(_531, _532, _533), vec3(_449, _450, _451)));
    float _3639 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_597);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _718 = (1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _719 = _712 * _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1085;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _810 = fma(_755, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747));
        float _814 = fma(_755, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747));
        float _818 = fma(_755, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747));
        float _843 = _747 + _449;
        float _844 = _751 + _450;
        float _845 = _755 + _451;
        float _855 = fma(_845, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843)) - _810;
        float _856 = fma(_845, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843)) - _814;
        float _857 = fma(_845, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843)) - _818;
        float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
        float _874 = ((_861 * _855) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_810 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_861 * _856) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_814 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_861 * _857) / cbModelParam._m0[34u].z) + ((((((_818 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        float _913 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_879.x + (-0.5));
        float _915 = _913 * (_879.y + (-0.5));
        float _916 = _913 * (_879.z + (-0.5));
        float _923 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_886.x + (-0.5));
        float _925 = _923 * (_886.y + (-0.5));
        float _926 = _923 * (_886.z + (-0.5));
        float _933 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_893.x + (-0.5));
        float _935 = _933 * (_893.y + (-0.5));
        float _936 = _933 * (_893.z + (-0.5));
        float _943 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_900.x + (-0.5));
        float _945 = _943 * (_900.y + (-0.5));
        float _946 = _943 * (_900.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _967 = (dot(vec3(_449, _450, _451), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _977 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3687 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_979 + 1.0))) + _984) * _947;
        float _994 = _915 * 0.5;
        float _995 = _925 * 0.5;
        float _996 = _935 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_449, _450, _451), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3720 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1021 + 1.0))) + _1026) * _948;
        float _1036 = _916 * 0.5;
        float _1037 = _926 * 0.5;
        float _1038 = _936 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_449, _450, _451), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3753 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1063 + 1.0))) + _1068) * _949;
        _1085 = _916;
        _1087 = _915;
        _1088 = _914;
        _1089 = _926;
        _1090 = _925;
        _1091 = _924;
        _1092 = _936;
        _1093 = _935;
        _1094 = _934;
        _1095 = _949;
        _1096 = _948;
        _1097 = _947;
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _1086;
        _1087 = _1086;
        _1088 = _1086;
        _1089 = _1086;
        _1090 = _1086;
        _1091 = _1086;
        _1092 = _1086;
        _1093 = _1086;
        _1094 = _1086;
        _1095 = _1086;
        _1096 = _1086;
        _1097 = _1086;
        _1098 = 0.0;
        _1099 = 0.0;
        _1100 = 0.0;
    }
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1129 = fma(_755, cbModelParam._m0[30u].z, fma(_751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _747));
        float _1133 = fma(_755, cbModelParam._m0[31u].z, fma(_751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _747));
        float _1137 = fma(_755, cbModelParam._m0[32u].z, fma(_751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _747));
        float _1160 = _747 + _449;
        float _1161 = _751 + _450;
        float _1162 = _755 + _451;
        float _1172 = fma(_1162, cbModelParam._m0[30u].z, fma(_1161, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1160)) - _1129;
        float _1173 = fma(_1162, cbModelParam._m0[31u].z, fma(_1161, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1160)) - _1133;
        float _1174 = fma(_1162, cbModelParam._m0[32u].z, fma(_1161, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1160)) - _1137;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1129 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1133 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[35u].z) + ((((((_1137 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1228 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1195.x + (-0.5));
        float _1230 = _1228 * (_1195.y + (-0.5));
        float _1231 = _1228 * (_1195.z + (-0.5));
        float _1238 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1202.x + (-0.5));
        float _1240 = _1238 * (_1202.y + (-0.5));
        float _1241 = _1238 * (_1202.z + (-0.5));
        float _1248 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1209.x + (-0.5));
        float _1250 = _1248 * (_1209.y + (-0.5));
        float _1251 = _1248 * (_1209.z + (-0.5));
        float _1258 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1216.x + (-0.5));
        float _1260 = _1258 * (_1216.y + (-0.5));
        float _1261 = _1258 * (_1216.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_449, _450, _451), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3816 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1292 + 1.0))) + _1297) * _1262;
        float _1307 = _1230 * 0.5;
        float _1308 = _1240 * 0.5;
        float _1309 = _1250 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_449, _450, _451), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3849 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1334 + 1.0))) + _1339) * _1263;
        float _1349 = _1231 * 0.5;
        float _1350 = _1241 * 0.5;
        float _1351 = _1251 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_449, _450, _451), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3882 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1376 + 1.0))) + _1381) * _1264;
        _1398 = _1231;
        _1399 = _1230;
        _1400 = _1229;
        _1401 = _1241;
        _1402 = _1240;
        _1403 = _1239;
        _1404 = _1251;
        _1405 = _1250;
        _1406 = _1249;
        _1407 = _1264;
        _1408 = _1263;
        _1409 = _1262;
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1086;
        _1399 = _1086;
        _1400 = _1086;
        _1401 = _1086;
        _1402 = _1086;
        _1403 = _1086;
        _1404 = _1086;
        _1405 = _1086;
        _1406 = _1086;
        _1407 = _1086;
        _1408 = _1086;
        _1409 = _1086;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1098)) + _1098;
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1099)) + _1099;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1100)) + _1100;
    float _1445 = fma(_1424, cbSceneParam._m0[89u].z, fma(_1423, cbSceneParam._m0[89u].y, _1422 * cbSceneParam._m0[89u].x));
    float _1448 = fma(_1424, cbSceneParam._m0[90u].z, fma(_1423, cbSceneParam._m0[90u].y, _1422 * cbSceneParam._m0[90u].x));
    float _1451 = fma(_1424, cbSceneParam._m0[91u].z, fma(_1423, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1422));
    float _1466 = _691 * 0.5;
    float _1467 = _692 * 0.5;
    float _1468 = _693 * 0.5;
    float _1469 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1472 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1475 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1509;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1482 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1085, _1089, _1092, _1095));
        float _1486 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1490 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1497 = dot(vec4(cbModelParam._m0[39u]), vec4(_1466, _1467, _1468, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1520;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1511 = dot(vec4(cbModelParam._m0[40u]), vec4(_1466, _1467, _1468, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1524 = (_1520 * cbModelParam._m0[1u].x) + (_1509 * (1.0 - cbModelParam._m0[1u].x));
    float _1534 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _597);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1534 : min(cbModelParam._m0[25u].z, _1534));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1584 = fma(_755, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747)) + cbModelParam._m0[13u].w;
        float _1588 = fma(_755, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747)) + cbModelParam._m0[14u].w;
        float _1592 = fma(_755, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747)) + cbModelParam._m0[15u].w;
        float _1595 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1598 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1601 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1629;
        if (_1595 > 0.0)
        {
            _1629 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1629 = frontier_phi_25_23_ladder;
        }
        float _1833;
        if (_1598 > 0.0)
        {
            _1833 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1833 = frontier_phi_34_30_ladder;
        }
        float _2087;
        if (_1601 > 0.0)
        {
            _2087 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2087 = frontier_phi_46_41_ladder;
        }
        float _2089 = isnan(_1833) ? _1629 : (isnan(_1629) ? _1833 : min(_1629, _1833));
        float _2090 = isnan(_2087) ? _2089 : (isnan(_2089) ? _2087 : min(_2089, _2087));
        float _2094 = (_2090 * _1595) + _1584;
        float _2095 = (_2090 * _1598) + _1588;
        float _2096 = (_2090 * _1601) + _1592;
        float _2097 = _2090 * 9.9999997473787516355514526367188e-05;
        float _2099 = (-1.0) - _2097;
        float _2101 = _2097 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2096 > _2101) || ((_2096 < _2099) || ((_2095 > _2101) || ((_2095 < _2099) || ((_2094 < _2099) || (_2094 > _2101))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2224 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2096, cbModelParam._m0[9u].z, fma(_2095, cbModelParam._m0[9u].y, _2094 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2096, cbModelParam._m0[10u].z, fma(_2095, cbModelParam._m0[10u].y, _2094 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2096, cbModelParam._m0[11u].z, fma(_2095, cbModelParam._m0[11u].y, _2094 * cbModelParam._m0[11u].x))), _1535);
            frontier_phi_24_46_ladder = _2224.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2224.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2224.x * cbModelParam._m0[1u].y;
        }
        _1617 = frontier_phi_24_46_ladder_2;
        _1619 = frontier_phi_24_46_ladder_1;
        _1621 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1535);
        _1617 = _1605.x * cbModelParam._m0[1u].y;
        _1619 = _1605.y * cbModelParam._m0[1u].y;
        _1621 = _1605.z * cbModelParam._m0[1u].y;
    }
    float _1625 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _597);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1625 : min(cbModelParam._m0[25u].w, _1625));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1679 = fma(_755, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747)) + cbModelParam._m0[21u].w;
        float _1683 = fma(_755, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747)) + cbModelParam._m0[22u].w;
        float _1687 = fma(_755, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747)) + cbModelParam._m0[23u].w;
        float _1690 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1693 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1696 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1838;
        if (_1690 > 0.0)
        {
            _1838 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1838 = frontier_phi_36_32_ladder;
        }
        float _2114;
        if (_1693 > 0.0)
        {
            _2114 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2114 = frontier_phi_48_43_ladder;
        }
        float _2327;
        if (_1696 > 0.0)
        {
            _2327 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_57_54_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_57_54_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_57_54_ladder = 5000.0;
            }
            _2327 = frontier_phi_57_54_ladder;
        }
        float _2329 = isnan(_2114) ? _1838 : (isnan(_1838) ? _2114 : min(_1838, _2114));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1690) + _1679;
        float _2335 = (_2330 * _1693) + _1683;
        float _2336 = (_2330 * _1696) + _1687;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2337;
        float _2340 = _2337 + 1.0;
        float frontier_phi_33_57_ladder;
        float frontier_phi_33_57_ladder_1;
        float frontier_phi_33_57_ladder_2;
        if ((_2336 > _2340) || ((_2336 < _2338) || ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 < _2338) || (_2334 > _2340))))))
        {
            frontier_phi_33_57_ladder = 0.0;
            frontier_phi_33_57_ladder_1 = 0.0;
            frontier_phi_33_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2336, cbModelParam._m0[17u].z, fma(_2335, cbModelParam._m0[17u].y, _2334 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2336, cbModelParam._m0[18u].z, fma(_2335, cbModelParam._m0[18u].y, _2334 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2336, cbModelParam._m0[19u].z, fma(_2335, cbModelParam._m0[19u].y, _2334 * cbModelParam._m0[19u].x))), _1626);
            frontier_phi_33_57_ladder = _2552.y * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_1 = _2552.x * cbModelParam._m0[1u].z;
            frontier_phi_33_57_ladder_2 = _2552.z * cbModelParam._m0[1u].z;
        }
        _1715 = frontier_phi_33_57_ladder_1;
        _1717 = frontier_phi_33_57_ladder;
        _1719 = frontier_phi_33_57_ladder_2;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1626);
        _1715 = _1699.x * cbModelParam._m0[1u].z;
        _1717 = _1699.y * cbModelParam._m0[1u].z;
        _1719 = _1699.z * cbModelParam._m0[1u].z;
    }
    float _1732 = (((_718 * _668) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1715 - _1617)) + _1617);
    float _1734 = (((_718 * _670) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1717 - _1619)) + _1619);
    float _1736 = (((_718 * _671) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1719 - _1621)) + _1621);
    float _1739 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, _1732 * cbSceneParam._m0[91u].x));
    uvec4 _1755 = floatBitsToUint(cbInstanceData._m0[_610 + 5u]);
    uint _1757 = _1755.x * 14u;
    uint _1758 = _1757 + 13u;
    float _1765 = _683 + (-1.0);
    float _1770 = (cbLight._m0[_1758].x * _1765) + 1.0;
    float _1771 = (cbLight._m0[_1758].y * _1765) + 1.0;
    float _1772 = (cbLight._m0[_1758].z * _1765) + 1.0;
    float _1773 = (cbLight._m0[_1758].w * _1765) + 1.0;
    uint _1774 = _1757 + 5u;
    float _1780 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
    uint _1784 = _1757 + 4u;
    float _1791 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    uint _1795 = _1757 | 1u;
    float _1806 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_449, _450, _451));
    float _1809 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_449, _450, _451));
    float _4018 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _4029 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1814 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.3183098733425140380859375;
    float _1816 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1823 = ((cbLight._m0[_1774].x * _1780) * _1816) + ((cbLight._m0[_1784].x * _1791) * _1814);
    float _1824 = ((_1780 * cbLight._m0[_1774].y) * _1816) + ((_1791 * cbLight._m0[_1784].y) * _1814);
    float _1825 = ((_1780 * cbLight._m0[_1774].z) * _1816) + ((_1791 * cbLight._m0[_1784].z) * _1814);
    uvec4 _1830 = floatBitsToUint(cbLight._m0[_1757 + 12u]);
    bool _1832 = _1830.x == 0u;
    float _1843;
    float _1845;
    float _1847;
    if (_1832)
    {
        _1843 = _1823;
        _1845 = _1824;
        _1847 = _1825;
    }
    else
    {
        uint _1851 = _1757 + 6u;
        float _1867 = (dot(vec3(cbLight._m0[_1757 + 2u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _1868 = _1867 * _1867;
        float _4040 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1870 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _1843 = (((cbLight._m0[_1851].x * 0.3183098733425140380859375) * _1869) * _1870) + _1823;
        _1845 = (((cbLight._m0[_1851].y * 0.3183098733425140380859375) * _1869) * _1870) + _1824;
        _1847 = (((cbLight._m0[_1851].z * 0.3183098733425140380859375) * _1869) * _1870) + _1825;
    }
    bool _1850 = _1830.y == 0u;
    float _1888;
    float _1890;
    float _1892;
    if (_1850)
    {
        _1888 = _1843;
        _1890 = _1845;
        _1892 = _1847;
    }
    else
    {
        uint _2058 = _1757 + 7u;
        float _2074 = (dot(vec3(cbLight._m0[_1757 + 3u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4056 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2077 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _1888 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _1843;
        _1890 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _1845;
        _1892 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _1847;
    }
    uint _1895 = _1757 + 8u;
    float _1908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _597) * 0.949999988079071044921875);
    float _1909 = _1908 * _1908;
    float _1910 = cbLight._m0[_1757].x + _531;
    float _1911 = cbLight._m0[_1757].y + _532;
    float _1912 = cbLight._m0[_1757].z + _533;
    float _1916 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
    float _1917 = _1916 * _1910;
    float _1918 = _1916 * _1911;
    float _1919 = _1916 * _1912;
    float _1920 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1757].xyz));
    float _4072 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _1924 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1925 = dot(vec3(_449, _450, _451), vec3(_1917, _1918, _1919));
    float _4094 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1929 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_1917, _1918, _1919));
    float _4105 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1933 = _1909 * _1909;
    float _1937 = ((_1928 * _1928) * (_1933 + (-1.0))) + 1.0;
    float _1945 = exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0);
    float _1946 = 0.959999978542327880859375 - _665;
    float _1948 = 0.959999978542327880859375 - _666;
    float _1949 = 0.959999978542327880859375 - _667;
    float _1956 = 1.0 - _1909;
    float _1967 = (0.5 / (((_1924 * ((_1923 * _1956) + _1909)) + 9.9999999392252902907785028219223e-09) + (((_1924 * _1956) + _1909) * _1923))) * _1923;
    float _4116 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1933 / ((_1937 * _1937) * 3.141590118408203125));
    uint _1980 = _1757 + 9u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1795].w)) * _597) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1795].x + _531;
    float _1994 = cbLight._m0[_1795].y + _532;
    float _1995 = cbLight._m0[_1795].z + _533;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1795].xyz));
    float _4127 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2007 = dot(vec3(_449, _450, _451), vec3(_2000, _2001, _2002));
    float _4138 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_2000, _2001, _2002));
    float _4149 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1992 * _1992;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2026 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
    float _2033 = 1.0 - _1992;
    float _2043 = (0.5 / (((_1924 * ((_2006 * _2033) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1924 * _2033) + _1992) * _2006))) * _2006;
    float _4160 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2045 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    float _2055 = (((((_2026 * _1946) + _668) * cbLight._m0[_1980].x) * _2045) * _1780) + (((((_1945 * _1946) + _668) * cbLight._m0[_1895].x) * _1969) * _1791);
    float _2056 = (((((_2026 * _1948) + _670) * cbLight._m0[_1980].y) * _2045) * _1780) + (((((_1945 * _1948) + _670) * cbLight._m0[_1895].y) * _1969) * _1791);
    float _2057 = (((((_2026 * _1949) + _671) * cbLight._m0[_1980].z) * _2045) * _1780) + (((((_1945 * _1949) + _671) * cbLight._m0[_1895].z) * _1969) * _1791);
    float _2119;
    float _2121;
    float _2123;
    if (_1832)
    {
        _2119 = _2055;
        _2121 = _2056;
        _2123 = _2057;
    }
    else
    {
        uint _2125 = _1757 + 2u;
        uint _2129 = _1757 + 10u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _597) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _531;
        float _2146 = cbLight._m0[_2125].y + _532;
        float _2147 = cbLight._m0[_2125].z + _533;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2125].xyz));
        float _4171 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2159 = dot(vec3(_449, _450, _451), vec3(_2152, _2153, _2154));
        float _4182 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4193 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
        float _2185 = 1.0 - _2144;
        float _2195 = (0.5 / (((_1924 * ((_2158 * _2185) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1924 * _2185) + _2144) * _2158))) * _2158;
        float _4204 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2198 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _2119 = (((((_2178 * _1946) + _668) * cbLight._m0[_2129].x) * _2197) * _2198) + _2055;
        _2121 = (((((_2178 * _1948) + _670) * cbLight._m0[_2129].y) * _2197) * _2198) + _2056;
        _2123 = (((((_2178 * _1949) + _671) * cbLight._m0[_2129].z) * _2197) * _2198) + _2057;
    }
    float _2233;
    float _2235;
    float _2237;
    if (_1850)
    {
        _2233 = _2119;
        _2235 = _2121;
        _2237 = _2123;
    }
    else
    {
        uint _2244 = _1757 + 3u;
        uint _2248 = _1757 + 11u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _597) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _531;
        float _2265 = cbLight._m0[_2244].y + _532;
        float _2266 = cbLight._m0[_2244].z + _533;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2244].xyz));
        float _4220 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2278 = dot(vec3(_449, _450, _451), vec3(_2271, _2272, _2273));
        float _4231 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4242 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0);
        float _2304 = 1.0 - _2263;
        float _2314 = (0.5 / (((_1924 * ((_2277 * _2304) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_1924 * _2304) + _2263) * _2277))) * _2277;
        float _4253 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2316 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2317 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _2233 = (((((_2297 * _1946) + _668) * cbLight._m0[_2248].x) * _2316) * _2317) + _2119;
        _2235 = (((((_2297 * _1948) + _670) * cbLight._m0[_2248].y) * _2316) * _2317) + _2121;
        _2237 = (((((_2297 * _1949) + _671) * cbLight._m0[_2248].z) * _2316) * _2317) + _2123;
    }
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    if (_1755.y == 0u)
    {
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2392;
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2392;
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2392;
        uvec4 _2407 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2408 = _2407.x;
        uint _2419 = uint((float(_2407.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2408))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2408)));
        float _2429 = (log2(_2395 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2430 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        uint _2433 = uint(isnan(14.0) ? _2430 : (isnan(_2430) ? 14.0 : min(_2430, 14.0)));
        uvec4 _2438 = texelFetch(g_lightClusterGridBuffer, int(((_2433 << 2u) + (_2419 << 6u)) >> 2u));
        uint _2439 = _2438.x;
        uint _2440 = _2407.z;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        if (((((1u << ((_2440 >> 4u) & 15u)) + 4294967295u) & _2439) == 0u) || ((_2440 & 240u) == 0u))
        {
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
        }
        else
        {
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            uint _2715 = 0u;
            uint _2724;
            bool _2725;
            for (;;)
            {
                _2724 = texelFetch(g_lightClassification, int((((_2433 << 5u) + (_2419 << 9u)) + (_2715 << 2u)) >> 2u)).x;
                _2725 = _2724 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2725)
                {
                    frontier_phi_74_pred = _2714;
                    frontier_phi_74_pred_1 = _2713;
                    frontier_phi_74_pred_2 = _2712;
                    frontier_phi_74_pred_3 = _2711;
                    frontier_phi_74_pred_4 = _2710;
                    frontier_phi_74_pred_5 = _2709;
                }
                else
                {
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    uint _2860;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2724;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    for (;;)
                    {
                        uint _2864 = uint(findLSB(_2860)) + (_2715 << 5u);
                        uint _2861 = (_2860 + 4294967295u) & _2860;
                        uint _2866 = _2864 * 48u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2886 = (_2864 * 48u) + 4u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2905 = (_2864 * 48u) + 8u;
                        vec3 _2916 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x));
                        float _2920 = _2880.x - _2393;
                        float _2921 = _2880.y - _2394;
                        float _2922 = _2880.z - _2395;
                        float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                        float _2926 = inversesqrt(_2923);
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2930 = dot(vec3(_578, _581, _584), vec3(_2927, _2928, _2929));
                        float _2935 = 1.0 - (_2923 * _2880.w);
                        float _4279 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2937 = sqrt(_2923) * _2899.w;
                        float _2940 = 1.39999997615814208984375 / (_2937 + 1.39999997615814208984375);
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2930) + _2941;
                        float _2947 = _2937 * _2937;
                        float _2951 = ((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2936) / ((_2947 * 0.699999988079071044921875) + 1.0);
                        float _2955 = (-0.0) - _2393;
                        float _2956 = (-0.0) - _2394;
                        float _2957 = (-0.0) - _2395;
                        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2972 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                        float _2973 = 1.0 - _699;
                        float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                        float _2981 = _2980 * _2980;
                        float _2982 = _2981 * _2981;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2985 = _2964 + _2929;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2993 = dot(vec3(_578, _581, _584), vec3(_2962, _2963, _2964));
                        float _4295 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2997 = dot(vec3(_578, _581, _584), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                        float _4306 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                        float _3005 = _2940 * _2981;
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2930) + _3006;
                        float _4317 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3011 = 1.0 - _2981;
                        float _3021 = (0.5 / (((_3010 * ((_2996 * _3011) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3010 * _3011) + _2981) * _2996))) * _3010;
                        float _4328 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3032 = (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3004 * _3004) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125))) * _2936;
                        _2784 = (_2951 * _2899.x) + _2857;
                        _2785 = (_2951 * _2899.y) + _2858;
                        _2786 = (_2951 * _2899.z) + _2859;
                        _2781 = (_3032 * _2916.x) + _2854;
                        _2782 = (_3032 * _2916.y) + _2855;
                        _2783 = (_3032 * _2916.z) + _2856;
                        if (_2861 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2861;
                        }
                    }
                    frontier_phi_74_pred = _2786;
                    frontier_phi_74_pred_1 = _2785;
                    frontier_phi_74_pred_2 = _2784;
                    frontier_phi_74_pred_3 = _2783;
                    frontier_phi_74_pred_4 = _2782;
                    frontier_phi_74_pred_5 = _2781;
                }
                _2568 = frontier_phi_74_pred;
                _2566 = frontier_phi_74_pred_1;
                _2564 = frontier_phi_74_pred_2;
                _2562 = frontier_phi_74_pred_3;
                _2560 = frontier_phi_74_pred_4;
                _2558 = frontier_phi_74_pred_5;
                uint _2716 = _2715 + 1u;
                if (_2716 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2709 = _2558;
                    _2710 = _2560;
                    _2711 = _2562;
                    _2712 = _2564;
                    _2713 = _2566;
                    _2714 = _2568;
                    _2715 = _2716;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
        }
        uvec4 _2571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2572 = _2571.z;
        uint _2574 = (_2572 >> 8u) & 15u;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        if (((4294967295u << _2574) & _2439) == 0u)
        {
            _2677 = _2557;
            _2679 = _2559;
            _2681 = _2561;
            _2683 = _2563;
            _2685 = _2565;
            _2687 = _2567;
        }
        else
        {
            float _2702 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
            float _2703 = _2702 * _2393;
            float _2704 = _2702 * _2394;
            float _2705 = _2702 * _2395;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2574 < ((_2572 >> 12u) & 15u))
            {
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2837 = _2557;
                float _2838 = _2559;
                float _2839 = _2561;
                float _2840 = _2563;
                float _2841 = _2565;
                float _2842 = _2567;
                uint _2843 = _2574;
                uint _2852;
                bool _2853;
                for (;;)
                {
                    _2852 = texelFetch(g_lightClassification, int((((_2433 << 5u) + (_2419 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                    _2853 = _2852 == 0u;
                    float frontier_phi_85_pred;
                    float frontier_phi_85_pred_1;
                    float frontier_phi_85_pred_2;
                    float frontier_phi_85_pred_3;
                    float frontier_phi_85_pred_4;
                    float frontier_phi_85_pred_5;
                    if (_2853)
                    {
                        frontier_phi_85_pred = _2841;
                        frontier_phi_85_pred_1 = _2840;
                        frontier_phi_85_pred_2 = _2839;
                        frontier_phi_85_pred_3 = _2838;
                        frontier_phi_85_pred_4 = _2837;
                        frontier_phi_85_pred_5 = _2842;
                    }
                    else
                    {
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        uint _3065 = _2852;
                        uint _3066;
                        vec4 _3091;
                        float _3092;
                        vec4 _3107;
                        vec3 _3119;
                        vec4 _3135;
                        vec4 _3150;
                        float _3197;
                        bool _3198;
                        for (;;)
                        {
                            uint _3076 = ((_2843 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3065));
                            _3066 = (_3065 + 4294967295u) & _3065;
                            uint _3078 = _3076 * 40u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            _3092 = _3091.w;
                            uint _3094 = (_3076 * 40u) + 4u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3109 = (_3076 * 40u) + 8u;
                            _3119 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x));
                            uint _3122 = (_3076 * 40u) + 16u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3076 * 40u) + 20u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3153 = (_3076 * 40u) + 24u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3172 = (_3076 * 40u) + 28u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3197 = fma(_2395, _3185.z, fma(_2394, _3185.y, _3185.x * _2393)) + _3185.w;
                            _3198 = !((fma(_2395, _3166.z, fma(_2394, _3166.y, _3166.x * _2393)) + _3166.w) <= 0.0);
                            float frontier_phi_91_pred;
                            float frontier_phi_91_pred_1;
                            float frontier_phi_91_pred_2;
                            float frontier_phi_91_pred_3;
                            float frontier_phi_91_pred_4;
                            float frontier_phi_91_pred_5;
                            if (_3198)
                            {
                                float _3225 = _3091.x - _2393;
                                float _3226 = _3091.y - _2394;
                                float _3227 = _3091.z - _2395;
                                float _3228 = dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227));
                                float _3231 = inversesqrt(_3228);
                                float _3232 = _3231 * _3225;
                                float _3233 = _3231 * _3226;
                                float _3234 = _3231 * _3227;
                                float _3238 = 1.0 - (_3228 / (_3092 * _3092));
                                float _4339 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3243 = sqrt(_3228) * _3107.w;
                                float _3245 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                                float _3246 = _3245 * _3245;
                                float _3249 = ((1.0 - _3246) * dot(vec3(_3232, _3233, _3234), vec3(_578, _581, _584))) + _3246;
                                float _3252 = _3243 * _3243;
                                float _3256 = (fma(_2395, _3135.z, fma(_2394, _3135.y, _3135.x * _2393)) + _3135.w) / _3197;
                                float _3257 = (fma(_2395, _3150.z, fma(_2394, _3150.y, _3150.x * _2393)) + _3150.w) / _3197;
                                float _3261 = 1.0 - dot(vec2(_3256, _3257), vec2(_3256, _3257));
                                float _4355 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3263 = _3262 * (((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3239) / ((_3252 * 0.699999988079071044921875) + 1.0));
                                float _3275 = exp2(log2(1.0 / ((_3252 * 3.5) + 5.0)) * 0.25);
                                float _3276 = 1.0 - _699;
                                float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                                float _3284 = _3283 * _3283;
                                float _3285 = _3284 * _3284;
                                float _3286 = _3232 - _2703;
                                float _3287 = _3233 - _2704;
                                float _3288 = _3234 - _2705;
                                float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                                float _3296 = dot(vec3(_578, _581, _584), vec3((-0.0) - _2703, (-0.0) - _2704, (-0.0) - _2705));
                                float _4366 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3300 = dot(vec3(_578, _581, _584), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                                float _4377 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                                float _3308 = _3245 * _3284;
                                float _3309 = _3308 * _3308;
                                float _3315 = ((1.0 - _3309) * dot(vec3(_578, _581, _584), vec3(_3232, _3233, _3234))) + _3309;
                                float _4388 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3317 = 1.0 - _3284;
                                float _3327 = (0.5 / (((_3316 * ((_3299 * _3317) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3284) * _3299))) * _3316;
                                float _4399 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3337 = (_3262 * _3239) * (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3307 * _3307) * ((_3252 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_91_pred = _3263 * _3107.y;
                                frontier_phi_91_pred_1 = _3263 * _3107.x;
                                frontier_phi_91_pred_2 = _3337 * _3119.z;
                                frontier_phi_91_pred_3 = _3337 * _3119.y;
                                frontier_phi_91_pred_4 = _3337 * _3119.x;
                                frontier_phi_91_pred_5 = _3263 * _3107.z;
                            }
                            else
                            {
                                frontier_phi_91_pred = 0.0;
                                frontier_phi_91_pred_1 = 0.0;
                                frontier_phi_91_pred_2 = 0.0;
                                frontier_phi_91_pred_3 = 0.0;
                                frontier_phi_91_pred_4 = 0.0;
                                frontier_phi_91_pred_5 = 0.0;
                            }
                            _3345 = frontier_phi_91_pred;
                            _3344 = frontier_phi_91_pred_1;
                            _3343 = frontier_phi_91_pred_2;
                            _3342 = frontier_phi_91_pred_3;
                            _3341 = frontier_phi_91_pred_4;
                            _3346 = frontier_phi_91_pred_5;
                            _3049 = _3344 + _3062;
                            _3050 = _3345 + _3063;
                            _3051 = _3346 + _3064;
                            _3046 = _3341 + _3059;
                            _3047 = _3342 + _3060;
                            _3048 = _3343 + _3061;
                            if (_3066 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3066;
                                continue;
                            }
                        }
                        frontier_phi_85_pred = _3050;
                        frontier_phi_85_pred_1 = _3049;
                        frontier_phi_85_pred_2 = _3048;
                        frontier_phi_85_pred_3 = _3047;
                        frontier_phi_85_pred_4 = _3046;
                        frontier_phi_85_pred_5 = _3051;
                    }
                    _2686 = frontier_phi_85_pred;
                    _2684 = frontier_phi_85_pred_1;
                    _2682 = frontier_phi_85_pred_2;
                    _2680 = frontier_phi_85_pred_3;
                    _2678 = frontier_phi_85_pred_4;
                    _2688 = frontier_phi_85_pred_5;
                    uint _2844 = _2843 + 1u;
                    if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2837 = _2678;
                        _2838 = _2680;
                        _2839 = _2682;
                        _2840 = _2684;
                        _2841 = _2686;
                        _2842 = _2688;
                        _2843 = _2844;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2688;
                frontier_phi_66_67_ladder_1 = _2684;
                frontier_phi_66_67_ladder_2 = _2686;
                frontier_phi_66_67_ladder_3 = _2680;
                frontier_phi_66_67_ladder_4 = _2678;
                frontier_phi_66_67_ladder_5 = _2682;
            }
            else
            {
                frontier_phi_66_67_ladder = _2567;
                frontier_phi_66_67_ladder_1 = _2563;
                frontier_phi_66_67_ladder_2 = _2565;
                frontier_phi_66_67_ladder_3 = _2559;
                frontier_phi_66_67_ladder_4 = _2557;
                frontier_phi_66_67_ladder_5 = _2561;
            }
            _2677 = frontier_phi_66_67_ladder_4;
            _2679 = frontier_phi_66_67_ladder_3;
            _2681 = frontier_phi_66_67_ladder_5;
            _2683 = frontier_phi_66_67_ladder_1;
            _2685 = frontier_phi_66_67_ladder_2;
            _2687 = frontier_phi_66_67_ladder;
        }
        float _2692 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2451 = (_2692 * _2683) + _1888;
        _2453 = (_2692 * _2685) + _1890;
        _2455 = (_2692 * _2687) + _1892;
        _2457 = ((_2677 * _668) * _2692) + _2233;
        _2459 = ((_2679 * _670) * _2692) + _2235;
        _2461 = ((_2681 * _671) * _2692) + _2237;
    }
    else
    {
        _2451 = _1888;
        _2453 = _1890;
        _2455 = _1892;
        _2457 = _2233;
        _2459 = _2235;
        _2461 = _2237;
    }
    vec4 _2467 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4415 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4426 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4437 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _2491 = (((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2451 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _683))) + ((_2457 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + (_2467.x * cbMtdParam._m0[3u].x);
    float _2493 = ((_2467.y * cbMtdParam._m0[3u].x) + ((_2459 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2453 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _683)));
    float _2495 = ((_2467.z * cbMtdParam._m0[3u].x) + ((_2461 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2455 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _683)));
    float _2496 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2497 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2498 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    uint _2499 = _610 + 6u;
    float _2507 = _554 / cbSceneParam._m0[86u].x;
    float _2508 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2522 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, (log2((isnan(cbSceneParam._m0[77u].w) ? _472 : (isnan(_472) ? cbSceneParam._m0[77u].w : min(_472, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2524 = _2522.x;
    float _2525 = _2522.y;
    float _2526 = _2522.z;
    float _2527 = _2522.w;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    if (_472 > cbSceneParam._m0[78u].w)
    {
        float _2582 = isnan(_472) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _472 : min(cbSceneParam._m0[80u].w, _472));
        float _2583 = _2582 / _472;
        float _2594 = _2583 * _524;
        float _2595 = _525 * _2583;
        float _2596 = (-0.0) - _2595;
        float _2597 = _2583 * _526;
        float _2599 = (cbSceneParam._m0[77u].w * _2596) / _2582;
        float _2600 = _2599 + cbSceneParam._m0[79u].w;
        float _2601 = cbSceneParam._m0[79u].w - _2595;
        float _2607 = sqrt(((_2594 * _2594) + (_2595 * _2595)) + (_2597 * _2597));
        float _2610 = (1.0 - (cbSceneParam._m0[77u].w / _2582)) * _2607;
        float _2615 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2617 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2794;
        if (abs((_2596 - _2599) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2794 = ((((_2600 > 0.0) ? exp2(_2615 * _2600) : (2.0 - exp2(_2617 * _2600))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2610;
        }
        else
        {
            float _2738 = 1.0 / cbSceneParam._m0[80u].x;
            float _2739 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : max(_2600, _2601));
            float _2740 = isnan(_2601) ? _2600 : (isnan(_2600) ? _2601 : min(_2600, _2601));
            float _2749 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : min(_2739, 0.0));
            float _2750 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : min(_2740, 0.0));
            _2794 = ((abs(_2607 / _2596) * cbSceneParam._m0[80u].y) * ((((_2749 - _2750) * 2.0) - ((exp2(_2615 * (isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0)))) - exp2(_2615 * (isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0))))) * _2738)) - ((exp2(_2617 * _2749) - exp2(_2617 * _2750)) * _2738))) + (_2610 * cbSceneParam._m0[80u].z);
        }
        vec4 _2796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, 1.0), 0.0);
        float _2805 = exp2((_2794 * (-1.44269502162933349609375)) * (1.0 - _2796.w));
        float _2806 = log2(_2805);
        float _2822 = log2(_2527);
        _2619 = (exp2(_2822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].x)) * _2796.x) / cbSceneParam._m0[78u].x)) + _2524;
        _2621 = (exp2(_2822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].y)) * _2796.y) / cbSceneParam._m0[78u].y)) + _2525;
        _2623 = (exp2(_2822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].z)) * _2796.z) / cbSceneParam._m0[78u].z)) + _2526;
        _2625 = _2805 * _2527;
    }
    else
    {
        _2619 = _2524;
        _2621 = _2525;
        _2623 = _2526;
        _2625 = _2527;
    }
    bool _2832;
    vec4 _2635;
    vec4 _2657;
    float _2659;
    float _2663;
    float _2664;
    float _2665;
    float _2666;
    bool _2676;
    for (;;)
    {
        _2635 = cbMatDynParam._m0[0u];
        float _2637 = roundEven(_2635.y);
        bool _2638 = _2637 == 3.0;
        float _2639 = log2(_2625);
        float _2646 = exp2(_2639 * cbSceneParam._m0[78u].x) * _2496;
        float _2647 = exp2(_2639 * cbSceneParam._m0[78u].y) * _2497;
        float _2648 = exp2(_2639 * cbSceneParam._m0[78u].z) * _2498;
        float _2655 = _540 + (-0.5);
        _2657 = cbMtdParam._m0[1u];
        _2659 = _2657.y * _2655;
        float _2662 = (_2637 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2663 = _2662 * (_2638 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2619)));
        _2664 = _2662 * (_2638 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2621)));
        _2665 = _2662 * (_2638 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2623)));
        _2666 = _2655 * 0.999000012874603271484375;
        _2676 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2676)
        {
            if ((cbInstanceData._m0[_610 + 7u].x + _2666) < 0.5)
            {
                _2832 = true;
                break;
            }
        }
        uint _2773 = _612 + uint(_2635.w);
        if ((cbInstanceData._m0[_2773].w < 1.0) && ((cbInstanceData._m0[_2773].w + _2666) < 0.5))
        {
            _2832 = true;
            break;
        }
        if ((_2659 + 1.0) < _2657.x)
        {
            _2832 = true;
            break;
        }
        _2832 = false;
        break;
    }
    float _3037;
    if (_2832)
    {
        discard_state = true;
        _3037 = 0.0;
    }
    else
    {
        _3037 = cbInstanceData._m0[_2499].w;
    }
    SV_Target.x = _2663;
    SV_Target.y = _2664;
    SV_Target.z = _2665;
    SV_Target.w = _3037;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2499].w;
    discard_exit();
}


