#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0;
layout(set = 0, binding = 7) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1;
layout(set = 0, binding = 8) uniform texture2DArray C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1210;
float _3634;
float _3635;
float _3636;
float _3637;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _195[6];
    float _196[6];
    float _197[6];
    _195[0u] = cbMtdParam._m0[14u].x;
    _196[0u] = cbMtdParam._m0[14u].y;
    _197[0u] = cbMtdParam._m0[14u].z;
    _195[1u] = cbMtdParam._m0[15u].x;
    _196[1u] = cbMtdParam._m0[15u].y;
    _197[1u] = cbMtdParam._m0[15u].z;
    _195[2u] = cbMtdParam._m0[16u].x;
    _196[2u] = cbMtdParam._m0[16u].y;
    _197[2u] = cbMtdParam._m0[16u].z;
    _195[3u] = cbMtdParam._m0[11u].x;
    _196[3u] = cbMtdParam._m0[11u].y;
    _197[3u] = cbMtdParam._m0[11u].z;
    _195[4u] = cbMtdParam._m0[12u].x;
    _196[4u] = cbMtdParam._m0[12u].y;
    _197[4u] = cbMtdParam._m0[12u].z;
    _195[5u] = cbMtdParam._m0[13u].x;
    _196[5u] = cbMtdParam._m0[13u].y;
    _197[5u] = cbMtdParam._m0[13u].z;
    vec4 _356 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _359 = _356.y;
    float _362 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _364 = roundEven(_362);
    float _365 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    uint _368 = uint(int(isnan(5.0) ? _365 : (isnan(_365) ? 5.0 : min(_365, 5.0))));
    float _385 = roundEven(5.0 - _362);
    float _386 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _387 = isnan(4.0) ? _386 : (isnan(_386) ? 4.0 : min(_386, 4.0));
    float _393;
    float _395;
    if (exp2(log2(texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x) * cbMtdParam._m0[20u].w) < cbMtdParam._m0[21u].x)
    {
        _393 = cbMtdParam._m0[26u].x;
        _395 = cbMtdParam._m0[26u].y;
    }
    else
    {
        _393 = cbMtdParam._m0[22u].x;
        _395 = cbMtdParam._m0[22u].y;
    }
    float _397 = _393 * TEXCOORD.x;
    float _398 = _395 * TEXCOORD.y;
    float _409 = floor(_387);
    vec4 _412 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[6u].x * _397) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _398) + cbTextureTilingScale._m0[6u].w, _409));
    vec4 _434 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _442 = ((((((_195[_368] - cbMtdParam._m0[18u].x) * _359) + cbMtdParam._m0[18u].x) * cbMtdParam._m0[19u].w) * _412.x) * cbMtdParam._m0[9u].x) * _434.x;
    float _446 = ((((((_196[_368] - cbMtdParam._m0[18u].y) * _359) + cbMtdParam._m0[18u].y) * cbMtdParam._m0[19u].w) * _412.y) * cbMtdParam._m0[9u].y) * _434.y;
    float _450 = ((((((_197[_368] - cbMtdParam._m0[18u].z) * _359) + cbMtdParam._m0[18u].z) * cbMtdParam._m0[19u].w) * _412.z) * cbMtdParam._m0[9u].z) * _434.z;
    vec4 _462 = texture(sampler2D(C_Enemy_AMSN_RT_PL_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _466 = _462.z;
    float _190[5];
    float _191[5];
    _190[0u] = cbMtdParam._m0[22u].z;
    _191[0u] = cbMtdParam._m0[22u].w;
    _190[1u] = cbMtdParam._m0[23u].z;
    _191[1u] = cbMtdParam._m0[23u].w;
    _190[2u] = cbMtdParam._m0[24u].x;
    _191[2u] = cbMtdParam._m0[24u].y;
    _190[3u] = cbMtdParam._m0[24u].z;
    _191[3u] = cbMtdParam._m0[24u].w;
    _190[4u] = cbMtdParam._m0[23u].x;
    _191[4u] = cbMtdParam._m0[23u].y;
    float _510 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    uint _512 = uint(int(isnan(4.0) ? _510 : (isnan(_510) ? 4.0 : min(_510, 4.0))));
    float _517 = _191[_512] + texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_2, SS_WrapLinear), vec3((cbTextureTilingScale._m0[8u].x * _397) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _398) + cbTextureTilingScale._m0[8u].w, _409)).x;
    vec4 _536 = texture(sampler2DArray(C_Enemy_AMSN_RT_PL_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[7u].x * _397) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _398) + cbTextureTilingScale._m0[7u].w, _409));
    float _543 = (_536.x * 2.0) + (-1.0);
    float _544 = (_536.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3676 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    float _560 = (cbMtdParam._m0[20u].x * (((_466 * 2.0) * (_536.z + _190[_512])) - _466)) + _466;
    float _564 = (cbMtdParam._m0[20u].y * ((_462.x * 2.0) + (-1.0))) + _543;
    float _565 = (cbMtdParam._m0[20u].y * ((_462.y * 2.0) + (-1.0))) + _544;
    float _568 = fma(_551, _247, fma(_565, _239 * TANGENT.x, (_225 * _217) * _564));
    float _571 = fma(_551, _248, fma(_565, _239 * TANGENT.y, (_225 * _218) * _564));
    float _574 = fma(_551, _249, fma(_565, _239 * TANGENT.z, (_225 * _219) * _564));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3687 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _582 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3709 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3720 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3731 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _586 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _602 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _653 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _643);
    float _654 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _643);
    float _655 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _643);
    float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
    float _660 = _653 * _659;
    float _661 = _654 * _659;
    float _662 = _655 * _659;
    vec4 _667 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _669 = _667.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _890 = sqrt(((_653 * _653) + (_654 * _654)) + (_655 * _655));
        float _896 = (cbMatDynParam._m0[5u].x * _890) + cbMatDynParam._m0[5u].y;
        float _3742 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _901 = (cbMatDynParam._m0[5u].z * _890) + cbMatDynParam._m0[5u].w;
        float _3753 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) - _897)) + _897) < ((_669 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _682 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _683 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _685 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _687 = _685.w;
    float _705 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _708 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _711 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    vec4 _713 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _724 = (((_713.y - _582) + (_713.w * _582)) * cbMtdParam._m0[3u].x) + _582;
    uint _737 = uint(roundEven(NORMAL.w)) * 13u;
    uint _738 = _737 + 9u;
    uint _739 = _738 + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3764 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _751 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _756 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _767 = (((_756.x - _586) + (_756.w * _586)) * cbMtdParam._m0[3u].x) + _586;
    float _780 = (cbMtdParam._m0[3u].x * (((_748 * _687) - _748) + _751.x)) + _748;
    float _781 = (cbMtdParam._m0[3u].x * (((_749 * _687) - _749) + _751.y)) + _749;
    float _782 = (cbMtdParam._m0[3u].x * (((_750 * _687) - _750) + _751.z)) + _750;
    float _783 = 1.0 - _767;
    float _784 = _783 * _780;
    float _785 = _783 * _781;
    float _786 = _783 * _782;
    float _791 = (_780 + (-0.039999999105930328369140625)) * _767;
    float _792 = (_781 + (-0.039999999105930328369140625)) * _767;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _767;
    float _794 = _791 + 0.039999999105930328369140625;
    float _796 = _792 + 0.039999999105930328369140625;
    float _797 = _793 + 0.039999999105930328369140625;
    vec4 _806 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _682, cbSceneParam._m0[86u].y * _683));
    float _809 = _806.x * TEXCOORD_4;
    float _810 = dot(vec3(_579, _580, _581), vec3(_660, _661, _662));
    float _813 = _810 * 2.0;
    float _817 = (_813 * _579) - _660;
    float _818 = (_813 * _580) - _661;
    float _819 = (_813 * _581) - _662;
    float _823 = abs(dot(vec3(_660, _661, _662), vec3(_579, _580, _581)));
    float _3797 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _825 = sqrt(_724);
    float _836 = exp2((_825 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_825 * 3.0));
    float _842 = (1.0 - _836) * ((_825 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _843 = _836 * _825;
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1209;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _934 = fma(_879, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871));
        float _938 = fma(_879, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871));
        float _942 = fma(_879, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871));
        float _967 = _871 + _579;
        float _968 = _875 + _580;
        float _969 = _879 + _581;
        float _979 = fma(_969, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967)) - _934;
        float _980 = fma(_969, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967)) - _938;
        float _981 = fma(_969, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967)) - _942;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_934 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_938 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[34u].z) + ((((((_942 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1037 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1003.x + (-0.5));
        float _1039 = _1037 * (_1003.y + (-0.5));
        float _1040 = _1037 * (_1003.z + (-0.5));
        float _1047 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1010.x + (-0.5));
        float _1049 = _1047 * (_1010.y + (-0.5));
        float _1050 = _1047 * (_1010.z + (-0.5));
        float _1057 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1017.x + (-0.5));
        float _1059 = _1057 * (_1017.y + (-0.5));
        float _1060 = _1057 * (_1017.z + (-0.5));
        float _1067 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1024.x + (-0.5));
        float _1069 = _1067 * (_1024.y + (-0.5));
        float _1070 = _1067 * (_1024.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1091 = (dot(vec3(_579, _580, _581), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1101 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3845 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1103 + 1.0))) + _1108) * _1071;
        float _1118 = _1039 * 0.5;
        float _1119 = _1049 * 0.5;
        float _1120 = _1059 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_579, _580, _581), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3878 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1145 + 1.0))) + _1150) * _1072;
        float _1160 = _1040 * 0.5;
        float _1161 = _1050 * 0.5;
        float _1162 = _1060 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_579, _580, _581), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3911 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1187 + 1.0))) + _1192) * _1073;
        _1209 = _1040;
        _1211 = _1039;
        _1212 = _1038;
        _1213 = _1050;
        _1214 = _1049;
        _1215 = _1048;
        _1216 = _1060;
        _1217 = _1059;
        _1218 = _1058;
        _1219 = _1073;
        _1220 = _1072;
        _1221 = _1071;
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _1210;
        _1211 = _1210;
        _1212 = _1210;
        _1213 = _1210;
        _1214 = _1210;
        _1215 = _1210;
        _1216 = _1210;
        _1217 = _1210;
        _1218 = _1210;
        _1219 = _1210;
        _1220 = _1210;
        _1221 = _1210;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1253 = fma(_879, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _871));
        float _1257 = fma(_879, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _871));
        float _1261 = fma(_879, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _871));
        float _1284 = _871 + _579;
        float _1285 = _875 + _580;
        float _1286 = _879 + _581;
        float _1296 = fma(_1286, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1284)) - _1253;
        float _1297 = fma(_1286, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1284)) - _1257;
        float _1298 = fma(_1286, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1284)) - _1261;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1315 = ((_1302 * _1296) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1253 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1297) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1257 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1302 * _1298) / cbModelParam._m0[35u].z) + ((((((_1261 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1352 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1319.x + (-0.5));
        float _1354 = _1352 * (_1319.y + (-0.5));
        float _1355 = _1352 * (_1319.z + (-0.5));
        float _1362 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1326.x + (-0.5));
        float _1364 = _1362 * (_1326.y + (-0.5));
        float _1365 = _1362 * (_1326.z + (-0.5));
        float _1372 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1333.x + (-0.5));
        float _1374 = _1372 * (_1333.y + (-0.5));
        float _1375 = _1372 * (_1333.z + (-0.5));
        float _1382 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1340.x + (-0.5));
        float _1384 = _1382 * (_1340.y + (-0.5));
        float _1385 = _1382 * (_1340.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_579, _580, _581), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3974 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1416 + 1.0))) + _1421) * _1386;
        float _1431 = _1354 * 0.5;
        float _1432 = _1364 * 0.5;
        float _1433 = _1374 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_579, _580, _581), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4007 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1458 + 1.0))) + _1463) * _1387;
        float _1473 = _1355 * 0.5;
        float _1474 = _1365 * 0.5;
        float _1475 = _1375 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_579, _580, _581), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4040 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1500 + 1.0))) + _1505) * _1388;
        _1522 = _1355;
        _1523 = _1354;
        _1524 = _1353;
        _1525 = _1365;
        _1526 = _1364;
        _1527 = _1363;
        _1528 = _1375;
        _1529 = _1374;
        _1530 = _1373;
        _1531 = _1388;
        _1532 = _1387;
        _1533 = _1386;
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    }
    else
    {
        _1522 = _1210;
        _1523 = _1210;
        _1524 = _1210;
        _1525 = _1210;
        _1526 = _1210;
        _1527 = _1210;
        _1528 = _1210;
        _1529 = _1210;
        _1530 = _1210;
        _1531 = _1210;
        _1532 = _1210;
        _1533 = _1210;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1222)) + _1222;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1223)) + _1223;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1224)) + _1224;
    float _1569 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1546));
    float _1590 = _817 * 0.5;
    float _1591 = _818 * 0.5;
    float _1592 = _819 * 0.5;
    float _1593 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1596 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1599 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1633;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1606 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1209, _1213, _1216, _1219));
        float _1610 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1614 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1621 = dot(vec4(cbModelParam._m0[39u]), vec4(_1590, _1591, _1592, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1644;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1635 = dot(vec4(cbModelParam._m0[40u]), vec4(_1590, _1591, _1592, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1648 = (_1644 * cbModelParam._m0[1u].x) + (_1633 * (1.0 - cbModelParam._m0[1u].x));
    float _1658 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _724);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1658 : min(cbModelParam._m0[25u].z, _1658));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1706 = fma(_879, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871)) + cbModelParam._m0[13u].w;
        float _1710 = fma(_879, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871)) + cbModelParam._m0[14u].w;
        float _1714 = fma(_879, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871)) + cbModelParam._m0[15u].w;
        float _1717 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1720 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1723 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1751;
        if (_1717 > 0.0)
        {
            _1751 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1751 = frontier_phi_21_19_ladder;
        }
        float _1974;
        if (_1720 > 0.0)
        {
            _1974 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1974 = frontier_phi_30_26_ladder;
        }
        float _2231;
        if (_1723 > 0.0)
        {
            _2231 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2231 = frontier_phi_42_37_ladder;
        }
        float _2233 = isnan(_1974) ? _1751 : (isnan(_1751) ? _1974 : min(_1751, _1974));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1717) + _1706;
        float _2239 = (_2234 * _1720) + _1710;
        float _2240 = (_2234 * _1723) + _1714;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2241;
        float _2245 = _2241 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 > _2245) || ((_2239 < _2243) || ((_2238 < _2243) || (_2238 > _2245))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2240, cbModelParam._m0[9u].z, fma(_2239, cbModelParam._m0[9u].y, _2238 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2240, cbModelParam._m0[10u].z, fma(_2239, cbModelParam._m0[10u].y, _2238 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2240, cbModelParam._m0[11u].z, fma(_2239, cbModelParam._m0[11u].y, _2238 * cbModelParam._m0[11u].x))), _1659);
            frontier_phi_20_42_ladder = _2368.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2368.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2368.x * cbModelParam._m0[1u].y;
        }
        _1739 = frontier_phi_20_42_ladder_2;
        _1741 = frontier_phi_20_42_ladder_1;
        _1743 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1659);
        _1739 = _1727.x * cbModelParam._m0[1u].y;
        _1741 = _1727.y * cbModelParam._m0[1u].y;
        _1743 = _1727.z * cbModelParam._m0[1u].y;
    }
    float _1747 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _724);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1747 : min(cbModelParam._m0[25u].w, _1747));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1801 = fma(_879, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871)) + cbModelParam._m0[21u].w;
        float _1805 = fma(_879, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871)) + cbModelParam._m0[22u].w;
        float _1809 = fma(_879, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871)) + cbModelParam._m0[23u].w;
        float _1812 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1815 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1818 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _1979;
        if (_1812 > 0.0)
        {
            _1979 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1979 = frontier_phi_32_28_ladder;
        }
        float _2258;
        if (_1815 > 0.0)
        {
            _2258 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2258 = frontier_phi_44_39_ladder;
        }
        float _2471;
        if (_1818 > 0.0)
        {
            _2471 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_53_50_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_53_50_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_53_50_ladder = 5000.0;
            }
            _2471 = frontier_phi_53_50_ladder;
        }
        float _2473 = isnan(_2258) ? _1979 : (isnan(_1979) ? _2258 : min(_1979, _2258));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1812) + _1801;
        float _2479 = (_2474 * _1815) + _1805;
        float _2480 = (_2474 * _1818) + _1809;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2481;
        float _2484 = _2481 + 1.0;
        float frontier_phi_29_53_ladder;
        float frontier_phi_29_53_ladder_1;
        float frontier_phi_29_53_ladder_2;
        if ((_2480 > _2484) || ((_2480 < _2482) || ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 < _2482) || (_2478 > _2484))))))
        {
            frontier_phi_29_53_ladder = 0.0;
            frontier_phi_29_53_ladder_1 = 0.0;
            frontier_phi_29_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2480, cbModelParam._m0[17u].z, fma(_2479, cbModelParam._m0[17u].y, _2478 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2480, cbModelParam._m0[18u].z, fma(_2479, cbModelParam._m0[18u].y, _2478 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2480, cbModelParam._m0[19u].z, fma(_2479, cbModelParam._m0[19u].y, _2478 * cbModelParam._m0[19u].x))), _1748);
            frontier_phi_29_53_ladder = _2696.z * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_1 = _2696.y * cbModelParam._m0[1u].z;
            frontier_phi_29_53_ladder_2 = _2696.x * cbModelParam._m0[1u].z;
        }
        _1837 = frontier_phi_29_53_ladder_2;
        _1839 = frontier_phi_29_53_ladder_1;
        _1841 = frontier_phi_29_53_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1748);
        _1837 = _1821.x * cbModelParam._m0[1u].z;
        _1839 = _1821.y * cbModelParam._m0[1u].z;
        _1841 = _1821.z * cbModelParam._m0[1u].z;
    }
    float _1854 = (((_842 * _794) + _843) * _809) * ((cbModelParam._m0[1u].w * (_1837 - _1739)) + _1739);
    float _1856 = (((_842 * _796) + _843) * _809) * ((cbModelParam._m0[1u].w * (_1839 - _1741)) + _1741);
    float _1858 = (((_842 * _797) + _843) * _809) * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1861 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, _1854 * cbSceneParam._m0[91u].x));
    vec4 _1875 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_682, _683));
    float _1877 = _1875.w;
    float _1889 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1877);
    float _1890 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1877);
    float _1891 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1877);
    uvec4 _1895 = floatBitsToUint(cbInstanceData._m0[_737 + 5u]);
    uint _1897 = _1895.x * 14u;
    uint _1898 = _1897 + 13u;
    float _1905 = _809 + (-1.0);
    float _1910 = (cbLight._m0[_1898].x * _1905) + 1.0;
    float _1911 = (cbLight._m0[_1898].y * _1905) + 1.0;
    float _1912 = (cbLight._m0[_1898].z * _1905) + 1.0;
    float _1913 = (cbLight._m0[_1898].w * _1905) + 1.0;
    uint _1914 = _1897 + 5u;
    float _1920 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
    uint _1924 = _1897 + 4u;
    float _1933 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
    uint _1937 = _1897 | 1u;
    float _1948 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_579, _580, _581));
    float _1951 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_579, _580, _581));
    float _4176 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _4187 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1956 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _1958 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _1965 = ((cbLight._m0[_1914].x * _1920) * _1958) + (((cbLight._m0[_1924].x * _1889) * _1933) * _1956);
    float _1966 = ((_1920 * cbLight._m0[_1914].y) * _1958) + (((cbLight._m0[_1924].y * _1890) * _1933) * _1956);
    float _1967 = ((_1920 * cbLight._m0[_1914].z) * _1958) + (((cbLight._m0[_1924].z * _1891) * _1933) * _1956);
    uvec4 _1971 = floatBitsToUint(cbLight._m0[_1897 + 12u]);
    bool _1973 = _1971.x == 0u;
    float _1984;
    float _1986;
    float _1988;
    if (_1973)
    {
        _1984 = _1965;
        _1986 = _1966;
        _1988 = _1967;
    }
    else
    {
        uint _1992 = _1897 + 6u;
        float _2008 = (dot(vec3(cbLight._m0[_1897 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2009 = _2008 * _2008;
        float _4198 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2010 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2011 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _1984 = (((cbLight._m0[_1992].x * 0.3183098733425140380859375) * _2010) * _2011) + _1965;
        _1986 = (((cbLight._m0[_1992].y * 0.3183098733425140380859375) * _2010) * _2011) + _1966;
        _1988 = (((cbLight._m0[_1992].z * 0.3183098733425140380859375) * _2010) * _2011) + _1967;
    }
    bool _1991 = _1971.y == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_1991)
    {
        _2029 = _1984;
        _2031 = _1986;
        _2033 = _1988;
    }
    else
    {
        uint _2202 = _1897 + 7u;
        float _2218 = (dot(vec3(cbLight._m0[_1897 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2219 = _2218 * _2218;
        float _4214 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2220 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2221 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _2029 = (((cbLight._m0[_2202].x * 0.3183098733425140380859375) * _2220) * _2221) + _1984;
        _2031 = (((cbLight._m0[_2202].y * 0.3183098733425140380859375) * _2220) * _2221) + _1986;
        _2033 = (((cbLight._m0[_2202].z * 0.3183098733425140380859375) * _2220) * _2221) + _1988;
    }
    uint _2036 = _1897 + 8u;
    float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _724) * 0.949999988079071044921875);
    float _2050 = _2049 * _2049;
    float _2051 = cbLight._m0[_1897].x + _660;
    float _2052 = cbLight._m0[_1897].y + _661;
    float _2053 = cbLight._m0[_1897].z + _662;
    float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
    float _2058 = _2057 * _2051;
    float _2059 = _2057 * _2052;
    float _2060 = _2057 * _2053;
    float _2061 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1897].xyz));
    float _4230 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2065 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2066 = dot(vec3(_579, _580, _581), vec3(_2058, _2059, _2060));
    float _4252 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2070 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_2058, _2059, _2060));
    float _4263 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2074 = _2050 * _2050;
    float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
    float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0);
    float _2087 = 0.959999978542327880859375 - _791;
    float _2089 = 0.959999978542327880859375 - _792;
    float _2090 = 0.959999978542327880859375 - _793;
    float _2097 = 1.0 - _2050;
    float _2108 = (0.5 / (((_2065 * ((_2064 * _2097) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2097) + _2050) * _2064))) * _2064;
    float _4274 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
    uint _2124 = _1897 + 9u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _724) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1937].x + _660;
    float _2138 = cbLight._m0[_1937].y + _661;
    float _2139 = cbLight._m0[_1937].z + _662;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1937].xyz));
    float _4285 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2151 = dot(vec3(_579, _580, _581), vec3(_2144, _2145, _2146));
    float _4296 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2144, _2145, _2146));
    float _4307 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2136 * _2136;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
    float _2177 = 1.0 - _2136;
    float _2187 = (0.5 / (((_2065 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2177) + _2136) * _2150))) * _2150;
    float _4318 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2189 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2199 = (((((_2170 * _2087) + _794) * cbLight._m0[_2124].x) * _2189) * _1920) + ((((cbLight._m0[_2036].x * _1889) * ((_2086 * _2087) + _794)) * _2110) * _1933);
    float _2200 = (((((_2170 * _2089) + _796) * cbLight._m0[_2124].y) * _2189) * _1920) + ((((cbLight._m0[_2036].y * _1890) * ((_2086 * _2089) + _796)) * _2110) * _1933);
    float _2201 = (((((_2170 * _2090) + _797) * cbLight._m0[_2124].z) * _2189) * _1920) + ((((cbLight._m0[_2036].z * _1891) * ((_2086 * _2090) + _797)) * _2110) * _1933);
    float _2263;
    float _2265;
    float _2267;
    if (_1973)
    {
        _2263 = _2199;
        _2265 = _2200;
        _2267 = _2201;
    }
    else
    {
        uint _2269 = _1897 + 2u;
        uint _2273 = _1897 + 10u;
        float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _724) * 0.949999988079071044921875);
        float _2288 = _2287 * _2287;
        float _2289 = cbLight._m0[_2269].x + _660;
        float _2290 = cbLight._m0[_2269].y + _661;
        float _2291 = cbLight._m0[_2269].z + _662;
        float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
        float _2296 = _2295 * _2289;
        float _2297 = _2295 * _2290;
        float _2298 = _2295 * _2291;
        float _2299 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2269].xyz));
        float _4329 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2303 = dot(vec3(_579, _580, _581), vec3(_2296, _2297, _2298));
        float _4340 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2307 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2296, _2297, _2298));
        float _4351 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2311 = _2288 * _2288;
        float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
        float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
        float _2329 = 1.0 - _2288;
        float _2339 = (0.5 / (((_2065 * ((_2302 * _2329) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2329) + _2288) * _2302))) * _2302;
        float _4362 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2341 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
        float _2342 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2263 = (((((_2322 * _2087) + _794) * cbLight._m0[_2273].x) * _2341) * _2342) + _2199;
        _2265 = (((((_2322 * _2089) + _796) * cbLight._m0[_2273].y) * _2341) * _2342) + _2200;
        _2267 = (((((_2322 * _2090) + _797) * cbLight._m0[_2273].z) * _2341) * _2342) + _2201;
    }
    float _2377;
    float _2379;
    float _2381;
    if (_1991)
    {
        _2377 = _2263;
        _2379 = _2265;
        _2381 = _2267;
    }
    else
    {
        uint _2388 = _1897 + 3u;
        uint _2392 = _1897 + 11u;
        float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _724) * 0.949999988079071044921875);
        float _2407 = _2406 * _2406;
        float _2408 = cbLight._m0[_2388].x + _660;
        float _2409 = cbLight._m0[_2388].y + _661;
        float _2410 = cbLight._m0[_2388].z + _662;
        float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
        float _2415 = _2414 * _2408;
        float _2416 = _2414 * _2409;
        float _2417 = _2414 * _2410;
        float _2418 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2388].xyz));
        float _4378 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2422 = dot(vec3(_579, _580, _581), vec3(_2415, _2416, _2417));
        float _4389 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2426 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2415, _2416, _2417));
        float _4400 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2430 = _2407 * _2407;
        float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
        float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0);
        float _2448 = 1.0 - _2407;
        float _2458 = (0.5 / (((_2065 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2448) + _2407) * _2421))) * _2421;
        float _4411 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _2377 = (((((_2441 * _2087) + _794) * cbLight._m0[_2392].x) * _2460) * _2461) + _2263;
        _2379 = (((((_2441 * _2089) + _796) * cbLight._m0[_2392].y) * _2460) * _2461) + _2265;
        _2381 = (((((_2441 * _2090) + _797) * cbLight._m0[_2392].z) * _2460) * _2461) + _2267;
    }
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_1895.y == 0u)
    {
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2536;
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2536;
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2536;
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.x;
        uint _2563 = uint((float(_2551.y) * floor(float(uint(cbSceneParam._m0[85u].y * _683) / _2552))) + floor(float(uint(cbSceneParam._m0[85u].x * _682) / _2552)));
        float _2573 = (log2(_2539 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2574 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        uint _2577 = uint(isnan(14.0) ? _2574 : (isnan(_2574) ? 14.0 : min(_2574, 14.0)));
        uvec4 _2582 = texelFetch(g_lightClusterGridBuffer, int(((_2577 << 2u) + (_2563 << 6u)) >> 2u));
        uint _2583 = _2582.x;
        uint _2584 = _2551.z;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((((1u << ((_2584 >> 4u) & 15u)) + 4294967295u) & _2583) == 0u) || ((_2584 & 240u) == 0u))
        {
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
        }
        else
        {
            float _2702;
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            uint _2859 = 0u;
            uint _2868;
            bool _2869;
            for (;;)
            {
                _2868 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                _2869 = _2868 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2869)
                {
                    frontier_phi_70_pred = _2853;
                    frontier_phi_70_pred_1 = _2858;
                    frontier_phi_70_pred_2 = _2857;
                    frontier_phi_70_pred_3 = _2856;
                    frontier_phi_70_pred_4 = _2855;
                    frontier_phi_70_pred_5 = _2854;
                }
                else
                {
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    uint _3004;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2868;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    for (;;)
                    {
                        uint _3008 = uint(findLSB(_3004)) + (_2859 << 5u);
                        uint _3005 = (_3004 + 4294967295u) & _3004;
                        uint _3010 = _3008 * 48u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3030 = (_3008 * 48u) + 4u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3049 = (_3008 * 48u) + 8u;
                        vec3 _3060 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x));
                        float _3064 = _3024.x - _2537;
                        float _3065 = _3024.y - _2538;
                        float _3066 = _3024.z - _2539;
                        float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                        float _3070 = inversesqrt(_3067);
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3074 = dot(vec3(_705, _708, _711), vec3(_3071, _3072, _3073));
                        float _3079 = 1.0 - (_3067 * _3024.w);
                        float _4437 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3081 = sqrt(_3067) * _3043.w;
                        float _3084 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3074) + _3085;
                        float _3091 = _3081 * _3081;
                        float _3095 = ((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3080) / ((_3091 * 0.699999988079071044921875) + 1.0);
                        float _3099 = (-0.0) - _2537;
                        float _3100 = (-0.0) - _2538;
                        float _3101 = (-0.0) - _2539;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3116 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                        float _3117 = 1.0 - _825;
                        float _3124 = sqrt(1.0 - ((1.0 - (_3117 * _3117)) * (1.0 - (_3116 * _3116))));
                        float _3125 = _3124 * _3124;
                        float _3126 = _3125 * _3125;
                        float _3127 = _3106 + _3071;
                        float _3128 = _3107 + _3072;
                        float _3129 = _3108 + _3073;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3137 = dot(vec3(_705, _708, _711), vec3(_3106, _3107, _3108));
                        float _4453 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3141 = dot(vec3(_705, _708, _711), vec3(_3133 * _3127, _3133 * _3128, _3133 * _3129));
                        float _4464 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3144 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3148 = ((_3144 * _3144) * (_3126 + (-1.0))) + 1.0;
                        float _3149 = _3084 * _3125;
                        float _3150 = _3149 * _3149;
                        float _3153 = ((1.0 - _3150) * _3074) + _3150;
                        float _4475 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3155 = 1.0 - _3125;
                        float _3165 = (0.5 / (((_3154 * ((_3140 * _3155) + _3125)) + 9.9999999392252902907785028219223e-09) + (((_3154 * _3155) + _3125) * _3140))) * _3154;
                        float _4486 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3176 = (((_3126 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3148 * _3148) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125))) * _3080;
                        _2928 = (_3095 * _3043.x) + _3001;
                        _2929 = (_3095 * _3043.y) + _3002;
                        _2930 = (_3095 * _3043.z) + _3003;
                        _2925 = (_3176 * _3060.x) + _2998;
                        _2926 = (_3176 * _3060.y) + _2999;
                        _2927 = (_3176 * _3060.z) + _3000;
                        if (_3005 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _3005;
                        }
                    }
                    frontier_phi_70_pred = _2925;
                    frontier_phi_70_pred_1 = _2930;
                    frontier_phi_70_pred_2 = _2929;
                    frontier_phi_70_pred_3 = _2928;
                    frontier_phi_70_pred_4 = _2927;
                    frontier_phi_70_pred_5 = _2926;
                }
                _2702 = frontier_phi_70_pred;
                _2712 = frontier_phi_70_pred_1;
                _2710 = frontier_phi_70_pred_2;
                _2708 = frontier_phi_70_pred_3;
                _2706 = frontier_phi_70_pred_4;
                _2704 = frontier_phi_70_pred_5;
                uint _2860 = _2859 + 1u;
                if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2853 = _2702;
                    _2854 = _2704;
                    _2855 = _2706;
                    _2856 = _2708;
                    _2857 = _2710;
                    _2858 = _2712;
                    _2859 = _2860;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
        }
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.z;
        uint _2718 = (_2716 >> 8u) & 15u;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        if (((4294967295u << _2718) & _2583) == 0u)
        {
            _2821 = _2701;
            _2823 = _2703;
            _2825 = _2705;
            _2827 = _2707;
            _2829 = _2709;
            _2831 = _2711;
        }
        else
        {
            float _2846 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
            float _2847 = _2846 * _2537;
            float _2848 = _2846 * _2538;
            float _2849 = _2846 * _2539;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2718 < ((_2716 >> 12u) & 15u))
            {
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2981 = _2701;
                float _2982 = _2703;
                float _2983 = _2705;
                float _2984 = _2707;
                float _2985 = _2709;
                float _2986 = _2711;
                uint _2987 = _2718;
                uint _2996;
                bool _2997;
                for (;;)
                {
                    _2996 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                    _2997 = _2996 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2997)
                    {
                        frontier_phi_81_pred = _2986;
                        frontier_phi_81_pred_1 = _2985;
                        frontier_phi_81_pred_2 = _2984;
                        frontier_phi_81_pred_3 = _2983;
                        frontier_phi_81_pred_4 = _2982;
                        frontier_phi_81_pred_5 = _2981;
                    }
                    else
                    {
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3203 = _2981;
                        float _3204 = _2982;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        uint _3209 = _2996;
                        uint _3210;
                        vec4 _3235;
                        float _3236;
                        vec4 _3251;
                        vec3 _3263;
                        vec4 _3278;
                        vec4 _3293;
                        float _3339;
                        bool _3340;
                        for (;;)
                        {
                            uint _3220 = ((_2987 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3209));
                            _3210 = (_3209 + 4294967295u) & _3209;
                            uint _3222 = _3220 * 40u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            _3236 = _3235.w;
                            uint _3238 = (_3220 * 40u) + 4u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3220 * 40u) + 8u;
                            _3263 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x));
                            uint _3265 = (_3220 * 40u) + 16u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3220 * 40u) + 20u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3220 * 40u) + 24u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3314 = (_3220 * 40u) + 28u;
                            vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            _3339 = fma(_2539, _3327.z, fma(_2538, _3327.y, _3327.x * _2537)) + _3327.w;
                            _3340 = !((fma(_2539, _3308.z, fma(_2538, _3308.y, _3308.x * _2537)) + _3308.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3340)
                            {
                                float _3367 = _3235.x - _2537;
                                float _3368 = _3235.y - _2538;
                                float _3369 = _3235.z - _2539;
                                float _3370 = dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369));
                                float _3373 = inversesqrt(_3370);
                                float _3374 = _3373 * _3367;
                                float _3375 = _3373 * _3368;
                                float _3376 = _3373 * _3369;
                                float _3380 = 1.0 - (_3370 / (_3236 * _3236));
                                float _4497 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3385 = sqrt(_3370) * _3251.w;
                                float _3387 = 1.39999997615814208984375 / (_3385 + 1.39999997615814208984375);
                                float _3388 = _3387 * _3387;
                                float _3391 = ((1.0 - _3388) * dot(vec3(_3374, _3375, _3376), vec3(_705, _708, _711))) + _3388;
                                float _3394 = _3385 * _3385;
                                float _3398 = (fma(_2539, _3278.z, fma(_2538, _3278.y, _3278.x * _2537)) + _3278.w) / _3339;
                                float _3399 = (fma(_2539, _3293.z, fma(_2538, _3293.y, _3293.x * _2537)) + _3293.w) / _3339;
                                float _3403 = 1.0 - dot(vec2(_3398, _3399), vec2(_3398, _3399));
                                float _4513 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3405 = _3404 * (((isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0))) * _3381) / ((_3394 * 0.699999988079071044921875) + 1.0));
                                float _3417 = exp2(log2(1.0 / ((_3394 * 3.5) + 5.0)) * 0.25);
                                float _3418 = 1.0 - _825;
                                float _3425 = sqrt(1.0 - ((1.0 - (_3418 * _3418)) * (1.0 - (_3417 * _3417))));
                                float _3426 = _3425 * _3425;
                                float _3427 = _3426 * _3426;
                                float _3428 = _3374 - _2847;
                                float _3429 = _3375 - _2848;
                                float _3430 = _3376 - _2849;
                                float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                                float _3438 = dot(vec3(_705, _708, _711), vec3((-0.0) - _2847, (-0.0) - _2848, (-0.0) - _2849));
                                float _4524 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3441 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3442 = dot(vec3(_705, _708, _711), vec3(_3434 * _3428, _3434 * _3429, _3434 * _3430));
                                float _4535 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3445 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3449 = ((_3445 * _3445) * (_3427 + (-1.0))) + 1.0;
                                float _3450 = _3387 * _3426;
                                float _3451 = _3450 * _3450;
                                float _3457 = ((1.0 - _3451) * dot(vec3(_705, _708, _711), vec3(_3374, _3375, _3376))) + _3451;
                                float _4546 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3459 = 1.0 - _3426;
                                float _3469 = (0.5 / (((_3458 * ((_3441 * _3459) + _3426)) + 9.9999999392252902907785028219223e-09) + (((_3458 * _3459) + _3426) * _3441))) * _3458;
                                float _4557 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3479 = (_3404 * _3381) * (((_3427 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3449 * _3449) * ((_3394 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3405 * _3251.z;
                                frontier_phi_87_pred_1 = _3405 * _3251.y;
                                frontier_phi_87_pred_2 = _3405 * _3251.x;
                                frontier_phi_87_pred_3 = _3479 * _3263.z;
                                frontier_phi_87_pred_4 = _3479 * _3263.y;
                                frontier_phi_87_pred_5 = _3479 * _3263.x;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3488 = frontier_phi_87_pred;
                            _3487 = frontier_phi_87_pred_1;
                            _3486 = frontier_phi_87_pred_2;
                            _3485 = frontier_phi_87_pred_3;
                            _3484 = frontier_phi_87_pred_4;
                            _3483 = frontier_phi_87_pred_5;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            _3195 = _3488 + _3208;
                            _3190 = _3483 + _3203;
                            _3191 = _3484 + _3204;
                            _3192 = _3485 + _3205;
                            if (_3210 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3210;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _3195;
                        frontier_phi_81_pred_1 = _3194;
                        frontier_phi_81_pred_2 = _3193;
                        frontier_phi_81_pred_3 = _3192;
                        frontier_phi_81_pred_4 = _3191;
                        frontier_phi_81_pred_5 = _3190;
                    }
                    _2832 = frontier_phi_81_pred;
                    _2830 = frontier_phi_81_pred_1;
                    _2828 = frontier_phi_81_pred_2;
                    _2826 = frontier_phi_81_pred_3;
                    _2824 = frontier_phi_81_pred_4;
                    _2822 = frontier_phi_81_pred_5;
                    uint _2988 = _2987 + 1u;
                    if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2981 = _2822;
                        _2982 = _2824;
                        _2983 = _2826;
                        _2984 = _2828;
                        _2985 = _2830;
                        _2986 = _2832;
                        _2987 = _2988;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2828;
                frontier_phi_62_63_ladder_1 = _2832;
                frontier_phi_62_63_ladder_2 = _2830;
                frontier_phi_62_63_ladder_3 = _2826;
                frontier_phi_62_63_ladder_4 = _2824;
                frontier_phi_62_63_ladder_5 = _2822;
            }
            else
            {
                frontier_phi_62_63_ladder = _2707;
                frontier_phi_62_63_ladder_1 = _2711;
                frontier_phi_62_63_ladder_2 = _2709;
                frontier_phi_62_63_ladder_3 = _2705;
                frontier_phi_62_63_ladder_4 = _2703;
                frontier_phi_62_63_ladder_5 = _2701;
            }
            _2821 = frontier_phi_62_63_ladder_5;
            _2823 = frontier_phi_62_63_ladder_4;
            _2825 = frontier_phi_62_63_ladder_3;
            _2827 = frontier_phi_62_63_ladder;
            _2829 = frontier_phi_62_63_ladder_2;
            _2831 = frontier_phi_62_63_ladder_1;
        }
        float _2836 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
        _2595 = (_2836 * _2827) + _2029;
        _2597 = (_2836 * _2829) + _2031;
        _2599 = (_2836 * _2831) + _2033;
        _2601 = ((_2821 * _794) * _2836) + _2377;
        _2603 = ((_2823 * _796) * _2836) + _2379;
        _2605 = ((_2825 * _797) * _2836) + _2381;
    }
    else
    {
        _2595 = _2029;
        _2597 = _2031;
        _2599 = _2033;
        _2601 = _2377;
        _2603 = _2379;
        _2605 = _2381;
    }
    vec4 _2611 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _4573 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4584 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4595 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2635 = (((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2595 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _809))) + ((_2601 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1648)) * cbPerFrame._m0[3u].x)) + (_2611.x * cbMtdParam._m0[3u].x);
    float _2637 = ((_2611.y * cbMtdParam._m0[3u].x) + ((_2603 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1648)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2597 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _809)));
    float _2639 = ((_2611.z * cbMtdParam._m0[3u].x) + ((_2605 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1648)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2599 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _809)));
    float _2640 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2641 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2642 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    uint _2643 = _737 + 6u;
    float _2651 = _682 / cbSceneParam._m0[86u].x;
    float _2652 = _683 / cbSceneParam._m0[86u].y;
    vec4 _2666 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, (log2((isnan(cbSceneParam._m0[77u].w) ? _602 : (isnan(_602) ? cbSceneParam._m0[77u].w : min(_602, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2668 = _2666.x;
    float _2669 = _2666.y;
    float _2670 = _2666.z;
    float _2671 = _2666.w;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_602 > cbSceneParam._m0[78u].w)
    {
        float _2726 = isnan(_602) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _602 : min(cbSceneParam._m0[80u].w, _602));
        float _2727 = _2726 / _602;
        float _2738 = _2727 * _653;
        float _2739 = _654 * _2727;
        float _2740 = (-0.0) - _2739;
        float _2741 = _2727 * _655;
        float _2743 = (cbSceneParam._m0[77u].w * _2740) / _2726;
        float _2744 = _2743 + cbSceneParam._m0[79u].w;
        float _2745 = cbSceneParam._m0[79u].w - _2739;
        float _2751 = sqrt(((_2738 * _2738) + (_2739 * _2739)) + (_2741 * _2741));
        float _2754 = (1.0 - (cbSceneParam._m0[77u].w / _2726)) * _2751;
        float _2759 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2761 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2938;
        if (abs((_2740 - _2743) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2938 = ((((_2744 > 0.0) ? exp2(_2759 * _2744) : (2.0 - exp2(_2761 * _2744))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2754;
        }
        else
        {
            float _2882 = 1.0 / cbSceneParam._m0[80u].x;
            float _2883 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : max(_2744, _2745));
            float _2884 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : min(_2744, _2745));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            float _2894 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : min(_2884, 0.0));
            _2938 = ((abs(_2751 / _2740) * cbSceneParam._m0[80u].y) * ((((_2893 - _2894) * 2.0) - ((exp2(_2759 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0)))) - exp2(_2759 * (isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))))) * _2882)) - ((exp2(_2761 * _2893) - exp2(_2761 * _2894)) * _2882))) + (_2754 * cbSceneParam._m0[80u].z);
        }
        vec4 _2940 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, 1.0), 0.0);
        float _2949 = exp2((_2938 * (-1.44269502162933349609375)) * (1.0 - _2940.w));
        float _2950 = log2(_2949);
        float _2966 = log2(_2671);
        _2763 = (exp2(_2966 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].x)) * _2940.x) / cbSceneParam._m0[78u].x)) + _2668;
        _2765 = (exp2(_2966 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].y)) * _2940.y) / cbSceneParam._m0[78u].y)) + _2669;
        _2767 = (exp2(_2966 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].z)) * _2940.z) / cbSceneParam._m0[78u].z)) + _2670;
        _2769 = _2949 * _2671;
    }
    else
    {
        _2763 = _2668;
        _2765 = _2669;
        _2767 = _2670;
        _2769 = _2671;
    }
    bool _2976;
    vec4 _2779;
    vec4 _2801;
    float _2803;
    float _2807;
    float _2808;
    float _2809;
    float _2810;
    bool _2820;
    for (;;)
    {
        _2779 = cbMatDynParam._m0[0u];
        float _2781 = roundEven(_2779.y);
        bool _2782 = _2781 == 3.0;
        float _2783 = log2(_2769);
        float _2790 = exp2(_2783 * cbSceneParam._m0[78u].x) * _2640;
        float _2791 = exp2(_2783 * cbSceneParam._m0[78u].y) * _2641;
        float _2792 = exp2(_2783 * cbSceneParam._m0[78u].z) * _2642;
        float _2799 = _669 + (-0.5);
        _2801 = cbMtdParam._m0[1u];
        _2803 = _2801.y * _2799;
        float _2806 = (_2781 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2807 = _2806 * (_2782 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2763)));
        _2808 = _2806 * (_2782 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2765)));
        _2809 = _2806 * (_2782 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2767)));
        _2810 = _2799 * 0.999000012874603271484375;
        _2820 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2820)
        {
            if ((cbInstanceData._m0[_737 + 7u].x + _2810) < 0.5)
            {
                _2976 = true;
                break;
            }
        }
        uint _2917 = _738 + uint(_2779.w);
        if ((cbInstanceData._m0[_2917].w < 1.0) && ((cbInstanceData._m0[_2917].w + _2810) < 0.5))
        {
            _2976 = true;
            break;
        }
        if ((_2803 + 1.0) < _2801.x)
        {
            _2976 = true;
            break;
        }
        _2976 = false;
        break;
    }
    float _3181;
    if (_2976)
    {
        discard_state = true;
        _3181 = 0.0;
    }
    else
    {
        _3181 = cbInstanceData._m0[_2643].w;
    }
    SV_Target.x = _2807;
    SV_Target.y = _2808;
    SV_Target.z = _2809;
    SV_Target.w = _3181;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2643].w;
    discard_exit();
}


