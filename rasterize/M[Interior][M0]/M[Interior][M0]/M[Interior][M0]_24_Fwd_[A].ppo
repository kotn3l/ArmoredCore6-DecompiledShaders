#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1047;
float _3159;
float _3160;
float _3161;
float _3162;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _393 = ((_387 * _381) + (_355 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _394 = ((_387 * _382) + (_356 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    float _414 = (_390 > 0.0) ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_395 + (-0.5)) + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_396 + (-0.5)) + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _472 = 0.5 - (_288 * 0.5);
    float _479 = ((((_454 - (_454 * _288)) * cbMtdParam._m0[9u].x) - _301) * _472) + _301;
    float _480 = ((((_455 - (_455 * _288)) * cbMtdParam._m0[9u].y) - _303) * _472) + _303;
    float _481 = (((cbMtdParam._m0[9u].z * (_456 - (_456 * _288))) - _305) * _472) + _305;
    vec4 _493 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _497 = _493.z;
    float _500 = (_493.x * 2.0) + (-1.0);
    float _501 = (_493.y * 2.0) + (-1.0);
    float _502 = dot(vec2(_500, _501), vec2(_500, _501));
    float _3181 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _507 = sqrt(1.0 - (isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))));
    float _508 = _497 * _288;
    float _515 = (cbMtdParam._m0[15u].w * ((_327 - _508) + ((_497 - _327) * _288))) + _508;
    float _519 = (cbMtdParam._m0[16u].x * _355) + _500;
    float _520 = (cbMtdParam._m0[16u].x * _356) + _501;
    float _523 = fma(_507, _197, fma(_520, _204, _519 * _190));
    float _526 = fma(_507, _198, fma(_520, _205, _519 * _191));
    float _529 = fma(_507, _199, fma(_520, _206, _519 * _192));
    float _533 = inversesqrt(dot(vec3(_523, _526, _529), vec3(_523, _526, _529)));
    float _534 = _533 * _523;
    float _535 = _533 * _526;
    float _536 = _533 * _529;
    float _3192 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _537 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
    float _3203 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3214 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3225 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _556 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _561 = _261 * _560;
    float _562 = _262 * _560;
    float _563 = _263 * _560;
    vec4 _568 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _570 = _568.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _728 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _734 = (cbMatDynParam._m0[5u].x * _728) + cbMatDynParam._m0[5u].y;
        float _3236 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _739 = (cbMatDynParam._m0[5u].z * _728) + cbMatDynParam._m0[5u].w;
        float _3247 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))) - _735)) + _735) < ((_570 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _583 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _584 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_536, cbSceneParam._m0[5u].z, fma(_535, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _534));
    float _606 = fma(_536, cbSceneParam._m0[6u].z, fma(_535, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _534));
    float _609 = fma(_536, cbSceneParam._m0[7u].z, fma(_535, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _534));
    uint _622 = uint(roundEven(NORMAL.w)) * 13u;
    uint _624 = _622 + 9u;
    uint _625 = _624 + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3258 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
    float _3269 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
    float _3280 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    vec4 _645 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _583, cbSceneParam._m0[86u].y * _584));
    float _648 = _645.x * TEXCOORD.z;
    float _649 = dot(vec3(_534, _535, _536), vec3(_561, _562, _563));
    float _652 = _649 * 2.0;
    float _656 = (_652 * _534) - _561;
    float _657 = (_652 * _535) - _562;
    float _658 = (_652 * _536) - _563;
    float _662 = abs(dot(vec3(_561, _562, _563), vec3(_534, _535, _536)));
    float _3291 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _664 = sqrt(_537);
    float _677 = exp2((_664 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_664 * 3.0));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _773 = fma(_717, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709));
        float _777 = fma(_717, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709));
        float _781 = fma(_717, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709));
        float _804 = _709 + _534;
        float _805 = _713 + _535;
        float _806 = _717 + _536;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _773;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _777;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _781;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_773 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_777 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_781 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_534, _535, _536), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3317 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3328 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3339 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_534, _535, _536), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3372 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_534, _535, _536), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3405 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_717, cbModelParam._m0[30u].z, fma(_713, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _709));
        float _1094 = fma(_717, cbModelParam._m0[31u].z, fma(_713, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _709));
        float _1098 = fma(_717, cbModelParam._m0[32u].z, fma(_713, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _709));
        float _1121 = _709 + _534;
        float _1122 = _713 + _535;
        float _1123 = _717 + _536;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_534, _535, _536), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3446 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3457 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3468 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_534, _535, _536), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3501 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_534, _535, _536), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3534 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = _1047;
        _1368 = _1047;
        _1369 = _1047;
        _1370 = _1047;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1059)) + _1059;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1060)) + _1060;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1061)) + _1061;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _656 * 0.5;
    float _1428 = _657 * 0.5;
    float _1429 = _658 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1470;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1481;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1472 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1485 = (_1481 * cbModelParam._m0[1u].x) + (_1470 * (1.0 - cbModelParam._m0[1u].x));
    float _1495 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _537);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1495 : min(cbModelParam._m0[25u].z, _1495));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1544 = fma(_717, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709)) + cbModelParam._m0[13u].w;
        float _1548 = fma(_717, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709)) + cbModelParam._m0[14u].w;
        float _1552 = fma(_717, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709)) + cbModelParam._m0[15u].w;
        float _1555 = fma(_658, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _656));
        float _1558 = fma(_658, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _656));
        float _1561 = fma(_658, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _656));
        float _1589;
        if (_1555 > 0.0)
        {
            _1589 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1589 = frontier_phi_25_23_ladder;
        }
        float _1935;
        if (_1558 > 0.0)
        {
            _1935 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1935 = frontier_phi_34_30_ladder;
        }
        float _2243;
        if (_1561 > 0.0)
        {
            _2243 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2243 = frontier_phi_48_41_ladder;
        }
        float _2245 = isnan(_1935) ? _1589 : (isnan(_1589) ? _1935 : min(_1589, _1935));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1555) + _1544;
        float _2251 = (_2246 * _1558) + _1548;
        float _2252 = (_2246 * _1561) + _1552;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2253;
        float _2256 = _2253 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2252 > _2256) || ((_2252 < _2254) || ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 < _2254) || (_2250 > _2256))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1496);
            frontier_phi_24_48_ladder = _2394.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2394.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2394.x * cbModelParam._m0[1u].y;
        }
        _1577 = frontier_phi_24_48_ladder_2;
        _1579 = frontier_phi_24_48_ladder_1;
        _1581 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_656, _657, _658), _1496);
        _1577 = _1565.x * cbModelParam._m0[1u].y;
        _1579 = _1565.y * cbModelParam._m0[1u].y;
        _1581 = _1565.z * cbModelParam._m0[1u].y;
    }
    float _1585 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _537);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1585 : min(cbModelParam._m0[25u].w, _1585));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_717, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_717, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_717, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_658, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _656));
        float _1653 = fma(_658, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _656));
        float _1656 = fma(_658, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _656));
        float _1940;
        if (_1650 > 0.0)
        {
            _1940 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1940 = frontier_phi_36_32_ladder;
        }
        float _2269;
        if (_1653 > 0.0)
        {
            _2269 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2269 = frontier_phi_50_43_ladder;
        }
        float _2459;
        if (_1656 > 0.0)
        {
            _2459 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2459 = frontier_phi_68_61_ladder;
        }
        float _2461 = isnan(_2269) ? _1940 : (isnan(_1940) ? _2269 : min(_1940, _2269));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1650) + _1639;
        float _2467 = (_2462 * _1653) + _1643;
        float _2468 = (_2462 * _1656) + _1647;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2469;
        float _2472 = _2469 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2468 > _2472) || ((_2468 < _2470) || ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 < _2470) || (_2466 > _2472))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2468, cbModelParam._m0[17u].z, fma(_2467, cbModelParam._m0[17u].y, _2466 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2468, cbModelParam._m0[18u].z, fma(_2467, cbModelParam._m0[18u].y, _2466 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2468, cbModelParam._m0[19u].z, fma(_2467, cbModelParam._m0[19u].y, _2466 * cbModelParam._m0[19u].x))), _1586);
            frontier_phi_33_68_ladder = _2710.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2710.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2710.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_33_68_ladder_2;
        _1677 = frontier_phi_33_68_ladder;
        _1679 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_656, _657, _658), _1586);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1691 = ((((1.0 - _677) * ((_664 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_677 * _664)) * _648;
    float _1692 = _1691 * ((cbModelParam._m0[1u].w * (_1675 - _1577)) + _1577);
    float _1693 = _1691 * ((cbModelParam._m0[1u].w * (_1677 - _1579)) + _1579);
    float _1694 = _1691 * ((cbModelParam._m0[1u].w * (_1679 - _1581)) + _1581);
    float _1697 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    uvec4 _1713 = floatBitsToUint(cbInstanceData._m0[_622 + 5u]);
    uint _1715 = _1713.x * 14u;
    uint _1716 = _1715 + 13u;
    float _1721 = _648 + (-1.0);
    float _1724 = (cbLight._m0[_1716].x * _1721) + 1.0;
    float _1725 = (cbLight._m0[_1716].y * _1721) + 1.0;
    uint _1726 = _1715 + 5u;
    float _1732 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1736 = _1715 + 4u;
    float _1742 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1746 = _1715 | 1u;
    float _1757 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_534, _535, _536));
    float _1760 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_534, _535, _536));
    float _3670 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _3681 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1765 = (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.3183098733425140380859375;
    float _1767 = (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * 0.3183098733425140380859375;
    float _1774 = ((cbLight._m0[_1726].x * _1732) * _1767) + ((cbLight._m0[_1736].x * _1742) * _1765);
    float _1775 = ((_1732 * cbLight._m0[_1726].y) * _1767) + ((_1742 * cbLight._m0[_1736].y) * _1765);
    float _1776 = ((_1732 * cbLight._m0[_1726].z) * _1767) + ((_1742 * cbLight._m0[_1736].z) * _1765);
    uint _1778 = _1715 + 8u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1715].w)) * _537) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1715].x + _561;
    float _1794 = cbLight._m0[_1715].y + _562;
    float _1795 = cbLight._m0[_1715].z + _563;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_1715].xyz));
    float _3692 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _1807 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _1808 = dot(vec3(_534, _535, _536), vec3(_1800, _1801, _1802));
    float _3714 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_1800, _1801, _1802));
    float _3725 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1792 * _1792;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1832 = 1.0 - _1792;
    float _1843 = (0.5 / (((_1807 * ((_1806 * _1832) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1832) + _1792) * _1806))) * _1806;
    float _3736 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1845 = (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    uint _1856 = _1715 + 9u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1746].w)) * _537) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1746].x + _561;
    float _1870 = cbLight._m0[_1746].y + _562;
    float _1871 = cbLight._m0[_1746].z + _563;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_1746].xyz));
    float _3747 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _1883 = dot(vec3(_534, _535, _536), vec3(_1876, _1877, _1878));
    float _3758 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_1876, _1877, _1878));
    float _3769 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1891 = _1868 * _1868;
    float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
    float _1904 = (exp2(log2(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1905 = 1.0 - _1868;
    float _1915 = (0.5 / (((_1807 * ((_1882 * _1905) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1905) + _1868) * _1882))) * _1882;
    float _3780 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
    float _1927 = (((_1904 * cbLight._m0[_1856].x) * _1917) * _1732) + (((_1831 * cbLight._m0[_1778].x) * _1845) * _1742);
    float _1928 = (((_1904 * cbLight._m0[_1856].y) * _1917) * _1732) + (((_1831 * cbLight._m0[_1778].y) * _1845) * _1742);
    float _1929 = (((_1904 * cbLight._m0[_1856].z) * _1917) * _1732) + (((_1831 * cbLight._m0[_1778].z) * _1845) * _1742);
    float _2044;
    float _2046;
    float _2048;
    float _2050;
    float _2052;
    float _2054;
    if (_1713.y == 0u)
    {
        float _1984 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1985 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1984;
        float _1986 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1984;
        float _1987 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1984;
        uvec4 _1999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2000 = _1999.x;
        uint _2011 = uint((float(_1999.y) * floor(float(uint(cbSceneParam._m0[85u].y * _584) / _2000))) + floor(float(uint(cbSceneParam._m0[85u].x * _583) / _2000)));
        float _2021 = (log2(_1987 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2022 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        uint _2025 = uint(isnan(14.0) ? _2022 : (isnan(_2022) ? 14.0 : min(_2022, 14.0)));
        uvec4 _2030 = texelFetch(g_lightClusterGridBuffer, int(((_2025 << 2u) + (_2011 << 6u)) >> 2u));
        uint _2031 = _2030.x;
        uint _2032 = _1999.z;
        float _2122;
        float _2124;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        if (((((1u << ((_2032 >> 4u) & 15u)) + 4294967295u) & _2031) == 0u) || ((_2032 & 240u) == 0u))
        {
            _2122 = 0.0;
            _2124 = 0.0;
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
        }
        else
        {
            float _2123;
            float _2125;
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            float _2309 = 0.0;
            float _2310 = 0.0;
            float _2311 = 0.0;
            uint _2312 = 0u;
            uint _2321;
            bool _2322;
            for (;;)
            {
                _2321 = texelFetch(g_lightClassification, int((((_2025 << 5u) + (_2011 << 9u)) + (_2312 << 2u)) >> 2u)).x;
                _2322 = _2321 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2322)
                {
                    frontier_phi_63_pred = _2308;
                    frontier_phi_63_pred_1 = _2311;
                    frontier_phi_63_pred_2 = _2310;
                    frontier_phi_63_pred_3 = _2309;
                    frontier_phi_63_pred_4 = _2307;
                    frontier_phi_63_pred_5 = _2306;
                }
                else
                {
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    uint _2508;
                    _2502 = _2306;
                    _2503 = _2307;
                    _2504 = _2308;
                    _2505 = _2309;
                    _2506 = _2310;
                    _2507 = _2311;
                    _2508 = _2321;
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    for (;;)
                    {
                        uint _2512 = uint(findLSB(_2508)) + (_2312 << 5u);
                        uint _2509 = (_2508 + 4294967295u) & _2508;
                        uint _2514 = _2512 * 48u;
                        vec4 _2528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2514)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 3u)).x));
                        uint _2534 = (_2512 * 48u) + 4u;
                        vec4 _2547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2534)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 3u)).x));
                        uint _2553 = (_2512 * 48u) + 8u;
                        vec3 _2564 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2553)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 2u)).x));
                        float _2568 = _2528.x - _1985;
                        float _2569 = _2528.y - _1986;
                        float _2570 = _2528.z - _1987;
                        float _2571 = dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570));
                        float _2574 = inversesqrt(_2571);
                        float _2575 = _2574 * _2568;
                        float _2576 = _2574 * _2569;
                        float _2577 = _2574 * _2570;
                        float _2578 = dot(vec3(_603, _606, _609), vec3(_2575, _2576, _2577));
                        float _2583 = 1.0 - (_2571 * _2528.w);
                        float _3801 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                        float _2584 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
                        float _2585 = sqrt(_2571) * _2547.w;
                        float _2588 = 1.39999997615814208984375 / (_2585 + 1.39999997615814208984375);
                        float _2589 = _2588 * _2588;
                        float _2592 = ((1.0 - _2589) * _2578) + _2589;
                        float _2595 = _2585 * _2585;
                        float _2599 = ((isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0))) * _2584) / ((_2595 * 0.699999988079071044921875) + 1.0);
                        float _2603 = (-0.0) - _1985;
                        float _2604 = (-0.0) - _1986;
                        float _2605 = (-0.0) - _1987;
                        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
                        float _2610 = _2609 * _2603;
                        float _2611 = _2609 * _2604;
                        float _2612 = _2609 * _2605;
                        float _2620 = exp2(log2(1.0 / ((_2595 * 3.5) + 5.0)) * 0.25);
                        float _2621 = 1.0 - _664;
                        float _2628 = sqrt(1.0 - ((1.0 - (_2621 * _2621)) * (1.0 - (_2620 * _2620))));
                        float _2629 = _2628 * _2628;
                        float _2630 = _2629 * _2629;
                        float _2631 = _2610 + _2575;
                        float _2632 = _2611 + _2576;
                        float _2633 = _2612 + _2577;
                        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
                        float _2641 = dot(vec3(_603, _606, _609), vec3(_2610, _2611, _2612));
                        float _3817 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                        float _2644 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
                        float _2645 = dot(vec3(_603, _606, _609), vec3(_2637 * _2631, _2637 * _2632, _2637 * _2633));
                        float _3828 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                        float _2648 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
                        float _2652 = ((_2648 * _2648) * (_2630 + (-1.0))) + 1.0;
                        float _2653 = _2588 * _2629;
                        float _2654 = _2653 * _2653;
                        float _2657 = ((1.0 - _2654) * _2578) + _2654;
                        float _3839 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2658 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
                        float _2659 = 1.0 - _2629;
                        float _2669 = (0.5 / (((_2658 * ((_2644 * _2659) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _2659) + _2629) * _2644))) * _2658;
                        float _3850 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2680 = (((_2630 * 3.1415927410125732421875) * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) / ((_2652 * _2652) * ((_2595 * 2.1991131305694580078125) + 3.141590118408203125))) * _2584;
                        _2406 = (_2599 * _2547.x) + _2505;
                        _2407 = (_2599 * _2547.y) + _2506;
                        _2408 = (_2599 * _2547.z) + _2507;
                        _2403 = (_2680 * _2564.x) + _2502;
                        _2404 = (_2680 * _2564.y) + _2503;
                        _2405 = (_2680 * _2564.z) + _2504;
                        if (_2509 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2502 = _2403;
                            _2503 = _2404;
                            _2504 = _2405;
                            _2505 = _2406;
                            _2506 = _2407;
                            _2507 = _2408;
                            _2508 = _2509;
                        }
                    }
                    frontier_phi_63_pred = _2405;
                    frontier_phi_63_pred_1 = _2408;
                    frontier_phi_63_pred_2 = _2407;
                    frontier_phi_63_pred_3 = _2406;
                    frontier_phi_63_pred_4 = _2404;
                    frontier_phi_63_pred_5 = _2403;
                }
                _2127 = frontier_phi_63_pred;
                _2133 = frontier_phi_63_pred_1;
                _2131 = frontier_phi_63_pred_2;
                _2129 = frontier_phi_63_pred_3;
                _2125 = frontier_phi_63_pred_4;
                _2123 = frontier_phi_63_pred_5;
                uint _2313 = _2312 + 1u;
                if (_2313 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2306 = _2123;
                    _2307 = _2125;
                    _2308 = _2127;
                    _2309 = _2129;
                    _2310 = _2131;
                    _2311 = _2133;
                    _2312 = _2313;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2122 = _2123;
            _2124 = _2125;
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
        }
        uvec4 _2136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2137 = _2136.z;
        uint _2139 = (_2137 >> 8u) & 15u;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        if (((4294967295u << _2139) & _2031) == 0u)
        {
            _2274 = _2122;
            _2276 = _2124;
            _2278 = _2126;
            _2280 = _2128;
            _2282 = _2130;
            _2284 = _2132;
        }
        else
        {
            float _2299 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
            float _2300 = _2299 * _1985;
            float _2301 = _2299 * _1986;
            float _2302 = _2299 * _1987;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2139 < ((_2137 >> 12u) & 15u))
            {
                float _2275;
                float _2277;
                float _2279;
                float _2281;
                float _2283;
                float _2285;
                float _2485 = _2122;
                float _2486 = _2124;
                float _2487 = _2126;
                float _2488 = _2128;
                float _2489 = _2130;
                float _2490 = _2132;
                uint _2491 = _2139;
                uint _2500;
                bool _2501;
                for (;;)
                {
                    _2500 = texelFetch(g_lightClassification, int((((_2025 << 5u) + (_2011 << 9u)) + (_2491 << 2u)) >> 2u)).x;
                    _2501 = _2500 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2501)
                    {
                        frontier_phi_77_pred = _2490;
                        frontier_phi_77_pred_1 = _2489;
                        frontier_phi_77_pred_2 = _2488;
                        frontier_phi_77_pred_3 = _2487;
                        frontier_phi_77_pred_4 = _2486;
                        frontier_phi_77_pred_5 = _2485;
                    }
                    else
                    {
                        float _2715;
                        float _2716;
                        float _2717;
                        float _2718;
                        float _2719;
                        float _2720;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _2728 = _2485;
                        float _2729 = _2486;
                        float _2730 = _2487;
                        float _2731 = _2488;
                        float _2732 = _2489;
                        float _2733 = _2490;
                        uint _2734 = _2500;
                        uint _2735;
                        vec4 _2760;
                        float _2761;
                        vec4 _2776;
                        vec3 _2788;
                        vec4 _2803;
                        vec4 _2818;
                        float _2864;
                        bool _2865;
                        for (;;)
                        {
                            uint _2745 = ((_2491 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2734));
                            _2735 = (_2734 + 4294967295u) & _2734;
                            uint _2747 = _2745 * 40u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            _2761 = _2760.w;
                            uint _2763 = (_2745 * 40u) + 4u;
                            _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            uint _2778 = (_2745 * 40u) + 8u;
                            _2788 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x));
                            uint _2790 = (_2745 * 40u) + 16u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            uint _2805 = (_2745 * 40u) + 20u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            uint _2820 = (_2745 * 40u) + 24u;
                            vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            uint _2839 = (_2745 * 40u) + 28u;
                            vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            _2864 = fma(_1987, _2852.z, fma(_1986, _2852.y, _2852.x * _1985)) + _2852.w;
                            _2865 = !((fma(_1987, _2833.z, fma(_1986, _2833.y, _2833.x * _1985)) + _2833.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2865)
                            {
                                float _2892 = _2760.x - _1985;
                                float _2893 = _2760.y - _1986;
                                float _2894 = _2760.z - _1987;
                                float _2895 = dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894));
                                float _2898 = inversesqrt(_2895);
                                float _2899 = _2898 * _2892;
                                float _2900 = _2898 * _2893;
                                float _2901 = _2898 * _2894;
                                float _2905 = 1.0 - (_2895 / (_2761 * _2761));
                                float _3861 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                                float _2906 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                                float _2910 = sqrt(_2895) * _2776.w;
                                float _2912 = 1.39999997615814208984375 / (_2910 + 1.39999997615814208984375);
                                float _2913 = _2912 * _2912;
                                float _2916 = ((1.0 - _2913) * dot(vec3(_2899, _2900, _2901), vec3(_603, _606, _609))) + _2913;
                                float _2919 = _2910 * _2910;
                                float _2923 = (fma(_1987, _2803.z, fma(_1986, _2803.y, _2803.x * _1985)) + _2803.w) / _2864;
                                float _2924 = (fma(_1987, _2818.z, fma(_1986, _2818.y, _2818.x * _1985)) + _2818.w) / _2864;
                                float _2928 = 1.0 - dot(vec2(_2923, _2924), vec2(_2923, _2924));
                                float _3877 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                                float _2929 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
                                float _2930 = _2929 * (((isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))) * _2906) / ((_2919 * 0.699999988079071044921875) + 1.0));
                                float _2942 = exp2(log2(1.0 / ((_2919 * 3.5) + 5.0)) * 0.25);
                                float _2943 = 1.0 - _664;
                                float _2950 = sqrt(1.0 - ((1.0 - (_2943 * _2943)) * (1.0 - (_2942 * _2942))));
                                float _2951 = _2950 * _2950;
                                float _2952 = _2951 * _2951;
                                float _2953 = _2899 - _2300;
                                float _2954 = _2900 - _2301;
                                float _2955 = _2901 - _2302;
                                float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
                                float _2963 = dot(vec3(_603, _606, _609), vec3((-0.0) - _2300, (-0.0) - _2301, (-0.0) - _2302));
                                float _3888 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                                float _2966 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                                float _2967 = dot(vec3(_603, _606, _609), vec3(_2959 * _2953, _2959 * _2954, _2959 * _2955));
                                float _3899 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2970 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
                                float _2974 = ((_2970 * _2970) * (_2952 + (-1.0))) + 1.0;
                                float _2975 = _2912 * _2951;
                                float _2976 = _2975 * _2975;
                                float _2982 = ((1.0 - _2976) * dot(vec3(_603, _606, _609), vec3(_2899, _2900, _2901))) + _2976;
                                float _3910 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
                                float _2984 = 1.0 - _2951;
                                float _2994 = (0.5 / (((_2983 * ((_2966 * _2984) + _2951)) + 9.9999999392252902907785028219223e-09) + (((_2983 * _2984) + _2951) * _2966))) * _2983;
                                float _3921 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _3004 = (_2929 * _2906) * (((_2952 * 3.1415927410125732421875) * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) / ((_2974 * _2974) * ((_2919 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2930 * _2776.x;
                                frontier_phi_83_pred_1 = _2930 * _2776.z;
                                frontier_phi_83_pred_2 = _2930 * _2776.y;
                                frontier_phi_83_pred_3 = _3004 * _2788.z;
                                frontier_phi_83_pred_4 = _3004 * _2788.y;
                                frontier_phi_83_pred_5 = _3004 * _2788.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3011 = frontier_phi_83_pred;
                            _3013 = frontier_phi_83_pred_1;
                            _3012 = frontier_phi_83_pred_2;
                            _3010 = frontier_phi_83_pred_3;
                            _3009 = frontier_phi_83_pred_4;
                            _3008 = frontier_phi_83_pred_5;
                            _2718 = _3011 + _2731;
                            _2719 = _3012 + _2732;
                            _2720 = _3013 + _2733;
                            _2715 = _3008 + _2728;
                            _2716 = _3009 + _2729;
                            _2717 = _3010 + _2730;
                            if (_2735 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2728 = _2715;
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2735;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2720;
                        frontier_phi_77_pred_1 = _2719;
                        frontier_phi_77_pred_2 = _2718;
                        frontier_phi_77_pred_3 = _2717;
                        frontier_phi_77_pred_4 = _2716;
                        frontier_phi_77_pred_5 = _2715;
                    }
                    _2285 = frontier_phi_77_pred;
                    _2283 = frontier_phi_77_pred_1;
                    _2281 = frontier_phi_77_pred_2;
                    _2279 = frontier_phi_77_pred_3;
                    _2277 = frontier_phi_77_pred_4;
                    _2275 = frontier_phi_77_pred_5;
                    uint _2492 = _2491 + 1u;
                    if (_2492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2485 = _2275;
                        _2486 = _2277;
                        _2487 = _2279;
                        _2488 = _2281;
                        _2489 = _2283;
                        _2490 = _2285;
                        _2491 = _2492;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2277;
                frontier_phi_52_53_ladder_1 = _2285;
                frontier_phi_52_53_ladder_2 = _2283;
                frontier_phi_52_53_ladder_3 = _2281;
                frontier_phi_52_53_ladder_4 = _2279;
                frontier_phi_52_53_ladder_5 = _2275;
            }
            else
            {
                frontier_phi_52_53_ladder = _2124;
                frontier_phi_52_53_ladder_1 = _2132;
                frontier_phi_52_53_ladder_2 = _2130;
                frontier_phi_52_53_ladder_3 = _2128;
                frontier_phi_52_53_ladder_4 = _2126;
                frontier_phi_52_53_ladder_5 = _2122;
            }
            _2274 = frontier_phi_52_53_ladder_5;
            _2276 = frontier_phi_52_53_ladder;
            _2278 = frontier_phi_52_53_ladder_4;
            _2280 = frontier_phi_52_53_ladder_3;
            _2282 = frontier_phi_52_53_ladder_2;
            _2284 = frontier_phi_52_53_ladder_1;
        }
        float _2289 = isnan(1.0) ? _648 : (isnan(_648) ? 1.0 : min(_648, 1.0));
        _2044 = (_2289 * _2280) + _1774;
        _2046 = (_2289 * _2282) + _1775;
        _2048 = (_2289 * _2284) + _1776;
        _2050 = ((_2274 * 0.039999999105930328369140625) * _2289) + _1927;
        _2052 = ((_2276 * 0.039999999105930328369140625) * _2289) + _1928;
        _2054 = ((_2278 * 0.039999999105930328369140625) * _2289) + _1929;
    }
    else
    {
        _2044 = _1774;
        _2046 = _1775;
        _2048 = _1776;
        _2050 = _1927;
        _2052 = _1928;
        _2054 = _1929;
    }
    float _3937 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3948 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3959 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _2071 = ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_2044 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _648))) + ((_2050 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2072 = ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_2046 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _648))) + ((_2052 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2073 = ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_2048 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _648))) + ((_2054 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2074 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2075 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    uint _2077 = _622 + 6u;
    float _2085 = _583 / cbSceneParam._m0[86u].x;
    float _2086 = _584 / cbSceneParam._m0[86u].y;
    vec4 _2100 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2085, _2086, (log2((isnan(cbSceneParam._m0[77u].w) ? _556 : (isnan(_556) ? cbSceneParam._m0[77u].w : min(_556, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2102 = _2100.x;
    float _2103 = _2100.y;
    float _2104 = _2100.z;
    float _2105 = _2100.w;
    float _2185;
    float _2187;
    float _2189;
    float _2191;
    if (_556 > cbSceneParam._m0[78u].w)
    {
        float _2147 = isnan(_556) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _556 : min(cbSceneParam._m0[80u].w, _556));
        float _2148 = _2147 / _556;
        float _2159 = _2148 * _261;
        float _2160 = _262 * _2148;
        float _2161 = (-0.0) - _2160;
        float _2162 = _2148 * _263;
        float _2164 = (cbSceneParam._m0[77u].w * _2161) / _2147;
        float _2165 = _2164 + cbSceneParam._m0[79u].w;
        float _2166 = cbSceneParam._m0[79u].w - _2160;
        float _2172 = sqrt(((_2159 * _2159) + (_2160 * _2160)) + (_2162 * _2162));
        float _2175 = (1.0 - (cbSceneParam._m0[77u].w / _2147)) * _2172;
        float _2181 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2183 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2416;
        if (abs((_2161 - _2164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2416 = ((((_2165 > 0.0) ? exp2(_2181 * _2165) : (2.0 - exp2(_2183 * _2165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2175;
        }
        else
        {
            float _2335 = 1.0 / cbSceneParam._m0[80u].x;
            float _2336 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : max(_2165, _2166));
            float _2337 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : min(_2165, _2166));
            float _2346 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : min(_2336, 0.0));
            float _2347 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : min(_2337, 0.0));
            _2416 = ((abs(_2172 / _2161) * cbSceneParam._m0[80u].y) * ((((_2346 - _2347) * 2.0) - ((exp2(_2181 * (isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0)))) - exp2(_2181 * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0))))) * _2335)) - ((exp2(_2183 * _2346) - exp2(_2183 * _2347)) * _2335))) + (_2175 * cbSceneParam._m0[80u].z);
        }
        vec4 _2418 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2085, _2086, 1.0), 0.0);
        float _2427 = exp2((_2416 * (-1.44269502162933349609375)) * (1.0 - _2418.w));
        float _2428 = log2(_2427);
        float _2444 = log2(_2105);
        _2185 = (exp2(_2444 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2428 * cbSceneParam._m0[78u].x)) * _2418.x) / cbSceneParam._m0[78u].x)) + _2102;
        _2187 = (exp2(_2444 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2428 * cbSceneParam._m0[78u].y)) * _2418.y) / cbSceneParam._m0[78u].y)) + _2103;
        _2189 = (exp2(_2444 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2428 * cbSceneParam._m0[78u].z)) * _2418.z) / cbSceneParam._m0[78u].z)) + _2104;
        _2191 = _2427 * _2105;
    }
    else
    {
        _2185 = _2102;
        _2187 = _2103;
        _2189 = _2104;
        _2191 = _2105;
    }
    bool _2454;
    vec4 _2201;
    vec4 _2223;
    float _2225;
    float _2229;
    float _2230;
    float _2231;
    float _2232;
    bool _2242;
    for (;;)
    {
        _2201 = cbMatDynParam._m0[0u];
        float _2203 = roundEven(_2201.y);
        bool _2204 = _2203 == 3.0;
        float _2205 = log2(_2191);
        float _2212 = exp2(_2205 * cbSceneParam._m0[78u].x) * _2074;
        float _2213 = exp2(_2205 * cbSceneParam._m0[78u].y) * _2075;
        float _2214 = exp2(_2205 * cbSceneParam._m0[78u].z) * _2076;
        float _2221 = _570 + (-0.5);
        _2223 = cbMtdParam._m0[1u];
        _2225 = _2223.y * _2221;
        float _2228 = (_2203 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2229 = _2228 * (_2204 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2185)));
        _2230 = _2228 * (_2204 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2187)));
        _2231 = _2228 * (_2204 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2189)));
        _2232 = _2221 * 0.999000012874603271484375;
        _2242 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2242)
        {
            if ((cbInstanceData._m0[_622 + 7u].x + _2232) < 0.5)
            {
                _2454 = true;
                break;
            }
        }
        uint _2370 = _624 + uint(_2201.w);
        if ((cbInstanceData._m0[_2370].w < 1.0) && ((cbInstanceData._m0[_2370].w + _2232) < 0.5))
        {
            _2454 = true;
            break;
        }
        if ((_2225 + 1.0) < _2223.x)
        {
            _2454 = true;
            break;
        }
        _2454 = false;
        break;
    }
    float _2685;
    if (_2454)
    {
        discard_state = true;
        _2685 = 0.0;
    }
    else
    {
        _2685 = cbInstanceData._m0[_2077].w;
    }
    SV_Target.x = _2229;
    SV_Target.y = _2230;
    SV_Target.z = _2231;
    SV_Target.w = _2685;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2077].w;
    discard_exit();
}


