#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1260;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _391 = (_387 * _381) + (_355 * cbMtdParam._m0[20u].y);
    float _392 = (_387 * _382) + (_356 * cbMtdParam._m0[20u].z);
    float _393 = _391 * cbMtdParam._m0[19u].x;
    float _394 = _392 * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    bool _412 = _390 > 0.0;
    float _414 = _412 ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _421 = _395 + (-0.5);
    float _424 = _396 + (-0.5);
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_421 + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_424 + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _468 = (_454 - (_454 * _288)) * cbMtdParam._m0[9u].x;
    float _469 = (_455 - (_455 * _288)) * cbMtdParam._m0[9u].y;
    float _470 = cbMtdParam._m0[9u].z * (_456 - (_456 * _288));
    float _488 = _391 * cbMtdParam._m0[21u].x;
    float _489 = _392 * cbMtdParam._m0[20u].w;
    bool _490 = _488 > 0.0;
    float _495;
    if (_490)
    {
        _495 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _495 = frontier_phi_11_10_ladder;
    }
    bool _497 = _489 > 0.0;
    float _502;
    if (_497)
    {
        _502 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _502 = frontier_phi_15_14_ladder;
    }
    float _505 = _412 ? (cbMtdParam._m0[16u].z / _390) : 5000.0;
    float _506 = isnan(_502) ? _495 : (isnan(_495) ? _502 : min(_495, _502));
    float _507 = isnan(_505) ? _506 : (isnan(_506) ? _505 : min(_506, _505));
    float _511 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _515 = ((_507 * _390) + _511) / _511;
    float _520 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _522 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _538 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_507 * _488)) / _515) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_507 * _489)) / _515) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _543 = _538.x * cbMtdParam._m0[10u].x;
    float _544 = _538.y * cbMtdParam._m0[10u].y;
    float _545 = _538.z * cbMtdParam._m0[10u].z;
    float _553;
    if (_490)
    {
        _553 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _553 = frontier_phi_19_18_ladder;
    }
    float _559;
    if (_497)
    {
        _559 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _559 = frontier_phi_23_22_ladder;
    }
    float _561 = isnan(_559) ? _553 : (isnan(_553) ? _559 : min(_553, _559));
    float _562 = isnan(_505) ? _561 : (isnan(_561) ? _505 : min(_561, _505));
    float _569 = ((_562 * _390) + _511) / _511;
    vec4 _583 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_562 * _488)) / _569) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_562 * _489)) / _569) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _585 = _583.w;
    float _587 = _585 - (_585 * _288);
    float _597 = (_587 * ((_543 - _468) - (_543 * _288))) + _468;
    float _598 = (_587 * ((_544 - _469) - (_544 * _288))) + _469;
    float _599 = (_587 * ((_545 - _470) - (_545 * _288))) + _470;
    float _613 = _391 * cbMtdParam._m0[21u].z;
    float _614 = _392 * cbMtdParam._m0[21u].y;
    bool _615 = _613 > 0.0;
    float _620;
    if (_615)
    {
        _620 = (1.0 - _395) / _613;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_613 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _395) / _613;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _620 = frontier_phi_27_26_ladder;
    }
    bool _622 = _614 > 0.0;
    float _627;
    if (_622)
    {
        _627 = (1.0 - _396) / _614;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_614 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _396) / _614;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _627 = frontier_phi_31_30_ladder;
    }
    float _630 = _412 ? (cbMtdParam._m0[18u].x / _390) : 5000.0;
    float _631 = isnan(_627) ? _620 : (isnan(_620) ? _627 : min(_620, _627));
    float _632 = isnan(_630) ? _631 : (isnan(_631) ? _630 : min(_631, _630));
    float _636 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _640 = ((_632 * _390) + _636) / _636;
    float _645 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _647 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _664 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_421 + (_632 * _613)) / _640) + 0.5) + _645) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_424 + (_632 * _614)) / _640) + 0.5) + _647) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _669 = _664.x * cbMtdParam._m0[14u].x;
    float _670 = _664.y * cbMtdParam._m0[14u].y;
    float _671 = _664.z * cbMtdParam._m0[14u].z;
    float _679;
    if (_615)
    {
        _679 = (1.0 - _395) / _613;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_613 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _395) / _613;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _679 = frontier_phi_35_34_ladder;
    }
    float _685;
    if (_622)
    {
        _685 = (1.0 - _396) / _614;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_614 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _396) / _614;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _685 = frontier_phi_39_38_ladder;
    }
    float _687 = isnan(_685) ? _679 : (isnan(_679) ? _685 : min(_679, _685));
    float _688 = isnan(_630) ? _687 : (isnan(_687) ? _630 : min(_687, _630));
    float _695 = ((_688 * _390) + _636) / _636;
    vec4 _709 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_421 + (_688 * _613)) / _695) + 0.5) + _645) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_424 + (_688 * _614)) / _695) + 0.5) + _647) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _711 = _709.w;
    float _713 = _711 - (_711 * _288);
    float _724 = 0.5 - (_288 * 0.5);
    float _734 = (((_597 - _301) + (_713 * ((_669 - _597) - (_669 * _288)))) * _724) + _301;
    float _735 = (((_598 - _303) + (_713 * ((_670 - _598) - (_670 * _288)))) * _724) + _303;
    float _736 = (((_599 - _305) + (_713 * ((_671 - _599) - (_671 * _288)))) * _724) + _305;
    vec4 _748 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _752 = _748.z;
    float _755 = (_748.x * 2.0) + (-1.0);
    float _756 = (_748.y * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _3414 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _762 = sqrt(1.0 - (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))));
    float _763 = _752 * _288;
    float _770 = (cbMtdParam._m0[15u].w * ((_327 - _763) + ((_752 - _327) * _288))) + _763;
    float _774 = (cbMtdParam._m0[16u].x * _355) + _755;
    float _775 = (cbMtdParam._m0[16u].x * _356) + _756;
    float _778 = fma(_762, _197, fma(_775, _204, _774 * _190));
    float _781 = fma(_762, _198, fma(_775, _205, _774 * _191));
    float _784 = fma(_762, _199, fma(_775, _206, _774 * _192));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _3425 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _792 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _3447 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _3458 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _811 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _815 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _816 = _261 * _815;
    float _817 = _262 * _815;
    float _818 = _263 * _815;
    float _824 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _825 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _844 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _847 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _850 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    uint _863 = uint(roundEven(NORMAL.w)) * 13u;
    uint _866 = (_863 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _872 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_866].x;
    float _873 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * cbInstanceData._m0[_866].y;
    float _874 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * cbInstanceData._m0[_866].z;
    float _3469 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    vec4 _886 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _824, cbSceneParam._m0[86u].y * _825));
    float _889 = _886.x * TEXCOORD.z;
    float _890 = dot(vec3(_789, _790, _791), vec3(_816, _817, _818));
    float _893 = _890 * 2.0;
    float _897 = (_893 * _789) - _816;
    float _898 = (_893 * _790) - _817;
    float _899 = (_893 * _791) - _818;
    float _903 = abs(dot(vec3(_816, _817, _818), vec3(_789, _790, _791)));
    float _3502 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _905 = sqrt(_792);
    float _918 = exp2((_905 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_905 * 3.0));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _986 = fma(_958, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950));
        float _990 = fma(_958, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950));
        float _994 = fma(_958, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950));
        float _1017 = _950 + _789;
        float _1018 = _954 + _790;
        float _1019 = _958 + _791;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _986;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _990;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _994;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_986 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_990 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_994 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_789, _790, _791), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3550 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_789, _790, _791), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3583 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_789, _790, _791), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3616 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1300 = fma(_958, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950));
        float _1304 = fma(_958, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950));
        float _1308 = fma(_958, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950));
        float _1331 = _950 + _789;
        float _1332 = _954 + _790;
        float _1333 = _958 + _791;
        float _1343 = fma(_1333, cbModelParam._m0[30u].z, fma(_1332, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1331)) - _1300;
        float _1344 = fma(_1333, cbModelParam._m0[31u].z, fma(_1332, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1331)) - _1304;
        float _1345 = fma(_1333, cbModelParam._m0[32u].z, fma(_1332, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1331)) - _1308;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1300 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1304 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[35u].z) + ((((((_1308 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1399 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1366.x + (-0.5));
        float _1401 = _1399 * (_1366.y + (-0.5));
        float _1402 = _1399 * (_1366.z + (-0.5));
        float _1409 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1373.x + (-0.5));
        float _1411 = _1409 * (_1373.y + (-0.5));
        float _1412 = _1409 * (_1373.z + (-0.5));
        float _1419 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1380.x + (-0.5));
        float _1421 = _1419 * (_1380.y + (-0.5));
        float _1422 = _1419 * (_1380.z + (-0.5));
        float _1429 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1387.x + (-0.5));
        float _1431 = _1429 * (_1387.y + (-0.5));
        float _1432 = _1429 * (_1387.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_789, _790, _791), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3679 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1463 + 1.0))) + _1468) * _1433;
        float _1478 = _1401 * 0.5;
        float _1479 = _1411 * 0.5;
        float _1480 = _1421 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_789, _790, _791), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _3712 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1505 + 1.0))) + _1510) * _1434;
        float _1520 = _1402 * 0.5;
        float _1521 = _1412 * 0.5;
        float _1522 = _1422 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_789, _790, _791), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _3745 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1547 + 1.0))) + _1552) * _1435;
        _1569 = _1402;
        _1570 = _1401;
        _1571 = _1400;
        _1572 = _1412;
        _1573 = _1411;
        _1574 = _1410;
        _1575 = _1422;
        _1576 = _1421;
        _1577 = _1420;
        _1578 = _1435;
        _1579 = _1434;
        _1580 = _1433;
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1260;
        _1570 = _1260;
        _1571 = _1260;
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = _1260;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1272)) + _1272;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1273)) + _1273;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1274)) + _1274;
    float _1616 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1593));
    float _1637 = _897 * 0.5;
    float _1638 = _898 * 0.5;
    float _1639 = _899 * 0.5;
    float _1640 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1643 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1646 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1680;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1653 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1657 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1661 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1668 = dot(vec4(cbModelParam._m0[39u]), vec4(_1637, _1638, _1639, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1691;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1682 = dot(vec4(cbModelParam._m0[40u]), vec4(_1637, _1638, _1639, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1695 = (_1691 * cbModelParam._m0[1u].x) + (_1680 * (1.0 - cbModelParam._m0[1u].x));
    float _1705 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1705 : min(cbModelParam._m0[25u].z, _1705));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1753 = fma(_958, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950)) + cbModelParam._m0[13u].w;
        float _1757 = fma(_958, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950)) + cbModelParam._m0[14u].w;
        float _1761 = fma(_958, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950)) + cbModelParam._m0[15u].w;
        float _1764 = fma(_899, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897));
        float _1767 = fma(_899, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897));
        float _1770 = fma(_899, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897));
        float _1798;
        if (_1764 > 0.0)
        {
            _1798 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1798 = frontier_phi_54_52_ladder;
        }
        float _2143;
        if (_1767 > 0.0)
        {
            _2143 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2143 = frontier_phi_63_59_ladder;
        }
        float _2443;
        if (_1770 > 0.0)
        {
            _2443 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2443 = frontier_phi_77_70_ladder;
        }
        float _2445 = isnan(_2143) ? _1798 : (isnan(_1798) ? _2143 : min(_1798, _2143));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1764) + _1753;
        float _2451 = (_2446 * _1767) + _1757;
        float _2452 = (_2446 * _1770) + _1761;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2453;
        float _2456 = _2453 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2452 > _2456) || ((_2452 < _2454) || ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 < _2454) || (_2450 > _2456))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2452, cbModelParam._m0[9u].z, fma(_2451, cbModelParam._m0[9u].y, _2450 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2452, cbModelParam._m0[10u].z, fma(_2451, cbModelParam._m0[10u].y, _2450 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2452, cbModelParam._m0[11u].z, fma(_2451, cbModelParam._m0[11u].y, _2450 * cbModelParam._m0[11u].x))), _1706);
            frontier_phi_53_77_ladder = _2578.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2578.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2578.z * cbModelParam._m0[1u].y;
        }
        _1786 = frontier_phi_53_77_ladder;
        _1788 = frontier_phi_53_77_ladder_1;
        _1790 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_897, _898, _899), _1706);
        _1786 = _1774.x * cbModelParam._m0[1u].y;
        _1788 = _1774.y * cbModelParam._m0[1u].y;
        _1790 = _1774.z * cbModelParam._m0[1u].y;
    }
    float _1794 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1794 : min(cbModelParam._m0[25u].w, _1794));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1847 = fma(_958, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950)) + cbModelParam._m0[21u].w;
        float _1851 = fma(_958, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950)) + cbModelParam._m0[22u].w;
        float _1855 = fma(_958, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950)) + cbModelParam._m0[23u].w;
        float _1858 = fma(_899, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897));
        float _1861 = fma(_899, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897));
        float _1864 = fma(_899, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897));
        float _2148;
        if (_1858 > 0.0)
        {
            _2148 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2148 = frontier_phi_65_61_ladder;
        }
        float _2469;
        if (_1861 > 0.0)
        {
            _2469 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2469 = frontier_phi_79_72_ladder;
        }
        float _2638;
        if (_1864 > 0.0)
        {
            _2638 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2638 = frontier_phi_93_88_ladder;
        }
        float _2640 = isnan(_2469) ? _2148 : (isnan(_2148) ? _2469 : min(_2148, _2469));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _1858) + _1847;
        float _2646 = (_2641 * _1861) + _1851;
        float _2647 = (_2641 * _1864) + _1855;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2648;
        float _2651 = _2648 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2647 > _2651) || ((_2647 < _2649) || ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 < _2649) || (_2645 > _2651))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2647, cbModelParam._m0[17u].z, fma(_2646, cbModelParam._m0[17u].y, _2645 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2647, cbModelParam._m0[18u].z, fma(_2646, cbModelParam._m0[18u].y, _2645 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2647, cbModelParam._m0[19u].z, fma(_2646, cbModelParam._m0[19u].y, _2645 * cbModelParam._m0[19u].x))), _1795);
            frontier_phi_62_93_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _1883 = frontier_phi_62_93_ladder_2;
        _1885 = frontier_phi_62_93_ladder_1;
        _1887 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_897, _898, _899), _1795);
        _1883 = _1867.x * cbModelParam._m0[1u].z;
        _1885 = _1867.y * cbModelParam._m0[1u].z;
        _1887 = _1867.z * cbModelParam._m0[1u].z;
    }
    float _1899 = ((((1.0 - _918) * ((_905 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_918 * _905)) * _889;
    float _1900 = _1899 * ((cbModelParam._m0[1u].w * (_1883 - _1786)) + _1786);
    float _1901 = _1899 * ((cbModelParam._m0[1u].w * (_1885 - _1788)) + _1788);
    float _1902 = _1899 * ((cbModelParam._m0[1u].w * (_1887 - _1790)) + _1790);
    float _1905 = fma(_1902, cbSceneParam._m0[89u].z, fma(_1901, cbSceneParam._m0[89u].y, _1900 * cbSceneParam._m0[89u].x));
    float _1908 = fma(_1902, cbSceneParam._m0[90u].z, fma(_1901, cbSceneParam._m0[90u].y, _1900 * cbSceneParam._m0[90u].x));
    float _1911 = fma(_1902, cbSceneParam._m0[91u].z, fma(_1901, cbSceneParam._m0[91u].y, _1900 * cbSceneParam._m0[91u].x));
    uvec4 _1921 = floatBitsToUint(cbInstanceData._m0[_863 + 5u]);
    uint _1923 = _1921.x * 14u;
    uint _1924 = _1923 + 13u;
    float _1929 = _889 + (-1.0);
    float _1932 = (cbLight._m0[_1924].x * _1929) + 1.0;
    float _1933 = (cbLight._m0[_1924].y * _1929) + 1.0;
    uint _1934 = _1923 + 5u;
    float _1940 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1944 = _1923 + 4u;
    float _1950 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1954 = _1923 | 1u;
    float _1965 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_789, _790, _791));
    float _1968 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_789, _790, _791));
    float _3881 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _3892 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1973 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.3183098733425140380859375;
    float _1975 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1982 = ((cbLight._m0[_1934].x * _1940) * _1975) + ((cbLight._m0[_1944].x * _1950) * _1973);
    float _1983 = ((_1940 * cbLight._m0[_1934].y) * _1975) + ((_1950 * cbLight._m0[_1944].y) * _1973);
    float _1984 = ((_1940 * cbLight._m0[_1934].z) * _1975) + ((_1950 * cbLight._m0[_1944].z) * _1973);
    uint _1986 = _1923 + 8u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _792) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1923].x + _816;
    float _2002 = cbLight._m0[_1923].y + _817;
    float _2003 = cbLight._m0[_1923].z + _818;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_1923].xyz));
    float _3903 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2015 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _2016 = dot(vec3(_789, _790, _791), vec3(_2008, _2009, _2010));
    float _3925 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2008, _2009, _2010));
    float _3936 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2000 * _2000;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2040 = 1.0 - _2000;
    float _2051 = (0.5 / (((_2015 * ((_2014 * _2040) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2040) + _2000) * _2014))) * _2014;
    float _3947 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    uint _2064 = _1923 + 9u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _792) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1954].x + _816;
    float _2078 = cbLight._m0[_1954].y + _817;
    float _2079 = cbLight._m0[_1954].z + _818;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_1954].xyz));
    float _3958 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _2091 = dot(vec3(_789, _790, _791), vec3(_2084, _2085, _2086));
    float _3969 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2084, _2085, _2086));
    float _3980 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2076 * _2076;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2113 = 1.0 - _2076;
    float _2123 = (0.5 / (((_2015 * ((_2090 * _2113) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2113) + _2076) * _2090))) * _2090;
    float _3991 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    float _2135 = (((_2112 * cbLight._m0[_2064].x) * _2125) * _1940) + (((_2039 * cbLight._m0[_1986].x) * _2053) * _1950);
    float _2136 = (((_2112 * cbLight._m0[_2064].y) * _2125) * _1940) + (((_2039 * cbLight._m0[_1986].y) * _2053) * _1950);
    float _2137 = (((_2112 * cbLight._m0[_2064].z) * _2125) * _1940) + (((_2039 * cbLight._m0[_1986].z) * _2053) * _1950);
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    if (_1921.y == 0u)
    {
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2192;
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2192;
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2192;
        uvec4 _2207 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2208 = _2207.x;
        uint _2219 = uint((float(_2207.y) * floor(float(uint(cbSceneParam._m0[85u].y * _825) / _2208))) + floor(float(uint(cbSceneParam._m0[85u].x * _824) / _2208)));
        float _2229 = (log2(_2195 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2230 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        uint _2233 = uint(isnan(14.0) ? _2230 : (isnan(_2230) ? 14.0 : min(_2230, 14.0)));
        uvec4 _2238 = texelFetch(g_lightClusterGridBuffer, int(((_2233 << 2u) + (_2219 << 6u)) >> 2u));
        uint _2239 = _2238.x;
        uint _2240 = _2207.z;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        if (((((1u << ((_2240 >> 4u) & 15u)) + 4294967295u) & _2239) == 0u) || ((_2240 & 240u) == 0u))
        {
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
        }
        else
        {
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            uint _2512 = 0u;
            uint _2521;
            bool _2522;
            for (;;)
            {
                _2521 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2512 << 2u)) >> 2u)).x;
                _2522 = _2521 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2522)
                {
                    frontier_phi_90_pred = _2511;
                    frontier_phi_90_pred_1 = _2506;
                    frontier_phi_90_pred_2 = _2507;
                    frontier_phi_90_pred_3 = _2508;
                    frontier_phi_90_pred_4 = _2509;
                    frontier_phi_90_pred_5 = _2510;
                }
                else
                {
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    uint _2687;
                    _2681 = _2506;
                    _2682 = _2507;
                    _2683 = _2508;
                    _2684 = _2509;
                    _2685 = _2510;
                    _2686 = _2511;
                    _2687 = _2521;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    for (;;)
                    {
                        uint _2691 = uint(findLSB(_2687)) + (_2512 << 5u);
                        uint _2688 = (_2687 + 4294967295u) & _2687;
                        uint _2693 = _2691 * 48u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2713 = (_2691 * 48u) + 4u;
                        vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2732 = (_2691 * 48u) + 8u;
                        vec3 _2743 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x));
                        float _2747 = _2707.x - _2193;
                        float _2748 = _2707.y - _2194;
                        float _2749 = _2707.z - _2195;
                        float _2750 = dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749));
                        float _2753 = inversesqrt(_2750);
                        float _2754 = _2753 * _2747;
                        float _2755 = _2753 * _2748;
                        float _2756 = _2753 * _2749;
                        float _2757 = dot(vec3(_844, _847, _850), vec3(_2754, _2755, _2756));
                        float _2762 = 1.0 - (_2750 * _2707.w);
                        float _4012 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2763 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2764 = sqrt(_2750) * _2726.w;
                        float _2767 = 1.39999997615814208984375 / (_2764 + 1.39999997615814208984375);
                        float _2768 = _2767 * _2767;
                        float _2771 = ((1.0 - _2768) * _2757) + _2768;
                        float _2774 = _2764 * _2764;
                        float _2778 = ((isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0))) * _2763) / ((_2774 * 0.699999988079071044921875) + 1.0);
                        float _2782 = (-0.0) - _2193;
                        float _2783 = (-0.0) - _2194;
                        float _2784 = (-0.0) - _2195;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2799 = exp2(log2(1.0 / ((_2774 * 3.5) + 5.0)) * 0.25);
                        float _2800 = 1.0 - _905;
                        float _2807 = sqrt(1.0 - ((1.0 - (_2800 * _2800)) * (1.0 - (_2799 * _2799))));
                        float _2808 = _2807 * _2807;
                        float _2809 = _2808 * _2808;
                        float _2810 = _2789 + _2754;
                        float _2811 = _2790 + _2755;
                        float _2812 = _2791 + _2756;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2820 = dot(vec3(_844, _847, _850), vec3(_2789, _2790, _2791));
                        float _4028 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2823 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2824 = dot(vec3(_844, _847, _850), vec3(_2816 * _2810, _2816 * _2811, _2816 * _2812));
                        float _4039 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2827 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2831 = ((_2827 * _2827) * (_2809 + (-1.0))) + 1.0;
                        float _2832 = _2767 * _2808;
                        float _2833 = _2832 * _2832;
                        float _2836 = ((1.0 - _2833) * _2757) + _2833;
                        float _4050 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2838 = 1.0 - _2808;
                        float _2848 = (0.5 / (((_2837 * ((_2823 * _2838) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2837 * _2838) + _2808) * _2823))) * _2837;
                        float _4061 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2859 = (((_2809 * 3.1415927410125732421875) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) / ((_2831 * _2831) * ((_2774 * 2.1991131305694580078125) + 3.141590118408203125))) * _2763;
                        _2590 = (_2778 * _2726.x) + _2684;
                        _2591 = (_2778 * _2726.y) + _2685;
                        _2592 = (_2778 * _2726.z) + _2686;
                        _2587 = (_2859 * _2743.x) + _2681;
                        _2588 = (_2859 * _2743.y) + _2682;
                        _2589 = (_2859 * _2743.z) + _2683;
                        if (_2688 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2681 = _2587;
                            _2682 = _2588;
                            _2683 = _2589;
                            _2684 = _2590;
                            _2685 = _2591;
                            _2686 = _2592;
                            _2687 = _2688;
                        }
                    }
                    frontier_phi_90_pred = _2592;
                    frontier_phi_90_pred_1 = _2587;
                    frontier_phi_90_pred_2 = _2588;
                    frontier_phi_90_pred_3 = _2589;
                    frontier_phi_90_pred_4 = _2590;
                    frontier_phi_90_pred_5 = _2591;
                }
                _2341 = frontier_phi_90_pred;
                _2331 = frontier_phi_90_pred_1;
                _2333 = frontier_phi_90_pred_2;
                _2335 = frontier_phi_90_pred_3;
                _2337 = frontier_phi_90_pred_4;
                _2339 = frontier_phi_90_pred_5;
                uint _2513 = _2512 + 1u;
                if (_2513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2506 = _2331;
                    _2507 = _2333;
                    _2508 = _2335;
                    _2509 = _2337;
                    _2510 = _2339;
                    _2511 = _2341;
                    _2512 = _2513;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
        }
        uvec4 _2344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2345 = _2344.z;
        uint _2347 = (_2345 >> 8u) & 15u;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        if (((4294967295u << _2347) & _2239) == 0u)
        {
            _2474 = _2330;
            _2476 = _2332;
            _2478 = _2334;
            _2480 = _2336;
            _2482 = _2338;
            _2484 = _2340;
        }
        else
        {
            float _2499 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
            float _2500 = _2499 * _2193;
            float _2501 = _2499 * _2194;
            float _2502 = _2499 * _2195;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2347 < ((_2345 >> 12u) & 15u))
            {
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2664 = _2330;
                float _2665 = _2332;
                float _2666 = _2334;
                float _2667 = _2336;
                float _2668 = _2338;
                float _2669 = _2340;
                uint _2670 = _2347;
                uint _2679;
                bool _2680;
                for (;;)
                {
                    _2679 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                    _2680 = _2679 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2680)
                    {
                        frontier_phi_99_pred = _2667;
                        frontier_phi_99_pred_1 = _2666;
                        frontier_phi_99_pred_2 = _2665;
                        frontier_phi_99_pred_3 = _2664;
                        frontier_phi_99_pred_4 = _2669;
                        frontier_phi_99_pred_5 = _2668;
                    }
                    else
                    {
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _2898 = _2664;
                        float _2899 = _2665;
                        float _2900 = _2666;
                        float _2901 = _2667;
                        float _2902 = _2668;
                        float _2903 = _2669;
                        uint _2904 = _2679;
                        uint _2905;
                        vec4 _2930;
                        float _2931;
                        vec4 _2946;
                        vec3 _2958;
                        vec4 _2973;
                        vec4 _2988;
                        float _3034;
                        bool _3035;
                        for (;;)
                        {
                            uint _2915 = ((_2670 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2904));
                            _2905 = (_2904 + 4294967295u) & _2904;
                            uint _2917 = _2915 * 40u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            _2931 = _2930.w;
                            uint _2933 = (_2915 * 40u) + 4u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2948 = (_2915 * 40u) + 8u;
                            _2958 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x));
                            uint _2960 = (_2915 * 40u) + 16u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2975 = (_2915 * 40u) + 20u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2990 = (_2915 * 40u) + 24u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3009 = (_2915 * 40u) + 28u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3034 = fma(_2195, _3022.z, fma(_2194, _3022.y, _3022.x * _2193)) + _3022.w;
                            _3035 = !((fma(_2195, _3003.z, fma(_2194, _3003.y, _3003.x * _2193)) + _3003.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3035)
                            {
                                float _3062 = _2930.x - _2193;
                                float _3063 = _2930.y - _2194;
                                float _3064 = _2930.z - _2195;
                                float _3065 = dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064));
                                float _3068 = inversesqrt(_3065);
                                float _3069 = _3068 * _3062;
                                float _3070 = _3068 * _3063;
                                float _3071 = _3068 * _3064;
                                float _3075 = 1.0 - (_3065 / (_2931 * _2931));
                                float _4072 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3080 = sqrt(_3065) * _2946.w;
                                float _3082 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                                float _3083 = _3082 * _3082;
                                float _3086 = ((1.0 - _3083) * dot(vec3(_3069, _3070, _3071), vec3(_844, _847, _850))) + _3083;
                                float _3089 = _3080 * _3080;
                                float _3093 = (fma(_2195, _2973.z, fma(_2194, _2973.y, _2973.x * _2193)) + _2973.w) / _3034;
                                float _3094 = (fma(_2195, _2988.z, fma(_2194, _2988.y, _2988.x * _2193)) + _2988.w) / _3034;
                                float _3098 = 1.0 - dot(vec2(_3093, _3094), vec2(_3093, _3094));
                                float _4088 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3100 = _3099 * (((isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))) * _3076) / ((_3089 * 0.699999988079071044921875) + 1.0));
                                float _3112 = exp2(log2(1.0 / ((_3089 * 3.5) + 5.0)) * 0.25);
                                float _3113 = 1.0 - _905;
                                float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                                float _3121 = _3120 * _3120;
                                float _3122 = _3121 * _3121;
                                float _3123 = _3069 - _2500;
                                float _3124 = _3070 - _2501;
                                float _3125 = _3071 - _2502;
                                float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                                float _3133 = dot(vec3(_844, _847, _850), vec3((-0.0) - _2500, (-0.0) - _2501, (-0.0) - _2502));
                                float _4099 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3136 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3137 = dot(vec3(_844, _847, _850), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                                float _4110 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3140 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                                float _3145 = _3082 * _3121;
                                float _3146 = _3145 * _3145;
                                float _3152 = ((1.0 - _3146) * dot(vec3(_844, _847, _850), vec3(_3069, _3070, _3071))) + _3146;
                                float _4121 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3154 = 1.0 - _3121;
                                float _3164 = (0.5 / (((_3153 * ((_3136 * _3154) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3121) * _3136))) * _3153;
                                float _4132 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3174 = (_3099 * _3076) * (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) / ((_3144 * _3144) * ((_3089 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3100 * _2946.z;
                                frontier_phi_105_pred_1 = _3174 * _2958.x;
                                frontier_phi_105_pred_2 = _3174 * _2958.y;
                                frontier_phi_105_pred_3 = _3174 * _2958.z;
                                frontier_phi_105_pred_4 = _3100 * _2946.x;
                                frontier_phi_105_pred_5 = _3100 * _2946.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3183 = frontier_phi_105_pred;
                            _3178 = frontier_phi_105_pred_1;
                            _3179 = frontier_phi_105_pred_2;
                            _3180 = frontier_phi_105_pred_3;
                            _3181 = frontier_phi_105_pred_4;
                            _3182 = frontier_phi_105_pred_5;
                            _2888 = _3181 + _2901;
                            _2889 = _3182 + _2902;
                            _2890 = _3183 + _2903;
                            _2885 = _3178 + _2898;
                            _2886 = _3179 + _2899;
                            _2887 = _3180 + _2900;
                            if (_2905 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2905;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2888;
                        frontier_phi_99_pred_1 = _2887;
                        frontier_phi_99_pred_2 = _2886;
                        frontier_phi_99_pred_3 = _2885;
                        frontier_phi_99_pred_4 = _2890;
                        frontier_phi_99_pred_5 = _2889;
                    }
                    _2481 = frontier_phi_99_pred;
                    _2479 = frontier_phi_99_pred_1;
                    _2477 = frontier_phi_99_pred_2;
                    _2475 = frontier_phi_99_pred_3;
                    _2485 = frontier_phi_99_pred_4;
                    _2483 = frontier_phi_99_pred_5;
                    uint _2671 = _2670 + 1u;
                    if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2664 = _2475;
                        _2665 = _2477;
                        _2666 = _2479;
                        _2667 = _2481;
                        _2668 = _2483;
                        _2669 = _2485;
                        _2670 = _2671;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2485;
                frontier_phi_81_82_ladder_1 = _2481;
                frontier_phi_81_82_ladder_2 = _2479;
                frontier_phi_81_82_ladder_3 = _2477;
                frontier_phi_81_82_ladder_4 = _2475;
                frontier_phi_81_82_ladder_5 = _2483;
            }
            else
            {
                frontier_phi_81_82_ladder = _2340;
                frontier_phi_81_82_ladder_1 = _2336;
                frontier_phi_81_82_ladder_2 = _2334;
                frontier_phi_81_82_ladder_3 = _2332;
                frontier_phi_81_82_ladder_4 = _2330;
                frontier_phi_81_82_ladder_5 = _2338;
            }
            _2474 = frontier_phi_81_82_ladder_4;
            _2476 = frontier_phi_81_82_ladder_3;
            _2478 = frontier_phi_81_82_ladder_2;
            _2480 = frontier_phi_81_82_ladder_1;
            _2482 = frontier_phi_81_82_ladder_5;
            _2484 = frontier_phi_81_82_ladder;
        }
        float _2489 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
        _2252 = (_2489 * _2480) + _1982;
        _2254 = (_2489 * _2482) + _1983;
        _2256 = (_2489 * _2484) + _1984;
        _2258 = ((_2474 * 0.039999999105930328369140625) * _2489) + _2135;
        _2260 = ((_2476 * 0.039999999105930328369140625) * _2489) + _2136;
        _2262 = ((_2478 * 0.039999999105930328369140625) * _2489) + _2137;
    }
    else
    {
        _2252 = _1982;
        _2254 = _1983;
        _2256 = _1984;
        _2258 = _2135;
        _2260 = _2136;
        _2262 = _2137;
    }
    float _4148 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4159 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4170 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2279 = ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2252 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _889))) + ((_2258 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2280 = ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2254 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _889))) + ((_2260 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2281 = ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2256 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _889))) + ((_2262 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    uint _2285 = _863 + 6u;
    float _2293 = _824 / cbSceneParam._m0[86u].x;
    float _2294 = _825 / cbSceneParam._m0[86u].y;
    vec4 _2308 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, (log2((isnan(cbSceneParam._m0[77u].w) ? _811 : (isnan(_811) ? cbSceneParam._m0[77u].w : min(_811, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2310 = _2308.x;
    float _2311 = _2308.y;
    float _2312 = _2308.z;
    float _2313 = _2308.w;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    if (_811 > cbSceneParam._m0[78u].w)
    {
        float _2355 = isnan(_811) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _811 : min(cbSceneParam._m0[80u].w, _811));
        float _2356 = _2355 / _811;
        float _2367 = _2356 * _261;
        float _2368 = _262 * _2356;
        float _2369 = (-0.0) - _2368;
        float _2370 = _2356 * _263;
        float _2372 = (cbSceneParam._m0[77u].w * _2369) / _2355;
        float _2373 = _2372 + cbSceneParam._m0[79u].w;
        float _2374 = cbSceneParam._m0[79u].w - _2368;
        float _2380 = sqrt(((_2367 * _2367) + (_2368 * _2368)) + (_2370 * _2370));
        float _2383 = (1.0 - (cbSceneParam._m0[77u].w / _2355)) * _2380;
        float _2389 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2391 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2600;
        if (abs((_2369 - _2372) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2600 = ((((_2373 > 0.0) ? exp2(_2389 * _2373) : (2.0 - exp2(_2391 * _2373))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2383;
        }
        else
        {
            float _2535 = 1.0 / cbSceneParam._m0[80u].x;
            float _2536 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : max(_2373, _2374));
            float _2537 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : min(_2373, _2374));
            float _2546 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : min(_2536, 0.0));
            float _2547 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : min(_2537, 0.0));
            _2600 = ((abs(_2380 / _2369) * cbSceneParam._m0[80u].y) * ((((_2546 - _2547) * 2.0) - ((exp2(_2389 * (isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0)))) - exp2(_2389 * (isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0))))) * _2535)) - ((exp2(_2391 * _2546) - exp2(_2391 * _2547)) * _2535))) + (_2383 * cbSceneParam._m0[80u].z);
        }
        vec4 _2602 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2293, _2294, 1.0), 0.0);
        float _2611 = exp2((_2600 * (-1.44269502162933349609375)) * (1.0 - _2602.w));
        float _2612 = log2(_2611);
        float _2628 = log2(_2313);
        _2393 = (exp2(_2628 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].x)) * _2602.x) / cbSceneParam._m0[78u].x)) + _2310;
        _2395 = (exp2(_2628 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].y)) * _2602.y) / cbSceneParam._m0[78u].y)) + _2311;
        _2397 = (exp2(_2628 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2612 * cbSceneParam._m0[78u].z)) * _2602.z) / cbSceneParam._m0[78u].z)) + _2312;
        _2399 = _2611 * _2313;
    }
    else
    {
        _2393 = _2310;
        _2395 = _2311;
        _2397 = _2312;
        _2399 = _2313;
    }
    float _2411 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2412 = _2411 == 3.0;
    float _2413 = log2(_2399);
    float _2420 = exp2(_2413 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0)));
    float _2421 = exp2(_2413 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0)));
    float _2422 = exp2(_2413 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)));
    float _2431 = (_2411 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2431 * (_2412 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2393)));
    SV_Target.y = _2431 * (_2412 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2395)));
    SV_Target.z = _2431 * (_2412 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2397)));
    SV_Target.w = cbInstanceData._m0[_2285].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2285].w;
}


