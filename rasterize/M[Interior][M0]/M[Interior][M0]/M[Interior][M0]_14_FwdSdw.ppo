#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _959;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    float _376 = (_352 > 0.0) ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_357 + (-0.5)) + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_358 + (-0.5)) + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _434 = 0.5 - (_286 * 0.5);
    float _441 = ((((_416 - (_416 * _286)) * cbMtdParam._m0[9u].x) - _299) * _434) + _299;
    float _442 = ((((_417 - (_417 * _286)) * cbMtdParam._m0[9u].y) - _301) * _434) + _301;
    float _443 = (((cbMtdParam._m0[9u].z * (_418 - (_418 * _286))) - _303) * _434) + _303;
    vec4 _455 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _463 = (_455.x * 2.0) + (-1.0);
    float _465 = (_455.y * 2.0) + (-1.0);
    float _466 = dot(vec2(_463, _465), vec2(_463, _465));
    float _3311 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))));
    float _472 = _455.z * _286;
    float _475 = fma(_471, _195, fma(_465, _202, _463 * _188));
    float _478 = fma(_471, _196, fma(_465, _203, _463 * _189));
    float _481 = fma(_471, _197, fma(_465, _204, _463 * _190));
    float _485 = inversesqrt(dot(vec3(_475, _478, _481), vec3(_475, _478, _481)));
    float _486 = _485 * _475;
    float _487 = _485 * _478;
    float _488 = _485 * _481;
    float _3322 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _489 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3344 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3355 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _508 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _513 = _259 * _512;
    float _514 = _260 * _512;
    float _515 = _261 * _512;
    float _521 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _522 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _543 = fma(_488, cbSceneParam._m0[5u].z, fma(_487, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _486));
    float _546 = fma(_488, cbSceneParam._m0[6u].z, fma(_487, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _486));
    float _549 = fma(_488, cbSceneParam._m0[7u].z, fma(_487, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _486));
    uint _562 = uint(roundEven(NORMAL.w)) * 13u;
    uint _565 = (_562 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _571 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * cbInstanceData._m0[_565].x;
    float _572 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * cbInstanceData._m0[_565].y;
    float _573 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_565].z;
    float _3366 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    vec4 _585 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _521, cbSceneParam._m0[86u].y * _522));
    float _588 = _585.x * TEXCOORD.z;
    float _589 = dot(vec3(_486, _487, _488), vec3(_513, _514, _515));
    float _592 = _589 * 2.0;
    float _596 = (_592 * _486) - _513;
    float _597 = (_592 * _487) - _514;
    float _598 = (_592 * _488) - _515;
    float _602 = abs(dot(vec3(_513, _514, _515), vec3(_486, _487, _488)));
    float _3399 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _604 = sqrt(_489);
    float _617 = exp2((_604 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_604 * 3.0));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _958;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _685 = fma(_657, cbModelParam._m0[26u].z, fma(_653, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _649));
        float _689 = fma(_657, cbModelParam._m0[27u].z, fma(_653, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _649));
        float _693 = fma(_657, cbModelParam._m0[28u].z, fma(_653, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _649));
        float _716 = _649 + _486;
        float _717 = _653 + _487;
        float _718 = _657 + _488;
        float _728 = fma(_718, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _716)) - _685;
        float _729 = fma(_718, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _716)) - _689;
        float _730 = fma(_718, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _716)) - _693;
        float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
        float _747 = ((_734 * _728) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_685 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_734 * _729) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_689 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _749 = ((_734 * _730) / cbModelParam._m0[34u].z) + ((((((_693 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        float _786 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_752.x + (-0.5));
        float _788 = _786 * (_752.y + (-0.5));
        float _789 = _786 * (_752.z + (-0.5));
        float _796 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_759.x + (-0.5));
        float _798 = _796 * (_759.y + (-0.5));
        float _799 = _796 * (_759.z + (-0.5));
        float _806 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_766.x + (-0.5));
        float _808 = _806 * (_766.y + (-0.5));
        float _809 = _806 * (_766.z + (-0.5));
        float _816 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_773.x + (-0.5));
        float _818 = _816 * (_773.y + (-0.5));
        float _819 = _816 * (_773.z + (-0.5));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = _787 * 0.5;
        float _824 = _797 * 0.5;
        float _825 = _807 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _840 = (dot(vec3(_486, _487, _488), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _850 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3447 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_852 + 1.0))) + _857) * _820;
        float _867 = _788 * 0.5;
        float _868 = _798 * 0.5;
        float _869 = _808 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_486, _487, _488), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3480 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_894 + 1.0))) + _899) * _821;
        float _909 = _789 * 0.5;
        float _910 = _799 * 0.5;
        float _911 = _809 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_486, _487, _488), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3513 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_936 + 1.0))) + _941) * _822;
        _958 = _789;
        _960 = _788;
        _961 = _787;
        _962 = _799;
        _963 = _798;
        _964 = _797;
        _965 = _809;
        _966 = _808;
        _967 = _807;
        _968 = _822;
        _969 = _821;
        _970 = _820;
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
    }
    else
    {
        _958 = _959;
        _960 = _959;
        _961 = _959;
        _962 = _959;
        _963 = _959;
        _964 = _959;
        _965 = _959;
        _966 = _959;
        _967 = _959;
        _968 = _959;
        _969 = _959;
        _970 = _959;
        _971 = 0.0;
        _972 = 0.0;
        _973 = 0.0;
    }
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _999 = fma(_657, cbModelParam._m0[30u].z, fma(_653, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _649));
        float _1003 = fma(_657, cbModelParam._m0[31u].z, fma(_653, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _649));
        float _1007 = fma(_657, cbModelParam._m0[32u].z, fma(_653, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _649));
        float _1030 = _649 + _486;
        float _1031 = _653 + _487;
        float _1032 = _657 + _488;
        float _1042 = fma(_1032, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030)) - _999;
        float _1043 = fma(_1032, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030)) - _1003;
        float _1044 = fma(_1032, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030)) - _1007;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_999 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1003 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[35u].z) + ((((((_1007 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1098 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1065.x + (-0.5));
        float _1100 = _1098 * (_1065.y + (-0.5));
        float _1101 = _1098 * (_1065.z + (-0.5));
        float _1108 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1072.x + (-0.5));
        float _1110 = _1108 * (_1072.y + (-0.5));
        float _1111 = _1108 * (_1072.z + (-0.5));
        float _1118 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1079.x + (-0.5));
        float _1120 = _1118 * (_1079.y + (-0.5));
        float _1121 = _1118 * (_1079.z + (-0.5));
        float _1128 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1086.x + (-0.5));
        float _1130 = _1128 * (_1086.y + (-0.5));
        float _1131 = _1128 * (_1086.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_486, _487, _488), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3576 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1162 + 1.0))) + _1167) * _1132;
        float _1177 = _1100 * 0.5;
        float _1178 = _1110 * 0.5;
        float _1179 = _1120 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_486, _487, _488), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3609 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1204 + 1.0))) + _1209) * _1133;
        float _1219 = _1101 * 0.5;
        float _1220 = _1111 * 0.5;
        float _1221 = _1121 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_486, _487, _488), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3642 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1246 + 1.0))) + _1251) * _1134;
        _1268 = _1101;
        _1269 = _1100;
        _1270 = _1099;
        _1271 = _1111;
        _1272 = _1110;
        _1273 = _1109;
        _1274 = _1121;
        _1275 = _1120;
        _1276 = _1119;
        _1277 = _1134;
        _1278 = _1133;
        _1279 = _1132;
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _959;
        _1269 = _959;
        _1270 = _959;
        _1271 = _959;
        _1272 = _959;
        _1273 = _959;
        _1274 = _959;
        _1275 = _959;
        _1276 = _959;
        _1277 = _959;
        _1278 = _959;
        _1279 = _959;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _971)) + _971;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _972)) + _972;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _973)) + _973;
    float _1315 = fma(_1294, cbSceneParam._m0[89u].z, fma(_1293, cbSceneParam._m0[89u].y, _1292 * cbSceneParam._m0[89u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[90u].z, fma(_1293, cbSceneParam._m0[90u].y, _1292 * cbSceneParam._m0[90u].x));
    float _1321 = fma(_1294, cbSceneParam._m0[91u].z, fma(_1293, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1292));
    float _1336 = _596 * 0.5;
    float _1337 = _597 * 0.5;
    float _1338 = _598 * 0.5;
    float _1339 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1342 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1345 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1379;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1352 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_958, _962, _965, _968));
        float _1356 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_960, _963, _966, _969));
        float _1360 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_961, _964, _967, _970));
        float _1367 = dot(vec4(cbModelParam._m0[39u]), vec4(_1336, _1337, _1338, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1390;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1381 = dot(vec4(cbModelParam._m0[40u]), vec4(_1336, _1337, _1338, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1394 = (_1390 * cbModelParam._m0[1u].x) + (_1379 * (1.0 - cbModelParam._m0[1u].x));
    float _1404 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _489);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1404 : min(cbModelParam._m0[25u].z, _1404));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1453 = fma(_657, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _649)) + cbModelParam._m0[13u].w;
        float _1457 = fma(_657, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _649)) + cbModelParam._m0[14u].w;
        float _1461 = fma(_657, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _649)) + cbModelParam._m0[15u].w;
        float _1464 = fma(_598, cbModelParam._m0[13u].z, fma(_597, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596));
        float _1467 = fma(_598, cbModelParam._m0[14u].z, fma(_597, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596));
        float _1470 = fma(_598, cbModelParam._m0[15u].z, fma(_597, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596));
        float _1498;
        if (_1464 > 0.0)
        {
            _1498 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1498 = frontier_phi_22_20_ladder;
        }
        float _1667;
        if (_1467 > 0.0)
        {
            _1667 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1667 = frontier_phi_31_27_ladder;
        }
        float _2111;
        if (_1470 > 0.0)
        {
            _2111 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2111 = frontier_phi_43_38_ladder;
        }
        float _2113 = isnan(_1667) ? _1498 : (isnan(_1498) ? _1667 : min(_1498, _1667));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1464) + _1453;
        float _2119 = (_2114 * _1467) + _1457;
        float _2120 = (_2114 * _1470) + _1461;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2121;
        float _2125 = _2121 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 > _2125) || ((_2119 < _2123) || ((_2118 < _2123) || (_2118 > _2125))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2120, cbModelParam._m0[9u].z, fma(_2119, cbModelParam._m0[9u].y, _2118 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2120, cbModelParam._m0[10u].z, fma(_2119, cbModelParam._m0[10u].y, _2118 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2120, cbModelParam._m0[11u].z, fma(_2119, cbModelParam._m0[11u].y, _2118 * cbModelParam._m0[11u].x))), _1405);
            frontier_phi_21_43_ladder = _2354.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2354.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2354.z * cbModelParam._m0[1u].y;
        }
        _1486 = frontier_phi_21_43_ladder_1;
        _1488 = frontier_phi_21_43_ladder;
        _1490 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_596, _597, _598), _1405);
        _1486 = _1474.x * cbModelParam._m0[1u].y;
        _1488 = _1474.y * cbModelParam._m0[1u].y;
        _1490 = _1474.z * cbModelParam._m0[1u].y;
    }
    float _1494 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _489);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1494 : min(cbModelParam._m0[25u].w, _1494));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1548 = fma(_657, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _649)) + cbModelParam._m0[21u].w;
        float _1552 = fma(_657, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _649)) + cbModelParam._m0[22u].w;
        float _1556 = fma(_657, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _649)) + cbModelParam._m0[23u].w;
        float _1559 = fma(_598, cbModelParam._m0[21u].z, fma(_597, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596));
        float _1562 = fma(_598, cbModelParam._m0[22u].z, fma(_597, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596));
        float _1565 = fma(_598, cbModelParam._m0[23u].z, fma(_597, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596));
        float _1672;
        if (_1559 > 0.0)
        {
            _1672 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1672 = frontier_phi_33_29_ladder;
        }
        float _2138;
        if (_1562 > 0.0)
        {
            _2138 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2138 = frontier_phi_45_40_ladder;
        }
        float _2475;
        if (_1565 > 0.0)
        {
            _2475 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2475 = frontier_phi_57_52_ladder;
        }
        float _2477 = isnan(_2138) ? _1672 : (isnan(_1672) ? _2138 : min(_1672, _2138));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1559) + _1548;
        float _2483 = (_2478 * _1562) + _1552;
        float _2484 = (_2478 * _1565) + _1556;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2485;
        float _2488 = _2485 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2484 > _2488) || ((_2484 < _2486) || ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 < _2486) || (_2482 > _2488))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2484, cbModelParam._m0[17u].z, fma(_2483, cbModelParam._m0[17u].y, _2482 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2484, cbModelParam._m0[18u].z, fma(_2483, cbModelParam._m0[18u].y, _2482 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2484, cbModelParam._m0[19u].z, fma(_2483, cbModelParam._m0[19u].y, _2482 * cbModelParam._m0[19u].x))), _1495);
            frontier_phi_30_57_ladder = _2605.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2605.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2605.x * cbModelParam._m0[1u].z;
        }
        _1584 = frontier_phi_30_57_ladder_2;
        _1586 = frontier_phi_30_57_ladder_1;
        _1588 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_596, _597, _598), _1495);
        _1584 = _1568.x * cbModelParam._m0[1u].z;
        _1586 = _1568.y * cbModelParam._m0[1u].z;
        _1588 = _1568.z * cbModelParam._m0[1u].z;
    }
    float _1600 = ((((1.0 - _617) * ((_604 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_617 * _604)) * _588;
    float _1601 = _1600 * ((cbModelParam._m0[1u].w * (_1584 - _1486)) + _1486);
    float _1602 = _1600 * ((cbModelParam._m0[1u].w * (_1586 - _1488)) + _1488);
    float _1603 = _1600 * ((cbModelParam._m0[1u].w * (_1588 - _1490)) + _1490);
    float _1606 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1609 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1612 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, _1601 * cbSceneParam._m0[91u].x));
    float _1646 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1650 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1659 = _1646 / _1658;
    float _1660 = _1650 / _1658;
    float _1661 = _1654 / _1658;
    float _1808;
    float _1809;
    float _1810;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1688 = ((uint(_1661 > cbSceneParam._m0[59u].y) + uint(_1661 > cbSceneParam._m0[59u].x)) + uint(_1661 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1689 = _1688 + 43u;
        uint _1697 = _1688 + 44u;
        uint _1705 = _1688 + 45u;
        uint _1713 = _1688 + 46u;
        float _1724 = fma(_1658, cbSceneParam._m0[_1689].w, fma(_1654, cbSceneParam._m0[_1689].z, fma(_1650, cbSceneParam._m0[_1689].y, _1646 * cbSceneParam._m0[_1689].x)));
        float _1728 = fma(_1658, cbSceneParam._m0[_1697].w, fma(_1654, cbSceneParam._m0[_1697].z, fma(_1650, cbSceneParam._m0[_1697].y, _1646 * cbSceneParam._m0[_1697].x)));
        float _1736 = fma(_1658, cbSceneParam._m0[_1713].w, fma(_1654, cbSceneParam._m0[_1713].z, fma(_1650, cbSceneParam._m0[_1713].y, _1646 * cbSceneParam._m0[_1713].x)));
        float _1741 = cbSceneParam._m0[33u].z * _1736;
        float _1743 = cbSceneParam._m0[33u].w * _1736;
        float _1746 = fma(_1658, cbSceneParam._m0[_1705].w, fma(_1654, cbSceneParam._m0[_1705].z, fma(_1650, cbSceneParam._m0[_1705].y, _1646 * cbSceneParam._m0[_1705].x))) / _1736;
        float _1794 = (cbSceneParam._m0[33u].x - sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661))) * cbSceneParam._m0[33u].y;
        float _3768 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1801 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1741 + _1724) / _1736, (_1743 + _1728) / _1736), _1746), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1743 + _1724) / _1736, (_1728 - _1741) / _1736), _1746), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1724 - _1741) / _1736, (_1728 - _1743) / _1736), _1746), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1724 - _1743) / _1736, (_1741 + _1728) / _1736), _1746), 0.0)).x), vec4(0.25)));
        _1808 = 1.0 - (_1801 * cbSceneParam._m0[34u].x);
        _1809 = 1.0 - (_1801 * cbSceneParam._m0[34u].y);
        _1810 = 1.0 - (_1801 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1808 = 1.0;
        _1809 = 1.0;
        _1810 = 1.0;
    }
    float _1874;
    float _1876;
    float _1878;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1862 = fma(_1658, cbSceneParam._m0[63u].w, fma(_1654, cbSceneParam._m0[63u].z, fma(_1650, cbSceneParam._m0[63u].y, _1646 * cbSceneParam._m0[63u].x)));
        float _1863 = fma(_1658, cbSceneParam._m0[60u].w, fma(_1654, cbSceneParam._m0[60u].z, fma(_1650, cbSceneParam._m0[60u].y, _1646 * cbSceneParam._m0[60u].x))) / _1862;
        float _1864 = fma(_1658, cbSceneParam._m0[61u].w, fma(_1654, cbSceneParam._m0[61u].z, fma(_1650, cbSceneParam._m0[61u].y, _1646 * cbSceneParam._m0[61u].x))) / _1862;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1863 >= cbSceneParam._m0[64u].x) && (_1864 >= cbSceneParam._m0[64u].y)) && (_1863 <= cbSceneParam._m0[64u].z)) && (_1864 <= cbSceneParam._m0[64u].w))
        {
            float _2151 = fma(_1658, cbSceneParam._m0[62u].w, fma(_1654, cbSceneParam._m0[62u].z, fma(_1650, cbSceneParam._m0[62u].y, _1646 * cbSceneParam._m0[62u].x))) / _1862;
            float _2155 = isnan(cbSceneParam._m0[41u].w) ? _2151 : (isnan(_2151) ? cbSceneParam._m0[41u].w : max(_2151, cbSceneParam._m0[41u].w));
            float _2198 = (cbSceneParam._m0[33u].x - sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661))) * cbSceneParam._m0[33u].y;
            float _3784 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
            float _2205 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1863, cbSceneParam._m0[33u].w + _1864), _2155), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1863, _1864 - cbSceneParam._m0[33u].z), _2155), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1863 - cbSceneParam._m0[33u].z, _1864 - cbSceneParam._m0[33u].w), _2155), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1863 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1864), _2155), 0.0)).x), vec4(0.25)));
            float _2209 = 1.0 - (_2205 * cbSceneParam._m0[34u].x);
            float _2210 = 1.0 - (_2205 * cbSceneParam._m0[34u].y);
            float _2211 = 1.0 - (_2205 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2210) ? _1809 : (isnan(_1809) ? _2210 : min(_1809, _2210));
            frontier_phi_42_41_ladder_1 = isnan(_2209) ? _1808 : (isnan(_1808) ? _2209 : min(_1808, _2209));
            frontier_phi_42_41_ladder_2 = isnan(_2211) ? _1810 : (isnan(_1810) ? _2211 : min(_1810, _2211));
        }
        else
        {
            frontier_phi_42_41_ladder = _1809;
            frontier_phi_42_41_ladder_1 = _1808;
            frontier_phi_42_41_ladder_2 = _1810;
        }
        _1874 = frontier_phi_42_41_ladder_1;
        _1876 = frontier_phi_42_41_ladder;
        _1878 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1874 = _1808;
        _1876 = _1809;
        _1878 = _1810;
    }
    uvec4 _1883 = floatBitsToUint(cbInstanceData._m0[_562 + 5u]);
    uint _1885 = _1883.x * 14u;
    uint _1886 = _1885 + 13u;
    float _1891 = _588 + (-1.0);
    float _1894 = (cbLight._m0[_1886].x * _1891) + 1.0;
    float _1895 = (cbLight._m0[_1886].y * _1891) + 1.0;
    uint _1896 = _1885 + 5u;
    float _1902 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1906 = _1885 + 4u;
    float _1915 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1919 = _1885 | 1u;
    float _1930 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_486, _487, _488));
    float _1933 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_486, _487, _488));
    float _3820 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _3831 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1938 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1940 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1947 = ((cbLight._m0[_1896].x * _1902) * _1940) + (((cbLight._m0[_1906].x * _1874) * _1915) * _1938);
    float _1948 = ((_1902 * cbLight._m0[_1896].y) * _1940) + (((cbLight._m0[_1906].y * _1876) * _1915) * _1938);
    float _1949 = ((_1902 * cbLight._m0[_1896].z) * _1940) + (((cbLight._m0[_1906].z * _1878) * _1915) * _1938);
    uint _1951 = _1885 + 8u;
    float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _489) * 0.949999988079071044921875);
    float _1965 = _1964 * _1964;
    float _1966 = cbLight._m0[_1885].x + _513;
    float _1967 = cbLight._m0[_1885].y + _514;
    float _1968 = cbLight._m0[_1885].z + _515;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1973 = _1972 * _1966;
    float _1974 = _1972 * _1967;
    float _1975 = _1972 * _1968;
    float _1976 = dot(vec3(_486, _487, _488), vec3(cbLight._m0[_1885].xyz));
    float _3842 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _1980 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1981 = dot(vec3(_486, _487, _488), vec3(_1973, _1974, _1975));
    float _3864 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_1973, _1974, _1975));
    float _3875 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1965 * _1965;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2004 = (exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2005 = 1.0 - _1965;
    float _2016 = (0.5 / (((_1980 * ((_1979 * _2005) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2005) + _1965) * _1979))) * _1979;
    float _3886 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    uint _2032 = _1885 + 9u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _489) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1919].x + _513;
    float _2046 = cbLight._m0[_1919].y + _514;
    float _2047 = cbLight._m0[_1919].z + _515;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_486, _487, _488), vec3(cbLight._m0[_1919].xyz));
    float _3897 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _2059 = dot(vec3(_486, _487, _488), vec3(_2052, _2053, _2054));
    float _3908 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2052, _2053, _2054));
    float _3919 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2044 * _2044;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2081 = 1.0 - _2044;
    float _2091 = (0.5 / (((_1980 * ((_2058 * _2081) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2081) + _2044) * _2058))) * _2058;
    float _3930 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    float _2103 = (((_2080 * cbLight._m0[_2032].x) * _2093) * _1902) + ((((cbLight._m0[_1951].x * _1874) * _2004) * _2018) * _1915);
    float _2104 = (((_2080 * cbLight._m0[_2032].y) * _2093) * _1902) + ((((cbLight._m0[_1951].y * _1876) * _2004) * _2018) * _1915);
    float _2105 = (((_2080 * cbLight._m0[_2032].z) * _2093) * _1902) + ((((cbLight._m0[_1951].z * _1878) * _2004) * _2018) * _1915);
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_1883.y == 0u)
    {
        uvec4 _2223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2224 = _2223.x;
        uint _2235 = uint((float(_2223.y) * floor(float(uint(cbSceneParam._m0[85u].y * _522) / _2224))) + floor(float(uint(cbSceneParam._m0[85u].x * _521) / _2224)));
        float _2245 = (log2(_1661 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2246 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        uint _2249 = uint(isnan(14.0) ? _2246 : (isnan(_2246) ? 14.0 : min(_2246, 14.0)));
        uvec4 _2254 = texelFetch(g_lightClusterGridBuffer, int(((_2249 << 2u) + (_2235 << 6u)) >> 2u));
        uint _2255 = _2254.x;
        uint _2256 = _2223.z;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        if (((((1u << ((_2256 >> 4u) & 15u)) + 4294967295u) & _2255) == 0u) || ((_2256 & 240u) == 0u))
        {
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
        }
        else
        {
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            uint _2539 = 0u;
            uint _2548;
            bool _2549;
            for (;;)
            {
                _2548 = texelFetch(g_lightClassification, int((((_2249 << 5u) + (_2235 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                _2549 = _2548 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2549)
                {
                    frontier_phi_66_pred = _2534;
                    frontier_phi_66_pred_1 = _2533;
                    frontier_phi_66_pred_2 = _2535;
                    frontier_phi_66_pred_3 = _2538;
                    frontier_phi_66_pred_4 = _2537;
                    frontier_phi_66_pred_5 = _2536;
                }
                else
                {
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    uint _2684;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2548;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    for (;;)
                    {
                        uint _2688 = uint(findLSB(_2684)) + (_2539 << 5u);
                        uint _2685 = (_2684 + 4294967295u) & _2684;
                        uint _2690 = _2688 * 48u;
                        vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2710 = (_2688 * 48u) + 4u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        uint _2729 = (_2688 * 48u) + 8u;
                        vec3 _2740 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x));
                        float _2744 = _2704.x - _1659;
                        float _2745 = _2704.y - _1660;
                        float _2746 = _2704.z - _1661;
                        float _2747 = dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746));
                        float _2750 = inversesqrt(_2747);
                        float _2751 = _2750 * _2744;
                        float _2752 = _2750 * _2745;
                        float _2753 = _2750 * _2746;
                        float _2754 = dot(vec3(_543, _546, _549), vec3(_2751, _2752, _2753));
                        float _2759 = 1.0 - (_2747 * _2704.w);
                        float _3951 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                        float _2761 = sqrt(_2747) * _2723.w;
                        float _2764 = 1.39999997615814208984375 / (_2761 + 1.39999997615814208984375);
                        float _2765 = _2764 * _2764;
                        float _2768 = ((1.0 - _2765) * _2754) + _2765;
                        float _2771 = _2761 * _2761;
                        float _2775 = ((isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))) * _2760) / ((_2771 * 0.699999988079071044921875) + 1.0);
                        float _2779 = (-0.0) - _1659;
                        float _2780 = (-0.0) - _1660;
                        float _2781 = (-0.0) - _1661;
                        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
                        float _2786 = _2785 * _2779;
                        float _2787 = _2785 * _2780;
                        float _2788 = _2785 * _2781;
                        float _2795 = exp2(log2(1.0 / ((_2771 * 3.5) + 5.0)) * 0.25);
                        float _2796 = 1.0 - _604;
                        float _2803 = sqrt(1.0 - ((1.0 - (_2796 * _2796)) * (1.0 - (_2795 * _2795))));
                        float _2804 = _2803 * _2803;
                        float _2805 = _2804 * _2804;
                        float _2806 = _2786 + _2751;
                        float _2807 = _2787 + _2752;
                        float _2808 = _2788 + _2753;
                        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
                        float _2816 = dot(vec3(_543, _546, _549), vec3(_2786, _2787, _2788));
                        float _3967 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                        float _2820 = dot(vec3(_543, _546, _549), vec3(_2812 * _2806, _2812 * _2807, _2812 * _2808));
                        float _3978 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2823 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2827 = ((_2823 * _2823) * (_2805 + (-1.0))) + 1.0;
                        float _2828 = _2764 * _2804;
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2754) + _2829;
                        float _3989 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2833 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2834 = 1.0 - _2804;
                        float _2844 = (0.5 / (((_2833 * ((_2819 * _2834) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _2834) + _2804) * _2819))) * _2833;
                        float _4000 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2855 = (((_2805 * 3.1415927410125732421875) * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) / ((_2827 * _2827) * ((_2771 * 2.1991131305694580078125) + 3.141590118408203125))) * _2760;
                        _2613 = (_2775 * _2723.x) + _2681;
                        _2614 = (_2775 * _2723.y) + _2682;
                        _2615 = (_2775 * _2723.z) + _2683;
                        _2610 = (_2855 * _2740.x) + _2678;
                        _2611 = (_2855 * _2740.y) + _2679;
                        _2612 = (_2855 * _2740.z) + _2680;
                        if (_2685 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2613;
                            _2682 = _2614;
                            _2683 = _2615;
                            _2684 = _2685;
                        }
                    }
                    frontier_phi_66_pred = _2611;
                    frontier_phi_66_pred_1 = _2610;
                    frontier_phi_66_pred_2 = _2612;
                    frontier_phi_66_pred_3 = _2615;
                    frontier_phi_66_pred_4 = _2614;
                    frontier_phi_66_pred_5 = _2613;
                }
                _2366 = frontier_phi_66_pred;
                _2364 = frontier_phi_66_pred_1;
                _2368 = frontier_phi_66_pred_2;
                _2374 = frontier_phi_66_pred_3;
                _2372 = frontier_phi_66_pred_4;
                _2370 = frontier_phi_66_pred_5;
                uint _2540 = _2539 + 1u;
                if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2533 = _2364;
                    _2534 = _2366;
                    _2535 = _2368;
                    _2536 = _2370;
                    _2537 = _2372;
                    _2538 = _2374;
                    _2539 = _2540;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
        }
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.z;
        uint _2380 = (_2378 >> 8u) & 15u;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        if (((4294967295u << _2380) & _2255) == 0u)
        {
            _2501 = _2363;
            _2503 = _2365;
            _2505 = _2367;
            _2507 = _2369;
            _2509 = _2371;
            _2511 = _2373;
        }
        else
        {
            float _2526 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
            float _2527 = _2526 * _1659;
            float _2528 = _2526 * _1660;
            float _2529 = _2526 * _1661;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2380 < ((_2378 >> 12u) & 15u))
            {
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2661 = _2363;
                float _2662 = _2365;
                float _2663 = _2367;
                float _2664 = _2369;
                float _2665 = _2371;
                float _2666 = _2373;
                uint _2667 = _2380;
                uint _2676;
                bool _2677;
                for (;;)
                {
                    _2676 = texelFetch(g_lightClassification, int((((_2249 << 5u) + (_2235 << 9u)) + (_2667 << 2u)) >> 2u)).x;
                    _2677 = _2676 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2677)
                    {
                        frontier_phi_72_pred = _2662;
                        frontier_phi_72_pred_1 = _2661;
                        frontier_phi_72_pred_2 = _2666;
                        frontier_phi_72_pred_3 = _2665;
                        frontier_phi_72_pred_4 = _2664;
                        frontier_phi_72_pred_5 = _2663;
                    }
                    else
                    {
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _2873 = _2661;
                        float _2874 = _2662;
                        float _2875 = _2663;
                        float _2876 = _2664;
                        float _2877 = _2665;
                        float _2878 = _2666;
                        uint _2879 = _2676;
                        uint _2880;
                        vec4 _2905;
                        float _2906;
                        vec4 _2921;
                        vec3 _2933;
                        vec4 _2948;
                        vec4 _2964;
                        float _3010;
                        bool _3011;
                        for (;;)
                        {
                            uint _2890 = ((_2667 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2879));
                            _2880 = (_2879 + 4294967295u) & _2879;
                            uint _2892 = _2890 * 40u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            _2906 = _2905.w;
                            uint _2908 = (_2890 * 40u) + 4u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2923 = (_2890 * 40u) + 8u;
                            _2933 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x));
                            uint _2935 = (_2890 * 40u) + 16u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2951 = (_2890 * 40u) + 20u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2966 = (_2890 * 40u) + 24u;
                            vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2985 = (_2890 * 40u) + 28u;
                            vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _3010 = fma(_1661, _2998.z, fma(_1660, _2998.y, _2998.x * _1659)) + _2998.w;
                            _3011 = !((fma(_1661, _2979.z, fma(_1660, _2979.y, _2979.x * _1659)) + _2979.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3011)
                            {
                                float _3038 = _2905.x - _1659;
                                float _3039 = _2905.y - _1660;
                                float _3040 = _2905.z - _1661;
                                float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                                float _3044 = inversesqrt(_3041);
                                float _3045 = _3044 * _3038;
                                float _3046 = _3044 * _3039;
                                float _3047 = _3044 * _3040;
                                float _3051 = 1.0 - (_3041 / (_2906 * _2906));
                                float _4011 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _3056 = sqrt(_3041) * _2921.w;
                                float _3058 = 1.39999997615814208984375 / (_3056 + 1.39999997615814208984375);
                                float _3059 = _3058 * _3058;
                                float _3062 = ((1.0 - _3059) * dot(vec3(_3045, _3046, _3047), vec3(_543, _546, _549))) + _3059;
                                float _3065 = _3056 * _3056;
                                float _3069 = (fma(_1661, _2948.z, fma(_1660, _2948.y, _2948.x * _1659)) + _2948.w) / _3010;
                                float _3070 = (fma(_1661, _2964.z, fma(_1660, _2964.y, _2964.x * _1659)) + _2964.w) / _3010;
                                float _3074 = 1.0 - dot(vec2(_3069, _3070), vec2(_3069, _3070));
                                float _4027 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                                float _3076 = _3075 * (((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3052) / ((_3065 * 0.699999988079071044921875) + 1.0));
                                float _3088 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                                float _3089 = 1.0 - _604;
                                float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                                float _3097 = _3096 * _3096;
                                float _3098 = _3097 * _3097;
                                float _3099 = _3045 - _2527;
                                float _3100 = _3046 - _2528;
                                float _3101 = _3047 - _2529;
                                float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                                float _3109 = dot(vec3(_543, _546, _549), vec3((-0.0) - _2527, (-0.0) - _2528, (-0.0) - _2529));
                                float _4038 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _3113 = dot(vec3(_543, _546, _549), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                                float _4049 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3116 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                                float _3121 = _3058 * _3097;
                                float _3122 = _3121 * _3121;
                                float _3128 = ((1.0 - _3122) * dot(vec3(_543, _546, _549), vec3(_3045, _3046, _3047))) + _3122;
                                float _4060 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3130 = 1.0 - _3097;
                                float _3140 = (0.5 / (((_3129 * ((_3112 * _3130) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3129 * _3130) + _3097) * _3112))) * _3129;
                                float _4071 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3150 = (_3075 * _3052) * (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) / ((_3120 * _3120) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3150 * _2933.y;
                                frontier_phi_78_pred_1 = _3150 * _2933.x;
                                frontier_phi_78_pred_2 = _3076 * _2921.z;
                                frontier_phi_78_pred_3 = _3076 * _2921.y;
                                frontier_phi_78_pred_4 = _3076 * _2921.x;
                                frontier_phi_78_pred_5 = _3150 * _2933.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3155 = frontier_phi_78_pred;
                            _3154 = frontier_phi_78_pred_1;
                            _3159 = frontier_phi_78_pred_2;
                            _3158 = frontier_phi_78_pred_3;
                            _3157 = frontier_phi_78_pred_4;
                            _3156 = frontier_phi_78_pred_5;
                            _2863 = _3157 + _2876;
                            _2864 = _3158 + _2877;
                            _2865 = _3159 + _2878;
                            _2860 = _3154 + _2873;
                            _2861 = _3155 + _2874;
                            _2862 = _3156 + _2875;
                            if (_2880 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2880;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2861;
                        frontier_phi_72_pred_1 = _2860;
                        frontier_phi_72_pred_2 = _2865;
                        frontier_phi_72_pred_3 = _2864;
                        frontier_phi_72_pred_4 = _2863;
                        frontier_phi_72_pred_5 = _2862;
                    }
                    _2504 = frontier_phi_72_pred;
                    _2502 = frontier_phi_72_pred_1;
                    _2512 = frontier_phi_72_pred_2;
                    _2510 = frontier_phi_72_pred_3;
                    _2508 = frontier_phi_72_pred_4;
                    _2506 = frontier_phi_72_pred_5;
                    uint _2668 = _2667 + 1u;
                    if (_2668 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2661 = _2502;
                        _2662 = _2504;
                        _2663 = _2506;
                        _2664 = _2508;
                        _2665 = _2510;
                        _2666 = _2512;
                        _2667 = _2668;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2512;
                frontier_phi_59_60_ladder_1 = _2508;
                frontier_phi_59_60_ladder_2 = _2506;
                frontier_phi_59_60_ladder_3 = _2504;
                frontier_phi_59_60_ladder_4 = _2502;
                frontier_phi_59_60_ladder_5 = _2510;
            }
            else
            {
                frontier_phi_59_60_ladder = _2373;
                frontier_phi_59_60_ladder_1 = _2369;
                frontier_phi_59_60_ladder_2 = _2367;
                frontier_phi_59_60_ladder_3 = _2365;
                frontier_phi_59_60_ladder_4 = _2363;
                frontier_phi_59_60_ladder_5 = _2371;
            }
            _2501 = frontier_phi_59_60_ladder_4;
            _2503 = frontier_phi_59_60_ladder_3;
            _2505 = frontier_phi_59_60_ladder_2;
            _2507 = frontier_phi_59_60_ladder_1;
            _2509 = frontier_phi_59_60_ladder_5;
            _2511 = frontier_phi_59_60_ladder;
        }
        float _2516 = isnan(1.0) ? _588 : (isnan(_588) ? 1.0 : min(_588, 1.0));
        _2268 = (_2516 * _2507) + _1947;
        _2270 = (_2516 * _2509) + _1948;
        _2272 = (_2516 * _2511) + _1949;
        _2274 = ((_2501 * 0.039999999105930328369140625) * _2516) + _2103;
        _2276 = ((_2503 * 0.039999999105930328369140625) * _2516) + _2104;
        _2278 = ((_2505 * 0.039999999105930328369140625) * _2516) + _2105;
    }
    else
    {
        _2268 = _1947;
        _2270 = _1948;
        _2272 = _1949;
        _2274 = _2103;
        _2276 = _2104;
        _2278 = _2105;
    }
    float _4087 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4098 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4109 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _2295 = ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2268 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _588))) + ((_2274 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    float _2296 = ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2270 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _588))) + ((_2276 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    float _2297 = ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2272 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _588))) + ((_2278 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1394)) * cbPerFrame._m0[3u].x);
    uint _2301 = _562 + 6u;
    float _2309 = _521 / cbSceneParam._m0[86u].x;
    float _2310 = _522 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _508 : (isnan(_508) ? cbSceneParam._m0[77u].w : min(_508, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    if (_508 > cbSceneParam._m0[78u].w)
    {
        float _2388 = isnan(_508) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _508 : min(cbSceneParam._m0[80u].w, _508));
        float _2389 = _2388 / _508;
        float _2400 = _2389 * _259;
        float _2401 = _260 * _2389;
        float _2402 = (-0.0) - _2401;
        float _2403 = _2389 * _261;
        float _2405 = (cbSceneParam._m0[77u].w * _2402) / _2388;
        float _2406 = _2405 + cbSceneParam._m0[79u].w;
        float _2407 = cbSceneParam._m0[79u].w - _2401;
        float _2413 = sqrt(((_2400 * _2400) + (_2401 * _2401)) + (_2403 * _2403));
        float _2416 = (1.0 - (cbSceneParam._m0[77u].w / _2388)) * _2413;
        float _2421 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2423 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2623;
        if (abs((_2402 - _2405) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2623 = ((((_2406 > 0.0) ? exp2(_2421 * _2406) : (2.0 - exp2(_2423 * _2406))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2416;
        }
        else
        {
            float _2562 = 1.0 / cbSceneParam._m0[80u].x;
            float _2563 = isnan(_2407) ? _2406 : (isnan(_2406) ? _2407 : max(_2406, _2407));
            float _2564 = isnan(_2407) ? _2406 : (isnan(_2406) ? _2407 : min(_2406, _2407));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            _2623 = ((abs(_2413 / _2402) * cbSceneParam._m0[80u].y) * ((((_2573 - _2574) * 2.0) - ((exp2(_2421 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)))) - exp2(_2421 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))))) * _2562)) - ((exp2(_2423 * _2573) - exp2(_2423 * _2574)) * _2562))) + (_2416 * cbSceneParam._m0[80u].z);
        }
        vec4 _2625 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2634 = exp2((_2623 * (-1.44269502162933349609375)) * (1.0 - _2625.w));
        float _2635 = log2(_2634);
        float _2651 = log2(_2329);
        _2425 = (exp2(_2651 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].x)) * _2625.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2427 = (exp2(_2651 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].y)) * _2625.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2429 = (exp2(_2651 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].z)) * _2625.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2431 = _2634 * _2329;
    }
    else
    {
        _2425 = _2326;
        _2427 = _2327;
        _2429 = _2328;
        _2431 = _2329;
    }
    float _2443 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2444 = _2443 == 3.0;
    float _2445 = log2(_2431);
    float _2452 = exp2(_2445 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)));
    float _2453 = exp2(_2445 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0)));
    float _2454 = exp2(_2445 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0)));
    float _2463 = (_2443 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2463 * (_2444 ? _2452 : (_2452 + (cbSceneParam._m0[72u].w * _2425)));
    SV_Target.y = _2463 * (_2444 ? _2453 : (_2453 + (cbSceneParam._m0[72u].w * _2427)));
    SV_Target.z = _2463 * (_2444 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.w = cbInstanceData._m0[_2301].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2301].w;
}


