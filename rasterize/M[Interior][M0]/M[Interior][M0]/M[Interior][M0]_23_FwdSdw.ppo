#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _426;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _341 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _351 = (_341.y * 2.0) + (-1.0);
    float _357 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _364 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _373 = cbMtdParam._m0[23u].x + _261;
    float _374 = cbMtdParam._m0[23u].y + _262;
    float _375 = cbMtdParam._m0[23u].z + _263;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_357 * _190, _357 * _191, _357 * _192));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_364 * _204, _364 * _205, _364 * _206));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _395 * _391;
    float _401 = ((cbMtdParam._m0[19u].w * _389) * _395) + (_349 * cbMtdParam._m0[20u].y);
    float _402 = ((cbMtdParam._m0[20u].x * _390) * _395) + (_351 * cbMtdParam._m0[20u].z);
    float _405 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _406 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _424;
    float _427;
    float _429;
    if (_401 > 0.0)
    {
        float _410 = (1.0 - _405) / _401;
        _424 = _410;
        _427 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_410 * _396)) * 0.16666667163372039794921875;
        _429 = (fract((_410 * _402) + _406) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_401 < 0.0)
        {
            float _425 = ((-0.0) - _405) / _401;
            frontier_phi_3_2_ladder = (fract(_425 * _396) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _425;
            frontier_phi_3_2_ladder_2 = (fract((_425 * _402) + _406) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _426;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _424 = frontier_phi_3_2_ladder_1;
        _427 = frontier_phi_3_2_ladder;
        _429 = frontier_phi_3_2_ladder_2;
    }
    float _455;
    float _457;
    float _459;
    if (_402 > 0.0)
    {
        float _442 = (1.0 - _406) / _402;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_442 < _424)
        {
            frontier_phi_8_5_ladder = (fract(_442 * _396) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_442 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _442;
        }
        else
        {
            frontier_phi_8_5_ladder = _429;
            frontier_phi_8_5_ladder_1 = _427;
            frontier_phi_8_5_ladder_2 = _424;
        }
        _455 = frontier_phi_8_5_ladder_2;
        _457 = frontier_phi_8_5_ladder_1;
        _459 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_402 < 0.0)
        {
            float _456 = ((-0.0) - _406) / _402;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_456 < _424)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_456 * _396) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_456 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _456;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _429;
                frontier_phi_8_6_ladder_9_ladder_1 = _427;
                frontier_phi_8_6_ladder_9_ladder_2 = _424;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _429;
            frontier_phi_8_6_ladder_1 = _427;
            frontier_phi_8_6_ladder_2 = _424;
        }
        _455 = frontier_phi_8_6_ladder_2;
        _457 = frontier_phi_8_6_ladder_1;
        _459 = frontier_phi_8_6_ladder;
    }
    float _463 = (_396 > 0.0) ? (cbMtdParam._m0[16u].w / _396) : 5000.0;
    float _476;
    float _477;
    if (_463 < _455)
    {
        _476 = ((_405 + cbMtdParam._m0[17u].x) + (_463 * _401)) * 0.16666667163372039794921875;
        _477 = (((_463 * _402) + _406) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _476 = _457;
        _477 = _459;
    }
    vec4 _479 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_476, _477));
    float _484 = _479.x * cbMtdParam._m0[13u].x;
    float _485 = _479.y * cbMtdParam._m0[13u].y;
    float _486 = _479.z * cbMtdParam._m0[13u].z;
    vec4 _504 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _508 = _504.z;
    float _511 = (_504.x * 2.0) + (-1.0);
    float _512 = (_504.y * 2.0) + (-1.0);
    float _513 = dot(vec2(_511, _512), vec2(_511, _512));
    float _3404 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _518 = sqrt(1.0 - (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))));
    float _519 = _508 * _288;
    float _529 = (cbMtdParam._m0[15u].w * ((_345 - _519) + ((_508 - _345) * _288))) + _519;
    float _537 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _288))) + _511;
    float _538 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _288))) + _512;
    float _541 = fma(_518, _197, fma(_538, _204, _537 * _190));
    float _544 = fma(_518, _198, fma(_538, _205, _537 * _191));
    float _547 = fma(_518, _199, fma(_538, _206, _537 * _192));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3415 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _555 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3437 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3448 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _574 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _579 = _261 * _578;
    float _580 = _262 * _578;
    float _581 = _263 * _578;
    float _587 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _588 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _608 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _611 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _614 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _627 = uint(roundEven(NORMAL.w)) * 13u;
    uint _628 = _627 + 9u;
    uint _629 = _628 + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3459 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    vec4 _649 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _587, cbSceneParam._m0[86u].y * _588));
    float _652 = _649.x * TEXCOORD.z;
    float _653 = dot(vec3(_552, _553, _554), vec3(_579, _580, _581));
    float _656 = _653 * 2.0;
    float _660 = (_656 * _552) - _579;
    float _661 = (_656 * _553) - _580;
    float _662 = (_656 * _554) - _581;
    float _666 = abs(dot(vec3(_579, _580, _581), vec3(_552, _553, _554)));
    float _3492 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _668 = sqrt(_555);
    float _681 = exp2((_668 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_668 * 3.0));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _754 = fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713));
        float _758 = fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713));
        float _762 = fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713));
        float _786 = _713 + _552;
        float _787 = _717 + _553;
        float _788 = _721 + _554;
        float _798 = fma(_788, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786)) - _754;
        float _799 = fma(_788, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786)) - _758;
        float _800 = fma(_788, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786)) - _762;
        float _804 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
        float _817 = ((_804 * _798) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_754 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_804 * _799) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_758 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_804 * _800) / cbModelParam._m0[34u].z) + ((((((_762 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        float _856 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_822.x + (-0.5));
        float _858 = _856 * (_822.y + (-0.5));
        float _859 = _856 * (_822.z + (-0.5));
        float _866 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_829.x + (-0.5));
        float _868 = _866 * (_829.y + (-0.5));
        float _869 = _866 * (_829.z + (-0.5));
        float _876 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_836.x + (-0.5));
        float _878 = _876 * (_836.y + (-0.5));
        float _879 = _876 * (_836.z + (-0.5));
        float _886 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_843.x + (-0.5));
        float _888 = _886 * (_843.y + (-0.5));
        float _889 = _886 * (_843.z + (-0.5));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = _857 * 0.5;
        float _894 = _867 * 0.5;
        float _895 = _877 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _910 = (dot(vec3(_552, _553, _554), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _920 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3540 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_922 + 1.0))) + _927) * _890;
        float _937 = _858 * 0.5;
        float _938 = _868 * 0.5;
        float _939 = _878 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_552, _553, _554), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3573 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_964 + 1.0))) + _969) * _891;
        float _979 = _859 * 0.5;
        float _980 = _869 * 0.5;
        float _981 = _879 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_552, _553, _554), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3606 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1006 + 1.0))) + _1011) * _892;
        _1028 = _859;
        _1029 = _858;
        _1030 = _857;
        _1031 = _869;
        _1032 = _868;
        _1033 = _867;
        _1034 = _879;
        _1035 = _878;
        _1036 = _877;
        _1037 = _892;
        _1038 = _891;
        _1039 = _890;
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
    }
    else
    {
        _1028 = _426;
        _1029 = _426;
        _1030 = _426;
        _1031 = _426;
        _1032 = _426;
        _1033 = _426;
        _1034 = _426;
        _1035 = _426;
        _1036 = _426;
        _1037 = _426;
        _1038 = _426;
        _1039 = _426;
        _1040 = 0.0;
        _1041 = 0.0;
        _1042 = 0.0;
    }
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1068 = fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713));
        float _1072 = fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713));
        float _1076 = fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713));
        float _1099 = _713 + _552;
        float _1100 = _717 + _553;
        float _1101 = _721 + _554;
        float _1111 = fma(_1101, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099)) - _1068;
        float _1112 = fma(_1101, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099)) - _1072;
        float _1113 = fma(_1101, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099)) - _1076;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1068 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1072 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[35u].z) + ((((((_1076 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1167 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1134.x + (-0.5));
        float _1169 = _1167 * (_1134.y + (-0.5));
        float _1170 = _1167 * (_1134.z + (-0.5));
        float _1177 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1141.x + (-0.5));
        float _1179 = _1177 * (_1141.y + (-0.5));
        float _1180 = _1177 * (_1141.z + (-0.5));
        float _1187 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1148.x + (-0.5));
        float _1189 = _1187 * (_1148.y + (-0.5));
        float _1190 = _1187 * (_1148.z + (-0.5));
        float _1197 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1155.x + (-0.5));
        float _1199 = _1197 * (_1155.y + (-0.5));
        float _1200 = _1197 * (_1155.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_552, _553, _554), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3669 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1231 + 1.0))) + _1236) * _1201;
        float _1246 = _1169 * 0.5;
        float _1247 = _1179 * 0.5;
        float _1248 = _1189 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_552, _553, _554), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3702 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1273 + 1.0))) + _1278) * _1202;
        float _1288 = _1170 * 0.5;
        float _1289 = _1180 * 0.5;
        float _1290 = _1190 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_552, _553, _554), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3735 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1315 + 1.0))) + _1320) * _1203;
        _1337 = _1170;
        _1338 = _1169;
        _1339 = _1168;
        _1340 = _1180;
        _1341 = _1179;
        _1342 = _1178;
        _1343 = _1190;
        _1344 = _1189;
        _1345 = _1188;
        _1346 = _1203;
        _1347 = _1202;
        _1348 = _1201;
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _426;
        _1338 = _426;
        _1339 = _426;
        _1340 = _426;
        _1341 = _426;
        _1342 = _426;
        _1343 = _426;
        _1344 = _426;
        _1345 = _426;
        _1346 = _426;
        _1347 = _426;
        _1348 = _426;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1040)) + _1040;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1041)) + _1041;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1042)) + _1042;
    float _1384 = fma(_1363, cbSceneParam._m0[89u].z, fma(_1362, cbSceneParam._m0[89u].y, _1361 * cbSceneParam._m0[89u].x));
    float _1387 = fma(_1363, cbSceneParam._m0[90u].z, fma(_1362, cbSceneParam._m0[90u].y, _1361 * cbSceneParam._m0[90u].x));
    float _1390 = fma(_1363, cbSceneParam._m0[91u].z, fma(_1362, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1361));
    float _1405 = _660 * 0.5;
    float _1406 = _661 * 0.5;
    float _1407 = _662 * 0.5;
    float _1408 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1411 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1414 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1448;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1421 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1425 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1429 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1436 = dot(vec4(cbModelParam._m0[39u]), vec4(_1405, _1406, _1407, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1459;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1450 = dot(vec4(cbModelParam._m0[40u]), vec4(_1405, _1406, _1407, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1463 = (_1459 * cbModelParam._m0[1u].x) + (_1448 * (1.0 - cbModelParam._m0[1u].x));
    float _1473 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1473 : min(cbModelParam._m0[25u].z, _1473));
    float _1555;
    float _1557;
    float _1559;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1522 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1526 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1530 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1533 = fma(_662, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660));
        float _1536 = fma(_662, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660));
        float _1539 = fma(_662, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660));
        float _1567;
        if (_1533 > 0.0)
        {
            _1567 = abs((1.0 - _1522) / _1533);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1522 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1567 = frontier_phi_26_24_ladder;
        }
        float _1738;
        if (_1536 > 0.0)
        {
            _1738 = abs((1.0 - _1526) / _1536);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1526 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1738 = frontier_phi_35_31_ladder;
        }
        float _2183;
        if (_1539 > 0.0)
        {
            _2183 = abs((1.0 - _1530) / _1539);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1530 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2183 = frontier_phi_47_42_ladder;
        }
        float _2185 = isnan(_1738) ? _1567 : (isnan(_1567) ? _1738 : min(_1567, _1738));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1533) + _1522;
        float _2191 = (_2186 * _1536) + _1526;
        float _2192 = (_2186 * _1539) + _1530;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2193;
        float _2197 = _2193 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 > _2197) || ((_2191 < _2195) || ((_2190 < _2195) || (_2190 > _2197))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2442 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2192, cbModelParam._m0[9u].z, fma(_2191, cbModelParam._m0[9u].y, _2190 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2192, cbModelParam._m0[10u].z, fma(_2191, cbModelParam._m0[10u].y, _2190 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2192, cbModelParam._m0[11u].z, fma(_2191, cbModelParam._m0[11u].y, _2190 * cbModelParam._m0[11u].x))), _1474);
            frontier_phi_25_47_ladder = _2442.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2442.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2442.x * cbModelParam._m0[1u].y;
        }
        _1555 = frontier_phi_25_47_ladder_2;
        _1557 = frontier_phi_25_47_ladder_1;
        _1559 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_660, _661, _662), _1474);
        _1555 = _1543.x * cbModelParam._m0[1u].y;
        _1557 = _1543.y * cbModelParam._m0[1u].y;
        _1559 = _1543.z * cbModelParam._m0[1u].y;
    }
    float _1563 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1563 : min(cbModelParam._m0[25u].w, _1563));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1619 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1623 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1627 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1630 = fma(_662, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660));
        float _1633 = fma(_662, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660));
        float _1636 = fma(_662, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660));
        float _1743;
        if (_1630 > 0.0)
        {
            _1743 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1743 = frontier_phi_37_33_ladder;
        }
        float _2210;
        if (_1633 > 0.0)
        {
            _2210 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2210 = frontier_phi_49_44_ladder;
        }
        float _2563;
        if (_1636 > 0.0)
        {
            _2563 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2563 = frontier_phi_61_56_ladder;
        }
        float _2565 = isnan(_2210) ? _1743 : (isnan(_1743) ? _2210 : min(_1743, _2210));
        float _2566 = isnan(_2563) ? _2565 : (isnan(_2565) ? _2563 : min(_2565, _2563));
        float _2570 = (_2566 * _1630) + _1619;
        float _2571 = (_2566 * _1633) + _1623;
        float _2572 = (_2566 * _1636) + _1627;
        float _2573 = _2566 * 9.9999997473787516355514526367188e-05;
        float _2574 = (-1.0) - _2573;
        float _2576 = _2573 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2572 > _2576) || ((_2572 < _2574) || ((_2571 > _2576) || ((_2571 < _2574) || ((_2570 < _2574) || (_2570 > _2576))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2572, cbModelParam._m0[17u].z, fma(_2571, cbModelParam._m0[17u].y, _2570 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2572, cbModelParam._m0[18u].z, fma(_2571, cbModelParam._m0[18u].y, _2570 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2572, cbModelParam._m0[19u].z, fma(_2571, cbModelParam._m0[19u].y, _2570 * cbModelParam._m0[19u].x))), _1564);
            frontier_phi_34_61_ladder = _2693.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2693.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2693.x * cbModelParam._m0[1u].z;
        }
        _1655 = frontier_phi_34_61_ladder_2;
        _1657 = frontier_phi_34_61_ladder_1;
        _1659 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_660, _661, _662), _1564);
        _1655 = _1639.x * cbModelParam._m0[1u].z;
        _1657 = _1639.y * cbModelParam._m0[1u].z;
        _1659 = _1639.z * cbModelParam._m0[1u].z;
    }
    float _1671 = ((((1.0 - _681) * ((_668 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_681 * _668)) * _652;
    float _1672 = _1671 * ((cbModelParam._m0[1u].w * (_1655 - _1555)) + _1555);
    float _1673 = _1671 * ((cbModelParam._m0[1u].w * (_1657 - _1557)) + _1557);
    float _1674 = _1671 * ((cbModelParam._m0[1u].w * (_1659 - _1559)) + _1559);
    float _1677 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, _1672 * cbSceneParam._m0[91u].x));
    float _1717 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1721 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1725 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1729 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1730 = _1717 / _1729;
    float _1731 = _1721 / _1729;
    float _1732 = _1725 / _1729;
    float _1879;
    float _1880;
    float _1881;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1759 = ((uint(_1732 > cbSceneParam._m0[59u].y) + uint(_1732 > cbSceneParam._m0[59u].x)) + uint(_1732 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1760 = _1759 + 43u;
        uint _1768 = _1759 + 44u;
        uint _1776 = _1759 + 45u;
        uint _1784 = _1759 + 46u;
        float _1795 = fma(_1729, cbSceneParam._m0[_1760].w, fma(_1725, cbSceneParam._m0[_1760].z, fma(_1721, cbSceneParam._m0[_1760].y, _1717 * cbSceneParam._m0[_1760].x)));
        float _1799 = fma(_1729, cbSceneParam._m0[_1768].w, fma(_1725, cbSceneParam._m0[_1768].z, fma(_1721, cbSceneParam._m0[_1768].y, _1717 * cbSceneParam._m0[_1768].x)));
        float _1807 = fma(_1729, cbSceneParam._m0[_1784].w, fma(_1725, cbSceneParam._m0[_1784].z, fma(_1721, cbSceneParam._m0[_1784].y, _1717 * cbSceneParam._m0[_1784].x)));
        float _1812 = cbSceneParam._m0[33u].z * _1807;
        float _1814 = cbSceneParam._m0[33u].w * _1807;
        float _1817 = fma(_1729, cbSceneParam._m0[_1776].w, fma(_1725, cbSceneParam._m0[_1776].z, fma(_1721, cbSceneParam._m0[_1776].y, _1717 * cbSceneParam._m0[_1776].x))) / _1807;
        float _1865 = (cbSceneParam._m0[33u].x - sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732))) * cbSceneParam._m0[33u].y;
        float _3861 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1872 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1812 + _1795) / _1807, (_1814 + _1799) / _1807), _1817), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 + _1795) / _1807, (_1799 - _1812) / _1807), _1817), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1795 - _1812) / _1807, (_1799 - _1814) / _1807), _1817), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1795 - _1814) / _1807, (_1812 + _1799) / _1807), _1817), 0.0)).x), vec4(0.25)));
        _1879 = 1.0 - (_1872 * cbSceneParam._m0[34u].x);
        _1880 = 1.0 - (_1872 * cbSceneParam._m0[34u].y);
        _1881 = 1.0 - (_1872 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1879 = 1.0;
        _1880 = 1.0;
        _1881 = 1.0;
    }
    float _1945;
    float _1947;
    float _1949;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1933 = fma(_1729, cbSceneParam._m0[63u].w, fma(_1725, cbSceneParam._m0[63u].z, fma(_1721, cbSceneParam._m0[63u].y, _1717 * cbSceneParam._m0[63u].x)));
        float _1934 = fma(_1729, cbSceneParam._m0[60u].w, fma(_1725, cbSceneParam._m0[60u].z, fma(_1721, cbSceneParam._m0[60u].y, _1717 * cbSceneParam._m0[60u].x))) / _1933;
        float _1935 = fma(_1729, cbSceneParam._m0[61u].w, fma(_1725, cbSceneParam._m0[61u].z, fma(_1721, cbSceneParam._m0[61u].y, _1717 * cbSceneParam._m0[61u].x))) / _1933;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1934 >= cbSceneParam._m0[64u].x) && (_1935 >= cbSceneParam._m0[64u].y)) && (_1934 <= cbSceneParam._m0[64u].z)) && (_1935 <= cbSceneParam._m0[64u].w))
        {
            float _2223 = fma(_1729, cbSceneParam._m0[62u].w, fma(_1725, cbSceneParam._m0[62u].z, fma(_1721, cbSceneParam._m0[62u].y, _1717 * cbSceneParam._m0[62u].x))) / _1933;
            float _2227 = isnan(cbSceneParam._m0[41u].w) ? _2223 : (isnan(_2223) ? cbSceneParam._m0[41u].w : max(_2223, cbSceneParam._m0[41u].w));
            float _2270 = (cbSceneParam._m0[33u].x - sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732))) * cbSceneParam._m0[33u].y;
            float _3877 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
            float _2277 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1934, cbSceneParam._m0[33u].w + _1935), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1934, _1935 - cbSceneParam._m0[33u].z), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1934 - cbSceneParam._m0[33u].z, _1935 - cbSceneParam._m0[33u].w), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1934 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1935), _2227), 0.0)).x), vec4(0.25)));
            float _2281 = 1.0 - (_2277 * cbSceneParam._m0[34u].x);
            float _2282 = 1.0 - (_2277 * cbSceneParam._m0[34u].y);
            float _2283 = 1.0 - (_2277 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2283) ? _1881 : (isnan(_1881) ? _2283 : min(_1881, _2283));
            frontier_phi_46_45_ladder_1 = isnan(_2282) ? _1880 : (isnan(_1880) ? _2282 : min(_1880, _2282));
            frontier_phi_46_45_ladder_2 = isnan(_2281) ? _1879 : (isnan(_1879) ? _2281 : min(_1879, _2281));
        }
        else
        {
            frontier_phi_46_45_ladder = _1881;
            frontier_phi_46_45_ladder_1 = _1880;
            frontier_phi_46_45_ladder_2 = _1879;
        }
        _1945 = frontier_phi_46_45_ladder_2;
        _1947 = frontier_phi_46_45_ladder_1;
        _1949 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1945 = _1879;
        _1947 = _1880;
        _1949 = _1881;
    }
    uvec4 _1954 = floatBitsToUint(cbInstanceData._m0[_627 + 5u]);
    uint _1956 = _1954.x * 14u;
    uint _1957 = _1956 + 13u;
    float _1962 = _652 + (-1.0);
    float _1965 = (cbLight._m0[_1957].x * _1962) + 1.0;
    float _1966 = (cbLight._m0[_1957].y * _1962) + 1.0;
    uint _1967 = _1956 + 5u;
    float _1973 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1977 = _1956 + 4u;
    float _1987 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
    uint _1991 = _1956 | 1u;
    float _2002 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_552, _553, _554));
    float _2005 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_552, _553, _554));
    float _3913 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _3924 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2010 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.3183098733425140380859375;
    float _2012 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.3183098733425140380859375;
    float _2019 = ((cbLight._m0[_1967].x * _1973) * _2012) + (((cbLight._m0[_1977].x * _1945) * _1987) * _2010);
    float _2020 = ((_1973 * cbLight._m0[_1967].y) * _2012) + (((cbLight._m0[_1977].y * _1947) * _1987) * _2010);
    float _2021 = ((_1973 * cbLight._m0[_1967].z) * _2012) + (((cbLight._m0[_1977].z * _1949) * _1987) * _2010);
    uint _2023 = _1956 + 8u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _555) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1956].x + _579;
    float _2039 = cbLight._m0[_1956].y + _580;
    float _2040 = cbLight._m0[_1956].z + _581;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1956].xyz));
    float _3935 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _2052 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _2053 = dot(vec3(_552, _553, _554), vec3(_2045, _2046, _2047));
    float _3957 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _2057 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2045, _2046, _2047));
    float _3968 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = _2037 * _2037;
    float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
    float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2077 = 1.0 - _2037;
    float _2088 = (0.5 / (((_2052 * ((_2051 * _2077) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2077) + _2037) * _2051))) * _2051;
    float _3979 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
    uint _2104 = _1956 + 9u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _555) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1991].x + _579;
    float _2118 = cbLight._m0[_1991].y + _580;
    float _2119 = cbLight._m0[_1991].z + _581;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1991].xyz));
    float _3990 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _2131 = dot(vec3(_552, _553, _554), vec3(_2124, _2125, _2126));
    float _4001 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2124, _2125, _2126));
    float _4012 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2116 * _2116;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2116;
    float _2163 = (0.5 / (((_2052 * ((_2130 * _2153) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2153) + _2116) * _2130))) * _2130;
    float _4023 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    float _2175 = (((_2152 * cbLight._m0[_2104].x) * _2165) * _1973) + ((((cbLight._m0[_2023].x * _1945) * _2076) * _2090) * _1987);
    float _2176 = (((_2152 * cbLight._m0[_2104].y) * _2165) * _1973) + ((((cbLight._m0[_2023].y * _1947) * _2076) * _2090) * _1987);
    float _2177 = (((_2152 * cbLight._m0[_2104].z) * _2165) * _1973) + ((((cbLight._m0[_2023].z * _1949) * _2076) * _2090) * _1987);
    float _2340;
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    if (_1954.y == 0u)
    {
        uvec4 _2295 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2296 = _2295.x;
        uint _2307 = uint((float(_2295.y) * floor(float(uint(cbSceneParam._m0[85u].y * _588) / _2296))) + floor(float(uint(cbSceneParam._m0[85u].x * _587) / _2296)));
        float _2317 = (log2(_1732 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2318 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        uint _2321 = uint(isnan(14.0) ? _2318 : (isnan(_2318) ? 14.0 : min(_2318, 14.0)));
        uvec4 _2326 = texelFetch(g_lightClusterGridBuffer, int(((_2321 << 2u) + (_2307 << 6u)) >> 2u));
        uint _2327 = _2326.x;
        uint _2328 = _2295.z;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        if (((((1u << ((_2328 >> 4u) & 15u)) + 4294967295u) & _2327) == 0u) || ((_2328 & 240u) == 0u))
        {
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
        }
        else
        {
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            float _2626 = 0.0;
            uint _2627 = 0u;
            uint _2636;
            bool _2637;
            for (;;)
            {
                _2636 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2627 << 2u)) >> 2u)).x;
                _2637 = _2636 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2637)
                {
                    frontier_phi_70_pred = _2624;
                    frontier_phi_70_pred_1 = _2626;
                    frontier_phi_70_pred_2 = _2625;
                    frontier_phi_70_pred_3 = _2623;
                    frontier_phi_70_pred_4 = _2622;
                    frontier_phi_70_pred_5 = _2621;
                }
                else
                {
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    uint _2772;
                    _2766 = _2621;
                    _2767 = _2622;
                    _2768 = _2623;
                    _2769 = _2624;
                    _2770 = _2625;
                    _2771 = _2626;
                    _2772 = _2636;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    for (;;)
                    {
                        uint _2776 = uint(findLSB(_2772)) + (_2627 << 5u);
                        uint _2773 = (_2772 + 4294967295u) & _2772;
                        uint _2778 = _2776 * 48u;
                        vec4 _2792 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 3u)).x));
                        uint _2798 = (_2776 * 48u) + 4u;
                        vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2798)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 3u)).x));
                        uint _2817 = (_2776 * 48u) + 8u;
                        vec3 _2828 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x));
                        float _2832 = _2792.x - _1730;
                        float _2833 = _2792.y - _1731;
                        float _2834 = _2792.z - _1732;
                        float _2835 = dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834));
                        float _2838 = inversesqrt(_2835);
                        float _2839 = _2838 * _2832;
                        float _2840 = _2838 * _2833;
                        float _2841 = _2838 * _2834;
                        float _2842 = dot(vec3(_608, _611, _614), vec3(_2839, _2840, _2841));
                        float _2847 = 1.0 - (_2835 * _2792.w);
                        float _4044 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2848 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2849 = sqrt(_2835) * _2811.w;
                        float _2852 = 1.39999997615814208984375 / (_2849 + 1.39999997615814208984375);
                        float _2853 = _2852 * _2852;
                        float _2856 = ((1.0 - _2853) * _2842) + _2853;
                        float _2859 = _2849 * _2849;
                        float _2863 = ((isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))) * _2848) / ((_2859 * 0.699999988079071044921875) + 1.0);
                        float _2867 = (-0.0) - _1730;
                        float _2868 = (-0.0) - _1731;
                        float _2869 = (-0.0) - _1732;
                        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
                        float _2874 = _2873 * _2867;
                        float _2875 = _2873 * _2868;
                        float _2876 = _2873 * _2869;
                        float _2883 = exp2(log2(1.0 / ((_2859 * 3.5) + 5.0)) * 0.25);
                        float _2884 = 1.0 - _668;
                        float _2891 = sqrt(1.0 - ((1.0 - (_2884 * _2884)) * (1.0 - (_2883 * _2883))));
                        float _2892 = _2891 * _2891;
                        float _2893 = _2892 * _2892;
                        float _2894 = _2874 + _2839;
                        float _2895 = _2875 + _2840;
                        float _2896 = _2876 + _2841;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2904 = dot(vec3(_608, _611, _614), vec3(_2874, _2875, _2876));
                        float _4060 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2907 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2908 = dot(vec3(_608, _611, _614), vec3(_2900 * _2894, _2900 * _2895, _2900 * _2896));
                        float _4071 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2911 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2915 = ((_2911 * _2911) * (_2893 + (-1.0))) + 1.0;
                        float _2916 = _2852 * _2892;
                        float _2917 = _2916 * _2916;
                        float _2920 = ((1.0 - _2917) * _2842) + _2917;
                        float _4082 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2921 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2922 = 1.0 - _2892;
                        float _2932 = (0.5 / (((_2921 * ((_2907 * _2922) + _2892)) + 9.9999999392252902907785028219223e-09) + (((_2921 * _2922) + _2892) * _2907))) * _2921;
                        float _4093 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2943 = (((_2893 * 3.1415927410125732421875) * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) / ((_2915 * _2915) * ((_2859 * 2.1991131305694580078125) + 3.141590118408203125))) * _2848;
                        _2701 = (_2863 * _2811.x) + _2769;
                        _2702 = (_2863 * _2811.y) + _2770;
                        _2703 = (_2863 * _2811.z) + _2771;
                        _2698 = (_2943 * _2828.x) + _2766;
                        _2699 = (_2943 * _2828.y) + _2767;
                        _2700 = (_2943 * _2828.z) + _2768;
                        if (_2773 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2766 = _2698;
                            _2767 = _2699;
                            _2768 = _2700;
                            _2769 = _2701;
                            _2770 = _2702;
                            _2771 = _2703;
                            _2772 = _2773;
                        }
                    }
                    frontier_phi_70_pred = _2701;
                    frontier_phi_70_pred_1 = _2703;
                    frontier_phi_70_pred_2 = _2702;
                    frontier_phi_70_pred_3 = _2700;
                    frontier_phi_70_pred_4 = _2699;
                    frontier_phi_70_pred_5 = _2698;
                }
                _2458 = frontier_phi_70_pred;
                _2462 = frontier_phi_70_pred_1;
                _2460 = frontier_phi_70_pred_2;
                _2456 = frontier_phi_70_pred_3;
                _2454 = frontier_phi_70_pred_4;
                _2452 = frontier_phi_70_pred_5;
                uint _2628 = _2627 + 1u;
                if (_2628 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2621 = _2452;
                    _2622 = _2454;
                    _2623 = _2456;
                    _2624 = _2458;
                    _2625 = _2460;
                    _2626 = _2462;
                    _2627 = _2628;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
        }
        uvec4 _2465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2466 = _2465.z;
        uint _2468 = (_2466 >> 8u) & 15u;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        if (((4294967295u << _2468) & _2327) == 0u)
        {
            _2589 = _2451;
            _2591 = _2453;
            _2593 = _2455;
            _2595 = _2457;
            _2597 = _2459;
            _2599 = _2461;
        }
        else
        {
            float _2614 = inversesqrt(dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732)));
            float _2615 = _2614 * _1730;
            float _2616 = _2614 * _1731;
            float _2617 = _2614 * _1732;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2468 < ((_2466 >> 12u) & 15u))
            {
                float _2590;
                float _2592;
                float _2594;
                float _2596;
                float _2598;
                float _2600;
                float _2749 = _2451;
                float _2750 = _2453;
                float _2751 = _2455;
                float _2752 = _2457;
                float _2753 = _2459;
                float _2754 = _2461;
                uint _2755 = _2468;
                uint _2764;
                bool _2765;
                for (;;)
                {
                    _2764 = texelFetch(g_lightClassification, int((((_2321 << 5u) + (_2307 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                    _2765 = _2764 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2765)
                    {
                        frontier_phi_76_pred = _2754;
                        frontier_phi_76_pred_1 = _2753;
                        frontier_phi_76_pred_2 = _2752;
                        frontier_phi_76_pred_3 = _2751;
                        frontier_phi_76_pred_4 = _2750;
                        frontier_phi_76_pred_5 = _2749;
                    }
                    else
                    {
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _2961 = _2749;
                        float _2962 = _2750;
                        float _2963 = _2751;
                        float _2964 = _2752;
                        float _2965 = _2753;
                        float _2966 = _2754;
                        uint _2967 = _2764;
                        uint _2968;
                        vec4 _2993;
                        float _2994;
                        vec4 _3009;
                        vec3 _3021;
                        vec4 _3036;
                        vec4 _3051;
                        float _3097;
                        bool _3098;
                        for (;;)
                        {
                            uint _2978 = ((_2755 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2967));
                            _2968 = (_2967 + 4294967295u) & _2967;
                            uint _2980 = _2978 * 40u;
                            _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            _2994 = _2993.w;
                            uint _2996 = (_2978 * 40u) + 4u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            uint _3011 = (_2978 * 40u) + 8u;
                            _3021 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x));
                            uint _3023 = (_2978 * 40u) + 16u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3038 = (_2978 * 40u) + 20u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3053 = (_2978 * 40u) + 24u;
                            vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3072 = (_2978 * 40u) + 28u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3097 = fma(_1732, _3085.z, fma(_1731, _3085.y, _3085.x * _1730)) + _3085.w;
                            _3098 = !((fma(_1732, _3066.z, fma(_1731, _3066.y, _3066.x * _1730)) + _3066.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3098)
                            {
                                float _3125 = _2993.x - _1730;
                                float _3126 = _2993.y - _1731;
                                float _3127 = _2993.z - _1732;
                                float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                                float _3131 = inversesqrt(_3128);
                                float _3132 = _3131 * _3125;
                                float _3133 = _3131 * _3126;
                                float _3134 = _3131 * _3127;
                                float _3138 = 1.0 - (_3128 / (_2994 * _2994));
                                float _4104 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3143 = sqrt(_3128) * _3009.w;
                                float _3145 = 1.39999997615814208984375 / (_3143 + 1.39999997615814208984375);
                                float _3146 = _3145 * _3145;
                                float _3149 = ((1.0 - _3146) * dot(vec3(_3132, _3133, _3134), vec3(_608, _611, _614))) + _3146;
                                float _3152 = _3143 * _3143;
                                float _3156 = (fma(_1732, _3036.z, fma(_1731, _3036.y, _3036.x * _1730)) + _3036.w) / _3097;
                                float _3157 = (fma(_1732, _3051.z, fma(_1731, _3051.y, _3051.x * _1730)) + _3051.w) / _3097;
                                float _3161 = 1.0 - dot(vec2(_3156, _3157), vec2(_3156, _3157));
                                float _4120 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3162 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3163 = _3162 * (((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3139) / ((_3152 * 0.699999988079071044921875) + 1.0));
                                float _3175 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                                float _3176 = 1.0 - _668;
                                float _3183 = sqrt(1.0 - ((1.0 - (_3176 * _3176)) * (1.0 - (_3175 * _3175))));
                                float _3184 = _3183 * _3183;
                                float _3185 = _3184 * _3184;
                                float _3186 = _3132 - _2615;
                                float _3187 = _3133 - _2616;
                                float _3188 = _3134 - _2617;
                                float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                                float _3196 = dot(vec3(_608, _611, _614), vec3((-0.0) - _2615, (-0.0) - _2616, (-0.0) - _2617));
                                float _4131 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3199 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3200 = dot(vec3(_608, _611, _614), vec3(_3192 * _3186, _3192 * _3187, _3192 * _3188));
                                float _4142 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3203 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3207 = ((_3203 * _3203) * (_3185 + (-1.0))) + 1.0;
                                float _3208 = _3145 * _3184;
                                float _3209 = _3208 * _3208;
                                float _3215 = ((1.0 - _3209) * dot(vec3(_608, _611, _614), vec3(_3132, _3133, _3134))) + _3209;
                                float _4153 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3217 = 1.0 - _3184;
                                float _3227 = (0.5 / (((_3216 * ((_3199 * _3217) + _3184)) + 9.9999999392252902907785028219223e-09) + (((_3216 * _3217) + _3184) * _3199))) * _3216;
                                float _4164 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3237 = (_3162 * _3139) * (((_3185 * 3.1415927410125732421875) * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) / ((_3207 * _3207) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3163 * _3009.z;
                                frontier_phi_82_pred_1 = _3163 * _3009.y;
                                frontier_phi_82_pred_2 = _3163 * _3009.x;
                                frontier_phi_82_pred_3 = _3237 * _3021.z;
                                frontier_phi_82_pred_4 = _3237 * _3021.y;
                                frontier_phi_82_pred_5 = _3237 * _3021.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3246 = frontier_phi_82_pred;
                            _3245 = frontier_phi_82_pred_1;
                            _3244 = frontier_phi_82_pred_2;
                            _3243 = frontier_phi_82_pred_3;
                            _3242 = frontier_phi_82_pred_4;
                            _3241 = frontier_phi_82_pred_5;
                            _2951 = _3244 + _2964;
                            _2952 = _3245 + _2965;
                            _2953 = _3246 + _2966;
                            _2948 = _3241 + _2961;
                            _2949 = _3242 + _2962;
                            _2950 = _3243 + _2963;
                            if (_2968 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2968;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2953;
                        frontier_phi_76_pred_1 = _2952;
                        frontier_phi_76_pred_2 = _2951;
                        frontier_phi_76_pred_3 = _2950;
                        frontier_phi_76_pred_4 = _2949;
                        frontier_phi_76_pred_5 = _2948;
                    }
                    _2600 = frontier_phi_76_pred;
                    _2598 = frontier_phi_76_pred_1;
                    _2596 = frontier_phi_76_pred_2;
                    _2594 = frontier_phi_76_pred_3;
                    _2592 = frontier_phi_76_pred_4;
                    _2590 = frontier_phi_76_pred_5;
                    uint _2756 = _2755 + 1u;
                    if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2749 = _2590;
                        _2750 = _2592;
                        _2751 = _2594;
                        _2752 = _2596;
                        _2753 = _2598;
                        _2754 = _2600;
                        _2755 = _2756;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2598;
                frontier_phi_63_64_ladder_1 = _2600;
                frontier_phi_63_64_ladder_2 = _2596;
                frontier_phi_63_64_ladder_3 = _2594;
                frontier_phi_63_64_ladder_4 = _2592;
                frontier_phi_63_64_ladder_5 = _2590;
            }
            else
            {
                frontier_phi_63_64_ladder = _2459;
                frontier_phi_63_64_ladder_1 = _2461;
                frontier_phi_63_64_ladder_2 = _2457;
                frontier_phi_63_64_ladder_3 = _2455;
                frontier_phi_63_64_ladder_4 = _2453;
                frontier_phi_63_64_ladder_5 = _2451;
            }
            _2589 = frontier_phi_63_64_ladder_5;
            _2591 = frontier_phi_63_64_ladder_4;
            _2593 = frontier_phi_63_64_ladder_3;
            _2595 = frontier_phi_63_64_ladder_2;
            _2597 = frontier_phi_63_64_ladder;
            _2599 = frontier_phi_63_64_ladder_1;
        }
        float _2604 = isnan(1.0) ? _652 : (isnan(_652) ? 1.0 : min(_652, 1.0));
        _2340 = (_2604 * _2595) + _2019;
        _2342 = (_2604 * _2597) + _2020;
        _2344 = (_2604 * _2599) + _2021;
        _2346 = ((_2589 * 0.039999999105930328369140625) * _2604) + _2175;
        _2348 = ((_2591 * 0.039999999105930328369140625) * _2604) + _2176;
        _2350 = ((_2593 * 0.039999999105930328369140625) * _2604) + _2177;
    }
    else
    {
        _2340 = _2019;
        _2342 = _2020;
        _2344 = _2021;
        _2346 = _2175;
        _2348 = _2176;
        _2350 = _2177;
    }
    uint _2356 = _628 + uint(cbMatDynParam._m0[0u].w);
    float _4180 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4191 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4202 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _2381 = (((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2340 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _652))) + ((_2346 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1463)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2356].x * (_484 - (_484 * _288)));
    float _2383 = ((cbInstanceData._m0[_2356].y * (_485 - (_485 * _288))) + ((_2348 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1463)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2342 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _652)));
    float _2385 = ((cbInstanceData._m0[_2356].z * (_486 - (_486 * _288))) + ((_2350 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1463)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2344 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _652)));
    uint _2389 = _627 + 6u;
    float _2397 = _587 / cbSceneParam._m0[86u].x;
    float _2398 = _588 / cbSceneParam._m0[86u].y;
    vec4 _2412 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2397, _2398, (log2((isnan(cbSceneParam._m0[77u].w) ? _574 : (isnan(_574) ? cbSceneParam._m0[77u].w : min(_574, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2414 = _2412.x;
    float _2415 = _2412.y;
    float _2416 = _2412.z;
    float _2417 = _2412.w;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_574 > cbSceneParam._m0[78u].w)
    {
        float _2476 = isnan(_574) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _574 : min(cbSceneParam._m0[80u].w, _574));
        float _2477 = _2476 / _574;
        float _2488 = _2477 * _261;
        float _2489 = _262 * _2477;
        float _2490 = (-0.0) - _2489;
        float _2491 = _2477 * _263;
        float _2493 = (cbSceneParam._m0[77u].w * _2490) / _2476;
        float _2494 = _2493 + cbSceneParam._m0[79u].w;
        float _2495 = cbSceneParam._m0[79u].w - _2489;
        float _2501 = sqrt(((_2488 * _2488) + (_2489 * _2489)) + (_2491 * _2491));
        float _2504 = (1.0 - (cbSceneParam._m0[77u].w / _2476)) * _2501;
        float _2509 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2511 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2711;
        if (abs((_2490 - _2493) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2711 = ((((_2494 > 0.0) ? exp2(_2509 * _2494) : (2.0 - exp2(_2511 * _2494))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2504;
        }
        else
        {
            float _2650 = 1.0 / cbSceneParam._m0[80u].x;
            float _2651 = isnan(_2495) ? _2494 : (isnan(_2494) ? _2495 : max(_2494, _2495));
            float _2652 = isnan(_2495) ? _2494 : (isnan(_2494) ? _2495 : min(_2494, _2495));
            float _2661 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : min(_2651, 0.0));
            float _2662 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : min(_2652, 0.0));
            _2711 = ((abs(_2501 / _2490) * cbSceneParam._m0[80u].y) * ((((_2661 - _2662) * 2.0) - ((exp2(_2509 * (isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0)))) - exp2(_2509 * (isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0))))) * _2650)) - ((exp2(_2511 * _2661) - exp2(_2511 * _2662)) * _2650))) + (_2504 * cbSceneParam._m0[80u].z);
        }
        vec4 _2713 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2397, _2398, 1.0), 0.0);
        float _2722 = exp2((_2711 * (-1.44269502162933349609375)) * (1.0 - _2713.w));
        float _2723 = log2(_2722);
        float _2739 = log2(_2417);
        _2513 = (exp2(_2739 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].x)) * _2713.x) / cbSceneParam._m0[78u].x)) + _2414;
        _2515 = (exp2(_2739 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].y)) * _2713.y) / cbSceneParam._m0[78u].y)) + _2415;
        _2517 = (exp2(_2739 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].z)) * _2713.z) / cbSceneParam._m0[78u].z)) + _2416;
        _2519 = _2722 * _2417;
    }
    else
    {
        _2513 = _2414;
        _2515 = _2415;
        _2517 = _2416;
        _2519 = _2417;
    }
    float _2531 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2532 = _2531 == 3.0;
    float _2533 = log2(_2519);
    float _2540 = exp2(_2533 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0)));
    float _2541 = exp2(_2533 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0)));
    float _2542 = exp2(_2533 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0)));
    float _2551 = (_2531 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2551 * (_2532 ? _2540 : (_2540 + (cbSceneParam._m0[72u].w * _2513)));
    SV_Target.y = _2551 * (_2532 ? _2541 : (_2541 + (cbSceneParam._m0[72u].w * _2515)));
    SV_Target.z = _2551 * (_2532 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2517)));
    SV_Target.w = cbInstanceData._m0[_2389].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2389].w;
}


