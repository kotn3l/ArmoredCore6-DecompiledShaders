#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1006;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _393 = ((_387 * _381) + (_355 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _394 = ((_387 * _382) + (_356 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    float _414 = (_390 > 0.0) ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_395 + (-0.5)) + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_396 + (-0.5)) + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _472 = 0.5 - (_288 * 0.5);
    float _479 = ((((_454 - (_454 * _288)) * cbMtdParam._m0[9u].x) - _301) * _472) + _301;
    float _480 = ((((_455 - (_455 * _288)) * cbMtdParam._m0[9u].y) - _303) * _472) + _303;
    float _481 = (((cbMtdParam._m0[9u].z * (_456 - (_456 * _288))) - _305) * _472) + _305;
    vec4 _493 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _497 = _493.z;
    float _500 = (_493.x * 2.0) + (-1.0);
    float _501 = (_493.y * 2.0) + (-1.0);
    float _502 = dot(vec2(_500, _501), vec2(_500, _501));
    float _3357 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _507 = sqrt(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))));
    float _508 = _497 * _288;
    float _515 = (cbMtdParam._m0[15u].w * ((_327 - _508) + ((_497 - _327) * _288))) + _508;
    float _519 = (cbMtdParam._m0[16u].x * _355) + _500;
    float _520 = (cbMtdParam._m0[16u].x * _356) + _501;
    float _523 = fma(_507, _197, fma(_520, _204, _519 * _190));
    float _526 = fma(_507, _198, fma(_520, _205, _519 * _191));
    float _529 = fma(_507, _199, fma(_520, _206, _519 * _192));
    float _533 = inversesqrt(dot(vec3(_523, _526, _529), vec3(_523, _526, _529)));
    float _534 = _533 * _523;
    float _535 = _533 * _526;
    float _536 = _533 * _529;
    float _3368 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _537 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3390 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3401 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _556 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _561 = _261 * _560;
    float _562 = _262 * _560;
    float _563 = _263 * _560;
    float _569 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _570 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _590 = fma(_536, cbSceneParam._m0[5u].z, fma(_535, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _534));
    float _593 = fma(_536, cbSceneParam._m0[6u].z, fma(_535, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _534));
    float _596 = fma(_536, cbSceneParam._m0[7u].z, fma(_535, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _534));
    uint _609 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = (_609 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3412 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _569, cbSceneParam._m0[86u].y * _570));
    float _635 = _632.x * TEXCOORD.z;
    float _636 = dot(vec3(_534, _535, _536), vec3(_561, _562, _563));
    float _639 = _636 * 2.0;
    float _643 = (_639 * _534) - _561;
    float _644 = (_639 * _535) - _562;
    float _645 = (_639 * _536) - _563;
    float _649 = abs(dot(vec3(_561, _562, _563), vec3(_534, _535, _536)));
    float _3445 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _651 = sqrt(_537);
    float _664 = exp2((_651 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_651 * 3.0));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1005;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _732 = fma(_704, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696));
        float _736 = fma(_704, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696));
        float _740 = fma(_704, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696));
        float _763 = _696 + _534;
        float _764 = _700 + _535;
        float _765 = _704 + _536;
        float _775 = fma(_765, cbModelParam._m0[26u].z, fma(_764, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763)) - _732;
        float _776 = fma(_765, cbModelParam._m0[27u].z, fma(_764, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763)) - _736;
        float _777 = fma(_765, cbModelParam._m0[28u].z, fma(_764, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763)) - _740;
        float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
        float _794 = ((_781 * _775) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_732 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_781 * _776) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_736 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_781 * _777) / cbModelParam._m0[34u].z) + ((((((_740 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_794, _795, _796), 0.0);
        float _833 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_799.x + (-0.5));
        float _835 = _833 * (_799.y + (-0.5));
        float _836 = _833 * (_799.z + (-0.5));
        float _843 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_806.x + (-0.5));
        float _845 = _843 * (_806.y + (-0.5));
        float _846 = _843 * (_806.z + (-0.5));
        float _853 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_813.x + (-0.5));
        float _855 = _853 * (_813.y + (-0.5));
        float _856 = _853 * (_813.z + (-0.5));
        float _863 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_820.x + (-0.5));
        float _865 = _863 * (_820.y + (-0.5));
        float _866 = _863 * (_820.z + (-0.5));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = _834 * 0.5;
        float _871 = _844 * 0.5;
        float _872 = _854 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _887 = (dot(vec3(_534, _535, _536), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _897 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3493 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_899 + 1.0))) + _904) * _867;
        float _914 = _835 * 0.5;
        float _915 = _845 * 0.5;
        float _916 = _855 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_534, _535, _536), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3526 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_941 + 1.0))) + _946) * _868;
        float _956 = _836 * 0.5;
        float _957 = _846 * 0.5;
        float _958 = _856 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_534, _535, _536), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3559 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_983 + 1.0))) + _988) * _869;
        _1005 = _836;
        _1007 = _835;
        _1008 = _834;
        _1009 = _846;
        _1010 = _845;
        _1011 = _844;
        _1012 = _856;
        _1013 = _855;
        _1014 = _854;
        _1015 = _869;
        _1016 = _868;
        _1017 = _867;
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
    }
    else
    {
        _1005 = _1006;
        _1007 = _1006;
        _1008 = _1006;
        _1009 = _1006;
        _1010 = _1006;
        _1011 = _1006;
        _1012 = _1006;
        _1013 = _1006;
        _1014 = _1006;
        _1015 = _1006;
        _1016 = _1006;
        _1017 = _1006;
        _1018 = 0.0;
        _1019 = 0.0;
        _1020 = 0.0;
    }
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1046 = fma(_704, cbModelParam._m0[30u].z, fma(_700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _696));
        float _1050 = fma(_704, cbModelParam._m0[31u].z, fma(_700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _696));
        float _1054 = fma(_704, cbModelParam._m0[32u].z, fma(_700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _696));
        float _1077 = _696 + _534;
        float _1078 = _700 + _535;
        float _1079 = _704 + _536;
        float _1089 = fma(_1079, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077)) - _1046;
        float _1090 = fma(_1079, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077)) - _1050;
        float _1091 = fma(_1079, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077)) - _1054;
        float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
        float _1108 = ((_1095 * _1089) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1046 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1095 * _1090) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1050 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1095 * _1091) / cbModelParam._m0[35u].z) + ((((((_1054 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1108, _1109, _1110), 0.0);
        float _1145 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1112.x + (-0.5));
        float _1147 = _1145 * (_1112.y + (-0.5));
        float _1148 = _1145 * (_1112.z + (-0.5));
        float _1155 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1119.x + (-0.5));
        float _1157 = _1155 * (_1119.y + (-0.5));
        float _1158 = _1155 * (_1119.z + (-0.5));
        float _1165 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1126.x + (-0.5));
        float _1167 = _1165 * (_1126.y + (-0.5));
        float _1168 = _1165 * (_1126.z + (-0.5));
        float _1175 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1133.x + (-0.5));
        float _1177 = _1175 * (_1133.y + (-0.5));
        float _1178 = _1175 * (_1133.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_534, _535, _536), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3622 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1209 + 1.0))) + _1214) * _1179;
        float _1224 = _1147 * 0.5;
        float _1225 = _1157 * 0.5;
        float _1226 = _1167 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_534, _535, _536), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3655 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1251 + 1.0))) + _1256) * _1180;
        float _1266 = _1148 * 0.5;
        float _1267 = _1158 * 0.5;
        float _1268 = _1168 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_534, _535, _536), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3688 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1293 + 1.0))) + _1298) * _1181;
        _1315 = _1148;
        _1316 = _1147;
        _1317 = _1146;
        _1318 = _1158;
        _1319 = _1157;
        _1320 = _1156;
        _1321 = _1168;
        _1322 = _1167;
        _1323 = _1166;
        _1324 = _1181;
        _1325 = _1180;
        _1326 = _1179;
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1006;
        _1316 = _1006;
        _1317 = _1006;
        _1318 = _1006;
        _1319 = _1006;
        _1320 = _1006;
        _1321 = _1006;
        _1322 = _1006;
        _1323 = _1006;
        _1324 = _1006;
        _1325 = _1006;
        _1326 = _1006;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1018)) + _1018;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1019)) + _1019;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1020)) + _1020;
    float _1362 = fma(_1341, cbSceneParam._m0[89u].z, fma(_1340, cbSceneParam._m0[89u].y, _1339 * cbSceneParam._m0[89u].x));
    float _1365 = fma(_1341, cbSceneParam._m0[90u].z, fma(_1340, cbSceneParam._m0[90u].y, _1339 * cbSceneParam._m0[90u].x));
    float _1368 = fma(_1341, cbSceneParam._m0[91u].z, fma(_1340, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1339));
    float _1383 = _643 * 0.5;
    float _1384 = _644 * 0.5;
    float _1385 = _645 * 0.5;
    float _1386 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1389 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1392 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1426;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1399 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1005, _1009, _1012, _1015));
        float _1403 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1407 = dot(vec4(_1383, _1384, _1385, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1414 = dot(vec4(cbModelParam._m0[39u]), vec4(_1383, _1384, _1385, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1414) ? 0.0 : (isnan(0.0) ? _1414 : max(0.0, _1414))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1437;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1428 = dot(vec4(cbModelParam._m0[40u]), vec4(_1383, _1384, _1385, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1428) ? 0.0 : (isnan(0.0) ? _1428 : max(0.0, _1428))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1441 = (_1437 * cbModelParam._m0[1u].x) + (_1426 * (1.0 - cbModelParam._m0[1u].x));
    float _1451 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _537);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1451 : min(cbModelParam._m0[25u].z, _1451));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1500 = fma(_704, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696)) + cbModelParam._m0[13u].w;
        float _1504 = fma(_704, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696)) + cbModelParam._m0[14u].w;
        float _1508 = fma(_704, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696)) + cbModelParam._m0[15u].w;
        float _1511 = fma(_645, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643));
        float _1514 = fma(_645, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643));
        float _1517 = fma(_645, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643));
        float _1545;
        if (_1511 > 0.0)
        {
            _1545 = abs((1.0 - _1500) / _1511);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1500 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1545 = frontier_phi_22_20_ladder;
        }
        float _1714;
        if (_1514 > 0.0)
        {
            _1714 = abs((1.0 - _1504) / _1514);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1504 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1714 = frontier_phi_31_27_ladder;
        }
        float _2158;
        if (_1517 > 0.0)
        {
            _2158 = abs((1.0 - _1508) / _1517);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1508 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2158 = frontier_phi_43_38_ladder;
        }
        float _2160 = isnan(_1714) ? _1545 : (isnan(_1545) ? _1714 : min(_1545, _1714));
        float _2161 = isnan(_2158) ? _2160 : (isnan(_2160) ? _2158 : min(_2160, _2158));
        float _2165 = (_2161 * _1511) + _1500;
        float _2166 = (_2161 * _1514) + _1504;
        float _2167 = (_2161 * _1517) + _1508;
        float _2168 = _2161 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2168;
        float _2172 = _2168 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 > _2172) || ((_2166 < _2170) || ((_2165 < _2170) || (_2165 > _2172))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2167, cbModelParam._m0[9u].z, fma(_2166, cbModelParam._m0[9u].y, _2165 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2167, cbModelParam._m0[10u].z, fma(_2166, cbModelParam._m0[10u].y, _2165 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2167, cbModelParam._m0[11u].z, fma(_2166, cbModelParam._m0[11u].y, _2165 * cbModelParam._m0[11u].x))), _1452);
            frontier_phi_21_43_ladder = _2401.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2401.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2401.z * cbModelParam._m0[1u].y;
        }
        _1533 = frontier_phi_21_43_ladder_1;
        _1535 = frontier_phi_21_43_ladder;
        _1537 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_643, _644, _645), _1452);
        _1533 = _1521.x * cbModelParam._m0[1u].y;
        _1535 = _1521.y * cbModelParam._m0[1u].y;
        _1537 = _1521.z * cbModelParam._m0[1u].y;
    }
    float _1541 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _537);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1541 : min(cbModelParam._m0[25u].w, _1541));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1595 = fma(_704, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696)) + cbModelParam._m0[21u].w;
        float _1599 = fma(_704, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696)) + cbModelParam._m0[22u].w;
        float _1603 = fma(_704, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696)) + cbModelParam._m0[23u].w;
        float _1606 = fma(_645, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643));
        float _1609 = fma(_645, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643));
        float _1612 = fma(_645, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643));
        float _1719;
        if (_1606 > 0.0)
        {
            _1719 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1719 = frontier_phi_33_29_ladder;
        }
        float _2185;
        if (_1609 > 0.0)
        {
            _2185 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2185 = frontier_phi_45_40_ladder;
        }
        float _2522;
        if (_1612 > 0.0)
        {
            _2522 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2522 = frontier_phi_57_52_ladder;
        }
        float _2524 = isnan(_2185) ? _1719 : (isnan(_1719) ? _2185 : min(_1719, _2185));
        float _2525 = isnan(_2522) ? _2524 : (isnan(_2524) ? _2522 : min(_2524, _2522));
        float _2529 = (_2525 * _1606) + _1595;
        float _2530 = (_2525 * _1609) + _1599;
        float _2531 = (_2525 * _1612) + _1603;
        float _2532 = _2525 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2532;
        float _2535 = _2532 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2531 > _2535) || ((_2531 < _2533) || ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 < _2533) || (_2529 > _2535))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2531, cbModelParam._m0[17u].z, fma(_2530, cbModelParam._m0[17u].y, _2529 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2531, cbModelParam._m0[18u].z, fma(_2530, cbModelParam._m0[18u].y, _2529 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2531, cbModelParam._m0[19u].z, fma(_2530, cbModelParam._m0[19u].y, _2529 * cbModelParam._m0[19u].x))), _1542);
            frontier_phi_30_57_ladder = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2652.x * cbModelParam._m0[1u].z;
        }
        _1631 = frontier_phi_30_57_ladder_2;
        _1633 = frontier_phi_30_57_ladder_1;
        _1635 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_643, _644, _645), _1542);
        _1631 = _1615.x * cbModelParam._m0[1u].z;
        _1633 = _1615.y * cbModelParam._m0[1u].z;
        _1635 = _1615.z * cbModelParam._m0[1u].z;
    }
    float _1647 = ((((1.0 - _664) * ((_651 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_664 * _651)) * _635;
    float _1648 = _1647 * ((cbModelParam._m0[1u].w * (_1631 - _1533)) + _1533);
    float _1649 = _1647 * ((cbModelParam._m0[1u].w * (_1633 - _1535)) + _1535);
    float _1650 = _1647 * ((cbModelParam._m0[1u].w * (_1635 - _1537)) + _1537);
    float _1653 = fma(_1650, cbSceneParam._m0[89u].z, fma(_1649, cbSceneParam._m0[89u].y, _1648 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1650, cbSceneParam._m0[90u].z, fma(_1649, cbSceneParam._m0[90u].y, _1648 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1650, cbSceneParam._m0[91u].z, fma(_1649, cbSceneParam._m0[91u].y, _1648 * cbSceneParam._m0[91u].x));
    float _1693 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1697 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1701 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1705 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1706 = _1693 / _1705;
    float _1707 = _1697 / _1705;
    float _1708 = _1701 / _1705;
    float _1855;
    float _1856;
    float _1857;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1735 = ((uint(_1708 > cbSceneParam._m0[59u].y) + uint(_1708 > cbSceneParam._m0[59u].x)) + uint(_1708 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1736 = _1735 + 43u;
        uint _1744 = _1735 + 44u;
        uint _1752 = _1735 + 45u;
        uint _1760 = _1735 + 46u;
        float _1771 = fma(_1705, cbSceneParam._m0[_1736].w, fma(_1701, cbSceneParam._m0[_1736].z, fma(_1697, cbSceneParam._m0[_1736].y, _1693 * cbSceneParam._m0[_1736].x)));
        float _1775 = fma(_1705, cbSceneParam._m0[_1744].w, fma(_1701, cbSceneParam._m0[_1744].z, fma(_1697, cbSceneParam._m0[_1744].y, _1693 * cbSceneParam._m0[_1744].x)));
        float _1783 = fma(_1705, cbSceneParam._m0[_1760].w, fma(_1701, cbSceneParam._m0[_1760].z, fma(_1697, cbSceneParam._m0[_1760].y, _1693 * cbSceneParam._m0[_1760].x)));
        float _1788 = cbSceneParam._m0[33u].z * _1783;
        float _1790 = cbSceneParam._m0[33u].w * _1783;
        float _1793 = fma(_1705, cbSceneParam._m0[_1752].w, fma(_1701, cbSceneParam._m0[_1752].z, fma(_1697, cbSceneParam._m0[_1752].y, _1693 * cbSceneParam._m0[_1752].x))) / _1783;
        float _1841 = (cbSceneParam._m0[33u].x - sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708))) * cbSceneParam._m0[33u].y;
        float _3814 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1848 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 + _1771) / _1783, (_1790 + _1775) / _1783), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1790 + _1771) / _1783, (_1775 - _1788) / _1783), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1771 - _1788) / _1783, (_1775 - _1790) / _1783), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1771 - _1790) / _1783, (_1788 + _1775) / _1783), _1793), 0.0)).x), vec4(0.25)));
        _1855 = 1.0 - (_1848 * cbSceneParam._m0[34u].x);
        _1856 = 1.0 - (_1848 * cbSceneParam._m0[34u].y);
        _1857 = 1.0 - (_1848 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1855 = 1.0;
        _1856 = 1.0;
        _1857 = 1.0;
    }
    float _1921;
    float _1923;
    float _1925;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1909 = fma(_1705, cbSceneParam._m0[63u].w, fma(_1701, cbSceneParam._m0[63u].z, fma(_1697, cbSceneParam._m0[63u].y, _1693 * cbSceneParam._m0[63u].x)));
        float _1910 = fma(_1705, cbSceneParam._m0[60u].w, fma(_1701, cbSceneParam._m0[60u].z, fma(_1697, cbSceneParam._m0[60u].y, _1693 * cbSceneParam._m0[60u].x))) / _1909;
        float _1911 = fma(_1705, cbSceneParam._m0[61u].w, fma(_1701, cbSceneParam._m0[61u].z, fma(_1697, cbSceneParam._m0[61u].y, _1693 * cbSceneParam._m0[61u].x))) / _1909;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1910 >= cbSceneParam._m0[64u].x) && (_1911 >= cbSceneParam._m0[64u].y)) && (_1910 <= cbSceneParam._m0[64u].z)) && (_1911 <= cbSceneParam._m0[64u].w))
        {
            float _2198 = fma(_1705, cbSceneParam._m0[62u].w, fma(_1701, cbSceneParam._m0[62u].z, fma(_1697, cbSceneParam._m0[62u].y, _1693 * cbSceneParam._m0[62u].x))) / _1909;
            float _2202 = isnan(cbSceneParam._m0[41u].w) ? _2198 : (isnan(_2198) ? cbSceneParam._m0[41u].w : max(_2198, cbSceneParam._m0[41u].w));
            float _2245 = (cbSceneParam._m0[33u].x - sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708))) * cbSceneParam._m0[33u].y;
            float _3830 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
            float _2252 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1910, cbSceneParam._m0[33u].w + _1911), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1910, _1911 - cbSceneParam._m0[33u].z), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1910 - cbSceneParam._m0[33u].z, _1911 - cbSceneParam._m0[33u].w), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1910 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1911), _2202), 0.0)).x), vec4(0.25)));
            float _2256 = 1.0 - (_2252 * cbSceneParam._m0[34u].x);
            float _2257 = 1.0 - (_2252 * cbSceneParam._m0[34u].y);
            float _2258 = 1.0 - (_2252 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2257) ? _1856 : (isnan(_1856) ? _2257 : min(_1856, _2257));
            frontier_phi_42_41_ladder_1 = isnan(_2256) ? _1855 : (isnan(_1855) ? _2256 : min(_1855, _2256));
            frontier_phi_42_41_ladder_2 = isnan(_2258) ? _1857 : (isnan(_1857) ? _2258 : min(_1857, _2258));
        }
        else
        {
            frontier_phi_42_41_ladder = _1856;
            frontier_phi_42_41_ladder_1 = _1855;
            frontier_phi_42_41_ladder_2 = _1857;
        }
        _1921 = frontier_phi_42_41_ladder_1;
        _1923 = frontier_phi_42_41_ladder;
        _1925 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1921 = _1855;
        _1923 = _1856;
        _1925 = _1857;
    }
    uvec4 _1930 = floatBitsToUint(cbInstanceData._m0[_609 + 5u]);
    uint _1932 = _1930.x * 14u;
    uint _1933 = _1932 + 13u;
    float _1938 = _635 + (-1.0);
    float _1941 = (cbLight._m0[_1933].x * _1938) + 1.0;
    float _1942 = (cbLight._m0[_1933].y * _1938) + 1.0;
    uint _1943 = _1932 + 5u;
    float _1949 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1953 = _1932 + 4u;
    float _1962 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1966 = _1932 | 1u;
    float _1977 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_534, _535, _536));
    float _1980 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_534, _535, _536));
    float _3866 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _3877 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1985 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.3183098733425140380859375;
    float _1987 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.3183098733425140380859375;
    float _1994 = ((cbLight._m0[_1943].x * _1949) * _1987) + (((cbLight._m0[_1953].x * _1921) * _1962) * _1985);
    float _1995 = ((_1949 * cbLight._m0[_1943].y) * _1987) + (((cbLight._m0[_1953].y * _1923) * _1962) * _1985);
    float _1996 = ((_1949 * cbLight._m0[_1943].z) * _1987) + (((cbLight._m0[_1953].z * _1925) * _1962) * _1985);
    uint _1998 = _1932 + 8u;
    float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _537) * 0.949999988079071044921875);
    float _2012 = _2011 * _2011;
    float _2013 = cbLight._m0[_1932].x + _561;
    float _2014 = cbLight._m0[_1932].y + _562;
    float _2015 = cbLight._m0[_1932].z + _563;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2020 = _2019 * _2013;
    float _2021 = _2019 * _2014;
    float _2022 = _2019 * _2015;
    float _2023 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_1932].xyz));
    float _3888 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _2027 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _2028 = dot(vec3(_534, _535, _536), vec3(_2020, _2021, _2022));
    float _3910 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2020, _2021, _2022));
    float _3921 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2012 * _2012;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2051 = (exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2052 = 1.0 - _2012;
    float _2063 = (0.5 / (((_2027 * ((_2026 * _2052) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2052) + _2012) * _2026))) * _2026;
    float _3932 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2065 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    uint _2079 = _1932 + 9u;
    float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _537) * 0.949999988079071044921875);
    float _2091 = _2090 * _2090;
    float _2092 = cbLight._m0[_1966].x + _561;
    float _2093 = cbLight._m0[_1966].y + _562;
    float _2094 = cbLight._m0[_1966].z + _563;
    float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
    float _2099 = _2098 * _2092;
    float _2100 = _2098 * _2093;
    float _2101 = _2098 * _2094;
    float _2102 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_1966].xyz));
    float _3943 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _2106 = dot(vec3(_534, _535, _536), vec3(_2099, _2100, _2101));
    float _3954 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _2110 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2099, _2100, _2101));
    float _3965 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2114 = _2091 * _2091;
    float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
    float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2128 = 1.0 - _2091;
    float _2138 = (0.5 / (((_2027 * ((_2105 * _2128) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_2027 * _2128) + _2091) * _2105))) * _2105;
    float _3976 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
    float _2150 = (((_2127 * cbLight._m0[_2079].x) * _2140) * _1949) + ((((cbLight._m0[_1998].x * _1921) * _2051) * _2065) * _1962);
    float _2151 = (((_2127 * cbLight._m0[_2079].y) * _2140) * _1949) + ((((cbLight._m0[_1998].y * _1923) * _2051) * _2065) * _1962);
    float _2152 = (((_2127 * cbLight._m0[_2079].z) * _2140) * _1949) + ((((cbLight._m0[_1998].z * _1925) * _2051) * _2065) * _1962);
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    if (_1930.y == 0u)
    {
        uvec4 _2270 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2271 = _2270.x;
        uint _2282 = uint((float(_2270.y) * floor(float(uint(cbSceneParam._m0[85u].y * _570) / _2271))) + floor(float(uint(cbSceneParam._m0[85u].x * _569) / _2271)));
        float _2292 = (log2(_1708 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2293 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        uint _2296 = uint(isnan(14.0) ? _2293 : (isnan(_2293) ? 14.0 : min(_2293, 14.0)));
        uvec4 _2301 = texelFetch(g_lightClusterGridBuffer, int(((_2296 << 2u) + (_2282 << 6u)) >> 2u));
        uint _2302 = _2301.x;
        uint _2303 = _2270.z;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        if (((((1u << ((_2303 >> 4u) & 15u)) + 4294967295u) & _2302) == 0u) || ((_2303 & 240u) == 0u))
        {
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
        }
        else
        {
            float _2411;
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            uint _2586 = 0u;
            uint _2595;
            bool _2596;
            for (;;)
            {
                _2595 = texelFetch(g_lightClassification, int((((_2296 << 5u) + (_2282 << 9u)) + (_2586 << 2u)) >> 2u)).x;
                _2596 = _2595 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2596)
                {
                    frontier_phi_66_pred = _2581;
                    frontier_phi_66_pred_1 = _2580;
                    frontier_phi_66_pred_2 = _2582;
                    frontier_phi_66_pred_3 = _2585;
                    frontier_phi_66_pred_4 = _2584;
                    frontier_phi_66_pred_5 = _2583;
                }
                else
                {
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    uint _2731;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2595;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    for (;;)
                    {
                        uint _2735 = uint(findLSB(_2731)) + (_2586 << 5u);
                        uint _2732 = (_2731 + 4294967295u) & _2731;
                        uint _2737 = _2735 * 48u;
                        vec4 _2751 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 3u)).x));
                        uint _2757 = (_2735 * 48u) + 4u;
                        vec4 _2770 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2776 = (_2735 * 48u) + 8u;
                        vec3 _2787 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x));
                        float _2791 = _2751.x - _1706;
                        float _2792 = _2751.y - _1707;
                        float _2793 = _2751.z - _1708;
                        float _2794 = dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793));
                        float _2797 = inversesqrt(_2794);
                        float _2798 = _2797 * _2791;
                        float _2799 = _2797 * _2792;
                        float _2800 = _2797 * _2793;
                        float _2801 = dot(vec3(_590, _593, _596), vec3(_2798, _2799, _2800));
                        float _2806 = 1.0 - (_2794 * _2751.w);
                        float _3997 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2807 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2808 = sqrt(_2794) * _2770.w;
                        float _2811 = 1.39999997615814208984375 / (_2808 + 1.39999997615814208984375);
                        float _2812 = _2811 * _2811;
                        float _2815 = ((1.0 - _2812) * _2801) + _2812;
                        float _2818 = _2808 * _2808;
                        float _2822 = ((isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0))) * _2807) / ((_2818 * 0.699999988079071044921875) + 1.0);
                        float _2826 = (-0.0) - _1706;
                        float _2827 = (-0.0) - _1707;
                        float _2828 = (-0.0) - _1708;
                        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2842 = exp2(log2(1.0 / ((_2818 * 3.5) + 5.0)) * 0.25);
                        float _2843 = 1.0 - _651;
                        float _2850 = sqrt(1.0 - ((1.0 - (_2843 * _2843)) * (1.0 - (_2842 * _2842))));
                        float _2851 = _2850 * _2850;
                        float _2852 = _2851 * _2851;
                        float _2853 = _2833 + _2798;
                        float _2854 = _2834 + _2799;
                        float _2855 = _2835 + _2800;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2863 = dot(vec3(_590, _593, _596), vec3(_2833, _2834, _2835));
                        float _4013 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2867 = dot(vec3(_590, _593, _596), vec3(_2859 * _2853, _2859 * _2854, _2859 * _2855));
                        float _4024 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2874 = ((_2870 * _2870) * (_2852 + (-1.0))) + 1.0;
                        float _2875 = _2811 * _2851;
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2801) + _2876;
                        float _4035 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2881 = 1.0 - _2851;
                        float _2891 = (0.5 / (((_2880 * ((_2866 * _2881) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _2881) + _2851) * _2866))) * _2880;
                        float _4046 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2902 = (((_2852 * 3.1415927410125732421875) * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) / ((_2874 * _2874) * ((_2818 * 2.1991131305694580078125) + 3.141590118408203125))) * _2807;
                        _2660 = (_2822 * _2770.x) + _2728;
                        _2661 = (_2822 * _2770.y) + _2729;
                        _2662 = (_2822 * _2770.z) + _2730;
                        _2657 = (_2902 * _2787.x) + _2725;
                        _2658 = (_2902 * _2787.y) + _2726;
                        _2659 = (_2902 * _2787.z) + _2727;
                        if (_2732 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2725 = _2657;
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2661;
                            _2730 = _2662;
                            _2731 = _2732;
                        }
                    }
                    frontier_phi_66_pred = _2658;
                    frontier_phi_66_pred_1 = _2657;
                    frontier_phi_66_pred_2 = _2659;
                    frontier_phi_66_pred_3 = _2662;
                    frontier_phi_66_pred_4 = _2661;
                    frontier_phi_66_pred_5 = _2660;
                }
                _2413 = frontier_phi_66_pred;
                _2411 = frontier_phi_66_pred_1;
                _2415 = frontier_phi_66_pred_2;
                _2421 = frontier_phi_66_pred_3;
                _2419 = frontier_phi_66_pred_4;
                _2417 = frontier_phi_66_pred_5;
                uint _2587 = _2586 + 1u;
                if (_2587 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2580 = _2411;
                    _2581 = _2413;
                    _2582 = _2415;
                    _2583 = _2417;
                    _2584 = _2419;
                    _2585 = _2421;
                    _2586 = _2587;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
        }
        uvec4 _2424 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2425 = _2424.z;
        uint _2427 = (_2425 >> 8u) & 15u;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((4294967295u << _2427) & _2302) == 0u)
        {
            _2548 = _2410;
            _2550 = _2412;
            _2552 = _2414;
            _2554 = _2416;
            _2556 = _2418;
            _2558 = _2420;
        }
        else
        {
            float _2573 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
            float _2574 = _2573 * _1706;
            float _2575 = _2573 * _1707;
            float _2576 = _2573 * _1708;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2427 < ((_2425 >> 12u) & 15u))
            {
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2708 = _2410;
                float _2709 = _2412;
                float _2710 = _2414;
                float _2711 = _2416;
                float _2712 = _2418;
                float _2713 = _2420;
                uint _2714 = _2427;
                uint _2723;
                bool _2724;
                for (;;)
                {
                    _2723 = texelFetch(g_lightClassification, int((((_2296 << 5u) + (_2282 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                    _2724 = _2723 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2724)
                    {
                        frontier_phi_72_pred = _2709;
                        frontier_phi_72_pred_1 = _2708;
                        frontier_phi_72_pred_2 = _2713;
                        frontier_phi_72_pred_3 = _2712;
                        frontier_phi_72_pred_4 = _2711;
                        frontier_phi_72_pred_5 = _2710;
                    }
                    else
                    {
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _2920 = _2708;
                        float _2921 = _2709;
                        float _2922 = _2710;
                        float _2923 = _2711;
                        float _2924 = _2712;
                        float _2925 = _2713;
                        uint _2926 = _2723;
                        uint _2927;
                        vec4 _2952;
                        float _2953;
                        vec4 _2968;
                        vec3 _2980;
                        vec4 _2995;
                        vec4 _3010;
                        float _3056;
                        bool _3057;
                        for (;;)
                        {
                            uint _2937 = ((_2714 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2926));
                            _2927 = (_2926 + 4294967295u) & _2926;
                            uint _2939 = _2937 * 40u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            _2953 = _2952.w;
                            uint _2955 = (_2937 * 40u) + 4u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2970 = (_2937 * 40u) + 8u;
                            _2980 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x));
                            uint _2982 = (_2937 * 40u) + 16u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _2997 = (_2937 * 40u) + 20u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3012 = (_2937 * 40u) + 24u;
                            vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3031 = (_2937 * 40u) + 28u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3056 = fma(_1708, _3044.z, fma(_1707, _3044.y, _3044.x * _1706)) + _3044.w;
                            _3057 = !((fma(_1708, _3025.z, fma(_1707, _3025.y, _3025.x * _1706)) + _3025.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3057)
                            {
                                float _3084 = _2952.x - _1706;
                                float _3085 = _2952.y - _1707;
                                float _3086 = _2952.z - _1708;
                                float _3087 = dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086));
                                float _3090 = inversesqrt(_3087);
                                float _3091 = _3090 * _3084;
                                float _3092 = _3090 * _3085;
                                float _3093 = _3090 * _3086;
                                float _3097 = 1.0 - (_3087 / (_2953 * _2953));
                                float _4057 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3102 = sqrt(_3087) * _2968.w;
                                float _3104 = 1.39999997615814208984375 / (_3102 + 1.39999997615814208984375);
                                float _3105 = _3104 * _3104;
                                float _3108 = ((1.0 - _3105) * dot(vec3(_3091, _3092, _3093), vec3(_590, _593, _596))) + _3105;
                                float _3111 = _3102 * _3102;
                                float _3115 = (fma(_1708, _2995.z, fma(_1707, _2995.y, _2995.x * _1706)) + _2995.w) / _3056;
                                float _3116 = (fma(_1708, _3010.z, fma(_1707, _3010.y, _3010.x * _1706)) + _3010.w) / _3056;
                                float _3120 = 1.0 - dot(vec2(_3115, _3116), vec2(_3115, _3116));
                                float _4073 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3122 = _3121 * (((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3098) / ((_3111 * 0.699999988079071044921875) + 1.0));
                                float _3134 = exp2(log2(1.0 / ((_3111 * 3.5) + 5.0)) * 0.25);
                                float _3135 = 1.0 - _651;
                                float _3142 = sqrt(1.0 - ((1.0 - (_3135 * _3135)) * (1.0 - (_3134 * _3134))));
                                float _3143 = _3142 * _3142;
                                float _3144 = _3143 * _3143;
                                float _3145 = _3091 - _2574;
                                float _3146 = _3092 - _2575;
                                float _3147 = _3093 - _2576;
                                float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
                                float _3155 = dot(vec3(_590, _593, _596), vec3((-0.0) - _2574, (-0.0) - _2575, (-0.0) - _2576));
                                float _4084 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3158 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3159 = dot(vec3(_590, _593, _596), vec3(_3151 * _3145, _3151 * _3146, _3151 * _3147));
                                float _4095 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3162 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3166 = ((_3162 * _3162) * (_3144 + (-1.0))) + 1.0;
                                float _3167 = _3104 * _3143;
                                float _3168 = _3167 * _3167;
                                float _3174 = ((1.0 - _3168) * dot(vec3(_590, _593, _596), vec3(_3091, _3092, _3093))) + _3168;
                                float _4106 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3176 = 1.0 - _3143;
                                float _3186 = (0.5 / (((_3175 * ((_3158 * _3176) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3143) * _3158))) * _3175;
                                float _4117 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3196 = (_3121 * _3098) * (((_3144 * 3.1415927410125732421875) * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) / ((_3166 * _3166) * ((_3111 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3196 * _2980.y;
                                frontier_phi_78_pred_1 = _3196 * _2980.x;
                                frontier_phi_78_pred_2 = _3122 * _2968.z;
                                frontier_phi_78_pred_3 = _3122 * _2968.y;
                                frontier_phi_78_pred_4 = _3122 * _2968.x;
                                frontier_phi_78_pred_5 = _3196 * _2980.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3201 = frontier_phi_78_pred;
                            _3200 = frontier_phi_78_pred_1;
                            _3205 = frontier_phi_78_pred_2;
                            _3204 = frontier_phi_78_pred_3;
                            _3203 = frontier_phi_78_pred_4;
                            _3202 = frontier_phi_78_pred_5;
                            _2910 = _3203 + _2923;
                            _2911 = _3204 + _2924;
                            _2912 = _3205 + _2925;
                            _2907 = _3200 + _2920;
                            _2908 = _3201 + _2921;
                            _2909 = _3202 + _2922;
                            if (_2927 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2927;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2908;
                        frontier_phi_72_pred_1 = _2907;
                        frontier_phi_72_pred_2 = _2912;
                        frontier_phi_72_pred_3 = _2911;
                        frontier_phi_72_pred_4 = _2910;
                        frontier_phi_72_pred_5 = _2909;
                    }
                    _2551 = frontier_phi_72_pred;
                    _2549 = frontier_phi_72_pred_1;
                    _2559 = frontier_phi_72_pred_2;
                    _2557 = frontier_phi_72_pred_3;
                    _2555 = frontier_phi_72_pred_4;
                    _2553 = frontier_phi_72_pred_5;
                    uint _2715 = _2714 + 1u;
                    if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2708 = _2549;
                        _2709 = _2551;
                        _2710 = _2553;
                        _2711 = _2555;
                        _2712 = _2557;
                        _2713 = _2559;
                        _2714 = _2715;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2559;
                frontier_phi_59_60_ladder_1 = _2555;
                frontier_phi_59_60_ladder_2 = _2553;
                frontier_phi_59_60_ladder_3 = _2551;
                frontier_phi_59_60_ladder_4 = _2549;
                frontier_phi_59_60_ladder_5 = _2557;
            }
            else
            {
                frontier_phi_59_60_ladder = _2420;
                frontier_phi_59_60_ladder_1 = _2416;
                frontier_phi_59_60_ladder_2 = _2414;
                frontier_phi_59_60_ladder_3 = _2412;
                frontier_phi_59_60_ladder_4 = _2410;
                frontier_phi_59_60_ladder_5 = _2418;
            }
            _2548 = frontier_phi_59_60_ladder_4;
            _2550 = frontier_phi_59_60_ladder_3;
            _2552 = frontier_phi_59_60_ladder_2;
            _2554 = frontier_phi_59_60_ladder_1;
            _2556 = frontier_phi_59_60_ladder_5;
            _2558 = frontier_phi_59_60_ladder;
        }
        float _2563 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        _2315 = (_2563 * _2554) + _1994;
        _2317 = (_2563 * _2556) + _1995;
        _2319 = (_2563 * _2558) + _1996;
        _2321 = ((_2548 * 0.039999999105930328369140625) * _2563) + _2150;
        _2323 = ((_2550 * 0.039999999105930328369140625) * _2563) + _2151;
        _2325 = ((_2552 * 0.039999999105930328369140625) * _2563) + _2152;
    }
    else
    {
        _2315 = _1994;
        _2317 = _1995;
        _2319 = _1996;
        _2321 = _2150;
        _2323 = _2151;
        _2325 = _2152;
    }
    float _4133 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4144 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4155 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _2342 = ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2315 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _635))) + ((_2321 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1441)) * cbPerFrame._m0[3u].x);
    float _2343 = ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2317 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _635))) + ((_2323 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1441)) * cbPerFrame._m0[3u].x);
    float _2344 = ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2319 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _635))) + ((_2325 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1441)) * cbPerFrame._m0[3u].x);
    uint _2348 = _609 + 6u;
    float _2356 = _569 / cbSceneParam._m0[86u].x;
    float _2357 = _570 / cbSceneParam._m0[86u].y;
    vec4 _2371 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, (log2((isnan(cbSceneParam._m0[77u].w) ? _556 : (isnan(_556) ? cbSceneParam._m0[77u].w : min(_556, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2373 = _2371.x;
    float _2374 = _2371.y;
    float _2375 = _2371.z;
    float _2376 = _2371.w;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    if (_556 > cbSceneParam._m0[78u].w)
    {
        float _2435 = isnan(_556) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _556 : min(cbSceneParam._m0[80u].w, _556));
        float _2436 = _2435 / _556;
        float _2447 = _2436 * _261;
        float _2448 = _262 * _2436;
        float _2449 = (-0.0) - _2448;
        float _2450 = _2436 * _263;
        float _2452 = (cbSceneParam._m0[77u].w * _2449) / _2435;
        float _2453 = _2452 + cbSceneParam._m0[79u].w;
        float _2454 = cbSceneParam._m0[79u].w - _2448;
        float _2460 = sqrt(((_2447 * _2447) + (_2448 * _2448)) + (_2450 * _2450));
        float _2463 = (1.0 - (cbSceneParam._m0[77u].w / _2435)) * _2460;
        float _2468 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2470 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2670;
        if (abs((_2449 - _2452) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2670 = ((((_2453 > 0.0) ? exp2(_2468 * _2453) : (2.0 - exp2(_2470 * _2453))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2463;
        }
        else
        {
            float _2609 = 1.0 / cbSceneParam._m0[80u].x;
            float _2610 = isnan(_2454) ? _2453 : (isnan(_2453) ? _2454 : max(_2453, _2454));
            float _2611 = isnan(_2454) ? _2453 : (isnan(_2453) ? _2454 : min(_2453, _2454));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            _2670 = ((abs(_2460 / _2449) * cbSceneParam._m0[80u].y) * ((((_2620 - _2621) * 2.0) - ((exp2(_2468 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0)))) - exp2(_2468 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))))) * _2609)) - ((exp2(_2470 * _2620) - exp2(_2470 * _2621)) * _2609))) + (_2463 * cbSceneParam._m0[80u].z);
        }
        vec4 _2672 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, 1.0), 0.0);
        float _2681 = exp2((_2670 * (-1.44269502162933349609375)) * (1.0 - _2672.w));
        float _2682 = log2(_2681);
        float _2698 = log2(_2376);
        _2472 = (exp2(_2698 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].x)) * _2672.x) / cbSceneParam._m0[78u].x)) + _2373;
        _2474 = (exp2(_2698 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].y)) * _2672.y) / cbSceneParam._m0[78u].y)) + _2374;
        _2476 = (exp2(_2698 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].z)) * _2672.z) / cbSceneParam._m0[78u].z)) + _2375;
        _2478 = _2681 * _2376;
    }
    else
    {
        _2472 = _2373;
        _2474 = _2374;
        _2476 = _2375;
        _2478 = _2376;
    }
    float _2490 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2491 = _2490 == 3.0;
    float _2492 = log2(_2478);
    float _2499 = exp2(_2492 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0)));
    float _2500 = exp2(_2492 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0)));
    float _2501 = exp2(_2492 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0)));
    float _2510 = (_2490 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2510 * (_2491 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2472)));
    SV_Target.y = _2510 * (_2491 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2474)));
    SV_Target.z = _2510 * (_2491 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2476)));
    SV_Target.w = cbInstanceData._m0[_2348].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2348].w;
}


