#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _991;
float _3144;
float _3145;
float _3146;
float _3147;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    float _378 = (_354 > 0.0) ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_359 + (-0.5)) + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_360 + (-0.5)) + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    vec4 _446 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _454 = (_446.x * 2.0) + (-1.0);
    float _456 = (_446.y * 2.0) + (-1.0);
    float _457 = dot(vec2(_454, _456), vec2(_454, _456));
    float _3166 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0))));
    float _463 = _446.z * _288;
    float _466 = fma(_462, _197, fma(_456, _204, _454 * _190));
    float _469 = fma(_462, _198, fma(_456, _205, _454 * _191));
    float _472 = fma(_462, _199, fma(_456, _206, _454 * _192));
    float _476 = inversesqrt(dot(vec3(_466, _469, _472), vec3(_466, _469, _472)));
    float _477 = _476 * _466;
    float _478 = _476 * _469;
    float _479 = _476 * _472;
    float _3177 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _480 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
    float _3188 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3199 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3210 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _499 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _503 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _504 = _261 * _503;
    float _505 = _262 * _503;
    float _506 = _263 * _503;
    vec4 _511 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _513 = _511.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _672 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _678 = (cbMatDynParam._m0[5u].x * _672) + cbMatDynParam._m0[5u].y;
        float _3221 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
        float _683 = (cbMatDynParam._m0[5u].z * _672) + cbMatDynParam._m0[5u].w;
        float _3232 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0))) - _679)) + _679) < ((_513 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _526 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _527 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _547 = fma(_479, cbSceneParam._m0[5u].z, fma(_478, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _477));
    float _550 = fma(_479, cbSceneParam._m0[6u].z, fma(_478, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _477));
    float _553 = fma(_479, cbSceneParam._m0[7u].z, fma(_478, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _477));
    uint _566 = uint(roundEven(NORMAL.w)) * 13u;
    uint _568 = _566 + 9u;
    uint _569 = _568 + uint(cbMatDynParam._m0[0u].w);
    float _575 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0)))) * cbInstanceData._m0[_569].x;
    float _576 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0)))) * cbInstanceData._m0[_569].y;
    float _577 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * cbInstanceData._m0[_569].z;
    float _3243 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
    float _3254 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    vec4 _589 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _526, cbSceneParam._m0[86u].y * _527));
    float _592 = _589.x * TEXCOORD.z;
    float _593 = dot(vec3(_477, _478, _479), vec3(_504, _505, _506));
    float _596 = _593 * 2.0;
    float _600 = (_596 * _477) - _504;
    float _601 = (_596 * _478) - _505;
    float _602 = (_596 * _479) - _506;
    float _606 = abs(dot(vec3(_504, _505, _506), vec3(_477, _478, _479)));
    float _3276 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _608 = sqrt(_480);
    float _621 = exp2((_608 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_608 * 3.0));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _990;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _717 = fma(_661, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653));
        float _721 = fma(_661, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653));
        float _725 = fma(_661, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653));
        float _748 = _653 + _477;
        float _749 = _657 + _478;
        float _750 = _661 + _479;
        float _760 = fma(_750, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748)) - _717;
        float _761 = fma(_750, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748)) - _721;
        float _762 = fma(_750, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748)) - _725;
        float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
        float _779 = ((_766 * _760) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_717 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_766 * _761) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_721 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_766 * _762) / cbModelParam._m0[34u].z) + ((((((_725 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        float _818 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_784.x + (-0.5));
        float _820 = _818 * (_784.y + (-0.5));
        float _821 = _818 * (_784.z + (-0.5));
        float _828 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_791.x + (-0.5));
        float _830 = _828 * (_791.y + (-0.5));
        float _831 = _828 * (_791.z + (-0.5));
        float _838 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_798.x + (-0.5));
        float _840 = _838 * (_798.y + (-0.5));
        float _841 = _838 * (_798.z + (-0.5));
        float _848 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_805.x + (-0.5));
        float _850 = _848 * (_805.y + (-0.5));
        float _851 = _848 * (_805.z + (-0.5));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = _819 * 0.5;
        float _856 = _829 * 0.5;
        float _857 = _839 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _872 = (dot(vec3(_477, _478, _479), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3302 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _882 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3313 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3324 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * (_884 + 1.0))) + _889) * _852;
        float _899 = _820 * 0.5;
        float _900 = _830 * 0.5;
        float _901 = _840 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(_477, _478, _479), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3335 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3346 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3357 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * (_926 + 1.0))) + _931) * _853;
        float _941 = _821 * 0.5;
        float _942 = _831 * 0.5;
        float _943 = _841 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_477, _478, _479), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3390 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_968 + 1.0))) + _973) * _854;
        _990 = _821;
        _992 = _820;
        _993 = _819;
        _994 = _831;
        _995 = _830;
        _996 = _829;
        _997 = _841;
        _998 = _840;
        _999 = _839;
        _1000 = _854;
        _1001 = _853;
        _1002 = _852;
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
    }
    else
    {
        _990 = _991;
        _992 = _991;
        _993 = _991;
        _994 = _991;
        _995 = _991;
        _996 = _991;
        _997 = _991;
        _998 = _991;
        _999 = _991;
        _1000 = _991;
        _1001 = _991;
        _1002 = _991;
        _1003 = 0.0;
        _1004 = 0.0;
        _1005 = 0.0;
    }
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1034 = fma(_661, cbModelParam._m0[30u].z, fma(_657, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _653));
        float _1038 = fma(_661, cbModelParam._m0[31u].z, fma(_657, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _653));
        float _1042 = fma(_661, cbModelParam._m0[32u].z, fma(_657, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _653));
        float _1065 = _653 + _477;
        float _1066 = _657 + _478;
        float _1067 = _661 + _479;
        float _1077 = fma(_1067, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065)) - _1034;
        float _1078 = fma(_1067, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065)) - _1038;
        float _1079 = fma(_1067, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065)) - _1042;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1034 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1038 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[35u].z) + ((((((_1042 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1133 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1100.x + (-0.5));
        float _1135 = _1133 * (_1100.y + (-0.5));
        float _1136 = _1133 * (_1100.z + (-0.5));
        float _1143 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1107.x + (-0.5));
        float _1145 = _1143 * (_1107.y + (-0.5));
        float _1146 = _1143 * (_1107.z + (-0.5));
        float _1153 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1114.x + (-0.5));
        float _1155 = _1153 * (_1114.y + (-0.5));
        float _1156 = _1153 * (_1114.z + (-0.5));
        float _1163 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1121.x + (-0.5));
        float _1165 = _1163 * (_1121.y + (-0.5));
        float _1166 = _1163 * (_1121.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_477, _478, _479), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3453 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_1197 + 1.0))) + _1202) * _1167;
        float _1212 = _1135 * 0.5;
        float _1213 = _1145 * 0.5;
        float _1214 = _1155 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_477, _478, _479), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3486 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1239 + 1.0))) + _1244) * _1168;
        float _1254 = _1136 * 0.5;
        float _1255 = _1146 * 0.5;
        float _1256 = _1156 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_477, _478, _479), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3519 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1281 + 1.0))) + _1286) * _1169;
        _1303 = _1136;
        _1304 = _1135;
        _1305 = _1134;
        _1306 = _1146;
        _1307 = _1145;
        _1308 = _1144;
        _1309 = _1156;
        _1310 = _1155;
        _1311 = _1154;
        _1312 = _1169;
        _1313 = _1168;
        _1314 = _1167;
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _991;
        _1304 = _991;
        _1305 = _991;
        _1306 = _991;
        _1307 = _991;
        _1308 = _991;
        _1309 = _991;
        _1310 = _991;
        _1311 = _991;
        _1312 = _991;
        _1313 = _991;
        _1314 = _991;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1003)) + _1003;
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1004)) + _1004;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1005)) + _1005;
    float _1350 = fma(_1329, cbSceneParam._m0[89u].z, fma(_1328, cbSceneParam._m0[89u].y, _1327 * cbSceneParam._m0[89u].x));
    float _1353 = fma(_1329, cbSceneParam._m0[90u].z, fma(_1328, cbSceneParam._m0[90u].y, _1327 * cbSceneParam._m0[90u].x));
    float _1356 = fma(_1329, cbSceneParam._m0[91u].z, fma(_1328, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1327));
    float _1371 = _600 * 0.5;
    float _1372 = _601 * 0.5;
    float _1373 = _602 * 0.5;
    float _1374 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1377 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1380 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1414;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1387 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_990, _994, _997, _1000));
        float _1391 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_992, _995, _998, _1001));
        float _1395 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_993, _996, _999, _1002));
        float _1402 = dot(vec4(cbModelParam._m0[39u]), vec4(_1371, _1372, _1373, 1.0));
        _1414 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1414 = 1.0;
    }
    float _1425;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1416 = dot(vec4(cbModelParam._m0[40u]), vec4(_1371, _1372, _1373, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1429 = (_1425 * cbModelParam._m0[1u].x) + (_1414 * (1.0 - cbModelParam._m0[1u].x));
    float _1439 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _480);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1439 : min(cbModelParam._m0[25u].z, _1439));
    float _1521;
    float _1523;
    float _1525;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1488 = fma(_661, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653)) + cbModelParam._m0[13u].w;
        float _1492 = fma(_661, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653)) + cbModelParam._m0[14u].w;
        float _1496 = fma(_661, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653)) + cbModelParam._m0[15u].w;
        float _1499 = fma(_602, cbModelParam._m0[13u].z, fma(_601, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600));
        float _1502 = fma(_602, cbModelParam._m0[14u].z, fma(_601, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600));
        float _1505 = fma(_602, cbModelParam._m0[15u].z, fma(_601, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600));
        float _1533;
        if (_1499 > 0.0)
        {
            _1533 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1533 = frontier_phi_25_23_ladder;
        }
        float _1903;
        if (_1502 > 0.0)
        {
            _1903 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1903 = frontier_phi_34_30_ladder;
        }
        float _2227;
        if (_1505 > 0.0)
        {
            _2227 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2227 = frontier_phi_48_41_ladder;
        }
        float _2229 = isnan(_1903) ? _1533 : (isnan(_1533) ? _1903 : min(_1533, _1903));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1499) + _1488;
        float _2235 = (_2230 * _1502) + _1492;
        float _2236 = (_2230 * _1505) + _1496;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2238 = (-1.0) - _2237;
        float _2240 = _2237 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2236 > _2240) || ((_2236 < _2238) || ((_2235 > _2240) || ((_2235 < _2238) || ((_2234 < _2238) || (_2234 > _2240))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2236, cbModelParam._m0[9u].z, fma(_2235, cbModelParam._m0[9u].y, _2234 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2236, cbModelParam._m0[10u].z, fma(_2235, cbModelParam._m0[10u].y, _2234 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2236, cbModelParam._m0[11u].z, fma(_2235, cbModelParam._m0[11u].y, _2234 * cbModelParam._m0[11u].x))), _1440);
            frontier_phi_24_48_ladder = _2378.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2378.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2378.x * cbModelParam._m0[1u].y;
        }
        _1521 = frontier_phi_24_48_ladder_2;
        _1523 = frontier_phi_24_48_ladder_1;
        _1525 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1509 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_600, _601, _602), _1440);
        _1521 = _1509.x * cbModelParam._m0[1u].y;
        _1523 = _1509.y * cbModelParam._m0[1u].y;
        _1525 = _1509.z * cbModelParam._m0[1u].y;
    }
    float _1529 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _480);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1529 : min(cbModelParam._m0[25u].w, _1529));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1583 = fma(_661, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653)) + cbModelParam._m0[21u].w;
        float _1587 = fma(_661, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653)) + cbModelParam._m0[22u].w;
        float _1591 = fma(_661, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653)) + cbModelParam._m0[23u].w;
        float _1594 = fma(_602, cbModelParam._m0[21u].z, fma(_601, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600));
        float _1597 = fma(_602, cbModelParam._m0[22u].z, fma(_601, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600));
        float _1600 = fma(_602, cbModelParam._m0[23u].z, fma(_601, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600));
        float _1908;
        if (_1594 > 0.0)
        {
            _1908 = abs((1.0 - _1583) / _1594);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1583 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1908 = frontier_phi_36_32_ladder;
        }
        float _2253;
        if (_1597 > 0.0)
        {
            _2253 = abs((1.0 - _1587) / _1597);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1587 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2253 = frontier_phi_50_43_ladder;
        }
        float _2443;
        if (_1600 > 0.0)
        {
            _2443 = abs((1.0 - _1591) / _1600);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1591 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2443 = frontier_phi_68_61_ladder;
        }
        float _2445 = isnan(_2253) ? _1908 : (isnan(_1908) ? _2253 : min(_1908, _2253));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1594) + _1583;
        float _2451 = (_2446 * _1597) + _1587;
        float _2452 = (_2446 * _1600) + _1591;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2453;
        float _2456 = _2453 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2452 > _2456) || ((_2452 < _2454) || ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 < _2454) || (_2450 > _2456))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2694 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2452, cbModelParam._m0[17u].z, fma(_2451, cbModelParam._m0[17u].y, _2450 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2452, cbModelParam._m0[18u].z, fma(_2451, cbModelParam._m0[18u].y, _2450 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2452, cbModelParam._m0[19u].z, fma(_2451, cbModelParam._m0[19u].y, _2450 * cbModelParam._m0[19u].x))), _1530);
            frontier_phi_33_68_ladder = _2694.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2694.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2694.x * cbModelParam._m0[1u].z;
        }
        _1619 = frontier_phi_33_68_ladder_2;
        _1621 = frontier_phi_33_68_ladder;
        _1623 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_600, _601, _602), _1530);
        _1619 = _1603.x * cbModelParam._m0[1u].z;
        _1621 = _1603.y * cbModelParam._m0[1u].z;
        _1623 = _1603.z * cbModelParam._m0[1u].z;
    }
    float _1635 = ((((1.0 - _621) * ((_608 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_621 * _608)) * _592;
    float _1636 = _1635 * ((cbModelParam._m0[1u].w * (_1619 - _1521)) + _1521);
    float _1637 = _1635 * ((cbModelParam._m0[1u].w * (_1621 - _1523)) + _1523);
    float _1638 = _1635 * ((cbModelParam._m0[1u].w * (_1623 - _1525)) + _1525);
    float _1641 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, _1636 * cbSceneParam._m0[91u].x));
    vec4 _1655 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_526, _527));
    float _1657 = _1655.w;
    float _1669 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1657);
    float _1670 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1657);
    float _1671 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1657);
    uvec4 _1675 = floatBitsToUint(cbInstanceData._m0[_566 + 5u]);
    uint _1677 = _1675.x * 14u;
    uint _1678 = _1677 + 13u;
    float _1683 = _592 + (-1.0);
    float _1686 = (cbLight._m0[_1678].x * _1683) + 1.0;
    float _1687 = (cbLight._m0[_1678].y * _1683) + 1.0;
    uint _1688 = _1677 + 5u;
    float _1694 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1698 = _1677 + 4u;
    float _1707 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
    uint _1711 = _1677 | 1u;
    float _1722 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_477, _478, _479));
    float _1725 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_477, _478, _479));
    float _3655 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _3666 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1730 = (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * 0.3183098733425140380859375;
    float _1732 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.3183098733425140380859375;
    float _1739 = ((cbLight._m0[_1688].x * _1694) * _1732) + (((cbLight._m0[_1698].x * _1669) * _1707) * _1730);
    float _1740 = ((_1694 * cbLight._m0[_1688].y) * _1732) + (((cbLight._m0[_1698].y * _1670) * _1707) * _1730);
    float _1741 = ((_1694 * cbLight._m0[_1688].z) * _1732) + (((cbLight._m0[_1698].z * _1671) * _1707) * _1730);
    uint _1743 = _1677 + 8u;
    float _1756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _480) * 0.949999988079071044921875);
    float _1757 = _1756 * _1756;
    float _1758 = cbLight._m0[_1677].x + _504;
    float _1759 = cbLight._m0[_1677].y + _505;
    float _1760 = cbLight._m0[_1677].z + _506;
    float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
    float _1765 = _1764 * _1758;
    float _1766 = _1764 * _1759;
    float _1767 = _1764 * _1760;
    float _1768 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_1677].xyz));
    float _3677 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _1772 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _1773 = dot(vec3(_477, _478, _479), vec3(_1765, _1766, _1767));
    float _3699 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1777 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1765, _1766, _1767));
    float _3710 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1781 = _1757 * _1757;
    float _1785 = ((_1776 * _1776) * (_1781 + (-1.0))) + 1.0;
    float _1796 = (exp2(log2(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1797 = 1.0 - _1757;
    float _1808 = (0.5 / (((_1772 * ((_1771 * _1797) + _1757)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1797) + _1757) * _1771))) * _1771;
    float _3721 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1810 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1781 / ((_1785 * _1785) * 3.141590118408203125));
    uint _1824 = _1677 + 9u;
    float _1835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1711].w)) * _480) * 0.949999988079071044921875);
    float _1836 = _1835 * _1835;
    float _1837 = cbLight._m0[_1711].x + _504;
    float _1838 = cbLight._m0[_1711].y + _505;
    float _1839 = cbLight._m0[_1711].z + _506;
    float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
    float _1844 = _1843 * _1837;
    float _1845 = _1843 * _1838;
    float _1846 = _1843 * _1839;
    float _1847 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_1711].xyz));
    float _3732 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _1851 = dot(vec3(_477, _478, _479), vec3(_1844, _1845, _1846));
    float _3743 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1844, _1845, _1846));
    float _3754 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1859 = _1836 * _1836;
    float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
    float _1872 = (exp2(log2(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1873 = 1.0 - _1836;
    float _1883 = (0.5 / (((_1772 * ((_1850 * _1873) + _1836)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1873) + _1836) * _1850))) * _1850;
    float _3765 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1885 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
    float _1895 = (((_1872 * cbLight._m0[_1824].x) * _1885) * _1694) + ((((cbLight._m0[_1743].x * _1669) * _1796) * _1810) * _1707);
    float _1896 = (((_1872 * cbLight._m0[_1824].y) * _1885) * _1694) + ((((cbLight._m0[_1743].y * _1670) * _1796) * _1810) * _1707);
    float _1897 = (((_1872 * cbLight._m0[_1824].z) * _1885) * _1694) + ((((cbLight._m0[_1743].z * _1671) * _1796) * _1810) * _1707);
    float _2012;
    float _2014;
    float _2016;
    float _2018;
    float _2020;
    float _2022;
    if (_1675.y == 0u)
    {
        float _1952 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1952;
        float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1952;
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1952;
        uvec4 _1967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1968 = _1967.x;
        uint _1979 = uint((float(_1967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _527) / _1968))) + floor(float(uint(cbSceneParam._m0[85u].x * _526) / _1968)));
        float _1989 = (log2(_1955 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1990 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        uint _1993 = uint(isnan(14.0) ? _1990 : (isnan(_1990) ? 14.0 : min(_1990, 14.0)));
        uvec4 _1998 = texelFetch(g_lightClusterGridBuffer, int(((_1993 << 2u) + (_1979 << 6u)) >> 2u));
        uint _1999 = _1998.x;
        uint _2000 = _1967.z;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        float _2114;
        float _2116;
        if (((((1u << ((_2000 >> 4u) & 15u)) + 4294967295u) & _1999) == 0u) || ((_2000 & 240u) == 0u))
        {
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
        }
        else
        {
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2115;
            float _2117;
            float _2290 = 0.0;
            float _2291 = 0.0;
            float _2292 = 0.0;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            uint _2296 = 0u;
            uint _2305;
            bool _2306;
            for (;;)
            {
                _2305 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2296 << 2u)) >> 2u)).x;
                _2306 = _2305 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2306)
                {
                    frontier_phi_63_pred = _2292;
                    frontier_phi_63_pred_1 = _2295;
                    frontier_phi_63_pred_2 = _2294;
                    frontier_phi_63_pred_3 = _2293;
                    frontier_phi_63_pred_4 = _2291;
                    frontier_phi_63_pred_5 = _2290;
                }
                else
                {
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    float _2491;
                    uint _2492;
                    _2486 = _2290;
                    _2487 = _2291;
                    _2488 = _2292;
                    _2489 = _2293;
                    _2490 = _2294;
                    _2491 = _2295;
                    _2492 = _2305;
                    float _2387;
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    for (;;)
                    {
                        uint _2496 = uint(findLSB(_2492)) + (_2296 << 5u);
                        uint _2493 = (_2492 + 4294967295u) & _2492;
                        uint _2498 = _2496 * 48u;
                        vec4 _2512 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2498)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 3u)).x));
                        uint _2518 = (_2496 * 48u) + 4u;
                        vec4 _2531 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2518)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2518 + 3u)).x));
                        uint _2537 = (_2496 * 48u) + 8u;
                        vec3 _2548 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2537)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 2u)).x));
                        float _2552 = _2512.x - _1953;
                        float _2553 = _2512.y - _1954;
                        float _2554 = _2512.z - _1955;
                        float _2555 = dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554));
                        float _2558 = inversesqrt(_2555);
                        float _2559 = _2558 * _2552;
                        float _2560 = _2558 * _2553;
                        float _2561 = _2558 * _2554;
                        float _2562 = dot(vec3(_547, _550, _553), vec3(_2559, _2560, _2561));
                        float _2567 = 1.0 - (_2555 * _2512.w);
                        float _3786 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                        float _2568 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
                        float _2569 = sqrt(_2555) * _2531.w;
                        float _2572 = 1.39999997615814208984375 / (_2569 + 1.39999997615814208984375);
                        float _2573 = _2572 * _2572;
                        float _2576 = ((1.0 - _2573) * _2562) + _2573;
                        float _2579 = _2569 * _2569;
                        float _2583 = ((isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0))) * _2568) / ((_2579 * 0.699999988079071044921875) + 1.0);
                        float _2587 = (-0.0) - _1953;
                        float _2588 = (-0.0) - _1954;
                        float _2589 = (-0.0) - _1955;
                        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
                        float _2594 = _2593 * _2587;
                        float _2595 = _2593 * _2588;
                        float _2596 = _2593 * _2589;
                        float _2604 = exp2(log2(1.0 / ((_2579 * 3.5) + 5.0)) * 0.25);
                        float _2605 = 1.0 - _608;
                        float _2612 = sqrt(1.0 - ((1.0 - (_2605 * _2605)) * (1.0 - (_2604 * _2604))));
                        float _2613 = _2612 * _2612;
                        float _2614 = _2613 * _2613;
                        float _2615 = _2594 + _2559;
                        float _2616 = _2595 + _2560;
                        float _2617 = _2596 + _2561;
                        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
                        float _2625 = dot(vec3(_547, _550, _553), vec3(_2594, _2595, _2596));
                        float _3802 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
                        float _2628 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
                        float _2629 = dot(vec3(_547, _550, _553), vec3(_2621 * _2615, _2621 * _2616, _2621 * _2617));
                        float _3813 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
                        float _2632 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
                        float _2636 = ((_2632 * _2632) * (_2614 + (-1.0))) + 1.0;
                        float _2637 = _2572 * _2613;
                        float _2638 = _2637 * _2637;
                        float _2641 = ((1.0 - _2638) * _2562) + _2638;
                        float _3824 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                        float _2642 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
                        float _2643 = 1.0 - _2613;
                        float _2653 = (0.5 / (((_2642 * ((_2628 * _2643) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2642 * _2643) + _2613) * _2628))) * _2642;
                        float _3835 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2664 = (((_2614 * 3.1415927410125732421875) * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) / ((_2636 * _2636) * ((_2579 * 2.1991131305694580078125) + 3.141590118408203125))) * _2568;
                        _2390 = (_2583 * _2531.x) + _2489;
                        _2391 = (_2583 * _2531.y) + _2490;
                        _2392 = (_2583 * _2531.z) + _2491;
                        _2387 = (_2664 * _2548.x) + _2486;
                        _2388 = (_2664 * _2548.y) + _2487;
                        _2389 = (_2664 * _2548.z) + _2488;
                        if (_2493 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2486 = _2387;
                            _2487 = _2388;
                            _2488 = _2389;
                            _2489 = _2390;
                            _2490 = _2391;
                            _2491 = _2392;
                            _2492 = _2493;
                        }
                    }
                    frontier_phi_63_pred = _2389;
                    frontier_phi_63_pred_1 = _2392;
                    frontier_phi_63_pred_2 = _2391;
                    frontier_phi_63_pred_3 = _2390;
                    frontier_phi_63_pred_4 = _2388;
                    frontier_phi_63_pred_5 = _2387;
                }
                _2111 = frontier_phi_63_pred;
                _2117 = frontier_phi_63_pred_1;
                _2115 = frontier_phi_63_pred_2;
                _2113 = frontier_phi_63_pred_3;
                _2109 = frontier_phi_63_pred_4;
                _2107 = frontier_phi_63_pred_5;
                uint _2297 = _2296 + 1u;
                if (_2297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2290 = _2107;
                    _2291 = _2109;
                    _2292 = _2111;
                    _2293 = _2113;
                    _2294 = _2115;
                    _2295 = _2117;
                    _2296 = _2297;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
        }
        uvec4 _2120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2121 = _2120.z;
        uint _2123 = (_2121 >> 8u) & 15u;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        float _2268;
        if (((4294967295u << _2123) & _1999) == 0u)
        {
            _2258 = _2106;
            _2260 = _2108;
            _2262 = _2110;
            _2264 = _2112;
            _2266 = _2114;
            _2268 = _2116;
        }
        else
        {
            float _2283 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
            float _2284 = _2283 * _1953;
            float _2285 = _2283 * _1954;
            float _2286 = _2283 * _1955;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2123 < ((_2121 >> 12u) & 15u))
            {
                float _2259;
                float _2261;
                float _2263;
                float _2265;
                float _2267;
                float _2269;
                float _2469 = _2106;
                float _2470 = _2108;
                float _2471 = _2110;
                float _2472 = _2112;
                float _2473 = _2114;
                float _2474 = _2116;
                uint _2475 = _2123;
                uint _2484;
                bool _2485;
                for (;;)
                {
                    _2484 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                    _2485 = _2484 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2485)
                    {
                        frontier_phi_77_pred = _2474;
                        frontier_phi_77_pred_1 = _2473;
                        frontier_phi_77_pred_2 = _2472;
                        frontier_phi_77_pred_3 = _2471;
                        frontier_phi_77_pred_4 = _2470;
                        frontier_phi_77_pred_5 = _2469;
                    }
                    else
                    {
                        float _2699;
                        float _2700;
                        float _2701;
                        float _2702;
                        float _2703;
                        float _2704;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2712 = _2469;
                        float _2713 = _2470;
                        float _2714 = _2471;
                        float _2715 = _2472;
                        float _2716 = _2473;
                        float _2717 = _2474;
                        uint _2718 = _2484;
                        uint _2719;
                        vec4 _2744;
                        float _2745;
                        vec4 _2760;
                        vec3 _2772;
                        vec4 _2787;
                        vec4 _2803;
                        float _2849;
                        bool _2850;
                        for (;;)
                        {
                            uint _2729 = ((_2475 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2718));
                            _2719 = (_2718 + 4294967295u) & _2718;
                            uint _2731 = _2729 * 40u;
                            _2744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 3u)).x));
                            _2745 = _2744.w;
                            uint _2747 = (_2729 * 40u) + 4u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            uint _2762 = (_2729 * 40u) + 8u;
                            _2772 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x));
                            uint _2774 = (_2729 * 40u) + 16u;
                            _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            uint _2790 = (_2729 * 40u) + 20u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            uint _2805 = (_2729 * 40u) + 24u;
                            vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            uint _2824 = (_2729 * 40u) + 28u;
                            vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            _2849 = fma(_1955, _2837.z, fma(_1954, _2837.y, _2837.x * _1953)) + _2837.w;
                            _2850 = !((fma(_1955, _2818.z, fma(_1954, _2818.y, _2818.x * _1953)) + _2818.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2850)
                            {
                                float _2877 = _2744.x - _1953;
                                float _2878 = _2744.y - _1954;
                                float _2879 = _2744.z - _1955;
                                float _2880 = dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879));
                                float _2883 = inversesqrt(_2880);
                                float _2884 = _2883 * _2877;
                                float _2885 = _2883 * _2878;
                                float _2886 = _2883 * _2879;
                                float _2890 = 1.0 - (_2880 / (_2745 * _2745));
                                float _3846 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                                float _2891 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
                                float _2895 = sqrt(_2880) * _2760.w;
                                float _2897 = 1.39999997615814208984375 / (_2895 + 1.39999997615814208984375);
                                float _2898 = _2897 * _2897;
                                float _2901 = ((1.0 - _2898) * dot(vec3(_2884, _2885, _2886), vec3(_547, _550, _553))) + _2898;
                                float _2904 = _2895 * _2895;
                                float _2908 = (fma(_1955, _2787.z, fma(_1954, _2787.y, _2787.x * _1953)) + _2787.w) / _2849;
                                float _2909 = (fma(_1955, _2803.z, fma(_1954, _2803.y, _2803.x * _1953)) + _2803.w) / _2849;
                                float _2913 = 1.0 - dot(vec2(_2908, _2909), vec2(_2908, _2909));
                                float _3862 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                                float _2914 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
                                float _2915 = _2914 * (((isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * _2891) / ((_2904 * 0.699999988079071044921875) + 1.0));
                                float _2927 = exp2(log2(1.0 / ((_2904 * 3.5) + 5.0)) * 0.25);
                                float _2928 = 1.0 - _608;
                                float _2935 = sqrt(1.0 - ((1.0 - (_2928 * _2928)) * (1.0 - (_2927 * _2927))));
                                float _2936 = _2935 * _2935;
                                float _2937 = _2936 * _2936;
                                float _2938 = _2884 - _2284;
                                float _2939 = _2885 - _2285;
                                float _2940 = _2886 - _2286;
                                float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                                float _2948 = dot(vec3(_547, _550, _553), vec3((-0.0) - _2284, (-0.0) - _2285, (-0.0) - _2286));
                                float _3873 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                                float _2951 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
                                float _2952 = dot(vec3(_547, _550, _553), vec3(_2944 * _2938, _2944 * _2939, _2944 * _2940));
                                float _3884 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                                float _2955 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
                                float _2959 = ((_2955 * _2955) * (_2937 + (-1.0))) + 1.0;
                                float _2960 = _2897 * _2936;
                                float _2961 = _2960 * _2960;
                                float _2967 = ((1.0 - _2961) * dot(vec3(_547, _550, _553), vec3(_2884, _2885, _2886))) + _2961;
                                float _3895 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2968 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                                float _2969 = 1.0 - _2936;
                                float _2979 = (0.5 / (((_2968 * ((_2951 * _2969) + _2936)) + 9.9999999392252902907785028219223e-09) + (((_2968 * _2969) + _2936) * _2951))) * _2968;
                                float _3906 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2989 = (_2914 * _2891) * (((_2937 * 3.1415927410125732421875) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) / ((_2959 * _2959) * ((_2904 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2915 * _2760.x;
                                frontier_phi_83_pred_1 = _2915 * _2760.z;
                                frontier_phi_83_pred_2 = _2915 * _2760.y;
                                frontier_phi_83_pred_3 = _2989 * _2772.z;
                                frontier_phi_83_pred_4 = _2989 * _2772.y;
                                frontier_phi_83_pred_5 = _2989 * _2772.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2996 = frontier_phi_83_pred;
                            _2998 = frontier_phi_83_pred_1;
                            _2997 = frontier_phi_83_pred_2;
                            _2995 = frontier_phi_83_pred_3;
                            _2994 = frontier_phi_83_pred_4;
                            _2993 = frontier_phi_83_pred_5;
                            _2702 = _2996 + _2715;
                            _2703 = _2997 + _2716;
                            _2704 = _2998 + _2717;
                            _2699 = _2993 + _2712;
                            _2700 = _2994 + _2713;
                            _2701 = _2995 + _2714;
                            if (_2719 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2712 = _2699;
                                _2713 = _2700;
                                _2714 = _2701;
                                _2715 = _2702;
                                _2716 = _2703;
                                _2717 = _2704;
                                _2718 = _2719;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2704;
                        frontier_phi_77_pred_1 = _2703;
                        frontier_phi_77_pred_2 = _2702;
                        frontier_phi_77_pred_3 = _2701;
                        frontier_phi_77_pred_4 = _2700;
                        frontier_phi_77_pred_5 = _2699;
                    }
                    _2269 = frontier_phi_77_pred;
                    _2267 = frontier_phi_77_pred_1;
                    _2265 = frontier_phi_77_pred_2;
                    _2263 = frontier_phi_77_pred_3;
                    _2261 = frontier_phi_77_pred_4;
                    _2259 = frontier_phi_77_pred_5;
                    uint _2476 = _2475 + 1u;
                    if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2469 = _2259;
                        _2470 = _2261;
                        _2471 = _2263;
                        _2472 = _2265;
                        _2473 = _2267;
                        _2474 = _2269;
                        _2475 = _2476;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2261;
                frontier_phi_52_53_ladder_1 = _2269;
                frontier_phi_52_53_ladder_2 = _2267;
                frontier_phi_52_53_ladder_3 = _2265;
                frontier_phi_52_53_ladder_4 = _2263;
                frontier_phi_52_53_ladder_5 = _2259;
            }
            else
            {
                frontier_phi_52_53_ladder = _2108;
                frontier_phi_52_53_ladder_1 = _2116;
                frontier_phi_52_53_ladder_2 = _2114;
                frontier_phi_52_53_ladder_3 = _2112;
                frontier_phi_52_53_ladder_4 = _2110;
                frontier_phi_52_53_ladder_5 = _2106;
            }
            _2258 = frontier_phi_52_53_ladder_5;
            _2260 = frontier_phi_52_53_ladder;
            _2262 = frontier_phi_52_53_ladder_4;
            _2264 = frontier_phi_52_53_ladder_3;
            _2266 = frontier_phi_52_53_ladder_2;
            _2268 = frontier_phi_52_53_ladder_1;
        }
        float _2273 = isnan(1.0) ? _592 : (isnan(_592) ? 1.0 : min(_592, 1.0));
        _2012 = (_2273 * _2264) + _1739;
        _2014 = (_2273 * _2266) + _1740;
        _2016 = (_2273 * _2268) + _1741;
        _2018 = ((_2258 * 0.039999999105930328369140625) * _2273) + _1895;
        _2020 = ((_2260 * 0.039999999105930328369140625) * _2273) + _1896;
        _2022 = ((_2262 * 0.039999999105930328369140625) * _2273) + _1897;
    }
    else
    {
        _2012 = _1739;
        _2014 = _1740;
        _2016 = _1741;
        _2018 = _1895;
        _2020 = _1896;
        _2022 = _1897;
    }
    uint _2028 = _568 + uint(cbMatDynParam._m0[0u].w);
    float _3922 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3933 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3944 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _2053 = (((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_2012 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _592))) + ((_2018 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1429)) * cbPerFrame._m0[3u].x)) + (((_418 - (_418 * _288)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2028].x);
    float _2055 = ((((_419 - (_419 * _288)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2028].y) + ((_2020 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1429)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2014 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _592)));
    float _2057 = (((cbMtdParam._m0[9u].z * (_420 - (_420 * _288))) * cbInstanceData._m0[_2028].z) + ((_2022 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1429)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_2016 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _592)));
    float _2058 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2059 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2060 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    uint _2061 = _566 + 6u;
    float _2069 = _526 / cbSceneParam._m0[86u].x;
    float _2070 = _527 / cbSceneParam._m0[86u].y;
    vec4 _2084 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2069, _2070, (log2((isnan(cbSceneParam._m0[77u].w) ? _499 : (isnan(_499) ? cbSceneParam._m0[77u].w : min(_499, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2086 = _2084.x;
    float _2087 = _2084.y;
    float _2088 = _2084.z;
    float _2089 = _2084.w;
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    if (_499 > cbSceneParam._m0[78u].w)
    {
        float _2131 = isnan(_499) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _499 : min(cbSceneParam._m0[80u].w, _499));
        float _2132 = _2131 / _499;
        float _2143 = _2132 * _261;
        float _2144 = _262 * _2132;
        float _2145 = (-0.0) - _2144;
        float _2146 = _2132 * _263;
        float _2148 = (cbSceneParam._m0[77u].w * _2145) / _2131;
        float _2149 = _2148 + cbSceneParam._m0[79u].w;
        float _2150 = cbSceneParam._m0[79u].w - _2144;
        float _2156 = sqrt(((_2143 * _2143) + (_2144 * _2144)) + (_2146 * _2146));
        float _2159 = (1.0 - (cbSceneParam._m0[77u].w / _2131)) * _2156;
        float _2165 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2167 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2400;
        if (abs((_2145 - _2148) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2400 = ((((_2149 > 0.0) ? exp2(_2165 * _2149) : (2.0 - exp2(_2167 * _2149))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2159;
        }
        else
        {
            float _2319 = 1.0 / cbSceneParam._m0[80u].x;
            float _2320 = isnan(_2150) ? _2149 : (isnan(_2149) ? _2150 : max(_2149, _2150));
            float _2321 = isnan(_2150) ? _2149 : (isnan(_2149) ? _2150 : min(_2149, _2150));
            float _2330 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : min(_2320, 0.0));
            float _2331 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : min(_2321, 0.0));
            _2400 = ((abs(_2156 / _2145) * cbSceneParam._m0[80u].y) * ((((_2330 - _2331) * 2.0) - ((exp2(_2165 * (isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0)))) - exp2(_2165 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0))))) * _2319)) - ((exp2(_2167 * _2330) - exp2(_2167 * _2331)) * _2319))) + (_2159 * cbSceneParam._m0[80u].z);
        }
        vec4 _2402 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2069, _2070, 1.0), 0.0);
        float _2411 = exp2((_2400 * (-1.44269502162933349609375)) * (1.0 - _2402.w));
        float _2412 = log2(_2411);
        float _2428 = log2(_2089);
        _2169 = (exp2(_2428 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2412 * cbSceneParam._m0[78u].x)) * _2402.x) / cbSceneParam._m0[78u].x)) + _2086;
        _2171 = (exp2(_2428 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2412 * cbSceneParam._m0[78u].y)) * _2402.y) / cbSceneParam._m0[78u].y)) + _2087;
        _2173 = (exp2(_2428 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2412 * cbSceneParam._m0[78u].z)) * _2402.z) / cbSceneParam._m0[78u].z)) + _2088;
        _2175 = _2411 * _2089;
    }
    else
    {
        _2169 = _2086;
        _2171 = _2087;
        _2173 = _2088;
        _2175 = _2089;
    }
    bool _2438;
    vec4 _2185;
    vec4 _2207;
    float _2209;
    float _2213;
    float _2214;
    float _2215;
    float _2216;
    bool _2226;
    for (;;)
    {
        _2185 = cbMatDynParam._m0[0u];
        float _2187 = roundEven(_2185.y);
        bool _2188 = _2187 == 3.0;
        float _2189 = log2(_2175);
        float _2196 = exp2(_2189 * cbSceneParam._m0[78u].x) * _2058;
        float _2197 = exp2(_2189 * cbSceneParam._m0[78u].y) * _2059;
        float _2198 = exp2(_2189 * cbSceneParam._m0[78u].z) * _2060;
        float _2205 = _513 + (-0.5);
        _2207 = cbMtdParam._m0[1u];
        _2209 = _2207.y * _2205;
        float _2212 = (_2187 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2213 = _2212 * (_2188 ? _2196 : (_2196 + (cbSceneParam._m0[72u].w * _2169)));
        _2214 = _2212 * (_2188 ? _2197 : (_2197 + (cbSceneParam._m0[72u].w * _2171)));
        _2215 = _2212 * (_2188 ? _2198 : (_2198 + (cbSceneParam._m0[72u].w * _2173)));
        _2216 = _2205 * 0.999000012874603271484375;
        _2226 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2226)
        {
            if ((cbInstanceData._m0[_566 + 7u].x + _2216) < 0.5)
            {
                _2438 = true;
                break;
            }
        }
        uint _2354 = _568 + uint(_2185.w);
        if ((cbInstanceData._m0[_2354].w < 1.0) && ((cbInstanceData._m0[_2354].w + _2216) < 0.5))
        {
            _2438 = true;
            break;
        }
        if ((_2209 + 1.0) < _2207.x)
        {
            _2438 = true;
            break;
        }
        _2438 = false;
        break;
    }
    float _2669;
    if (_2438)
    {
        discard_state = true;
        _2669 = 0.0;
    }
    else
    {
        _2669 = cbInstanceData._m0[_2061].w;
    }
    SV_Target.x = _2213;
    SV_Target.y = _2214;
    SV_Target.z = _2215;
    SV_Target.w = _2669;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2061].w;
    discard_exit();
}


