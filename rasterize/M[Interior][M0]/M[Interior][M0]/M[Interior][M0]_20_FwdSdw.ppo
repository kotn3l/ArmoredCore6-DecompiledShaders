#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _995;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _393 = ((_387 * _381) + (_355 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _394 = ((_387 * _382) + (_356 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    float _414 = (_390 > 0.0) ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_395 + (-0.5)) + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_396 + (-0.5)) + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    vec4 _482 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _486 = _482.z;
    float _489 = (_482.x * 2.0) + (-1.0);
    float _490 = (_482.y * 2.0) + (-1.0);
    float _491 = dot(vec2(_489, _490), vec2(_489, _490));
    float _3362 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _496 = sqrt(1.0 - (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))));
    float _497 = _486 * _288;
    float _504 = (cbMtdParam._m0[15u].w * ((_327 - _497) + ((_486 - _327) * _288))) + _497;
    float _508 = (cbMtdParam._m0[16u].x * _355) + _489;
    float _509 = (cbMtdParam._m0[16u].x * _356) + _490;
    float _512 = fma(_496, _197, fma(_509, _204, _508 * _190));
    float _515 = fma(_496, _198, fma(_509, _205, _508 * _191));
    float _518 = fma(_496, _199, fma(_509, _206, _508 * _192));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    float _523 = _522 * _512;
    float _524 = _522 * _515;
    float _525 = _522 * _518;
    float _3373 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _526 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3395 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3406 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _550 = _261 * _549;
    float _551 = _262 * _549;
    float _552 = _263 * _549;
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _579 = fma(_525, cbSceneParam._m0[5u].z, fma(_524, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _523));
    float _582 = fma(_525, cbSceneParam._m0[6u].z, fma(_524, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _523));
    float _585 = fma(_525, cbSceneParam._m0[7u].z, fma(_524, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _523));
    uint _598 = uint(roundEven(NORMAL.w)) * 13u;
    uint _600 = _598 + 9u;
    uint _601 = _600 + uint(cbMatDynParam._m0[0u].w);
    float _607 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_601].x;
    float _608 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_601].y;
    float _609 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_601].z;
    float _3417 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _3428 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _3439 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    vec4 _621 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _624 = _621.x * TEXCOORD.z;
    float _625 = dot(vec3(_523, _524, _525), vec3(_550, _551, _552));
    float _628 = _625 * 2.0;
    float _632 = (_628 * _523) - _550;
    float _633 = (_628 * _524) - _551;
    float _634 = (_628 * _525) - _552;
    float _638 = abs(dot(vec3(_550, _551, _552), vec3(_523, _524, _525)));
    float _3450 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _640 = sqrt(_526);
    float _653 = exp2((_640 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_640 * 3.0));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _994;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _721 = fma(_693, cbModelParam._m0[26u].z, fma(_689, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685));
        float _725 = fma(_693, cbModelParam._m0[27u].z, fma(_689, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685));
        float _729 = fma(_693, cbModelParam._m0[28u].z, fma(_689, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685));
        float _752 = _685 + _523;
        float _753 = _689 + _524;
        float _754 = _693 + _525;
        float _764 = fma(_754, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752)) - _721;
        float _765 = fma(_754, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752)) - _725;
        float _766 = fma(_754, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752)) - _729;
        float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
        float _783 = ((_770 * _764) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_721 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_770 * _765) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_725 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_770 * _766) / cbModelParam._m0[34u].z) + ((((((_729 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        float _822 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_788.x + (-0.5));
        float _824 = _822 * (_788.y + (-0.5));
        float _825 = _822 * (_788.z + (-0.5));
        float _832 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_795.x + (-0.5));
        float _834 = _832 * (_795.y + (-0.5));
        float _835 = _832 * (_795.z + (-0.5));
        float _842 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_802.x + (-0.5));
        float _844 = _842 * (_802.y + (-0.5));
        float _845 = _842 * (_802.z + (-0.5));
        float _852 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_809.x + (-0.5));
        float _854 = _852 * (_809.y + (-0.5));
        float _855 = _852 * (_809.z + (-0.5));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = _823 * 0.5;
        float _860 = _833 * 0.5;
        float _861 = _843 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _876 = (dot(vec3(_523, _524, _525), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _886 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3498 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_888 + 1.0))) + _893) * _856;
        float _903 = _824 * 0.5;
        float _904 = _834 * 0.5;
        float _905 = _844 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _919 = (dot(vec3(_523, _524, _525), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _928 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3531 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_930 + 1.0))) + _935) * _857;
        float _945 = _825 * 0.5;
        float _946 = _835 * 0.5;
        float _947 = _845 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_523, _524, _525), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3564 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_972 + 1.0))) + _977) * _858;
        _994 = _825;
        _996 = _824;
        _997 = _823;
        _998 = _835;
        _999 = _834;
        _1000 = _833;
        _1001 = _845;
        _1002 = _844;
        _1003 = _843;
        _1004 = _858;
        _1005 = _857;
        _1006 = _856;
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
    }
    else
    {
        _994 = _995;
        _996 = _995;
        _997 = _995;
        _998 = _995;
        _999 = _995;
        _1000 = _995;
        _1001 = _995;
        _1002 = _995;
        _1003 = _995;
        _1004 = _995;
        _1005 = _995;
        _1006 = _995;
        _1007 = 0.0;
        _1008 = 0.0;
        _1009 = 0.0;
    }
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1035 = fma(_693, cbModelParam._m0[30u].z, fma(_689, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _685));
        float _1039 = fma(_693, cbModelParam._m0[31u].z, fma(_689, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _685));
        float _1043 = fma(_693, cbModelParam._m0[32u].z, fma(_689, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _685));
        float _1066 = _685 + _523;
        float _1067 = _689 + _524;
        float _1068 = _693 + _525;
        float _1078 = fma(_1068, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066)) - _1035;
        float _1079 = fma(_1068, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066)) - _1039;
        float _1080 = fma(_1068, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066)) - _1043;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1035 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1039 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[35u].z) + ((((((_1043 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1134 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1101.x + (-0.5));
        float _1136 = _1134 * (_1101.y + (-0.5));
        float _1137 = _1134 * (_1101.z + (-0.5));
        float _1144 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1108.x + (-0.5));
        float _1146 = _1144 * (_1108.y + (-0.5));
        float _1147 = _1144 * (_1108.z + (-0.5));
        float _1154 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1115.x + (-0.5));
        float _1156 = _1154 * (_1115.y + (-0.5));
        float _1157 = _1154 * (_1115.z + (-0.5));
        float _1164 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1122.x + (-0.5));
        float _1166 = _1164 * (_1122.y + (-0.5));
        float _1167 = _1164 * (_1122.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_523, _524, _525), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3627 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1198 + 1.0))) + _1203) * _1168;
        float _1213 = _1136 * 0.5;
        float _1214 = _1146 * 0.5;
        float _1215 = _1156 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_523, _524, _525), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3660 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1240 + 1.0))) + _1245) * _1169;
        float _1255 = _1137 * 0.5;
        float _1256 = _1147 * 0.5;
        float _1257 = _1157 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_523, _524, _525), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3693 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1282 + 1.0))) + _1287) * _1170;
        _1304 = _1137;
        _1305 = _1136;
        _1306 = _1135;
        _1307 = _1147;
        _1308 = _1146;
        _1309 = _1145;
        _1310 = _1157;
        _1311 = _1156;
        _1312 = _1155;
        _1313 = _1170;
        _1314 = _1169;
        _1315 = _1168;
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _995;
        _1305 = _995;
        _1306 = _995;
        _1307 = _995;
        _1308 = _995;
        _1309 = _995;
        _1310 = _995;
        _1311 = _995;
        _1312 = _995;
        _1313 = _995;
        _1314 = _995;
        _1315 = _995;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1007)) + _1007;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1008)) + _1008;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1009)) + _1009;
    float _1351 = fma(_1330, cbSceneParam._m0[89u].z, fma(_1329, cbSceneParam._m0[89u].y, _1328 * cbSceneParam._m0[89u].x));
    float _1354 = fma(_1330, cbSceneParam._m0[90u].z, fma(_1329, cbSceneParam._m0[90u].y, _1328 * cbSceneParam._m0[90u].x));
    float _1357 = fma(_1330, cbSceneParam._m0[91u].z, fma(_1329, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1328));
    float _1372 = _632 * 0.5;
    float _1373 = _633 * 0.5;
    float _1374 = _634 * 0.5;
    float _1375 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1378 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1381 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1415;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1388 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_994, _998, _1001, _1004));
        float _1392 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_996, _999, _1002, _1005));
        float _1396 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1403 = dot(vec4(cbModelParam._m0[39u]), vec4(_1372, _1373, _1374, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1403) ? 0.0 : (isnan(0.0) ? _1403 : max(0.0, _1403))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1426;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1417 = dot(vec4(cbModelParam._m0[40u]), vec4(_1372, _1373, _1374, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1430 = (_1426 * cbModelParam._m0[1u].x) + (_1415 * (1.0 - cbModelParam._m0[1u].x));
    float _1440 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _526);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1440 : min(cbModelParam._m0[25u].z, _1440));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1489 = fma(_693, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685)) + cbModelParam._m0[13u].w;
        float _1493 = fma(_693, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685)) + cbModelParam._m0[14u].w;
        float _1497 = fma(_693, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685)) + cbModelParam._m0[15u].w;
        float _1500 = fma(_634, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632));
        float _1503 = fma(_634, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632));
        float _1506 = fma(_634, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632));
        float _1534;
        if (_1500 > 0.0)
        {
            _1534 = abs((1.0 - _1489) / _1500);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1489 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1534 = frontier_phi_22_20_ladder;
        }
        float _1703;
        if (_1503 > 0.0)
        {
            _1703 = abs((1.0 - _1493) / _1503);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1493 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1703 = frontier_phi_31_27_ladder;
        }
        float _2147;
        if (_1506 > 0.0)
        {
            _2147 = abs((1.0 - _1497) / _1506);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1497 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2147 = frontier_phi_43_38_ladder;
        }
        float _2149 = isnan(_1703) ? _1534 : (isnan(_1534) ? _1703 : min(_1534, _1703));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1500) + _1489;
        float _2155 = (_2150 * _1503) + _1493;
        float _2156 = (_2150 * _1506) + _1497;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2157;
        float _2161 = _2157 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 > _2161) || ((_2155 < _2159) || ((_2154 < _2159) || (_2154 > _2161))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2156, cbModelParam._m0[9u].z, fma(_2155, cbModelParam._m0[9u].y, _2154 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2156, cbModelParam._m0[10u].z, fma(_2155, cbModelParam._m0[10u].y, _2154 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2156, cbModelParam._m0[11u].z, fma(_2155, cbModelParam._m0[11u].y, _2154 * cbModelParam._m0[11u].x))), _1441);
            frontier_phi_21_43_ladder = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2406.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2406.z * cbModelParam._m0[1u].y;
        }
        _1522 = frontier_phi_21_43_ladder_1;
        _1524 = frontier_phi_21_43_ladder;
        _1526 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_632, _633, _634), _1441);
        _1522 = _1510.x * cbModelParam._m0[1u].y;
        _1524 = _1510.y * cbModelParam._m0[1u].y;
        _1526 = _1510.z * cbModelParam._m0[1u].y;
    }
    float _1530 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _526);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1530 : min(cbModelParam._m0[25u].w, _1530));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1584 = fma(_693, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685)) + cbModelParam._m0[21u].w;
        float _1588 = fma(_693, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685)) + cbModelParam._m0[22u].w;
        float _1592 = fma(_693, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685)) + cbModelParam._m0[23u].w;
        float _1595 = fma(_634, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632));
        float _1598 = fma(_634, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632));
        float _1601 = fma(_634, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632));
        float _1708;
        if (_1595 > 0.0)
        {
            _1708 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1708 = frontier_phi_33_29_ladder;
        }
        float _2174;
        if (_1598 > 0.0)
        {
            _2174 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2174 = frontier_phi_45_40_ladder;
        }
        float _2527;
        if (_1601 > 0.0)
        {
            _2527 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2527 = frontier_phi_57_52_ladder;
        }
        float _2529 = isnan(_2174) ? _1708 : (isnan(_1708) ? _2174 : min(_1708, _2174));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _1595) + _1584;
        float _2535 = (_2530 * _1598) + _1588;
        float _2536 = (_2530 * _1601) + _1592;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2537;
        float _2540 = _2537 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2536 > _2540) || ((_2536 < _2538) || ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 < _2538) || (_2534 > _2540))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2536, cbModelParam._m0[17u].z, fma(_2535, cbModelParam._m0[17u].y, _2534 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2536, cbModelParam._m0[18u].z, fma(_2535, cbModelParam._m0[18u].y, _2534 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2536, cbModelParam._m0[19u].z, fma(_2535, cbModelParam._m0[19u].y, _2534 * cbModelParam._m0[19u].x))), _1531);
            frontier_phi_30_57_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1620 = frontier_phi_30_57_ladder_2;
        _1622 = frontier_phi_30_57_ladder_1;
        _1624 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_632, _633, _634), _1531);
        _1620 = _1604.x * cbModelParam._m0[1u].z;
        _1622 = _1604.y * cbModelParam._m0[1u].z;
        _1624 = _1604.z * cbModelParam._m0[1u].z;
    }
    float _1636 = ((((1.0 - _653) * ((_640 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_653 * _640)) * _624;
    float _1637 = _1636 * ((cbModelParam._m0[1u].w * (_1620 - _1522)) + _1522);
    float _1638 = _1636 * ((cbModelParam._m0[1u].w * (_1622 - _1524)) + _1524);
    float _1639 = _1636 * ((cbModelParam._m0[1u].w * (_1624 - _1526)) + _1526);
    float _1642 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, _1637 * cbSceneParam._m0[91u].x));
    float _1682 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1686 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1690 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1694 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1695 = _1682 / _1694;
    float _1696 = _1686 / _1694;
    float _1697 = _1690 / _1694;
    float _1844;
    float _1845;
    float _1846;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1724 = ((uint(_1697 > cbSceneParam._m0[59u].y) + uint(_1697 > cbSceneParam._m0[59u].x)) + uint(_1697 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1725 = _1724 + 43u;
        uint _1733 = _1724 + 44u;
        uint _1741 = _1724 + 45u;
        uint _1749 = _1724 + 46u;
        float _1760 = fma(_1694, cbSceneParam._m0[_1725].w, fma(_1690, cbSceneParam._m0[_1725].z, fma(_1686, cbSceneParam._m0[_1725].y, _1682 * cbSceneParam._m0[_1725].x)));
        float _1764 = fma(_1694, cbSceneParam._m0[_1733].w, fma(_1690, cbSceneParam._m0[_1733].z, fma(_1686, cbSceneParam._m0[_1733].y, _1682 * cbSceneParam._m0[_1733].x)));
        float _1772 = fma(_1694, cbSceneParam._m0[_1749].w, fma(_1690, cbSceneParam._m0[_1749].z, fma(_1686, cbSceneParam._m0[_1749].y, _1682 * cbSceneParam._m0[_1749].x)));
        float _1777 = cbSceneParam._m0[33u].z * _1772;
        float _1779 = cbSceneParam._m0[33u].w * _1772;
        float _1782 = fma(_1694, cbSceneParam._m0[_1741].w, fma(_1690, cbSceneParam._m0[_1741].z, fma(_1686, cbSceneParam._m0[_1741].y, _1682 * cbSceneParam._m0[_1741].x))) / _1772;
        float _1830 = (cbSceneParam._m0[33u].x - sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697))) * cbSceneParam._m0[33u].y;
        float _3819 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1837 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1777 + _1760) / _1772, (_1779 + _1764) / _1772), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1779 + _1760) / _1772, (_1764 - _1777) / _1772), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1760 - _1777) / _1772, (_1764 - _1779) / _1772), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1760 - _1779) / _1772, (_1777 + _1764) / _1772), _1782), 0.0)).x), vec4(0.25)));
        _1844 = 1.0 - (_1837 * cbSceneParam._m0[34u].x);
        _1845 = 1.0 - (_1837 * cbSceneParam._m0[34u].y);
        _1846 = 1.0 - (_1837 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1844 = 1.0;
        _1845 = 1.0;
        _1846 = 1.0;
    }
    float _1910;
    float _1912;
    float _1914;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1898 = fma(_1694, cbSceneParam._m0[63u].w, fma(_1690, cbSceneParam._m0[63u].z, fma(_1686, cbSceneParam._m0[63u].y, _1682 * cbSceneParam._m0[63u].x)));
        float _1899 = fma(_1694, cbSceneParam._m0[60u].w, fma(_1690, cbSceneParam._m0[60u].z, fma(_1686, cbSceneParam._m0[60u].y, _1682 * cbSceneParam._m0[60u].x))) / _1898;
        float _1900 = fma(_1694, cbSceneParam._m0[61u].w, fma(_1690, cbSceneParam._m0[61u].z, fma(_1686, cbSceneParam._m0[61u].y, _1682 * cbSceneParam._m0[61u].x))) / _1898;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1899 >= cbSceneParam._m0[64u].x) && (_1900 >= cbSceneParam._m0[64u].y)) && (_1899 <= cbSceneParam._m0[64u].z)) && (_1900 <= cbSceneParam._m0[64u].w))
        {
            float _2187 = fma(_1694, cbSceneParam._m0[62u].w, fma(_1690, cbSceneParam._m0[62u].z, fma(_1686, cbSceneParam._m0[62u].y, _1682 * cbSceneParam._m0[62u].x))) / _1898;
            float _2191 = isnan(cbSceneParam._m0[41u].w) ? _2187 : (isnan(_2187) ? cbSceneParam._m0[41u].w : max(_2187, cbSceneParam._m0[41u].w));
            float _2234 = (cbSceneParam._m0[33u].x - sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697))) * cbSceneParam._m0[33u].y;
            float _3835 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
            float _2241 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1899, cbSceneParam._m0[33u].w + _1900), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1899, _1900 - cbSceneParam._m0[33u].z), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1899 - cbSceneParam._m0[33u].z, _1900 - cbSceneParam._m0[33u].w), _2191), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1899 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1900), _2191), 0.0)).x), vec4(0.25)));
            float _2245 = 1.0 - (_2241 * cbSceneParam._m0[34u].x);
            float _2246 = 1.0 - (_2241 * cbSceneParam._m0[34u].y);
            float _2247 = 1.0 - (_2241 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2246) ? _1845 : (isnan(_1845) ? _2246 : min(_1845, _2246));
            frontier_phi_42_41_ladder_1 = isnan(_2245) ? _1844 : (isnan(_1844) ? _2245 : min(_1844, _2245));
            frontier_phi_42_41_ladder_2 = isnan(_2247) ? _1846 : (isnan(_1846) ? _2247 : min(_1846, _2247));
        }
        else
        {
            frontier_phi_42_41_ladder = _1845;
            frontier_phi_42_41_ladder_1 = _1844;
            frontier_phi_42_41_ladder_2 = _1846;
        }
        _1910 = frontier_phi_42_41_ladder_1;
        _1912 = frontier_phi_42_41_ladder;
        _1914 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1910 = _1844;
        _1912 = _1845;
        _1914 = _1846;
    }
    uvec4 _1919 = floatBitsToUint(cbInstanceData._m0[_598 + 5u]);
    uint _1921 = _1919.x * 14u;
    uint _1922 = _1921 + 13u;
    float _1927 = _624 + (-1.0);
    float _1930 = (cbLight._m0[_1922].x * _1927) + 1.0;
    float _1931 = (cbLight._m0[_1922].y * _1927) + 1.0;
    uint _1932 = _1921 + 5u;
    float _1938 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1942 = _1921 + 4u;
    float _1951 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1955 = _1921 | 1u;
    float _1966 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_523, _524, _525));
    float _1969 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_523, _524, _525));
    float _3871 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _3882 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1974 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.3183098733425140380859375;
    float _1976 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.3183098733425140380859375;
    float _1983 = ((cbLight._m0[_1932].x * _1938) * _1976) + (((cbLight._m0[_1942].x * _1910) * _1951) * _1974);
    float _1984 = ((_1938 * cbLight._m0[_1932].y) * _1976) + (((cbLight._m0[_1942].y * _1912) * _1951) * _1974);
    float _1985 = ((_1938 * cbLight._m0[_1932].z) * _1976) + (((cbLight._m0[_1942].z * _1914) * _1951) * _1974);
    uint _1987 = _1921 + 8u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _526) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1921].x + _550;
    float _2003 = cbLight._m0[_1921].y + _551;
    float _2004 = cbLight._m0[_1921].z + _552;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1921].xyz));
    float _3893 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _2016 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _2017 = dot(vec3(_523, _524, _525), vec3(_2009, _2010, _2011));
    float _3915 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _2021 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2009, _2010, _2011));
    float _3926 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2025 = _2001 * _2001;
    float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
    float _2040 = (exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2041 = 1.0 - _2001;
    float _2052 = (0.5 / (((_2016 * ((_2015 * _2041) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2041) + _2001) * _2015))) * _2015;
    float _3937 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
    uint _2068 = _1921 + 9u;
    float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _526) * 0.949999988079071044921875);
    float _2080 = _2079 * _2079;
    float _2081 = cbLight._m0[_1955].x + _550;
    float _2082 = cbLight._m0[_1955].y + _551;
    float _2083 = cbLight._m0[_1955].z + _552;
    float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
    float _2088 = _2087 * _2081;
    float _2089 = _2087 * _2082;
    float _2090 = _2087 * _2083;
    float _2091 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1955].xyz));
    float _3948 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _2095 = dot(vec3(_523, _524, _525), vec3(_2088, _2089, _2090));
    float _3959 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2088, _2089, _2090));
    float _3970 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = _2080 * _2080;
    float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
    float _2116 = (exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2117 = 1.0 - _2080;
    float _2127 = (0.5 / (((_2016 * ((_2094 * _2117) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2117) + _2080) * _2094))) * _2094;
    float _3981 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2129 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
    float _2139 = (((_2116 * cbLight._m0[_2068].x) * _2129) * _1938) + ((((cbLight._m0[_1987].x * _1910) * _2040) * _2054) * _1951);
    float _2140 = (((_2116 * cbLight._m0[_2068].y) * _2129) * _1938) + ((((cbLight._m0[_1987].y * _1912) * _2040) * _2054) * _1951);
    float _2141 = (((_2116 * cbLight._m0[_2068].z) * _2129) * _1938) + ((((cbLight._m0[_1987].z * _1914) * _2040) * _2054) * _1951);
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    if (_1919.y == 0u)
    {
        uvec4 _2259 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2260 = _2259.x;
        uint _2271 = uint((float(_2259.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _2260))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _2260)));
        float _2281 = (log2(_1697 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2282 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        uint _2285 = uint(isnan(14.0) ? _2282 : (isnan(_2282) ? 14.0 : min(_2282, 14.0)));
        uvec4 _2290 = texelFetch(g_lightClusterGridBuffer, int(((_2285 << 2u) + (_2271 << 6u)) >> 2u));
        uint _2291 = _2290.x;
        uint _2292 = _2259.z;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((((1u << ((_2292 >> 4u) & 15u)) + 4294967295u) & _2291) == 0u) || ((_2292 & 240u) == 0u))
        {
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
        }
        else
        {
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            uint _2591 = 0u;
            uint _2600;
            bool _2601;
            for (;;)
            {
                _2600 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2591 << 2u)) >> 2u)).x;
                _2601 = _2600 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2601)
                {
                    frontier_phi_66_pred = _2586;
                    frontier_phi_66_pred_1 = _2585;
                    frontier_phi_66_pred_2 = _2587;
                    frontier_phi_66_pred_3 = _2590;
                    frontier_phi_66_pred_4 = _2589;
                    frontier_phi_66_pred_5 = _2588;
                }
                else
                {
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    uint _2736;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2600;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    for (;;)
                    {
                        uint _2740 = uint(findLSB(_2736)) + (_2591 << 5u);
                        uint _2737 = (_2736 + 4294967295u) & _2736;
                        uint _2742 = _2740 * 48u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 3u)).x));
                        uint _2762 = (_2740 * 48u) + 4u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 3u)).x));
                        uint _2781 = (_2740 * 48u) + 8u;
                        vec3 _2792 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x));
                        float _2796 = _2756.x - _1695;
                        float _2797 = _2756.y - _1696;
                        float _2798 = _2756.z - _1697;
                        float _2799 = dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798));
                        float _2802 = inversesqrt(_2799);
                        float _2803 = _2802 * _2796;
                        float _2804 = _2802 * _2797;
                        float _2805 = _2802 * _2798;
                        float _2806 = dot(vec3(_579, _582, _585), vec3(_2803, _2804, _2805));
                        float _2811 = 1.0 - (_2799 * _2756.w);
                        float _4002 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2813 = sqrt(_2799) * _2775.w;
                        float _2816 = 1.39999997615814208984375 / (_2813 + 1.39999997615814208984375);
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2806) + _2817;
                        float _2823 = _2813 * _2813;
                        float _2827 = ((isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * _2812) / ((_2823 * 0.699999988079071044921875) + 1.0);
                        float _2831 = (-0.0) - _1695;
                        float _2832 = (-0.0) - _1696;
                        float _2833 = (-0.0) - _1697;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2838 = _2837 * _2831;
                        float _2839 = _2837 * _2832;
                        float _2840 = _2837 * _2833;
                        float _2847 = exp2(log2(1.0 / ((_2823 * 3.5) + 5.0)) * 0.25);
                        float _2848 = 1.0 - _640;
                        float _2855 = sqrt(1.0 - ((1.0 - (_2848 * _2848)) * (1.0 - (_2847 * _2847))));
                        float _2856 = _2855 * _2855;
                        float _2857 = _2856 * _2856;
                        float _2858 = _2838 + _2803;
                        float _2859 = _2839 + _2804;
                        float _2860 = _2840 + _2805;
                        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
                        float _2868 = dot(vec3(_579, _582, _585), vec3(_2838, _2839, _2840));
                        float _4018 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2871 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2872 = dot(vec3(_579, _582, _585), vec3(_2864 * _2858, _2864 * _2859, _2864 * _2860));
                        float _4029 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                        float _2879 = ((_2875 * _2875) * (_2857 + (-1.0))) + 1.0;
                        float _2880 = _2816 * _2856;
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2806) + _2881;
                        float _4040 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2885 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2886 = 1.0 - _2856;
                        float _2896 = (0.5 / (((_2885 * ((_2871 * _2886) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2885 * _2886) + _2856) * _2871))) * _2885;
                        float _4051 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2907 = (((_2857 * 3.1415927410125732421875) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) / ((_2879 * _2879) * ((_2823 * 2.1991131305694580078125) + 3.141590118408203125))) * _2812;
                        _2665 = (_2827 * _2775.x) + _2733;
                        _2666 = (_2827 * _2775.y) + _2734;
                        _2667 = (_2827 * _2775.z) + _2735;
                        _2662 = (_2907 * _2792.x) + _2730;
                        _2663 = (_2907 * _2792.y) + _2731;
                        _2664 = (_2907 * _2792.z) + _2732;
                        if (_2737 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2730 = _2662;
                            _2731 = _2663;
                            _2732 = _2664;
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2737;
                        }
                    }
                    frontier_phi_66_pred = _2663;
                    frontier_phi_66_pred_1 = _2662;
                    frontier_phi_66_pred_2 = _2664;
                    frontier_phi_66_pred_3 = _2667;
                    frontier_phi_66_pred_4 = _2666;
                    frontier_phi_66_pred_5 = _2665;
                }
                _2418 = frontier_phi_66_pred;
                _2416 = frontier_phi_66_pred_1;
                _2420 = frontier_phi_66_pred_2;
                _2426 = frontier_phi_66_pred_3;
                _2424 = frontier_phi_66_pred_4;
                _2422 = frontier_phi_66_pred_5;
                uint _2592 = _2591 + 1u;
                if (_2592 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2585 = _2416;
                    _2586 = _2418;
                    _2587 = _2420;
                    _2588 = _2422;
                    _2589 = _2424;
                    _2590 = _2426;
                    _2591 = _2592;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
        }
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.z;
        uint _2432 = (_2430 >> 8u) & 15u;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((4294967295u << _2432) & _2291) == 0u)
        {
            _2553 = _2415;
            _2555 = _2417;
            _2557 = _2419;
            _2559 = _2421;
            _2561 = _2423;
            _2563 = _2425;
        }
        else
        {
            float _2578 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
            float _2579 = _2578 * _1695;
            float _2580 = _2578 * _1696;
            float _2581 = _2578 * _1697;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2432 < ((_2430 >> 12u) & 15u))
            {
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2713 = _2415;
                float _2714 = _2417;
                float _2715 = _2419;
                float _2716 = _2421;
                float _2717 = _2423;
                float _2718 = _2425;
                uint _2719 = _2432;
                uint _2728;
                bool _2729;
                for (;;)
                {
                    _2728 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                    _2729 = _2728 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2729)
                    {
                        frontier_phi_72_pred = _2714;
                        frontier_phi_72_pred_1 = _2713;
                        frontier_phi_72_pred_2 = _2718;
                        frontier_phi_72_pred_3 = _2717;
                        frontier_phi_72_pred_4 = _2716;
                        frontier_phi_72_pred_5 = _2715;
                    }
                    else
                    {
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _2925 = _2713;
                        float _2926 = _2714;
                        float _2927 = _2715;
                        float _2928 = _2716;
                        float _2929 = _2717;
                        float _2930 = _2718;
                        uint _2931 = _2728;
                        uint _2932;
                        vec4 _2957;
                        float _2958;
                        vec4 _2973;
                        vec3 _2985;
                        vec4 _3000;
                        vec4 _3015;
                        float _3061;
                        bool _3062;
                        for (;;)
                        {
                            uint _2942 = ((_2719 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2931));
                            _2932 = (_2931 + 4294967295u) & _2931;
                            uint _2944 = _2942 * 40u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            _2958 = _2957.w;
                            uint _2960 = (_2942 * 40u) + 4u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2975 = (_2942 * 40u) + 8u;
                            _2985 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x));
                            uint _2987 = (_2942 * 40u) + 16u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3002 = (_2942 * 40u) + 20u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3017 = (_2942 * 40u) + 24u;
                            vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3036 = (_2942 * 40u) + 28u;
                            vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            _3061 = fma(_1697, _3049.z, fma(_1696, _3049.y, _3049.x * _1695)) + _3049.w;
                            _3062 = !((fma(_1697, _3030.z, fma(_1696, _3030.y, _3030.x * _1695)) + _3030.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3062)
                            {
                                float _3089 = _2957.x - _1695;
                                float _3090 = _2957.y - _1696;
                                float _3091 = _2957.z - _1697;
                                float _3092 = dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091));
                                float _3095 = inversesqrt(_3092);
                                float _3096 = _3095 * _3089;
                                float _3097 = _3095 * _3090;
                                float _3098 = _3095 * _3091;
                                float _3102 = 1.0 - (_3092 / (_2958 * _2958));
                                float _4062 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3103 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3107 = sqrt(_3092) * _2973.w;
                                float _3109 = 1.39999997615814208984375 / (_3107 + 1.39999997615814208984375);
                                float _3110 = _3109 * _3109;
                                float _3113 = ((1.0 - _3110) * dot(vec3(_3096, _3097, _3098), vec3(_579, _582, _585))) + _3110;
                                float _3116 = _3107 * _3107;
                                float _3120 = (fma(_1697, _3000.z, fma(_1696, _3000.y, _3000.x * _1695)) + _3000.w) / _3061;
                                float _3121 = (fma(_1697, _3015.z, fma(_1696, _3015.y, _3015.x * _1695)) + _3015.w) / _3061;
                                float _3125 = 1.0 - dot(vec2(_3120, _3121), vec2(_3120, _3121));
                                float _4078 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3127 = _3126 * (((isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))) * _3103) / ((_3116 * 0.699999988079071044921875) + 1.0));
                                float _3139 = exp2(log2(1.0 / ((_3116 * 3.5) + 5.0)) * 0.25);
                                float _3140 = 1.0 - _640;
                                float _3147 = sqrt(1.0 - ((1.0 - (_3140 * _3140)) * (1.0 - (_3139 * _3139))));
                                float _3148 = _3147 * _3147;
                                float _3149 = _3148 * _3148;
                                float _3150 = _3096 - _2579;
                                float _3151 = _3097 - _2580;
                                float _3152 = _3098 - _2581;
                                float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                                float _3160 = dot(vec3(_579, _582, _585), vec3((-0.0) - _2579, (-0.0) - _2580, (-0.0) - _2581));
                                float _4089 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3163 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3164 = dot(vec3(_579, _582, _585), vec3(_3156 * _3150, _3156 * _3151, _3156 * _3152));
                                float _4100 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3167 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3171 = ((_3167 * _3167) * (_3149 + (-1.0))) + 1.0;
                                float _3172 = _3109 * _3148;
                                float _3173 = _3172 * _3172;
                                float _3179 = ((1.0 - _3173) * dot(vec3(_579, _582, _585), vec3(_3096, _3097, _3098))) + _3173;
                                float _4111 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3181 = 1.0 - _3148;
                                float _3191 = (0.5 / (((_3180 * ((_3163 * _3181) + _3148)) + 9.9999999392252902907785028219223e-09) + (((_3180 * _3181) + _3148) * _3163))) * _3180;
                                float _4122 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3201 = (_3126 * _3103) * (((_3149 * 3.1415927410125732421875) * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) / ((_3171 * _3171) * ((_3116 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3201 * _2985.y;
                                frontier_phi_78_pred_1 = _3201 * _2985.x;
                                frontier_phi_78_pred_2 = _3127 * _2973.z;
                                frontier_phi_78_pred_3 = _3127 * _2973.y;
                                frontier_phi_78_pred_4 = _3127 * _2973.x;
                                frontier_phi_78_pred_5 = _3201 * _2985.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3206 = frontier_phi_78_pred;
                            _3205 = frontier_phi_78_pred_1;
                            _3210 = frontier_phi_78_pred_2;
                            _3209 = frontier_phi_78_pred_3;
                            _3208 = frontier_phi_78_pred_4;
                            _3207 = frontier_phi_78_pred_5;
                            _2915 = _3208 + _2928;
                            _2916 = _3209 + _2929;
                            _2917 = _3210 + _2930;
                            _2912 = _3205 + _2925;
                            _2913 = _3206 + _2926;
                            _2914 = _3207 + _2927;
                            if (_2932 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2932;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2913;
                        frontier_phi_72_pred_1 = _2912;
                        frontier_phi_72_pred_2 = _2917;
                        frontier_phi_72_pred_3 = _2916;
                        frontier_phi_72_pred_4 = _2915;
                        frontier_phi_72_pred_5 = _2914;
                    }
                    _2556 = frontier_phi_72_pred;
                    _2554 = frontier_phi_72_pred_1;
                    _2564 = frontier_phi_72_pred_2;
                    _2562 = frontier_phi_72_pred_3;
                    _2560 = frontier_phi_72_pred_4;
                    _2558 = frontier_phi_72_pred_5;
                    uint _2720 = _2719 + 1u;
                    if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2713 = _2554;
                        _2714 = _2556;
                        _2715 = _2558;
                        _2716 = _2560;
                        _2717 = _2562;
                        _2718 = _2564;
                        _2719 = _2720;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2564;
                frontier_phi_59_60_ladder_1 = _2560;
                frontier_phi_59_60_ladder_2 = _2558;
                frontier_phi_59_60_ladder_3 = _2556;
                frontier_phi_59_60_ladder_4 = _2554;
                frontier_phi_59_60_ladder_5 = _2562;
            }
            else
            {
                frontier_phi_59_60_ladder = _2425;
                frontier_phi_59_60_ladder_1 = _2421;
                frontier_phi_59_60_ladder_2 = _2419;
                frontier_phi_59_60_ladder_3 = _2417;
                frontier_phi_59_60_ladder_4 = _2415;
                frontier_phi_59_60_ladder_5 = _2423;
            }
            _2553 = frontier_phi_59_60_ladder_4;
            _2555 = frontier_phi_59_60_ladder_3;
            _2557 = frontier_phi_59_60_ladder_2;
            _2559 = frontier_phi_59_60_ladder_1;
            _2561 = frontier_phi_59_60_ladder_5;
            _2563 = frontier_phi_59_60_ladder;
        }
        float _2568 = isnan(1.0) ? _624 : (isnan(_624) ? 1.0 : min(_624, 1.0));
        _2304 = (_2568 * _2559) + _1983;
        _2306 = (_2568 * _2561) + _1984;
        _2308 = (_2568 * _2563) + _1985;
        _2310 = ((_2553 * 0.039999999105930328369140625) * _2568) + _2139;
        _2312 = ((_2555 * 0.039999999105930328369140625) * _2568) + _2140;
        _2314 = ((_2557 * 0.039999999105930328369140625) * _2568) + _2141;
    }
    else
    {
        _2304 = _1983;
        _2306 = _1984;
        _2308 = _1985;
        _2310 = _2139;
        _2312 = _2140;
        _2314 = _2141;
    }
    uint _2320 = _600 + uint(cbMatDynParam._m0[0u].w);
    float _4138 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4149 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4160 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _2345 = (((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2304 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _624))) + ((_2310 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1430)) * cbPerFrame._m0[3u].x)) + (((_454 - (_454 * _288)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2320].x);
    float _2347 = ((((_455 - (_455 * _288)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2320].y) + ((_2312 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1430)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2306 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _624)));
    float _2349 = (((cbMtdParam._m0[9u].z * (_456 - (_456 * _288))) * cbInstanceData._m0[_2320].z) + ((_2314 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1430)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2308 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _624)));
    uint _2353 = _598 + 6u;
    float _2361 = _558 / cbSceneParam._m0[86u].x;
    float _2362 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2376 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2378 = _2376.x;
    float _2379 = _2376.y;
    float _2380 = _2376.z;
    float _2381 = _2376.w;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2440 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2441 = _2440 / _545;
        float _2452 = _2441 * _261;
        float _2453 = _262 * _2441;
        float _2454 = (-0.0) - _2453;
        float _2455 = _2441 * _263;
        float _2457 = (cbSceneParam._m0[77u].w * _2454) / _2440;
        float _2458 = _2457 + cbSceneParam._m0[79u].w;
        float _2459 = cbSceneParam._m0[79u].w - _2453;
        float _2465 = sqrt(((_2452 * _2452) + (_2453 * _2453)) + (_2455 * _2455));
        float _2468 = (1.0 - (cbSceneParam._m0[77u].w / _2440)) * _2465;
        float _2473 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2475 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2675;
        if (abs((_2454 - _2457) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2675 = ((((_2458 > 0.0) ? exp2(_2473 * _2458) : (2.0 - exp2(_2475 * _2458))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2468;
        }
        else
        {
            float _2614 = 1.0 / cbSceneParam._m0[80u].x;
            float _2615 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : max(_2458, _2459));
            float _2616 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : min(_2458, _2459));
            float _2625 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : min(_2615, 0.0));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            _2675 = ((abs(_2465 / _2454) * cbSceneParam._m0[80u].y) * ((((_2625 - _2626) * 2.0) - ((exp2(_2473 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)))) - exp2(_2473 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0))))) * _2614)) - ((exp2(_2475 * _2625) - exp2(_2475 * _2626)) * _2614))) + (_2468 * cbSceneParam._m0[80u].z);
        }
        vec4 _2677 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2361, _2362, 1.0), 0.0);
        float _2686 = exp2((_2675 * (-1.44269502162933349609375)) * (1.0 - _2677.w));
        float _2687 = log2(_2686);
        float _2703 = log2(_2381);
        _2477 = (exp2(_2703 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2687 * cbSceneParam._m0[78u].x)) * _2677.x) / cbSceneParam._m0[78u].x)) + _2378;
        _2479 = (exp2(_2703 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2687 * cbSceneParam._m0[78u].y)) * _2677.y) / cbSceneParam._m0[78u].y)) + _2379;
        _2481 = (exp2(_2703 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2687 * cbSceneParam._m0[78u].z)) * _2677.z) / cbSceneParam._m0[78u].z)) + _2380;
        _2483 = _2686 * _2381;
    }
    else
    {
        _2477 = _2378;
        _2479 = _2379;
        _2481 = _2380;
        _2483 = _2381;
    }
    float _2495 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2496 = _2495 == 3.0;
    float _2497 = log2(_2483);
    float _2504 = exp2(_2497 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0)));
    float _2505 = exp2(_2497 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0)));
    float _2506 = exp2(_2497 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0)));
    float _2515 = (_2495 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2515 * (_2496 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2477)));
    SV_Target.y = _2515 * (_2496 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2479)));
    SV_Target.z = _2515 * (_2496 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2481)));
    SV_Target.w = cbInstanceData._m0[_2353].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2353].w;
}


