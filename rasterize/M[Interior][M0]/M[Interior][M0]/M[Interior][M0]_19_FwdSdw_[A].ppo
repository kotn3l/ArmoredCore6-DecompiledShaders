#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _399;
float _3452;
float _3453;
float _3454;
float _3455;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _332 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _339 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _348 = cbMtdParam._m0[23u].x + _263;
    float _349 = cbMtdParam._m0[23u].y + _264;
    float _350 = cbMtdParam._m0[23u].z + _265;
    float _364 = (-0.0) - dot(vec3(_348, _349, _350), vec3(_332 * _192, _332 * _193, _332 * _194));
    float _365 = (-0.0) - dot(vec3(_348, _349, _350), vec3(_339 * _206, _339 * _207, _339 * _208));
    float _366 = (-0.0) - dot(vec3(_348, _349, _350), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _370 * _366;
    float _373 = (cbMtdParam._m0[19u].w * _364) * _370;
    float _375 = (cbMtdParam._m0[20u].x * _365) * _370;
    float _378 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _379 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _397;
    float _400;
    float _402;
    if (_373 > 0.0)
    {
        float _383 = (1.0 - _378) / _373;
        _397 = _383;
        _400 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_383 * _371)) * 0.16666667163372039794921875;
        _402 = (fract((_383 * _375) + _379) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_373 < 0.0)
        {
            float _398 = ((-0.0) - _378) / _373;
            frontier_phi_3_2_ladder = (fract(_398 * _371) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _398;
            frontier_phi_3_2_ladder_2 = (fract((_398 * _375) + _379) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _399;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _397 = frontier_phi_3_2_ladder_1;
        _400 = frontier_phi_3_2_ladder;
        _402 = frontier_phi_3_2_ladder_2;
    }
    float _428;
    float _430;
    float _432;
    if (_375 > 0.0)
    {
        float _415 = (1.0 - _379) / _375;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_415 < _397)
        {
            frontier_phi_8_5_ladder = (fract(_415 * _371) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_415 * _373) + _378) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _415;
        }
        else
        {
            frontier_phi_8_5_ladder = _402;
            frontier_phi_8_5_ladder_1 = _400;
            frontier_phi_8_5_ladder_2 = _397;
        }
        _428 = frontier_phi_8_5_ladder_2;
        _430 = frontier_phi_8_5_ladder_1;
        _432 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_375 < 0.0)
        {
            float _429 = ((-0.0) - _379) / _375;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_429 < _397)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_429 * _371) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_429 * _373) + _378) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _429;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _402;
                frontier_phi_8_6_ladder_9_ladder_1 = _400;
                frontier_phi_8_6_ladder_9_ladder_2 = _397;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _402;
            frontier_phi_8_6_ladder_1 = _400;
            frontier_phi_8_6_ladder_2 = _397;
        }
        _428 = frontier_phi_8_6_ladder_2;
        _430 = frontier_phi_8_6_ladder_1;
        _432 = frontier_phi_8_6_ladder;
    }
    float _436 = (_371 > 0.0) ? (cbMtdParam._m0[16u].w / _371) : 5000.0;
    float _449;
    float _450;
    if (_436 < _428)
    {
        _449 = ((_378 + cbMtdParam._m0[17u].x) + (_436 * _373)) * 0.16666667163372039794921875;
        _450 = (((_436 * _375) + _379) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _449 = _430;
        _450 = _432;
    }
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_449, _450));
    float _457 = _452.x * cbMtdParam._m0[13u].x;
    float _458 = _452.y * cbMtdParam._m0[13u].y;
    float _459 = _452.z * cbMtdParam._m0[13u].z;
    float _464 = 0.5 - (_290 * 0.5);
    float _474 = (((_457 - _303) - (_457 * _290)) * _464) + _303;
    float _475 = (((_458 - _305) - (_458 * _290)) * _464) + _305;
    float _476 = (((_459 - _307) - (_459 * _290)) * _464) + _307;
    vec4 _488 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _496 = (_488.x * 2.0) + (-1.0);
    float _498 = (_488.y * 2.0) + (-1.0);
    float _499 = dot(vec2(_496, _498), vec2(_496, _498));
    float _3464 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _504 = sqrt(1.0 - (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))));
    float _505 = _488.z * _290;
    float _508 = fma(_504, _199, fma(_498, _206, _496 * _192));
    float _511 = fma(_504, _200, fma(_498, _207, _496 * _193));
    float _514 = fma(_504, _201, fma(_498, _208, _496 * _194));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3475 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _522 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3497 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3508 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _541 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _546 = _263 * _545;
    float _547 = _264 * _545;
    float _548 = _265 * _545;
    vec4 _553 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _555 = _553.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _718 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _724 = (cbMatDynParam._m0[5u].x * _718) + cbMatDynParam._m0[5u].y;
        float _3519 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _729 = (cbMatDynParam._m0[5u].z * _718) + cbMatDynParam._m0[5u].w;
        float _3530 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) - _725)) + _725) < ((_555 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _573 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _574 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _594 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _597 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _600 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _613 = uint(roundEven(NORMAL.w)) * 13u;
    uint _614 = _613 + 9u;
    uint _615 = _614 + uint(cbMatDynParam._m0[0u].w);
    float _621 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_615].x;
    float _622 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_615].y;
    float _623 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_615].z;
    float _3541 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    vec4 _635 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _573, cbSceneParam._m0[86u].y * _574));
    float _638 = _635.x * TEXCOORD.z;
    float _639 = dot(vec3(_519, _520, _521), vec3(_546, _547, _548));
    float _642 = _639 * 2.0;
    float _646 = (_642 * _519) - _546;
    float _647 = (_642 * _520) - _547;
    float _648 = (_642 * _521) - _548;
    float _652 = abs(dot(vec3(_546, _547, _548), vec3(_519, _520, _521)));
    float _3574 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _654 = sqrt(_522);
    float _667 = exp2((_654 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_654 * 3.0));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _763 = fma(_707, cbModelParam._m0[26u].z, fma(_703, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699));
        float _767 = fma(_707, cbModelParam._m0[27u].z, fma(_703, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699));
        float _771 = fma(_707, cbModelParam._m0[28u].z, fma(_703, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699));
        float _795 = _699 + _519;
        float _796 = _703 + _520;
        float _797 = _707 + _521;
        float _807 = fma(_797, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795)) - _763;
        float _808 = fma(_797, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795)) - _767;
        float _809 = fma(_797, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795)) - _771;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_763 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_767 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[34u].z) + ((((((_771 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _865 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_831.x + (-0.5));
        float _867 = _865 * (_831.y + (-0.5));
        float _868 = _865 * (_831.z + (-0.5));
        float _875 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_838.x + (-0.5));
        float _877 = _875 * (_838.y + (-0.5));
        float _878 = _875 * (_838.z + (-0.5));
        float _885 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_845.x + (-0.5));
        float _887 = _885 * (_845.y + (-0.5));
        float _888 = _885 * (_845.z + (-0.5));
        float _895 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_852.x + (-0.5));
        float _897 = _895 * (_852.y + (-0.5));
        float _898 = _895 * (_852.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _919 = (dot(vec3(_519, _520, _521), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _929 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3622 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_931 + 1.0))) + _936) * _899;
        float _946 = _867 * 0.5;
        float _947 = _877 * 0.5;
        float _948 = _887 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_519, _520, _521), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3655 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_973 + 1.0))) + _978) * _900;
        float _988 = _868 * 0.5;
        float _989 = _878 * 0.5;
        float _990 = _888 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_519, _520, _521), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3688 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1015 + 1.0))) + _1020) * _901;
        _1037 = _868;
        _1038 = _867;
        _1039 = _866;
        _1040 = _878;
        _1041 = _877;
        _1042 = _876;
        _1043 = _888;
        _1044 = _887;
        _1045 = _886;
        _1046 = _901;
        _1047 = _900;
        _1048 = _899;
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _399;
        _1038 = _399;
        _1039 = _399;
        _1040 = _399;
        _1041 = _399;
        _1042 = _399;
        _1043 = _399;
        _1044 = _399;
        _1045 = _399;
        _1046 = _399;
        _1047 = _399;
        _1048 = _399;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = fma(_707, cbModelParam._m0[30u].z, fma(_703, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _699));
        float _1084 = fma(_707, cbModelParam._m0[31u].z, fma(_703, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _699));
        float _1088 = fma(_707, cbModelParam._m0[32u].z, fma(_703, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _699));
        float _1111 = _699 + _519;
        float _1112 = _703 + _520;
        float _1113 = _707 + _521;
        float _1123 = fma(_1113, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111)) - _1080;
        float _1124 = fma(_1113, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111)) - _1084;
        float _1125 = fma(_1113, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111)) - _1088;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1080 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1084 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[35u].z) + ((((((_1088 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1179 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1146.x + (-0.5));
        float _1181 = _1179 * (_1146.y + (-0.5));
        float _1182 = _1179 * (_1146.z + (-0.5));
        float _1189 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1153.x + (-0.5));
        float _1191 = _1189 * (_1153.y + (-0.5));
        float _1192 = _1189 * (_1153.z + (-0.5));
        float _1199 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1160.x + (-0.5));
        float _1201 = _1199 * (_1160.y + (-0.5));
        float _1202 = _1199 * (_1160.z + (-0.5));
        float _1209 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1167.x + (-0.5));
        float _1211 = _1209 * (_1167.y + (-0.5));
        float _1212 = _1209 * (_1167.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_519, _520, _521), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3751 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1243 + 1.0))) + _1248) * _1213;
        float _1258 = _1181 * 0.5;
        float _1259 = _1191 * 0.5;
        float _1260 = _1201 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_519, _520, _521), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3784 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1285 + 1.0))) + _1290) * _1214;
        float _1300 = _1182 * 0.5;
        float _1301 = _1192 * 0.5;
        float _1302 = _1202 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_519, _520, _521), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3817 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1327 + 1.0))) + _1332) * _1215;
        _1349 = _1182;
        _1350 = _1181;
        _1351 = _1180;
        _1352 = _1192;
        _1353 = _1191;
        _1354 = _1190;
        _1355 = _1202;
        _1356 = _1201;
        _1357 = _1200;
        _1358 = _1215;
        _1359 = _1214;
        _1360 = _1213;
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _399;
        _1350 = _399;
        _1351 = _399;
        _1352 = _399;
        _1353 = _399;
        _1354 = _399;
        _1355 = _399;
        _1356 = _399;
        _1357 = _399;
        _1358 = _399;
        _1359 = _399;
        _1360 = _399;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1049)) + _1049;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1050)) + _1050;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1051)) + _1051;
    float _1396 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1373));
    float _1417 = _646 * 0.5;
    float _1418 = _647 * 0.5;
    float _1419 = _648 * 0.5;
    float _1420 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1423 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1426 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1460;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1433 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1437 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1441 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1448 = dot(vec4(cbModelParam._m0[39u]), vec4(_1417, _1418, _1419, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1471;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1462 = dot(vec4(cbModelParam._m0[40u]), vec4(_1417, _1418, _1419, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1475 = (_1471 * cbModelParam._m0[1u].x) + (_1460 * (1.0 - cbModelParam._m0[1u].x));
    float _1485 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1486 = isnan(_1485) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1485 : min(cbModelParam._m0[25u].z, _1485));
    float _1568;
    float _1570;
    float _1572;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1535 = fma(_707, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699)) + cbModelParam._m0[13u].w;
        float _1539 = fma(_707, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699)) + cbModelParam._m0[14u].w;
        float _1543 = fma(_707, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699)) + cbModelParam._m0[15u].w;
        float _1546 = fma(_648, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _646));
        float _1549 = fma(_648, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _646));
        float _1552 = fma(_648, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _646));
        float _1580;
        if (_1546 > 0.0)
        {
            _1580 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1580 = frontier_phi_29_27_ladder;
        }
        float _1751;
        if (_1549 > 0.0)
        {
            _1751 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1751 = frontier_phi_38_34_ladder;
        }
        float _2196;
        if (_1552 > 0.0)
        {
            _2196 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2196 = frontier_phi_50_45_ladder;
        }
        float _2198 = isnan(_1751) ? _1580 : (isnan(_1580) ? _1751 : min(_1580, _1751));
        float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
        float _2203 = (_2199 * _1546) + _1535;
        float _2204 = (_2199 * _1549) + _1539;
        float _2205 = (_2199 * _1552) + _1543;
        float _2206 = _2199 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2206;
        float _2210 = _2206 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 > _2210) || ((_2204 < _2208) || ((_2203 < _2208) || (_2203 > _2210))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2205, cbModelParam._m0[9u].z, fma(_2204, cbModelParam._m0[9u].y, _2203 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2205, cbModelParam._m0[10u].z, fma(_2204, cbModelParam._m0[10u].y, _2203 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2205, cbModelParam._m0[11u].z, fma(_2204, cbModelParam._m0[11u].y, _2203 * cbModelParam._m0[11u].x))), _1486);
            frontier_phi_28_50_ladder = _2439.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2439.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2439.x * cbModelParam._m0[1u].y;
        }
        _1568 = frontier_phi_28_50_ladder_2;
        _1570 = frontier_phi_28_50_ladder_1;
        _1572 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_646, _647, _648), _1486);
        _1568 = _1556.x * cbModelParam._m0[1u].y;
        _1570 = _1556.y * cbModelParam._m0[1u].y;
        _1572 = _1556.z * cbModelParam._m0[1u].y;
    }
    float _1576 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1576 : min(cbModelParam._m0[25u].w, _1576));
    float _1668;
    float _1670;
    float _1672;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1632 = fma(_707, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699)) + cbModelParam._m0[21u].w;
        float _1636 = fma(_707, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699)) + cbModelParam._m0[22u].w;
        float _1640 = fma(_707, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699)) + cbModelParam._m0[23u].w;
        float _1643 = fma(_648, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _646));
        float _1646 = fma(_648, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _646));
        float _1649 = fma(_648, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _646));
        float _1756;
        if (_1643 > 0.0)
        {
            _1756 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1756 = frontier_phi_40_36_ladder;
        }
        float _2223;
        if (_1646 > 0.0)
        {
            _2223 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2223 = frontier_phi_52_47_ladder;
        }
        float _2568;
        if (_1649 > 0.0)
        {
            _2568 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2568 = frontier_phi_64_59_ladder;
        }
        float _2570 = isnan(_2223) ? _1756 : (isnan(_1756) ? _2223 : min(_1756, _2223));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1643) + _1632;
        float _2576 = (_2571 * _1646) + _1636;
        float _2577 = (_2571 * _1649) + _1640;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2714 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1577);
            frontier_phi_37_64_ladder = _2714.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2714.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2714.x * cbModelParam._m0[1u].z;
        }
        _1668 = frontier_phi_37_64_ladder_2;
        _1670 = frontier_phi_37_64_ladder_1;
        _1672 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_646, _647, _648), _1577);
        _1668 = _1652.x * cbModelParam._m0[1u].z;
        _1670 = _1652.y * cbModelParam._m0[1u].z;
        _1672 = _1652.z * cbModelParam._m0[1u].z;
    }
    float _1684 = ((((1.0 - _667) * ((_654 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_667 * _654)) * _638;
    float _1685 = _1684 * ((cbModelParam._m0[1u].w * (_1668 - _1568)) + _1568);
    float _1686 = _1684 * ((cbModelParam._m0[1u].w * (_1670 - _1570)) + _1570);
    float _1687 = _1684 * ((cbModelParam._m0[1u].w * (_1672 - _1572)) + _1572);
    float _1690 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, _1685 * cbSceneParam._m0[91u].x));
    float _1730 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1738 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1742 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1743 = _1730 / _1742;
    float _1744 = _1734 / _1742;
    float _1745 = _1738 / _1742;
    float _1892;
    float _1893;
    float _1894;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1772 = ((uint(_1745 > cbSceneParam._m0[59u].y) + uint(_1745 > cbSceneParam._m0[59u].x)) + uint(_1745 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1773 = _1772 + 43u;
        uint _1781 = _1772 + 44u;
        uint _1789 = _1772 + 45u;
        uint _1797 = _1772 + 46u;
        float _1808 = fma(_1742, cbSceneParam._m0[_1773].w, fma(_1738, cbSceneParam._m0[_1773].z, fma(_1734, cbSceneParam._m0[_1773].y, _1730 * cbSceneParam._m0[_1773].x)));
        float _1812 = fma(_1742, cbSceneParam._m0[_1781].w, fma(_1738, cbSceneParam._m0[_1781].z, fma(_1734, cbSceneParam._m0[_1781].y, _1730 * cbSceneParam._m0[_1781].x)));
        float _1820 = fma(_1742, cbSceneParam._m0[_1797].w, fma(_1738, cbSceneParam._m0[_1797].z, fma(_1734, cbSceneParam._m0[_1797].y, _1730 * cbSceneParam._m0[_1797].x)));
        float _1825 = cbSceneParam._m0[33u].z * _1820;
        float _1827 = cbSceneParam._m0[33u].w * _1820;
        float _1830 = fma(_1742, cbSceneParam._m0[_1789].w, fma(_1738, cbSceneParam._m0[_1789].z, fma(_1734, cbSceneParam._m0[_1789].y, _1730 * cbSceneParam._m0[_1789].x))) / _1820;
        float _1878 = (cbSceneParam._m0[33u].x - sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745))) * cbSceneParam._m0[33u].y;
        float _3943 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1885 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 + _1808) / _1820, (_1827 + _1812) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1827 + _1808) / _1820, (_1812 - _1825) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 - _1825) / _1820, (_1812 - _1827) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 - _1827) / _1820, (_1825 + _1812) / _1820), _1830), 0.0)).x), vec4(0.25)));
        _1892 = 1.0 - (_1885 * cbSceneParam._m0[34u].x);
        _1893 = 1.0 - (_1885 * cbSceneParam._m0[34u].y);
        _1894 = 1.0 - (_1885 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1892 = 1.0;
        _1893 = 1.0;
        _1894 = 1.0;
    }
    float _1958;
    float _1960;
    float _1962;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1946 = fma(_1742, cbSceneParam._m0[63u].w, fma(_1738, cbSceneParam._m0[63u].z, fma(_1734, cbSceneParam._m0[63u].y, _1730 * cbSceneParam._m0[63u].x)));
        float _1947 = fma(_1742, cbSceneParam._m0[60u].w, fma(_1738, cbSceneParam._m0[60u].z, fma(_1734, cbSceneParam._m0[60u].y, _1730 * cbSceneParam._m0[60u].x))) / _1946;
        float _1948 = fma(_1742, cbSceneParam._m0[61u].w, fma(_1738, cbSceneParam._m0[61u].z, fma(_1734, cbSceneParam._m0[61u].y, _1730 * cbSceneParam._m0[61u].x))) / _1946;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1947 >= cbSceneParam._m0[64u].x) && (_1948 >= cbSceneParam._m0[64u].y)) && (_1947 <= cbSceneParam._m0[64u].z)) && (_1948 <= cbSceneParam._m0[64u].w))
        {
            float _2236 = fma(_1742, cbSceneParam._m0[62u].w, fma(_1738, cbSceneParam._m0[62u].z, fma(_1734, cbSceneParam._m0[62u].y, _1730 * cbSceneParam._m0[62u].x))) / _1946;
            float _2240 = isnan(cbSceneParam._m0[41u].w) ? _2236 : (isnan(_2236) ? cbSceneParam._m0[41u].w : max(_2236, cbSceneParam._m0[41u].w));
            float _2283 = (cbSceneParam._m0[33u].x - sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745))) * cbSceneParam._m0[33u].y;
            float _3959 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
            float _2290 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1947, cbSceneParam._m0[33u].w + _1948), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1947, _1948 - cbSceneParam._m0[33u].z), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1947 - cbSceneParam._m0[33u].z, _1948 - cbSceneParam._m0[33u].w), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1947 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1948), _2240), 0.0)).x), vec4(0.25)));
            float _2294 = 1.0 - (_2290 * cbSceneParam._m0[34u].x);
            float _2295 = 1.0 - (_2290 * cbSceneParam._m0[34u].y);
            float _2296 = 1.0 - (_2290 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2296) ? _1894 : (isnan(_1894) ? _2296 : min(_1894, _2296));
            frontier_phi_49_48_ladder_1 = isnan(_2295) ? _1893 : (isnan(_1893) ? _2295 : min(_1893, _2295));
            frontier_phi_49_48_ladder_2 = isnan(_2294) ? _1892 : (isnan(_1892) ? _2294 : min(_1892, _2294));
        }
        else
        {
            frontier_phi_49_48_ladder = _1894;
            frontier_phi_49_48_ladder_1 = _1893;
            frontier_phi_49_48_ladder_2 = _1892;
        }
        _1958 = frontier_phi_49_48_ladder_2;
        _1960 = frontier_phi_49_48_ladder_1;
        _1962 = frontier_phi_49_48_ladder;
    }
    else
    {
        _1958 = _1892;
        _1960 = _1893;
        _1962 = _1894;
    }
    uvec4 _1967 = floatBitsToUint(cbInstanceData._m0[_613 + 5u]);
    uint _1969 = _1967.x * 14u;
    uint _1970 = _1969 + 13u;
    float _1975 = _638 + (-1.0);
    float _1978 = (cbLight._m0[_1970].x * _1975) + 1.0;
    float _1979 = (cbLight._m0[_1970].y * _1975) + 1.0;
    uint _1980 = _1969 + 5u;
    float _1986 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
    uint _1990 = _1969 + 4u;
    float _2000 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
    uint _2004 = _1969 | 1u;
    float _2015 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_519, _520, _521));
    float _2018 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_519, _520, _521));
    float _3995 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _4006 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2023 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _2025 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _2032 = ((cbLight._m0[_1980].x * _1986) * _2025) + (((cbLight._m0[_1990].x * _1958) * _2000) * _2023);
    float _2033 = ((_1986 * cbLight._m0[_1980].y) * _2025) + (((cbLight._m0[_1990].y * _1960) * _2000) * _2023);
    float _2034 = ((_1986 * cbLight._m0[_1980].z) * _2025) + (((cbLight._m0[_1990].z * _1962) * _2000) * _2023);
    uint _2036 = _1969 + 8u;
    float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _522) * 0.949999988079071044921875);
    float _2050 = _2049 * _2049;
    float _2051 = cbLight._m0[_1969].x + _546;
    float _2052 = cbLight._m0[_1969].y + _547;
    float _2053 = cbLight._m0[_1969].z + _548;
    float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
    float _2058 = _2057 * _2051;
    float _2059 = _2057 * _2052;
    float _2060 = _2057 * _2053;
    float _2061 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1969].xyz));
    float _4017 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _2065 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _2066 = dot(vec3(_519, _520, _521), vec3(_2058, _2059, _2060));
    float _4039 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _2070 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2058, _2059, _2060));
    float _4050 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2074 = _2050 * _2050;
    float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
    float _2089 = (exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2090 = 1.0 - _2050;
    float _2101 = (0.5 / (((_2065 * ((_2064 * _2090) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2090) + _2050) * _2064))) * _2064;
    float _4061 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
    uint _2117 = _1969 + 9u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _522) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_2004].x + _546;
    float _2131 = cbLight._m0[_2004].y + _547;
    float _2132 = cbLight._m0[_2004].z + _548;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2004].xyz));
    float _4072 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _2144 = dot(vec3(_519, _520, _521), vec3(_2137, _2138, _2139));
    float _4083 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2137, _2138, _2139));
    float _4094 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2129 * _2129;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2165 = (exp2(log2(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2166 = 1.0 - _2129;
    float _2176 = (0.5 / (((_2065 * ((_2143 * _2166) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2166) + _2129) * _2143))) * _2143;
    float _4105 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    float _2188 = (((_2165 * cbLight._m0[_2117].x) * _2178) * _1986) + ((((cbLight._m0[_2036].x * _1958) * _2089) * _2103) * _2000);
    float _2189 = (((_2165 * cbLight._m0[_2117].y) * _2178) * _1986) + ((((cbLight._m0[_2036].y * _1960) * _2089) * _2103) * _2000);
    float _2190 = (((_2165 * cbLight._m0[_2117].z) * _2178) * _1986) + ((((cbLight._m0[_2036].z * _1962) * _2089) * _2103) * _2000);
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    float _2363;
    if (_1967.y == 0u)
    {
        uvec4 _2308 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2309 = _2308.x;
        uint _2320 = uint((float(_2308.y) * floor(float(uint(cbSceneParam._m0[85u].y * _574) / _2309))) + floor(float(uint(cbSceneParam._m0[85u].x * _573) / _2309)));
        float _2330 = (log2(_1745 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2331 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        uint _2334 = uint(isnan(14.0) ? _2331 : (isnan(_2331) ? 14.0 : min(_2331, 14.0)));
        uvec4 _2339 = texelFetch(g_lightClusterGridBuffer, int(((_2334 << 2u) + (_2320 << 6u)) >> 2u));
        uint _2340 = _2339.x;
        uint _2341 = _2308.z;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        if (((((1u << ((_2341 >> 4u) & 15u)) + 4294967295u) & _2340) == 0u) || ((_2341 & 240u) == 0u))
        {
            _2448 = 0.0;
            _2450 = 0.0;
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
        }
        else
        {
            float _2449;
            float _2451;
            float _2453;
            float _2455;
            float _2457;
            float _2459;
            float _2626 = 0.0;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            float _2630 = 0.0;
            float _2631 = 0.0;
            uint _2632 = 0u;
            uint _2641;
            bool _2642;
            for (;;)
            {
                _2641 = texelFetch(g_lightClassification, int((((_2334 << 5u) + (_2320 << 9u)) + (_2632 << 2u)) >> 2u)).x;
                _2642 = _2641 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2642)
                {
                    frontier_phi_75_pred = _2629;
                    frontier_phi_75_pred_1 = _2631;
                    frontier_phi_75_pred_2 = _2630;
                    frontier_phi_75_pred_3 = _2628;
                    frontier_phi_75_pred_4 = _2627;
                    frontier_phi_75_pred_5 = _2626;
                }
                else
                {
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    uint _2798;
                    _2792 = _2626;
                    _2793 = _2627;
                    _2794 = _2628;
                    _2795 = _2629;
                    _2796 = _2630;
                    _2797 = _2631;
                    _2798 = _2641;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    for (;;)
                    {
                        uint _2802 = uint(findLSB(_2798)) + (_2632 << 5u);
                        uint _2799 = (_2798 + 4294967295u) & _2798;
                        uint _2804 = _2802 * 48u;
                        vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 3u)).x));
                        uint _2824 = (_2802 * 48u) + 4u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 3u)).x));
                        uint _2843 = (_2802 * 48u) + 8u;
                        vec3 _2854 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x));
                        float _2858 = _2818.x - _1743;
                        float _2859 = _2818.y - _1744;
                        float _2860 = _2818.z - _1745;
                        float _2861 = dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860));
                        float _2864 = inversesqrt(_2861);
                        float _2865 = _2864 * _2858;
                        float _2866 = _2864 * _2859;
                        float _2867 = _2864 * _2860;
                        float _2868 = dot(vec3(_594, _597, _600), vec3(_2865, _2866, _2867));
                        float _2873 = 1.0 - (_2861 * _2818.w);
                        float _4126 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2875 = sqrt(_2861) * _2837.w;
                        float _2878 = 1.39999997615814208984375 / (_2875 + 1.39999997615814208984375);
                        float _2879 = _2878 * _2878;
                        float _2882 = ((1.0 - _2879) * _2868) + _2879;
                        float _2885 = _2875 * _2875;
                        float _2889 = ((isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))) * _2874) / ((_2885 * 0.699999988079071044921875) + 1.0);
                        float _2893 = (-0.0) - _1743;
                        float _2894 = (-0.0) - _1744;
                        float _2895 = (-0.0) - _1745;
                        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
                        float _2900 = _2899 * _2893;
                        float _2901 = _2899 * _2894;
                        float _2902 = _2899 * _2895;
                        float _2909 = exp2(log2(1.0 / ((_2885 * 3.5) + 5.0)) * 0.25);
                        float _2910 = 1.0 - _654;
                        float _2917 = sqrt(1.0 - ((1.0 - (_2910 * _2910)) * (1.0 - (_2909 * _2909))));
                        float _2918 = _2917 * _2917;
                        float _2919 = _2918 * _2918;
                        float _2920 = _2900 + _2865;
                        float _2921 = _2901 + _2866;
                        float _2922 = _2902 + _2867;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2930 = dot(vec3(_594, _597, _600), vec3(_2900, _2901, _2902));
                        float _4142 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2934 = dot(vec3(_594, _597, _600), vec3(_2926 * _2920, _2926 * _2921, _2926 * _2922));
                        float _4153 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2937 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2941 = ((_2937 * _2937) * (_2919 + (-1.0))) + 1.0;
                        float _2942 = _2878 * _2918;
                        float _2943 = _2942 * _2942;
                        float _2946 = ((1.0 - _2943) * _2868) + _2943;
                        float _4164 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2948 = 1.0 - _2918;
                        float _2958 = (0.5 / (((_2947 * ((_2933 * _2948) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2947 * _2948) + _2918) * _2933))) * _2947;
                        float _4175 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2969 = (((_2919 * 3.1415927410125732421875) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) / ((_2941 * _2941) * ((_2885 * 2.1991131305694580078125) + 3.141590118408203125))) * _2874;
                        _2722 = (_2889 * _2837.x) + _2795;
                        _2723 = (_2889 * _2837.y) + _2796;
                        _2724 = (_2889 * _2837.z) + _2797;
                        _2719 = (_2969 * _2854.x) + _2792;
                        _2720 = (_2969 * _2854.y) + _2793;
                        _2721 = (_2969 * _2854.z) + _2794;
                        if (_2799 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2799;
                        }
                    }
                    frontier_phi_75_pred = _2722;
                    frontier_phi_75_pred_1 = _2724;
                    frontier_phi_75_pred_2 = _2723;
                    frontier_phi_75_pred_3 = _2721;
                    frontier_phi_75_pred_4 = _2720;
                    frontier_phi_75_pred_5 = _2719;
                }
                _2455 = frontier_phi_75_pred;
                _2459 = frontier_phi_75_pred_1;
                _2457 = frontier_phi_75_pred_2;
                _2453 = frontier_phi_75_pred_3;
                _2451 = frontier_phi_75_pred_4;
                _2449 = frontier_phi_75_pred_5;
                uint _2633 = _2632 + 1u;
                if (_2633 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2626 = _2449;
                    _2627 = _2451;
                    _2628 = _2453;
                    _2629 = _2455;
                    _2630 = _2457;
                    _2631 = _2459;
                    _2632 = _2633;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2448 = _2449;
            _2450 = _2451;
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
        }
        uvec4 _2462 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2463 = _2462.z;
        uint _2465 = (_2463 >> 8u) & 15u;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((4294967295u << _2465) & _2340) == 0u)
        {
            _2594 = _2448;
            _2596 = _2450;
            _2598 = _2452;
            _2600 = _2454;
            _2602 = _2456;
            _2604 = _2458;
        }
        else
        {
            float _2619 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
            float _2620 = _2619 * _1743;
            float _2621 = _2619 * _1744;
            float _2622 = _2619 * _1745;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2465 < ((_2463 >> 12u) & 15u))
            {
                float _2595;
                float _2597;
                float _2599;
                float _2601;
                float _2603;
                float _2605;
                float _2775 = _2448;
                float _2776 = _2450;
                float _2777 = _2452;
                float _2778 = _2454;
                float _2779 = _2456;
                float _2780 = _2458;
                uint _2781 = _2465;
                uint _2790;
                bool _2791;
                for (;;)
                {
                    _2790 = texelFetch(g_lightClassification, int((((_2334 << 5u) + (_2320 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                    _2791 = _2790 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2791)
                    {
                        frontier_phi_86_pred = _2780;
                        frontier_phi_86_pred_1 = _2779;
                        frontier_phi_86_pred_2 = _2778;
                        frontier_phi_86_pred_3 = _2777;
                        frontier_phi_86_pred_4 = _2776;
                        frontier_phi_86_pred_5 = _2775;
                    }
                    else
                    {
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _2996 = _2775;
                        float _2997 = _2776;
                        float _2998 = _2777;
                        float _2999 = _2778;
                        float _3000 = _2779;
                        float _3001 = _2780;
                        uint _3002 = _2790;
                        uint _3003;
                        vec4 _3028;
                        float _3029;
                        vec4 _3044;
                        vec3 _3056;
                        vec4 _3071;
                        vec4 _3086;
                        float _3132;
                        bool _3133;
                        for (;;)
                        {
                            uint _3013 = ((_2781 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3002));
                            _3003 = (_3002 + 4294967295u) & _3002;
                            uint _3015 = _3013 * 40u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3029 = _3028.w;
                            uint _3031 = (_3013 * 40u) + 4u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3046 = (_3013 * 40u) + 8u;
                            _3056 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x));
                            uint _3058 = (_3013 * 40u) + 16u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3013 * 40u) + 20u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3088 = (_3013 * 40u) + 24u;
                            vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3107 = (_3013 * 40u) + 28u;
                            vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            _3132 = fma(_1745, _3120.z, fma(_1744, _3120.y, _3120.x * _1743)) + _3120.w;
                            _3133 = !((fma(_1745, _3101.z, fma(_1744, _3101.y, _3101.x * _1743)) + _3101.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3133)
                            {
                                float _3160 = _3028.x - _1743;
                                float _3161 = _3028.y - _1744;
                                float _3162 = _3028.z - _1745;
                                float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                                float _3166 = inversesqrt(_3163);
                                float _3167 = _3166 * _3160;
                                float _3168 = _3166 * _3161;
                                float _3169 = _3166 * _3162;
                                float _3173 = 1.0 - (_3163 / (_3029 * _3029));
                                float _4186 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3178 = sqrt(_3163) * _3044.w;
                                float _3180 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                                float _3181 = _3180 * _3180;
                                float _3184 = ((1.0 - _3181) * dot(vec3(_3167, _3168, _3169), vec3(_594, _597, _600))) + _3181;
                                float _3187 = _3178 * _3178;
                                float _3191 = (fma(_1745, _3071.z, fma(_1744, _3071.y, _3071.x * _1743)) + _3071.w) / _3132;
                                float _3192 = (fma(_1745, _3086.z, fma(_1744, _3086.y, _3086.x * _1743)) + _3086.w) / _3132;
                                float _3196 = 1.0 - dot(vec2(_3191, _3192), vec2(_3191, _3192));
                                float _4202 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                                float _3198 = _3197 * (((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3174) / ((_3187 * 0.699999988079071044921875) + 1.0));
                                float _3210 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                                float _3211 = 1.0 - _654;
                                float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                                float _3219 = _3218 * _3218;
                                float _3220 = _3219 * _3219;
                                float _3221 = _3167 - _2620;
                                float _3222 = _3168 - _2621;
                                float _3223 = _3169 - _2622;
                                float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                                float _3231 = dot(vec3(_594, _597, _600), vec3((-0.0) - _2620, (-0.0) - _2621, (-0.0) - _2622));
                                float _4213 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3234 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3235 = dot(vec3(_594, _597, _600), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                                float _4224 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                                float _3243 = _3180 * _3219;
                                float _3244 = _3243 * _3243;
                                float _3250 = ((1.0 - _3244) * dot(vec3(_594, _597, _600), vec3(_3167, _3168, _3169))) + _3244;
                                float _4235 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3252 = 1.0 - _3219;
                                float _3262 = (0.5 / (((_3251 * ((_3234 * _3252) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3251 * _3252) + _3219) * _3234))) * _3251;
                                float _4246 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3272 = (_3197 * _3174) * (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) / ((_3242 * _3242) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3198 * _3044.z;
                                frontier_phi_92_pred_1 = _3198 * _3044.y;
                                frontier_phi_92_pred_2 = _3198 * _3044.x;
                                frontier_phi_92_pred_3 = _3272 * _3056.z;
                                frontier_phi_92_pred_4 = _3272 * _3056.y;
                                frontier_phi_92_pred_5 = _3272 * _3056.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3281 = frontier_phi_92_pred;
                            _3280 = frontier_phi_92_pred_1;
                            _3279 = frontier_phi_92_pred_2;
                            _3278 = frontier_phi_92_pred_3;
                            _3277 = frontier_phi_92_pred_4;
                            _3276 = frontier_phi_92_pred_5;
                            _2986 = _3279 + _2999;
                            _2987 = _3280 + _3000;
                            _2988 = _3281 + _3001;
                            _2983 = _3276 + _2996;
                            _2984 = _3277 + _2997;
                            _2985 = _3278 + _2998;
                            if (_3003 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _3003;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2988;
                        frontier_phi_86_pred_1 = _2987;
                        frontier_phi_86_pred_2 = _2986;
                        frontier_phi_86_pred_3 = _2985;
                        frontier_phi_86_pred_4 = _2984;
                        frontier_phi_86_pred_5 = _2983;
                    }
                    _2605 = frontier_phi_86_pred;
                    _2603 = frontier_phi_86_pred_1;
                    _2601 = frontier_phi_86_pred_2;
                    _2599 = frontier_phi_86_pred_3;
                    _2597 = frontier_phi_86_pred_4;
                    _2595 = frontier_phi_86_pred_5;
                    uint _2782 = _2781 + 1u;
                    if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2775 = _2595;
                        _2776 = _2597;
                        _2777 = _2599;
                        _2778 = _2601;
                        _2779 = _2603;
                        _2780 = _2605;
                        _2781 = _2782;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2601;
                frontier_phi_66_67_ladder_1 = _2605;
                frontier_phi_66_67_ladder_2 = _2603;
                frontier_phi_66_67_ladder_3 = _2599;
                frontier_phi_66_67_ladder_4 = _2597;
                frontier_phi_66_67_ladder_5 = _2595;
            }
            else
            {
                frontier_phi_66_67_ladder = _2454;
                frontier_phi_66_67_ladder_1 = _2458;
                frontier_phi_66_67_ladder_2 = _2456;
                frontier_phi_66_67_ladder_3 = _2452;
                frontier_phi_66_67_ladder_4 = _2450;
                frontier_phi_66_67_ladder_5 = _2448;
            }
            _2594 = frontier_phi_66_67_ladder_5;
            _2596 = frontier_phi_66_67_ladder_4;
            _2598 = frontier_phi_66_67_ladder_3;
            _2600 = frontier_phi_66_67_ladder;
            _2602 = frontier_phi_66_67_ladder_2;
            _2604 = frontier_phi_66_67_ladder_1;
        }
        float _2609 = isnan(1.0) ? _638 : (isnan(_638) ? 1.0 : min(_638, 1.0));
        _2353 = (_2609 * _2600) + _2032;
        _2355 = (_2609 * _2602) + _2033;
        _2357 = (_2609 * _2604) + _2034;
        _2359 = ((_2594 * 0.039999999105930328369140625) * _2609) + _2188;
        _2361 = ((_2596 * 0.039999999105930328369140625) * _2609) + _2189;
        _2363 = ((_2598 * 0.039999999105930328369140625) * _2609) + _2190;
    }
    else
    {
        _2353 = _2032;
        _2355 = _2033;
        _2357 = _2034;
        _2359 = _2188;
        _2361 = _2189;
        _2363 = _2190;
    }
    float _4262 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4273 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4284 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _2380 = ((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2353 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _638))) + ((_2359 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1475)) * cbPerFrame._m0[3u].x);
    float _2381 = ((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2355 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _638))) + ((_2361 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1475)) * cbPerFrame._m0[3u].x);
    float _2382 = ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2357 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _638))) + ((_2363 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1475)) * cbPerFrame._m0[3u].x);
    float _2383 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2385 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    uint _2386 = _613 + 6u;
    float _2394 = _573 / cbSceneParam._m0[86u].x;
    float _2395 = _574 / cbSceneParam._m0[86u].y;
    vec4 _2409 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, (log2((isnan(cbSceneParam._m0[77u].w) ? _541 : (isnan(_541) ? cbSceneParam._m0[77u].w : min(_541, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2411 = _2409.x;
    float _2412 = _2409.y;
    float _2413 = _2409.z;
    float _2414 = _2409.w;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_541 > cbSceneParam._m0[78u].w)
    {
        float _2473 = isnan(_541) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _541 : min(cbSceneParam._m0[80u].w, _541));
        float _2474 = _2473 / _541;
        float _2485 = _2474 * _263;
        float _2486 = _264 * _2474;
        float _2487 = (-0.0) - _2486;
        float _2488 = _2474 * _265;
        float _2490 = (cbSceneParam._m0[77u].w * _2487) / _2473;
        float _2491 = _2490 + cbSceneParam._m0[79u].w;
        float _2492 = cbSceneParam._m0[79u].w - _2486;
        float _2498 = sqrt(((_2485 * _2485) + (_2486 * _2486)) + (_2488 * _2488));
        float _2501 = (1.0 - (cbSceneParam._m0[77u].w / _2473)) * _2498;
        float _2506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2732;
        if (abs((_2487 - _2490) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2732 = ((((_2491 > 0.0) ? exp2(_2506 * _2491) : (2.0 - exp2(_2508 * _2491))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2501;
        }
        else
        {
            float _2655 = 1.0 / cbSceneParam._m0[80u].x;
            float _2656 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : max(_2491, _2492));
            float _2657 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : min(_2491, _2492));
            float _2666 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : min(_2656, 0.0));
            float _2667 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : min(_2657, 0.0));
            _2732 = ((abs(_2498 / _2487) * cbSceneParam._m0[80u].y) * ((((_2666 - _2667) * 2.0) - ((exp2(_2506 * (isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0)))) - exp2(_2506 * (isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0))))) * _2655)) - ((exp2(_2508 * _2666) - exp2(_2508 * _2667)) * _2655))) + (_2501 * cbSceneParam._m0[80u].z);
        }
        vec4 _2734 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, 1.0), 0.0);
        float _2743 = exp2((_2732 * (-1.44269502162933349609375)) * (1.0 - _2734.w));
        float _2744 = log2(_2743);
        float _2760 = log2(_2414);
        _2510 = (exp2(_2760 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].x)) * _2734.x) / cbSceneParam._m0[78u].x)) + _2411;
        _2512 = (exp2(_2760 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].y)) * _2734.y) / cbSceneParam._m0[78u].y)) + _2412;
        _2514 = (exp2(_2760 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].z)) * _2734.z) / cbSceneParam._m0[78u].z)) + _2413;
        _2516 = _2743 * _2414;
    }
    else
    {
        _2510 = _2411;
        _2512 = _2412;
        _2514 = _2413;
        _2516 = _2414;
    }
    bool _2770;
    vec4 _2526;
    vec4 _2548;
    float _2550;
    float _2554;
    float _2555;
    float _2556;
    float _2557;
    bool _2567;
    for (;;)
    {
        _2526 = cbMatDynParam._m0[0u];
        float _2528 = roundEven(_2526.y);
        bool _2529 = _2528 == 3.0;
        float _2530 = log2(_2516);
        float _2537 = exp2(_2530 * cbSceneParam._m0[78u].x) * _2383;
        float _2538 = exp2(_2530 * cbSceneParam._m0[78u].y) * _2384;
        float _2539 = exp2(_2530 * cbSceneParam._m0[78u].z) * _2385;
        float _2546 = _555 + (-0.5);
        _2548 = cbMtdParam._m0[1u];
        _2550 = _2548.y * _2546;
        float _2553 = (_2528 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2554 = _2553 * (_2529 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2510)));
        _2555 = _2553 * (_2529 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2512)));
        _2556 = _2553 * (_2529 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2514)));
        _2557 = _2546 * 0.999000012874603271484375;
        _2567 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2567)
        {
            if ((cbInstanceData._m0[_613 + 7u].x + _2557) < 0.5)
            {
                _2770 = true;
                break;
            }
        }
        uint _2690 = _614 + uint(_2526.w);
        if ((cbInstanceData._m0[_2690].w < 1.0) && ((cbInstanceData._m0[_2690].w + _2557) < 0.5))
        {
            _2770 = true;
            break;
        }
        if ((_2550 + 1.0) < _2548.x)
        {
            _2770 = true;
            break;
        }
        _2770 = false;
        break;
    }
    float _2974;
    if (_2770)
    {
        discard_state = true;
        _2974 = 0.0;
    }
    else
    {
        _2974 = cbInstanceData._m0[_2386].w;
    }
    SV_Target.x = _2554;
    SV_Target.y = _2555;
    SV_Target.z = _2556;
    SV_Target.w = _2974;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2386].w;
    discard_exit();
}


