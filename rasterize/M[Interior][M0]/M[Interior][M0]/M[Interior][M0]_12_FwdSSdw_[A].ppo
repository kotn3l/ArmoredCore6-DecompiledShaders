#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _928;
float _2908;
float _2909;
float _2910;
float _2911;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    float _285 = cbMtdParam._m0[22u].y + _257;
    float _286 = cbMtdParam._m0[22u].z + _258;
    float _287 = cbMtdParam._m0[22u].w + _259;
    float _301 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _302 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_199 * TANGENT.x, _199 * TANGENT.y, _199 * TANGENT.z));
    float _303 = (-0.0) - dot(vec3(_285, _286, _287), vec3((-0.0) - (_192 * NORMAL.x), (-0.0) - (_192 * NORMAL.y), (-0.0) - (_192 * NORMAL.z)));
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _307 * _303;
    float _310 = (cbMtdParam._m0[19u].x * _301) * _307;
    float _312 = (cbMtdParam._m0[18u].w * _302) * _307;
    float _313 = fract(TEXCOORD.x);
    float _314 = fract(TEXCOORD.y);
    float _320;
    if (_310 > 0.0)
    {
        _320 = (1.0 - _313) / _310;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _313) / _310;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _320 = frontier_phi_3_2_ladder;
    }
    float _328;
    if (_312 > 0.0)
    {
        _328 = (1.0 - _314) / _312;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _314) / _312;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _328 = frontier_phi_7_6_ladder;
    }
    bool _330 = _308 > 0.0;
    float _332 = _330 ? (cbMtdParam._m0[15u].x / _308) : 5000.0;
    float _333 = isnan(_328) ? _320 : (isnan(_320) ? _328 : min(_320, _328));
    float _334 = isnan(_332) ? _333 : (isnan(_333) ? _332 : min(_333, _332));
    float _338 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _339 = _313 + (-0.5);
    float _342 = _314 + (-0.5);
    float _345 = ((_334 * _308) + _338) / _338;
    vec4 _371 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_339 + (_334 * _310)) / _345) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_342 + (_334 * _312)) / _345) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _382 = cbMtdParam._m0[9u].x * _371.x;
    float _383 = cbMtdParam._m0[9u].y * _371.y;
    float _384 = cbMtdParam._m0[9u].z * _371.z;
    float _406 = (cbMtdParam._m0[21u].x * _301) * _307;
    float _408 = (cbMtdParam._m0[20u].w * _302) * _307;
    bool _409 = _406 > 0.0;
    float _414;
    if (_409)
    {
        _414 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _414 = frontier_phi_11_10_ladder;
    }
    bool _416 = _408 > 0.0;
    float _421;
    if (_416)
    {
        _421 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _421 = frontier_phi_15_14_ladder;
    }
    float _424 = _330 ? (cbMtdParam._m0[16u].z / _308) : 5000.0;
    float _425 = isnan(_421) ? _414 : (isnan(_414) ? _421 : min(_414, _421));
    float _426 = isnan(_424) ? _425 : (isnan(_425) ? _424 : min(_425, _424));
    float _430 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _434 = ((_426 * _308) + _430) / _430;
    float _439 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _441 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _457 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_426 * _406)) / _434) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_426 * _408)) / _434) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _469;
    if (_409)
    {
        _469 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _469 = frontier_phi_19_18_ladder;
    }
    float _475;
    if (_416)
    {
        _475 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _475 = frontier_phi_23_22_ladder;
    }
    float _477 = isnan(_475) ? _469 : (isnan(_469) ? _475 : min(_469, _475));
    float _478 = isnan(_424) ? _477 : (isnan(_477) ? _424 : min(_477, _424));
    float _485 = ((_478 * _308) + _430) / _430;
    vec4 _499 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_478 * _406)) / _485) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_478 * _408)) / _485) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _501 = _499.w;
    float _508 = (_501 * ((_457.x * cbMtdParam._m0[10u].x) - _382)) + _382;
    float _509 = (_501 * ((_457.y * cbMtdParam._m0[10u].y) - _383)) + _383;
    float _510 = (_501 * ((_457.z * cbMtdParam._m0[10u].z) - _384)) + _384;
    float _2950 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _2961 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _2972 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _529 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _533 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _534 = _257 * _533;
    float _535 = _258 * _533;
    float _536 = _259 * _533;
    vec4 _541 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _543 = _541.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _640 = sqrt(((_257 * _257) + (_258 * _258)) + (_259 * _259));
        float _647 = (cbMatDynParam._m0[5u].x * _640) + cbMatDynParam._m0[5u].y;
        float _2983 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _648 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
        float _652 = (cbMatDynParam._m0[5u].z * _640) + cbMatDynParam._m0[5u].w;
        float _2994 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0))) - _648)) + _648) < ((_543 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _556 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _557 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _570 = uint(roundEven(NORMAL.w)) * 13u;
    uint _572 = _570 + 9u;
    uint _573 = _572 + uint(cbMatDynParam._m0[0u].w);
    float _579 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0)))) * cbInstanceData._m0[_573].x;
    float _580 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * cbInstanceData._m0[_573].y;
    float _581 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)))) * cbInstanceData._m0[_573].z;
    float _3005 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
    float _3016 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
    float _3027 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
    vec4 _593 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _556, cbSceneParam._m0[86u].y * _557));
    float _596 = _593.x * TEXCOORD.z;
    float _597 = (-0.0) - _534;
    float _598 = (-0.0) - _535;
    float _599 = (-0.0) - _536;
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _927;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _714 = (cbModelParam._m0[37u].x * ((((fma(_629, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _716 = (cbModelParam._m0[37u].y * ((((fma(_629, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _717 = (((((fma(_629, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_714, _716, _717), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_714, _716, _717), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_714, _716, _717), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_714, _716, _717), 0.0);
        float _754 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _754 * (_720.x + (-0.5));
        float _757 = _754 * (_720.y + (-0.5));
        float _758 = _754 * (_720.z + (-0.5));
        float _765 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_727.x + (-0.5));
        float _767 = _765 * (_727.y + (-0.5));
        float _768 = _765 * (_727.z + (-0.5));
        float _775 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_734.x + (-0.5));
        float _777 = _775 * (_734.y + (-0.5));
        float _778 = _775 * (_734.z + (-0.5));
        float _785 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_741.x + (-0.5));
        float _787 = _785 * (_741.y + (-0.5));
        float _788 = _785 * (_741.z + (-0.5));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = _756 * 0.5;
        float _793 = _766 * 0.5;
        float _794 = _776 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _809 = (dot(vec3(0.0), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3053 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _819 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3064 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3075 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0))) * (_821 + 1.0))) + _826) * _789;
        float _836 = _757 * 0.5;
        float _837 = _767 * 0.5;
        float _838 = _777 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _852 = (dot(vec3(0.0), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3086 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _861 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3097 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3108 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0))) * (_863 + 1.0))) + _868) * _790;
        float _878 = _758 * 0.5;
        float _879 = _768 * 0.5;
        float _880 = _778 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(0.0), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3119 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3130 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3141 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0))) * (_905 + 1.0))) + _910) * _791;
        _927 = _758;
        _929 = _757;
        _930 = _756;
        _931 = _768;
        _932 = _767;
        _933 = _766;
        _934 = _778;
        _935 = _777;
        _936 = _776;
        _937 = _791;
        _938 = _790;
        _939 = _789;
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
    }
    else
    {
        _927 = _928;
        _929 = _928;
        _930 = _928;
        _931 = _928;
        _932 = _928;
        _933 = _928;
        _934 = _928;
        _935 = _928;
        _936 = _928;
        _937 = _928;
        _938 = _928;
        _939 = _928;
        _940 = 0.0;
        _941 = 0.0;
        _942 = 0.0;
    }
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _999 = (cbModelParam._m0[38u].x * ((((fma(_629, cbModelParam._m0[30u].z, fma(_625, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _621)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1000 = (cbModelParam._m0[38u].y * ((((fma(_629, cbModelParam._m0[31u].z, fma(_625, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _621)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1001 = (((((fma(_629, cbModelParam._m0[32u].z, fma(_625, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _621)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1036 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1003.x + (-0.5));
        float _1038 = _1036 * (_1003.y + (-0.5));
        float _1039 = _1036 * (_1003.z + (-0.5));
        float _1046 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1010.x + (-0.5));
        float _1048 = _1046 * (_1010.y + (-0.5));
        float _1049 = _1046 * (_1010.z + (-0.5));
        float _1056 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1017.x + (-0.5));
        float _1058 = _1056 * (_1017.y + (-0.5));
        float _1059 = _1056 * (_1017.z + (-0.5));
        float _1066 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1024.x + (-0.5));
        float _1068 = _1066 * (_1024.y + (-0.5));
        float _1069 = _1066 * (_1024.z + (-0.5));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = _1037 * 0.5;
        float _1074 = _1047 * 0.5;
        float _1075 = _1057 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(0.0), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3182 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3193 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3204 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0))) * (_1100 + 1.0))) + _1105) * _1070;
        float _1115 = _1038 * 0.5;
        float _1116 = _1048 * 0.5;
        float _1117 = _1058 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(0.0), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3215 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3226 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3237 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0))) * (_1142 + 1.0))) + _1147) * _1071;
        float _1157 = _1039 * 0.5;
        float _1158 = _1049 * 0.5;
        float _1159 = _1059 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(0.0), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3248 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3259 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3270 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * (_1184 + 1.0))) + _1189) * _1072;
        _1206 = _1039;
        _1207 = _1038;
        _1208 = _1037;
        _1209 = _1049;
        _1210 = _1048;
        _1211 = _1047;
        _1212 = _1059;
        _1213 = _1058;
        _1214 = _1057;
        _1215 = _1072;
        _1216 = _1071;
        _1217 = _1070;
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _928;
        _1207 = _928;
        _1208 = _928;
        _1209 = _928;
        _1210 = _928;
        _1211 = _928;
        _1212 = _928;
        _1213 = _928;
        _1214 = _928;
        _1215 = _928;
        _1216 = _928;
        _1217 = _928;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _940)) + _940;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _941)) + _941;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _942)) + _942;
    float _1253 = fma(_1232, cbSceneParam._m0[89u].z, fma(_1231, cbSceneParam._m0[89u].y, _1230 * cbSceneParam._m0[89u].x));
    float _1256 = fma(_1232, cbSceneParam._m0[90u].z, fma(_1231, cbSceneParam._m0[90u].y, _1230 * cbSceneParam._m0[90u].x));
    float _1259 = fma(_1232, cbSceneParam._m0[91u].z, fma(_1231, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1230));
    float _1274 = _534 * (-0.5);
    float _1275 = _535 * (-0.5);
    float _1276 = _536 * (-0.5);
    float _1277 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1280 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1283 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1317;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1290 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_927, _931, _934, _937));
        float _1294 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_929, _932, _935, _938));
        float _1298 = dot(vec4(_1274, _1275, _1276, 1.0), vec4(_930, _933, _936, _939));
        float _1305 = dot(vec4(cbModelParam._m0[39u]), vec4(_1274, _1275, _1276, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1328;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1319 = dot(vec4(cbModelParam._m0[40u]), vec4(_1274, _1275, _1276, 1.0));
        _1328 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1328 = 1.0;
    }
    float _1332 = (_1328 * cbModelParam._m0[1u].x) + (_1317 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1423;
    float _1425;
    float _1427;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1390 = fma(_629, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621)) + cbModelParam._m0[13u].w;
        float _1394 = fma(_629, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621)) + cbModelParam._m0[14u].w;
        float _1398 = fma(_629, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621)) + cbModelParam._m0[15u].w;
        float _1401 = fma(_599, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597));
        float _1404 = fma(_599, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597));
        float _1407 = fma(_599, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597));
        float _1433;
        if (_1401 > 0.0)
        {
            _1433 = abs((1.0 - _1390) / _1401);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1390 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1433 = frontier_phi_41_39_ladder;
        }
        float _1754;
        if (_1404 > 0.0)
        {
            _1754 = abs((1.0 - _1394) / _1404);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1394 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1754 = frontier_phi_50_46_ladder;
        }
        float _2065;
        if (_1407 > 0.0)
        {
            _2065 = abs((1.0 - _1398) / _1407);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1398 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2065 = frontier_phi_64_57_ladder;
        }
        float _2067 = isnan(_1754) ? _1433 : (isnan(_1433) ? _1754 : min(_1433, _1754));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1401) + _1390;
        float _2073 = (_2068 * _1404) + _1394;
        float _2074 = (_2068 * _1407) + _1398;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2076 = (-1.0) - _2075;
        float _2078 = _2075 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2074 > _2078) || ((_2074 < _2076) || ((_2073 > _2078) || ((_2073 < _2076) || ((_2072 < _2076) || (_2072 > _2078))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2213 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1341);
            frontier_phi_40_64_ladder = _2213.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2213.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2213.x * cbModelParam._m0[1u].y;
        }
        _1423 = frontier_phi_40_64_ladder_2;
        _1425 = frontier_phi_40_64_ladder_1;
        _1427 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_597, _598, _599), _1341);
        _1423 = _1411.x * cbModelParam._m0[1u].y;
        _1425 = _1411.y * cbModelParam._m0[1u].y;
        _1427 = _1411.z * cbModelParam._m0[1u].y;
    }
    float _1430 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1482 = fma(_629, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621)) + cbModelParam._m0[21u].w;
        float _1486 = fma(_629, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621)) + cbModelParam._m0[22u].w;
        float _1490 = fma(_629, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621)) + cbModelParam._m0[23u].w;
        float _1493 = fma(_599, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597));
        float _1496 = fma(_599, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597));
        float _1499 = fma(_599, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597));
        float _1759;
        if (_1493 > 0.0)
        {
            _1759 = abs((1.0 - _1482) / _1493);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1482 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1759 = frontier_phi_52_48_ladder;
        }
        float _2091;
        if (_1496 > 0.0)
        {
            _2091 = abs((1.0 - _1486) / _1496);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1486 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2091 = frontier_phi_66_59_ladder;
        }
        float _2278;
        if (_1499 > 0.0)
        {
            _2278 = abs((1.0 - _1490) / _1499);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1490 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2278 = frontier_phi_84_77_ladder;
        }
        float _2280 = isnan(_2091) ? _1759 : (isnan(_1759) ? _2091 : min(_1759, _2091));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1493) + _1482;
        float _2286 = (_2281 * _1496) + _1486;
        float _2287 = (_2281 * _1499) + _1490;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2288;
        float _2291 = _2288 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2287 > _2291) || ((_2287 < _2289) || ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 < _2289) || (_2285 > _2291))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2287, cbModelParam._m0[17u].z, fma(_2286, cbModelParam._m0[17u].y, _2285 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2287, cbModelParam._m0[18u].z, fma(_2286, cbModelParam._m0[18u].y, _2285 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2287, cbModelParam._m0[19u].z, fma(_2286, cbModelParam._m0[19u].y, _2285 * cbModelParam._m0[19u].x))), _1430);
            frontier_phi_49_84_ladder = _2479.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2479.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2479.x * cbModelParam._m0[1u].z;
        }
        _1518 = frontier_phi_49_84_ladder_2;
        _1520 = frontier_phi_49_84_ladder_1;
        _1522 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_597, _598, _599), _1430);
        _1518 = _1502.x * cbModelParam._m0[1u].z;
        _1520 = _1502.y * cbModelParam._m0[1u].z;
        _1522 = _1502.z * cbModelParam._m0[1u].z;
    }
    float _1534 = _596 * 0.01200000010430812835693359375;
    float _1536 = _1534 * ((cbModelParam._m0[1u].w * (_1518 - _1423)) + _1423);
    float _1537 = _1534 * ((cbModelParam._m0[1u].w * (_1520 - _1425)) + _1425);
    float _1538 = _1534 * ((cbModelParam._m0[1u].w * (_1522 - _1427)) + _1427);
    float _1541 = fma(_1538, cbSceneParam._m0[89u].z, fma(_1537, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1538, cbSceneParam._m0[90u].z, fma(_1537, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1538, cbSceneParam._m0[91u].z, fma(_1537, cbSceneParam._m0[91u].y, _1536 * cbSceneParam._m0[91u].x));
    vec4 _1555 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_556, _557));
    float _1557 = _1555.w;
    float _1570 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1557);
    float _1571 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1557);
    float _1572 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1557);
    uvec4 _1576 = floatBitsToUint(cbInstanceData._m0[_570 + 5u]);
    uint _1578 = _1576.x * 14u;
    uint _1579 = _1578 + 13u;
    float _1584 = _596 + (-1.0);
    float _1588 = (cbLight._m0[_1579].x * _1584) + 1.0;
    float _1589 = (cbLight._m0[_1579].y * _1584) + 1.0;
    uint _1590 = _1578 + 5u;
    float _1596 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
    uint _1600 = _1578 + 4u;
    float _1609 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1613 = _1578 | 1u;
    float _1624 = dot(vec3(cbLight._m0[_1578].xyz), vec3(0.0));
    float _1627 = dot(vec3(cbLight._m0[_1613].xyz), vec3(0.0));
    float _3406 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _3417 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1632 = (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * 0.3183098733425140380859375;
    float _1634 = (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.3183098733425140380859375;
    float _1641 = ((cbLight._m0[_1590].x * _1596) * _1634) + (((cbLight._m0[_1600].x * _1570) * _1609) * _1632);
    float _1642 = ((_1596 * cbLight._m0[_1590].y) * _1634) + (((cbLight._m0[_1600].y * _1571) * _1609) * _1632);
    float _1643 = ((_1596 * cbLight._m0[_1590].z) * _1634) + (((cbLight._m0[_1600].z * _1572) * _1609) * _1632);
    uint _1644 = _1578 + 8u;
    float _1650 = cbLight._m0[_1578].x + _534;
    float _1651 = cbLight._m0[_1578].y + _535;
    float _1652 = cbLight._m0[_1578].z + _536;
    float _1656 = inversesqrt(dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652)));
    float _1660 = dot(vec3(0.0), vec3(cbLight._m0[_1578].xyz));
    float _3428 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1663 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _1664 = dot(vec3(0.0), vec3(_534, _535, _536));
    float _3439 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1667 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _1668 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_1650 * _1656, _1651 * _1656, _1652 * _1656));
    float _3450 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1679 = (exp2(log2(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1685 = (0.5 / ((_1663 + 9.9999999392252902907785028219223e-09) + _1667)) * _1663;
    float _3461 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1687 = (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * 0.31831014156341552734375;
    uint _1701 = _1578 + 9u;
    float _1707 = cbLight._m0[_1613].x + _534;
    float _1708 = cbLight._m0[_1613].y + _535;
    float _1709 = cbLight._m0[_1613].z + _536;
    float _1713 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
    float _1717 = dot(vec3(0.0), vec3(cbLight._m0[_1613].xyz));
    float _3472 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _1721 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1707 * _1713, _1708 * _1713, _1709 * _1713));
    float _3483 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1730 = (exp2(log2(1.0 - (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1734 = (0.5 / ((_1720 + 9.9999999392252902907785028219223e-09) + _1667)) * _1720;
    float _3494 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1736 = (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.31831014156341552734375;
    float _1746 = (((_1730 * cbLight._m0[_1701].x) * _1736) * _1596) + ((((cbLight._m0[_1644].x * _1570) * _1679) * _1687) * _1609);
    float _1747 = (((_1730 * cbLight._m0[_1701].y) * _1736) * _1596) + ((((cbLight._m0[_1644].y * _1571) * _1679) * _1687) * _1609);
    float _1748 = (((_1730 * cbLight._m0[_1701].z) * _1736) * _1596) + ((((cbLight._m0[_1644].z * _1572) * _1679) * _1687) * _1609);
    float _1864;
    float _1866;
    float _1868;
    float _1870;
    float _1872;
    float _1874;
    if (_1576.y == 0u)
    {
        float _1804 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1805 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1804;
        float _1806 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1804;
        float _1807 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1804;
        uvec4 _1819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1820 = _1819.x;
        uint _1831 = uint((float(_1819.y) * floor(float(uint(cbSceneParam._m0[85u].y * _557) / _1820))) + floor(float(uint(cbSceneParam._m0[85u].x * _556) / _1820)));
        float _1841 = (log2(_1807 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1842 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        uint _1845 = uint(isnan(14.0) ? _1842 : (isnan(_1842) ? 14.0 : min(_1842, 14.0)));
        uvec4 _1850 = texelFetch(g_lightClusterGridBuffer, int(((_1845 << 2u) + (_1831 << 6u)) >> 2u));
        uint _1851 = _1850.x;
        uint _1852 = _1819.z;
        float _1942;
        float _1944;
        float _1946;
        float _1948;
        float _1950;
        float _1952;
        if (((((1u << ((_1852 >> 4u) & 15u)) + 4294967295u) & _1851) == 0u) || ((_1852 & 240u) == 0u))
        {
            _1942 = 0.0;
            _1944 = 0.0;
            _1946 = 0.0;
            _1948 = 0.0;
            _1950 = 0.0;
            _1952 = 0.0;
        }
        else
        {
            float _1943;
            float _1945;
            float _1947;
            float _1949;
            float _1951;
            float _1953;
            float _2125 = 0.0;
            float _2126 = 0.0;
            float _2127 = 0.0;
            float _2128 = 0.0;
            float _2129 = 0.0;
            float _2130 = 0.0;
            uint _2131 = 0u;
            uint _2140;
            bool _2141;
            for (;;)
            {
                _2140 = texelFetch(g_lightClassification, int((((_1845 << 5u) + (_1831 << 9u)) + (_2131 << 2u)) >> 2u)).x;
                _2141 = _2140 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2141)
                {
                    frontier_phi_79_pred = _2130;
                    frontier_phi_79_pred_1 = _2129;
                    frontier_phi_79_pred_2 = _2128;
                    frontier_phi_79_pred_3 = _2127;
                    frontier_phi_79_pred_4 = _2126;
                    frontier_phi_79_pred_5 = _2125;
                }
                else
                {
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    uint _2327;
                    _2321 = _2125;
                    _2322 = _2126;
                    _2323 = _2127;
                    _2324 = _2128;
                    _2325 = _2129;
                    _2326 = _2130;
                    _2327 = _2140;
                    float _2222;
                    float _2223;
                    float _2224;
                    float _2225;
                    float _2226;
                    float _2227;
                    for (;;)
                    {
                        uint _2331 = uint(findLSB(_2327)) + (_2131 << 5u);
                        uint _2328 = (_2327 + 4294967295u) & _2327;
                        uint _2333 = _2331 * 48u;
                        vec4 _2347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2333)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 3u)).x));
                        uint _2353 = (_2331 * 48u) + 4u;
                        vec4 _2366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2353)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 3u)).x));
                        uint _2372 = (_2331 * 48u) + 8u;
                        vec3 _2383 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2372)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 2u)).x));
                        float _2387 = _2347.x - _1805;
                        float _2388 = _2347.y - _1806;
                        float _2389 = _2347.z - _1807;
                        float _2390 = dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389));
                        float _2393 = inversesqrt(_2390);
                        float _2402 = 1.0 - (_2390 * _2347.w);
                        float _3515 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
                        float _2403 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
                        float _2404 = sqrt(_2390) * _2366.w;
                        float _2407 = 1.39999997615814208984375 / (_2404 + 1.39999997615814208984375);
                        float _2408 = _2407 * _2407;
                        float _2411 = ((1.0 - _2408) * dot(vec3(0.0), vec3(_2393 * _2387, _2393 * _2388, _2393 * _2389))) + _2408;
                        float _2414 = _2404 * _2404;
                        float _2418 = ((isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))) * _2403) / ((_2414 * 0.699999988079071044921875) + 1.0);
                        float _2422 = (-0.0) - _1805;
                        float _2423 = (-0.0) - _1806;
                        float _2424 = (-0.0) - _1807;
                        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
                        float _2432 = dot(vec3(0.0), vec3(_2428 * _2422, _2428 * _2423, _2428 * _2424));
                        float _3531 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
                        float _3542 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
                        float _2436 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
                        float _2440 = (0.5 / (((isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) + 9.9999999392252902907785028219223e-09) + _2436)) * _2436;
                        float _3553 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
                        float _2449 = (((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * 3.1415927410125732421875) / ((_2414 * 2.1991131305694580078125) + 3.141590118408203125)) * _2403;
                        _2225 = (_2418 * _2366.x) + _2324;
                        _2226 = (_2418 * _2366.y) + _2325;
                        _2227 = (_2418 * _2366.z) + _2326;
                        _2222 = (_2449 * _2383.x) + _2321;
                        _2223 = (_2449 * _2383.y) + _2322;
                        _2224 = (_2449 * _2383.z) + _2323;
                        if (_2328 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2321 = _2222;
                            _2322 = _2223;
                            _2323 = _2224;
                            _2324 = _2225;
                            _2325 = _2226;
                            _2326 = _2227;
                            _2327 = _2328;
                        }
                    }
                    frontier_phi_79_pred = _2227;
                    frontier_phi_79_pred_1 = _2226;
                    frontier_phi_79_pred_2 = _2225;
                    frontier_phi_79_pred_3 = _2224;
                    frontier_phi_79_pred_4 = _2223;
                    frontier_phi_79_pred_5 = _2222;
                }
                _1953 = frontier_phi_79_pred;
                _1951 = frontier_phi_79_pred_1;
                _1949 = frontier_phi_79_pred_2;
                _1947 = frontier_phi_79_pred_3;
                _1945 = frontier_phi_79_pred_4;
                _1943 = frontier_phi_79_pred_5;
                uint _2132 = _2131 + 1u;
                if (_2132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2125 = _1943;
                    _2126 = _1945;
                    _2127 = _1947;
                    _2128 = _1949;
                    _2129 = _1951;
                    _2130 = _1953;
                    _2131 = _2132;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1942 = _1943;
            _1944 = _1945;
            _1946 = _1947;
            _1948 = _1949;
            _1950 = _1951;
            _1952 = _1953;
        }
        uvec4 _1956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1957 = _1956.z;
        uint _1959 = (_1957 >> 8u) & 15u;
        float _2096;
        float _2098;
        float _2100;
        float _2102;
        float _2104;
        float _2106;
        if (((4294967295u << _1959) & _1851) == 0u)
        {
            _2096 = _1942;
            _2098 = _1944;
            _2100 = _1946;
            _2102 = _1948;
            _2104 = _1950;
            _2106 = _1952;
        }
        else
        {
            float _2121 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_1959 < ((_1957 >> 12u) & 15u))
            {
                float _2097;
                float _2099;
                float _2101;
                float _2103;
                float _2105;
                float _2107;
                float _2304 = _1942;
                float _2305 = _1944;
                float _2306 = _1946;
                float _2307 = _1948;
                float _2308 = _1950;
                float _2309 = _1952;
                uint _2310 = _1959;
                uint _2319;
                bool _2320;
                for (;;)
                {
                    _2319 = texelFetch(g_lightClassification, int((((_1845 << 5u) + (_1831 << 9u)) + (_2310 << 2u)) >> 2u)).x;
                    _2320 = _2319 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2320)
                    {
                        frontier_phi_93_pred = _2308;
                        frontier_phi_93_pred_1 = _2307;
                        frontier_phi_93_pred_2 = _2306;
                        frontier_phi_93_pred_3 = _2305;
                        frontier_phi_93_pred_4 = _2304;
                        frontier_phi_93_pred_5 = _2309;
                    }
                    else
                    {
                        float _2484;
                        float _2485;
                        float _2486;
                        float _2487;
                        float _2488;
                        float _2489;
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _2738;
                        float _2497 = _2304;
                        float _2498 = _2305;
                        float _2499 = _2306;
                        float _2500 = _2307;
                        float _2501 = _2308;
                        float _2502 = _2309;
                        uint _2503 = _2319;
                        uint _2504;
                        vec4 _2529;
                        float _2530;
                        vec4 _2545;
                        vec3 _2557;
                        vec4 _2572;
                        vec4 _2587;
                        float _2633;
                        bool _2634;
                        for (;;)
                        {
                            uint _2514 = ((_2310 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2503));
                            _2504 = (_2503 + 4294967295u) & _2503;
                            uint _2516 = _2514 * 40u;
                            _2529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2516 + 3u)).x));
                            _2530 = _2529.w;
                            uint _2532 = (_2514 * 40u) + 4u;
                            _2545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2532 + 3u)).x));
                            uint _2547 = (_2514 * 40u) + 8u;
                            _2557 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2547 + 2u)).x));
                            uint _2559 = (_2514 * 40u) + 16u;
                            _2572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2559 + 3u)).x));
                            uint _2574 = (_2514 * 40u) + 20u;
                            _2587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 3u)).x));
                            uint _2589 = (_2514 * 40u) + 24u;
                            vec4 _2602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2589 + 3u)).x));
                            uint _2608 = (_2514 * 40u) + 28u;
                            vec4 _2621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 3u)).x));
                            _2633 = fma(_1807, _2621.z, fma(_1806, _2621.y, _2621.x * _1805)) + _2621.w;
                            _2634 = !((fma(_1807, _2602.z, fma(_1806, _2602.y, _2602.x * _1805)) + _2602.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2634)
                            {
                                float _2661 = _2529.x - _1805;
                                float _2662 = _2529.y - _1806;
                                float _2663 = _2529.z - _1807;
                                float _2664 = dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663));
                                float _2667 = inversesqrt(_2664);
                                float _2668 = _2667 * _2661;
                                float _2669 = _2667 * _2662;
                                float _2670 = _2667 * _2663;
                                float _2674 = 1.0 - (_2664 / (_2530 * _2530));
                                float _3564 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                                float _2675 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
                                float _2679 = sqrt(_2664) * _2545.w;
                                float _2681 = 1.39999997615814208984375 / (_2679 + 1.39999997615814208984375);
                                float _2682 = _2681 * _2681;
                                float _2683 = 1.0 - _2682;
                                float _2685 = (_2683 * dot(vec3(_2668, _2669, _2670), vec3(0.0))) + _2682;
                                float _2688 = _2679 * _2679;
                                float _2692 = (fma(_1807, _2572.z, fma(_1806, _2572.y, _2572.x * _1805)) + _2572.w) / _2633;
                                float _2693 = (fma(_1807, _2587.z, fma(_1806, _2587.y, _2587.x * _1805)) + _2587.w) / _2633;
                                float _2697 = 1.0 - dot(vec2(_2692, _2693), vec2(_2692, _2693));
                                float _3580 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                                float _2698 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
                                float _2699 = _2698 * (((isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0))) * _2675) / ((_2688 * 0.699999988079071044921875) + 1.0));
                                float _2709 = dot(vec3(0.0), vec3((-0.0) - (_1805 * _2121), (-0.0) - (_1806 * _2121), (-0.0) - (_1807 * _2121)));
                                float _3591 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                                float _2717 = (_2683 * dot(vec3(0.0), vec3(_2668, _2669, _2670))) + _2682;
                                float _3602 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                                float _2718 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
                                float _2722 = (0.5 / (((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) + 9.9999999392252902907785028219223e-09) + _2718)) * _2718;
                                float _3613 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                                float _2729 = (_2698 * _2675) * (((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 3.1415927410125732421875) / ((_2688 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2699 * _2545.z;
                                frontier_phi_99_pred_1 = _2699 * _2545.y;
                                frontier_phi_99_pred_2 = _2699 * _2545.x;
                                frontier_phi_99_pred_3 = _2729 * _2557.z;
                                frontier_phi_99_pred_4 = _2729 * _2557.y;
                                frontier_phi_99_pred_5 = _2729 * _2557.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _2738 = frontier_phi_99_pred;
                            _2737 = frontier_phi_99_pred_1;
                            _2736 = frontier_phi_99_pred_2;
                            _2735 = frontier_phi_99_pred_3;
                            _2734 = frontier_phi_99_pred_4;
                            _2733 = frontier_phi_99_pred_5;
                            _2487 = _2736 + _2500;
                            _2488 = _2737 + _2501;
                            _2489 = _2738 + _2502;
                            _2484 = _2733 + _2497;
                            _2485 = _2734 + _2498;
                            _2486 = _2735 + _2499;
                            if (_2504 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2497 = _2484;
                                _2498 = _2485;
                                _2499 = _2486;
                                _2500 = _2487;
                                _2501 = _2488;
                                _2502 = _2489;
                                _2503 = _2504;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2488;
                        frontier_phi_93_pred_1 = _2487;
                        frontier_phi_93_pred_2 = _2486;
                        frontier_phi_93_pred_3 = _2485;
                        frontier_phi_93_pred_4 = _2484;
                        frontier_phi_93_pred_5 = _2489;
                    }
                    _2105 = frontier_phi_93_pred;
                    _2103 = frontier_phi_93_pred_1;
                    _2101 = frontier_phi_93_pred_2;
                    _2099 = frontier_phi_93_pred_3;
                    _2097 = frontier_phi_93_pred_4;
                    _2107 = frontier_phi_93_pred_5;
                    uint _2311 = _2310 + 1u;
                    if (_2311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2304 = _2097;
                        _2305 = _2099;
                        _2306 = _2101;
                        _2307 = _2103;
                        _2308 = _2105;
                        _2309 = _2107;
                        _2310 = _2311;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2107;
                frontier_phi_68_69_ladder_1 = _2105;
                frontier_phi_68_69_ladder_2 = _2103;
                frontier_phi_68_69_ladder_3 = _2101;
                frontier_phi_68_69_ladder_4 = _2097;
                frontier_phi_68_69_ladder_5 = _2099;
            }
            else
            {
                frontier_phi_68_69_ladder = _1952;
                frontier_phi_68_69_ladder_1 = _1950;
                frontier_phi_68_69_ladder_2 = _1948;
                frontier_phi_68_69_ladder_3 = _1946;
                frontier_phi_68_69_ladder_4 = _1942;
                frontier_phi_68_69_ladder_5 = _1944;
            }
            _2096 = frontier_phi_68_69_ladder_4;
            _2098 = frontier_phi_68_69_ladder_5;
            _2100 = frontier_phi_68_69_ladder_3;
            _2102 = frontier_phi_68_69_ladder_2;
            _2104 = frontier_phi_68_69_ladder_1;
            _2106 = frontier_phi_68_69_ladder;
        }
        float _2111 = isnan(1.0) ? _596 : (isnan(_596) ? 1.0 : min(_596, 1.0));
        _1864 = (_2111 * _2102) + _1641;
        _1866 = (_2111 * _2104) + _1642;
        _1868 = (_2111 * _2106) + _1643;
        _1870 = ((_2096 * 0.039999999105930328369140625) * _2111) + _1746;
        _1872 = ((_2098 * 0.039999999105930328369140625) * _2111) + _1747;
        _1874 = ((_2100 * 0.039999999105930328369140625) * _2111) + _1748;
    }
    else
    {
        _1864 = _1641;
        _1866 = _1642;
        _1868 = _1643;
        _1870 = _1746;
        _1872 = _1747;
        _1874 = _1748;
    }
    float _3629 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3640 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3651 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _1891 = ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1864 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _596))) + ((_1870 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _1892 = ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1866 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _596))) + ((_1872 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _1893 = ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1868 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _596))) + ((_1874 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1332)) * cbPerFrame._m0[3u].x);
    float _1894 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1895 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1896 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    uint _1897 = _570 + 6u;
    float _1905 = _556 / cbSceneParam._m0[86u].x;
    float _1906 = _557 / cbSceneParam._m0[86u].y;
    vec4 _1920 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1905, _1906, (log2((isnan(cbSceneParam._m0[77u].w) ? _529 : (isnan(_529) ? cbSceneParam._m0[77u].w : min(_529, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1922 = _1920.x;
    float _1923 = _1920.y;
    float _1924 = _1920.z;
    float _1925 = _1920.w;
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    if (_529 > cbSceneParam._m0[78u].w)
    {
        float _1967 = isnan(_529) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _529 : min(cbSceneParam._m0[80u].w, _529));
        float _1968 = _1967 / _529;
        float _1979 = _1968 * _257;
        float _1980 = _258 * _1968;
        float _1981 = (-0.0) - _1980;
        float _1982 = _1968 * _259;
        float _1984 = (cbSceneParam._m0[77u].w * _1981) / _1967;
        float _1985 = _1984 + cbSceneParam._m0[79u].w;
        float _1986 = cbSceneParam._m0[79u].w - _1980;
        float _1992 = sqrt(((_1979 * _1979) + (_1980 * _1980)) + (_1982 * _1982));
        float _1995 = (1.0 - (cbSceneParam._m0[77u].w / _1967)) * _1992;
        float _2001 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2003 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2235;
        if (abs((_1981 - _1984) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2235 = ((((_1985 > 0.0) ? exp2(_2001 * _1985) : (2.0 - exp2(_2003 * _1985))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1995;
        }
        else
        {
            float _2154 = 1.0 / cbSceneParam._m0[80u].x;
            float _2155 = isnan(_1986) ? _1985 : (isnan(_1985) ? _1986 : max(_1985, _1986));
            float _2156 = isnan(_1986) ? _1985 : (isnan(_1985) ? _1986 : min(_1985, _1986));
            float _2165 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : min(_2155, 0.0));
            float _2166 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : min(_2156, 0.0));
            _2235 = ((abs(_1992 / _1981) * cbSceneParam._m0[80u].y) * ((((_2165 - _2166) * 2.0) - ((exp2(_2001 * (isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0)))) - exp2(_2001 * (isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))))) * _2154)) - ((exp2(_2003 * _2165) - exp2(_2003 * _2166)) * _2154))) + (_1995 * cbSceneParam._m0[80u].z);
        }
        vec4 _2237 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1905, _1906, 1.0), 0.0);
        float _2246 = exp2((_2235 * (-1.44269502162933349609375)) * (1.0 - _2237.w));
        float _2247 = log2(_2246);
        float _2263 = log2(_1925);
        _2005 = (exp2(_2263 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2247 * cbSceneParam._m0[78u].x)) * _2237.x) / cbSceneParam._m0[78u].x)) + _1922;
        _2007 = (exp2(_2263 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2247 * cbSceneParam._m0[78u].y)) * _2237.y) / cbSceneParam._m0[78u].y)) + _1923;
        _2009 = (exp2(_2263 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2247 * cbSceneParam._m0[78u].z)) * _2237.z) / cbSceneParam._m0[78u].z)) + _1924;
        _2011 = _2246 * _1925;
    }
    else
    {
        _2005 = _1922;
        _2007 = _1923;
        _2009 = _1924;
        _2011 = _1925;
    }
    bool _2273;
    vec4 _2021;
    vec4 _2044;
    float _2046;
    float _2050;
    float _2051;
    float _2052;
    float _2053;
    bool _2064;
    for (;;)
    {
        _2021 = cbMatDynParam._m0[0u];
        float _2023 = roundEven(_2021.y);
        bool _2024 = _2023 == 3.0;
        float _2026 = log2(_2011);
        float _2033 = exp2(_2026 * cbSceneParam._m0[78u].x) * _1894;
        float _2034 = exp2(_2026 * cbSceneParam._m0[78u].y) * _1895;
        float _2035 = exp2(_2026 * cbSceneParam._m0[78u].z) * _1896;
        float _2042 = _543 + (-0.5);
        _2044 = cbMtdParam._m0[1u];
        _2046 = _2044.y * _2042;
        float _2049 = (_2023 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2050 = _2049 * (_2024 ? _2033 : (_2033 + (cbSceneParam._m0[72u].w * _2005)));
        _2051 = _2049 * (_2024 ? _2034 : (_2034 + (cbSceneParam._m0[72u].w * _2007)));
        _2052 = _2049 * (_2024 ? _2035 : (_2035 + (cbSceneParam._m0[72u].w * _2009)));
        _2053 = _2042 * 0.999000012874603271484375;
        _2064 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2064)
        {
            if ((cbInstanceData._m0[_570 + 7u].x + _2053) < 0.5)
            {
                _2273 = true;
                break;
            }
        }
        uint _2189 = _572 + uint(_2021.w);
        if ((cbInstanceData._m0[_2189].w < 1.0) && ((cbInstanceData._m0[_2189].w + _2053) < 0.5))
        {
            _2273 = true;
            break;
        }
        if ((_2046 + 1.0) < _2044.x)
        {
            _2273 = true;
            break;
        }
        _2273 = false;
        break;
    }
    float _2454;
    if (_2273)
    {
        discard_state = true;
        _2454 = 0.0;
    }
    else
    {
        _2454 = cbInstanceData._m0[_1897].w;
    }
    SV_Target.x = _2050;
    SV_Target.y = _2051;
    SV_Target.z = _2052;
    SV_Target.w = _2454;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1897].w;
    discard_exit();
}


