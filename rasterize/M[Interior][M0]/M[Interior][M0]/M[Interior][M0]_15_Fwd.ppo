#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1091;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _327 = cbMtdParam._m0[22u].y + _257;
    float _328 = cbMtdParam._m0[22u].z + _258;
    float _329 = cbMtdParam._m0[22u].w + _259;
    float _343 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_186, _187, _188));
    float _344 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_200, _201, _202));
    float _345 = (-0.0) - dot(vec3(_327, _328, _329), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _349 * _345;
    float _352 = (cbMtdParam._m0[19u].x * _343) * _349;
    float _354 = (cbMtdParam._m0[18u].w * _344) * _349;
    float _355 = fract(TEXCOORD.x);
    float _356 = fract(TEXCOORD.y);
    float _362;
    if (_352 > 0.0)
    {
        _362 = (1.0 - _355) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _355) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _362 = frontier_phi_3_2_ladder;
    }
    float _370;
    if (_354 > 0.0)
    {
        _370 = (1.0 - _356) / _354;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _356) / _354;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _370 = frontier_phi_7_6_ladder;
    }
    bool _372 = _350 > 0.0;
    float _374 = _372 ? (cbMtdParam._m0[15u].x / _350) : 5000.0;
    float _375 = isnan(_370) ? _362 : (isnan(_362) ? _370 : min(_362, _370));
    float _376 = isnan(_374) ? _375 : (isnan(_375) ? _374 : min(_375, _374));
    float _380 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _381 = _355 + (-0.5);
    float _384 = _356 + (-0.5);
    float _387 = ((_376 * _350) + _380) / _380;
    vec4 _412 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_381 + (_376 * _352)) / _387) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_384 + (_376 * _354)) / _387) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _428 = (_414 - (_414 * _284)) * cbMtdParam._m0[9u].x;
    float _429 = (_415 - (_415 * _284)) * cbMtdParam._m0[9u].y;
    float _430 = cbMtdParam._m0[9u].z * (_416 - (_416 * _284));
    float _452 = (cbMtdParam._m0[21u].x * _343) * _349;
    float _454 = (cbMtdParam._m0[20u].w * _344) * _349;
    bool _455 = _452 > 0.0;
    float _460;
    if (_455)
    {
        _460 = (1.0 - _355) / _452;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_452 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _355) / _452;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _460 = frontier_phi_11_10_ladder;
    }
    bool _462 = _454 > 0.0;
    float _467;
    if (_462)
    {
        _467 = (1.0 - _356) / _454;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _356) / _454;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _467 = frontier_phi_15_14_ladder;
    }
    float _470 = _372 ? (cbMtdParam._m0[16u].z / _350) : 5000.0;
    float _471 = isnan(_467) ? _460 : (isnan(_460) ? _467 : min(_460, _467));
    float _472 = isnan(_470) ? _471 : (isnan(_471) ? _470 : min(_471, _470));
    float _476 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _480 = ((_472 * _350) + _476) / _476;
    float _485 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _487 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _503 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_381 + (_472 * _452)) / _480) + 0.5) + _485) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_384 + (_472 * _454)) / _480) + 0.5) + _487) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _508 = _503.x * cbMtdParam._m0[10u].x;
    float _509 = _503.y * cbMtdParam._m0[10u].y;
    float _510 = _503.z * cbMtdParam._m0[10u].z;
    float _518;
    if (_455)
    {
        _518 = (1.0 - _355) / _452;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_452 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _355) / _452;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _518 = frontier_phi_19_18_ladder;
    }
    float _524;
    if (_462)
    {
        _524 = (1.0 - _356) / _454;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _356) / _454;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _524 = frontier_phi_23_22_ladder;
    }
    float _526 = isnan(_524) ? _518 : (isnan(_518) ? _524 : min(_518, _524));
    float _527 = isnan(_470) ? _526 : (isnan(_526) ? _470 : min(_526, _470));
    float _534 = ((_527 * _350) + _476) / _476;
    vec4 _548 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_381 + (_527 * _452)) / _534) + 0.5) + _485) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_384 + (_527 * _454)) / _534) + 0.5) + _487) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _550 = _548.w;
    float _552 = _550 - (_550 * _284);
    float _563 = 0.5 - (_284 * 0.5);
    float _573 = (((_428 - _297) + (_552 * ((_508 - _428) - (_508 * _284)))) * _563) + _297;
    float _574 = (((_429 - _299) + (_552 * ((_509 - _429) - (_509 * _284)))) * _563) + _299;
    float _575 = (((_430 - _301) + (_552 * ((_510 - _430) - (_510 * _284)))) * _563) + _301;
    vec4 _587 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _595 = (_587.x * 2.0) + (-1.0);
    float _597 = (_587.y * 2.0) + (-1.0);
    float _598 = dot(vec2(_595, _597), vec2(_595, _597));
    float _3202 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _603 = sqrt(1.0 - (isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))));
    float _604 = _587.z * _284;
    float _607 = fma(_603, _193, fma(_597, _200, _595 * _186));
    float _610 = fma(_603, _194, fma(_597, _201, _595 * _187));
    float _613 = fma(_603, _195, fma(_597, _202, _595 * _188));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3213 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _621 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    float _3224 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3235 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3246 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _640 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _644 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _645 = _257 * _644;
    float _646 = _258 * _644;
    float _647 = _259 * _644;
    float _653 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _654 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _675 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _678 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _681 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _694 = uint(roundEven(NORMAL.w)) * 13u;
    uint _697 = (_694 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _703 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * cbInstanceData._m0[_697].x;
    float _704 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_697].y;
    float _705 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_697].z;
    float _3257 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    vec4 _717 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _653, cbSceneParam._m0[86u].y * _654));
    float _720 = _717.x * TEXCOORD.z;
    float _721 = dot(vec3(_618, _619, _620), vec3(_645, _646, _647));
    float _724 = _721 * 2.0;
    float _728 = (_724 * _618) - _645;
    float _729 = (_724 * _619) - _646;
    float _730 = (_724 * _620) - _647;
    float _734 = abs(dot(vec3(_645, _646, _647), vec3(_618, _619, _620)));
    float _3290 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _736 = sqrt(_621);
    float _749 = exp2((_736 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_736 * 3.0));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1090;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _817 = fma(_789, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781));
        float _821 = fma(_789, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781));
        float _825 = fma(_789, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781));
        float _848 = _781 + _618;
        float _849 = _785 + _619;
        float _850 = _789 + _620;
        float _860 = fma(_850, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _848)) - _817;
        float _861 = fma(_850, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _848)) - _821;
        float _862 = fma(_850, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _848)) - _825;
        float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
        float _879 = ((_866 * _860) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_817 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_866 * _861) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_821 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_866 * _862) / cbModelParam._m0[34u].z) + ((((((_825 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        float _918 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_884.x + (-0.5));
        float _920 = _918 * (_884.y + (-0.5));
        float _921 = _918 * (_884.z + (-0.5));
        float _928 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_891.x + (-0.5));
        float _930 = _928 * (_891.y + (-0.5));
        float _931 = _928 * (_891.z + (-0.5));
        float _938 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_898.x + (-0.5));
        float _940 = _938 * (_898.y + (-0.5));
        float _941 = _938 * (_898.z + (-0.5));
        float _948 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_905.x + (-0.5));
        float _950 = _948 * (_905.y + (-0.5));
        float _951 = _948 * (_905.z + (-0.5));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = _919 * 0.5;
        float _956 = _929 * 0.5;
        float _957 = _939 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _972 = (dot(vec3(_618, _619, _620), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3316 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _982 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3327 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3338 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * (_984 + 1.0))) + _989) * _952;
        float _999 = _920 * 0.5;
        float _1000 = _930 * 0.5;
        float _1001 = _940 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_618, _619, _620), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3349 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3360 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3371 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * (_1026 + 1.0))) + _1031) * _953;
        float _1041 = _921 * 0.5;
        float _1042 = _931 * 0.5;
        float _1043 = _941 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_618, _619, _620), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3404 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_1068 + 1.0))) + _1073) * _954;
        _1090 = _921;
        _1092 = _920;
        _1093 = _919;
        _1094 = _931;
        _1095 = _930;
        _1096 = _929;
        _1097 = _941;
        _1098 = _940;
        _1099 = _939;
        _1100 = _954;
        _1101 = _953;
        _1102 = _952;
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
    }
    else
    {
        _1090 = _1091;
        _1092 = _1091;
        _1093 = _1091;
        _1094 = _1091;
        _1095 = _1091;
        _1096 = _1091;
        _1097 = _1091;
        _1098 = _1091;
        _1099 = _1091;
        _1100 = _1091;
        _1101 = _1091;
        _1102 = _1091;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1131 = fma(_789, cbModelParam._m0[30u].z, fma(_785, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _781));
        float _1135 = fma(_789, cbModelParam._m0[31u].z, fma(_785, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _781));
        float _1139 = fma(_789, cbModelParam._m0[32u].z, fma(_785, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _781));
        float _1162 = _781 + _618;
        float _1163 = _785 + _619;
        float _1164 = _789 + _620;
        float _1174 = fma(_1164, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162)) - _1131;
        float _1175 = fma(_1164, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162)) - _1135;
        float _1176 = fma(_1164, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162)) - _1139;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1131 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1135 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[35u].z) + ((((((_1139 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1230 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1197.x + (-0.5));
        float _1232 = _1230 * (_1197.y + (-0.5));
        float _1233 = _1230 * (_1197.z + (-0.5));
        float _1240 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1204.x + (-0.5));
        float _1242 = _1240 * (_1204.y + (-0.5));
        float _1243 = _1240 * (_1204.z + (-0.5));
        float _1250 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1211.x + (-0.5));
        float _1252 = _1250 * (_1211.y + (-0.5));
        float _1253 = _1250 * (_1211.z + (-0.5));
        float _1260 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1218.x + (-0.5));
        float _1262 = _1260 * (_1218.y + (-0.5));
        float _1263 = _1260 * (_1218.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_618, _619, _620), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3467 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_1294 + 1.0))) + _1299) * _1264;
        float _1309 = _1232 * 0.5;
        float _1310 = _1242 * 0.5;
        float _1311 = _1252 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_618, _619, _620), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3500 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_1336 + 1.0))) + _1341) * _1265;
        float _1351 = _1233 * 0.5;
        float _1352 = _1243 * 0.5;
        float _1353 = _1253 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_618, _619, _620), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3533 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1378 + 1.0))) + _1383) * _1266;
        _1400 = _1233;
        _1401 = _1232;
        _1402 = _1231;
        _1403 = _1243;
        _1404 = _1242;
        _1405 = _1241;
        _1406 = _1253;
        _1407 = _1252;
        _1408 = _1251;
        _1409 = _1266;
        _1410 = _1265;
        _1411 = _1264;
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1091;
        _1401 = _1091;
        _1402 = _1091;
        _1403 = _1091;
        _1404 = _1091;
        _1405 = _1091;
        _1406 = _1091;
        _1407 = _1091;
        _1408 = _1091;
        _1409 = _1091;
        _1410 = _1091;
        _1411 = _1091;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1103)) + _1103;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1104)) + _1104;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1105)) + _1105;
    float _1447 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1424));
    float _1468 = _728 * 0.5;
    float _1469 = _729 * 0.5;
    float _1470 = _730 * 0.5;
    float _1471 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1474 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1477 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1511;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1484 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1090, _1094, _1097, _1100));
        float _1488 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1492 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1499 = dot(vec4(cbModelParam._m0[39u]), vec4(_1468, _1469, _1470, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1522;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1513 = dot(vec4(cbModelParam._m0[40u]), vec4(_1468, _1469, _1470, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1526 = (_1522 * cbModelParam._m0[1u].x) + (_1511 * (1.0 - cbModelParam._m0[1u].x));
    float _1536 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1536 : min(cbModelParam._m0[25u].z, _1536));
    float _1618;
    float _1620;
    float _1622;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1585 = fma(_789, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781)) + cbModelParam._m0[13u].w;
        float _1589 = fma(_789, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781)) + cbModelParam._m0[14u].w;
        float _1593 = fma(_789, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781)) + cbModelParam._m0[15u].w;
        float _1596 = fma(_730, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728));
        float _1599 = fma(_730, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728));
        float _1602 = fma(_730, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728));
        float _1630;
        if (_1596 > 0.0)
        {
            _1630 = abs((1.0 - _1585) / _1596);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1585 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1630 = frontier_phi_38_36_ladder;
        }
        float _1975;
        if (_1599 > 0.0)
        {
            _1975 = abs((1.0 - _1589) / _1599);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1589 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1975 = frontier_phi_47_43_ladder;
        }
        float _2275;
        if (_1602 > 0.0)
        {
            _2275 = abs((1.0 - _1593) / _1602);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1593 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2275 = frontier_phi_61_54_ladder;
        }
        float _2277 = isnan(_1975) ? _1630 : (isnan(_1630) ? _1975 : min(_1630, _1975));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1596) + _1585;
        float _2283 = (_2278 * _1599) + _1589;
        float _2284 = (_2278 * _1602) + _1593;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2286 = (-1.0) - _2285;
        float _2288 = _2285 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2284 > _2288) || ((_2284 < _2286) || ((_2283 > _2288) || ((_2283 < _2286) || ((_2282 < _2286) || (_2282 > _2288))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2284, cbModelParam._m0[9u].z, fma(_2283, cbModelParam._m0[9u].y, _2282 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2284, cbModelParam._m0[10u].z, fma(_2283, cbModelParam._m0[10u].y, _2282 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2284, cbModelParam._m0[11u].z, fma(_2283, cbModelParam._m0[11u].y, _2282 * cbModelParam._m0[11u].x))), _1537);
            frontier_phi_37_61_ladder = _2410.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2410.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2410.x * cbModelParam._m0[1u].y;
        }
        _1618 = frontier_phi_37_61_ladder_2;
        _1620 = frontier_phi_37_61_ladder_1;
        _1622 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_728, _729, _730), _1537);
        _1618 = _1606.x * cbModelParam._m0[1u].y;
        _1620 = _1606.y * cbModelParam._m0[1u].y;
        _1622 = _1606.z * cbModelParam._m0[1u].y;
    }
    float _1626 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1627 = isnan(_1626) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1626 : min(cbModelParam._m0[25u].w, _1626));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1679 = fma(_789, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781)) + cbModelParam._m0[21u].w;
        float _1683 = fma(_789, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781)) + cbModelParam._m0[22u].w;
        float _1687 = fma(_789, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781)) + cbModelParam._m0[23u].w;
        float _1690 = fma(_730, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728));
        float _1693 = fma(_730, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728));
        float _1696 = fma(_730, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728));
        float _1980;
        if (_1690 > 0.0)
        {
            _1980 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1980 = frontier_phi_49_45_ladder;
        }
        float _2301;
        if (_1693 > 0.0)
        {
            _2301 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2301 = frontier_phi_63_56_ladder;
        }
        float _2470;
        if (_1696 > 0.0)
        {
            _2470 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2470 = frontier_phi_77_72_ladder;
        }
        float _2472 = isnan(_2301) ? _1980 : (isnan(_1980) ? _2301 : min(_1980, _2301));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1690) + _1679;
        float _2478 = (_2473 * _1693) + _1683;
        float _2479 = (_2473 * _1696) + _1687;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2479, cbModelParam._m0[17u].z, fma(_2478, cbModelParam._m0[17u].y, _2477 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2479, cbModelParam._m0[18u].z, fma(_2478, cbModelParam._m0[18u].y, _2477 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2479, cbModelParam._m0[19u].z, fma(_2478, cbModelParam._m0[19u].y, _2477 * cbModelParam._m0[19u].x))), _1627);
            frontier_phi_46_77_ladder = _2712.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2712.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2712.x * cbModelParam._m0[1u].z;
        }
        _1715 = frontier_phi_46_77_ladder_2;
        _1717 = frontier_phi_46_77_ladder_1;
        _1719 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_728, _729, _730), _1627);
        _1715 = _1699.x * cbModelParam._m0[1u].z;
        _1717 = _1699.y * cbModelParam._m0[1u].z;
        _1719 = _1699.z * cbModelParam._m0[1u].z;
    }
    float _1731 = ((((1.0 - _749) * ((_736 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_749 * _736)) * _720;
    float _1732 = _1731 * ((cbModelParam._m0[1u].w * (_1715 - _1618)) + _1618);
    float _1733 = _1731 * ((cbModelParam._m0[1u].w * (_1717 - _1620)) + _1620);
    float _1734 = _1731 * ((cbModelParam._m0[1u].w * (_1719 - _1622)) + _1622);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, _1732 * cbSceneParam._m0[91u].x));
    uvec4 _1753 = floatBitsToUint(cbInstanceData._m0[_694 + 5u]);
    uint _1755 = _1753.x * 14u;
    uint _1756 = _1755 + 13u;
    float _1761 = _720 + (-1.0);
    float _1764 = (cbLight._m0[_1756].x * _1761) + 1.0;
    float _1765 = (cbLight._m0[_1756].y * _1761) + 1.0;
    uint _1766 = _1755 + 5u;
    float _1772 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1776 = _1755 + 4u;
    float _1782 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1786 = _1755 | 1u;
    float _1797 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_618, _619, _620));
    float _1800 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_618, _619, _620));
    float _3669 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _3680 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1805 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.3183098733425140380859375;
    float _1807 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.3183098733425140380859375;
    float _1814 = ((cbLight._m0[_1766].x * _1772) * _1807) + ((cbLight._m0[_1776].x * _1782) * _1805);
    float _1815 = ((_1772 * cbLight._m0[_1766].y) * _1807) + ((_1782 * cbLight._m0[_1776].y) * _1805);
    float _1816 = ((_1772 * cbLight._m0[_1766].z) * _1807) + ((_1782 * cbLight._m0[_1776].z) * _1805);
    uint _1818 = _1755 + 8u;
    float _1831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _621) * 0.949999988079071044921875);
    float _1832 = _1831 * _1831;
    float _1833 = cbLight._m0[_1755].x + _645;
    float _1834 = cbLight._m0[_1755].y + _646;
    float _1835 = cbLight._m0[_1755].z + _647;
    float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
    float _1840 = _1839 * _1833;
    float _1841 = _1839 * _1834;
    float _1842 = _1839 * _1835;
    float _1843 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1755].xyz));
    float _3691 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _1847 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _1848 = dot(vec3(_618, _619, _620), vec3(_1840, _1841, _1842));
    float _3713 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1851 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _1852 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1840, _1841, _1842));
    float _3724 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1856 = _1832 * _1832;
    float _1860 = ((_1851 * _1851) * (_1856 + (-1.0))) + 1.0;
    float _1871 = (exp2(log2(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1872 = 1.0 - _1832;
    float _1883 = (0.5 / (((_1847 * ((_1846 * _1872) + _1832)) + 9.9999999392252902907785028219223e-09) + (((_1847 * _1872) + _1832) * _1846))) * _1846;
    float _3735 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1885 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1856 / ((_1860 * _1860) * 3.141590118408203125));
    uint _1896 = _1755 + 9u;
    float _1907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _621) * 0.949999988079071044921875);
    float _1908 = _1907 * _1907;
    float _1909 = cbLight._m0[_1786].x + _645;
    float _1910 = cbLight._m0[_1786].y + _646;
    float _1911 = cbLight._m0[_1786].z + _647;
    float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
    float _1916 = _1915 * _1909;
    float _1917 = _1915 * _1910;
    float _1918 = _1915 * _1911;
    float _1919 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1786].xyz));
    float _3746 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _1923 = dot(vec3(_618, _619, _620), vec3(_1916, _1917, _1918));
    float _3757 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _1927 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1916, _1917, _1918));
    float _3768 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = _1908 * _1908;
    float _1935 = ((_1926 * _1926) * (_1931 + (-1.0))) + 1.0;
    float _1944 = (exp2(log2(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1945 = 1.0 - _1908;
    float _1955 = (0.5 / (((_1847 * ((_1922 * _1945) + _1908)) + 9.9999999392252902907785028219223e-09) + (((_1847 * _1945) + _1908) * _1922))) * _1922;
    float _3779 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1957 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1931 / ((_1935 * _1935) * 3.141590118408203125));
    float _1967 = (((_1944 * cbLight._m0[_1896].x) * _1957) * _1772) + (((_1871 * cbLight._m0[_1818].x) * _1885) * _1782);
    float _1968 = (((_1944 * cbLight._m0[_1896].y) * _1957) * _1772) + (((_1871 * cbLight._m0[_1818].y) * _1885) * _1782);
    float _1969 = (((_1944 * cbLight._m0[_1896].z) * _1957) * _1772) + (((_1871 * cbLight._m0[_1818].z) * _1885) * _1782);
    float _2084;
    float _2086;
    float _2088;
    float _2090;
    float _2092;
    float _2094;
    if (_1753.y == 0u)
    {
        float _2024 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2025 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2024;
        float _2026 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2024;
        float _2027 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2024;
        uvec4 _2039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2040 = _2039.x;
        uint _2051 = uint((float(_2039.y) * floor(float(uint(cbSceneParam._m0[85u].y * _654) / _2040))) + floor(float(uint(cbSceneParam._m0[85u].x * _653) / _2040)));
        float _2061 = (log2(_2027 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2062 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        uint _2065 = uint(isnan(14.0) ? _2062 : (isnan(_2062) ? 14.0 : min(_2062, 14.0)));
        uvec4 _2070 = texelFetch(g_lightClusterGridBuffer, int(((_2065 << 2u) + (_2051 << 6u)) >> 2u));
        uint _2071 = _2070.x;
        uint _2072 = _2039.z;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        float _2170;
        float _2172;
        if (((((1u << ((_2072 >> 4u) & 15u)) + 4294967295u) & _2071) == 0u) || ((_2072 & 240u) == 0u))
        {
            _2162 = 0.0;
            _2164 = 0.0;
            _2166 = 0.0;
            _2168 = 0.0;
            _2170 = 0.0;
            _2172 = 0.0;
        }
        else
        {
            float _2163;
            float _2165;
            float _2167;
            float _2169;
            float _2171;
            float _2173;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            float _2341 = 0.0;
            float _2342 = 0.0;
            float _2343 = 0.0;
            uint _2344 = 0u;
            uint _2353;
            bool _2354;
            for (;;)
            {
                _2353 = texelFetch(g_lightClassification, int((((_2065 << 5u) + (_2051 << 9u)) + (_2344 << 2u)) >> 2u)).x;
                _2354 = _2353 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2354)
                {
                    frontier_phi_74_pred = _2341;
                    frontier_phi_74_pred_1 = _2340;
                    frontier_phi_74_pred_2 = _2339;
                    frontier_phi_74_pred_3 = _2338;
                    frontier_phi_74_pred_4 = _2342;
                    frontier_phi_74_pred_5 = _2343;
                }
                else
                {
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    uint _2519;
                    _2513 = _2338;
                    _2514 = _2339;
                    _2515 = _2340;
                    _2516 = _2341;
                    _2517 = _2342;
                    _2518 = _2343;
                    _2519 = _2353;
                    float _2419;
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    for (;;)
                    {
                        uint _2523 = uint(findLSB(_2519)) + (_2344 << 5u);
                        uint _2520 = (_2519 + 4294967295u) & _2519;
                        uint _2525 = _2523 * 48u;
                        vec4 _2539 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2525)).x, texelFetch(g_PointLightRenderingBuffer, int(_2525 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2525 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2525 + 3u)).x));
                        uint _2545 = (_2523 * 48u) + 4u;
                        vec4 _2558 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2545)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 3u)).x));
                        uint _2564 = (_2523 * 48u) + 8u;
                        vec3 _2575 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2564)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 2u)).x));
                        float _2579 = _2539.x - _2025;
                        float _2580 = _2539.y - _2026;
                        float _2581 = _2539.z - _2027;
                        float _2582 = dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581));
                        float _2585 = inversesqrt(_2582);
                        float _2586 = _2585 * _2579;
                        float _2587 = _2585 * _2580;
                        float _2588 = _2585 * _2581;
                        float _2589 = dot(vec3(_675, _678, _681), vec3(_2586, _2587, _2588));
                        float _2594 = 1.0 - (_2582 * _2539.w);
                        float _3800 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
                        float _2595 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
                        float _2596 = sqrt(_2582) * _2558.w;
                        float _2599 = 1.39999997615814208984375 / (_2596 + 1.39999997615814208984375);
                        float _2600 = _2599 * _2599;
                        float _2603 = ((1.0 - _2600) * _2589) + _2600;
                        float _2606 = _2596 * _2596;
                        float _2610 = ((isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0))) * _2595) / ((_2606 * 0.699999988079071044921875) + 1.0);
                        float _2614 = (-0.0) - _2025;
                        float _2615 = (-0.0) - _2026;
                        float _2616 = (-0.0) - _2027;
                        float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
                        float _2621 = _2620 * _2614;
                        float _2622 = _2620 * _2615;
                        float _2623 = _2620 * _2616;
                        float _2631 = exp2(log2(1.0 / ((_2606 * 3.5) + 5.0)) * 0.25);
                        float _2632 = 1.0 - _736;
                        float _2639 = sqrt(1.0 - ((1.0 - (_2632 * _2632)) * (1.0 - (_2631 * _2631))));
                        float _2640 = _2639 * _2639;
                        float _2641 = _2640 * _2640;
                        float _2642 = _2621 + _2586;
                        float _2643 = _2622 + _2587;
                        float _2644 = _2623 + _2588;
                        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
                        float _2652 = dot(vec3(_675, _678, _681), vec3(_2621, _2622, _2623));
                        float _3816 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                        float _2655 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                        float _2656 = dot(vec3(_675, _678, _681), vec3(_2648 * _2642, _2648 * _2643, _2648 * _2644));
                        float _3827 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
                        float _2659 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
                        float _2663 = ((_2659 * _2659) * (_2641 + (-1.0))) + 1.0;
                        float _2664 = _2599 * _2640;
                        float _2665 = _2664 * _2664;
                        float _2668 = ((1.0 - _2665) * _2589) + _2665;
                        float _3838 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                        float _2669 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
                        float _2670 = 1.0 - _2640;
                        float _2680 = (0.5 / (((_2669 * ((_2655 * _2670) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _2670) + _2640) * _2655))) * _2669;
                        float _3849 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2691 = (((_2641 * 3.1415927410125732421875) * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) / ((_2663 * _2663) * ((_2606 * 2.1991131305694580078125) + 3.141590118408203125))) * _2595;
                        _2422 = (_2610 * _2558.x) + _2516;
                        _2423 = (_2610 * _2558.y) + _2517;
                        _2424 = (_2610 * _2558.z) + _2518;
                        _2419 = (_2691 * _2575.x) + _2513;
                        _2420 = (_2691 * _2575.y) + _2514;
                        _2421 = (_2691 * _2575.z) + _2515;
                        if (_2520 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2513 = _2419;
                            _2514 = _2420;
                            _2515 = _2421;
                            _2516 = _2422;
                            _2517 = _2423;
                            _2518 = _2424;
                            _2519 = _2520;
                        }
                    }
                    frontier_phi_74_pred = _2422;
                    frontier_phi_74_pred_1 = _2421;
                    frontier_phi_74_pred_2 = _2420;
                    frontier_phi_74_pred_3 = _2419;
                    frontier_phi_74_pred_4 = _2423;
                    frontier_phi_74_pred_5 = _2424;
                }
                _2169 = frontier_phi_74_pred;
                _2167 = frontier_phi_74_pred_1;
                _2165 = frontier_phi_74_pred_2;
                _2163 = frontier_phi_74_pred_3;
                _2171 = frontier_phi_74_pred_4;
                _2173 = frontier_phi_74_pred_5;
                uint _2345 = _2344 + 1u;
                if (_2345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2338 = _2163;
                    _2339 = _2165;
                    _2340 = _2167;
                    _2341 = _2169;
                    _2342 = _2171;
                    _2343 = _2173;
                    _2344 = _2345;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2162 = _2163;
            _2164 = _2165;
            _2166 = _2167;
            _2168 = _2169;
            _2170 = _2171;
            _2172 = _2173;
        }
        uvec4 _2176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2177 = _2176.z;
        uint _2179 = (_2177 >> 8u) & 15u;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        if (((4294967295u << _2179) & _2071) == 0u)
        {
            _2306 = _2162;
            _2308 = _2164;
            _2310 = _2166;
            _2312 = _2168;
            _2314 = _2170;
            _2316 = _2172;
        }
        else
        {
            float _2331 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
            float _2332 = _2331 * _2025;
            float _2333 = _2331 * _2026;
            float _2334 = _2331 * _2027;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2179 < ((_2177 >> 12u) & 15u))
            {
                float _2307;
                float _2309;
                float _2311;
                float _2313;
                float _2315;
                float _2317;
                float _2496 = _2162;
                float _2497 = _2164;
                float _2498 = _2166;
                float _2499 = _2168;
                float _2500 = _2170;
                float _2501 = _2172;
                uint _2502 = _2179;
                uint _2511;
                bool _2512;
                for (;;)
                {
                    _2511 = texelFetch(g_lightClassification, int((((_2065 << 5u) + (_2051 << 9u)) + (_2502 << 2u)) >> 2u)).x;
                    _2512 = _2511 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2512)
                    {
                        frontier_phi_83_pred = _2499;
                        frontier_phi_83_pred_1 = _2498;
                        frontier_phi_83_pred_2 = _2497;
                        frontier_phi_83_pred_3 = _2496;
                        frontier_phi_83_pred_4 = _2501;
                        frontier_phi_83_pred_5 = _2500;
                    }
                    else
                    {
                        float _2717;
                        float _2718;
                        float _2719;
                        float _2720;
                        float _2721;
                        float _2722;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _2730 = _2496;
                        float _2731 = _2497;
                        float _2732 = _2498;
                        float _2733 = _2499;
                        float _2734 = _2500;
                        float _2735 = _2501;
                        uint _2736 = _2511;
                        uint _2737;
                        vec4 _2762;
                        float _2763;
                        vec4 _2778;
                        vec3 _2790;
                        vec4 _2805;
                        vec4 _2820;
                        float _2866;
                        bool _2867;
                        for (;;)
                        {
                            uint _2747 = ((_2502 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2736));
                            _2737 = (_2736 + 4294967295u) & _2736;
                            uint _2749 = _2747 * 40u;
                            _2762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 3u)).x));
                            _2763 = _2762.w;
                            uint _2765 = (_2747 * 40u) + 4u;
                            _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            uint _2780 = (_2747 * 40u) + 8u;
                            _2790 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x));
                            uint _2792 = (_2747 * 40u) + 16u;
                            _2805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 3u)).x));
                            uint _2807 = (_2747 * 40u) + 20u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2822 = (_2747 * 40u) + 24u;
                            vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2841 = (_2747 * 40u) + 28u;
                            vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            _2866 = fma(_2027, _2854.z, fma(_2026, _2854.y, _2854.x * _2025)) + _2854.w;
                            _2867 = !((fma(_2027, _2835.z, fma(_2026, _2835.y, _2835.x * _2025)) + _2835.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2867)
                            {
                                float _2894 = _2762.x - _2025;
                                float _2895 = _2762.y - _2026;
                                float _2896 = _2762.z - _2027;
                                float _2897 = dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896));
                                float _2900 = inversesqrt(_2897);
                                float _2901 = _2900 * _2894;
                                float _2902 = _2900 * _2895;
                                float _2903 = _2900 * _2896;
                                float _2907 = 1.0 - (_2897 / (_2763 * _2763));
                                float _3860 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                                float _2908 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
                                float _2912 = sqrt(_2897) * _2778.w;
                                float _2914 = 1.39999997615814208984375 / (_2912 + 1.39999997615814208984375);
                                float _2915 = _2914 * _2914;
                                float _2918 = ((1.0 - _2915) * dot(vec3(_2901, _2902, _2903), vec3(_675, _678, _681))) + _2915;
                                float _2921 = _2912 * _2912;
                                float _2925 = (fma(_2027, _2805.z, fma(_2026, _2805.y, _2805.x * _2025)) + _2805.w) / _2866;
                                float _2926 = (fma(_2027, _2820.z, fma(_2026, _2820.y, _2820.x * _2025)) + _2820.w) / _2866;
                                float _2930 = 1.0 - dot(vec2(_2925, _2926), vec2(_2925, _2926));
                                float _3876 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                                float _2931 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                                float _2932 = _2931 * (((isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))) * _2908) / ((_2921 * 0.699999988079071044921875) + 1.0));
                                float _2944 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                                float _2945 = 1.0 - _736;
                                float _2952 = sqrt(1.0 - ((1.0 - (_2945 * _2945)) * (1.0 - (_2944 * _2944))));
                                float _2953 = _2952 * _2952;
                                float _2954 = _2953 * _2953;
                                float _2955 = _2901 - _2332;
                                float _2956 = _2902 - _2333;
                                float _2957 = _2903 - _2334;
                                float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                                float _2965 = dot(vec3(_675, _678, _681), vec3((-0.0) - _2332, (-0.0) - _2333, (-0.0) - _2334));
                                float _3887 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2968 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                                float _2969 = dot(vec3(_675, _678, _681), vec3(_2961 * _2955, _2961 * _2956, _2961 * _2957));
                                float _3898 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2972 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                                float _2976 = ((_2972 * _2972) * (_2954 + (-1.0))) + 1.0;
                                float _2977 = _2914 * _2953;
                                float _2978 = _2977 * _2977;
                                float _2984 = ((1.0 - _2978) * dot(vec3(_675, _678, _681), vec3(_2901, _2902, _2903))) + _2978;
                                float _3909 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2985 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                                float _2986 = 1.0 - _2953;
                                float _2996 = (0.5 / (((_2985 * ((_2968 * _2986) + _2953)) + 9.9999999392252902907785028219223e-09) + (((_2985 * _2986) + _2953) * _2968))) * _2985;
                                float _3920 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _3006 = (_2931 * _2908) * (((_2954 * 3.1415927410125732421875) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) / ((_2976 * _2976) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2932 * _2778.x;
                                frontier_phi_89_pred_1 = _3006 * _2790.z;
                                frontier_phi_89_pred_2 = _3006 * _2790.y;
                                frontier_phi_89_pred_3 = _3006 * _2790.x;
                                frontier_phi_89_pred_4 = _2932 * _2778.z;
                                frontier_phi_89_pred_5 = _2932 * _2778.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3013 = frontier_phi_89_pred;
                            _3012 = frontier_phi_89_pred_1;
                            _3011 = frontier_phi_89_pred_2;
                            _3010 = frontier_phi_89_pred_3;
                            _3015 = frontier_phi_89_pred_4;
                            _3014 = frontier_phi_89_pred_5;
                            _2720 = _3013 + _2733;
                            _2721 = _3014 + _2734;
                            _2722 = _3015 + _2735;
                            _2717 = _3010 + _2730;
                            _2718 = _3011 + _2731;
                            _2719 = _3012 + _2732;
                            if (_2737 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2721;
                                _2735 = _2722;
                                _2736 = _2737;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2720;
                        frontier_phi_83_pred_1 = _2719;
                        frontier_phi_83_pred_2 = _2718;
                        frontier_phi_83_pred_3 = _2717;
                        frontier_phi_83_pred_4 = _2722;
                        frontier_phi_83_pred_5 = _2721;
                    }
                    _2313 = frontier_phi_83_pred;
                    _2311 = frontier_phi_83_pred_1;
                    _2309 = frontier_phi_83_pred_2;
                    _2307 = frontier_phi_83_pred_3;
                    _2317 = frontier_phi_83_pred_4;
                    _2315 = frontier_phi_83_pred_5;
                    uint _2503 = _2502 + 1u;
                    if (_2503 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2496 = _2307;
                        _2497 = _2309;
                        _2498 = _2311;
                        _2499 = _2313;
                        _2500 = _2315;
                        _2501 = _2317;
                        _2502 = _2503;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2317;
                frontier_phi_65_66_ladder_1 = _2315;
                frontier_phi_65_66_ladder_2 = _2311;
                frontier_phi_65_66_ladder_3 = _2309;
                frontier_phi_65_66_ladder_4 = _2313;
                frontier_phi_65_66_ladder_5 = _2307;
            }
            else
            {
                frontier_phi_65_66_ladder = _2172;
                frontier_phi_65_66_ladder_1 = _2170;
                frontier_phi_65_66_ladder_2 = _2166;
                frontier_phi_65_66_ladder_3 = _2164;
                frontier_phi_65_66_ladder_4 = _2168;
                frontier_phi_65_66_ladder_5 = _2162;
            }
            _2306 = frontier_phi_65_66_ladder_5;
            _2308 = frontier_phi_65_66_ladder_3;
            _2310 = frontier_phi_65_66_ladder_2;
            _2312 = frontier_phi_65_66_ladder_4;
            _2314 = frontier_phi_65_66_ladder_1;
            _2316 = frontier_phi_65_66_ladder;
        }
        float _2321 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
        _2084 = (_2321 * _2312) + _1814;
        _2086 = (_2321 * _2314) + _1815;
        _2088 = (_2321 * _2316) + _1816;
        _2090 = ((_2306 * 0.039999999105930328369140625) * _2321) + _1967;
        _2092 = ((_2308 * 0.039999999105930328369140625) * _2321) + _1968;
        _2094 = ((_2310 * 0.039999999105930328369140625) * _2321) + _1969;
    }
    else
    {
        _2084 = _1814;
        _2086 = _1815;
        _2088 = _1816;
        _2090 = _1967;
        _2092 = _1968;
        _2094 = _1969;
    }
    float _3936 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _3947 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _3958 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2111 = ((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_2084 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _720))) + ((_2090 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1526)) * cbPerFrame._m0[3u].x);
    float _2112 = ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_2086 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _720))) + ((_2092 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1526)) * cbPerFrame._m0[3u].x);
    float _2113 = ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_2088 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _720))) + ((_2094 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1526)) * cbPerFrame._m0[3u].x);
    uint _2117 = _694 + 6u;
    float _2125 = _653 / cbSceneParam._m0[86u].x;
    float _2126 = _654 / cbSceneParam._m0[86u].y;
    vec4 _2140 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2125, _2126, (log2((isnan(cbSceneParam._m0[77u].w) ? _640 : (isnan(_640) ? cbSceneParam._m0[77u].w : min(_640, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2142 = _2140.x;
    float _2143 = _2140.y;
    float _2144 = _2140.z;
    float _2145 = _2140.w;
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    if (_640 > cbSceneParam._m0[78u].w)
    {
        float _2187 = isnan(_640) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _640 : min(cbSceneParam._m0[80u].w, _640));
        float _2188 = _2187 / _640;
        float _2199 = _2188 * _257;
        float _2200 = _258 * _2188;
        float _2201 = (-0.0) - _2200;
        float _2202 = _2188 * _259;
        float _2204 = (cbSceneParam._m0[77u].w * _2201) / _2187;
        float _2205 = _2204 + cbSceneParam._m0[79u].w;
        float _2206 = cbSceneParam._m0[79u].w - _2200;
        float _2212 = sqrt(((_2199 * _2199) + (_2200 * _2200)) + (_2202 * _2202));
        float _2215 = (1.0 - (cbSceneParam._m0[77u].w / _2187)) * _2212;
        float _2221 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2223 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2432;
        if (abs((_2201 - _2204) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2432 = ((((_2205 > 0.0) ? exp2(_2221 * _2205) : (2.0 - exp2(_2223 * _2205))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2215;
        }
        else
        {
            float _2367 = 1.0 / cbSceneParam._m0[80u].x;
            float _2368 = isnan(_2206) ? _2205 : (isnan(_2205) ? _2206 : max(_2205, _2206));
            float _2369 = isnan(_2206) ? _2205 : (isnan(_2205) ? _2206 : min(_2205, _2206));
            float _2378 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : min(_2368, 0.0));
            float _2379 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : min(_2369, 0.0));
            _2432 = ((abs(_2212 / _2201) * cbSceneParam._m0[80u].y) * ((((_2378 - _2379) * 2.0) - ((exp2(_2221 * (isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0)))) - exp2(_2221 * (isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0))))) * _2367)) - ((exp2(_2223 * _2378) - exp2(_2223 * _2379)) * _2367))) + (_2215 * cbSceneParam._m0[80u].z);
        }
        vec4 _2434 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2125, _2126, 1.0), 0.0);
        float _2443 = exp2((_2432 * (-1.44269502162933349609375)) * (1.0 - _2434.w));
        float _2444 = log2(_2443);
        float _2460 = log2(_2145);
        _2225 = (exp2(_2460 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2444 * cbSceneParam._m0[78u].x)) * _2434.x) / cbSceneParam._m0[78u].x)) + _2142;
        _2227 = (exp2(_2460 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2444 * cbSceneParam._m0[78u].y)) * _2434.y) / cbSceneParam._m0[78u].y)) + _2143;
        _2229 = (exp2(_2460 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2444 * cbSceneParam._m0[78u].z)) * _2434.z) / cbSceneParam._m0[78u].z)) + _2144;
        _2231 = _2443 * _2145;
    }
    else
    {
        _2225 = _2142;
        _2227 = _2143;
        _2229 = _2144;
        _2231 = _2145;
    }
    float _2243 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2244 = _2243 == 3.0;
    float _2245 = log2(_2231);
    float _2252 = exp2(_2245 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0)));
    float _2253 = exp2(_2245 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0)));
    float _2254 = exp2(_2245 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0)));
    float _2263 = (_2243 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2263 * (_2244 ? _2252 : (_2252 + (cbSceneParam._m0[72u].w * _2225)));
    SV_Target.y = _2263 * (_2244 ? _2253 : (_2253 + (cbSceneParam._m0[72u].w * _2227)));
    SV_Target.z = _2263 * (_2244 ? _2254 : (_2254 + (cbSceneParam._m0[72u].w * _2229)));
    SV_Target.w = cbInstanceData._m0[_2117].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2117].w;
}


