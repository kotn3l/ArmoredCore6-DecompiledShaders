#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1135;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _391 = (_387 * _381) + (_355 * cbMtdParam._m0[20u].y);
    float _392 = (_387 * _382) + (_356 * cbMtdParam._m0[20u].z);
    float _393 = _391 * cbMtdParam._m0[19u].x;
    float _394 = _392 * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    bool _412 = _390 > 0.0;
    float _414 = _412 ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _421 = _395 + (-0.5);
    float _424 = _396 + (-0.5);
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_421 + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_424 + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _468 = (_454 - (_454 * _288)) * cbMtdParam._m0[9u].x;
    float _469 = (_455 - (_455 * _288)) * cbMtdParam._m0[9u].y;
    float _470 = cbMtdParam._m0[9u].z * (_456 - (_456 * _288));
    float _488 = _391 * cbMtdParam._m0[21u].x;
    float _489 = _392 * cbMtdParam._m0[20u].w;
    bool _490 = _488 > 0.0;
    float _495;
    if (_490)
    {
        _495 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _495 = frontier_phi_11_10_ladder;
    }
    bool _497 = _489 > 0.0;
    float _502;
    if (_497)
    {
        _502 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _502 = frontier_phi_15_14_ladder;
    }
    float _505 = _412 ? (cbMtdParam._m0[16u].z / _390) : 5000.0;
    float _506 = isnan(_502) ? _495 : (isnan(_495) ? _502 : min(_495, _502));
    float _507 = isnan(_505) ? _506 : (isnan(_506) ? _505 : min(_506, _505));
    float _511 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _515 = ((_507 * _390) + _511) / _511;
    float _520 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _522 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _538 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_507 * _488)) / _515) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_507 * _489)) / _515) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _543 = _538.x * cbMtdParam._m0[10u].x;
    float _544 = _538.y * cbMtdParam._m0[10u].y;
    float _545 = _538.z * cbMtdParam._m0[10u].z;
    float _553;
    if (_490)
    {
        _553 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _553 = frontier_phi_19_18_ladder;
    }
    float _559;
    if (_497)
    {
        _559 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _559 = frontier_phi_23_22_ladder;
    }
    float _561 = isnan(_559) ? _553 : (isnan(_553) ? _559 : min(_553, _559));
    float _562 = isnan(_505) ? _561 : (isnan(_561) ? _505 : min(_561, _505));
    float _569 = ((_562 * _390) + _511) / _511;
    vec4 _583 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_562 * _488)) / _569) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_562 * _489)) / _569) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _585 = _583.w;
    float _587 = _585 - (_585 * _288);
    float _598 = 0.5 - (_288 * 0.5);
    float _608 = (((_468 - _301) + (_587 * ((_543 - _468) - (_543 * _288)))) * _598) + _301;
    float _609 = (((_469 - _303) + (_587 * ((_544 - _469) - (_544 * _288)))) * _598) + _303;
    float _610 = (((_470 - _305) + (_587 * ((_545 - _470) - (_545 * _288)))) * _598) + _305;
    vec4 _622 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _626 = _622.z;
    float _629 = (_622.x * 2.0) + (-1.0);
    float _630 = (_622.y * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3270 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _636 = sqrt(1.0 - (isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))));
    float _637 = _626 * _288;
    float _644 = (cbMtdParam._m0[15u].w * ((_327 - _637) + ((_626 - _327) * _288))) + _637;
    float _648 = (cbMtdParam._m0[16u].x * _355) + _629;
    float _649 = (cbMtdParam._m0[16u].x * _356) + _630;
    float _652 = fma(_636, _197, fma(_649, _204, _648 * _190));
    float _655 = fma(_636, _198, fma(_649, _205, _648 * _191));
    float _658 = fma(_636, _199, fma(_649, _206, _648 * _192));
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    float _663 = _662 * _652;
    float _664 = _662 * _655;
    float _665 = _662 * _658;
    float _3281 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _666 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    float _3292 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3303 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3314 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _685 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _689 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _690 = _261 * _689;
    float _691 = _262 * _689;
    float _692 = _263 * _689;
    float _698 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _699 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_665, cbSceneParam._m0[5u].z, fma(_664, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _663));
    float _722 = fma(_665, cbSceneParam._m0[6u].z, fma(_664, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _663));
    float _725 = fma(_665, cbSceneParam._m0[7u].z, fma(_664, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _663));
    uint _738 = uint(roundEven(NORMAL.w)) * 13u;
    uint _741 = (_738 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3325 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _3336 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _3347 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    vec4 _761 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _698, cbSceneParam._m0[86u].y * _699));
    float _764 = _761.x * TEXCOORD.z;
    float _765 = dot(vec3(_663, _664, _665), vec3(_690, _691, _692));
    float _768 = _765 * 2.0;
    float _772 = (_768 * _663) - _690;
    float _773 = (_768 * _664) - _691;
    float _774 = (_768 * _665) - _692;
    float _778 = abs(dot(vec3(_690, _691, _692), vec3(_663, _664, _665)));
    float _3358 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _780 = sqrt(_666);
    float _793 = exp2((_780 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_780 * 3.0));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1134;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _861 = fma(_833, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825));
        float _865 = fma(_833, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825));
        float _869 = fma(_833, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825));
        float _892 = _825 + _663;
        float _893 = _829 + _664;
        float _894 = _833 + _665;
        float _904 = fma(_894, cbModelParam._m0[26u].z, fma(_893, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _892)) - _861;
        float _905 = fma(_894, cbModelParam._m0[27u].z, fma(_893, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _892)) - _865;
        float _906 = fma(_894, cbModelParam._m0[28u].z, fma(_893, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _892)) - _869;
        float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
        float _923 = ((_910 * _904) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_861 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_910 * _905) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_865 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_910 * _906) / cbModelParam._m0[34u].z) + ((((((_869 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        float _962 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_928.x + (-0.5));
        float _964 = _962 * (_928.y + (-0.5));
        float _965 = _962 * (_928.z + (-0.5));
        float _972 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_935.x + (-0.5));
        float _974 = _972 * (_935.y + (-0.5));
        float _975 = _972 * (_935.z + (-0.5));
        float _982 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_942.x + (-0.5));
        float _984 = _982 * (_942.y + (-0.5));
        float _985 = _982 * (_942.z + (-0.5));
        float _992 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_949.x + (-0.5));
        float _994 = _992 * (_949.y + (-0.5));
        float _995 = _992 * (_949.z + (-0.5));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = _963 * 0.5;
        float _1000 = _973 * 0.5;
        float _1001 = _983 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1016 = (dot(vec3(_663, _664, _665), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1026 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3406 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_1028 + 1.0))) + _1033) * _996;
        float _1043 = _964 * 0.5;
        float _1044 = _974 * 0.5;
        float _1045 = _984 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_663, _664, _665), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3417 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3428 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3439 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * (_1070 + 1.0))) + _1075) * _997;
        float _1085 = _965 * 0.5;
        float _1086 = _975 * 0.5;
        float _1087 = _985 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_663, _664, _665), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3472 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_1112 + 1.0))) + _1117) * _998;
        _1134 = _965;
        _1136 = _964;
        _1137 = _963;
        _1138 = _975;
        _1139 = _974;
        _1140 = _973;
        _1141 = _985;
        _1142 = _984;
        _1143 = _983;
        _1144 = _998;
        _1145 = _997;
        _1146 = _996;
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
    }
    else
    {
        _1134 = _1135;
        _1136 = _1135;
        _1137 = _1135;
        _1138 = _1135;
        _1139 = _1135;
        _1140 = _1135;
        _1141 = _1135;
        _1142 = _1135;
        _1143 = _1135;
        _1144 = _1135;
        _1145 = _1135;
        _1146 = _1135;
        _1147 = 0.0;
        _1148 = 0.0;
        _1149 = 0.0;
    }
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1175 = fma(_833, cbModelParam._m0[30u].z, fma(_829, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825));
        float _1179 = fma(_833, cbModelParam._m0[31u].z, fma(_829, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825));
        float _1183 = fma(_833, cbModelParam._m0[32u].z, fma(_829, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825));
        float _1206 = _825 + _663;
        float _1207 = _829 + _664;
        float _1208 = _833 + _665;
        float _1218 = fma(_1208, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1206)) - _1175;
        float _1219 = fma(_1208, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1206)) - _1179;
        float _1220 = fma(_1208, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1206)) - _1183;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1175 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1179 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[35u].z) + ((((((_1183 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1274 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1241.x + (-0.5));
        float _1276 = _1274 * (_1241.y + (-0.5));
        float _1277 = _1274 * (_1241.z + (-0.5));
        float _1284 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1248.x + (-0.5));
        float _1286 = _1284 * (_1248.y + (-0.5));
        float _1287 = _1284 * (_1248.z + (-0.5));
        float _1294 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1255.x + (-0.5));
        float _1296 = _1294 * (_1255.y + (-0.5));
        float _1297 = _1294 * (_1255.z + (-0.5));
        float _1304 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1262.x + (-0.5));
        float _1306 = _1304 * (_1262.y + (-0.5));
        float _1307 = _1304 * (_1262.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_663, _664, _665), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3535 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1338 + 1.0))) + _1343) * _1308;
        float _1353 = _1276 * 0.5;
        float _1354 = _1286 * 0.5;
        float _1355 = _1296 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_663, _664, _665), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3568 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1380 + 1.0))) + _1385) * _1309;
        float _1395 = _1277 * 0.5;
        float _1396 = _1287 * 0.5;
        float _1397 = _1297 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_663, _664, _665), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3601 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1422 + 1.0))) + _1427) * _1310;
        _1444 = _1277;
        _1445 = _1276;
        _1446 = _1275;
        _1447 = _1287;
        _1448 = _1286;
        _1449 = _1285;
        _1450 = _1297;
        _1451 = _1296;
        _1452 = _1295;
        _1453 = _1310;
        _1454 = _1309;
        _1455 = _1308;
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1135;
        _1445 = _1135;
        _1446 = _1135;
        _1447 = _1135;
        _1448 = _1135;
        _1449 = _1135;
        _1450 = _1135;
        _1451 = _1135;
        _1452 = _1135;
        _1453 = _1135;
        _1454 = _1135;
        _1455 = _1135;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1147)) + _1147;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1148)) + _1148;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1149)) + _1149;
    float _1491 = fma(_1470, cbSceneParam._m0[89u].z, fma(_1469, cbSceneParam._m0[89u].y, _1468 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1470, cbSceneParam._m0[90u].z, fma(_1469, cbSceneParam._m0[90u].y, _1468 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1470, cbSceneParam._m0[91u].z, fma(_1469, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1468));
    float _1512 = _772 * 0.5;
    float _1513 = _773 * 0.5;
    float _1514 = _774 * 0.5;
    float _1515 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1518 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1521 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1555;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1528 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1134, _1138, _1141, _1144));
        float _1532 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1536 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1543 = dot(vec4(cbModelParam._m0[39u]), vec4(_1512, _1513, _1514, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1566;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1557 = dot(vec4(cbModelParam._m0[40u]), vec4(_1512, _1513, _1514, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1570 = (_1566 * cbModelParam._m0[1u].x) + (_1555 * (1.0 - cbModelParam._m0[1u].x));
    float _1580 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _666);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1580 : min(cbModelParam._m0[25u].z, _1580));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1629 = fma(_833, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825)) + cbModelParam._m0[13u].w;
        float _1633 = fma(_833, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825)) + cbModelParam._m0[14u].w;
        float _1637 = fma(_833, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825)) + cbModelParam._m0[15u].w;
        float _1640 = fma(_774, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772));
        float _1643 = fma(_774, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772));
        float _1646 = fma(_774, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772));
        float _1674;
        if (_1640 > 0.0)
        {
            _1674 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1674 = frontier_phi_38_36_ladder;
        }
        float _2043;
        if (_1643 > 0.0)
        {
            _2043 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2043 = frontier_phi_47_43_ladder;
        }
        float _2343;
        if (_1646 > 0.0)
        {
            _2343 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2343 = frontier_phi_61_54_ladder;
        }
        float _2345 = isnan(_2043) ? _1674 : (isnan(_1674) ? _2043 : min(_1674, _2043));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1640) + _1629;
        float _2351 = (_2346 * _1643) + _1633;
        float _2352 = (_2346 * _1646) + _1637;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2353;
        float _2356 = _2353 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2352 > _2356) || ((_2352 < _2354) || ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 < _2354) || (_2350 > _2356))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1581);
            frontier_phi_37_61_ladder = _2478.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2478.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2478.x * cbModelParam._m0[1u].y;
        }
        _1662 = frontier_phi_37_61_ladder_2;
        _1664 = frontier_phi_37_61_ladder_1;
        _1666 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_772, _773, _774), _1581);
        _1662 = _1650.x * cbModelParam._m0[1u].y;
        _1664 = _1650.y * cbModelParam._m0[1u].y;
        _1666 = _1650.z * cbModelParam._m0[1u].y;
    }
    float _1670 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _666);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1670 : min(cbModelParam._m0[25u].w, _1670));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1723 = fma(_833, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825)) + cbModelParam._m0[21u].w;
        float _1727 = fma(_833, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825)) + cbModelParam._m0[22u].w;
        float _1731 = fma(_833, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825)) + cbModelParam._m0[23u].w;
        float _1734 = fma(_774, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772));
        float _1737 = fma(_774, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772));
        float _1740 = fma(_774, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772));
        float _2048;
        if (_1734 > 0.0)
        {
            _2048 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2048 = frontier_phi_49_45_ladder;
        }
        float _2369;
        if (_1737 > 0.0)
        {
            _2369 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2369 = frontier_phi_63_56_ladder;
        }
        float _2538;
        if (_1740 > 0.0)
        {
            _2538 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2538 = frontier_phi_77_72_ladder;
        }
        float _2540 = isnan(_2369) ? _2048 : (isnan(_2048) ? _2369 : min(_2048, _2369));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1734) + _1723;
        float _2546 = (_2541 * _1737) + _1727;
        float _2547 = (_2541 * _1740) + _1731;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2547, cbModelParam._m0[17u].z, fma(_2546, cbModelParam._m0[17u].y, _2545 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2547, cbModelParam._m0[18u].z, fma(_2546, cbModelParam._m0[18u].y, _2545 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2547, cbModelParam._m0[19u].z, fma(_2546, cbModelParam._m0[19u].y, _2545 * cbModelParam._m0[19u].x))), _1671);
            frontier_phi_46_77_ladder = _2780.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2780.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2780.x * cbModelParam._m0[1u].z;
        }
        _1759 = frontier_phi_46_77_ladder_2;
        _1761 = frontier_phi_46_77_ladder_1;
        _1763 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_772, _773, _774), _1671);
        _1759 = _1743.x * cbModelParam._m0[1u].z;
        _1761 = _1743.y * cbModelParam._m0[1u].z;
        _1763 = _1743.z * cbModelParam._m0[1u].z;
    }
    float _1775 = ((((1.0 - _793) * ((_780 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_793 * _780)) * _764;
    float _1776 = _1775 * ((cbModelParam._m0[1u].w * (_1759 - _1662)) + _1662);
    float _1777 = _1775 * ((cbModelParam._m0[1u].w * (_1761 - _1664)) + _1664);
    float _1778 = _1775 * ((cbModelParam._m0[1u].w * (_1763 - _1666)) + _1666);
    float _1781 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1776 * cbSceneParam._m0[91u].x));
    vec4 _1795 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_698, _699));
    float _1797 = _1795.w;
    float _1809 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1797);
    float _1810 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1797);
    float _1811 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1797);
    uvec4 _1815 = floatBitsToUint(cbInstanceData._m0[_738 + 5u]);
    uint _1817 = _1815.x * 14u;
    uint _1818 = _1817 + 13u;
    float _1823 = _764 + (-1.0);
    float _1826 = (cbLight._m0[_1818].x * _1823) + 1.0;
    float _1827 = (cbLight._m0[_1818].y * _1823) + 1.0;
    uint _1828 = _1817 + 5u;
    float _1834 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
    uint _1838 = _1817 + 4u;
    float _1847 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1851 = _1817 | 1u;
    float _1862 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_663, _664, _665));
    float _1865 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_663, _664, _665));
    float _3737 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _3748 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1870 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * 0.3183098733425140380859375;
    float _1872 = (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * 0.3183098733425140380859375;
    float _1879 = ((cbLight._m0[_1828].x * _1834) * _1872) + (((cbLight._m0[_1838].x * _1809) * _1847) * _1870);
    float _1880 = ((_1834 * cbLight._m0[_1828].y) * _1872) + (((cbLight._m0[_1838].y * _1810) * _1847) * _1870);
    float _1881 = ((_1834 * cbLight._m0[_1828].z) * _1872) + (((cbLight._m0[_1838].z * _1811) * _1847) * _1870);
    uint _1883 = _1817 + 8u;
    float _1896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _666) * 0.949999988079071044921875);
    float _1897 = _1896 * _1896;
    float _1898 = cbLight._m0[_1817].x + _690;
    float _1899 = cbLight._m0[_1817].y + _691;
    float _1900 = cbLight._m0[_1817].z + _692;
    float _1904 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
    float _1905 = _1904 * _1898;
    float _1906 = _1904 * _1899;
    float _1907 = _1904 * _1900;
    float _1908 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_1817].xyz));
    float _3759 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _1912 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1913 = dot(vec3(_663, _664, _665), vec3(_1905, _1906, _1907));
    float _3781 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1917 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1905, _1906, _1907));
    float _3792 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1921 = _1897 * _1897;
    float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
    float _1936 = (exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1937 = 1.0 - _1897;
    float _1948 = (0.5 / (((_1912 * ((_1911 * _1937) + _1897)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _1937) + _1897) * _1911))) * _1911;
    float _3803 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1950 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
    uint _1964 = _1817 + 9u;
    float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1851].w)) * _666) * 0.949999988079071044921875);
    float _1976 = _1975 * _1975;
    float _1977 = cbLight._m0[_1851].x + _690;
    float _1978 = cbLight._m0[_1851].y + _691;
    float _1979 = cbLight._m0[_1851].z + _692;
    float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
    float _1984 = _1983 * _1977;
    float _1985 = _1983 * _1978;
    float _1986 = _1983 * _1979;
    float _1987 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_1851].xyz));
    float _3814 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1990 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1991 = dot(vec3(_663, _664, _665), vec3(_1984, _1985, _1986));
    float _3825 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _1995 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_1984, _1985, _1986));
    float _3836 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1999 = _1976 * _1976;
    float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
    float _2012 = (exp2(log2(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = 1.0 - _1976;
    float _2023 = (0.5 / (((_1912 * ((_1990 * _2013) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2013) + _1976) * _1990))) * _1990;
    float _3847 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2025 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
    float _2035 = (((_2012 * cbLight._m0[_1964].x) * _2025) * _1834) + ((((cbLight._m0[_1883].x * _1809) * _1936) * _1950) * _1847);
    float _2036 = (((_2012 * cbLight._m0[_1964].y) * _2025) * _1834) + ((((cbLight._m0[_1883].y * _1810) * _1936) * _1950) * _1847);
    float _2037 = (((_2012 * cbLight._m0[_1964].z) * _2025) * _1834) + ((((cbLight._m0[_1883].z * _1811) * _1936) * _1950) * _1847);
    float _2152;
    float _2154;
    float _2156;
    float _2158;
    float _2160;
    float _2162;
    if (_1815.y == 0u)
    {
        float _2092 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2093 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2092;
        float _2094 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2092;
        float _2095 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2092;
        uvec4 _2107 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2108 = _2107.x;
        uint _2119 = uint((float(_2107.y) * floor(float(uint(cbSceneParam._m0[85u].y * _699) / _2108))) + floor(float(uint(cbSceneParam._m0[85u].x * _698) / _2108)));
        float _2129 = (log2(_2095 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2130 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        uint _2133 = uint(isnan(14.0) ? _2130 : (isnan(_2130) ? 14.0 : min(_2130, 14.0)));
        uvec4 _2138 = texelFetch(g_lightClusterGridBuffer, int(((_2133 << 2u) + (_2119 << 6u)) >> 2u));
        uint _2139 = _2138.x;
        uint _2140 = _2107.z;
        float _2230;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        if (((((1u << ((_2140 >> 4u) & 15u)) + 4294967295u) & _2139) == 0u) || ((_2140 & 240u) == 0u))
        {
            _2230 = 0.0;
            _2232 = 0.0;
            _2234 = 0.0;
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
        }
        else
        {
            float _2231;
            float _2233;
            float _2235;
            float _2237;
            float _2239;
            float _2241;
            float _2406 = 0.0;
            float _2407 = 0.0;
            float _2408 = 0.0;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            uint _2412 = 0u;
            uint _2421;
            bool _2422;
            for (;;)
            {
                _2421 = texelFetch(g_lightClassification, int((((_2133 << 5u) + (_2119 << 9u)) + (_2412 << 2u)) >> 2u)).x;
                _2422 = _2421 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2422)
                {
                    frontier_phi_74_pred = _2409;
                    frontier_phi_74_pred_1 = _2408;
                    frontier_phi_74_pred_2 = _2407;
                    frontier_phi_74_pred_3 = _2406;
                    frontier_phi_74_pred_4 = _2410;
                    frontier_phi_74_pred_5 = _2411;
                }
                else
                {
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    uint _2587;
                    _2581 = _2406;
                    _2582 = _2407;
                    _2583 = _2408;
                    _2584 = _2409;
                    _2585 = _2410;
                    _2586 = _2411;
                    _2587 = _2421;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    float _2491;
                    float _2492;
                    for (;;)
                    {
                        uint _2591 = uint(findLSB(_2587)) + (_2412 << 5u);
                        uint _2588 = (_2587 + 4294967295u) & _2587;
                        uint _2593 = _2591 * 48u;
                        vec4 _2607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2613 = (_2591 * 48u) + 4u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 3u)).x));
                        uint _2632 = (_2591 * 48u) + 8u;
                        vec3 _2643 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x));
                        float _2647 = _2607.x - _2093;
                        float _2648 = _2607.y - _2094;
                        float _2649 = _2607.z - _2095;
                        float _2650 = dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649));
                        float _2653 = inversesqrt(_2650);
                        float _2654 = _2653 * _2647;
                        float _2655 = _2653 * _2648;
                        float _2656 = _2653 * _2649;
                        float _2657 = dot(vec3(_719, _722, _725), vec3(_2654, _2655, _2656));
                        float _2662 = 1.0 - (_2650 * _2607.w);
                        float _3868 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2663 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
                        float _2664 = sqrt(_2650) * _2626.w;
                        float _2667 = 1.39999997615814208984375 / (_2664 + 1.39999997615814208984375);
                        float _2668 = _2667 * _2667;
                        float _2671 = ((1.0 - _2668) * _2657) + _2668;
                        float _2674 = _2664 * _2664;
                        float _2678 = ((isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0))) * _2663) / ((_2674 * 0.699999988079071044921875) + 1.0);
                        float _2682 = (-0.0) - _2093;
                        float _2683 = (-0.0) - _2094;
                        float _2684 = (-0.0) - _2095;
                        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2699 = exp2(log2(1.0 / ((_2674 * 3.5) + 5.0)) * 0.25);
                        float _2700 = 1.0 - _780;
                        float _2707 = sqrt(1.0 - ((1.0 - (_2700 * _2700)) * (1.0 - (_2699 * _2699))));
                        float _2708 = _2707 * _2707;
                        float _2709 = _2708 * _2708;
                        float _2710 = _2689 + _2654;
                        float _2711 = _2690 + _2655;
                        float _2712 = _2691 + _2656;
                        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
                        float _2720 = dot(vec3(_719, _722, _725), vec3(_2689, _2690, _2691));
                        float _3884 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2723 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
                        float _2724 = dot(vec3(_719, _722, _725), vec3(_2716 * _2710, _2716 * _2711, _2716 * _2712));
                        float _3895 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2727 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                        float _2731 = ((_2727 * _2727) * (_2709 + (-1.0))) + 1.0;
                        float _2732 = _2667 * _2708;
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2657) + _2733;
                        float _3906 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                        float _2738 = 1.0 - _2708;
                        float _2748 = (0.5 / (((_2737 * ((_2723 * _2738) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2738) + _2708) * _2723))) * _2737;
                        float _3917 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2759 = (((_2709 * 3.1415927410125732421875) * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) / ((_2731 * _2731) * ((_2674 * 2.1991131305694580078125) + 3.141590118408203125))) * _2663;
                        _2490 = (_2678 * _2626.x) + _2584;
                        _2491 = (_2678 * _2626.y) + _2585;
                        _2492 = (_2678 * _2626.z) + _2586;
                        _2487 = (_2759 * _2643.x) + _2581;
                        _2488 = (_2759 * _2643.y) + _2582;
                        _2489 = (_2759 * _2643.z) + _2583;
                        if (_2588 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2581 = _2487;
                            _2582 = _2488;
                            _2583 = _2489;
                            _2584 = _2490;
                            _2585 = _2491;
                            _2586 = _2492;
                            _2587 = _2588;
                        }
                    }
                    frontier_phi_74_pred = _2490;
                    frontier_phi_74_pred_1 = _2489;
                    frontier_phi_74_pred_2 = _2488;
                    frontier_phi_74_pred_3 = _2487;
                    frontier_phi_74_pred_4 = _2491;
                    frontier_phi_74_pred_5 = _2492;
                }
                _2237 = frontier_phi_74_pred;
                _2235 = frontier_phi_74_pred_1;
                _2233 = frontier_phi_74_pred_2;
                _2231 = frontier_phi_74_pred_3;
                _2239 = frontier_phi_74_pred_4;
                _2241 = frontier_phi_74_pred_5;
                uint _2413 = _2412 + 1u;
                if (_2413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2406 = _2231;
                    _2407 = _2233;
                    _2408 = _2235;
                    _2409 = _2237;
                    _2410 = _2239;
                    _2411 = _2241;
                    _2412 = _2413;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2230 = _2231;
            _2232 = _2233;
            _2234 = _2235;
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
        }
        uvec4 _2244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2245 = _2244.z;
        uint _2247 = (_2245 >> 8u) & 15u;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((4294967295u << _2247) & _2139) == 0u)
        {
            _2374 = _2230;
            _2376 = _2232;
            _2378 = _2234;
            _2380 = _2236;
            _2382 = _2238;
            _2384 = _2240;
        }
        else
        {
            float _2399 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
            float _2400 = _2399 * _2093;
            float _2401 = _2399 * _2094;
            float _2402 = _2399 * _2095;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2247 < ((_2245 >> 12u) & 15u))
            {
                float _2375;
                float _2377;
                float _2379;
                float _2381;
                float _2383;
                float _2385;
                float _2564 = _2230;
                float _2565 = _2232;
                float _2566 = _2234;
                float _2567 = _2236;
                float _2568 = _2238;
                float _2569 = _2240;
                uint _2570 = _2247;
                uint _2579;
                bool _2580;
                for (;;)
                {
                    _2579 = texelFetch(g_lightClassification, int((((_2133 << 5u) + (_2119 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                    _2580 = _2579 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2580)
                    {
                        frontier_phi_83_pred = _2567;
                        frontier_phi_83_pred_1 = _2566;
                        frontier_phi_83_pred_2 = _2565;
                        frontier_phi_83_pred_3 = _2564;
                        frontier_phi_83_pred_4 = _2569;
                        frontier_phi_83_pred_5 = _2568;
                    }
                    else
                    {
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _2798 = _2564;
                        float _2799 = _2565;
                        float _2800 = _2566;
                        float _2801 = _2567;
                        float _2802 = _2568;
                        float _2803 = _2569;
                        uint _2804 = _2579;
                        uint _2805;
                        vec4 _2830;
                        float _2831;
                        vec4 _2846;
                        vec3 _2858;
                        vec4 _2873;
                        vec4 _2888;
                        float _2934;
                        bool _2935;
                        for (;;)
                        {
                            uint _2815 = ((_2570 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2804));
                            _2805 = (_2804 + 4294967295u) & _2804;
                            uint _2817 = _2815 * 40u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            _2831 = _2830.w;
                            uint _2833 = (_2815 * 40u) + 4u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2815 * 40u) + 8u;
                            _2858 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x));
                            uint _2860 = (_2815 * 40u) + 16u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2875 = (_2815 * 40u) + 20u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2890 = (_2815 * 40u) + 24u;
                            vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2909 = (_2815 * 40u) + 28u;
                            vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            _2934 = fma(_2095, _2922.z, fma(_2094, _2922.y, _2922.x * _2093)) + _2922.w;
                            _2935 = !((fma(_2095, _2903.z, fma(_2094, _2903.y, _2903.x * _2093)) + _2903.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2935)
                            {
                                float _2962 = _2830.x - _2093;
                                float _2963 = _2830.y - _2094;
                                float _2964 = _2830.z - _2095;
                                float _2965 = dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964));
                                float _2968 = inversesqrt(_2965);
                                float _2969 = _2968 * _2962;
                                float _2970 = _2968 * _2963;
                                float _2971 = _2968 * _2964;
                                float _2975 = 1.0 - (_2965 / (_2831 * _2831));
                                float _3928 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2976 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                                float _2980 = sqrt(_2965) * _2846.w;
                                float _2982 = 1.39999997615814208984375 / (_2980 + 1.39999997615814208984375);
                                float _2983 = _2982 * _2982;
                                float _2986 = ((1.0 - _2983) * dot(vec3(_2969, _2970, _2971), vec3(_719, _722, _725))) + _2983;
                                float _2989 = _2980 * _2980;
                                float _2993 = (fma(_2095, _2873.z, fma(_2094, _2873.y, _2873.x * _2093)) + _2873.w) / _2934;
                                float _2994 = (fma(_2095, _2888.z, fma(_2094, _2888.y, _2888.x * _2093)) + _2888.w) / _2934;
                                float _2998 = 1.0 - dot(vec2(_2993, _2994), vec2(_2993, _2994));
                                float _3944 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _2999 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
                                float _3000 = _2999 * (((isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))) * _2976) / ((_2989 * 0.699999988079071044921875) + 1.0));
                                float _3012 = exp2(log2(1.0 / ((_2989 * 3.5) + 5.0)) * 0.25);
                                float _3013 = 1.0 - _780;
                                float _3020 = sqrt(1.0 - ((1.0 - (_3013 * _3013)) * (1.0 - (_3012 * _3012))));
                                float _3021 = _3020 * _3020;
                                float _3022 = _3021 * _3021;
                                float _3023 = _2969 - _2400;
                                float _3024 = _2970 - _2401;
                                float _3025 = _2971 - _2402;
                                float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                                float _3033 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2400, (-0.0) - _2401, (-0.0) - _2402));
                                float _3955 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3036 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                                float _3037 = dot(vec3(_719, _722, _725), vec3(_3029 * _3023, _3029 * _3024, _3029 * _3025));
                                float _3966 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3040 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                                float _3044 = ((_3040 * _3040) * (_3022 + (-1.0))) + 1.0;
                                float _3045 = _2982 * _3021;
                                float _3046 = _3045 * _3045;
                                float _3052 = ((1.0 - _3046) * dot(vec3(_719, _722, _725), vec3(_2969, _2970, _2971))) + _3046;
                                float _3977 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                                float _3054 = 1.0 - _3021;
                                float _3064 = (0.5 / (((_3053 * ((_3036 * _3054) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_3053 * _3054) + _3021) * _3036))) * _3053;
                                float _3988 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3074 = (_2999 * _2976) * (((_3022 * 3.1415927410125732421875) * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) / ((_3044 * _3044) * ((_2989 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3000 * _2846.x;
                                frontier_phi_89_pred_1 = _3074 * _2858.z;
                                frontier_phi_89_pred_2 = _3074 * _2858.y;
                                frontier_phi_89_pred_3 = _3074 * _2858.x;
                                frontier_phi_89_pred_4 = _3000 * _2846.z;
                                frontier_phi_89_pred_5 = _3000 * _2846.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3081 = frontier_phi_89_pred;
                            _3080 = frontier_phi_89_pred_1;
                            _3079 = frontier_phi_89_pred_2;
                            _3078 = frontier_phi_89_pred_3;
                            _3083 = frontier_phi_89_pred_4;
                            _3082 = frontier_phi_89_pred_5;
                            _2788 = _3081 + _2801;
                            _2789 = _3082 + _2802;
                            _2790 = _3083 + _2803;
                            _2785 = _3078 + _2798;
                            _2786 = _3079 + _2799;
                            _2787 = _3080 + _2800;
                            if (_2805 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2805;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2788;
                        frontier_phi_83_pred_1 = _2787;
                        frontier_phi_83_pred_2 = _2786;
                        frontier_phi_83_pred_3 = _2785;
                        frontier_phi_83_pred_4 = _2790;
                        frontier_phi_83_pred_5 = _2789;
                    }
                    _2381 = frontier_phi_83_pred;
                    _2379 = frontier_phi_83_pred_1;
                    _2377 = frontier_phi_83_pred_2;
                    _2375 = frontier_phi_83_pred_3;
                    _2385 = frontier_phi_83_pred_4;
                    _2383 = frontier_phi_83_pred_5;
                    uint _2571 = _2570 + 1u;
                    if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2564 = _2375;
                        _2565 = _2377;
                        _2566 = _2379;
                        _2567 = _2381;
                        _2568 = _2383;
                        _2569 = _2385;
                        _2570 = _2571;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2385;
                frontier_phi_65_66_ladder_1 = _2383;
                frontier_phi_65_66_ladder_2 = _2379;
                frontier_phi_65_66_ladder_3 = _2377;
                frontier_phi_65_66_ladder_4 = _2381;
                frontier_phi_65_66_ladder_5 = _2375;
            }
            else
            {
                frontier_phi_65_66_ladder = _2240;
                frontier_phi_65_66_ladder_1 = _2238;
                frontier_phi_65_66_ladder_2 = _2234;
                frontier_phi_65_66_ladder_3 = _2232;
                frontier_phi_65_66_ladder_4 = _2236;
                frontier_phi_65_66_ladder_5 = _2230;
            }
            _2374 = frontier_phi_65_66_ladder_5;
            _2376 = frontier_phi_65_66_ladder_3;
            _2378 = frontier_phi_65_66_ladder_2;
            _2380 = frontier_phi_65_66_ladder_4;
            _2382 = frontier_phi_65_66_ladder_1;
            _2384 = frontier_phi_65_66_ladder;
        }
        float _2389 = isnan(1.0) ? _764 : (isnan(_764) ? 1.0 : min(_764, 1.0));
        _2152 = (_2389 * _2380) + _1879;
        _2154 = (_2389 * _2382) + _1880;
        _2156 = (_2389 * _2384) + _1881;
        _2158 = ((_2374 * 0.039999999105930328369140625) * _2389) + _2035;
        _2160 = ((_2376 * 0.039999999105930328369140625) * _2389) + _2036;
        _2162 = ((_2378 * 0.039999999105930328369140625) * _2389) + _2037;
    }
    else
    {
        _2152 = _1879;
        _2154 = _1880;
        _2156 = _1881;
        _2158 = _2035;
        _2160 = _2036;
        _2162 = _2037;
    }
    float _4004 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4015 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4026 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _2179 = ((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_2152 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _764))) + ((_2158 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2180 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2154 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _764))) + ((_2160 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2181 = ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_2156 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _764))) + ((_2162 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    uint _2185 = _738 + 6u;
    float _2193 = _698 / cbSceneParam._m0[86u].x;
    float _2194 = _699 / cbSceneParam._m0[86u].y;
    vec4 _2208 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2193, _2194, (log2((isnan(cbSceneParam._m0[77u].w) ? _685 : (isnan(_685) ? cbSceneParam._m0[77u].w : min(_685, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2210 = _2208.x;
    float _2211 = _2208.y;
    float _2212 = _2208.z;
    float _2213 = _2208.w;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    if (_685 > cbSceneParam._m0[78u].w)
    {
        float _2255 = isnan(_685) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _685 : min(cbSceneParam._m0[80u].w, _685));
        float _2256 = _2255 / _685;
        float _2267 = _2256 * _261;
        float _2268 = _262 * _2256;
        float _2269 = (-0.0) - _2268;
        float _2270 = _2256 * _263;
        float _2272 = (cbSceneParam._m0[77u].w * _2269) / _2255;
        float _2273 = _2272 + cbSceneParam._m0[79u].w;
        float _2274 = cbSceneParam._m0[79u].w - _2268;
        float _2280 = sqrt(((_2267 * _2267) + (_2268 * _2268)) + (_2270 * _2270));
        float _2283 = (1.0 - (cbSceneParam._m0[77u].w / _2255)) * _2280;
        float _2289 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2291 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2500;
        if (abs((_2269 - _2272) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2500 = ((((_2273 > 0.0) ? exp2(_2289 * _2273) : (2.0 - exp2(_2291 * _2273))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2283;
        }
        else
        {
            float _2435 = 1.0 / cbSceneParam._m0[80u].x;
            float _2436 = isnan(_2274) ? _2273 : (isnan(_2273) ? _2274 : max(_2273, _2274));
            float _2437 = isnan(_2274) ? _2273 : (isnan(_2273) ? _2274 : min(_2273, _2274));
            float _2446 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : min(_2436, 0.0));
            float _2447 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : min(_2437, 0.0));
            _2500 = ((abs(_2280 / _2269) * cbSceneParam._m0[80u].y) * ((((_2446 - _2447) * 2.0) - ((exp2(_2289 * (isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0)))) - exp2(_2289 * (isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0))))) * _2435)) - ((exp2(_2291 * _2446) - exp2(_2291 * _2447)) * _2435))) + (_2283 * cbSceneParam._m0[80u].z);
        }
        vec4 _2502 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2193, _2194, 1.0), 0.0);
        float _2511 = exp2((_2500 * (-1.44269502162933349609375)) * (1.0 - _2502.w));
        float _2512 = log2(_2511);
        float _2528 = log2(_2213);
        _2293 = (exp2(_2528 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2512 * cbSceneParam._m0[78u].x)) * _2502.x) / cbSceneParam._m0[78u].x)) + _2210;
        _2295 = (exp2(_2528 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2512 * cbSceneParam._m0[78u].y)) * _2502.y) / cbSceneParam._m0[78u].y)) + _2211;
        _2297 = (exp2(_2528 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2512 * cbSceneParam._m0[78u].z)) * _2502.z) / cbSceneParam._m0[78u].z)) + _2212;
        _2299 = _2511 * _2213;
    }
    else
    {
        _2293 = _2210;
        _2295 = _2211;
        _2297 = _2212;
        _2299 = _2213;
    }
    float _2311 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2312 = _2311 == 3.0;
    float _2313 = log2(_2299);
    float _2320 = exp2(_2313 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0)));
    float _2321 = exp2(_2313 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0)));
    float _2322 = exp2(_2313 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0)));
    float _2331 = (_2311 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2331 * (_2312 ? _2320 : (_2320 + (cbSceneParam._m0[72u].w * _2293)));
    SV_Target.y = _2331 * (_2312 ? _2321 : (_2321 + (cbSceneParam._m0[72u].w * _2295)));
    SV_Target.z = _2331 * (_2312 ? _2322 : (_2322 + (cbSceneParam._m0[72u].w * _2297)));
    SV_Target.w = cbInstanceData._m0[_2185].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2185].w;
}


