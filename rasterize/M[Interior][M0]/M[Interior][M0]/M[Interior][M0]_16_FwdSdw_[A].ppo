#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1269;
float _3710;
float _3711;
float _3712;
float _3713;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    float _337 = cbMtdParam._m0[22u].y + _267;
    float _338 = cbMtdParam._m0[22u].z + _268;
    float _339 = cbMtdParam._m0[22u].w + _269;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_196, _197, _198));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_210, _211, _212));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _359 * _355;
    float _362 = (cbMtdParam._m0[19u].x * _353) * _359;
    float _364 = (cbMtdParam._m0[18u].w * _354) * _359;
    float _365 = fract(TEXCOORD.x);
    float _366 = fract(TEXCOORD.y);
    float _372;
    if (_362 > 0.0)
    {
        _372 = (1.0 - _365) / _362;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _365) / _362;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _372 = frontier_phi_3_2_ladder;
    }
    float _380;
    if (_364 > 0.0)
    {
        _380 = (1.0 - _366) / _364;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_364 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _366) / _364;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _380 = frontier_phi_7_6_ladder;
    }
    bool _382 = _360 > 0.0;
    float _384 = _382 ? (cbMtdParam._m0[15u].x / _360) : 5000.0;
    float _385 = isnan(_380) ? _372 : (isnan(_372) ? _380 : min(_372, _380));
    float _386 = isnan(_384) ? _385 : (isnan(_385) ? _384 : min(_385, _384));
    float _390 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = _365 + (-0.5);
    float _394 = _366 + (-0.5);
    float _397 = ((_386 * _360) + _390) / _390;
    vec4 _422 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_391 + (_386 * _362)) / _397) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_394 + (_386 * _364)) / _397) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _438 = (_424 - (_424 * _294)) * cbMtdParam._m0[9u].x;
    float _439 = (_425 - (_425 * _294)) * cbMtdParam._m0[9u].y;
    float _440 = cbMtdParam._m0[9u].z * (_426 - (_426 * _294));
    float _462 = (cbMtdParam._m0[21u].x * _353) * _359;
    float _464 = (cbMtdParam._m0[20u].w * _354) * _359;
    bool _465 = _462 > 0.0;
    float _470;
    if (_465)
    {
        _470 = (1.0 - _365) / _462;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _365) / _462;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _470 = frontier_phi_11_10_ladder;
    }
    bool _472 = _464 > 0.0;
    float _477;
    if (_472)
    {
        _477 = (1.0 - _366) / _464;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _366) / _464;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _477 = frontier_phi_15_14_ladder;
    }
    float _480 = _382 ? (cbMtdParam._m0[16u].z / _360) : 5000.0;
    float _481 = isnan(_477) ? _470 : (isnan(_470) ? _477 : min(_470, _477));
    float _482 = isnan(_480) ? _481 : (isnan(_481) ? _480 : min(_481, _480));
    float _486 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _490 = ((_482 * _360) + _486) / _486;
    float _495 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _497 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _513 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_391 + (_482 * _462)) / _490) + 0.5) + _495) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_394 + (_482 * _464)) / _490) + 0.5) + _497) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _518 = _513.x * cbMtdParam._m0[10u].x;
    float _519 = _513.y * cbMtdParam._m0[10u].y;
    float _520 = _513.z * cbMtdParam._m0[10u].z;
    float _528;
    if (_465)
    {
        _528 = (1.0 - _365) / _462;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _365) / _462;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _528 = frontier_phi_19_18_ladder;
    }
    float _534;
    if (_472)
    {
        _534 = (1.0 - _366) / _464;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _366) / _464;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _534 = frontier_phi_23_22_ladder;
    }
    float _536 = isnan(_534) ? _528 : (isnan(_528) ? _534 : min(_528, _534));
    float _537 = isnan(_480) ? _536 : (isnan(_536) ? _480 : min(_536, _480));
    float _544 = ((_537 * _360) + _486) / _486;
    vec4 _558 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_391 + (_537 * _462)) / _544) + 0.5) + _495) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_394 + (_537 * _464)) / _544) + 0.5) + _497) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _560 = _558.w;
    float _562 = _560 - (_560 * _294);
    float _572 = (_562 * ((_518 - _438) - (_518 * _294))) + _438;
    float _573 = (_562 * ((_519 - _439) - (_519 * _294))) + _439;
    float _574 = (_562 * ((_520 - _440) - (_520 * _294))) + _440;
    float _589 = (cbMtdParam._m0[21u].z * _353) * _359;
    float _591 = (cbMtdParam._m0[21u].y * _354) * _359;
    bool _592 = _589 > 0.0;
    float _597;
    if (_592)
    {
        _597 = (1.0 - _365) / _589;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _365) / _589;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _597 = frontier_phi_27_26_ladder;
    }
    bool _599 = _591 > 0.0;
    float _604;
    if (_599)
    {
        _604 = (1.0 - _366) / _591;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _366) / _591;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _604 = frontier_phi_31_30_ladder;
    }
    float _607 = _382 ? (cbMtdParam._m0[18u].x / _360) : 5000.0;
    float _608 = isnan(_604) ? _597 : (isnan(_597) ? _604 : min(_597, _604));
    float _609 = isnan(_607) ? _608 : (isnan(_608) ? _607 : min(_608, _607));
    float _613 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _617 = ((_609 * _360) + _613) / _613;
    float _622 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _624 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _641 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_391 + (_609 * _589)) / _617) + 0.5) + _622) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_394 + (_609 * _591)) / _617) + 0.5) + _624) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _646 = _641.x * cbMtdParam._m0[14u].x;
    float _647 = _641.y * cbMtdParam._m0[14u].y;
    float _648 = _641.z * cbMtdParam._m0[14u].z;
    float _656;
    if (_592)
    {
        _656 = (1.0 - _365) / _589;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _365) / _589;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _656 = frontier_phi_35_34_ladder;
    }
    float _662;
    if (_599)
    {
        _662 = (1.0 - _366) / _591;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _366) / _591;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _662 = frontier_phi_39_38_ladder;
    }
    float _664 = isnan(_662) ? _656 : (isnan(_656) ? _662 : min(_656, _662));
    float _665 = isnan(_607) ? _664 : (isnan(_664) ? _607 : min(_664, _607));
    float _672 = ((_665 * _360) + _613) / _613;
    vec4 _686 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_391 + (_665 * _589)) / _672) + 0.5) + _622) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_394 + (_665 * _591)) / _672) + 0.5) + _624) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _688 = _686.w;
    float _690 = _688 - (_688 * _294);
    float _701 = 0.5 - (_294 * 0.5);
    float _711 = (((_572 - _307) + (_690 * ((_646 - _572) - (_646 * _294)))) * _701) + _307;
    float _712 = (((_573 - _309) + (_690 * ((_647 - _573) - (_647 * _294)))) * _701) + _309;
    float _713 = (((_574 - _311) + (_690 * ((_648 - _574) - (_648 * _294)))) * _701) + _311;
    vec4 _725 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _733 = (_725.x * 2.0) + (-1.0);
    float _735 = (_725.y * 2.0) + (-1.0);
    float _736 = dot(vec2(_733, _735), vec2(_733, _735));
    float _3772 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _741 = sqrt(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))));
    float _742 = _725.z * _294;
    float _745 = fma(_741, _203, fma(_735, _210, _733 * _196));
    float _748 = fma(_741, _204, fma(_735, _211, _733 * _197));
    float _751 = fma(_741, _205, fma(_735, _212, _733 * _198));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3783 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _759 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3805 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _3816 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _778 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _782 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _783 = _267 * _782;
    float _784 = _268 * _782;
    float _785 = _269 * _782;
    vec4 _790 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _792 = _790.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _950 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _956 = (cbMatDynParam._m0[5u].x * _950) + cbMatDynParam._m0[5u].y;
        float _3827 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _961 = (cbMatDynParam._m0[5u].z * _950) + cbMatDynParam._m0[5u].w;
        float _3838 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) - _957)) + _957) < ((_792 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _805 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _806 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _825 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _828 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _831 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _844 = uint(roundEven(NORMAL.w)) * 13u;
    uint _846 = _844 + 9u;
    uint _847 = _846 + uint(cbMatDynParam._m0[0u].w);
    float _853 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_847].x;
    float _854 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_847].y;
    float _855 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * cbInstanceData._m0[_847].z;
    float _3849 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _805, cbSceneParam._m0[86u].y * _806));
    float _870 = _867.x * TEXCOORD.z;
    float _871 = dot(vec3(_756, _757, _758), vec3(_783, _784, _785));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _756) - _783;
    float _879 = (_874 * _757) - _784;
    float _880 = (_874 * _758) - _785;
    float _884 = abs(dot(vec3(_783, _784, _785), vec3(_756, _757, _758)));
    float _3882 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_759);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1268;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _995 = fma(_939, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931));
        float _999 = fma(_939, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931));
        float _1003 = fma(_939, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931));
        float _1026 = _931 + _756;
        float _1027 = _935 + _757;
        float _1028 = _939 + _758;
        float _1038 = fma(_1028, cbModelParam._m0[26u].z, fma(_1027, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026)) - _995;
        float _1039 = fma(_1028, cbModelParam._m0[27u].z, fma(_1027, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026)) - _999;
        float _1040 = fma(_1028, cbModelParam._m0[28u].z, fma(_1027, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026)) - _1003;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_995 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_999 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[34u].z) + ((((((_1003 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1096 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1062.x + (-0.5));
        float _1098 = _1096 * (_1062.y + (-0.5));
        float _1099 = _1096 * (_1062.z + (-0.5));
        float _1106 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1069.x + (-0.5));
        float _1108 = _1106 * (_1069.y + (-0.5));
        float _1109 = _1106 * (_1069.z + (-0.5));
        float _1116 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1076.x + (-0.5));
        float _1118 = _1116 * (_1076.y + (-0.5));
        float _1119 = _1116 * (_1076.z + (-0.5));
        float _1126 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1083.x + (-0.5));
        float _1128 = _1126 * (_1083.y + (-0.5));
        float _1129 = _1126 * (_1083.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1150 = (dot(vec3(_756, _757, _758), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1160 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3930 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1162 + 1.0))) + _1167) * _1130;
        float _1177 = _1098 * 0.5;
        float _1178 = _1108 * 0.5;
        float _1179 = _1118 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_756, _757, _758), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3963 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1204 + 1.0))) + _1209) * _1131;
        float _1219 = _1099 * 0.5;
        float _1220 = _1109 * 0.5;
        float _1221 = _1119 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_756, _757, _758), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3996 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1246 + 1.0))) + _1251) * _1132;
        _1268 = _1099;
        _1270 = _1098;
        _1271 = _1097;
        _1272 = _1109;
        _1273 = _1108;
        _1274 = _1107;
        _1275 = _1119;
        _1276 = _1118;
        _1277 = _1117;
        _1278 = _1132;
        _1279 = _1131;
        _1280 = _1130;
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _1269;
        _1270 = _1269;
        _1271 = _1269;
        _1272 = _1269;
        _1273 = _1269;
        _1274 = _1269;
        _1275 = _1269;
        _1276 = _1269;
        _1277 = _1269;
        _1278 = _1269;
        _1279 = _1269;
        _1280 = _1269;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1312 = fma(_939, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931));
        float _1316 = fma(_939, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931));
        float _1320 = fma(_939, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931));
        float _1343 = _931 + _756;
        float _1344 = _935 + _757;
        float _1345 = _939 + _758;
        float _1355 = fma(_1345, cbModelParam._m0[30u].z, fma(_1344, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343)) - _1312;
        float _1356 = fma(_1345, cbModelParam._m0[31u].z, fma(_1344, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343)) - _1316;
        float _1357 = fma(_1345, cbModelParam._m0[32u].z, fma(_1344, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343)) - _1320;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1312 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1316 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[35u].z) + ((((((_1320 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1411 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1378.x + (-0.5));
        float _1413 = _1411 * (_1378.y + (-0.5));
        float _1414 = _1411 * (_1378.z + (-0.5));
        float _1421 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1385.x + (-0.5));
        float _1423 = _1421 * (_1385.y + (-0.5));
        float _1424 = _1421 * (_1385.z + (-0.5));
        float _1431 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1392.x + (-0.5));
        float _1433 = _1431 * (_1392.y + (-0.5));
        float _1434 = _1431 * (_1392.z + (-0.5));
        float _1441 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1399.x + (-0.5));
        float _1443 = _1441 * (_1399.y + (-0.5));
        float _1444 = _1441 * (_1399.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_756, _757, _758), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4059 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1475 + 1.0))) + _1480) * _1445;
        float _1490 = _1413 * 0.5;
        float _1491 = _1423 * 0.5;
        float _1492 = _1433 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_756, _757, _758), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4092 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1517 + 1.0))) + _1522) * _1446;
        float _1532 = _1414 * 0.5;
        float _1533 = _1424 * 0.5;
        float _1534 = _1434 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_756, _757, _758), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4125 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1559 + 1.0))) + _1564) * _1447;
        _1581 = _1414;
        _1582 = _1413;
        _1583 = _1412;
        _1584 = _1424;
        _1585 = _1423;
        _1586 = _1422;
        _1587 = _1434;
        _1588 = _1433;
        _1589 = _1432;
        _1590 = _1447;
        _1591 = _1446;
        _1592 = _1445;
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1269;
        _1582 = _1269;
        _1583 = _1269;
        _1584 = _1269;
        _1585 = _1269;
        _1586 = _1269;
        _1587 = _1269;
        _1588 = _1269;
        _1589 = _1269;
        _1590 = _1269;
        _1591 = _1269;
        _1592 = _1269;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1281)) + _1281;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1282)) + _1282;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1283)) + _1283;
    float _1628 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1605));
    float _1649 = _878 * 0.5;
    float _1650 = _879 * 0.5;
    float _1651 = _880 * 0.5;
    float _1652 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1655 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1658 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1692;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1665 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1268, _1272, _1275, _1278));
        float _1669 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1673 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1680 = dot(vec4(cbModelParam._m0[39u]), vec4(_1649, _1650, _1651, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1703;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1694 = dot(vec4(cbModelParam._m0[40u]), vec4(_1649, _1650, _1651, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1707 = (_1703 * cbModelParam._m0[1u].x) + (_1692 * (1.0 - cbModelParam._m0[1u].x));
    float _1717 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1717 : min(cbModelParam._m0[25u].z, _1717));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1765 = fma(_939, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931)) + cbModelParam._m0[13u].w;
        float _1769 = fma(_939, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931)) + cbModelParam._m0[14u].w;
        float _1773 = fma(_939, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931)) + cbModelParam._m0[15u].w;
        float _1776 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1779 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1782 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1810;
        if (_1776 > 0.0)
        {
            _1810 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1810 = frontier_phi_57_55_ladder;
        }
        float _1978;
        if (_1779 > 0.0)
        {
            _1978 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1978 = frontier_phi_66_62_ladder;
        }
        float _2422;
        if (_1782 > 0.0)
        {
            _2422 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2422 = frontier_phi_78_73_ladder;
        }
        float _2424 = isnan(_1978) ? _1810 : (isnan(_1810) ? _1978 : min(_1810, _1978));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1776) + _1765;
        float _2430 = (_2425 * _1779) + _1769;
        float _2431 = (_2425 * _1782) + _1773;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2432;
        float _2436 = _2432 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 > _2436) || ((_2430 < _2434) || ((_2429 < _2434) || (_2429 > _2436))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2431, cbModelParam._m0[9u].z, fma(_2430, cbModelParam._m0[9u].y, _2429 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2431, cbModelParam._m0[10u].z, fma(_2430, cbModelParam._m0[10u].y, _2429 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2431, cbModelParam._m0[11u].z, fma(_2430, cbModelParam._m0[11u].y, _2429 * cbModelParam._m0[11u].x))), _1718);
            frontier_phi_56_78_ladder = _2665.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2665.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2665.x * cbModelParam._m0[1u].y;
        }
        _1798 = frontier_phi_56_78_ladder_2;
        _1800 = frontier_phi_56_78_ladder_1;
        _1802 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1718);
        _1798 = _1786.x * cbModelParam._m0[1u].y;
        _1800 = _1786.y * cbModelParam._m0[1u].y;
        _1802 = _1786.z * cbModelParam._m0[1u].y;
    }
    float _1806 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1806 : min(cbModelParam._m0[25u].w, _1806));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1859 = fma(_939, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931)) + cbModelParam._m0[21u].w;
        float _1863 = fma(_939, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931)) + cbModelParam._m0[22u].w;
        float _1867 = fma(_939, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931)) + cbModelParam._m0[23u].w;
        float _1870 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1873 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1876 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _1983;
        if (_1870 > 0.0)
        {
            _1983 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1983 = frontier_phi_68_64_ladder;
        }
        float _2449;
        if (_1873 > 0.0)
        {
            _2449 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2449 = frontier_phi_80_75_ladder;
        }
        float _2794;
        if (_1876 > 0.0)
        {
            _2794 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2794 = frontier_phi_92_87_ladder;
        }
        float _2796 = isnan(_2449) ? _1983 : (isnan(_1983) ? _2449 : min(_1983, _2449));
        float _2797 = isnan(_2794) ? _2796 : (isnan(_2796) ? _2794 : min(_2796, _2794));
        float _2801 = (_2797 * _1870) + _1859;
        float _2802 = (_2797 * _1873) + _1863;
        float _2803 = (_2797 * _1876) + _1867;
        float _2804 = _2797 * 9.9999997473787516355514526367188e-05;
        float _2805 = (-1.0) - _2804;
        float _2807 = _2804 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2803 > _2807) || ((_2803 < _2805) || ((_2802 > _2807) || ((_2802 < _2805) || ((_2801 < _2805) || (_2801 > _2807))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2803, cbModelParam._m0[17u].z, fma(_2802, cbModelParam._m0[17u].y, _2801 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2803, cbModelParam._m0[18u].z, fma(_2802, cbModelParam._m0[18u].y, _2801 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2803, cbModelParam._m0[19u].z, fma(_2802, cbModelParam._m0[19u].y, _2801 * cbModelParam._m0[19u].x))), _1807);
            frontier_phi_65_92_ladder = _2940.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2940.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2940.x * cbModelParam._m0[1u].z;
        }
        _1895 = frontier_phi_65_92_ladder_2;
        _1897 = frontier_phi_65_92_ladder_1;
        _1899 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1807);
        _1895 = _1879.x * cbModelParam._m0[1u].z;
        _1897 = _1879.y * cbModelParam._m0[1u].z;
        _1899 = _1879.z * cbModelParam._m0[1u].z;
    }
    float _1911 = ((((1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_899 * _886)) * _870;
    float _1912 = _1911 * ((cbModelParam._m0[1u].w * (_1895 - _1798)) + _1798);
    float _1913 = _1911 * ((cbModelParam._m0[1u].w * (_1897 - _1800)) + _1800);
    float _1914 = _1911 * ((cbModelParam._m0[1u].w * (_1899 - _1802)) + _1802);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, _1912 * cbSceneParam._m0[91u].x));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1970 = _1957 / _1969;
    float _1971 = _1961 / _1969;
    float _1972 = _1965 / _1969;
    float _2119;
    float _2120;
    float _2121;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1999 = ((uint(_1972 > cbSceneParam._m0[59u].y) + uint(_1972 > cbSceneParam._m0[59u].x)) + uint(_1972 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2000 = _1999 + 43u;
        uint _2008 = _1999 + 44u;
        uint _2016 = _1999 + 45u;
        uint _2024 = _1999 + 46u;
        float _2035 = fma(_1969, cbSceneParam._m0[_2000].w, fma(_1965, cbSceneParam._m0[_2000].z, fma(_1961, cbSceneParam._m0[_2000].y, _1957 * cbSceneParam._m0[_2000].x)));
        float _2039 = fma(_1969, cbSceneParam._m0[_2008].w, fma(_1965, cbSceneParam._m0[_2008].z, fma(_1961, cbSceneParam._m0[_2008].y, _1957 * cbSceneParam._m0[_2008].x)));
        float _2047 = fma(_1969, cbSceneParam._m0[_2024].w, fma(_1965, cbSceneParam._m0[_2024].z, fma(_1961, cbSceneParam._m0[_2024].y, _1957 * cbSceneParam._m0[_2024].x)));
        float _2052 = cbSceneParam._m0[33u].z * _2047;
        float _2054 = cbSceneParam._m0[33u].w * _2047;
        float _2057 = fma(_1969, cbSceneParam._m0[_2016].w, fma(_1965, cbSceneParam._m0[_2016].z, fma(_1961, cbSceneParam._m0[_2016].y, _1957 * cbSceneParam._m0[_2016].x))) / _2047;
        float _2105 = (cbSceneParam._m0[33u].x - sqrt(((_1971 * _1971) + (_1970 * _1970)) + (_1972 * _1972))) * cbSceneParam._m0[33u].y;
        float _4251 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2112 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 + _2035) / _2047, (_2054 + _2039) / _2047), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2054 + _2035) / _2047, (_2039 - _2052) / _2047), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2035 - _2052) / _2047, (_2039 - _2054) / _2047), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2035 - _2054) / _2047, (_2052 + _2039) / _2047), _2057), 0.0)).x), vec4(0.25)));
        _2119 = 1.0 - (_2112 * cbSceneParam._m0[34u].x);
        _2120 = 1.0 - (_2112 * cbSceneParam._m0[34u].y);
        _2121 = 1.0 - (_2112 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2119 = 1.0;
        _2120 = 1.0;
        _2121 = 1.0;
    }
    float _2185;
    float _2187;
    float _2189;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2173 = fma(_1969, cbSceneParam._m0[63u].w, fma(_1965, cbSceneParam._m0[63u].z, fma(_1961, cbSceneParam._m0[63u].y, _1957 * cbSceneParam._m0[63u].x)));
        float _2174 = fma(_1969, cbSceneParam._m0[60u].w, fma(_1965, cbSceneParam._m0[60u].z, fma(_1961, cbSceneParam._m0[60u].y, _1957 * cbSceneParam._m0[60u].x))) / _2173;
        float _2175 = fma(_1969, cbSceneParam._m0[61u].w, fma(_1965, cbSceneParam._m0[61u].z, fma(_1961, cbSceneParam._m0[61u].y, _1957 * cbSceneParam._m0[61u].x))) / _2173;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2174 >= cbSceneParam._m0[64u].x) && (_2175 >= cbSceneParam._m0[64u].y)) && (_2174 <= cbSceneParam._m0[64u].z)) && (_2175 <= cbSceneParam._m0[64u].w))
        {
            float _2462 = fma(_1969, cbSceneParam._m0[62u].w, fma(_1965, cbSceneParam._m0[62u].z, fma(_1961, cbSceneParam._m0[62u].y, _1957 * cbSceneParam._m0[62u].x))) / _2173;
            float _2466 = isnan(cbSceneParam._m0[41u].w) ? _2462 : (isnan(_2462) ? cbSceneParam._m0[41u].w : max(_2462, cbSceneParam._m0[41u].w));
            float _2509 = (cbSceneParam._m0[33u].x - sqrt(((_1971 * _1971) + (_1970 * _1970)) + (_1972 * _1972))) * cbSceneParam._m0[33u].y;
            float _4267 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
            float _2516 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2174, cbSceneParam._m0[33u].w + _2175), _2466), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2174, _2175 - cbSceneParam._m0[33u].z), _2466), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2174 - cbSceneParam._m0[33u].z, _2175 - cbSceneParam._m0[33u].w), _2466), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2174 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2175), _2466), 0.0)).x), vec4(0.25)));
            float _2520 = 1.0 - (_2516 * cbSceneParam._m0[34u].x);
            float _2521 = 1.0 - (_2516 * cbSceneParam._m0[34u].y);
            float _2522 = 1.0 - (_2516 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2522) ? _2121 : (isnan(_2121) ? _2522 : min(_2121, _2522));
            frontier_phi_77_76_ladder_1 = isnan(_2521) ? _2120 : (isnan(_2120) ? _2521 : min(_2120, _2521));
            frontier_phi_77_76_ladder_2 = isnan(_2520) ? _2119 : (isnan(_2119) ? _2520 : min(_2119, _2520));
        }
        else
        {
            frontier_phi_77_76_ladder = _2121;
            frontier_phi_77_76_ladder_1 = _2120;
            frontier_phi_77_76_ladder_2 = _2119;
        }
        _2185 = frontier_phi_77_76_ladder_2;
        _2187 = frontier_phi_77_76_ladder_1;
        _2189 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2185 = _2119;
        _2187 = _2120;
        _2189 = _2121;
    }
    uvec4 _2194 = floatBitsToUint(cbInstanceData._m0[_844 + 5u]);
    uint _2196 = _2194.x * 14u;
    uint _2197 = _2196 + 13u;
    float _2202 = _870 + (-1.0);
    float _2205 = (cbLight._m0[_2197].x * _2202) + 1.0;
    float _2206 = (cbLight._m0[_2197].y * _2202) + 1.0;
    uint _2207 = _2196 + 5u;
    float _2213 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2217 = _2196 + 4u;
    float _2226 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2230 = _2196 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_756, _757, _758));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_756, _757, _758));
    float _4303 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4314 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2207].x * _2213) * _2251) + (((cbLight._m0[_2217].x * _2185) * _2226) * _2249);
    float _2259 = ((_2213 * cbLight._m0[_2207].y) * _2251) + (((cbLight._m0[_2217].y * _2187) * _2226) * _2249);
    float _2260 = ((_2213 * cbLight._m0[_2207].z) * _2251) + (((cbLight._m0[_2217].z * _2189) * _2226) * _2249);
    uint _2262 = _2196 + 8u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _759) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_2196].x + _783;
    float _2278 = cbLight._m0[_2196].y + _784;
    float _2279 = cbLight._m0[_2196].z + _785;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2196].xyz));
    float _4325 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _4336 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2291 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2292 = dot(vec3(_756, _757, _758), vec3(_2284, _2285, _2286));
    float _4347 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2284, _2285, _2286));
    float _4358 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2276 * _2276;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2315 = (exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2316 = 1.0 - _2276;
    float _2327 = (0.5 / (((_2291 * ((_2290 * _2316) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2316) + _2276) * _2290))) * _2290;
    float _4369 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    uint _2343 = _2196 + 9u;
    float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _759) * 0.949999988079071044921875);
    float _2355 = _2354 * _2354;
    float _2356 = cbLight._m0[_2230].x + _783;
    float _2357 = cbLight._m0[_2230].y + _784;
    float _2358 = cbLight._m0[_2230].z + _785;
    float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
    float _2363 = _2362 * _2356;
    float _2364 = _2362 * _2357;
    float _2365 = _2362 * _2358;
    float _2366 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2230].xyz));
    float _4380 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2370 = dot(vec3(_756, _757, _758), vec3(_2363, _2364, _2365));
    float _4391 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2374 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2363, _2364, _2365));
    float _4402 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2378 = _2355 * _2355;
    float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
    float _2391 = (exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2392 = 1.0 - _2355;
    float _2402 = (0.5 / (((_2291 * ((_2369 * _2392) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2392) + _2355) * _2369))) * _2369;
    float _4413 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
    float _2414 = (((_2391 * cbLight._m0[_2343].x) * _2404) * _2213) + ((((cbLight._m0[_2262].x * _2185) * _2315) * _2329) * _2226);
    float _2415 = (((_2391 * cbLight._m0[_2343].y) * _2404) * _2213) + ((((cbLight._m0[_2262].y * _2187) * _2315) * _2329) * _2226);
    float _2416 = (((_2391 * cbLight._m0[_2343].z) * _2404) * _2213) + ((((cbLight._m0[_2262].z * _2189) * _2315) * _2329) * _2226);
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_2194.y == 0u)
    {
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.x;
        uint _2546 = uint((float(_2534.y) * floor(float(uint(cbSceneParam._m0[85u].y * _806) / _2535))) + floor(float(uint(cbSceneParam._m0[85u].x * _805) / _2535)));
        float _2556 = (log2(_1972 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2557 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        uint _2560 = uint(isnan(14.0) ? _2557 : (isnan(_2557) ? 14.0 : min(_2557, 14.0)));
        uvec4 _2565 = texelFetch(g_lightClusterGridBuffer, int(((_2560 << 2u) + (_2546 << 6u)) >> 2u));
        uint _2566 = _2565.x;
        uint _2567 = _2534.z;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        if (((((1u << ((_2567 >> 4u) & 15u)) + 4294967295u) & _2566) == 0u) || ((_2567 & 240u) == 0u))
        {
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
        }
        else
        {
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2685;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            uint _2858 = 0u;
            uint _2867;
            bool _2868;
            for (;;)
            {
                _2867 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                _2868 = _2867 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2868)
                {
                    frontier_phi_103_pred = _2853;
                    frontier_phi_103_pred_1 = _2857;
                    frontier_phi_103_pred_2 = _2856;
                    frontier_phi_103_pred_3 = _2855;
                    frontier_phi_103_pred_4 = _2854;
                    frontier_phi_103_pred_5 = _2852;
                }
                else
                {
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    uint _3024;
                    _3018 = _2852;
                    _3019 = _2853;
                    _3020 = _2854;
                    _3021 = _2855;
                    _3022 = _2856;
                    _3023 = _2857;
                    _3024 = _2867;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    for (;;)
                    {
                        uint _3028 = uint(findLSB(_3024)) + (_2858 << 5u);
                        uint _3025 = (_3024 + 4294967295u) & _3024;
                        uint _3030 = _3028 * 48u;
                        vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3050 = (_3028 * 48u) + 4u;
                        vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 3u)).x));
                        uint _3069 = (_3028 * 48u) + 8u;
                        vec3 _3080 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x));
                        float _3084 = _3044.x - _1970;
                        float _3085 = _3044.y - _1971;
                        float _3086 = _3044.z - _1972;
                        float _3087 = dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086));
                        float _3090 = inversesqrt(_3087);
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3094 = dot(vec3(_825, _828, _831), vec3(_3091, _3092, _3093));
                        float _3099 = 1.0 - (_3087 * _3044.w);
                        float _4434 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3101 = sqrt(_3087) * _3063.w;
                        float _3104 = 1.39999997615814208984375 / (_3101 + 1.39999997615814208984375);
                        float _3105 = _3104 * _3104;
                        float _3108 = ((1.0 - _3105) * _3094) + _3105;
                        float _3111 = _3101 * _3101;
                        float _3115 = ((isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))) * _3100) / ((_3111 * 0.699999988079071044921875) + 1.0);
                        float _3119 = (-0.0) - _1970;
                        float _3120 = (-0.0) - _1971;
                        float _3121 = (-0.0) - _1972;
                        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3135 = exp2(log2(1.0 / ((_3111 * 3.5) + 5.0)) * 0.25);
                        float _3136 = 1.0 - _886;
                        float _3143 = sqrt(1.0 - ((1.0 - (_3136 * _3136)) * (1.0 - (_3135 * _3135))));
                        float _3144 = _3143 * _3143;
                        float _3145 = _3144 * _3144;
                        float _3146 = _3126 + _3091;
                        float _3147 = _3127 + _3092;
                        float _3148 = _3128 + _3093;
                        float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                        float _3156 = dot(vec3(_825, _828, _831), vec3(_3126, _3127, _3128));
                        float _4450 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3159 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3160 = dot(vec3(_825, _828, _831), vec3(_3152 * _3146, _3152 * _3147, _3152 * _3148));
                        float _4461 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3163 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3167 = ((_3163 * _3163) * (_3145 + (-1.0))) + 1.0;
                        float _3168 = _3104 * _3144;
                        float _3169 = _3168 * _3168;
                        float _3172 = ((1.0 - _3169) * _3094) + _3169;
                        float _4472 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3173 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3174 = 1.0 - _3144;
                        float _3184 = (0.5 / (((_3173 * ((_3159 * _3174) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_3173 * _3174) + _3144) * _3159))) * _3173;
                        float _4483 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3195 = (((_3145 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3167 * _3167) * ((_3111 * 2.1991131305694580078125) + 3.141590118408203125))) * _3100;
                        _2948 = (_3115 * _3063.x) + _3021;
                        _2949 = (_3115 * _3063.y) + _3022;
                        _2950 = (_3115 * _3063.z) + _3023;
                        _2945 = (_3195 * _3080.x) + _3018;
                        _2946 = (_3195 * _3080.y) + _3019;
                        _2947 = (_3195 * _3080.z) + _3020;
                        if (_3025 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _3025;
                        }
                    }
                    frontier_phi_103_pred = _2946;
                    frontier_phi_103_pred_1 = _2950;
                    frontier_phi_103_pred_2 = _2949;
                    frontier_phi_103_pred_3 = _2948;
                    frontier_phi_103_pred_4 = _2947;
                    frontier_phi_103_pred_5 = _2945;
                }
                _2677 = frontier_phi_103_pred;
                _2685 = frontier_phi_103_pred_1;
                _2683 = frontier_phi_103_pred_2;
                _2681 = frontier_phi_103_pred_3;
                _2679 = frontier_phi_103_pred_4;
                _2675 = frontier_phi_103_pred_5;
                uint _2859 = _2858 + 1u;
                if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2852 = _2675;
                    _2853 = _2677;
                    _2854 = _2679;
                    _2855 = _2681;
                    _2856 = _2683;
                    _2857 = _2685;
                    _2858 = _2859;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
        }
        uvec4 _2688 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2689 = _2688.z;
        uint _2691 = (_2689 >> 8u) & 15u;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((4294967295u << _2691) & _2566) == 0u)
        {
            _2820 = _2674;
            _2822 = _2676;
            _2824 = _2678;
            _2826 = _2680;
            _2828 = _2682;
            _2830 = _2684;
        }
        else
        {
            float _2845 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
            float _2846 = _2845 * _1970;
            float _2847 = _2845 * _1971;
            float _2848 = _2845 * _1972;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2691 < ((_2689 >> 12u) & 15u))
            {
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _3001 = _2674;
                float _3002 = _2676;
                float _3003 = _2678;
                float _3004 = _2680;
                float _3005 = _2682;
                float _3006 = _2684;
                uint _3007 = _2691;
                uint _3016;
                bool _3017;
                for (;;)
                {
                    _3016 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                    _3017 = _3016 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3017)
                    {
                        frontier_phi_114_pred = _3006;
                        frontier_phi_114_pred_1 = _3005;
                        frontier_phi_114_pred_2 = _3004;
                        frontier_phi_114_pred_3 = _3003;
                        frontier_phi_114_pred_4 = _3002;
                        frontier_phi_114_pred_5 = _3001;
                    }
                    else
                    {
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3222 = _3001;
                        float _3223 = _3002;
                        float _3224 = _3003;
                        float _3225 = _3004;
                        float _3226 = _3005;
                        float _3227 = _3006;
                        uint _3228 = _3016;
                        uint _3229;
                        vec4 _3254;
                        float _3255;
                        vec4 _3270;
                        vec3 _3282;
                        vec4 _3297;
                        vec4 _3312;
                        float _3358;
                        bool _3359;
                        for (;;)
                        {
                            uint _3239 = ((_3007 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3228));
                            _3229 = (_3228 + 4294967295u) & _3228;
                            uint _3241 = _3239 * 40u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            _3255 = _3254.w;
                            uint _3257 = (_3239 * 40u) + 4u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3272 = (_3239 * 40u) + 8u;
                            _3282 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x));
                            uint _3284 = (_3239 * 40u) + 16u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3239 * 40u) + 20u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3239 * 40u) + 24u;
                            vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3333 = (_3239 * 40u) + 28u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3358 = fma(_1972, _3346.z, fma(_1971, _3346.y, _3346.x * _1970)) + _3346.w;
                            _3359 = !((fma(_1972, _3327.z, fma(_1971, _3327.y, _3327.x * _1970)) + _3327.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3359)
                            {
                                float _3386 = _3254.x - _1970;
                                float _3387 = _3254.y - _1971;
                                float _3388 = _3254.z - _1972;
                                float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                                float _3392 = inversesqrt(_3389);
                                float _3393 = _3392 * _3386;
                                float _3394 = _3392 * _3387;
                                float _3395 = _3392 * _3388;
                                float _3399 = 1.0 - (_3389 / (_3255 * _3255));
                                float _4494 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3404 = sqrt(_3389) * _3270.w;
                                float _3406 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                                float _3407 = _3406 * _3406;
                                float _3410 = ((1.0 - _3407) * dot(vec3(_3393, _3394, _3395), vec3(_825, _828, _831))) + _3407;
                                float _3413 = _3404 * _3404;
                                float _3417 = (fma(_1972, _3297.z, fma(_1971, _3297.y, _3297.x * _1970)) + _3297.w) / _3358;
                                float _3418 = (fma(_1972, _3312.z, fma(_1971, _3312.y, _3312.x * _1970)) + _3312.w) / _3358;
                                float _3422 = 1.0 - dot(vec2(_3417, _3418), vec2(_3417, _3418));
                                float _4510 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3424 = _3423 * (((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3400) / ((_3413 * 0.699999988079071044921875) + 1.0));
                                float _3436 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                                float _3437 = 1.0 - _886;
                                float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                                float _3445 = _3444 * _3444;
                                float _3446 = _3445 * _3445;
                                float _3447 = _3393 - _2846;
                                float _3448 = _3394 - _2847;
                                float _3449 = _3395 - _2848;
                                float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                                float _3457 = dot(vec3(_825, _828, _831), vec3((-0.0) - _2846, (-0.0) - _2847, (-0.0) - _2848));
                                float _4521 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3461 = dot(vec3(_825, _828, _831), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                                float _4532 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                                float _3469 = _3406 * _3445;
                                float _3470 = _3469 * _3469;
                                float _3476 = ((1.0 - _3470) * dot(vec3(_825, _828, _831), vec3(_3393, _3394, _3395))) + _3470;
                                float _4543 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3478 = 1.0 - _3445;
                                float _3488 = (0.5 / (((_3477 * ((_3460 * _3478) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3445) * _3460))) * _3477;
                                float _4554 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3498 = (_3423 * _3400) * (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3468 * _3468) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3424 * _3270.z;
                                frontier_phi_120_pred_1 = _3424 * _3270.y;
                                frontier_phi_120_pred_2 = _3424 * _3270.x;
                                frontier_phi_120_pred_3 = _3498 * _3282.z;
                                frontier_phi_120_pred_4 = _3498 * _3282.y;
                                frontier_phi_120_pred_5 = _3498 * _3282.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3507 = frontier_phi_120_pred;
                            _3506 = frontier_phi_120_pred_1;
                            _3505 = frontier_phi_120_pred_2;
                            _3504 = frontier_phi_120_pred_3;
                            _3503 = frontier_phi_120_pred_4;
                            _3502 = frontier_phi_120_pred_5;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            _3209 = _3502 + _3222;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            if (_3229 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3229;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3214;
                        frontier_phi_114_pred_1 = _3213;
                        frontier_phi_114_pred_2 = _3212;
                        frontier_phi_114_pred_3 = _3211;
                        frontier_phi_114_pred_4 = _3210;
                        frontier_phi_114_pred_5 = _3209;
                    }
                    _2831 = frontier_phi_114_pred;
                    _2829 = frontier_phi_114_pred_1;
                    _2827 = frontier_phi_114_pred_2;
                    _2825 = frontier_phi_114_pred_3;
                    _2823 = frontier_phi_114_pred_4;
                    _2821 = frontier_phi_114_pred_5;
                    uint _3008 = _3007 + 1u;
                    if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3001 = _2821;
                        _3002 = _2823;
                        _3003 = _2825;
                        _3004 = _2827;
                        _3005 = _2829;
                        _3006 = _2831;
                        _3007 = _3008;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2827;
                frontier_phi_94_95_ladder_1 = _2831;
                frontier_phi_94_95_ladder_2 = _2829;
                frontier_phi_94_95_ladder_3 = _2825;
                frontier_phi_94_95_ladder_4 = _2823;
                frontier_phi_94_95_ladder_5 = _2821;
            }
            else
            {
                frontier_phi_94_95_ladder = _2680;
                frontier_phi_94_95_ladder_1 = _2684;
                frontier_phi_94_95_ladder_2 = _2682;
                frontier_phi_94_95_ladder_3 = _2678;
                frontier_phi_94_95_ladder_4 = _2676;
                frontier_phi_94_95_ladder_5 = _2674;
            }
            _2820 = frontier_phi_94_95_ladder_5;
            _2822 = frontier_phi_94_95_ladder_4;
            _2824 = frontier_phi_94_95_ladder_3;
            _2826 = frontier_phi_94_95_ladder;
            _2828 = frontier_phi_94_95_ladder_2;
            _2830 = frontier_phi_94_95_ladder_1;
        }
        float _2835 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2579 = (_2835 * _2826) + _2258;
        _2581 = (_2835 * _2828) + _2259;
        _2583 = (_2835 * _2830) + _2260;
        _2585 = ((_2820 * 0.039999999105930328369140625) * _2835) + _2414;
        _2587 = ((_2822 * 0.039999999105930328369140625) * _2835) + _2415;
        _2589 = ((_2824 * 0.039999999105930328369140625) * _2835) + _2416;
    }
    else
    {
        _2579 = _2258;
        _2581 = _2259;
        _2583 = _2260;
        _2585 = _2414;
        _2587 = _2415;
        _2589 = _2416;
    }
    float _4570 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4581 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4592 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2606 = ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2579 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _870))) + ((_2585 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    float _2607 = ((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2581 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _870))) + ((_2587 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    float _2608 = ((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2583 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _870))) + ((_2589 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    float _2609 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2610 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2611 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    uint _2612 = _844 + 6u;
    float _2620 = _805 / cbSceneParam._m0[86u].x;
    float _2621 = _806 / cbSceneParam._m0[86u].y;
    vec4 _2635 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, (log2((isnan(cbSceneParam._m0[77u].w) ? _778 : (isnan(_778) ? cbSceneParam._m0[77u].w : min(_778, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2637 = _2635.x;
    float _2638 = _2635.y;
    float _2639 = _2635.z;
    float _2640 = _2635.w;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_778 > cbSceneParam._m0[78u].w)
    {
        float _2699 = isnan(_778) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _778 : min(cbSceneParam._m0[80u].w, _778));
        float _2700 = _2699 / _778;
        float _2711 = _2700 * _267;
        float _2712 = _268 * _2700;
        float _2713 = (-0.0) - _2712;
        float _2714 = _2700 * _269;
        float _2716 = (cbSceneParam._m0[77u].w * _2713) / _2699;
        float _2717 = _2716 + cbSceneParam._m0[79u].w;
        float _2718 = cbSceneParam._m0[79u].w - _2712;
        float _2724 = sqrt(((_2711 * _2711) + (_2712 * _2712)) + (_2714 * _2714));
        float _2727 = (1.0 - (cbSceneParam._m0[77u].w / _2699)) * _2724;
        float _2732 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2734 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2958;
        if (abs((_2713 - _2716) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2958 = ((((_2717 > 0.0) ? exp2(_2732 * _2717) : (2.0 - exp2(_2734 * _2717))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2727;
        }
        else
        {
            float _2881 = 1.0 / cbSceneParam._m0[80u].x;
            float _2882 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : max(_2717, _2718));
            float _2883 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : min(_2717, _2718));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            _2958 = ((abs(_2724 / _2713) * cbSceneParam._m0[80u].y) * ((((_2892 - _2893) * 2.0) - ((exp2(_2732 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0)))) - exp2(_2732 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))))) * _2881)) - ((exp2(_2734 * _2892) - exp2(_2734 * _2893)) * _2881))) + (_2727 * cbSceneParam._m0[80u].z);
        }
        vec4 _2960 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, 1.0), 0.0);
        float _2969 = exp2((_2958 * (-1.44269502162933349609375)) * (1.0 - _2960.w));
        float _2970 = log2(_2969);
        float _2986 = log2(_2640);
        _2736 = (exp2(_2986 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].x)) * _2960.x) / cbSceneParam._m0[78u].x)) + _2637;
        _2738 = (exp2(_2986 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].y)) * _2960.y) / cbSceneParam._m0[78u].y)) + _2638;
        _2740 = (exp2(_2986 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].z)) * _2960.z) / cbSceneParam._m0[78u].z)) + _2639;
        _2742 = _2969 * _2640;
    }
    else
    {
        _2736 = _2637;
        _2738 = _2638;
        _2740 = _2639;
        _2742 = _2640;
    }
    bool _2996;
    vec4 _2752;
    vec4 _2774;
    float _2776;
    float _2780;
    float _2781;
    float _2782;
    float _2783;
    bool _2793;
    for (;;)
    {
        _2752 = cbMatDynParam._m0[0u];
        float _2754 = roundEven(_2752.y);
        bool _2755 = _2754 == 3.0;
        float _2756 = log2(_2742);
        float _2763 = exp2(_2756 * cbSceneParam._m0[78u].x) * _2609;
        float _2764 = exp2(_2756 * cbSceneParam._m0[78u].y) * _2610;
        float _2765 = exp2(_2756 * cbSceneParam._m0[78u].z) * _2611;
        float _2772 = _792 + (-0.5);
        _2774 = cbMtdParam._m0[1u];
        _2776 = _2774.y * _2772;
        float _2779 = (_2754 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2780 = _2779 * (_2755 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2736)));
        _2781 = _2779 * (_2755 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2738)));
        _2782 = _2779 * (_2755 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2740)));
        _2783 = _2772 * 0.999000012874603271484375;
        _2793 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2793)
        {
            if ((cbInstanceData._m0[_844 + 7u].x + _2783) < 0.5)
            {
                _2996 = true;
                break;
            }
        }
        uint _2916 = _846 + uint(_2752.w);
        if ((cbInstanceData._m0[_2916].w < 1.0) && ((cbInstanceData._m0[_2916].w + _2783) < 0.5))
        {
            _2996 = true;
            break;
        }
        if ((_2776 + 1.0) < _2774.x)
        {
            _2996 = true;
            break;
        }
        _2996 = false;
        break;
    }
    float _3200;
    if (_2996)
    {
        discard_state = true;
        _3200 = 0.0;
    }
    else
    {
        _3200 = cbInstanceData._m0[_2612].w;
    }
    SV_Target.x = _2780;
    SV_Target.y = _2781;
    SV_Target.z = _2782;
    SV_Target.w = _3200;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2612].w;
    discard_exit();
}


