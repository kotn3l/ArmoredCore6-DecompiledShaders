#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _346;
float _3068;
float _3069;
float _3070;
float _3071;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _174 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _175 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _180 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _181 = _180 * _173;
    float _182 = _180 * _174;
    float _183 = _180 * _175;
    float _187 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _191 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _192 = _191 * TANGENT.x;
    float _193 = _191 * TANGENT.y;
    float _194 = _191 * TANGENT.z;
    float _239 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _249 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _239);
    float _250 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _239);
    float _251 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _239);
    float _276 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _283 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _292 = cbMtdParam._m0[23u].x + _249;
    float _293 = cbMtdParam._m0[23u].y + _250;
    float _294 = cbMtdParam._m0[23u].z + _251;
    float _311 = (-0.0) - dot(vec3(_292, _293, _294), vec3(_276 * _181, _276 * _182, _276 * _183));
    float _312 = (-0.0) - dot(vec3(_292, _293, _294), vec3(_283 * _192, _283 * _193, _283 * _194));
    float _313 = (-0.0) - dot(vec3(_292, _293, _294), vec3((-0.0) - (NORMAL.x * _187), (-0.0) - (NORMAL.y * _187), (-0.0) - (NORMAL.z * _187)));
    float _317 = inversesqrt(dot(vec3(_311, _312, _313), vec3(_311, _312, _313)));
    float _318 = _317 * _313;
    float _320 = (cbMtdParam._m0[19u].w * _311) * _317;
    float _322 = (cbMtdParam._m0[20u].x * _312) * _317;
    float _325 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _326 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _344;
    float _347;
    float _349;
    if (_320 > 0.0)
    {
        float _330 = (1.0 - _325) / _320;
        _344 = _330;
        _347 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_330 * _318)) * 0.16666667163372039794921875;
        _349 = (fract((_330 * _322) + _326) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_320 < 0.0)
        {
            float _345 = ((-0.0) - _325) / _320;
            frontier_phi_3_2_ladder = (fract(_345 * _318) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _345;
            frontier_phi_3_2_ladder_2 = (fract((_345 * _322) + _326) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _346;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _344 = frontier_phi_3_2_ladder_1;
        _347 = frontier_phi_3_2_ladder;
        _349 = frontier_phi_3_2_ladder_2;
    }
    float _375;
    float _377;
    float _379;
    if (_322 > 0.0)
    {
        float _362 = (1.0 - _326) / _322;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_362 < _344)
        {
            frontier_phi_8_5_ladder = (fract(_362 * _318) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_362 * _320) + _325) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _362;
        }
        else
        {
            frontier_phi_8_5_ladder = _349;
            frontier_phi_8_5_ladder_1 = _347;
            frontier_phi_8_5_ladder_2 = _344;
        }
        _375 = frontier_phi_8_5_ladder_2;
        _377 = frontier_phi_8_5_ladder_1;
        _379 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_322 < 0.0)
        {
            float _376 = ((-0.0) - _326) / _322;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_376 < _344)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_376 * _318) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_376 * _320) + _325) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _376;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _349;
                frontier_phi_8_6_ladder_9_ladder_1 = _347;
                frontier_phi_8_6_ladder_9_ladder_2 = _344;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _349;
            frontier_phi_8_6_ladder_1 = _347;
            frontier_phi_8_6_ladder_2 = _344;
        }
        _375 = frontier_phi_8_6_ladder_2;
        _377 = frontier_phi_8_6_ladder_1;
        _379 = frontier_phi_8_6_ladder;
    }
    float _383 = (_318 > 0.0) ? (cbMtdParam._m0[16u].w / _318) : 5000.0;
    float _396;
    float _397;
    if (_383 < _375)
    {
        _396 = ((_325 + cbMtdParam._m0[17u].x) + (_383 * _320)) * 0.16666667163372039794921875;
        _397 = (((_383 * _322) + _326) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _396 = _377;
        _397 = _379;
    }
    vec4 _400 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_396, _397));
    float _406 = _400.x * cbMtdParam._m0[13u].x;
    float _407 = _400.y * cbMtdParam._m0[13u].y;
    float _408 = _400.z * cbMtdParam._m0[13u].z;
    float _3080 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3091 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3102 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _427 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _431 = inversesqrt(dot(vec3(_249, _250, _251), vec3(_249, _250, _251)));
    float _432 = _249 * _431;
    float _433 = _250 * _431;
    float _434 = _251 * _431;
    vec4 _439 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _441 = _439.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _542 = sqrt(((_249 * _249) + (_250 * _250)) + (_251 * _251));
        float _549 = (cbMatDynParam._m0[5u].x * _542) + cbMatDynParam._m0[5u].y;
        float _3113 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        float _550 = isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0));
        float _554 = (cbMatDynParam._m0[5u].z * _542) + cbMatDynParam._m0[5u].w;
        float _3124 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0))) - _550)) + _550) < ((_441 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _473 = uint(roundEven(NORMAL.w)) * 13u;
    uint _474 = _473 + 9u;
    uint _475 = _474 + uint(cbMatDynParam._m0[0u].w);
    float _481 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0)))) * cbInstanceData._m0[_475].x;
    float _482 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0)))) * cbInstanceData._m0[_475].y;
    float _483 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0)))) * cbInstanceData._m0[_475].z;
    float _3135 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
    float _3146 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
    float _3157 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
    vec4 _495 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _459, cbSceneParam._m0[86u].y * _460));
    float _498 = _495.x * TEXCOORD.z;
    float _499 = (-0.0) - _432;
    float _500 = (-0.0) - _433;
    float _501 = (-0.0) - _434;
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _617 = (cbModelParam._m0[37u].x * ((((fma(_531, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _523)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _619 = (cbModelParam._m0[37u].y * ((((fma(_531, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _523)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _620 = (((((fma(_531, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _523)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_617, _619, _620), 0.0);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_617, _619, _620), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_617, _619, _620), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_617, _619, _620), 0.0);
        float _657 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _657 * (_623.x + (-0.5));
        float _660 = _657 * (_623.y + (-0.5));
        float _661 = _657 * (_623.z + (-0.5));
        float _668 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_630.x + (-0.5));
        float _670 = _668 * (_630.y + (-0.5));
        float _671 = _668 * (_630.z + (-0.5));
        float _678 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_637.x + (-0.5));
        float _680 = _678 * (_637.y + (-0.5));
        float _681 = _678 * (_637.z + (-0.5));
        float _688 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_644.x + (-0.5));
        float _690 = _688 * (_644.y + (-0.5));
        float _691 = _688 * (_644.z + (-0.5));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = _659 * 0.5;
        float _696 = _669 * 0.5;
        float _697 = _679 * 0.5;
        float _698 = dot(vec3(_695, _696, _697), vec3(_695, _696, _697));
        float _703 = (_698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_698);
        float _712 = (dot(vec3(0.0), vec3(_703 * _695, _703 * _696, _703 * _697)) + 1.0) * 0.5;
        float _3183 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _722 = sqrt(((_696 * _696) + (_695 * _695)) + (_697 * _697)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _3194 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _3205 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))) * (_724 + 1.0))) + _729) * _692;
        float _739 = _660 * 0.5;
        float _740 = _670 * 0.5;
        float _741 = _680 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _755 = (dot(vec3(0.0), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3216 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _764 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3227 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3238 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0))) * (_766 + 1.0))) + _771) * _693;
        float _781 = _661 * 0.5;
        float _782 = _671 * 0.5;
        float _783 = _681 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(0.0), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3249 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3260 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3271 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))) * (_808 + 1.0))) + _813) * _694;
        _830 = _661;
        _831 = _660;
        _832 = _659;
        _833 = _671;
        _834 = _670;
        _835 = _669;
        _836 = _681;
        _837 = _680;
        _838 = _679;
        _839 = _694;
        _840 = _693;
        _841 = _692;
        _842 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
        _843 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
    }
    else
    {
        _830 = _346;
        _831 = _346;
        _832 = _346;
        _833 = _346;
        _834 = _346;
        _835 = _346;
        _836 = _346;
        _837 = _346;
        _838 = _346;
        _839 = _346;
        _840 = _346;
        _841 = _346;
        _842 = 0.0;
        _843 = 0.0;
        _844 = 0.0;
    }
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _901 = (cbModelParam._m0[38u].x * ((((fma(_531, cbModelParam._m0[30u].z, fma(_527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _523)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _902 = (cbModelParam._m0[38u].y * ((((fma(_531, cbModelParam._m0[31u].z, fma(_527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _523)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _903 = (((((fma(_531, cbModelParam._m0[32u].z, fma(_527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _523)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _938 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_905.x + (-0.5));
        float _940 = _938 * (_905.y + (-0.5));
        float _941 = _938 * (_905.z + (-0.5));
        float _948 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_912.x + (-0.5));
        float _950 = _948 * (_912.y + (-0.5));
        float _951 = _948 * (_912.z + (-0.5));
        float _958 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_919.x + (-0.5));
        float _960 = _958 * (_919.y + (-0.5));
        float _961 = _958 * (_919.z + (-0.5));
        float _968 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_926.x + (-0.5));
        float _970 = _968 * (_926.y + (-0.5));
        float _971 = _968 * (_926.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(0.0), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3312 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3323 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3334 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))) * (_1002 + 1.0))) + _1007) * _972;
        float _1017 = _940 * 0.5;
        float _1018 = _950 * 0.5;
        float _1019 = _960 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(0.0), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3345 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3356 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3367 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * (_1044 + 1.0))) + _1049) * _973;
        float _1059 = _941 * 0.5;
        float _1060 = _951 * 0.5;
        float _1061 = _961 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(0.0), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3400 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_1086 + 1.0))) + _1091) * _974;
        _1108 = _941;
        _1109 = _940;
        _1110 = _939;
        _1111 = _951;
        _1112 = _950;
        _1113 = _949;
        _1114 = _961;
        _1115 = _960;
        _1116 = _959;
        _1117 = _974;
        _1118 = _973;
        _1119 = _972;
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _346;
        _1109 = _346;
        _1110 = _346;
        _1111 = _346;
        _1112 = _346;
        _1113 = _346;
        _1114 = _346;
        _1115 = _346;
        _1116 = _346;
        _1117 = _346;
        _1118 = _346;
        _1119 = _346;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _842)) + _842;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _843)) + _843;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _844)) + _844;
    float _1155 = fma(_1134, cbSceneParam._m0[89u].z, fma(_1133, cbSceneParam._m0[89u].y, _1132 * cbSceneParam._m0[89u].x));
    float _1158 = fma(_1134, cbSceneParam._m0[90u].z, fma(_1133, cbSceneParam._m0[90u].y, _1132 * cbSceneParam._m0[90u].x));
    float _1161 = fma(_1134, cbSceneParam._m0[91u].z, fma(_1133, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1132));
    float _1176 = _432 * (-0.5);
    float _1177 = _433 * (-0.5);
    float _1178 = _434 * (-0.5);
    float _1179 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1182 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1185 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1219;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1192 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_830, _833, _836, _839));
        float _1196 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_831, _834, _837, _840));
        float _1200 = dot(vec4(_1176, _1177, _1178, 1.0), vec4(_832, _835, _838, _841));
        float _1207 = dot(vec4(cbModelParam._m0[39u]), vec4(_1176, _1177, _1178, 1.0));
        _1219 = dot(vec3(isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1207) ? 0.0 : (isnan(0.0) ? _1207 : max(0.0, _1207))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1219 = 1.0;
    }
    float _1230;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1221 = dot(vec4(cbModelParam._m0[40u]), vec4(_1176, _1177, _1178, 1.0));
        _1230 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1221) ? 0.0 : (isnan(0.0) ? _1221 : max(0.0, _1221))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1230 = 1.0;
    }
    float _1234 = (_1230 * cbModelParam._m0[1u].x) + (_1219 * (1.0 - cbModelParam._m0[1u].x));
    float _1244 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1327;
    float _1329;
    float _1331;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1294 = fma(_531, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523)) + cbModelParam._m0[13u].w;
        float _1298 = fma(_531, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523)) + cbModelParam._m0[14u].w;
        float _1302 = fma(_531, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523)) + cbModelParam._m0[15u].w;
        float _1305 = fma(_501, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499));
        float _1308 = fma(_501, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499));
        float _1311 = fma(_501, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499));
        float _1337;
        if (_1305 > 0.0)
        {
            _1337 = abs((1.0 - _1294) / _1305);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1294 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1337 = frontier_phi_29_27_ladder;
        }
        float _1510;
        if (_1308 > 0.0)
        {
            _1510 = abs((1.0 - _1298) / _1308);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1298 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1510 = frontier_phi_38_34_ladder;
        }
        float _1906;
        if (_1311 > 0.0)
        {
            _1906 = abs((1.0 - _1302) / _1311);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1302 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1906 = frontier_phi_50_45_ladder;
        }
        float _1908 = isnan(_1510) ? _1337 : (isnan(_1337) ? _1510 : min(_1337, _1510));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1305) + _1294;
        float _1914 = (_1909 * _1308) + _1298;
        float _1915 = (_1909 * _1311) + _1302;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1916;
        float _1920 = _1916 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 > _1920) || ((_1914 < _1918) || ((_1913 < _1918) || (_1913 > _1920))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1915, cbModelParam._m0[9u].z, fma(_1914, cbModelParam._m0[9u].y, _1913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1915, cbModelParam._m0[10u].z, fma(_1914, cbModelParam._m0[10u].y, _1913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1915, cbModelParam._m0[11u].z, fma(_1914, cbModelParam._m0[11u].y, _1913 * cbModelParam._m0[11u].x))), _1244);
            frontier_phi_28_50_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1327 = frontier_phi_28_50_ladder_2;
        _1329 = frontier_phi_28_50_ladder_1;
        _1331 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_499, _500, _501), _1244);
        _1327 = _1315.x * cbModelParam._m0[1u].y;
        _1329 = _1315.y * cbModelParam._m0[1u].y;
        _1331 = _1315.z * cbModelParam._m0[1u].y;
    }
    float _1334 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1425;
    float _1427;
    float _1429;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1389 = fma(_531, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523)) + cbModelParam._m0[21u].w;
        float _1393 = fma(_531, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523)) + cbModelParam._m0[22u].w;
        float _1397 = fma(_531, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523)) + cbModelParam._m0[23u].w;
        float _1400 = fma(_501, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499));
        float _1403 = fma(_501, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499));
        float _1406 = fma(_501, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499));
        float _1515;
        if (_1400 > 0.0)
        {
            _1515 = abs((1.0 - _1389) / _1400);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1389 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1515 = frontier_phi_40_36_ladder;
        }
        float _1933;
        if (_1403 > 0.0)
        {
            _1933 = abs((1.0 - _1393) / _1403);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1393 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _1933 = frontier_phi_52_47_ladder;
        }
        float _2280;
        if (_1406 > 0.0)
        {
            _2280 = abs((1.0 - _1397) / _1406);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1397 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2280 = frontier_phi_64_59_ladder;
        }
        float _2282 = isnan(_1933) ? _1515 : (isnan(_1515) ? _1933 : min(_1515, _1933));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1400) + _1389;
        float _2288 = (_2283 * _1403) + _1393;
        float _2289 = (_2283 * _1406) + _1397;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2290;
        float _2293 = _2290 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2289 > _2293) || ((_2289 < _2291) || ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 < _2291) || (_2287 > _2293))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2289, cbModelParam._m0[17u].z, fma(_2288, cbModelParam._m0[17u].y, _2287 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2289, cbModelParam._m0[18u].z, fma(_2288, cbModelParam._m0[18u].y, _2287 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2289, cbModelParam._m0[19u].z, fma(_2288, cbModelParam._m0[19u].y, _2287 * cbModelParam._m0[19u].x))), _1334);
            frontier_phi_37_64_ladder = _2423.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2423.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2423.x * cbModelParam._m0[1u].z;
        }
        _1425 = frontier_phi_37_64_ladder_2;
        _1427 = frontier_phi_37_64_ladder_1;
        _1429 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_499, _500, _501), _1334);
        _1425 = _1409.x * cbModelParam._m0[1u].z;
        _1427 = _1409.y * cbModelParam._m0[1u].z;
        _1429 = _1409.z * cbModelParam._m0[1u].z;
    }
    float _1441 = _498 * 0.01200000010430812835693359375;
    float _1443 = _1441 * ((cbModelParam._m0[1u].w * (_1425 - _1327)) + _1327);
    float _1444 = _1441 * ((cbModelParam._m0[1u].w * (_1427 - _1329)) + _1329);
    float _1445 = _1441 * ((cbModelParam._m0[1u].w * (_1429 - _1331)) + _1331);
    float _1448 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, _1443 * cbSceneParam._m0[91u].x));
    float _1489 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1493 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1497 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1501 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1502 = _1489 / _1501;
    float _1503 = _1493 / _1501;
    float _1504 = _1497 / _1501;
    float _1652;
    float _1653;
    float _1654;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1531 = ((uint(_1504 > cbSceneParam._m0[59u].y) + uint(_1504 > cbSceneParam._m0[59u].x)) + uint(_1504 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1532 = _1531 + 43u;
        uint _1540 = _1531 + 44u;
        uint _1548 = _1531 + 45u;
        uint _1556 = _1531 + 46u;
        float _1567 = fma(_1501, cbSceneParam._m0[_1532].w, fma(_1497, cbSceneParam._m0[_1532].z, fma(_1493, cbSceneParam._m0[_1532].y, _1489 * cbSceneParam._m0[_1532].x)));
        float _1571 = fma(_1501, cbSceneParam._m0[_1540].w, fma(_1497, cbSceneParam._m0[_1540].z, fma(_1493, cbSceneParam._m0[_1540].y, _1489 * cbSceneParam._m0[_1540].x)));
        float _1579 = fma(_1501, cbSceneParam._m0[_1556].w, fma(_1497, cbSceneParam._m0[_1556].z, fma(_1493, cbSceneParam._m0[_1556].y, _1489 * cbSceneParam._m0[_1556].x)));
        float _1584 = cbSceneParam._m0[33u].z * _1579;
        float _1586 = cbSceneParam._m0[33u].w * _1579;
        float _1589 = fma(_1501, cbSceneParam._m0[_1548].w, fma(_1497, cbSceneParam._m0[_1548].z, fma(_1493, cbSceneParam._m0[_1548].y, _1489 * cbSceneParam._m0[_1548].x))) / _1579;
        float _1637 = (cbSceneParam._m0[33u].x - sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504))) * cbSceneParam._m0[33u].y;
        float _3526 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1645 = (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1584 + _1567) / _1579, (_1586 + _1571) / _1579), _1589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1586 + _1567) / _1579, (_1571 - _1584) / _1579), _1589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1567 - _1584) / _1579, (_1571 - _1586) / _1579), _1589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1567 - _1586) / _1579, (_1584 + _1571) / _1579), _1589), 0.0)).x), vec4(0.25)));
        _1652 = 1.0 - (_1645 * cbSceneParam._m0[34u].x);
        _1653 = 1.0 - (_1645 * cbSceneParam._m0[34u].y);
        _1654 = 1.0 - (_1645 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1652 = 1.0;
        _1653 = 1.0;
        _1654 = 1.0;
    }
    float _1718;
    float _1720;
    float _1722;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1706 = fma(_1501, cbSceneParam._m0[63u].w, fma(_1497, cbSceneParam._m0[63u].z, fma(_1493, cbSceneParam._m0[63u].y, _1489 * cbSceneParam._m0[63u].x)));
        float _1707 = fma(_1501, cbSceneParam._m0[60u].w, fma(_1497, cbSceneParam._m0[60u].z, fma(_1493, cbSceneParam._m0[60u].y, _1489 * cbSceneParam._m0[60u].x))) / _1706;
        float _1708 = fma(_1501, cbSceneParam._m0[61u].w, fma(_1497, cbSceneParam._m0[61u].z, fma(_1493, cbSceneParam._m0[61u].y, _1489 * cbSceneParam._m0[61u].x))) / _1706;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1707 >= cbSceneParam._m0[64u].x) && (_1708 >= cbSceneParam._m0[64u].y)) && (_1707 <= cbSceneParam._m0[64u].z)) && (_1708 <= cbSceneParam._m0[64u].w))
        {
            float _1946 = fma(_1501, cbSceneParam._m0[62u].w, fma(_1497, cbSceneParam._m0[62u].z, fma(_1493, cbSceneParam._m0[62u].y, _1489 * cbSceneParam._m0[62u].x))) / _1706;
            float _1950 = isnan(cbSceneParam._m0[41u].w) ? _1946 : (isnan(_1946) ? cbSceneParam._m0[41u].w : max(_1946, cbSceneParam._m0[41u].w));
            float _1993 = (cbSceneParam._m0[33u].x - sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504))) * cbSceneParam._m0[33u].y;
            float _3542 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
            float _2000 = (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1707, cbSceneParam._m0[33u].w + _1708), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1707, _1708 - cbSceneParam._m0[33u].z), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1707 - cbSceneParam._m0[33u].z, _1708 - cbSceneParam._m0[33u].w), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1707 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1708), _1950), 0.0)).x), vec4(0.25)));
            float _2004 = 1.0 - (_2000 * cbSceneParam._m0[34u].x);
            float _2005 = 1.0 - (_2000 * cbSceneParam._m0[34u].y);
            float _2006 = 1.0 - (_2000 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2006) ? _1654 : (isnan(_1654) ? _2006 : min(_1654, _2006));
            frontier_phi_49_48_ladder_1 = isnan(_2005) ? _1653 : (isnan(_1653) ? _2005 : min(_1653, _2005));
            frontier_phi_49_48_ladder_2 = isnan(_2004) ? _1652 : (isnan(_1652) ? _2004 : min(_1652, _2004));
        }
        else
        {
            frontier_phi_49_48_ladder = _1654;
            frontier_phi_49_48_ladder_1 = _1653;
            frontier_phi_49_48_ladder_2 = _1652;
        }
        _1718 = frontier_phi_49_48_ladder_2;
        _1720 = frontier_phi_49_48_ladder_1;
        _1722 = frontier_phi_49_48_ladder;
    }
    else
    {
        _1718 = _1652;
        _1720 = _1653;
        _1722 = _1654;
    }
    uvec4 _1727 = floatBitsToUint(cbInstanceData._m0[_473 + 5u]);
    uint _1729 = _1727.x * 14u;
    uint _1730 = _1729 + 13u;
    float _1735 = _498 + (-1.0);
    float _1739 = (cbLight._m0[_1730].x * _1735) + 1.0;
    float _1740 = (cbLight._m0[_1730].y * _1735) + 1.0;
    uint _1741 = _1729 + 5u;
    float _1747 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1751 = _1729 + 4u;
    float _1761 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1765 = _1729 | 1u;
    float _1776 = dot(vec3(cbLight._m0[_1729].xyz), vec3(0.0));
    float _1779 = dot(vec3(cbLight._m0[_1765].xyz), vec3(0.0));
    float _3578 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _3589 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1784 = (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 0.3183098733425140380859375;
    float _1786 = (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 0.3183098733425140380859375;
    float _1793 = ((cbLight._m0[_1741].x * _1747) * _1786) + (((cbLight._m0[_1751].x * _1718) * _1761) * _1784);
    float _1794 = ((_1747 * cbLight._m0[_1741].y) * _1786) + (((cbLight._m0[_1751].y * _1720) * _1761) * _1784);
    float _1795 = ((_1747 * cbLight._m0[_1741].z) * _1786) + (((cbLight._m0[_1751].z * _1722) * _1761) * _1784);
    uint _1796 = _1729 + 8u;
    float _1802 = cbLight._m0[_1729].x + _432;
    float _1803 = cbLight._m0[_1729].y + _433;
    float _1804 = cbLight._m0[_1729].z + _434;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1812 = dot(vec3(0.0), vec3(cbLight._m0[_1729].xyz));
    float _3600 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _1816 = dot(vec3(0.0), vec3(_432, _433, _434));
    float _3611 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _1820 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1802 * _1808, _1803 * _1808, _1804 * _1808));
    float _3622 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1837 = (0.5 / ((_1815 + 9.9999999392252902907785028219223e-09) + _1819)) * _1815;
    float _3633 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 0.31831014156341552734375;
    uint _1853 = _1729 + 9u;
    float _1859 = cbLight._m0[_1765].x + _432;
    float _1860 = cbLight._m0[_1765].y + _433;
    float _1861 = cbLight._m0[_1765].z + _434;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1869 = dot(vec3(0.0), vec3(cbLight._m0[_1765].xyz));
    float _3644 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1859 * _1865, _1860 * _1865, _1861 * _1865));
    float _3655 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1882 = (exp2(log2(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1886 = (0.5 / ((_1872 + 9.9999999392252902907785028219223e-09) + _1819)) * _1872;
    float _3666 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.31831014156341552734375;
    float _1898 = (((_1882 * cbLight._m0[_1853].x) * _1888) * _1747) + ((((cbLight._m0[_1796].x * _1718) * _1831) * _1839) * _1761);
    float _1899 = (((_1882 * cbLight._m0[_1853].y) * _1888) * _1747) + ((((cbLight._m0[_1796].y * _1720) * _1831) * _1839) * _1761);
    float _1900 = (((_1882 * cbLight._m0[_1853].z) * _1888) * _1747) + ((((cbLight._m0[_1796].z * _1722) * _1831) * _1839) * _1761);
    float _2063;
    float _2065;
    float _2067;
    float _2069;
    float _2071;
    float _2073;
    if (_1727.y == 0u)
    {
        uvec4 _2018 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2019 = _2018.x;
        uint _2030 = uint((float(_2018.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _2019))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _2019)));
        float _2040 = (log2(_1504 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2041 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        uint _2044 = uint(isnan(14.0) ? _2041 : (isnan(_2041) ? 14.0 : min(_2041, 14.0)));
        uvec4 _2049 = texelFetch(g_lightClusterGridBuffer, int(((_2044 << 2u) + (_2030 << 6u)) >> 2u));
        uint _2050 = _2049.x;
        uint _2051 = _2018.z;
        float _2158;
        float _2160;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        if (((((1u << ((_2051 >> 4u) & 15u)) + 4294967295u) & _2050) == 0u) || ((_2051 & 240u) == 0u))
        {
            _2158 = 0.0;
            _2160 = 0.0;
            _2162 = 0.0;
            _2164 = 0.0;
            _2166 = 0.0;
            _2168 = 0.0;
        }
        else
        {
            float _2159;
            float _2161;
            float _2163;
            float _2165;
            float _2167;
            float _2169;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            uint _2341 = 0u;
            uint _2350;
            bool _2351;
            for (;;)
            {
                _2350 = texelFetch(g_lightClassification, int((((_2044 << 5u) + (_2030 << 9u)) + (_2341 << 2u)) >> 2u)).x;
                _2351 = _2350 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2351)
                {
                    frontier_phi_75_pred = _2338;
                    frontier_phi_75_pred_1 = _2340;
                    frontier_phi_75_pred_2 = _2339;
                    frontier_phi_75_pred_3 = _2337;
                    frontier_phi_75_pred_4 = _2336;
                    frontier_phi_75_pred_5 = _2335;
                }
                else
                {
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    uint _2507;
                    _2501 = _2335;
                    _2502 = _2336;
                    _2503 = _2337;
                    _2504 = _2338;
                    _2505 = _2339;
                    _2506 = _2340;
                    _2507 = _2350;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    for (;;)
                    {
                        uint _2511 = uint(findLSB(_2507)) + (_2341 << 5u);
                        uint _2508 = (_2507 + 4294967295u) & _2507;
                        uint _2513 = _2511 * 48u;
                        vec4 _2527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2513)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 3u)).x));
                        uint _2533 = (_2511 * 48u) + 4u;
                        vec4 _2546 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2533)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 3u)).x));
                        uint _2552 = (_2511 * 48u) + 8u;
                        vec3 _2563 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2552)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 2u)).x));
                        float _2567 = _2527.x - _1502;
                        float _2568 = _2527.y - _1503;
                        float _2569 = _2527.z - _1504;
                        float _2570 = dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569));
                        float _2573 = inversesqrt(_2570);
                        float _2582 = 1.0 - (_2570 * _2527.w);
                        float _3687 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
                        float _2583 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
                        float _2584 = sqrt(_2570) * _2546.w;
                        float _2587 = 1.39999997615814208984375 / (_2584 + 1.39999997615814208984375);
                        float _2588 = _2587 * _2587;
                        float _2591 = ((1.0 - _2588) * dot(vec3(0.0), vec3(_2573 * _2567, _2573 * _2568, _2573 * _2569))) + _2588;
                        float _2594 = _2584 * _2584;
                        float _2598 = ((isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0))) * _2583) / ((_2594 * 0.699999988079071044921875) + 1.0);
                        float _2602 = (-0.0) - _1502;
                        float _2603 = (-0.0) - _1503;
                        float _2604 = (-0.0) - _1504;
                        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
                        float _2612 = dot(vec3(0.0), vec3(_2608 * _2602, _2608 * _2603, _2608 * _2604));
                        float _3703 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                        float _3714 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _2616 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
                        float _2620 = (0.5 / (((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) + 9.9999999392252902907785028219223e-09) + _2616)) * _2616;
                        float _3725 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2629 = (((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 3.1415927410125732421875) / ((_2594 * 2.1991131305694580078125) + 3.141590118408203125)) * _2583;
                        _2431 = (_2598 * _2546.x) + _2504;
                        _2432 = (_2598 * _2546.y) + _2505;
                        _2433 = (_2598 * _2546.z) + _2506;
                        _2428 = (_2629 * _2563.x) + _2501;
                        _2429 = (_2629 * _2563.y) + _2502;
                        _2430 = (_2629 * _2563.z) + _2503;
                        if (_2508 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2501 = _2428;
                            _2502 = _2429;
                            _2503 = _2430;
                            _2504 = _2431;
                            _2505 = _2432;
                            _2506 = _2433;
                            _2507 = _2508;
                        }
                    }
                    frontier_phi_75_pred = _2431;
                    frontier_phi_75_pred_1 = _2433;
                    frontier_phi_75_pred_2 = _2432;
                    frontier_phi_75_pred_3 = _2430;
                    frontier_phi_75_pred_4 = _2429;
                    frontier_phi_75_pred_5 = _2428;
                }
                _2165 = frontier_phi_75_pred;
                _2169 = frontier_phi_75_pred_1;
                _2167 = frontier_phi_75_pred_2;
                _2163 = frontier_phi_75_pred_3;
                _2161 = frontier_phi_75_pred_4;
                _2159 = frontier_phi_75_pred_5;
                uint _2342 = _2341 + 1u;
                if (_2342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2335 = _2159;
                    _2336 = _2161;
                    _2337 = _2163;
                    _2338 = _2165;
                    _2339 = _2167;
                    _2340 = _2169;
                    _2341 = _2342;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2158 = _2159;
            _2160 = _2161;
            _2162 = _2163;
            _2164 = _2165;
            _2166 = _2167;
            _2168 = _2169;
        }
        uvec4 _2172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2173 = _2172.z;
        uint _2175 = (_2173 >> 8u) & 15u;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        if (((4294967295u << _2175) & _2050) == 0u)
        {
            _2306 = _2158;
            _2308 = _2160;
            _2310 = _2162;
            _2312 = _2164;
            _2314 = _2166;
            _2316 = _2168;
        }
        else
        {
            float _2331 = inversesqrt(dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504)));
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2175 < ((_2173 >> 12u) & 15u))
            {
                float _2307;
                float _2309;
                float _2311;
                float _2313;
                float _2315;
                float _2317;
                float _2484 = _2158;
                float _2485 = _2160;
                float _2486 = _2162;
                float _2487 = _2164;
                float _2488 = _2166;
                float _2489 = _2168;
                uint _2490 = _2175;
                uint _2499;
                bool _2500;
                for (;;)
                {
                    _2499 = texelFetch(g_lightClassification, int((((_2044 << 5u) + (_2030 << 9u)) + (_2490 << 2u)) >> 2u)).x;
                    _2500 = _2499 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2500)
                    {
                        frontier_phi_86_pred = _2489;
                        frontier_phi_86_pred_1 = _2488;
                        frontier_phi_86_pred_2 = _2487;
                        frontier_phi_86_pred_3 = _2486;
                        frontier_phi_86_pred_4 = _2485;
                        frontier_phi_86_pred_5 = _2484;
                    }
                    else
                    {
                        float _2643;
                        float _2644;
                        float _2645;
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2656 = _2484;
                        float _2657 = _2485;
                        float _2658 = _2486;
                        float _2659 = _2487;
                        float _2660 = _2488;
                        float _2661 = _2489;
                        uint _2662 = _2499;
                        uint _2663;
                        vec4 _2688;
                        float _2689;
                        vec4 _2704;
                        vec3 _2716;
                        vec4 _2731;
                        vec4 _2746;
                        float _2792;
                        bool _2793;
                        for (;;)
                        {
                            uint _2673 = ((_2490 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2662));
                            _2663 = (_2662 + 4294967295u) & _2662;
                            uint _2675 = _2673 * 40u;
                            _2688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 3u)).x));
                            _2689 = _2688.w;
                            uint _2691 = (_2673 * 40u) + 4u;
                            _2704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 3u)).x));
                            uint _2706 = (_2673 * 40u) + 8u;
                            _2716 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 2u)).x));
                            uint _2718 = (_2673 * 40u) + 16u;
                            _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            uint _2733 = (_2673 * 40u) + 20u;
                            _2746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 3u)).x));
                            uint _2748 = (_2673 * 40u) + 24u;
                            vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 3u)).x));
                            uint _2767 = (_2673 * 40u) + 28u;
                            vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 3u)).x));
                            _2792 = fma(_1504, _2780.z, fma(_1503, _2780.y, _2780.x * _1502)) + _2780.w;
                            _2793 = !((fma(_1504, _2761.z, fma(_1503, _2761.y, _2761.x * _1502)) + _2761.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_2793)
                            {
                                float _2820 = _2688.x - _1502;
                                float _2821 = _2688.y - _1503;
                                float _2822 = _2688.z - _1504;
                                float _2823 = dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822));
                                float _2826 = inversesqrt(_2823);
                                float _2827 = _2826 * _2820;
                                float _2828 = _2826 * _2821;
                                float _2829 = _2826 * _2822;
                                float _2833 = 1.0 - (_2823 / (_2689 * _2689));
                                float _3736 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                                float _2834 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
                                float _2838 = sqrt(_2823) * _2704.w;
                                float _2840 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                                float _2841 = _2840 * _2840;
                                float _2842 = 1.0 - _2841;
                                float _2844 = (_2842 * dot(vec3(_2827, _2828, _2829), vec3(0.0))) + _2841;
                                float _2847 = _2838 * _2838;
                                float _2851 = (fma(_1504, _2731.z, fma(_1503, _2731.y, _2731.x * _1502)) + _2731.w) / _2792;
                                float _2852 = (fma(_1504, _2746.z, fma(_1503, _2746.y, _2746.x * _1502)) + _2746.w) / _2792;
                                float _2856 = 1.0 - dot(vec2(_2851, _2852), vec2(_2851, _2852));
                                float _3752 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                                float _2857 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
                                float _2858 = _2857 * (((isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))) * _2834) / ((_2847 * 0.699999988079071044921875) + 1.0));
                                float _2868 = dot(vec3(0.0), vec3((-0.0) - (_1502 * _2331), (-0.0) - (_1503 * _2331), (-0.0) - (_1504 * _2331)));
                                float _3763 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                                float _2876 = (_2842 * dot(vec3(0.0), vec3(_2827, _2828, _2829))) + _2841;
                                float _3774 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                                float _2877 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
                                float _2881 = (0.5 / (((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) + 9.9999999392252902907785028219223e-09) + _2877)) * _2877;
                                float _3785 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2888 = (_2857 * _2834) * (((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * 3.1415927410125732421875) / ((_2847 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_92_pred = _2858 * _2704.z;
                                frontier_phi_92_pred_1 = _2858 * _2704.y;
                                frontier_phi_92_pred_2 = _2858 * _2704.x;
                                frontier_phi_92_pred_3 = _2888 * _2716.z;
                                frontier_phi_92_pred_4 = _2888 * _2716.y;
                                frontier_phi_92_pred_5 = _2888 * _2716.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _2897 = frontier_phi_92_pred;
                            _2896 = frontier_phi_92_pred_1;
                            _2895 = frontier_phi_92_pred_2;
                            _2894 = frontier_phi_92_pred_3;
                            _2893 = frontier_phi_92_pred_4;
                            _2892 = frontier_phi_92_pred_5;
                            _2646 = _2895 + _2659;
                            _2647 = _2896 + _2660;
                            _2648 = _2897 + _2661;
                            _2643 = _2892 + _2656;
                            _2644 = _2893 + _2657;
                            _2645 = _2894 + _2658;
                            if (_2663 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2656 = _2643;
                                _2657 = _2644;
                                _2658 = _2645;
                                _2659 = _2646;
                                _2660 = _2647;
                                _2661 = _2648;
                                _2662 = _2663;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2648;
                        frontier_phi_86_pred_1 = _2647;
                        frontier_phi_86_pred_2 = _2646;
                        frontier_phi_86_pred_3 = _2645;
                        frontier_phi_86_pred_4 = _2644;
                        frontier_phi_86_pred_5 = _2643;
                    }
                    _2317 = frontier_phi_86_pred;
                    _2315 = frontier_phi_86_pred_1;
                    _2313 = frontier_phi_86_pred_2;
                    _2311 = frontier_phi_86_pred_3;
                    _2309 = frontier_phi_86_pred_4;
                    _2307 = frontier_phi_86_pred_5;
                    uint _2491 = _2490 + 1u;
                    if (_2491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2484 = _2307;
                        _2485 = _2309;
                        _2486 = _2311;
                        _2487 = _2313;
                        _2488 = _2315;
                        _2489 = _2317;
                        _2490 = _2491;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2313;
                frontier_phi_66_67_ladder_1 = _2317;
                frontier_phi_66_67_ladder_2 = _2315;
                frontier_phi_66_67_ladder_3 = _2311;
                frontier_phi_66_67_ladder_4 = _2309;
                frontier_phi_66_67_ladder_5 = _2307;
            }
            else
            {
                frontier_phi_66_67_ladder = _2164;
                frontier_phi_66_67_ladder_1 = _2168;
                frontier_phi_66_67_ladder_2 = _2166;
                frontier_phi_66_67_ladder_3 = _2162;
                frontier_phi_66_67_ladder_4 = _2160;
                frontier_phi_66_67_ladder_5 = _2158;
            }
            _2306 = frontier_phi_66_67_ladder_5;
            _2308 = frontier_phi_66_67_ladder_4;
            _2310 = frontier_phi_66_67_ladder_3;
            _2312 = frontier_phi_66_67_ladder;
            _2314 = frontier_phi_66_67_ladder_2;
            _2316 = frontier_phi_66_67_ladder_1;
        }
        float _2321 = isnan(1.0) ? _498 : (isnan(_498) ? 1.0 : min(_498, 1.0));
        _2063 = (_2321 * _2312) + _1793;
        _2065 = (_2321 * _2314) + _1794;
        _2067 = (_2321 * _2316) + _1795;
        _2069 = ((_2306 * 0.039999999105930328369140625) * _2321) + _1898;
        _2071 = ((_2308 * 0.039999999105930328369140625) * _2321) + _1899;
        _2073 = ((_2310 * 0.039999999105930328369140625) * _2321) + _1900;
    }
    else
    {
        _2063 = _1793;
        _2065 = _1794;
        _2067 = _1795;
        _2069 = _1898;
        _2071 = _1899;
        _2073 = _1900;
    }
    float _3801 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3812 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3823 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _2090 = ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_2063 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _498))) + ((_2069 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _1234)) * cbPerFrame._m0[3u].x);
    float _2091 = ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_2065 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _498))) + ((_2071 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1234)) * cbPerFrame._m0[3u].x);
    float _2092 = ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_2067 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _498))) + ((_2073 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1234)) * cbPerFrame._m0[3u].x);
    float _2093 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2094 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    uint _2096 = _473 + 6u;
    float _2104 = _459 / cbSceneParam._m0[86u].x;
    float _2105 = _460 / cbSceneParam._m0[86u].y;
    vec4 _2119 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2104, _2105, (log2((isnan(cbSceneParam._m0[77u].w) ? _427 : (isnan(_427) ? cbSceneParam._m0[77u].w : min(_427, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2121 = _2119.x;
    float _2122 = _2119.y;
    float _2123 = _2119.z;
    float _2124 = _2119.w;
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    if (_427 > cbSceneParam._m0[78u].w)
    {
        float _2183 = isnan(_427) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _427 : min(cbSceneParam._m0[80u].w, _427));
        float _2184 = _2183 / _427;
        float _2195 = _2184 * _249;
        float _2196 = _250 * _2184;
        float _2197 = (-0.0) - _2196;
        float _2198 = _2184 * _251;
        float _2200 = (cbSceneParam._m0[77u].w * _2197) / _2183;
        float _2201 = _2200 + cbSceneParam._m0[79u].w;
        float _2202 = cbSceneParam._m0[79u].w - _2196;
        float _2208 = sqrt(((_2195 * _2195) + (_2196 * _2196)) + (_2198 * _2198));
        float _2211 = (1.0 - (cbSceneParam._m0[77u].w / _2183)) * _2208;
        float _2216 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2218 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2441;
        if (abs((_2197 - _2200) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2441 = ((((_2201 > 0.0) ? exp2(_2216 * _2201) : (2.0 - exp2(_2218 * _2201))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2211;
        }
        else
        {
            float _2364 = 1.0 / cbSceneParam._m0[80u].x;
            float _2365 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : max(_2201, _2202));
            float _2366 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : min(_2201, _2202));
            float _2375 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : min(_2365, 0.0));
            float _2376 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : min(_2366, 0.0));
            _2441 = ((abs(_2208 / _2197) * cbSceneParam._m0[80u].y) * ((((_2375 - _2376) * 2.0) - ((exp2(_2216 * (isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0)))) - exp2(_2216 * (isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0))))) * _2364)) - ((exp2(_2218 * _2375) - exp2(_2218 * _2376)) * _2364))) + (_2211 * cbSceneParam._m0[80u].z);
        }
        vec4 _2443 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2104, _2105, 1.0), 0.0);
        float _2452 = exp2((_2441 * (-1.44269502162933349609375)) * (1.0 - _2443.w));
        float _2453 = log2(_2452);
        float _2469 = log2(_2124);
        _2220 = (exp2(_2469 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2453 * cbSceneParam._m0[78u].x)) * _2443.x) / cbSceneParam._m0[78u].x)) + _2121;
        _2222 = (exp2(_2469 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2453 * cbSceneParam._m0[78u].y)) * _2443.y) / cbSceneParam._m0[78u].y)) + _2122;
        _2224 = (exp2(_2469 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2453 * cbSceneParam._m0[78u].z)) * _2443.z) / cbSceneParam._m0[78u].z)) + _2123;
        _2226 = _2452 * _2124;
    }
    else
    {
        _2220 = _2121;
        _2222 = _2122;
        _2224 = _2123;
        _2226 = _2124;
    }
    bool _2479;
    vec4 _2236;
    vec4 _2259;
    float _2261;
    float _2265;
    float _2266;
    float _2267;
    float _2268;
    bool _2279;
    for (;;)
    {
        _2236 = cbMatDynParam._m0[0u];
        float _2238 = roundEven(_2236.y);
        bool _2239 = _2238 == 3.0;
        float _2241 = log2(_2226);
        float _2248 = exp2(_2241 * cbSceneParam._m0[78u].x) * _2093;
        float _2249 = exp2(_2241 * cbSceneParam._m0[78u].y) * _2094;
        float _2250 = exp2(_2241 * cbSceneParam._m0[78u].z) * _2095;
        float _2257 = _441 + (-0.5);
        _2259 = cbMtdParam._m0[1u];
        _2261 = _2259.y * _2257;
        float _2264 = (_2238 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2265 = _2264 * (_2239 ? _2248 : (_2248 + (cbSceneParam._m0[72u].w * _2220)));
        _2266 = _2264 * (_2239 ? _2249 : (_2249 + (cbSceneParam._m0[72u].w * _2222)));
        _2267 = _2264 * (_2239 ? _2250 : (_2250 + (cbSceneParam._m0[72u].w * _2224)));
        _2268 = _2257 * 0.999000012874603271484375;
        _2279 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2279)
        {
            if ((cbInstanceData._m0[_473 + 7u].x + _2268) < 0.5)
            {
                _2479 = true;
                break;
            }
        }
        uint _2399 = _474 + uint(_2236.w);
        if ((cbInstanceData._m0[_2399].w < 1.0) && ((cbInstanceData._m0[_2399].w + _2268) < 0.5))
        {
            _2479 = true;
            break;
        }
        if ((_2261 + 1.0) < _2259.x)
        {
            _2479 = true;
            break;
        }
        _2479 = false;
        break;
    }
    float _2634;
    if (_2479)
    {
        discard_state = true;
        _2634 = 0.0;
    }
    else
    {
        _2634 = cbInstanceData._m0[_2096].w;
    }
    SV_Target.x = _2265;
    SV_Target.y = _2266;
    SV_Target.z = _2267;
    SV_Target.w = _2634;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2096].w;
    discard_exit();
}


