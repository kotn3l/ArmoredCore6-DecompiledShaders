#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _993;
float _3405;
float _3406;
float _3407;
float _3408;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    float _380 = (_356 > 0.0) ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_361 + (-0.5)) + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_362 + (-0.5)) + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    vec4 _448 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _456 = (_448.x * 2.0) + (-1.0);
    float _458 = (_448.y * 2.0) + (-1.0);
    float _459 = dot(vec2(_456, _458), vec2(_456, _458));
    float _3427 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _464 = sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))));
    float _465 = _448.z * _290;
    float _468 = fma(_464, _199, fma(_458, _206, _456 * _192));
    float _471 = fma(_464, _200, fma(_458, _207, _456 * _193));
    float _474 = fma(_464, _201, fma(_458, _208, _456 * _194));
    float _478 = inversesqrt(dot(vec3(_468, _471, _474), vec3(_468, _471, _474)));
    float _479 = _478 * _468;
    float _480 = _478 * _471;
    float _481 = _478 * _474;
    float _3438 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _482 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3460 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3471 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _501 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _505 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _506 = _263 * _505;
    float _507 = _264 * _505;
    float _508 = _265 * _505;
    vec4 _513 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _515 = _513.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _674 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _680 = (cbMatDynParam._m0[5u].x * _674) + cbMatDynParam._m0[5u].y;
        float _3482 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _685 = (cbMatDynParam._m0[5u].z * _674) + cbMatDynParam._m0[5u].w;
        float _3493 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) - _681)) + _681) < ((_515 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _528 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _529 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _549 = fma(_481, cbSceneParam._m0[5u].z, fma(_480, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _479));
    float _552 = fma(_481, cbSceneParam._m0[6u].z, fma(_480, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _479));
    float _555 = fma(_481, cbSceneParam._m0[7u].z, fma(_480, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _479));
    uint _568 = uint(roundEven(NORMAL.w)) * 13u;
    uint _570 = _568 + 9u;
    uint _571 = _570 + uint(cbMatDynParam._m0[0u].w);
    float _577 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * cbInstanceData._m0[_571].x;
    float _578 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_571].y;
    float _579 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_571].z;
    float _3504 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    vec4 _591 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _528, cbSceneParam._m0[86u].y * _529));
    float _594 = _591.x * TEXCOORD.z;
    float _595 = dot(vec3(_479, _480, _481), vec3(_506, _507, _508));
    float _598 = _595 * 2.0;
    float _602 = (_598 * _479) - _506;
    float _603 = (_598 * _480) - _507;
    float _604 = (_598 * _481) - _508;
    float _608 = abs(dot(vec3(_506, _507, _508), vec3(_479, _480, _481)));
    float _3537 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _610 = sqrt(_482);
    float _623 = exp2((_610 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_610 * 3.0));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _992;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _719 = fma(_663, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655));
        float _723 = fma(_663, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655));
        float _727 = fma(_663, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655));
        float _750 = _655 + _479;
        float _751 = _659 + _480;
        float _752 = _663 + _481;
        float _762 = fma(_752, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750)) - _719;
        float _763 = fma(_752, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750)) - _723;
        float _764 = fma(_752, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750)) - _727;
        float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
        float _781 = ((_768 * _762) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_719 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_768 * _763) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_723 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_768 * _764) / cbModelParam._m0[34u].z) + ((((((_727 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        float _820 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_786.x + (-0.5));
        float _822 = _820 * (_786.y + (-0.5));
        float _823 = _820 * (_786.z + (-0.5));
        float _830 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_793.x + (-0.5));
        float _832 = _830 * (_793.y + (-0.5));
        float _833 = _830 * (_793.z + (-0.5));
        float _840 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_800.x + (-0.5));
        float _842 = _840 * (_800.y + (-0.5));
        float _843 = _840 * (_800.z + (-0.5));
        float _850 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_807.x + (-0.5));
        float _852 = _850 * (_807.y + (-0.5));
        float _853 = _850 * (_807.z + (-0.5));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = _821 * 0.5;
        float _858 = _831 * 0.5;
        float _859 = _841 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _874 = (dot(vec3(_479, _480, _481), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _884 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3585 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_886 + 1.0))) + _891) * _854;
        float _901 = _822 * 0.5;
        float _902 = _832 * 0.5;
        float _903 = _842 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_479, _480, _481), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3618 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_928 + 1.0))) + _933) * _855;
        float _943 = _823 * 0.5;
        float _944 = _833 * 0.5;
        float _945 = _843 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_479, _480, _481), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3651 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_970 + 1.0))) + _975) * _856;
        _992 = _823;
        _994 = _822;
        _995 = _821;
        _996 = _833;
        _997 = _832;
        _998 = _831;
        _999 = _843;
        _1000 = _842;
        _1001 = _841;
        _1002 = _856;
        _1003 = _855;
        _1004 = _854;
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
    }
    else
    {
        _992 = _993;
        _994 = _993;
        _995 = _993;
        _996 = _993;
        _997 = _993;
        _998 = _993;
        _999 = _993;
        _1000 = _993;
        _1001 = _993;
        _1002 = _993;
        _1003 = _993;
        _1004 = _993;
        _1005 = 0.0;
        _1006 = 0.0;
        _1007 = 0.0;
    }
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1036 = fma(_663, cbModelParam._m0[30u].z, fma(_659, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _655));
        float _1040 = fma(_663, cbModelParam._m0[31u].z, fma(_659, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _655));
        float _1044 = fma(_663, cbModelParam._m0[32u].z, fma(_659, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _655));
        float _1067 = _655 + _479;
        float _1068 = _659 + _480;
        float _1069 = _663 + _481;
        float _1079 = fma(_1069, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067)) - _1036;
        float _1080 = fma(_1069, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067)) - _1040;
        float _1081 = fma(_1069, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067)) - _1044;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1036 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1040 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[35u].z) + ((((((_1044 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1135 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1102.x + (-0.5));
        float _1137 = _1135 * (_1102.y + (-0.5));
        float _1138 = _1135 * (_1102.z + (-0.5));
        float _1145 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1109.x + (-0.5));
        float _1147 = _1145 * (_1109.y + (-0.5));
        float _1148 = _1145 * (_1109.z + (-0.5));
        float _1155 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1116.x + (-0.5));
        float _1157 = _1155 * (_1116.y + (-0.5));
        float _1158 = _1155 * (_1116.z + (-0.5));
        float _1165 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1123.x + (-0.5));
        float _1167 = _1165 * (_1123.y + (-0.5));
        float _1168 = _1165 * (_1123.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_479, _480, _481), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3714 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1199 + 1.0))) + _1204) * _1169;
        float _1214 = _1137 * 0.5;
        float _1215 = _1147 * 0.5;
        float _1216 = _1157 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_479, _480, _481), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3747 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1241 + 1.0))) + _1246) * _1170;
        float _1256 = _1138 * 0.5;
        float _1257 = _1148 * 0.5;
        float _1258 = _1158 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_479, _480, _481), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3780 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1283 + 1.0))) + _1288) * _1171;
        _1305 = _1138;
        _1306 = _1137;
        _1307 = _1136;
        _1308 = _1148;
        _1309 = _1147;
        _1310 = _1146;
        _1311 = _1158;
        _1312 = _1157;
        _1313 = _1156;
        _1314 = _1171;
        _1315 = _1170;
        _1316 = _1169;
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _993;
        _1306 = _993;
        _1307 = _993;
        _1308 = _993;
        _1309 = _993;
        _1310 = _993;
        _1311 = _993;
        _1312 = _993;
        _1313 = _993;
        _1314 = _993;
        _1315 = _993;
        _1316 = _993;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1005)) + _1005;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1006)) + _1006;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1352 = fma(_1331, cbSceneParam._m0[89u].z, fma(_1330, cbSceneParam._m0[89u].y, _1329 * cbSceneParam._m0[89u].x));
    float _1355 = fma(_1331, cbSceneParam._m0[90u].z, fma(_1330, cbSceneParam._m0[90u].y, _1329 * cbSceneParam._m0[90u].x));
    float _1358 = fma(_1331, cbSceneParam._m0[91u].z, fma(_1330, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1329));
    float _1373 = _602 * 0.5;
    float _1374 = _603 * 0.5;
    float _1375 = _604 * 0.5;
    float _1376 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1379 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1382 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1416;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1389 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_992, _996, _999, _1002));
        float _1393 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_994, _997, _1000, _1003));
        float _1397 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_995, _998, _1001, _1004));
        float _1404 = dot(vec4(cbModelParam._m0[39u]), vec4(_1373, _1374, _1375, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1427;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1418 = dot(vec4(cbModelParam._m0[40u]), vec4(_1373, _1374, _1375, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1431 = (_1427 * cbModelParam._m0[1u].x) + (_1416 * (1.0 - cbModelParam._m0[1u].x));
    float _1441 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _482);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1441 : min(cbModelParam._m0[25u].z, _1441));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1490 = fma(_663, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655)) + cbModelParam._m0[13u].w;
        float _1494 = fma(_663, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655)) + cbModelParam._m0[14u].w;
        float _1498 = fma(_663, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655)) + cbModelParam._m0[15u].w;
        float _1501 = fma(_604, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602));
        float _1504 = fma(_604, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602));
        float _1507 = fma(_604, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602));
        float _1535;
        if (_1501 > 0.0)
        {
            _1535 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1535 = frontier_phi_25_23_ladder;
        }
        float _1704;
        if (_1504 > 0.0)
        {
            _1704 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1704 = frontier_phi_34_30_ladder;
        }
        float _2148;
        if (_1507 > 0.0)
        {
            _2148 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2148 = frontier_phi_46_41_ladder;
        }
        float _2150 = isnan(_1704) ? _1535 : (isnan(_1535) ? _1704 : min(_1535, _1704));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1501) + _1490;
        float _2156 = (_2151 * _1504) + _1494;
        float _2157 = (_2151 * _1507) + _1498;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2158;
        float _2162 = _2158 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 > _2162) || ((_2156 < _2160) || ((_2155 < _2160) || (_2155 > _2162))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2157, cbModelParam._m0[9u].z, fma(_2156, cbModelParam._m0[9u].y, _2155 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2157, cbModelParam._m0[10u].z, fma(_2156, cbModelParam._m0[10u].y, _2155 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2157, cbModelParam._m0[11u].z, fma(_2156, cbModelParam._m0[11u].y, _2155 * cbModelParam._m0[11u].x))), _1442);
            frontier_phi_24_46_ladder = _2407.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2407.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2407.x * cbModelParam._m0[1u].y;
        }
        _1523 = frontier_phi_24_46_ladder_2;
        _1525 = frontier_phi_24_46_ladder_1;
        _1527 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_602, _603, _604), _1442);
        _1523 = _1511.x * cbModelParam._m0[1u].y;
        _1525 = _1511.y * cbModelParam._m0[1u].y;
        _1527 = _1511.z * cbModelParam._m0[1u].y;
    }
    float _1531 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _482);
    float _1532 = isnan(_1531) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1531 : min(cbModelParam._m0[25u].w, _1531));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1585 = fma(_663, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655)) + cbModelParam._m0[21u].w;
        float _1589 = fma(_663, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655)) + cbModelParam._m0[22u].w;
        float _1593 = fma(_663, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655)) + cbModelParam._m0[23u].w;
        float _1596 = fma(_604, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602));
        float _1599 = fma(_604, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602));
        float _1602 = fma(_604, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602));
        float _1709;
        if (_1596 > 0.0)
        {
            _1709 = abs((1.0 - _1585) / _1596);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1585 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1709 = frontier_phi_36_32_ladder;
        }
        float _2175;
        if (_1599 > 0.0)
        {
            _2175 = abs((1.0 - _1589) / _1599);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1589 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2175 = frontier_phi_48_43_ladder;
        }
        float _2536;
        if (_1602 > 0.0)
        {
            _2536 = abs((1.0 - _1593) / _1602);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1593 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2536 = frontier_phi_60_55_ladder;
        }
        float _2538 = isnan(_2175) ? _1709 : (isnan(_1709) ? _2175 : min(_1709, _2175));
        float _2539 = isnan(_2536) ? _2538 : (isnan(_2538) ? _2536 : min(_2538, _2536));
        float _2543 = (_2539 * _1596) + _1585;
        float _2544 = (_2539 * _1599) + _1589;
        float _2545 = (_2539 * _1602) + _1593;
        float _2546 = _2539 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2546;
        float _2549 = _2546 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2545 > _2549) || ((_2545 < _2547) || ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 < _2547) || (_2543 > _2549))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2545, cbModelParam._m0[17u].z, fma(_2544, cbModelParam._m0[17u].y, _2543 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2545, cbModelParam._m0[18u].z, fma(_2544, cbModelParam._m0[18u].y, _2543 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2545, cbModelParam._m0[19u].z, fma(_2544, cbModelParam._m0[19u].y, _2543 * cbModelParam._m0[19u].x))), _1532);
            frontier_phi_33_60_ladder = _2682.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2682.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2682.x * cbModelParam._m0[1u].z;
        }
        _1621 = frontier_phi_33_60_ladder_2;
        _1623 = frontier_phi_33_60_ladder_1;
        _1625 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_602, _603, _604), _1532);
        _1621 = _1605.x * cbModelParam._m0[1u].z;
        _1623 = _1605.y * cbModelParam._m0[1u].z;
        _1625 = _1605.z * cbModelParam._m0[1u].z;
    }
    float _1637 = ((((1.0 - _623) * ((_610 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_623 * _610)) * _594;
    float _1638 = _1637 * ((cbModelParam._m0[1u].w * (_1621 - _1523)) + _1523);
    float _1639 = _1637 * ((cbModelParam._m0[1u].w * (_1623 - _1525)) + _1525);
    float _1640 = _1637 * ((cbModelParam._m0[1u].w * (_1625 - _1527)) + _1527);
    float _1643 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1646 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1649 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, _1638 * cbSceneParam._m0[91u].x));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1687 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1691 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1695 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1696 = _1683 / _1695;
    float _1697 = _1687 / _1695;
    float _1698 = _1691 / _1695;
    float _1845;
    float _1846;
    float _1847;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1725 = ((uint(_1698 > cbSceneParam._m0[59u].y) + uint(_1698 > cbSceneParam._m0[59u].x)) + uint(_1698 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1726 = _1725 + 43u;
        uint _1734 = _1725 + 44u;
        uint _1742 = _1725 + 45u;
        uint _1750 = _1725 + 46u;
        float _1761 = fma(_1695, cbSceneParam._m0[_1726].w, fma(_1691, cbSceneParam._m0[_1726].z, fma(_1687, cbSceneParam._m0[_1726].y, _1683 * cbSceneParam._m0[_1726].x)));
        float _1765 = fma(_1695, cbSceneParam._m0[_1734].w, fma(_1691, cbSceneParam._m0[_1734].z, fma(_1687, cbSceneParam._m0[_1734].y, _1683 * cbSceneParam._m0[_1734].x)));
        float _1773 = fma(_1695, cbSceneParam._m0[_1750].w, fma(_1691, cbSceneParam._m0[_1750].z, fma(_1687, cbSceneParam._m0[_1750].y, _1683 * cbSceneParam._m0[_1750].x)));
        float _1778 = cbSceneParam._m0[33u].z * _1773;
        float _1780 = cbSceneParam._m0[33u].w * _1773;
        float _1783 = fma(_1695, cbSceneParam._m0[_1742].w, fma(_1691, cbSceneParam._m0[_1742].z, fma(_1687, cbSceneParam._m0[_1742].y, _1683 * cbSceneParam._m0[_1742].x))) / _1773;
        float _1831 = (cbSceneParam._m0[33u].x - sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698))) * cbSceneParam._m0[33u].y;
        float _3906 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1838 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1778 + _1761) / _1773, (_1780 + _1765) / _1773), _1783), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1780 + _1761) / _1773, (_1765 - _1778) / _1773), _1783), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 - _1778) / _1773, (_1765 - _1780) / _1773), _1783), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 - _1780) / _1773, (_1778 + _1765) / _1773), _1783), 0.0)).x), vec4(0.25)));
        _1845 = 1.0 - (_1838 * cbSceneParam._m0[34u].x);
        _1846 = 1.0 - (_1838 * cbSceneParam._m0[34u].y);
        _1847 = 1.0 - (_1838 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1845 = 1.0;
        _1846 = 1.0;
        _1847 = 1.0;
    }
    float _1911;
    float _1913;
    float _1915;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1899 = fma(_1695, cbSceneParam._m0[63u].w, fma(_1691, cbSceneParam._m0[63u].z, fma(_1687, cbSceneParam._m0[63u].y, _1683 * cbSceneParam._m0[63u].x)));
        float _1900 = fma(_1695, cbSceneParam._m0[60u].w, fma(_1691, cbSceneParam._m0[60u].z, fma(_1687, cbSceneParam._m0[60u].y, _1683 * cbSceneParam._m0[60u].x))) / _1899;
        float _1901 = fma(_1695, cbSceneParam._m0[61u].w, fma(_1691, cbSceneParam._m0[61u].z, fma(_1687, cbSceneParam._m0[61u].y, _1683 * cbSceneParam._m0[61u].x))) / _1899;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1900 >= cbSceneParam._m0[64u].x) && (_1901 >= cbSceneParam._m0[64u].y)) && (_1900 <= cbSceneParam._m0[64u].z)) && (_1901 <= cbSceneParam._m0[64u].w))
        {
            float _2188 = fma(_1695, cbSceneParam._m0[62u].w, fma(_1691, cbSceneParam._m0[62u].z, fma(_1687, cbSceneParam._m0[62u].y, _1683 * cbSceneParam._m0[62u].x))) / _1899;
            float _2192 = isnan(cbSceneParam._m0[41u].w) ? _2188 : (isnan(_2188) ? cbSceneParam._m0[41u].w : max(_2188, cbSceneParam._m0[41u].w));
            float _2235 = (cbSceneParam._m0[33u].x - sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698))) * cbSceneParam._m0[33u].y;
            float _3922 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
            float _2242 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1900, cbSceneParam._m0[33u].w + _1901), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1900, _1901 - cbSceneParam._m0[33u].z), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1900 - cbSceneParam._m0[33u].z, _1901 - cbSceneParam._m0[33u].w), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1900 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1901), _2192), 0.0)).x), vec4(0.25)));
            float _2246 = 1.0 - (_2242 * cbSceneParam._m0[34u].x);
            float _2247 = 1.0 - (_2242 * cbSceneParam._m0[34u].y);
            float _2248 = 1.0 - (_2242 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2248) ? _1847 : (isnan(_1847) ? _2248 : min(_1847, _2248));
            frontier_phi_45_44_ladder_1 = isnan(_2247) ? _1846 : (isnan(_1846) ? _2247 : min(_1846, _2247));
            frontier_phi_45_44_ladder_2 = isnan(_2246) ? _1845 : (isnan(_1845) ? _2246 : min(_1845, _2246));
        }
        else
        {
            frontier_phi_45_44_ladder = _1847;
            frontier_phi_45_44_ladder_1 = _1846;
            frontier_phi_45_44_ladder_2 = _1845;
        }
        _1911 = frontier_phi_45_44_ladder_2;
        _1913 = frontier_phi_45_44_ladder_1;
        _1915 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1911 = _1845;
        _1913 = _1846;
        _1915 = _1847;
    }
    uvec4 _1920 = floatBitsToUint(cbInstanceData._m0[_568 + 5u]);
    uint _1922 = _1920.x * 14u;
    uint _1923 = _1922 + 13u;
    float _1928 = _594 + (-1.0);
    float _1931 = (cbLight._m0[_1923].x * _1928) + 1.0;
    float _1932 = (cbLight._m0[_1923].y * _1928) + 1.0;
    uint _1933 = _1922 + 5u;
    float _1939 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1943 = _1922 + 4u;
    float _1952 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1956 = _1922 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_479, _480, _481));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_479, _480, _481));
    float _3958 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _3969 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1933].x * _1939) * _1977) + (((cbLight._m0[_1943].x * _1911) * _1952) * _1975);
    float _1985 = ((_1939 * cbLight._m0[_1933].y) * _1977) + (((cbLight._m0[_1943].y * _1913) * _1952) * _1975);
    float _1986 = ((_1939 * cbLight._m0[_1933].z) * _1977) + (((cbLight._m0[_1943].z * _1915) * _1952) * _1975);
    uint _1988 = _1922 + 8u;
    float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _482) * 0.949999988079071044921875);
    float _2002 = _2001 * _2001;
    float _2003 = cbLight._m0[_1922].x + _506;
    float _2004 = cbLight._m0[_1922].y + _507;
    float _2005 = cbLight._m0[_1922].z + _508;
    float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
    float _2010 = _2009 * _2003;
    float _2011 = _2009 * _2004;
    float _2012 = _2009 * _2005;
    float _2013 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1922].xyz));
    float _3980 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _2017 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _2018 = dot(vec3(_479, _480, _481), vec3(_2010, _2011, _2012));
    float _4002 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2010, _2011, _2012));
    float _4013 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2002 * _2002;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2041 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = 1.0 - _2002;
    float _2053 = (0.5 / (((_2017 * ((_2016 * _2042) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2042) + _2002) * _2016))) * _2016;
    float _4024 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2055 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    uint _2069 = _1922 + 9u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _482) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1956].x + _506;
    float _2083 = cbLight._m0[_1956].y + _507;
    float _2084 = cbLight._m0[_1956].z + _508;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1956].xyz));
    float _4035 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _2096 = dot(vec3(_479, _480, _481), vec3(_2089, _2090, _2091));
    float _4046 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2089, _2090, _2091));
    float _4057 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2081 * _2081;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2118 = 1.0 - _2081;
    float _2128 = (0.5 / (((_2017 * ((_2095 * _2118) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2118) + _2081) * _2095))) * _2095;
    float _4068 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    float _2140 = (((_2117 * cbLight._m0[_2069].x) * _2130) * _1939) + ((((cbLight._m0[_1988].x * _1911) * _2041) * _2055) * _1952);
    float _2141 = (((_2117 * cbLight._m0[_2069].y) * _2130) * _1939) + ((((cbLight._m0[_1988].y * _1913) * _2041) * _2055) * _1952);
    float _2142 = (((_2117 * cbLight._m0[_2069].z) * _2130) * _1939) + ((((cbLight._m0[_1988].z * _1915) * _2041) * _2055) * _1952);
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_1920.y == 0u)
    {
        uvec4 _2260 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2261 = _2260.x;
        uint _2272 = uint((float(_2260.y) * floor(float(uint(cbSceneParam._m0[85u].y * _529) / _2261))) + floor(float(uint(cbSceneParam._m0[85u].x * _528) / _2261)));
        float _2282 = (log2(_1698 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2283 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        uint _2286 = uint(isnan(14.0) ? _2283 : (isnan(_2283) ? 14.0 : min(_2283, 14.0)));
        uvec4 _2291 = texelFetch(g_lightClusterGridBuffer, int(((_2286 << 2u) + (_2272 << 6u)) >> 2u));
        uint _2292 = _2291.x;
        uint _2293 = _2260.z;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((((1u << ((_2293 >> 4u) & 15u)) + 4294967295u) & _2292) == 0u) || ((_2293 & 240u) == 0u))
        {
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
        }
        else
        {
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            uint _2600 = 0u;
            uint _2609;
            bool _2610;
            for (;;)
            {
                _2609 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2600 << 2u)) >> 2u)).x;
                _2610 = _2609 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2610)
                {
                    frontier_phi_71_pred = _2597;
                    frontier_phi_71_pred_1 = _2596;
                    frontier_phi_71_pred_2 = _2595;
                    frontier_phi_71_pred_3 = _2594;
                    frontier_phi_71_pred_4 = _2598;
                    frontier_phi_71_pred_5 = _2599;
                }
                else
                {
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    uint _2766;
                    _2760 = _2594;
                    _2761 = _2595;
                    _2762 = _2596;
                    _2763 = _2597;
                    _2764 = _2598;
                    _2765 = _2599;
                    _2766 = _2609;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    for (;;)
                    {
                        uint _2770 = uint(findLSB(_2766)) + (_2600 << 5u);
                        uint _2767 = (_2766 + 4294967295u) & _2766;
                        uint _2772 = _2770 * 48u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2792 = (_2770 * 48u) + 4u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2811 = (_2770 * 48u) + 8u;
                        vec3 _2822 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x));
                        float _2826 = _2786.x - _1696;
                        float _2827 = _2786.y - _1697;
                        float _2828 = _2786.z - _1698;
                        float _2829 = dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828));
                        float _2832 = inversesqrt(_2829);
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2836 = dot(vec3(_549, _552, _555), vec3(_2833, _2834, _2835));
                        float _2841 = 1.0 - (_2829 * _2786.w);
                        float _4089 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2843 = sqrt(_2829) * _2805.w;
                        float _2846 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                        float _2847 = _2846 * _2846;
                        float _2850 = ((1.0 - _2847) * _2836) + _2847;
                        float _2853 = _2843 * _2843;
                        float _2857 = ((isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * _2842) / ((_2853 * 0.699999988079071044921875) + 1.0);
                        float _2861 = (-0.0) - _1696;
                        float _2862 = (-0.0) - _1697;
                        float _2863 = (-0.0) - _1698;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2877 = exp2(log2(1.0 / ((_2853 * 3.5) + 5.0)) * 0.25);
                        float _2878 = 1.0 - _610;
                        float _2885 = sqrt(1.0 - ((1.0 - (_2878 * _2878)) * (1.0 - (_2877 * _2877))));
                        float _2886 = _2885 * _2885;
                        float _2887 = _2886 * _2886;
                        float _2888 = _2868 + _2833;
                        float _2889 = _2869 + _2834;
                        float _2890 = _2870 + _2835;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2898 = dot(vec3(_549, _552, _555), vec3(_2868, _2869, _2870));
                        float _4105 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2902 = dot(vec3(_549, _552, _555), vec3(_2894 * _2888, _2894 * _2889, _2894 * _2890));
                        float _4116 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2905 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2909 = ((_2905 * _2905) * (_2887 + (-1.0))) + 1.0;
                        float _2910 = _2846 * _2886;
                        float _2911 = _2910 * _2910;
                        float _2914 = ((1.0 - _2911) * _2836) + _2911;
                        float _4127 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2915 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2916 = 1.0 - _2886;
                        float _2926 = (0.5 / (((_2915 * ((_2901 * _2916) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2915 * _2916) + _2886) * _2901))) * _2915;
                        float _4138 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2937 = (((_2887 * 3.1415927410125732421875) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) / ((_2909 * _2909) * ((_2853 * 2.1991131305694580078125) + 3.141590118408203125))) * _2842;
                        _2690 = (_2857 * _2805.x) + _2763;
                        _2691 = (_2857 * _2805.y) + _2764;
                        _2692 = (_2857 * _2805.z) + _2765;
                        _2687 = (_2937 * _2822.x) + _2760;
                        _2688 = (_2937 * _2822.y) + _2761;
                        _2689 = (_2937 * _2822.z) + _2762;
                        if (_2767 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2692;
                            _2766 = _2767;
                        }
                    }
                    frontier_phi_71_pred = _2690;
                    frontier_phi_71_pred_1 = _2689;
                    frontier_phi_71_pred_2 = _2688;
                    frontier_phi_71_pred_3 = _2687;
                    frontier_phi_71_pred_4 = _2691;
                    frontier_phi_71_pred_5 = _2692;
                }
                _2423 = frontier_phi_71_pred;
                _2421 = frontier_phi_71_pred_1;
                _2419 = frontier_phi_71_pred_2;
                _2417 = frontier_phi_71_pred_3;
                _2425 = frontier_phi_71_pred_4;
                _2427 = frontier_phi_71_pred_5;
                uint _2601 = _2600 + 1u;
                if (_2601 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2594 = _2417;
                    _2595 = _2419;
                    _2596 = _2421;
                    _2597 = _2423;
                    _2598 = _2425;
                    _2599 = _2427;
                    _2600 = _2601;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
        }
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.z;
        uint _2433 = (_2431 >> 8u) & 15u;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        if (((4294967295u << _2433) & _2292) == 0u)
        {
            _2562 = _2416;
            _2564 = _2418;
            _2566 = _2420;
            _2568 = _2422;
            _2570 = _2424;
            _2572 = _2426;
        }
        else
        {
            float _2587 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
            float _2588 = _2587 * _1696;
            float _2589 = _2587 * _1697;
            float _2590 = _2587 * _1698;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2433 < ((_2431 >> 12u) & 15u))
            {
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2743 = _2416;
                float _2744 = _2418;
                float _2745 = _2420;
                float _2746 = _2422;
                float _2747 = _2424;
                float _2748 = _2426;
                uint _2749 = _2433;
                uint _2758;
                bool _2759;
                for (;;)
                {
                    _2758 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                    _2759 = _2758 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2759)
                    {
                        frontier_phi_82_pred = _2746;
                        frontier_phi_82_pred_1 = _2745;
                        frontier_phi_82_pred_2 = _2744;
                        frontier_phi_82_pred_3 = _2743;
                        frontier_phi_82_pred_4 = _2748;
                        frontier_phi_82_pred_5 = _2747;
                    }
                    else
                    {
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _2964 = _2743;
                        float _2965 = _2744;
                        float _2966 = _2745;
                        float _2967 = _2746;
                        float _2968 = _2747;
                        float _2969 = _2748;
                        uint _2970 = _2758;
                        uint _2971;
                        vec4 _2996;
                        float _2997;
                        vec4 _3012;
                        vec3 _3024;
                        vec4 _3039;
                        vec4 _3055;
                        float _3101;
                        bool _3102;
                        for (;;)
                        {
                            uint _2981 = ((_2749 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2970));
                            _2971 = (_2970 + 4294967295u) & _2970;
                            uint _2983 = _2981 * 40u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            _2997 = _2996.w;
                            uint _2999 = (_2981 * 40u) + 4u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3014 = (_2981 * 40u) + 8u;
                            _3024 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x));
                            uint _3026 = (_2981 * 40u) + 16u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3042 = (_2981 * 40u) + 20u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3057 = (_2981 * 40u) + 24u;
                            vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3076 = (_2981 * 40u) + 28u;
                            vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            _3101 = fma(_1698, _3089.z, fma(_1697, _3089.y, _3089.x * _1696)) + _3089.w;
                            _3102 = !((fma(_1698, _3070.z, fma(_1697, _3070.y, _3070.x * _1696)) + _3070.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3102)
                            {
                                float _3129 = _2996.x - _1696;
                                float _3130 = _2996.y - _1697;
                                float _3131 = _2996.z - _1698;
                                float _3132 = dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131));
                                float _3135 = inversesqrt(_3132);
                                float _3136 = _3135 * _3129;
                                float _3137 = _3135 * _3130;
                                float _3138 = _3135 * _3131;
                                float _3142 = 1.0 - (_3132 / (_2997 * _2997));
                                float _4149 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3143 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3147 = sqrt(_3132) * _3012.w;
                                float _3149 = 1.39999997615814208984375 / (_3147 + 1.39999997615814208984375);
                                float _3150 = _3149 * _3149;
                                float _3153 = ((1.0 - _3150) * dot(vec3(_3136, _3137, _3138), vec3(_549, _552, _555))) + _3150;
                                float _3156 = _3147 * _3147;
                                float _3160 = (fma(_1698, _3039.z, fma(_1697, _3039.y, _3039.x * _1696)) + _3039.w) / _3101;
                                float _3161 = (fma(_1698, _3055.z, fma(_1697, _3055.y, _3055.x * _1696)) + _3055.w) / _3101;
                                float _3165 = 1.0 - dot(vec2(_3160, _3161), vec2(_3160, _3161));
                                float _4165 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3167 = _3166 * (((isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))) * _3143) / ((_3156 * 0.699999988079071044921875) + 1.0));
                                float _3179 = exp2(log2(1.0 / ((_3156 * 3.5) + 5.0)) * 0.25);
                                float _3180 = 1.0 - _610;
                                float _3187 = sqrt(1.0 - ((1.0 - (_3180 * _3180)) * (1.0 - (_3179 * _3179))));
                                float _3188 = _3187 * _3187;
                                float _3189 = _3188 * _3188;
                                float _3190 = _3136 - _2588;
                                float _3191 = _3137 - _2589;
                                float _3192 = _3138 - _2590;
                                float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                                float _3200 = dot(vec3(_549, _552, _555), vec3((-0.0) - _2588, (-0.0) - _2589, (-0.0) - _2590));
                                float _4176 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3203 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3204 = dot(vec3(_549, _552, _555), vec3(_3196 * _3190, _3196 * _3191, _3196 * _3192));
                                float _4187 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3207 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3211 = ((_3207 * _3207) * (_3189 + (-1.0))) + 1.0;
                                float _3212 = _3149 * _3188;
                                float _3213 = _3212 * _3212;
                                float _3219 = ((1.0 - _3213) * dot(vec3(_549, _552, _555), vec3(_3136, _3137, _3138))) + _3213;
                                float _4198 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3221 = 1.0 - _3188;
                                float _3231 = (0.5 / (((_3220 * ((_3203 * _3221) + _3188)) + 9.9999999392252902907785028219223e-09) + (((_3220 * _3221) + _3188) * _3203))) * _3220;
                                float _4209 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3241 = (_3166 * _3143) * (((_3189 * 3.1415927410125732421875) * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) / ((_3211 * _3211) * ((_3156 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3167 * _3012.x;
                                frontier_phi_88_pred_1 = _3241 * _3024.z;
                                frontier_phi_88_pred_2 = _3241 * _3024.y;
                                frontier_phi_88_pred_3 = _3241 * _3024.x;
                                frontier_phi_88_pred_4 = _3167 * _3012.z;
                                frontier_phi_88_pred_5 = _3167 * _3012.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3248 = frontier_phi_88_pred;
                            _3247 = frontier_phi_88_pred_1;
                            _3246 = frontier_phi_88_pred_2;
                            _3245 = frontier_phi_88_pred_3;
                            _3250 = frontier_phi_88_pred_4;
                            _3249 = frontier_phi_88_pred_5;
                            _2954 = _3248 + _2967;
                            _2955 = _3249 + _2968;
                            _2956 = _3250 + _2969;
                            _2951 = _3245 + _2964;
                            _2952 = _3246 + _2965;
                            _2953 = _3247 + _2966;
                            if (_2971 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2964 = _2951;
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2971;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2954;
                        frontier_phi_82_pred_1 = _2953;
                        frontier_phi_82_pred_2 = _2952;
                        frontier_phi_82_pred_3 = _2951;
                        frontier_phi_82_pred_4 = _2956;
                        frontier_phi_82_pred_5 = _2955;
                    }
                    _2569 = frontier_phi_82_pred;
                    _2567 = frontier_phi_82_pred_1;
                    _2565 = frontier_phi_82_pred_2;
                    _2563 = frontier_phi_82_pred_3;
                    _2573 = frontier_phi_82_pred_4;
                    _2571 = frontier_phi_82_pred_5;
                    uint _2750 = _2749 + 1u;
                    if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2743 = _2563;
                        _2744 = _2565;
                        _2745 = _2567;
                        _2746 = _2569;
                        _2747 = _2571;
                        _2748 = _2573;
                        _2749 = _2750;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2573;
                frontier_phi_62_63_ladder_1 = _2571;
                frontier_phi_62_63_ladder_2 = _2569;
                frontier_phi_62_63_ladder_3 = _2565;
                frontier_phi_62_63_ladder_4 = _2563;
                frontier_phi_62_63_ladder_5 = _2567;
            }
            else
            {
                frontier_phi_62_63_ladder = _2426;
                frontier_phi_62_63_ladder_1 = _2424;
                frontier_phi_62_63_ladder_2 = _2422;
                frontier_phi_62_63_ladder_3 = _2418;
                frontier_phi_62_63_ladder_4 = _2416;
                frontier_phi_62_63_ladder_5 = _2420;
            }
            _2562 = frontier_phi_62_63_ladder_4;
            _2564 = frontier_phi_62_63_ladder_3;
            _2566 = frontier_phi_62_63_ladder_5;
            _2568 = frontier_phi_62_63_ladder_2;
            _2570 = frontier_phi_62_63_ladder_1;
            _2572 = frontier_phi_62_63_ladder;
        }
        float _2577 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
        _2305 = (_2577 * _2568) + _1984;
        _2307 = (_2577 * _2570) + _1985;
        _2309 = (_2577 * _2572) + _1986;
        _2311 = ((_2562 * 0.039999999105930328369140625) * _2577) + _2140;
        _2313 = ((_2564 * 0.039999999105930328369140625) * _2577) + _2141;
        _2315 = ((_2566 * 0.039999999105930328369140625) * _2577) + _2142;
    }
    else
    {
        _2305 = _1984;
        _2307 = _1985;
        _2309 = _1986;
        _2311 = _2140;
        _2313 = _2141;
        _2315 = _2142;
    }
    uint _2321 = _570 + uint(cbMatDynParam._m0[0u].w);
    float _4225 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _4236 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4247 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2346 = (((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2305 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _594))) + ((_2311 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1431)) * cbPerFrame._m0[3u].x)) + (((_420 - (_420 * _290)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2321].x);
    float _2348 = ((((_421 - (_421 * _290)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2321].y) + ((_2313 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1431)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2307 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _594)));
    float _2350 = (((cbMtdParam._m0[9u].z * (_422 - (_422 * _290))) * cbInstanceData._m0[_2321].z) + ((_2315 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1431)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2309 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _594)));
    float _2351 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2352 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2353 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    uint _2354 = _568 + 6u;
    float _2362 = _528 / cbSceneParam._m0[86u].x;
    float _2363 = _529 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _501 : (isnan(_501) ? cbSceneParam._m0[77u].w : min(_501, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_501 > cbSceneParam._m0[78u].w)
    {
        float _2441 = isnan(_501) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _501 : min(cbSceneParam._m0[80u].w, _501));
        float _2442 = _2441 / _501;
        float _2453 = _2442 * _263;
        float _2454 = _264 * _2442;
        float _2455 = (-0.0) - _2454;
        float _2456 = _2442 * _265;
        float _2458 = (cbSceneParam._m0[77u].w * _2455) / _2441;
        float _2459 = _2458 + cbSceneParam._m0[79u].w;
        float _2460 = cbSceneParam._m0[79u].w - _2454;
        float _2466 = sqrt(((_2453 * _2453) + (_2454 * _2454)) + (_2456 * _2456));
        float _2469 = (1.0 - (cbSceneParam._m0[77u].w / _2441)) * _2466;
        float _2474 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2476 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2700;
        if (abs((_2455 - _2458) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2700 = ((((_2459 > 0.0) ? exp2(_2474 * _2459) : (2.0 - exp2(_2476 * _2459))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2469;
        }
        else
        {
            float _2623 = 1.0 / cbSceneParam._m0[80u].x;
            float _2624 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : max(_2459, _2460));
            float _2625 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : min(_2459, _2460));
            float _2634 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : min(_2624, 0.0));
            float _2635 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : min(_2625, 0.0));
            _2700 = ((abs(_2466 / _2455) * cbSceneParam._m0[80u].y) * ((((_2634 - _2635) * 2.0) - ((exp2(_2474 * (isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0)))) - exp2(_2474 * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0))))) * _2623)) - ((exp2(_2476 * _2634) - exp2(_2476 * _2635)) * _2623))) + (_2469 * cbSceneParam._m0[80u].z);
        }
        vec4 _2702 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2711 = exp2((_2700 * (-1.44269502162933349609375)) * (1.0 - _2702.w));
        float _2712 = log2(_2711);
        float _2728 = log2(_2382);
        _2478 = (exp2(_2728 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].x)) * _2702.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2480 = (exp2(_2728 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].y)) * _2702.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2482 = (exp2(_2728 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2712 * cbSceneParam._m0[78u].z)) * _2702.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2484 = _2711 * _2382;
    }
    else
    {
        _2478 = _2379;
        _2480 = _2380;
        _2482 = _2381;
        _2484 = _2382;
    }
    bool _2738;
    vec4 _2494;
    vec4 _2516;
    float _2518;
    float _2522;
    float _2523;
    float _2524;
    float _2525;
    bool _2535;
    for (;;)
    {
        _2494 = cbMatDynParam._m0[0u];
        float _2496 = roundEven(_2494.y);
        bool _2497 = _2496 == 3.0;
        float _2498 = log2(_2484);
        float _2505 = exp2(_2498 * cbSceneParam._m0[78u].x) * _2351;
        float _2506 = exp2(_2498 * cbSceneParam._m0[78u].y) * _2352;
        float _2507 = exp2(_2498 * cbSceneParam._m0[78u].z) * _2353;
        float _2514 = _515 + (-0.5);
        _2516 = cbMtdParam._m0[1u];
        _2518 = _2516.y * _2514;
        float _2521 = (_2496 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2522 = _2521 * (_2497 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2478)));
        _2523 = _2521 * (_2497 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2480)));
        _2524 = _2521 * (_2497 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2482)));
        _2525 = _2514 * 0.999000012874603271484375;
        _2535 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2535)
        {
            if ((cbInstanceData._m0[_568 + 7u].x + _2525) < 0.5)
            {
                _2738 = true;
                break;
            }
        }
        uint _2658 = _570 + uint(_2494.w);
        if ((cbInstanceData._m0[_2658].w < 1.0) && ((cbInstanceData._m0[_2658].w + _2525) < 0.5))
        {
            _2738 = true;
            break;
        }
        if ((_2518 + 1.0) < _2516.x)
        {
            _2738 = true;
            break;
        }
        _2738 = false;
        break;
    }
    float _2942;
    if (_2738)
    {
        discard_state = true;
        _2942 = 0.0;
    }
    else
    {
        _2942 = cbInstanceData._m0[_2354].w;
    }
    SV_Target.x = _2522;
    SV_Target.y = _2523;
    SV_Target.z = _2524;
    SV_Target.w = _2942;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2354].w;
    discard_exit();
}


