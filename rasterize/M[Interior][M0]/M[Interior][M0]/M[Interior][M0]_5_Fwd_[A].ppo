#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1125;
float _3276;
float _3277;
float _3278;
float _3279;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    bool _376 = _354 > 0.0;
    float _378 = _376 ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _385 = _359 + (-0.5);
    float _388 = _360 + (-0.5);
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_385 + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_388 + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _432 = (_418 - (_418 * _288)) * cbMtdParam._m0[9u].x;
    float _433 = (_419 - (_419 * _288)) * cbMtdParam._m0[9u].y;
    float _434 = cbMtdParam._m0[9u].z * (_420 - (_420 * _288));
    float _456 = (cbMtdParam._m0[21u].x * _347) * _353;
    float _458 = (cbMtdParam._m0[20u].w * _348) * _353;
    bool _459 = _456 > 0.0;
    float _464;
    if (_459)
    {
        _464 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _464 = frontier_phi_11_10_ladder;
    }
    bool _466 = _458 > 0.0;
    float _471;
    if (_466)
    {
        _471 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _471 = frontier_phi_15_14_ladder;
    }
    float _474 = _376 ? (cbMtdParam._m0[16u].z / _354) : 5000.0;
    float _475 = isnan(_471) ? _464 : (isnan(_464) ? _471 : min(_464, _471));
    float _476 = isnan(_474) ? _475 : (isnan(_475) ? _474 : min(_475, _474));
    float _480 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _484 = ((_476 * _354) + _480) / _480;
    float _489 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _491 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _507 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_476 * _456)) / _484) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_476 * _458)) / _484) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _512 = _507.x * cbMtdParam._m0[10u].x;
    float _513 = _507.y * cbMtdParam._m0[10u].y;
    float _514 = _507.z * cbMtdParam._m0[10u].z;
    float _522;
    if (_459)
    {
        _522 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _522 = frontier_phi_19_18_ladder;
    }
    float _528;
    if (_466)
    {
        _528 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _528 = frontier_phi_23_22_ladder;
    }
    float _530 = isnan(_528) ? _522 : (isnan(_522) ? _528 : min(_522, _528));
    float _531 = isnan(_474) ? _530 : (isnan(_530) ? _474 : min(_530, _474));
    float _538 = ((_531 * _354) + _480) / _480;
    vec4 _552 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_531 * _456)) / _538) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_531 * _458)) / _538) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _554 = _552.w;
    float _556 = _554 - (_554 * _288);
    vec4 _580 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _588 = (_580.x * 2.0) + (-1.0);
    float _590 = (_580.y * 2.0) + (-1.0);
    float _591 = dot(vec2(_588, _590), vec2(_588, _590));
    float _3318 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _596 = sqrt(1.0 - (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))));
    float _597 = _580.z * _288;
    float _600 = fma(_596, _197, fma(_590, _204, _588 * _190));
    float _603 = fma(_596, _198, fma(_590, _205, _588 * _191));
    float _606 = fma(_596, _199, fma(_590, _206, _588 * _192));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    float _611 = _610 * _600;
    float _612 = _610 * _603;
    float _613 = _610 * _606;
    float _3329 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _614 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3351 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3362 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _633 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _638 = _261 * _637;
    float _639 = _262 * _637;
    float _640 = _263 * _637;
    vec4 _645 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _647 = _645.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _806 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _812 = (cbMatDynParam._m0[5u].x * _806) + cbMatDynParam._m0[5u].y;
        float _3373 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _817 = (cbMatDynParam._m0[5u].z * _806) + cbMatDynParam._m0[5u].w;
        float _3384 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) - _813)) + _813) < ((_647 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _681 = fma(_613, cbSceneParam._m0[5u].z, fma(_612, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _611));
    float _684 = fma(_613, cbSceneParam._m0[6u].z, fma(_612, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _611));
    float _687 = fma(_613, cbSceneParam._m0[7u].z, fma(_612, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _611));
    uint _700 = uint(roundEven(NORMAL.w)) * 13u;
    uint _702 = _700 + 9u;
    uint _703 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _709 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0)))) * cbInstanceData._m0[_703].x;
    float _710 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0)))) * cbInstanceData._m0[_703].y;
    float _711 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0)))) * cbInstanceData._m0[_703].z;
    float _3395 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    vec4 _723 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _726 = _723.x * TEXCOORD.z;
    float _727 = dot(vec3(_611, _612, _613), vec3(_638, _639, _640));
    float _730 = _727 * 2.0;
    float _734 = (_730 * _611) - _638;
    float _735 = (_730 * _612) - _639;
    float _736 = (_730 * _613) - _640;
    float _740 = abs(dot(vec3(_638, _639, _640), vec3(_611, _612, _613)));
    float _3428 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _742 = sqrt(_614);
    float _755 = exp2((_742 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_742 * 3.0));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1124;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = fma(_795, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787));
        float _855 = fma(_795, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787));
        float _859 = fma(_795, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787));
        float _882 = _787 + _611;
        float _883 = _791 + _612;
        float _884 = _795 + _613;
        float _894 = fma(_884, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _882)) - _851;
        float _895 = fma(_884, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _882)) - _855;
        float _896 = fma(_884, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _882)) - _859;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_851 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_855 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[34u].z) + ((((((_859 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _952 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_918.x + (-0.5));
        float _954 = _952 * (_918.y + (-0.5));
        float _955 = _952 * (_918.z + (-0.5));
        float _962 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_925.x + (-0.5));
        float _964 = _962 * (_925.y + (-0.5));
        float _965 = _962 * (_925.z + (-0.5));
        float _972 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_932.x + (-0.5));
        float _974 = _972 * (_932.y + (-0.5));
        float _975 = _972 * (_932.z + (-0.5));
        float _982 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_939.x + (-0.5));
        float _984 = _982 * (_939.y + (-0.5));
        float _985 = _982 * (_939.z + (-0.5));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = _953 * 0.5;
        float _990 = _963 * 0.5;
        float _991 = _973 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1006 = (dot(vec3(_611, _612, _613), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1016 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3476 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_1018 + 1.0))) + _1023) * _986;
        float _1033 = _954 * 0.5;
        float _1034 = _964 * 0.5;
        float _1035 = _974 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_611, _612, _613), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3509 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_1060 + 1.0))) + _1065) * _987;
        float _1075 = _955 * 0.5;
        float _1076 = _965 * 0.5;
        float _1077 = _975 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_611, _612, _613), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3542 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_1102 + 1.0))) + _1107) * _988;
        _1124 = _955;
        _1126 = _954;
        _1127 = _953;
        _1128 = _965;
        _1129 = _964;
        _1130 = _963;
        _1131 = _975;
        _1132 = _974;
        _1133 = _973;
        _1134 = _988;
        _1135 = _987;
        _1136 = _986;
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
    }
    else
    {
        _1124 = _1125;
        _1126 = _1125;
        _1127 = _1125;
        _1128 = _1125;
        _1129 = _1125;
        _1130 = _1125;
        _1131 = _1125;
        _1132 = _1125;
        _1133 = _1125;
        _1134 = _1125;
        _1135 = _1125;
        _1136 = _1125;
        _1137 = 0.0;
        _1138 = 0.0;
        _1139 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_795, cbModelParam._m0[30u].z, fma(_791, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _787));
        float _1172 = fma(_795, cbModelParam._m0[31u].z, fma(_791, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _787));
        float _1176 = fma(_795, cbModelParam._m0[32u].z, fma(_791, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _787));
        float _1199 = _787 + _611;
        float _1200 = _791 + _612;
        float _1201 = _795 + _613;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_611, _612, _613), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3605 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_611, _612, _613), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3638 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_611, _612, _613), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3671 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1125;
        _1438 = _1125;
        _1439 = _1125;
        _1440 = _1125;
        _1441 = _1125;
        _1442 = _1125;
        _1443 = _1125;
        _1444 = _1125;
        _1445 = _1125;
        _1446 = _1125;
        _1447 = _1125;
        _1448 = _1125;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1137)) + _1137;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1138)) + _1138;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1139)) + _1139;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _734 * 0.5;
    float _1506 = _735 * 0.5;
    float _1507 = _736 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1124, _1128, _1131, _1134));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _614);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1622 = fma(_795, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787)) + cbModelParam._m0[13u].w;
        float _1626 = fma(_795, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787)) + cbModelParam._m0[14u].w;
        float _1630 = fma(_795, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787)) + cbModelParam._m0[15u].w;
        float _1633 = fma(_736, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734));
        float _1636 = fma(_736, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734));
        float _1639 = fma(_736, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734));
        float _1667;
        if (_1633 > 0.0)
        {
            _1667 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1667 = frontier_phi_41_39_ladder;
        }
        float _2012;
        if (_1636 > 0.0)
        {
            _2012 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2012 = frontier_phi_50_46_ladder;
        }
        float _2336;
        if (_1639 > 0.0)
        {
            _2336 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2336 = frontier_phi_64_57_ladder;
        }
        float _2338 = isnan(_2012) ? _1667 : (isnan(_1667) ? _2012 : min(_1667, _2012));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1633) + _1622;
        float _2344 = (_2339 * _1636) + _1626;
        float _2345 = (_2339 * _1639) + _1630;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_40_64_ladder = _2487.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2487.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2487.x * cbModelParam._m0[1u].y;
        }
        _1655 = frontier_phi_40_64_ladder_2;
        _1657 = frontier_phi_40_64_ladder_1;
        _1659 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_734, _735, _736), _1574);
        _1655 = _1643.x * cbModelParam._m0[1u].y;
        _1657 = _1643.y * cbModelParam._m0[1u].y;
        _1659 = _1643.z * cbModelParam._m0[1u].y;
    }
    float _1663 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _614);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1663 : min(cbModelParam._m0[25u].w, _1663));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_795, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_795, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_795, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_736, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734));
        float _1730 = fma(_736, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734));
        float _1733 = fma(_736, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734));
        float _2017;
        if (_1727 > 0.0)
        {
            _2017 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2017 = frontier_phi_52_48_ladder;
        }
        float _2362;
        if (_1730 > 0.0)
        {
            _2362 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2362 = frontier_phi_66_59_ladder;
        }
        float _2552;
        if (_1733 > 0.0)
        {
            _2552 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2552 = frontier_phi_84_77_ladder;
        }
        float _2554 = isnan(_2362) ? _2017 : (isnan(_2017) ? _2362 : min(_2017, _2362));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _1727) + _1716;
        float _2560 = (_2555 * _1730) + _1720;
        float _2561 = (_2555 * _1733) + _1724;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2563 = (-1.0) - _2562;
        float _2565 = _2562 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2561 > _2565) || ((_2561 < _2563) || ((_2560 > _2565) || ((_2560 < _2563) || ((_2559 < _2563) || (_2559 > _2565))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2561, cbModelParam._m0[17u].z, fma(_2560, cbModelParam._m0[17u].y, _2559 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2561, cbModelParam._m0[18u].z, fma(_2560, cbModelParam._m0[18u].y, _2559 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2561, cbModelParam._m0[19u].z, fma(_2560, cbModelParam._m0[19u].y, _2559 * cbModelParam._m0[19u].x))), _1664);
            frontier_phi_49_84_ladder = _2803.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2803.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2803.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_49_84_ladder_2;
        _1754 = frontier_phi_49_84_ladder_1;
        _1756 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_734, _735, _736), _1664);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1768 = ((((1.0 - _755) * ((_742 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_755 * _742)) * _726;
    float _1769 = _1768 * ((cbModelParam._m0[1u].w * (_1752 - _1655)) + _1655);
    float _1770 = _1768 * ((cbModelParam._m0[1u].w * (_1754 - _1657)) + _1657);
    float _1771 = _1768 * ((cbModelParam._m0[1u].w * (_1756 - _1659)) + _1659);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1770, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1770, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1770, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_700 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1798 = _726 + (-1.0);
    float _1801 = (cbLight._m0[_1793].x * _1798) + 1.0;
    float _1802 = (cbLight._m0[_1793].y * _1798) + 1.0;
    uint _1803 = _1792 + 5u;
    float _1809 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1813 = _1792 + 4u;
    float _1819 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1823 = _1792 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_611, _612, _613));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_611, _612, _613));
    float _3807 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _3818 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1803].x * _1809) * _1844) + ((cbLight._m0[_1813].x * _1819) * _1842);
    float _1852 = ((_1809 * cbLight._m0[_1803].y) * _1844) + ((_1819 * cbLight._m0[_1813].y) * _1842);
    float _1853 = ((_1809 * cbLight._m0[_1803].z) * _1844) + ((_1819 * cbLight._m0[_1813].z) * _1842);
    uint _1855 = _1792 + 8u;
    float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _614) * 0.949999988079071044921875);
    float _1869 = _1868 * _1868;
    float _1870 = cbLight._m0[_1792].x + _638;
    float _1871 = cbLight._m0[_1792].y + _639;
    float _1872 = cbLight._m0[_1792].z + _640;
    float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
    float _1877 = _1876 * _1870;
    float _1878 = _1876 * _1871;
    float _1879 = _1876 * _1872;
    float _1880 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1792].xyz));
    float _3829 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _1884 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1885 = dot(vec3(_611, _612, _613), vec3(_1877, _1878, _1879));
    float _3851 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _1889 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1877, _1878, _1879));
    float _3862 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1893 = _1869 * _1869;
    float _1897 = ((_1888 * _1888) * (_1893 + (-1.0))) + 1.0;
    float _1908 = (exp2(log2(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1909 = 1.0 - _1869;
    float _1920 = (0.5 / (((_1884 * ((_1883 * _1909) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1884 * _1909) + _1869) * _1883))) * _1883;
    float _3873 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1922 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1893 / ((_1897 * _1897) * 3.141590118408203125));
    uint _1933 = _1792 + 9u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _614) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1823].x + _638;
    float _1947 = cbLight._m0[_1823].y + _639;
    float _1948 = cbLight._m0[_1823].z + _640;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1823].xyz));
    float _3884 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1960 = dot(vec3(_611, _612, _613), vec3(_1953, _1954, _1955));
    float _3895 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1964 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1953, _1954, _1955));
    float _3906 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1968 = _1945 * _1945;
    float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
    float _1981 = (exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1982 = 1.0 - _1945;
    float _1992 = (0.5 / (((_1884 * ((_1959 * _1982) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1884 * _1982) + _1945) * _1959))) * _1959;
    float _3917 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
    float _2004 = (((_1981 * cbLight._m0[_1933].x) * _1994) * _1809) + (((_1908 * cbLight._m0[_1855].x) * _1922) * _1819);
    float _2005 = (((_1981 * cbLight._m0[_1933].y) * _1994) * _1809) + (((_1908 * cbLight._m0[_1855].y) * _1922) * _1819);
    float _2006 = (((_1981 * cbLight._m0[_1933].z) * _1994) * _1809) + (((_1908 * cbLight._m0[_1855].z) * _1922) * _1819);
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    float _2129;
    float _2131;
    if (_1790.y == 0u)
    {
        float _2061 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2062 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2061;
        float _2063 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2061;
        float _2064 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2061;
        uvec4 _2076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2077 = _2076.x;
        uint _2088 = uint((float(_2076.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2077))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2077)));
        float _2098 = (log2(_2064 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2099 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        uint _2102 = uint(isnan(14.0) ? _2099 : (isnan(_2099) ? 14.0 : min(_2099, 14.0)));
        uvec4 _2107 = texelFetch(g_lightClusterGridBuffer, int(((_2102 << 2u) + (_2088 << 6u)) >> 2u));
        uint _2108 = _2107.x;
        uint _2109 = _2076.z;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        if (((((1u << ((_2109 >> 4u) & 15u)) + 4294967295u) & _2108) == 0u) || ((_2109 & 240u) == 0u))
        {
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
            _2221 = 0.0;
            _2223 = 0.0;
            _2225 = 0.0;
        }
        else
        {
            float _2216;
            float _2218;
            float _2220;
            float _2222;
            float _2224;
            float _2226;
            float _2399 = 0.0;
            float _2400 = 0.0;
            float _2401 = 0.0;
            float _2402 = 0.0;
            float _2403 = 0.0;
            float _2404 = 0.0;
            uint _2405 = 0u;
            uint _2414;
            bool _2415;
            for (;;)
            {
                _2414 = texelFetch(g_lightClassification, int((((_2102 << 5u) + (_2088 << 9u)) + (_2405 << 2u)) >> 2u)).x;
                _2415 = _2414 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2415)
                {
                    frontier_phi_79_pred = _2404;
                    frontier_phi_79_pred_1 = _2403;
                    frontier_phi_79_pred_2 = _2402;
                    frontier_phi_79_pred_3 = _2401;
                    frontier_phi_79_pred_4 = _2400;
                    frontier_phi_79_pred_5 = _2399;
                }
                else
                {
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    uint _2601;
                    _2595 = _2399;
                    _2596 = _2400;
                    _2597 = _2401;
                    _2598 = _2402;
                    _2599 = _2403;
                    _2600 = _2404;
                    _2601 = _2414;
                    float _2496;
                    float _2497;
                    float _2498;
                    float _2499;
                    float _2500;
                    float _2501;
                    for (;;)
                    {
                        uint _2605 = uint(findLSB(_2601)) + (_2405 << 5u);
                        uint _2602 = (_2601 + 4294967295u) & _2601;
                        uint _2607 = _2605 * 48u;
                        vec4 _2621 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2607)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 3u)).x));
                        uint _2627 = (_2605 * 48u) + 4u;
                        vec4 _2640 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 3u)).x));
                        uint _2646 = (_2605 * 48u) + 8u;
                        vec3 _2657 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x));
                        float _2661 = _2621.x - _2062;
                        float _2662 = _2621.y - _2063;
                        float _2663 = _2621.z - _2064;
                        float _2664 = dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663));
                        float _2667 = inversesqrt(_2664);
                        float _2668 = _2667 * _2661;
                        float _2669 = _2667 * _2662;
                        float _2670 = _2667 * _2663;
                        float _2671 = dot(vec3(_681, _684, _687), vec3(_2668, _2669, _2670));
                        float _2676 = 1.0 - (_2664 * _2621.w);
                        float _3938 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                        float _2677 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2678 = sqrt(_2664) * _2640.w;
                        float _2681 = 1.39999997615814208984375 / (_2678 + 1.39999997615814208984375);
                        float _2682 = _2681 * _2681;
                        float _2685 = ((1.0 - _2682) * _2671) + _2682;
                        float _2688 = _2678 * _2678;
                        float _2692 = ((isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0))) * _2677) / ((_2688 * 0.699999988079071044921875) + 1.0);
                        float _2696 = (-0.0) - _2062;
                        float _2697 = (-0.0) - _2063;
                        float _2698 = (-0.0) - _2064;
                        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
                        float _2703 = _2702 * _2696;
                        float _2704 = _2702 * _2697;
                        float _2705 = _2702 * _2698;
                        float _2713 = exp2(log2(1.0 / ((_2688 * 3.5) + 5.0)) * 0.25);
                        float _2714 = 1.0 - _742;
                        float _2721 = sqrt(1.0 - ((1.0 - (_2714 * _2714)) * (1.0 - (_2713 * _2713))));
                        float _2722 = _2721 * _2721;
                        float _2723 = _2722 * _2722;
                        float _2724 = _2703 + _2668;
                        float _2725 = _2704 + _2669;
                        float _2726 = _2705 + _2670;
                        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
                        float _2734 = dot(vec3(_681, _684, _687), vec3(_2703, _2704, _2705));
                        float _3954 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2737 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                        float _2738 = dot(vec3(_681, _684, _687), vec3(_2730 * _2724, _2730 * _2725, _2730 * _2726));
                        float _3965 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2741 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                        float _2745 = ((_2741 * _2741) * (_2723 + (-1.0))) + 1.0;
                        float _2746 = _2681 * _2722;
                        float _2747 = _2746 * _2746;
                        float _2750 = ((1.0 - _2747) * _2671) + _2747;
                        float _3976 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2751 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
                        float _2752 = 1.0 - _2722;
                        float _2762 = (0.5 / (((_2751 * ((_2737 * _2752) + _2722)) + 9.9999999392252902907785028219223e-09) + (((_2751 * _2752) + _2722) * _2737))) * _2751;
                        float _3987 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2773 = (((_2723 * 3.1415927410125732421875) * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) / ((_2745 * _2745) * ((_2688 * 2.1991131305694580078125) + 3.141590118408203125))) * _2677;
                        _2499 = (_2692 * _2640.x) + _2598;
                        _2500 = (_2692 * _2640.y) + _2599;
                        _2501 = (_2692 * _2640.z) + _2600;
                        _2496 = (_2773 * _2657.x) + _2595;
                        _2497 = (_2773 * _2657.y) + _2596;
                        _2498 = (_2773 * _2657.z) + _2597;
                        if (_2602 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2595 = _2496;
                            _2596 = _2497;
                            _2597 = _2498;
                            _2598 = _2499;
                            _2599 = _2500;
                            _2600 = _2501;
                            _2601 = _2602;
                        }
                    }
                    frontier_phi_79_pred = _2501;
                    frontier_phi_79_pred_1 = _2500;
                    frontier_phi_79_pred_2 = _2499;
                    frontier_phi_79_pred_3 = _2498;
                    frontier_phi_79_pred_4 = _2497;
                    frontier_phi_79_pred_5 = _2496;
                }
                _2226 = frontier_phi_79_pred;
                _2224 = frontier_phi_79_pred_1;
                _2222 = frontier_phi_79_pred_2;
                _2220 = frontier_phi_79_pred_3;
                _2218 = frontier_phi_79_pred_4;
                _2216 = frontier_phi_79_pred_5;
                uint _2406 = _2405 + 1u;
                if (_2406 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2399 = _2216;
                    _2400 = _2218;
                    _2401 = _2220;
                    _2402 = _2222;
                    _2403 = _2224;
                    _2404 = _2226;
                    _2405 = _2406;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
            _2221 = _2222;
            _2223 = _2224;
            _2225 = _2226;
        }
        uvec4 _2229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2230 = _2229.z;
        uint _2232 = (_2230 >> 8u) & 15u;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        if (((4294967295u << _2232) & _2108) == 0u)
        {
            _2367 = _2215;
            _2369 = _2217;
            _2371 = _2219;
            _2373 = _2221;
            _2375 = _2223;
            _2377 = _2225;
        }
        else
        {
            float _2392 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
            float _2393 = _2392 * _2062;
            float _2394 = _2392 * _2063;
            float _2395 = _2392 * _2064;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2232 < ((_2230 >> 12u) & 15u))
            {
                float _2368;
                float _2370;
                float _2372;
                float _2374;
                float _2376;
                float _2378;
                float _2578 = _2215;
                float _2579 = _2217;
                float _2580 = _2219;
                float _2581 = _2221;
                float _2582 = _2223;
                float _2583 = _2225;
                uint _2584 = _2232;
                uint _2593;
                bool _2594;
                for (;;)
                {
                    _2593 = texelFetch(g_lightClassification, int((((_2102 << 5u) + (_2088 << 9u)) + (_2584 << 2u)) >> 2u)).x;
                    _2594 = _2593 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2594)
                    {
                        frontier_phi_93_pred = _2582;
                        frontier_phi_93_pred_1 = _2581;
                        frontier_phi_93_pred_2 = _2580;
                        frontier_phi_93_pred_3 = _2579;
                        frontier_phi_93_pred_4 = _2578;
                        frontier_phi_93_pred_5 = _2583;
                    }
                    else
                    {
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _2821 = _2578;
                        float _2822 = _2579;
                        float _2823 = _2580;
                        float _2824 = _2581;
                        float _2825 = _2582;
                        float _2826 = _2583;
                        uint _2827 = _2593;
                        uint _2828;
                        vec4 _2853;
                        float _2854;
                        vec4 _2869;
                        vec3 _2881;
                        vec4 _2896;
                        vec4 _2911;
                        float _2957;
                        bool _2958;
                        for (;;)
                        {
                            uint _2838 = ((_2584 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2827));
                            _2828 = (_2827 + 4294967295u) & _2827;
                            uint _2840 = _2838 * 40u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            _2854 = _2853.w;
                            uint _2856 = (_2838 * 40u) + 4u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2871 = (_2838 * 40u) + 8u;
                            _2881 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x));
                            uint _2883 = (_2838 * 40u) + 16u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2898 = (_2838 * 40u) + 20u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2913 = (_2838 * 40u) + 24u;
                            vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2932 = (_2838 * 40u) + 28u;
                            vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            _2957 = fma(_2064, _2945.z, fma(_2063, _2945.y, _2945.x * _2062)) + _2945.w;
                            _2958 = !((fma(_2064, _2926.z, fma(_2063, _2926.y, _2926.x * _2062)) + _2926.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2958)
                            {
                                float _2985 = _2853.x - _2062;
                                float _2986 = _2853.y - _2063;
                                float _2987 = _2853.z - _2064;
                                float _2988 = dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987));
                                float _2991 = inversesqrt(_2988);
                                float _2992 = _2991 * _2985;
                                float _2993 = _2991 * _2986;
                                float _2994 = _2991 * _2987;
                                float _2998 = 1.0 - (_2988 / (_2854 * _2854));
                                float _3998 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _2999 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _3003 = sqrt(_2988) * _2869.w;
                                float _3005 = 1.39999997615814208984375 / (_3003 + 1.39999997615814208984375);
                                float _3006 = _3005 * _3005;
                                float _3009 = ((1.0 - _3006) * dot(vec3(_2992, _2993, _2994), vec3(_681, _684, _687))) + _3006;
                                float _3012 = _3003 * _3003;
                                float _3016 = (fma(_2064, _2896.z, fma(_2063, _2896.y, _2896.x * _2062)) + _2896.w) / _2957;
                                float _3017 = (fma(_2064, _2911.z, fma(_2063, _2911.y, _2911.x * _2062)) + _2911.w) / _2957;
                                float _3021 = 1.0 - dot(vec2(_3016, _3017), vec2(_3016, _3017));
                                float _4014 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                                float _3023 = _3022 * (((isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0))) * _2999) / ((_3012 * 0.699999988079071044921875) + 1.0));
                                float _3035 = exp2(log2(1.0 / ((_3012 * 3.5) + 5.0)) * 0.25);
                                float _3036 = 1.0 - _742;
                                float _3043 = sqrt(1.0 - ((1.0 - (_3036 * _3036)) * (1.0 - (_3035 * _3035))));
                                float _3044 = _3043 * _3043;
                                float _3045 = _3044 * _3044;
                                float _3046 = _2992 - _2393;
                                float _3047 = _2993 - _2394;
                                float _3048 = _2994 - _2395;
                                float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
                                float _3056 = dot(vec3(_681, _684, _687), vec3((-0.0) - _2393, (-0.0) - _2394, (-0.0) - _2395));
                                float _4025 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3059 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                                float _3060 = dot(vec3(_681, _684, _687), vec3(_3052 * _3046, _3052 * _3047, _3052 * _3048));
                                float _4036 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3063 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                                float _3067 = ((_3063 * _3063) * (_3045 + (-1.0))) + 1.0;
                                float _3068 = _3005 * _3044;
                                float _3069 = _3068 * _3068;
                                float _3075 = ((1.0 - _3069) * dot(vec3(_681, _684, _687), vec3(_2992, _2993, _2994))) + _3069;
                                float _4047 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                                float _3077 = 1.0 - _3044;
                                float _3087 = (0.5 / (((_3076 * ((_3059 * _3077) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_3076 * _3077) + _3044) * _3059))) * _3076;
                                float _4058 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3097 = (_3022 * _2999) * (((_3045 * 3.1415927410125732421875) * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) / ((_3067 * _3067) * ((_3012 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3023 * _2869.z;
                                frontier_phi_99_pred_1 = _3023 * _2869.y;
                                frontier_phi_99_pred_2 = _3023 * _2869.x;
                                frontier_phi_99_pred_3 = _3097 * _2881.z;
                                frontier_phi_99_pred_4 = _3097 * _2881.y;
                                frontier_phi_99_pred_5 = _3097 * _2881.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3106 = frontier_phi_99_pred;
                            _3105 = frontier_phi_99_pred_1;
                            _3104 = frontier_phi_99_pred_2;
                            _3103 = frontier_phi_99_pred_3;
                            _3102 = frontier_phi_99_pred_4;
                            _3101 = frontier_phi_99_pred_5;
                            _2811 = _3104 + _2824;
                            _2812 = _3105 + _2825;
                            _2813 = _3106 + _2826;
                            _2808 = _3101 + _2821;
                            _2809 = _3102 + _2822;
                            _2810 = _3103 + _2823;
                            if (_2828 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2828;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2812;
                        frontier_phi_93_pred_1 = _2811;
                        frontier_phi_93_pred_2 = _2810;
                        frontier_phi_93_pred_3 = _2809;
                        frontier_phi_93_pred_4 = _2808;
                        frontier_phi_93_pred_5 = _2813;
                    }
                    _2376 = frontier_phi_93_pred;
                    _2374 = frontier_phi_93_pred_1;
                    _2372 = frontier_phi_93_pred_2;
                    _2370 = frontier_phi_93_pred_3;
                    _2368 = frontier_phi_93_pred_4;
                    _2378 = frontier_phi_93_pred_5;
                    uint _2585 = _2584 + 1u;
                    if (_2585 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2578 = _2368;
                        _2579 = _2370;
                        _2580 = _2372;
                        _2581 = _2374;
                        _2582 = _2376;
                        _2583 = _2378;
                        _2584 = _2585;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2378;
                frontier_phi_68_69_ladder_1 = _2376;
                frontier_phi_68_69_ladder_2 = _2374;
                frontier_phi_68_69_ladder_3 = _2372;
                frontier_phi_68_69_ladder_4 = _2368;
                frontier_phi_68_69_ladder_5 = _2370;
            }
            else
            {
                frontier_phi_68_69_ladder = _2225;
                frontier_phi_68_69_ladder_1 = _2223;
                frontier_phi_68_69_ladder_2 = _2221;
                frontier_phi_68_69_ladder_3 = _2219;
                frontier_phi_68_69_ladder_4 = _2215;
                frontier_phi_68_69_ladder_5 = _2217;
            }
            _2367 = frontier_phi_68_69_ladder_4;
            _2369 = frontier_phi_68_69_ladder_5;
            _2371 = frontier_phi_68_69_ladder_3;
            _2373 = frontier_phi_68_69_ladder_2;
            _2375 = frontier_phi_68_69_ladder_1;
            _2377 = frontier_phi_68_69_ladder;
        }
        float _2382 = isnan(1.0) ? _726 : (isnan(_726) ? 1.0 : min(_726, 1.0));
        _2121 = (_2382 * _2373) + _1851;
        _2123 = (_2382 * _2375) + _1852;
        _2125 = (_2382 * _2377) + _1853;
        _2127 = ((_2367 * 0.039999999105930328369140625) * _2382) + _2004;
        _2129 = ((_2369 * 0.039999999105930328369140625) * _2382) + _2005;
        _2131 = ((_2371 * 0.039999999105930328369140625) * _2382) + _2006;
    }
    else
    {
        _2121 = _1851;
        _2123 = _1852;
        _2125 = _1853;
        _2127 = _2004;
        _2129 = _2005;
        _2131 = _2006;
    }
    uint _2137 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _4074 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4085 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4096 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _2162 = (((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2121 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _726))) + ((_2127 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2137].x * ((_556 * ((_512 - _432) - (_512 * _288))) + _432));
    float _2164 = ((cbInstanceData._m0[_2137].y * ((_556 * ((_513 - _433) - (_513 * _288))) + _433)) + ((_2129 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2123 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _726)));
    float _2166 = ((cbInstanceData._m0[_2137].z * ((_556 * ((_514 - _434) - (_514 * _288))) + _434)) + ((_2131 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2125 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _726)));
    float _2167 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2168 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    uint _2170 = _700 + 6u;
    float _2178 = _660 / cbSceneParam._m0[86u].x;
    float _2179 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2193 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2178, _2179, (log2((isnan(cbSceneParam._m0[77u].w) ? _633 : (isnan(_633) ? cbSceneParam._m0[77u].w : min(_633, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2195 = _2193.x;
    float _2196 = _2193.y;
    float _2197 = _2193.z;
    float _2198 = _2193.w;
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    if (_633 > cbSceneParam._m0[78u].w)
    {
        float _2240 = isnan(_633) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _633 : min(cbSceneParam._m0[80u].w, _633));
        float _2241 = _2240 / _633;
        float _2252 = _2241 * _261;
        float _2253 = _262 * _2241;
        float _2254 = (-0.0) - _2253;
        float _2255 = _2241 * _263;
        float _2257 = (cbSceneParam._m0[77u].w * _2254) / _2240;
        float _2258 = _2257 + cbSceneParam._m0[79u].w;
        float _2259 = cbSceneParam._m0[79u].w - _2253;
        float _2265 = sqrt(((_2252 * _2252) + (_2253 * _2253)) + (_2255 * _2255));
        float _2268 = (1.0 - (cbSceneParam._m0[77u].w / _2240)) * _2265;
        float _2274 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2276 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2509;
        if (abs((_2254 - _2257) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2509 = ((((_2258 > 0.0) ? exp2(_2274 * _2258) : (2.0 - exp2(_2276 * _2258))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2268;
        }
        else
        {
            float _2428 = 1.0 / cbSceneParam._m0[80u].x;
            float _2429 = isnan(_2259) ? _2258 : (isnan(_2258) ? _2259 : max(_2258, _2259));
            float _2430 = isnan(_2259) ? _2258 : (isnan(_2258) ? _2259 : min(_2258, _2259));
            float _2439 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : min(_2429, 0.0));
            float _2440 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : min(_2430, 0.0));
            _2509 = ((abs(_2265 / _2254) * cbSceneParam._m0[80u].y) * ((((_2439 - _2440) * 2.0) - ((exp2(_2274 * (isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0)))) - exp2(_2274 * (isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0))))) * _2428)) - ((exp2(_2276 * _2439) - exp2(_2276 * _2440)) * _2428))) + (_2268 * cbSceneParam._m0[80u].z);
        }
        vec4 _2511 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2178, _2179, 1.0), 0.0);
        float _2520 = exp2((_2509 * (-1.44269502162933349609375)) * (1.0 - _2511.w));
        float _2521 = log2(_2520);
        float _2537 = log2(_2198);
        _2278 = (exp2(_2537 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2521 * cbSceneParam._m0[78u].x)) * _2511.x) / cbSceneParam._m0[78u].x)) + _2195;
        _2280 = (exp2(_2537 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2521 * cbSceneParam._m0[78u].y)) * _2511.y) / cbSceneParam._m0[78u].y)) + _2196;
        _2282 = (exp2(_2537 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2521 * cbSceneParam._m0[78u].z)) * _2511.z) / cbSceneParam._m0[78u].z)) + _2197;
        _2284 = _2520 * _2198;
    }
    else
    {
        _2278 = _2195;
        _2280 = _2196;
        _2282 = _2197;
        _2284 = _2198;
    }
    bool _2547;
    vec4 _2294;
    vec4 _2316;
    float _2318;
    float _2322;
    float _2323;
    float _2324;
    float _2325;
    bool _2335;
    for (;;)
    {
        _2294 = cbMatDynParam._m0[0u];
        float _2296 = roundEven(_2294.y);
        bool _2297 = _2296 == 3.0;
        float _2298 = log2(_2284);
        float _2305 = exp2(_2298 * cbSceneParam._m0[78u].x) * _2167;
        float _2306 = exp2(_2298 * cbSceneParam._m0[78u].y) * _2168;
        float _2307 = exp2(_2298 * cbSceneParam._m0[78u].z) * _2169;
        float _2314 = _647 + (-0.5);
        _2316 = cbMtdParam._m0[1u];
        _2318 = _2316.y * _2314;
        float _2321 = (_2296 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2322 = _2321 * (_2297 ? _2305 : (_2305 + (cbSceneParam._m0[72u].w * _2278)));
        _2323 = _2321 * (_2297 ? _2306 : (_2306 + (cbSceneParam._m0[72u].w * _2280)));
        _2324 = _2321 * (_2297 ? _2307 : (_2307 + (cbSceneParam._m0[72u].w * _2282)));
        _2325 = _2314 * 0.999000012874603271484375;
        _2335 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2335)
        {
            if ((cbInstanceData._m0[_700 + 7u].x + _2325) < 0.5)
            {
                _2547 = true;
                break;
            }
        }
        uint _2463 = _702 + uint(_2294.w);
        if ((cbInstanceData._m0[_2463].w < 1.0) && ((cbInstanceData._m0[_2463].w + _2325) < 0.5))
        {
            _2547 = true;
            break;
        }
        if ((_2318 + 1.0) < _2316.x)
        {
            _2547 = true;
            break;
        }
        _2547 = false;
        break;
    }
    float _2778;
    if (_2547)
    {
        discard_state = true;
        _2778 = 0.0;
    }
    else
    {
        _2778 = cbInstanceData._m0[_2170].w;
    }
    SV_Target.x = _2322;
    SV_Target.y = _2323;
    SV_Target.z = _2324;
    SV_Target.w = _2778;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2170].w;
    discard_exit();
}


