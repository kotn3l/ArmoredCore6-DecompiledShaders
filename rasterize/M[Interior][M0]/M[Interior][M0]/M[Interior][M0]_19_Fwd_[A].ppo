#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _395;
float _3165;
float _3166;
float _3167;
float _3168;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _328 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _335 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _344 = cbMtdParam._m0[23u].x + _259;
    float _345 = cbMtdParam._m0[23u].y + _260;
    float _346 = cbMtdParam._m0[23u].z + _261;
    float _360 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_328 * _188, _328 * _189, _328 * _190));
    float _361 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_335 * _202, _335 * _203, _335 * _204));
    float _362 = (-0.0) - dot(vec3(_344, _345, _346), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _366 * _362;
    float _369 = (cbMtdParam._m0[19u].w * _360) * _366;
    float _371 = (cbMtdParam._m0[20u].x * _361) * _366;
    float _374 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _375 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _393;
    float _396;
    float _398;
    if (_369 > 0.0)
    {
        float _379 = (1.0 - _374) / _369;
        _393 = _379;
        _396 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_379 * _367)) * 0.16666667163372039794921875;
        _398 = (fract((_379 * _371) + _375) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _394 = ((-0.0) - _374) / _369;
            frontier_phi_3_2_ladder = _394;
            frontier_phi_3_2_ladder_1 = (fract((_394 * _371) + _375) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_394 * _367) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _395;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _393 = frontier_phi_3_2_ladder;
        _396 = frontier_phi_3_2_ladder_2;
        _398 = frontier_phi_3_2_ladder_1;
    }
    float _424;
    float _426;
    float _428;
    if (_371 > 0.0)
    {
        float _411 = (1.0 - _375) / _371;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_411 < _393)
        {
            frontier_phi_8_5_ladder = (fract(_411 * _367) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_411 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _411;
        }
        else
        {
            frontier_phi_8_5_ladder = _398;
            frontier_phi_8_5_ladder_1 = _396;
            frontier_phi_8_5_ladder_2 = _393;
        }
        _424 = frontier_phi_8_5_ladder_2;
        _426 = frontier_phi_8_5_ladder_1;
        _428 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_371 < 0.0)
        {
            float _425 = ((-0.0) - _375) / _371;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_425 < _393)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_425 * _367) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_425 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _425;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _398;
                frontier_phi_8_6_ladder_9_ladder_1 = _396;
                frontier_phi_8_6_ladder_9_ladder_2 = _393;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _398;
            frontier_phi_8_6_ladder_1 = _396;
            frontier_phi_8_6_ladder_2 = _393;
        }
        _424 = frontier_phi_8_6_ladder_2;
        _426 = frontier_phi_8_6_ladder_1;
        _428 = frontier_phi_8_6_ladder;
    }
    float _432 = (_367 > 0.0) ? (cbMtdParam._m0[16u].w / _367) : 5000.0;
    float _445;
    float _446;
    if (_432 < _424)
    {
        _445 = ((_374 + cbMtdParam._m0[17u].x) + (_432 * _369)) * 0.16666667163372039794921875;
        _446 = (((_432 * _371) + _375) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _445 = _426;
        _446 = _428;
    }
    vec4 _448 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_445, _446));
    float _453 = _448.x * cbMtdParam._m0[13u].x;
    float _454 = _448.y * cbMtdParam._m0[13u].y;
    float _455 = _448.z * cbMtdParam._m0[13u].z;
    float _460 = 0.5 - (_286 * 0.5);
    float _470 = (((_453 - _299) - (_453 * _286)) * _460) + _299;
    float _471 = (((_454 - _301) - (_454 * _286)) * _460) + _301;
    float _472 = (((_455 - _303) - (_455 * _286)) * _460) + _303;
    vec4 _484 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _492 = (_484.x * 2.0) + (-1.0);
    float _494 = (_484.y * 2.0) + (-1.0);
    float _495 = dot(vec2(_492, _494), vec2(_492, _494));
    float _3177 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _500 = sqrt(1.0 - (isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0))));
    float _501 = _484.z * _286;
    float _504 = fma(_500, _195, fma(_494, _202, _492 * _188));
    float _507 = fma(_500, _196, fma(_494, _203, _492 * _189));
    float _510 = fma(_500, _197, fma(_494, _204, _492 * _190));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3188 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _518 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
    float _3199 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3210 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3221 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _542 = _259 * _541;
    float _543 = _260 * _541;
    float _544 = _261 * _541;
    vec4 _549 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _551 = _549.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _714 = sqrt(((_259 * _259) + (_260 * _260)) + (_261 * _261));
        float _720 = (cbMatDynParam._m0[5u].x * _714) + cbMatDynParam._m0[5u].y;
        float _3232 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _725 = (cbMatDynParam._m0[5u].z * _714) + cbMatDynParam._m0[5u].w;
        float _3243 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) - _721)) + _721) < ((_551 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _569 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _570 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _590 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _593 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _596 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _609 = uint(roundEven(NORMAL.w)) * 13u;
    uint _610 = _609 + 9u;
    uint _611 = _610 + uint(cbMatDynParam._m0[0u].w);
    float _617 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0)))) * cbInstanceData._m0[_611].x;
    float _618 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * cbInstanceData._m0[_611].y;
    float _619 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_611].z;
    float _3254 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    vec4 _631 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _569, cbSceneParam._m0[86u].y * _570));
    float _634 = _631.x * TEXCOORD.z;
    float _635 = dot(vec3(_515, _516, _517), vec3(_542, _543, _544));
    float _638 = _635 * 2.0;
    float _642 = (_638 * _515) - _542;
    float _643 = (_638 * _516) - _543;
    float _644 = (_638 * _517) - _544;
    float _648 = abs(dot(vec3(_542, _543, _544), vec3(_515, _516, _517)));
    float _3287 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _650 = sqrt(_518);
    float _663 = exp2((_650 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_650 * 3.0));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _759 = fma(_703, cbModelParam._m0[26u].z, fma(_699, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695));
        float _763 = fma(_703, cbModelParam._m0[27u].z, fma(_699, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695));
        float _767 = fma(_703, cbModelParam._m0[28u].z, fma(_699, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695));
        float _791 = _695 + _515;
        float _792 = _699 + _516;
        float _793 = _703 + _517;
        float _803 = fma(_793, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791)) - _759;
        float _804 = fma(_793, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791)) - _763;
        float _805 = fma(_793, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791)) - _767;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_759 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_763 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[34u].z) + ((((((_767 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _861 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_827.x + (-0.5));
        float _863 = _861 * (_827.y + (-0.5));
        float _864 = _861 * (_827.z + (-0.5));
        float _871 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_834.x + (-0.5));
        float _873 = _871 * (_834.y + (-0.5));
        float _874 = _871 * (_834.z + (-0.5));
        float _881 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_841.x + (-0.5));
        float _883 = _881 * (_841.y + (-0.5));
        float _884 = _881 * (_841.z + (-0.5));
        float _891 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_848.x + (-0.5));
        float _893 = _891 * (_848.y + (-0.5));
        float _894 = _891 * (_848.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _915 = (dot(vec3(_515, _516, _517), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3313 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _925 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3324 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3335 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * (_927 + 1.0))) + _932) * _895;
        float _942 = _863 * 0.5;
        float _943 = _873 * 0.5;
        float _944 = _883 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_515, _516, _517), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3368 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_969 + 1.0))) + _974) * _896;
        float _984 = _864 * 0.5;
        float _985 = _874 * 0.5;
        float _986 = _884 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_515, _516, _517), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3401 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_1011 + 1.0))) + _1016) * _897;
        _1033 = _864;
        _1034 = _863;
        _1035 = _862;
        _1036 = _874;
        _1037 = _873;
        _1038 = _872;
        _1039 = _884;
        _1040 = _883;
        _1041 = _882;
        _1042 = _897;
        _1043 = _896;
        _1044 = _895;
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _395;
        _1034 = _395;
        _1035 = _395;
        _1036 = _395;
        _1037 = _395;
        _1038 = _395;
        _1039 = _395;
        _1040 = _395;
        _1041 = _395;
        _1042 = _395;
        _1043 = _395;
        _1044 = _395;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_703, cbModelParam._m0[30u].z, fma(_699, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _695));
        float _1080 = fma(_703, cbModelParam._m0[31u].z, fma(_699, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _695));
        float _1084 = fma(_703, cbModelParam._m0[32u].z, fma(_699, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _695));
        float _1107 = _695 + _515;
        float _1108 = _699 + _516;
        float _1109 = _703 + _517;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_515, _516, _517), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3464 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_515, _516, _517), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3497 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_515, _516, _517), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3530 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _395;
        _1346 = _395;
        _1347 = _395;
        _1348 = _395;
        _1349 = _395;
        _1350 = _395;
        _1351 = _395;
        _1352 = _395;
        _1353 = _395;
        _1354 = _395;
        _1355 = _395;
        _1356 = _395;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1045)) + _1045;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1046)) + _1046;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1047)) + _1047;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _642 * 0.5;
    float _1414 = _643 * 0.5;
    float _1415 = _644 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_703, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_703, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_703, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_644, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _642));
        float _1545 = fma(_644, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _642));
        float _1548 = fma(_644, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _642));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1576 = frontier_phi_29_27_ladder;
        }
        float _1925;
        if (_1545 > 0.0)
        {
            _1925 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1925 = frontier_phi_38_34_ladder;
        }
        float _2233;
        if (_1548 > 0.0)
        {
            _2233 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2233 = frontier_phi_52_45_ladder;
        }
        float _2235 = isnan(_1925) ? _1576 : (isnan(_1576) ? _1925 : min(_1576, _1925));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1542) + _1531;
        float _2241 = (_2236 * _1545) + _1535;
        float _2242 = (_2236 * _1548) + _1539;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2243;
        float _2246 = _2243 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2242 > _2246) || ((_2242 < _2244) || ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 < _2244) || (_2240 > _2246))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2242, cbModelParam._m0[9u].z, fma(_2241, cbModelParam._m0[9u].y, _2240 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2242, cbModelParam._m0[10u].z, fma(_2241, cbModelParam._m0[10u].y, _2240 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2242, cbModelParam._m0[11u].z, fma(_2241, cbModelParam._m0[11u].y, _2240 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_28_52_ladder = _2384.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2384.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2384.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_28_52_ladder_2;
        _1566 = frontier_phi_28_52_ladder_1;
        _1568 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_642, _643, _644), _1482);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_703, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_703, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_703, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_644, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _642));
        float _1642 = fma(_644, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _642));
        float _1645 = fma(_644, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _642));
        float _1930;
        if (_1639 > 0.0)
        {
            _1930 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1930 = frontier_phi_40_36_ladder;
        }
        float _2259;
        if (_1642 > 0.0)
        {
            _2259 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2259 = frontier_phi_54_47_ladder;
        }
        float _2449;
        if (_1645 > 0.0)
        {
            _2449 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2449 = frontier_phi_72_65_ladder;
        }
        float _2451 = isnan(_2259) ? _1930 : (isnan(_1930) ? _2259 : min(_1930, _2259));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1639) + _1628;
        float _2457 = (_2452 * _1642) + _1632;
        float _2458 = (_2452 * _1645) + _1636;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2460 = (-1.0) - _2459;
        float _2462 = _2459 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2458 > _2462) || ((_2458 < _2460) || ((_2457 > _2462) || ((_2457 < _2460) || ((_2456 < _2460) || (_2456 > _2462))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2458, cbModelParam._m0[17u].z, fma(_2457, cbModelParam._m0[17u].y, _2456 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2458, cbModelParam._m0[18u].z, fma(_2457, cbModelParam._m0[18u].y, _2456 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2458, cbModelParam._m0[19u].z, fma(_2457, cbModelParam._m0[19u].y, _2456 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_37_72_ladder = _2700.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2700.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2700.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_37_72_ladder_2;
        _1666 = frontier_phi_37_72_ladder_1;
        _1668 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_642, _643, _644), _1573);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1680 = ((((1.0 - _663) * ((_650 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_663 * _650)) * _634;
    float _1681 = _1680 * ((cbModelParam._m0[1u].w * (_1664 - _1564)) + _1564);
    float _1682 = _1680 * ((cbModelParam._m0[1u].w * (_1666 - _1566)) + _1566);
    float _1683 = _1680 * ((cbModelParam._m0[1u].w * (_1668 - _1568)) + _1568);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    uvec4 _1702 = floatBitsToUint(cbInstanceData._m0[_609 + 5u]);
    uint _1704 = _1702.x * 14u;
    uint _1705 = _1704 + 13u;
    float _1710 = _634 + (-1.0);
    float _1713 = (cbLight._m0[_1705].x * _1710) + 1.0;
    float _1714 = (cbLight._m0[_1705].y * _1710) + 1.0;
    uint _1715 = _1704 + 5u;
    float _1721 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
    uint _1725 = _1704 + 4u;
    float _1732 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
    uint _1736 = _1704 | 1u;
    float _1747 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_515, _516, _517));
    float _1750 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_515, _516, _517));
    float _3666 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _3677 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1755 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.3183098733425140380859375;
    float _1757 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.3183098733425140380859375;
    float _1764 = ((cbLight._m0[_1715].x * _1721) * _1757) + ((cbLight._m0[_1725].x * _1732) * _1755);
    float _1765 = ((_1721 * cbLight._m0[_1715].y) * _1757) + ((_1732 * cbLight._m0[_1725].y) * _1755);
    float _1766 = ((_1721 * cbLight._m0[_1715].z) * _1757) + ((_1732 * cbLight._m0[_1725].z) * _1755);
    uint _1768 = _1704 + 8u;
    float _1781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _518) * 0.949999988079071044921875);
    float _1782 = _1781 * _1781;
    float _1783 = cbLight._m0[_1704].x + _542;
    float _1784 = cbLight._m0[_1704].y + _543;
    float _1785 = cbLight._m0[_1704].z + _544;
    float _1789 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
    float _1790 = _1789 * _1783;
    float _1791 = _1789 * _1784;
    float _1792 = _1789 * _1785;
    float _1793 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1704].xyz));
    float _3688 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _1797 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1798 = dot(vec3(_515, _516, _517), vec3(_1790, _1791, _1792));
    float _3710 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _1802 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1790, _1791, _1792));
    float _3721 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1806 = _1782 * _1782;
    float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
    float _1821 = (exp2(log2(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1822 = 1.0 - _1782;
    float _1833 = (0.5 / (((_1797 * ((_1796 * _1822) + _1782)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1822) + _1782) * _1796))) * _1796;
    float _3732 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1835 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
    uint _1846 = _1704 + 9u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _518) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1736].x + _542;
    float _1860 = cbLight._m0[_1736].y + _543;
    float _1861 = cbLight._m0[_1736].z + _544;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1736].xyz));
    float _3743 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1873 = dot(vec3(_515, _516, _517), vec3(_1866, _1867, _1868));
    float _3754 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _1877 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1866, _1867, _1868));
    float _3765 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1881 = _1858 * _1858;
    float _1885 = ((_1876 * _1876) * (_1881 + (-1.0))) + 1.0;
    float _1894 = (exp2(log2(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1895 = 1.0 - _1858;
    float _1905 = (0.5 / (((_1797 * ((_1872 * _1895) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1895) + _1858) * _1872))) * _1872;
    float _3776 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1907 = (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1881 / ((_1885 * _1885) * 3.141590118408203125));
    float _1917 = (((_1894 * cbLight._m0[_1846].x) * _1907) * _1721) + (((_1821 * cbLight._m0[_1768].x) * _1835) * _1732);
    float _1918 = (((_1894 * cbLight._m0[_1846].y) * _1907) * _1721) + (((_1821 * cbLight._m0[_1768].y) * _1835) * _1732);
    float _1919 = (((_1894 * cbLight._m0[_1846].z) * _1907) * _1721) + (((_1821 * cbLight._m0[_1768].z) * _1835) * _1732);
    float _2034;
    float _2036;
    float _2038;
    float _2040;
    float _2042;
    float _2044;
    if (_1702.y == 0u)
    {
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1974;
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1974;
        float _1977 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1974;
        uvec4 _1989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1990 = _1989.x;
        uint _2001 = uint((float(_1989.y) * floor(float(uint(cbSceneParam._m0[85u].y * _570) / _1990))) + floor(float(uint(cbSceneParam._m0[85u].x * _569) / _1990)));
        float _2011 = (log2(_1977 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2012 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        uint _2015 = uint(isnan(14.0) ? _2012 : (isnan(_2012) ? 14.0 : min(_2012, 14.0)));
        uvec4 _2020 = texelFetch(g_lightClusterGridBuffer, int(((_2015 << 2u) + (_2001 << 6u)) >> 2u));
        uint _2021 = _2020.x;
        uint _2022 = _1989.z;
        float _2112;
        float _2114;
        float _2116;
        float _2118;
        float _2120;
        float _2122;
        if (((((1u << ((_2022 >> 4u) & 15u)) + 4294967295u) & _2021) == 0u) || ((_2022 & 240u) == 0u))
        {
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
            _2120 = 0.0;
            _2122 = 0.0;
        }
        else
        {
            float _2113;
            float _2115;
            float _2117;
            float _2119;
            float _2121;
            float _2123;
            float _2296 = 0.0;
            float _2297 = 0.0;
            float _2298 = 0.0;
            float _2299 = 0.0;
            float _2300 = 0.0;
            float _2301 = 0.0;
            uint _2302 = 0u;
            uint _2311;
            bool _2312;
            for (;;)
            {
                _2311 = texelFetch(g_lightClassification, int((((_2015 << 5u) + (_2001 << 9u)) + (_2302 << 2u)) >> 2u)).x;
                _2312 = _2311 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2312)
                {
                    frontier_phi_67_pred = _2299;
                    frontier_phi_67_pred_1 = _2298;
                    frontier_phi_67_pred_2 = _2297;
                    frontier_phi_67_pred_3 = _2296;
                    frontier_phi_67_pred_4 = _2300;
                    frontier_phi_67_pred_5 = _2301;
                }
                else
                {
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    uint _2498;
                    _2492 = _2296;
                    _2493 = _2297;
                    _2494 = _2298;
                    _2495 = _2299;
                    _2496 = _2300;
                    _2497 = _2301;
                    _2498 = _2311;
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    for (;;)
                    {
                        uint _2502 = uint(findLSB(_2498)) + (_2302 << 5u);
                        uint _2499 = (_2498 + 4294967295u) & _2498;
                        uint _2504 = _2502 * 48u;
                        vec4 _2518 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2504)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 3u)).x));
                        uint _2524 = (_2502 * 48u) + 4u;
                        vec4 _2537 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2524)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 3u)).x));
                        uint _2543 = (_2502 * 48u) + 8u;
                        vec3 _2554 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2543)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 2u)).x));
                        float _2558 = _2518.x - _1975;
                        float _2559 = _2518.y - _1976;
                        float _2560 = _2518.z - _1977;
                        float _2561 = dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560));
                        float _2564 = inversesqrt(_2561);
                        float _2565 = _2564 * _2558;
                        float _2566 = _2564 * _2559;
                        float _2567 = _2564 * _2560;
                        float _2568 = dot(vec3(_590, _593, _596), vec3(_2565, _2566, _2567));
                        float _2573 = 1.0 - (_2561 * _2518.w);
                        float _3797 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                        float _2574 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
                        float _2575 = sqrt(_2561) * _2537.w;
                        float _2578 = 1.39999997615814208984375 / (_2575 + 1.39999997615814208984375);
                        float _2579 = _2578 * _2578;
                        float _2582 = ((1.0 - _2579) * _2568) + _2579;
                        float _2585 = _2575 * _2575;
                        float _2589 = ((isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))) * _2574) / ((_2585 * 0.699999988079071044921875) + 1.0);
                        float _2593 = (-0.0) - _1975;
                        float _2594 = (-0.0) - _1976;
                        float _2595 = (-0.0) - _1977;
                        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
                        float _2600 = _2599 * _2593;
                        float _2601 = _2599 * _2594;
                        float _2602 = _2599 * _2595;
                        float _2610 = exp2(log2(1.0 / ((_2585 * 3.5) + 5.0)) * 0.25);
                        float _2611 = 1.0 - _650;
                        float _2618 = sqrt(1.0 - ((1.0 - (_2611 * _2611)) * (1.0 - (_2610 * _2610))));
                        float _2619 = _2618 * _2618;
                        float _2620 = _2619 * _2619;
                        float _2621 = _2600 + _2565;
                        float _2622 = _2601 + _2566;
                        float _2623 = _2602 + _2567;
                        float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
                        float _2631 = dot(vec3(_590, _593, _596), vec3(_2600, _2601, _2602));
                        float _3813 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
                        float _2634 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
                        float _2635 = dot(vec3(_590, _593, _596), vec3(_2627 * _2621, _2627 * _2622, _2627 * _2623));
                        float _3824 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
                        float _2638 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
                        float _2642 = ((_2638 * _2638) * (_2620 + (-1.0))) + 1.0;
                        float _2643 = _2578 * _2619;
                        float _2644 = _2643 * _2643;
                        float _2647 = ((1.0 - _2644) * _2568) + _2644;
                        float _3835 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2648 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
                        float _2649 = 1.0 - _2619;
                        float _2659 = (0.5 / (((_2648 * ((_2634 * _2649) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2648 * _2649) + _2619) * _2634))) * _2648;
                        float _3846 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2670 = (((_2620 * 3.1415927410125732421875) * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) / ((_2642 * _2642) * ((_2585 * 2.1991131305694580078125) + 3.141590118408203125))) * _2574;
                        _2396 = (_2589 * _2537.x) + _2495;
                        _2397 = (_2589 * _2537.y) + _2496;
                        _2398 = (_2589 * _2537.z) + _2497;
                        _2393 = (_2670 * _2554.x) + _2492;
                        _2394 = (_2670 * _2554.y) + _2493;
                        _2395 = (_2670 * _2554.z) + _2494;
                        if (_2499 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2492 = _2393;
                            _2493 = _2394;
                            _2494 = _2395;
                            _2495 = _2396;
                            _2496 = _2397;
                            _2497 = _2398;
                            _2498 = _2499;
                        }
                    }
                    frontier_phi_67_pred = _2396;
                    frontier_phi_67_pred_1 = _2395;
                    frontier_phi_67_pred_2 = _2394;
                    frontier_phi_67_pred_3 = _2393;
                    frontier_phi_67_pred_4 = _2397;
                    frontier_phi_67_pred_5 = _2398;
                }
                _2119 = frontier_phi_67_pred;
                _2117 = frontier_phi_67_pred_1;
                _2115 = frontier_phi_67_pred_2;
                _2113 = frontier_phi_67_pred_3;
                _2121 = frontier_phi_67_pred_4;
                _2123 = frontier_phi_67_pred_5;
                uint _2303 = _2302 + 1u;
                if (_2303 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2296 = _2113;
                    _2297 = _2115;
                    _2298 = _2117;
                    _2299 = _2119;
                    _2300 = _2121;
                    _2301 = _2123;
                    _2302 = _2303;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
            _2120 = _2121;
            _2122 = _2123;
        }
        uvec4 _2126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2127 = _2126.z;
        uint _2129 = (_2127 >> 8u) & 15u;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        float _2272;
        float _2274;
        if (((4294967295u << _2129) & _2021) == 0u)
        {
            _2264 = _2112;
            _2266 = _2114;
            _2268 = _2116;
            _2270 = _2118;
            _2272 = _2120;
            _2274 = _2122;
        }
        else
        {
            float _2289 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
            float _2290 = _2289 * _1975;
            float _2291 = _2289 * _1976;
            float _2292 = _2289 * _1977;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2129 < ((_2127 >> 12u) & 15u))
            {
                float _2265;
                float _2267;
                float _2269;
                float _2271;
                float _2273;
                float _2275;
                float _2475 = _2112;
                float _2476 = _2114;
                float _2477 = _2116;
                float _2478 = _2118;
                float _2479 = _2120;
                float _2480 = _2122;
                uint _2481 = _2129;
                uint _2490;
                bool _2491;
                for (;;)
                {
                    _2490 = texelFetch(g_lightClassification, int((((_2015 << 5u) + (_2001 << 9u)) + (_2481 << 2u)) >> 2u)).x;
                    _2491 = _2490 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2491)
                    {
                        frontier_phi_81_pred = _2478;
                        frontier_phi_81_pred_1 = _2477;
                        frontier_phi_81_pred_2 = _2476;
                        frontier_phi_81_pred_3 = _2475;
                        frontier_phi_81_pred_4 = _2480;
                        frontier_phi_81_pred_5 = _2479;
                    }
                    else
                    {
                        float _2705;
                        float _2706;
                        float _2707;
                        float _2708;
                        float _2709;
                        float _2710;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _2718 = _2475;
                        float _2719 = _2476;
                        float _2720 = _2477;
                        float _2721 = _2478;
                        float _2722 = _2479;
                        float _2723 = _2480;
                        uint _2724 = _2490;
                        uint _2725;
                        vec4 _2750;
                        float _2751;
                        vec4 _2766;
                        vec3 _2778;
                        vec4 _2793;
                        vec4 _2808;
                        float _2854;
                        bool _2855;
                        for (;;)
                        {
                            uint _2735 = ((_2481 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2724));
                            _2725 = (_2724 + 4294967295u) & _2724;
                            uint _2737 = _2735 * 40u;
                            _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            _2751 = _2750.w;
                            uint _2753 = (_2735 * 40u) + 4u;
                            _2766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 3u)).x));
                            uint _2768 = (_2735 * 40u) + 8u;
                            _2778 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 2u)).x));
                            uint _2780 = (_2735 * 40u) + 16u;
                            _2793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 3u)).x));
                            uint _2795 = (_2735 * 40u) + 20u;
                            _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            uint _2810 = (_2735 * 40u) + 24u;
                            vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            uint _2829 = (_2735 * 40u) + 28u;
                            vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            _2854 = fma(_1977, _2842.z, fma(_1976, _2842.y, _2842.x * _1975)) + _2842.w;
                            _2855 = !((fma(_1977, _2823.z, fma(_1976, _2823.y, _2823.x * _1975)) + _2823.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2855)
                            {
                                float _2882 = _2750.x - _1975;
                                float _2883 = _2750.y - _1976;
                                float _2884 = _2750.z - _1977;
                                float _2885 = dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884));
                                float _2888 = inversesqrt(_2885);
                                float _2889 = _2888 * _2882;
                                float _2890 = _2888 * _2883;
                                float _2891 = _2888 * _2884;
                                float _2895 = 1.0 - (_2885 / (_2751 * _2751));
                                float _3857 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                                float _2896 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
                                float _2900 = sqrt(_2885) * _2766.w;
                                float _2902 = 1.39999997615814208984375 / (_2900 + 1.39999997615814208984375);
                                float _2903 = _2902 * _2902;
                                float _2906 = ((1.0 - _2903) * dot(vec3(_2889, _2890, _2891), vec3(_590, _593, _596))) + _2903;
                                float _2909 = _2900 * _2900;
                                float _2913 = (fma(_1977, _2793.z, fma(_1976, _2793.y, _2793.x * _1975)) + _2793.w) / _2854;
                                float _2914 = (fma(_1977, _2808.z, fma(_1976, _2808.y, _2808.x * _1975)) + _2808.w) / _2854;
                                float _2918 = 1.0 - dot(vec2(_2913, _2914), vec2(_2913, _2914));
                                float _3873 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                                float _2919 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
                                float _2920 = _2919 * (((isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))) * _2896) / ((_2909 * 0.699999988079071044921875) + 1.0));
                                float _2932 = exp2(log2(1.0 / ((_2909 * 3.5) + 5.0)) * 0.25);
                                float _2933 = 1.0 - _650;
                                float _2940 = sqrt(1.0 - ((1.0 - (_2933 * _2933)) * (1.0 - (_2932 * _2932))));
                                float _2941 = _2940 * _2940;
                                float _2942 = _2941 * _2941;
                                float _2943 = _2889 - _2290;
                                float _2944 = _2890 - _2291;
                                float _2945 = _2891 - _2292;
                                float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
                                float _2953 = dot(vec3(_590, _593, _596), vec3((-0.0) - _2290, (-0.0) - _2291, (-0.0) - _2292));
                                float _3884 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                                float _2956 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
                                float _2957 = dot(vec3(_590, _593, _596), vec3(_2949 * _2943, _2949 * _2944, _2949 * _2945));
                                float _3895 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2960 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                                float _2964 = ((_2960 * _2960) * (_2942 + (-1.0))) + 1.0;
                                float _2965 = _2902 * _2941;
                                float _2966 = _2965 * _2965;
                                float _2972 = ((1.0 - _2966) * dot(vec3(_590, _593, _596), vec3(_2889, _2890, _2891))) + _2966;
                                float _3906 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                                float _2974 = 1.0 - _2941;
                                float _2984 = (0.5 / (((_2973 * ((_2956 * _2974) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2973 * _2974) + _2941) * _2956))) * _2973;
                                float _3917 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2994 = (_2919 * _2896) * (((_2942 * 3.1415927410125732421875) * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) / ((_2964 * _2964) * ((_2909 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2920 * _2766.x;
                                frontier_phi_87_pred_1 = _2994 * _2778.z;
                                frontier_phi_87_pred_2 = _2994 * _2778.y;
                                frontier_phi_87_pred_3 = _2994 * _2778.x;
                                frontier_phi_87_pred_4 = _2920 * _2766.z;
                                frontier_phi_87_pred_5 = _2920 * _2766.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3001 = frontier_phi_87_pred;
                            _3000 = frontier_phi_87_pred_1;
                            _2999 = frontier_phi_87_pred_2;
                            _2998 = frontier_phi_87_pred_3;
                            _3003 = frontier_phi_87_pred_4;
                            _3002 = frontier_phi_87_pred_5;
                            _2708 = _3001 + _2721;
                            _2709 = _3002 + _2722;
                            _2710 = _3003 + _2723;
                            _2705 = _2998 + _2718;
                            _2706 = _2999 + _2719;
                            _2707 = _3000 + _2720;
                            if (_2725 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2718 = _2705;
                                _2719 = _2706;
                                _2720 = _2707;
                                _2721 = _2708;
                                _2722 = _2709;
                                _2723 = _2710;
                                _2724 = _2725;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2708;
                        frontier_phi_81_pred_1 = _2707;
                        frontier_phi_81_pred_2 = _2706;
                        frontier_phi_81_pred_3 = _2705;
                        frontier_phi_81_pred_4 = _2710;
                        frontier_phi_81_pred_5 = _2709;
                    }
                    _2271 = frontier_phi_81_pred;
                    _2269 = frontier_phi_81_pred_1;
                    _2267 = frontier_phi_81_pred_2;
                    _2265 = frontier_phi_81_pred_3;
                    _2275 = frontier_phi_81_pred_4;
                    _2273 = frontier_phi_81_pred_5;
                    uint _2482 = _2481 + 1u;
                    if (_2482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2475 = _2265;
                        _2476 = _2267;
                        _2477 = _2269;
                        _2478 = _2271;
                        _2479 = _2273;
                        _2480 = _2275;
                        _2481 = _2482;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2275;
                frontier_phi_56_57_ladder_1 = _2273;
                frontier_phi_56_57_ladder_2 = _2271;
                frontier_phi_56_57_ladder_3 = _2267;
                frontier_phi_56_57_ladder_4 = _2265;
                frontier_phi_56_57_ladder_5 = _2269;
            }
            else
            {
                frontier_phi_56_57_ladder = _2122;
                frontier_phi_56_57_ladder_1 = _2120;
                frontier_phi_56_57_ladder_2 = _2118;
                frontier_phi_56_57_ladder_3 = _2114;
                frontier_phi_56_57_ladder_4 = _2112;
                frontier_phi_56_57_ladder_5 = _2116;
            }
            _2264 = frontier_phi_56_57_ladder_4;
            _2266 = frontier_phi_56_57_ladder_3;
            _2268 = frontier_phi_56_57_ladder_5;
            _2270 = frontier_phi_56_57_ladder_2;
            _2272 = frontier_phi_56_57_ladder_1;
            _2274 = frontier_phi_56_57_ladder;
        }
        float _2279 = isnan(1.0) ? _634 : (isnan(_634) ? 1.0 : min(_634, 1.0));
        _2034 = (_2279 * _2270) + _1764;
        _2036 = (_2279 * _2272) + _1765;
        _2038 = (_2279 * _2274) + _1766;
        _2040 = ((_2264 * 0.039999999105930328369140625) * _2279) + _1917;
        _2042 = ((_2266 * 0.039999999105930328369140625) * _2279) + _1918;
        _2044 = ((_2268 * 0.039999999105930328369140625) * _2279) + _1919;
    }
    else
    {
        _2034 = _1764;
        _2036 = _1765;
        _2038 = _1766;
        _2040 = _1917;
        _2042 = _1918;
        _2044 = _1919;
    }
    float _3933 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3944 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3955 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _2061 = ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2034 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _634))) + ((_2040 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1471)) * cbPerFrame._m0[3u].x);
    float _2062 = ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_2036 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _634))) + ((_2042 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1471)) * cbPerFrame._m0[3u].x);
    float _2063 = ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2038 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _634))) + ((_2044 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1471)) * cbPerFrame._m0[3u].x);
    float _2064 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2065 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2066 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    uint _2067 = _609 + 6u;
    float _2075 = _569 / cbSceneParam._m0[86u].x;
    float _2076 = _570 / cbSceneParam._m0[86u].y;
    vec4 _2090 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2075, _2076, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2092 = _2090.x;
    float _2093 = _2090.y;
    float _2094 = _2090.z;
    float _2095 = _2090.w;
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2137 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2138 = _2137 / _537;
        float _2149 = _2138 * _259;
        float _2150 = _260 * _2138;
        float _2151 = (-0.0) - _2150;
        float _2152 = _2138 * _261;
        float _2154 = (cbSceneParam._m0[77u].w * _2151) / _2137;
        float _2155 = _2154 + cbSceneParam._m0[79u].w;
        float _2156 = cbSceneParam._m0[79u].w - _2150;
        float _2162 = sqrt(((_2149 * _2149) + (_2150 * _2150)) + (_2152 * _2152));
        float _2165 = (1.0 - (cbSceneParam._m0[77u].w / _2137)) * _2162;
        float _2171 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2173 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2406;
        if (abs((_2151 - _2154) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2406 = ((((_2155 > 0.0) ? exp2(_2171 * _2155) : (2.0 - exp2(_2173 * _2155))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2165;
        }
        else
        {
            float _2325 = 1.0 / cbSceneParam._m0[80u].x;
            float _2326 = isnan(_2156) ? _2155 : (isnan(_2155) ? _2156 : max(_2155, _2156));
            float _2327 = isnan(_2156) ? _2155 : (isnan(_2155) ? _2156 : min(_2155, _2156));
            float _2336 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : min(_2326, 0.0));
            float _2337 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : min(_2327, 0.0));
            _2406 = ((abs(_2162 / _2151) * cbSceneParam._m0[80u].y) * ((((_2336 - _2337) * 2.0) - ((exp2(_2171 * (isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0)))) - exp2(_2171 * (isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0))))) * _2325)) - ((exp2(_2173 * _2336) - exp2(_2173 * _2337)) * _2325))) + (_2165 * cbSceneParam._m0[80u].z);
        }
        vec4 _2408 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2075, _2076, 1.0), 0.0);
        float _2417 = exp2((_2406 * (-1.44269502162933349609375)) * (1.0 - _2408.w));
        float _2418 = log2(_2417);
        float _2434 = log2(_2095);
        _2175 = (exp2(_2434 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].x)) * _2408.x) / cbSceneParam._m0[78u].x)) + _2092;
        _2177 = (exp2(_2434 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].y)) * _2408.y) / cbSceneParam._m0[78u].y)) + _2093;
        _2179 = (exp2(_2434 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].z)) * _2408.z) / cbSceneParam._m0[78u].z)) + _2094;
        _2181 = _2417 * _2095;
    }
    else
    {
        _2175 = _2092;
        _2177 = _2093;
        _2179 = _2094;
        _2181 = _2095;
    }
    bool _2444;
    vec4 _2191;
    vec4 _2213;
    float _2215;
    float _2219;
    float _2220;
    float _2221;
    float _2222;
    bool _2232;
    for (;;)
    {
        _2191 = cbMatDynParam._m0[0u];
        float _2193 = roundEven(_2191.y);
        bool _2194 = _2193 == 3.0;
        float _2195 = log2(_2181);
        float _2202 = exp2(_2195 * cbSceneParam._m0[78u].x) * _2064;
        float _2203 = exp2(_2195 * cbSceneParam._m0[78u].y) * _2065;
        float _2204 = exp2(_2195 * cbSceneParam._m0[78u].z) * _2066;
        float _2211 = _551 + (-0.5);
        _2213 = cbMtdParam._m0[1u];
        _2215 = _2213.y * _2211;
        float _2218 = (_2193 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2219 = _2218 * (_2194 ? _2202 : (_2202 + (cbSceneParam._m0[72u].w * _2175)));
        _2220 = _2218 * (_2194 ? _2203 : (_2203 + (cbSceneParam._m0[72u].w * _2177)));
        _2221 = _2218 * (_2194 ? _2204 : (_2204 + (cbSceneParam._m0[72u].w * _2179)));
        _2222 = _2211 * 0.999000012874603271484375;
        _2232 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2232)
        {
            if ((cbInstanceData._m0[_609 + 7u].x + _2222) < 0.5)
            {
                _2444 = true;
                break;
            }
        }
        uint _2360 = _610 + uint(_2191.w);
        if ((cbInstanceData._m0[_2360].w < 1.0) && ((cbInstanceData._m0[_2360].w + _2222) < 0.5))
        {
            _2444 = true;
            break;
        }
        if ((_2215 + 1.0) < _2213.x)
        {
            _2444 = true;
            break;
        }
        _2444 = false;
        break;
    }
    float _2675;
    if (_2444)
    {
        discard_state = true;
        _2675 = 0.0;
    }
    else
    {
        _2675 = cbInstanceData._m0[_2067].w;
    }
    SV_Target.x = _2219;
    SV_Target.y = _2220;
    SV_Target.z = _2221;
    SV_Target.w = _2675;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2067].w;
    discard_exit();
}


