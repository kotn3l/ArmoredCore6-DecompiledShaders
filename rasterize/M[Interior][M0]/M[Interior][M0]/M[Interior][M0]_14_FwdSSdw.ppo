#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _957;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _327 = cbMtdParam._m0[22u].y + _257;
    float _328 = cbMtdParam._m0[22u].z + _258;
    float _329 = cbMtdParam._m0[22u].w + _259;
    float _343 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_186, _187, _188));
    float _344 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_200, _201, _202));
    float _345 = (-0.0) - dot(vec3(_327, _328, _329), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _349 * _345;
    float _352 = (cbMtdParam._m0[19u].x * _343) * _349;
    float _354 = (cbMtdParam._m0[18u].w * _344) * _349;
    float _355 = fract(TEXCOORD.x);
    float _356 = fract(TEXCOORD.y);
    float _362;
    if (_352 > 0.0)
    {
        _362 = (1.0 - _355) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _355) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _362 = frontier_phi_3_2_ladder;
    }
    float _370;
    if (_354 > 0.0)
    {
        _370 = (1.0 - _356) / _354;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _356) / _354;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _370 = frontier_phi_7_6_ladder;
    }
    float _374 = (_350 > 0.0) ? (cbMtdParam._m0[15u].x / _350) : 5000.0;
    float _375 = isnan(_370) ? _362 : (isnan(_362) ? _370 : min(_362, _370));
    float _376 = isnan(_374) ? _375 : (isnan(_375) ? _374 : min(_375, _374));
    float _380 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = ((_376 * _350) + _380) / _380;
    vec4 _412 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_355 + (-0.5)) + (_376 * _352)) / _387) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_356 + (-0.5)) + (_376 * _354)) / _387) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _432 = 0.5 - (_284 * 0.5);
    float _439 = ((((_414 - (_414 * _284)) * cbMtdParam._m0[9u].x) - _297) * _432) + _297;
    float _440 = ((((_415 - (_415 * _284)) * cbMtdParam._m0[9u].y) - _299) * _432) + _299;
    float _441 = (((cbMtdParam._m0[9u].z * (_416 - (_416 * _284))) - _301) * _432) + _301;
    vec4 _453 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _461 = (_453.x * 2.0) + (-1.0);
    float _463 = (_453.y * 2.0) + (-1.0);
    float _464 = dot(vec2(_461, _463), vec2(_461, _463));
    float _3050 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0))));
    float _470 = _453.z * _284;
    float _473 = fma(_469, _193, fma(_463, _200, _461 * _186));
    float _476 = fma(_469, _194, fma(_463, _201, _461 * _187));
    float _479 = fma(_469, _195, fma(_463, _202, _461 * _188));
    float _483 = inversesqrt(dot(vec3(_473, _476, _479), vec3(_473, _476, _479)));
    float _484 = _483 * _473;
    float _485 = _483 * _476;
    float _486 = _483 * _479;
    float _3061 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _487 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
    float _3072 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3083 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3094 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _506 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _510 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _511 = _257 * _510;
    float _512 = _258 * _510;
    float _513 = _259 * _510;
    float _519 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _520 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _541 = fma(_486, cbSceneParam._m0[5u].z, fma(_485, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _484));
    float _544 = fma(_486, cbSceneParam._m0[6u].z, fma(_485, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _484));
    float _547 = fma(_486, cbSceneParam._m0[7u].z, fma(_485, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _484));
    uint _560 = uint(roundEven(NORMAL.w)) * 13u;
    uint _563 = (_560 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _569 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0)))) * cbInstanceData._m0[_563].x;
    float _570 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0)))) * cbInstanceData._m0[_563].y;
    float _571 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0)))) * cbInstanceData._m0[_563].z;
    float _3105 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
    float _3116 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _573 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
    float _3127 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
    vec4 _583 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _519, cbSceneParam._m0[86u].y * _520));
    float _586 = _583.x * TEXCOORD.z;
    float _587 = dot(vec3(_484, _485, _486), vec3(_511, _512, _513));
    float _590 = _587 * 2.0;
    float _594 = (_590 * _484) - _511;
    float _595 = (_590 * _485) - _512;
    float _596 = (_590 * _486) - _513;
    float _600 = abs(dot(vec3(_511, _512, _513), vec3(_484, _485, _486)));
    float _3138 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _602 = sqrt(_487);
    float _615 = exp2((_602 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_602 * 3.0));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _956;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _683 = fma(_655, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _647));
        float _687 = fma(_655, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _647));
        float _691 = fma(_655, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _647));
        float _714 = _647 + _484;
        float _715 = _651 + _485;
        float _716 = _655 + _486;
        float _726 = fma(_716, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _714)) - _683;
        float _727 = fma(_716, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _714)) - _687;
        float _728 = fma(_716, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _714)) - _691;
        float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
        float _745 = ((_732 * _726) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_683 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_732 * _727) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_687 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_732 * _728) / cbModelParam._m0[34u].z) + ((((((_691 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_745, _746, _747), 0.0);
        float _784 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_750.x + (-0.5));
        float _786 = _784 * (_750.y + (-0.5));
        float _787 = _784 * (_750.z + (-0.5));
        float _794 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_757.x + (-0.5));
        float _796 = _794 * (_757.y + (-0.5));
        float _797 = _794 * (_757.z + (-0.5));
        float _804 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_764.x + (-0.5));
        float _806 = _804 * (_764.y + (-0.5));
        float _807 = _804 * (_764.z + (-0.5));
        float _814 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_771.x + (-0.5));
        float _816 = _814 * (_771.y + (-0.5));
        float _817 = _814 * (_771.z + (-0.5));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = _785 * 0.5;
        float _822 = _795 * 0.5;
        float _823 = _805 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _838 = (dot(vec3(_484, _485, _486), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3164 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _848 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3175 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3186 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0))) * (_850 + 1.0))) + _855) * _818;
        float _865 = _786 * 0.5;
        float _866 = _796 * 0.5;
        float _867 = _806 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _881 = (dot(vec3(_484, _485, _486), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3197 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _890 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3208 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3219 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0))) * (_892 + 1.0))) + _897) * _819;
        float _907 = _787 * 0.5;
        float _908 = _797 * 0.5;
        float _909 = _807 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_484, _485, _486), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3230 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3241 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3252 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0))) * (_934 + 1.0))) + _939) * _820;
        _956 = _787;
        _958 = _786;
        _959 = _785;
        _960 = _797;
        _961 = _796;
        _962 = _795;
        _963 = _807;
        _964 = _806;
        _965 = _805;
        _966 = _820;
        _967 = _819;
        _968 = _818;
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
    }
    else
    {
        _956 = _957;
        _958 = _957;
        _959 = _957;
        _960 = _957;
        _961 = _957;
        _962 = _957;
        _963 = _957;
        _964 = _957;
        _965 = _957;
        _966 = _957;
        _967 = _957;
        _968 = _957;
        _969 = 0.0;
        _970 = 0.0;
        _971 = 0.0;
    }
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = fma(_655, cbModelParam._m0[30u].z, fma(_651, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _647));
        float _1001 = fma(_655, cbModelParam._m0[31u].z, fma(_651, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _647));
        float _1005 = fma(_655, cbModelParam._m0[32u].z, fma(_651, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _647));
        float _1028 = _647 + _484;
        float _1029 = _651 + _485;
        float _1030 = _655 + _486;
        float _1040 = fma(_1030, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028)) - _997;
        float _1041 = fma(_1030, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028)) - _1001;
        float _1042 = fma(_1030, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028)) - _1005;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_997 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1001 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[35u].z) + ((((((_1005 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1096 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1063.x + (-0.5));
        float _1098 = _1096 * (_1063.y + (-0.5));
        float _1099 = _1096 * (_1063.z + (-0.5));
        float _1106 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1070.x + (-0.5));
        float _1108 = _1106 * (_1070.y + (-0.5));
        float _1109 = _1106 * (_1070.z + (-0.5));
        float _1116 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1077.x + (-0.5));
        float _1118 = _1116 * (_1077.y + (-0.5));
        float _1119 = _1116 * (_1077.z + (-0.5));
        float _1126 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1084.x + (-0.5));
        float _1128 = _1126 * (_1084.y + (-0.5));
        float _1129 = _1126 * (_1084.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_484, _485, _486), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3293 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3304 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3315 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) * (_1160 + 1.0))) + _1165) * _1130;
        float _1175 = _1098 * 0.5;
        float _1176 = _1108 * 0.5;
        float _1177 = _1118 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_484, _485, _486), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3326 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3337 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3348 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * (_1202 + 1.0))) + _1207) * _1131;
        float _1217 = _1099 * 0.5;
        float _1218 = _1109 * 0.5;
        float _1219 = _1119 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_484, _485, _486), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3381 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_1244 + 1.0))) + _1249) * _1132;
        _1266 = _1099;
        _1267 = _1098;
        _1268 = _1097;
        _1269 = _1109;
        _1270 = _1108;
        _1271 = _1107;
        _1272 = _1119;
        _1273 = _1118;
        _1274 = _1117;
        _1275 = _1132;
        _1276 = _1131;
        _1277 = _1130;
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _957;
        _1267 = _957;
        _1268 = _957;
        _1269 = _957;
        _1270 = _957;
        _1271 = _957;
        _1272 = _957;
        _1273 = _957;
        _1274 = _957;
        _1275 = _957;
        _1276 = _957;
        _1277 = _957;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _969)) + _969;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _970)) + _970;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _971)) + _971;
    float _1313 = fma(_1292, cbSceneParam._m0[89u].z, fma(_1291, cbSceneParam._m0[89u].y, _1290 * cbSceneParam._m0[89u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[90u].z, fma(_1291, cbSceneParam._m0[90u].y, _1290 * cbSceneParam._m0[90u].x));
    float _1319 = fma(_1292, cbSceneParam._m0[91u].z, fma(_1291, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1290));
    float _1334 = _594 * 0.5;
    float _1335 = _595 * 0.5;
    float _1336 = _596 * 0.5;
    float _1337 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1340 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1343 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1377;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1350 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_956, _960, _963, _966));
        float _1354 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_958, _961, _964, _967));
        float _1358 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_959, _962, _965, _968));
        float _1365 = dot(vec4(cbModelParam._m0[39u]), vec4(_1334, _1335, _1336, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1388;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1379 = dot(vec4(cbModelParam._m0[40u]), vec4(_1334, _1335, _1336, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1392 = (_1388 * cbModelParam._m0[1u].x) + (_1377 * (1.0 - cbModelParam._m0[1u].x));
    float _1402 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _487);
    float _1403 = isnan(_1402) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1402 : min(cbModelParam._m0[25u].z, _1402));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1451 = fma(_655, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _647)) + cbModelParam._m0[13u].w;
        float _1455 = fma(_655, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _647)) + cbModelParam._m0[14u].w;
        float _1459 = fma(_655, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _647)) + cbModelParam._m0[15u].w;
        float _1462 = fma(_596, cbModelParam._m0[13u].z, fma(_595, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _594));
        float _1465 = fma(_596, cbModelParam._m0[14u].z, fma(_595, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _594));
        float _1468 = fma(_596, cbModelParam._m0[15u].z, fma(_595, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _594));
        float _1496;
        if (_1462 > 0.0)
        {
            _1496 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1496 = frontier_phi_22_20_ladder;
        }
        float _1866;
        if (_1465 > 0.0)
        {
            _1866 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1866 = frontier_phi_31_27_ladder;
        }
        float _2166;
        if (_1468 > 0.0)
        {
            _2166 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2166 = frontier_phi_45_38_ladder;
        }
        float _2168 = isnan(_1866) ? _1496 : (isnan(_1496) ? _1866 : min(_1496, _1866));
        float _2169 = isnan(_2166) ? _2168 : (isnan(_2168) ? _2166 : min(_2168, _2166));
        float _2173 = (_2169 * _1462) + _1451;
        float _2174 = (_2169 * _1465) + _1455;
        float _2175 = (_2169 * _1468) + _1459;
        float _2176 = _2169 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2176;
        float _2179 = _2176 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2175 > _2179) || ((_2175 < _2177) || ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 < _2177) || (_2173 > _2179))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2175, cbModelParam._m0[9u].z, fma(_2174, cbModelParam._m0[9u].y, _2173 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2175, cbModelParam._m0[10u].z, fma(_2174, cbModelParam._m0[10u].y, _2173 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2175, cbModelParam._m0[11u].z, fma(_2174, cbModelParam._m0[11u].y, _2173 * cbModelParam._m0[11u].x))), _1403);
            frontier_phi_21_45_ladder = _2301.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2301.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2301.x * cbModelParam._m0[1u].y;
        }
        _1484 = frontier_phi_21_45_ladder_2;
        _1486 = frontier_phi_21_45_ladder_1;
        _1488 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_594, _595, _596), _1403);
        _1484 = _1472.x * cbModelParam._m0[1u].y;
        _1486 = _1472.y * cbModelParam._m0[1u].y;
        _1488 = _1472.z * cbModelParam._m0[1u].y;
    }
    float _1492 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _487);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1492 : min(cbModelParam._m0[25u].w, _1492));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1546 = fma(_655, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _647)) + cbModelParam._m0[21u].w;
        float _1550 = fma(_655, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _647)) + cbModelParam._m0[22u].w;
        float _1554 = fma(_655, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _647)) + cbModelParam._m0[23u].w;
        float _1557 = fma(_596, cbModelParam._m0[21u].z, fma(_595, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _594));
        float _1560 = fma(_596, cbModelParam._m0[22u].z, fma(_595, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _594));
        float _1563 = fma(_596, cbModelParam._m0[23u].z, fma(_595, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _594));
        float _1871;
        if (_1557 > 0.0)
        {
            _1871 = abs((1.0 - _1546) / _1557);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1546 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1871 = frontier_phi_33_29_ladder;
        }
        float _2192;
        if (_1560 > 0.0)
        {
            _2192 = abs((1.0 - _1550) / _1560);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1550 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2192 = frontier_phi_47_40_ladder;
        }
        float _2361;
        if (_1563 > 0.0)
        {
            _2361 = abs((1.0 - _1554) / _1563);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1554 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2361 = frontier_phi_61_56_ladder;
        }
        float _2363 = isnan(_2192) ? _1871 : (isnan(_1871) ? _2192 : min(_1871, _2192));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1557) + _1546;
        float _2369 = (_2364 * _1560) + _1550;
        float _2370 = (_2364 * _1563) + _1554;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2371;
        float _2374 = _2371 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2370 > _2374) || ((_2370 < _2372) || ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 < _2372) || (_2368 > _2374))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2370, cbModelParam._m0[17u].z, fma(_2369, cbModelParam._m0[17u].y, _2368 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2370, cbModelParam._m0[18u].z, fma(_2369, cbModelParam._m0[18u].y, _2368 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2370, cbModelParam._m0[19u].z, fma(_2369, cbModelParam._m0[19u].y, _2368 * cbModelParam._m0[19u].x))), _1493);
            frontier_phi_30_61_ladder = _2603.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2603.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2603.x * cbModelParam._m0[1u].z;
        }
        _1582 = frontier_phi_30_61_ladder_2;
        _1584 = frontier_phi_30_61_ladder_1;
        _1586 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_594, _595, _596), _1493);
        _1582 = _1566.x * cbModelParam._m0[1u].z;
        _1584 = _1566.y * cbModelParam._m0[1u].z;
        _1586 = _1566.z * cbModelParam._m0[1u].z;
    }
    float _1598 = ((((1.0 - _615) * ((_602 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_615 * _602)) * _586;
    float _1599 = _1598 * ((cbModelParam._m0[1u].w * (_1582 - _1484)) + _1484);
    float _1600 = _1598 * ((cbModelParam._m0[1u].w * (_1584 - _1486)) + _1486);
    float _1601 = _1598 * ((cbModelParam._m0[1u].w * (_1586 - _1488)) + _1488);
    float _1604 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, _1599 * cbSceneParam._m0[91u].x));
    vec4 _1618 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_519, _520));
    float _1620 = _1618.w;
    float _1632 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1620);
    float _1633 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1620);
    float _1634 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1620);
    uvec4 _1638 = floatBitsToUint(cbInstanceData._m0[_560 + 5u]);
    uint _1640 = _1638.x * 14u;
    uint _1641 = _1640 + 13u;
    float _1646 = _586 + (-1.0);
    float _1649 = (cbLight._m0[_1641].x * _1646) + 1.0;
    float _1650 = (cbLight._m0[_1641].y * _1646) + 1.0;
    uint _1651 = _1640 + 5u;
    float _1657 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
    uint _1661 = _1640 + 4u;
    float _1670 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1674 = _1640 | 1u;
    float _1685 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_484, _485, _486));
    float _1688 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_484, _485, _486));
    float _3517 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _3528 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1693 = (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * 0.3183098733425140380859375;
    float _1695 = (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * 0.3183098733425140380859375;
    float _1702 = ((cbLight._m0[_1651].x * _1657) * _1695) + (((cbLight._m0[_1661].x * _1632) * _1670) * _1693);
    float _1703 = ((_1657 * cbLight._m0[_1651].y) * _1695) + (((cbLight._m0[_1661].y * _1633) * _1670) * _1693);
    float _1704 = ((_1657 * cbLight._m0[_1651].z) * _1695) + (((cbLight._m0[_1661].z * _1634) * _1670) * _1693);
    uint _1706 = _1640 + 8u;
    float _1719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _487) * 0.949999988079071044921875);
    float _1720 = _1719 * _1719;
    float _1721 = cbLight._m0[_1640].x + _511;
    float _1722 = cbLight._m0[_1640].y + _512;
    float _1723 = cbLight._m0[_1640].z + _513;
    float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
    float _1728 = _1727 * _1721;
    float _1729 = _1727 * _1722;
    float _1730 = _1727 * _1723;
    float _1731 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_1640].xyz));
    float _3539 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _1735 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _1736 = dot(vec3(_484, _485, _486), vec3(_1728, _1729, _1730));
    float _3561 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1728, _1729, _1730));
    float _3572 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1720 * _1720;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1759 = (exp2(log2(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1760 = 1.0 - _1720;
    float _1771 = (0.5 / (((_1735 * ((_1734 * _1760) + _1720)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1760) + _1720) * _1734))) * _1734;
    float _3583 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1773 = (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    uint _1787 = _1640 + 9u;
    float _1798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1674].w)) * _487) * 0.949999988079071044921875);
    float _1799 = _1798 * _1798;
    float _1800 = cbLight._m0[_1674].x + _511;
    float _1801 = cbLight._m0[_1674].y + _512;
    float _1802 = cbLight._m0[_1674].z + _513;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1807 = _1806 * _1800;
    float _1808 = _1806 * _1801;
    float _1809 = _1806 * _1802;
    float _1810 = dot(vec3(_484, _485, _486), vec3(cbLight._m0[_1674].xyz));
    float _3594 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _1814 = dot(vec3(_484, _485, _486), vec3(_1807, _1808, _1809));
    float _3605 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_1807, _1808, _1809));
    float _3616 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = _1799 * _1799;
    float _1826 = ((_1817 * _1817) * (_1822 + (-1.0))) + 1.0;
    float _1835 = (exp2(log2(1.0 - (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1836 = 1.0 - _1799;
    float _1846 = (0.5 / (((_1735 * ((_1813 * _1836) + _1799)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1836) + _1799) * _1813))) * _1813;
    float _3627 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1822 / ((_1826 * _1826) * 3.141590118408203125));
    float _1858 = (((_1835 * cbLight._m0[_1787].x) * _1848) * _1657) + ((((cbLight._m0[_1706].x * _1632) * _1759) * _1773) * _1670);
    float _1859 = (((_1835 * cbLight._m0[_1787].y) * _1848) * _1657) + ((((cbLight._m0[_1706].y * _1633) * _1759) * _1773) * _1670);
    float _1860 = (((_1835 * cbLight._m0[_1787].z) * _1848) * _1657) + ((((cbLight._m0[_1706].z * _1634) * _1759) * _1773) * _1670);
    float _1975;
    float _1977;
    float _1979;
    float _1981;
    float _1983;
    float _1985;
    if (_1638.y == 0u)
    {
        float _1915 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1916 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1915;
        float _1917 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1915;
        float _1918 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1915;
        uvec4 _1930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1931 = _1930.x;
        uint _1942 = uint((float(_1930.y) * floor(float(uint(cbSceneParam._m0[85u].y * _520) / _1931))) + floor(float(uint(cbSceneParam._m0[85u].x * _519) / _1931)));
        float _1952 = (log2(_1918 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1953 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        uint _1956 = uint(isnan(14.0) ? _1953 : (isnan(_1953) ? 14.0 : min(_1953, 14.0)));
        uvec4 _1961 = texelFetch(g_lightClusterGridBuffer, int(((_1956 << 2u) + (_1942 << 6u)) >> 2u));
        uint _1962 = _1961.x;
        uint _1963 = _1930.z;
        float _2053;
        float _2055;
        float _2057;
        float _2059;
        float _2061;
        float _2063;
        if (((((1u << ((_1963 >> 4u) & 15u)) + 4294967295u) & _1962) == 0u) || ((_1963 & 240u) == 0u))
        {
            _2053 = 0.0;
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
            _2061 = 0.0;
            _2063 = 0.0;
        }
        else
        {
            float _2054;
            float _2056;
            float _2058;
            float _2060;
            float _2062;
            float _2064;
            float _2229 = 0.0;
            float _2230 = 0.0;
            float _2231 = 0.0;
            float _2232 = 0.0;
            float _2233 = 0.0;
            float _2234 = 0.0;
            uint _2235 = 0u;
            uint _2244;
            bool _2245;
            for (;;)
            {
                _2244 = texelFetch(g_lightClassification, int((((_1956 << 5u) + (_1942 << 9u)) + (_2235 << 2u)) >> 2u)).x;
                _2245 = _2244 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2245)
                {
                    frontier_phi_58_pred = _2230;
                    frontier_phi_58_pred_1 = _2234;
                    frontier_phi_58_pred_2 = _2233;
                    frontier_phi_58_pred_3 = _2232;
                    frontier_phi_58_pred_4 = _2231;
                    frontier_phi_58_pred_5 = _2229;
                }
                else
                {
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    float _2409;
                    uint _2410;
                    _2404 = _2229;
                    _2405 = _2230;
                    _2406 = _2231;
                    _2407 = _2232;
                    _2408 = _2233;
                    _2409 = _2234;
                    _2410 = _2244;
                    float _2310;
                    float _2311;
                    float _2312;
                    float _2313;
                    float _2314;
                    float _2315;
                    for (;;)
                    {
                        uint _2414 = uint(findLSB(_2410)) + (_2235 << 5u);
                        uint _2411 = (_2410 + 4294967295u) & _2410;
                        uint _2416 = _2414 * 48u;
                        vec4 _2430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2416)).x, texelFetch(g_PointLightRenderingBuffer, int(_2416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2416 + 3u)).x));
                        uint _2436 = (_2414 * 48u) + 4u;
                        vec4 _2449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2436)).x, texelFetch(g_PointLightRenderingBuffer, int(_2436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2436 + 3u)).x));
                        uint _2455 = (_2414 * 48u) + 8u;
                        vec3 _2466 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2455)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 2u)).x));
                        float _2470 = _2430.x - _1916;
                        float _2471 = _2430.y - _1917;
                        float _2472 = _2430.z - _1918;
                        float _2473 = dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472));
                        float _2476 = inversesqrt(_2473);
                        float _2477 = _2476 * _2470;
                        float _2478 = _2476 * _2471;
                        float _2479 = _2476 * _2472;
                        float _2480 = dot(vec3(_541, _544, _547), vec3(_2477, _2478, _2479));
                        float _2485 = 1.0 - (_2473 * _2430.w);
                        float _3648 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
                        float _2486 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
                        float _2487 = sqrt(_2473) * _2449.w;
                        float _2490 = 1.39999997615814208984375 / (_2487 + 1.39999997615814208984375);
                        float _2491 = _2490 * _2490;
                        float _2494 = ((1.0 - _2491) * _2480) + _2491;
                        float _2497 = _2487 * _2487;
                        float _2501 = ((isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0))) * _2486) / ((_2497 * 0.699999988079071044921875) + 1.0);
                        float _2505 = (-0.0) - _1916;
                        float _2506 = (-0.0) - _1917;
                        float _2507 = (-0.0) - _1918;
                        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
                        float _2512 = _2511 * _2505;
                        float _2513 = _2511 * _2506;
                        float _2514 = _2511 * _2507;
                        float _2522 = exp2(log2(1.0 / ((_2497 * 3.5) + 5.0)) * 0.25);
                        float _2523 = 1.0 - _602;
                        float _2530 = sqrt(1.0 - ((1.0 - (_2523 * _2523)) * (1.0 - (_2522 * _2522))));
                        float _2531 = _2530 * _2530;
                        float _2532 = _2531 * _2531;
                        float _2533 = _2512 + _2477;
                        float _2534 = _2513 + _2478;
                        float _2535 = _2514 + _2479;
                        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
                        float _2543 = dot(vec3(_541, _544, _547), vec3(_2512, _2513, _2514));
                        float _3664 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
                        float _2546 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                        float _2547 = dot(vec3(_541, _544, _547), vec3(_2539 * _2533, _2539 * _2534, _2539 * _2535));
                        float _3675 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
                        float _2550 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
                        float _2554 = ((_2550 * _2550) * (_2532 + (-1.0))) + 1.0;
                        float _2555 = _2490 * _2531;
                        float _2556 = _2555 * _2555;
                        float _2559 = ((1.0 - _2556) * _2480) + _2556;
                        float _3686 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _2560 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
                        float _2561 = 1.0 - _2531;
                        float _2571 = (0.5 / (((_2560 * ((_2546 * _2561) + _2531)) + 9.9999999392252902907785028219223e-09) + (((_2560 * _2561) + _2531) * _2546))) * _2560;
                        float _3697 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
                        float _2582 = (((_2532 * 3.1415927410125732421875) * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) / ((_2554 * _2554) * ((_2497 * 2.1991131305694580078125) + 3.141590118408203125))) * _2486;
                        _2313 = (_2501 * _2449.x) + _2407;
                        _2314 = (_2501 * _2449.y) + _2408;
                        _2315 = (_2501 * _2449.z) + _2409;
                        _2310 = (_2582 * _2466.x) + _2404;
                        _2311 = (_2582 * _2466.y) + _2405;
                        _2312 = (_2582 * _2466.z) + _2406;
                        if (_2411 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2404 = _2310;
                            _2405 = _2311;
                            _2406 = _2312;
                            _2407 = _2313;
                            _2408 = _2314;
                            _2409 = _2315;
                            _2410 = _2411;
                        }
                    }
                    frontier_phi_58_pred = _2311;
                    frontier_phi_58_pred_1 = _2315;
                    frontier_phi_58_pred_2 = _2314;
                    frontier_phi_58_pred_3 = _2313;
                    frontier_phi_58_pred_4 = _2312;
                    frontier_phi_58_pred_5 = _2310;
                }
                _2056 = frontier_phi_58_pred;
                _2064 = frontier_phi_58_pred_1;
                _2062 = frontier_phi_58_pred_2;
                _2060 = frontier_phi_58_pred_3;
                _2058 = frontier_phi_58_pred_4;
                _2054 = frontier_phi_58_pred_5;
                uint _2236 = _2235 + 1u;
                if (_2236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2229 = _2054;
                    _2230 = _2056;
                    _2231 = _2058;
                    _2232 = _2060;
                    _2233 = _2062;
                    _2234 = _2064;
                    _2235 = _2236;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2053 = _2054;
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
            _2061 = _2062;
            _2063 = _2064;
        }
        uvec4 _2067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2068 = _2067.z;
        uint _2070 = (_2068 >> 8u) & 15u;
        float _2197;
        float _2199;
        float _2201;
        float _2203;
        float _2205;
        float _2207;
        if (((4294967295u << _2070) & _1962) == 0u)
        {
            _2197 = _2053;
            _2199 = _2055;
            _2201 = _2057;
            _2203 = _2059;
            _2205 = _2061;
            _2207 = _2063;
        }
        else
        {
            float _2222 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
            float _2223 = _2222 * _1916;
            float _2224 = _2222 * _1917;
            float _2225 = _2222 * _1918;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2070 < ((_2068 >> 12u) & 15u))
            {
                float _2198;
                float _2200;
                float _2202;
                float _2204;
                float _2206;
                float _2208;
                float _2387 = _2053;
                float _2388 = _2055;
                float _2389 = _2057;
                float _2390 = _2059;
                float _2391 = _2061;
                float _2392 = _2063;
                uint _2393 = _2070;
                uint _2402;
                bool _2403;
                for (;;)
                {
                    _2402 = texelFetch(g_lightClassification, int((((_1956 << 5u) + (_1942 << 9u)) + (_2393 << 2u)) >> 2u)).x;
                    _2403 = _2402 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2403)
                    {
                        frontier_phi_67_pred = _2392;
                        frontier_phi_67_pred_1 = _2391;
                        frontier_phi_67_pred_2 = _2390;
                        frontier_phi_67_pred_3 = _2389;
                        frontier_phi_67_pred_4 = _2388;
                        frontier_phi_67_pred_5 = _2387;
                    }
                    else
                    {
                        float _2608;
                        float _2609;
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2613;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2621 = _2387;
                        float _2622 = _2388;
                        float _2623 = _2389;
                        float _2624 = _2390;
                        float _2625 = _2391;
                        float _2626 = _2392;
                        uint _2627 = _2402;
                        uint _2628;
                        vec4 _2653;
                        float _2654;
                        vec4 _2669;
                        vec3 _2681;
                        vec4 _2696;
                        vec4 _2712;
                        float _2758;
                        bool _2759;
                        for (;;)
                        {
                            uint _2638 = ((_2393 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2627));
                            _2628 = (_2627 + 4294967295u) & _2627;
                            uint _2640 = _2638 * 40u;
                            _2653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 3u)).x));
                            _2654 = _2653.w;
                            uint _2656 = (_2638 * 40u) + 4u;
                            _2669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 3u)).x));
                            uint _2671 = (_2638 * 40u) + 8u;
                            _2681 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 2u)).x));
                            uint _2683 = (_2638 * 40u) + 16u;
                            _2696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 3u)).x));
                            uint _2699 = (_2638 * 40u) + 20u;
                            _2712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 3u)).x));
                            uint _2714 = (_2638 * 40u) + 24u;
                            vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 3u)).x));
                            uint _2733 = (_2638 * 40u) + 28u;
                            vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 3u)).x));
                            _2758 = fma(_1918, _2746.z, fma(_1917, _2746.y, _2746.x * _1916)) + _2746.w;
                            _2759 = !((fma(_1918, _2727.z, fma(_1917, _2727.y, _2727.x * _1916)) + _2727.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2759)
                            {
                                float _2786 = _2653.x - _1916;
                                float _2787 = _2653.y - _1917;
                                float _2788 = _2653.z - _1918;
                                float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                                float _2792 = inversesqrt(_2789);
                                float _2793 = _2792 * _2786;
                                float _2794 = _2792 * _2787;
                                float _2795 = _2792 * _2788;
                                float _2799 = 1.0 - (_2789 / (_2654 * _2654));
                                float _3708 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                                float _2800 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
                                float _2804 = sqrt(_2789) * _2669.w;
                                float _2806 = 1.39999997615814208984375 / (_2804 + 1.39999997615814208984375);
                                float _2807 = _2806 * _2806;
                                float _2810 = ((1.0 - _2807) * dot(vec3(_2793, _2794, _2795), vec3(_541, _544, _547))) + _2807;
                                float _2813 = _2804 * _2804;
                                float _2817 = (fma(_1918, _2696.z, fma(_1917, _2696.y, _2696.x * _1916)) + _2696.w) / _2758;
                                float _2818 = (fma(_1918, _2712.z, fma(_1917, _2712.y, _2712.x * _1916)) + _2712.w) / _2758;
                                float _2822 = 1.0 - dot(vec2(_2817, _2818), vec2(_2817, _2818));
                                float _3724 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                                float _2823 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
                                float _2824 = _2823 * (((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) * _2800) / ((_2813 * 0.699999988079071044921875) + 1.0));
                                float _2836 = exp2(log2(1.0 / ((_2813 * 3.5) + 5.0)) * 0.25);
                                float _2837 = 1.0 - _602;
                                float _2844 = sqrt(1.0 - ((1.0 - (_2837 * _2837)) * (1.0 - (_2836 * _2836))));
                                float _2845 = _2844 * _2844;
                                float _2846 = _2845 * _2845;
                                float _2847 = _2793 - _2223;
                                float _2848 = _2794 - _2224;
                                float _2849 = _2795 - _2225;
                                float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
                                float _2857 = dot(vec3(_541, _544, _547), vec3((-0.0) - _2223, (-0.0) - _2224, (-0.0) - _2225));
                                float _3735 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                                float _2860 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
                                float _2861 = dot(vec3(_541, _544, _547), vec3(_2853 * _2847, _2853 * _2848, _2853 * _2849));
                                float _3746 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                                float _2864 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
                                float _2868 = ((_2864 * _2864) * (_2846 + (-1.0))) + 1.0;
                                float _2869 = _2806 * _2845;
                                float _2870 = _2869 * _2869;
                                float _2876 = ((1.0 - _2870) * dot(vec3(_541, _544, _547), vec3(_2793, _2794, _2795))) + _2870;
                                float _3757 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                                float _2877 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
                                float _2878 = 1.0 - _2845;
                                float _2888 = (0.5 / (((_2877 * ((_2860 * _2878) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2877 * _2878) + _2845) * _2860))) * _2877;
                                float _3768 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                                float _2898 = (_2823 * _2800) * (((_2846 * 3.1415927410125732421875) * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) / ((_2868 * _2868) * ((_2813 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2824 * _2669.z;
                                frontier_phi_73_pred_1 = _2824 * _2669.y;
                                frontier_phi_73_pred_2 = _2824 * _2669.x;
                                frontier_phi_73_pred_3 = _2898 * _2681.z;
                                frontier_phi_73_pred_4 = _2898 * _2681.y;
                                frontier_phi_73_pred_5 = _2898 * _2681.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2907 = frontier_phi_73_pred;
                            _2906 = frontier_phi_73_pred_1;
                            _2905 = frontier_phi_73_pred_2;
                            _2904 = frontier_phi_73_pred_3;
                            _2903 = frontier_phi_73_pred_4;
                            _2902 = frontier_phi_73_pred_5;
                            _2611 = _2905 + _2624;
                            _2612 = _2906 + _2625;
                            _2613 = _2907 + _2626;
                            _2608 = _2902 + _2621;
                            _2609 = _2903 + _2622;
                            _2610 = _2904 + _2623;
                            if (_2628 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2621 = _2608;
                                _2622 = _2609;
                                _2623 = _2610;
                                _2624 = _2611;
                                _2625 = _2612;
                                _2626 = _2613;
                                _2627 = _2628;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2613;
                        frontier_phi_67_pred_1 = _2612;
                        frontier_phi_67_pred_2 = _2611;
                        frontier_phi_67_pred_3 = _2610;
                        frontier_phi_67_pred_4 = _2609;
                        frontier_phi_67_pred_5 = _2608;
                    }
                    _2208 = frontier_phi_67_pred;
                    _2206 = frontier_phi_67_pred_1;
                    _2204 = frontier_phi_67_pred_2;
                    _2202 = frontier_phi_67_pred_3;
                    _2200 = frontier_phi_67_pred_4;
                    _2198 = frontier_phi_67_pred_5;
                    uint _2394 = _2393 + 1u;
                    if (_2394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2387 = _2198;
                        _2388 = _2200;
                        _2389 = _2202;
                        _2390 = _2204;
                        _2391 = _2206;
                        _2392 = _2208;
                        _2393 = _2394;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2204;
                frontier_phi_49_50_ladder_1 = _2208;
                frontier_phi_49_50_ladder_2 = _2206;
                frontier_phi_49_50_ladder_3 = _2202;
                frontier_phi_49_50_ladder_4 = _2200;
                frontier_phi_49_50_ladder_5 = _2198;
            }
            else
            {
                frontier_phi_49_50_ladder = _2059;
                frontier_phi_49_50_ladder_1 = _2063;
                frontier_phi_49_50_ladder_2 = _2061;
                frontier_phi_49_50_ladder_3 = _2057;
                frontier_phi_49_50_ladder_4 = _2055;
                frontier_phi_49_50_ladder_5 = _2053;
            }
            _2197 = frontier_phi_49_50_ladder_5;
            _2199 = frontier_phi_49_50_ladder_4;
            _2201 = frontier_phi_49_50_ladder_3;
            _2203 = frontier_phi_49_50_ladder;
            _2205 = frontier_phi_49_50_ladder_2;
            _2207 = frontier_phi_49_50_ladder_1;
        }
        float _2212 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
        _1975 = (_2212 * _2203) + _1702;
        _1977 = (_2212 * _2205) + _1703;
        _1979 = (_2212 * _2207) + _1704;
        _1981 = ((_2197 * 0.039999999105930328369140625) * _2212) + _1858;
        _1983 = ((_2199 * 0.039999999105930328369140625) * _2212) + _1859;
        _1985 = ((_2201 * 0.039999999105930328369140625) * _2212) + _1860;
    }
    else
    {
        _1975 = _1702;
        _1977 = _1703;
        _1979 = _1704;
        _1981 = _1858;
        _1983 = _1859;
        _1985 = _1860;
    }
    float _3784 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3795 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3806 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _2002 = ((isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1975 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _586))) + ((_1981 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    float _2003 = ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1977 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _586))) + ((_1983 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    float _2004 = ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1979 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _586))) + ((_1985 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    uint _2008 = _560 + 6u;
    float _2016 = _519 / cbSceneParam._m0[86u].x;
    float _2017 = _520 / cbSceneParam._m0[86u].y;
    vec4 _2031 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2016, _2017, (log2((isnan(cbSceneParam._m0[77u].w) ? _506 : (isnan(_506) ? cbSceneParam._m0[77u].w : min(_506, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2033 = _2031.x;
    float _2034 = _2031.y;
    float _2035 = _2031.z;
    float _2036 = _2031.w;
    float _2116;
    float _2118;
    float _2120;
    float _2122;
    if (_506 > cbSceneParam._m0[78u].w)
    {
        float _2078 = isnan(_506) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _506 : min(cbSceneParam._m0[80u].w, _506));
        float _2079 = _2078 / _506;
        float _2090 = _2079 * _257;
        float _2091 = _258 * _2079;
        float _2092 = (-0.0) - _2091;
        float _2093 = _2079 * _259;
        float _2095 = (cbSceneParam._m0[77u].w * _2092) / _2078;
        float _2096 = _2095 + cbSceneParam._m0[79u].w;
        float _2097 = cbSceneParam._m0[79u].w - _2091;
        float _2103 = sqrt(((_2090 * _2090) + (_2091 * _2091)) + (_2093 * _2093));
        float _2106 = (1.0 - (cbSceneParam._m0[77u].w / _2078)) * _2103;
        float _2112 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2114 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2323;
        if (abs((_2092 - _2095) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2323 = ((((_2096 > 0.0) ? exp2(_2112 * _2096) : (2.0 - exp2(_2114 * _2096))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2106;
        }
        else
        {
            float _2258 = 1.0 / cbSceneParam._m0[80u].x;
            float _2259 = isnan(_2097) ? _2096 : (isnan(_2096) ? _2097 : max(_2096, _2097));
            float _2260 = isnan(_2097) ? _2096 : (isnan(_2096) ? _2097 : min(_2096, _2097));
            float _2269 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : min(_2259, 0.0));
            float _2270 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : min(_2260, 0.0));
            _2323 = ((abs(_2103 / _2092) * cbSceneParam._m0[80u].y) * ((((_2269 - _2270) * 2.0) - ((exp2(_2112 * (isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0)))) - exp2(_2112 * (isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))))) * _2258)) - ((exp2(_2114 * _2269) - exp2(_2114 * _2270)) * _2258))) + (_2106 * cbSceneParam._m0[80u].z);
        }
        vec4 _2325 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2016, _2017, 1.0), 0.0);
        float _2334 = exp2((_2323 * (-1.44269502162933349609375)) * (1.0 - _2325.w));
        float _2335 = log2(_2334);
        float _2351 = log2(_2036);
        _2116 = (exp2(_2351 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2335 * cbSceneParam._m0[78u].x)) * _2325.x) / cbSceneParam._m0[78u].x)) + _2033;
        _2118 = (exp2(_2351 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2335 * cbSceneParam._m0[78u].y)) * _2325.y) / cbSceneParam._m0[78u].y)) + _2034;
        _2120 = (exp2(_2351 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2335 * cbSceneParam._m0[78u].z)) * _2325.z) / cbSceneParam._m0[78u].z)) + _2035;
        _2122 = _2334 * _2036;
    }
    else
    {
        _2116 = _2033;
        _2118 = _2034;
        _2120 = _2035;
        _2122 = _2036;
    }
    float _2134 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2135 = _2134 == 3.0;
    float _2136 = log2(_2122);
    float _2143 = exp2(_2136 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)));
    float _2144 = exp2(_2136 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)));
    float _2145 = exp2(_2136 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)));
    float _2154 = (_2134 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2154 * (_2135 ? _2143 : (_2143 + (cbSceneParam._m0[72u].w * _2116)));
    SV_Target.y = _2154 * (_2135 ? _2144 : (_2144 + (cbSceneParam._m0[72u].w * _2118)));
    SV_Target.z = _2154 * (_2135 ? _2145 : (_2145 + (cbSceneParam._m0[72u].w * _2120)));
    SV_Target.w = cbInstanceData._m0[_2008].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2008].w;
}


