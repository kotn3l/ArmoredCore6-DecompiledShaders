#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1002;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    vec4 _319 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _323 = _319.z;
    float _346 = (_319.x * 2.0) + (-1.0);
    float _348 = (_319.y * 2.0) + (-1.0);
    float _351 = _346 - (_346 * _284);
    float _352 = _348 - (_348 * _284);
    float _361 = cbMtdParam._m0[22u].y + _257;
    float _362 = cbMtdParam._m0[22u].z + _258;
    float _363 = cbMtdParam._m0[22u].w + _259;
    float _377 = (-0.0) - dot(vec3(_361, _362, _363), vec3(_186, _187, _188));
    float _378 = (-0.0) - dot(vec3(_361, _362, _363), vec3(_200, _201, _202));
    float _379 = (-0.0) - dot(vec3(_361, _362, _363), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _386 = _383 * _379;
    float _389 = ((_383 * _377) + (_351 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _390 = ((_383 * _378) + (_352 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _391 = fract(TEXCOORD.x);
    float _392 = fract(TEXCOORD.y);
    float _398;
    if (_389 > 0.0)
    {
        _398 = (1.0 - _391) / _389;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_389 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _391) / _389;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _398 = frontier_phi_3_2_ladder;
    }
    float _406;
    if (_390 > 0.0)
    {
        _406 = (1.0 - _392) / _390;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_390 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _392) / _390;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _406 = frontier_phi_7_6_ladder;
    }
    float _410 = (_386 > 0.0) ? (cbMtdParam._m0[15u].x / _386) : 5000.0;
    float _411 = isnan(_406) ? _398 : (isnan(_398) ? _406 : min(_398, _406));
    float _412 = isnan(_410) ? _411 : (isnan(_411) ? _410 : min(_411, _410));
    float _416 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _423 = ((_412 * _386) + _416) / _416;
    vec4 _448 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_391 + (-0.5)) + (_412 * _389)) / _423) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_392 + (-0.5)) + (_412 * _390)) / _423) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _450 = _448.x;
    float _451 = _448.y;
    float _452 = _448.z;
    float _468 = 0.5 - (_284 * 0.5);
    float _475 = ((((_450 - (_450 * _284)) * cbMtdParam._m0[9u].x) - _297) * _468) + _297;
    float _476 = ((((_451 - (_451 * _284)) * cbMtdParam._m0[9u].y) - _299) * _468) + _299;
    float _477 = (((cbMtdParam._m0[9u].z * (_452 - (_452 * _284))) - _301) * _468) + _301;
    vec4 _489 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _493 = _489.z;
    float _496 = (_489.x * 2.0) + (-1.0);
    float _497 = (_489.y * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3070 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0))));
    float _504 = _493 * _284;
    float _511 = (cbMtdParam._m0[15u].w * ((_323 - _504) + ((_493 - _323) * _284))) + _504;
    float _515 = (cbMtdParam._m0[16u].x * _351) + _496;
    float _516 = (cbMtdParam._m0[16u].x * _352) + _497;
    float _519 = fma(_503, _193, fma(_516, _200, _515 * _186));
    float _522 = fma(_503, _194, fma(_516, _201, _515 * _187));
    float _525 = fma(_503, _195, fma(_516, _202, _515 * _188));
    float _529 = inversesqrt(dot(vec3(_519, _522, _525), vec3(_519, _522, _525)));
    float _530 = _529 * _519;
    float _531 = _529 * _522;
    float _532 = _529 * _525;
    float _3081 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _533 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
    float _3092 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3103 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3114 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _552 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _556 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _557 = _257 * _556;
    float _558 = _258 * _556;
    float _559 = _259 * _556;
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_532, cbSceneParam._m0[5u].z, fma(_531, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _530));
    float _589 = fma(_532, cbSceneParam._m0[6u].z, fma(_531, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _530));
    float _592 = fma(_532, cbSceneParam._m0[7u].z, fma(_531, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _530));
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _608 = (_605 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3125 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
    float _3136 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
    float _3147 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _631 = _628.x * TEXCOORD.z;
    float _632 = dot(vec3(_530, _531, _532), vec3(_557, _558, _559));
    float _635 = _632 * 2.0;
    float _639 = (_635 * _530) - _557;
    float _640 = (_635 * _531) - _558;
    float _641 = (_635 * _532) - _559;
    float _645 = abs(dot(vec3(_557, _558, _559), vec3(_530, _531, _532)));
    float _3158 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _647 = sqrt(_533);
    float _660 = exp2((_647 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_647 * 3.0));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1001;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _728 = fma(_700, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _692));
        float _732 = fma(_700, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _692));
        float _736 = fma(_700, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _692));
        float _759 = _692 + _530;
        float _760 = _696 + _531;
        float _761 = _700 + _532;
        float _771 = fma(_761, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759)) - _728;
        float _772 = fma(_761, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759)) - _732;
        float _773 = fma(_761, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759)) - _736;
        float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
        float _790 = ((_777 * _771) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_728 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_777 * _772) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_732 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_777 * _773) / cbModelParam._m0[34u].z) + ((((((_736 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        float _829 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_795.x + (-0.5));
        float _831 = _829 * (_795.y + (-0.5));
        float _832 = _829 * (_795.z + (-0.5));
        float _839 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_802.x + (-0.5));
        float _841 = _839 * (_802.y + (-0.5));
        float _842 = _839 * (_802.z + (-0.5));
        float _849 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_809.x + (-0.5));
        float _851 = _849 * (_809.y + (-0.5));
        float _852 = _849 * (_809.z + (-0.5));
        float _859 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_816.x + (-0.5));
        float _861 = _859 * (_816.y + (-0.5));
        float _862 = _859 * (_816.z + (-0.5));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = _830 * 0.5;
        float _867 = _840 * 0.5;
        float _868 = _850 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _883 = (dot(vec3(_530, _531, _532), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3184 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _893 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3195 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3206 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0))) * (_895 + 1.0))) + _900) * _863;
        float _910 = _831 * 0.5;
        float _911 = _841 * 0.5;
        float _912 = _851 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_530, _531, _532), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3217 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3228 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3239 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))) * (_937 + 1.0))) + _942) * _864;
        float _952 = _832 * 0.5;
        float _953 = _842 * 0.5;
        float _954 = _852 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_530, _531, _532), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3250 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3261 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3272 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_979 + 1.0))) + _984) * _865;
        _1001 = _832;
        _1003 = _831;
        _1004 = _830;
        _1005 = _842;
        _1006 = _841;
        _1007 = _840;
        _1008 = _852;
        _1009 = _851;
        _1010 = _850;
        _1011 = _865;
        _1012 = _864;
        _1013 = _863;
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
    }
    else
    {
        _1001 = _1002;
        _1003 = _1002;
        _1004 = _1002;
        _1005 = _1002;
        _1006 = _1002;
        _1007 = _1002;
        _1008 = _1002;
        _1009 = _1002;
        _1010 = _1002;
        _1011 = _1002;
        _1012 = _1002;
        _1013 = _1002;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
    }
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1042 = fma(_700, cbModelParam._m0[30u].z, fma(_696, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _692));
        float _1046 = fma(_700, cbModelParam._m0[31u].z, fma(_696, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _692));
        float _1050 = fma(_700, cbModelParam._m0[32u].z, fma(_696, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _692));
        float _1073 = _692 + _530;
        float _1074 = _696 + _531;
        float _1075 = _700 + _532;
        float _1085 = fma(_1075, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073)) - _1042;
        float _1086 = fma(_1075, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073)) - _1046;
        float _1087 = fma(_1075, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073)) - _1050;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1042 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1046 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[35u].z) + ((((((_1050 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1141 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1108.x + (-0.5));
        float _1143 = _1141 * (_1108.y + (-0.5));
        float _1144 = _1141 * (_1108.z + (-0.5));
        float _1151 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1115.x + (-0.5));
        float _1153 = _1151 * (_1115.y + (-0.5));
        float _1154 = _1151 * (_1115.z + (-0.5));
        float _1161 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1122.x + (-0.5));
        float _1163 = _1161 * (_1122.y + (-0.5));
        float _1164 = _1161 * (_1122.z + (-0.5));
        float _1171 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1129.x + (-0.5));
        float _1173 = _1171 * (_1129.y + (-0.5));
        float _1174 = _1171 * (_1129.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_530, _531, _532), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3313 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3324 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3335 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * (_1205 + 1.0))) + _1210) * _1175;
        float _1220 = _1143 * 0.5;
        float _1221 = _1153 * 0.5;
        float _1222 = _1163 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_530, _531, _532), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3368 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_1247 + 1.0))) + _1252) * _1176;
        float _1262 = _1144 * 0.5;
        float _1263 = _1154 * 0.5;
        float _1264 = _1164 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_530, _531, _532), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3401 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_1289 + 1.0))) + _1294) * _1177;
        _1311 = _1144;
        _1312 = _1143;
        _1313 = _1142;
        _1314 = _1154;
        _1315 = _1153;
        _1316 = _1152;
        _1317 = _1164;
        _1318 = _1163;
        _1319 = _1162;
        _1320 = _1177;
        _1321 = _1176;
        _1322 = _1175;
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
    }
    else
    {
        _1311 = _1002;
        _1312 = _1002;
        _1313 = _1002;
        _1314 = _1002;
        _1315 = _1002;
        _1316 = _1002;
        _1317 = _1002;
        _1318 = _1002;
        _1319 = _1002;
        _1320 = _1002;
        _1321 = _1002;
        _1322 = _1002;
        _1323 = 0.0;
        _1324 = 0.0;
        _1325 = 0.0;
    }
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1014)) + _1014;
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1015)) + _1015;
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1016)) + _1016;
    float _1358 = fma(_1337, cbSceneParam._m0[89u].z, fma(_1336, cbSceneParam._m0[89u].y, _1335 * cbSceneParam._m0[89u].x));
    float _1361 = fma(_1337, cbSceneParam._m0[90u].z, fma(_1336, cbSceneParam._m0[90u].y, _1335 * cbSceneParam._m0[90u].x));
    float _1364 = fma(_1337, cbSceneParam._m0[91u].z, fma(_1336, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1335));
    float _1379 = _639 * 0.5;
    float _1380 = _640 * 0.5;
    float _1381 = _641 * 0.5;
    float _1382 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1385 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1388 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1422;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1395 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1001, _1005, _1008, _1011));
        float _1399 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1403 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1410 = dot(vec4(cbModelParam._m0[39u]), vec4(_1379, _1380, _1381, 1.0));
        _1422 = dot(vec3(isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1422 = 1.0;
    }
    float _1433;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1424 = dot(vec4(cbModelParam._m0[40u]), vec4(_1379, _1380, _1381, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1424) ? 0.0 : (isnan(0.0) ? _1424 : max(0.0, _1424))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1437 = (_1433 * cbModelParam._m0[1u].x) + (_1422 * (1.0 - cbModelParam._m0[1u].x));
    float _1447 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _533);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1447 : min(cbModelParam._m0[25u].z, _1447));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1496 = fma(_700, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692)) + cbModelParam._m0[13u].w;
        float _1500 = fma(_700, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692)) + cbModelParam._m0[14u].w;
        float _1504 = fma(_700, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692)) + cbModelParam._m0[15u].w;
        float _1507 = fma(_641, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639));
        float _1510 = fma(_641, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639));
        float _1513 = fma(_641, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639));
        float _1541;
        if (_1507 > 0.0)
        {
            _1541 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1541 = frontier_phi_22_20_ladder;
        }
        float _1887;
        if (_1510 > 0.0)
        {
            _1887 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1887 = frontier_phi_31_27_ladder;
        }
        float _2187;
        if (_1513 > 0.0)
        {
            _2187 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2187 = frontier_phi_45_38_ladder;
        }
        float _2189 = isnan(_1887) ? _1541 : (isnan(_1541) ? _1887 : min(_1541, _1887));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1507) + _1496;
        float _2195 = (_2190 * _1510) + _1500;
        float _2196 = (_2190 * _1513) + _1504;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2197;
        float _2200 = _2197 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2196 > _2200) || ((_2196 < _2198) || ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 < _2198) || (_2194 > _2200))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2196, cbModelParam._m0[9u].z, fma(_2195, cbModelParam._m0[9u].y, _2194 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2196, cbModelParam._m0[10u].z, fma(_2195, cbModelParam._m0[10u].y, _2194 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2196, cbModelParam._m0[11u].z, fma(_2195, cbModelParam._m0[11u].y, _2194 * cbModelParam._m0[11u].x))), _1448);
            frontier_phi_21_45_ladder = _2322.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2322.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2322.x * cbModelParam._m0[1u].y;
        }
        _1529 = frontier_phi_21_45_ladder_2;
        _1531 = frontier_phi_21_45_ladder_1;
        _1533 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_639, _640, _641), _1448);
        _1529 = _1517.x * cbModelParam._m0[1u].y;
        _1531 = _1517.y * cbModelParam._m0[1u].y;
        _1533 = _1517.z * cbModelParam._m0[1u].y;
    }
    float _1537 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _533);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1537 : min(cbModelParam._m0[25u].w, _1537));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1591 = fma(_700, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692)) + cbModelParam._m0[21u].w;
        float _1595 = fma(_700, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692)) + cbModelParam._m0[22u].w;
        float _1599 = fma(_700, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692)) + cbModelParam._m0[23u].w;
        float _1602 = fma(_641, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639));
        float _1605 = fma(_641, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639));
        float _1608 = fma(_641, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639));
        float _1892;
        if (_1602 > 0.0)
        {
            _1892 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1892 = frontier_phi_33_29_ladder;
        }
        float _2213;
        if (_1605 > 0.0)
        {
            _2213 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2213 = frontier_phi_47_40_ladder;
        }
        float _2382;
        if (_1608 > 0.0)
        {
            _2382 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2382 = frontier_phi_61_56_ladder;
        }
        float _2384 = isnan(_2213) ? _1892 : (isnan(_1892) ? _2213 : min(_1892, _2213));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1602) + _1591;
        float _2390 = (_2385 * _1605) + _1595;
        float _2391 = (_2385 * _1608) + _1599;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2392;
        float _2395 = _2392 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2391 > _2395) || ((_2391 < _2393) || ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 < _2393) || (_2389 > _2395))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2391, cbModelParam._m0[17u].z, fma(_2390, cbModelParam._m0[17u].y, _2389 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2391, cbModelParam._m0[18u].z, fma(_2390, cbModelParam._m0[18u].y, _2389 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2391, cbModelParam._m0[19u].z, fma(_2390, cbModelParam._m0[19u].y, _2389 * cbModelParam._m0[19u].x))), _1538);
            frontier_phi_30_61_ladder = _2624.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2624.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2624.x * cbModelParam._m0[1u].z;
        }
        _1627 = frontier_phi_30_61_ladder_2;
        _1629 = frontier_phi_30_61_ladder_1;
        _1631 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_639, _640, _641), _1538);
        _1627 = _1611.x * cbModelParam._m0[1u].z;
        _1629 = _1611.y * cbModelParam._m0[1u].z;
        _1631 = _1611.z * cbModelParam._m0[1u].z;
    }
    float _1643 = ((((1.0 - _660) * ((_647 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_660 * _647)) * _631;
    float _1644 = _1643 * ((cbModelParam._m0[1u].w * (_1627 - _1529)) + _1529);
    float _1645 = _1643 * ((cbModelParam._m0[1u].w * (_1629 - _1531)) + _1531);
    float _1646 = _1643 * ((cbModelParam._m0[1u].w * (_1631 - _1533)) + _1533);
    float _1649 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, _1644 * cbSceneParam._m0[91u].x));
    uvec4 _1665 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1667 = _1665.x * 14u;
    uint _1668 = _1667 + 13u;
    float _1673 = _631 + (-1.0);
    float _1676 = (cbLight._m0[_1668].x * _1673) + 1.0;
    float _1677 = (cbLight._m0[_1668].y * _1673) + 1.0;
    uint _1678 = _1667 + 5u;
    float _1684 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1688 = _1667 + 4u;
    float _1694 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1698 = _1667 | 1u;
    float _1709 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_530, _531, _532));
    float _1712 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_530, _531, _532));
    float _3537 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _3548 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1717 = (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.3183098733425140380859375;
    float _1719 = (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * 0.3183098733425140380859375;
    float _1726 = ((cbLight._m0[_1678].x * _1684) * _1719) + ((cbLight._m0[_1688].x * _1694) * _1717);
    float _1727 = ((_1684 * cbLight._m0[_1678].y) * _1719) + ((_1694 * cbLight._m0[_1688].y) * _1717);
    float _1728 = ((_1684 * cbLight._m0[_1678].z) * _1719) + ((_1694 * cbLight._m0[_1688].z) * _1717);
    uint _1730 = _1667 + 8u;
    float _1743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1667].w)) * _533) * 0.949999988079071044921875);
    float _1744 = _1743 * _1743;
    float _1745 = cbLight._m0[_1667].x + _557;
    float _1746 = cbLight._m0[_1667].y + _558;
    float _1747 = cbLight._m0[_1667].z + _559;
    float _1751 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
    float _1752 = _1751 * _1745;
    float _1753 = _1751 * _1746;
    float _1754 = _1751 * _1747;
    float _1755 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1667].xyz));
    float _3559 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _1759 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _1760 = dot(vec3(_530, _531, _532), vec3(_1752, _1753, _1754));
    float _3581 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1763 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _1764 = dot(vec3(cbLight._m0[_1667].xyz), vec3(_1752, _1753, _1754));
    float _3592 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1768 = _1744 * _1744;
    float _1772 = ((_1763 * _1763) * (_1768 + (-1.0))) + 1.0;
    float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1784 = 1.0 - _1744;
    float _1795 = (0.5 / (((_1759 * ((_1758 * _1784) + _1744)) + 9.9999999392252902907785028219223e-09) + (((_1759 * _1784) + _1744) * _1758))) * _1758;
    float _3603 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1797 = (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1768 / ((_1772 * _1772) * 3.141590118408203125));
    uint _1808 = _1667 + 9u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1698].w)) * _533) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1698].x + _557;
    float _1822 = cbLight._m0[_1698].y + _558;
    float _1823 = cbLight._m0[_1698].z + _559;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1698].xyz));
    float _3614 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _1835 = dot(vec3(_530, _531, _532), vec3(_1828, _1829, _1830));
    float _3625 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _1839 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_1828, _1829, _1830));
    float _3636 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1843 = _1820 * _1820;
    float _1847 = ((_1838 * _1838) * (_1843 + (-1.0))) + 1.0;
    float _1856 = (exp2(log2(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1857 = 1.0 - _1820;
    float _1867 = (0.5 / (((_1759 * ((_1834 * _1857) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1759 * _1857) + _1820) * _1834))) * _1834;
    float _3647 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1869 = (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1843 / ((_1847 * _1847) * 3.141590118408203125));
    float _1879 = (((_1856 * cbLight._m0[_1808].x) * _1869) * _1684) + (((_1783 * cbLight._m0[_1730].x) * _1797) * _1694);
    float _1880 = (((_1856 * cbLight._m0[_1808].y) * _1869) * _1684) + (((_1783 * cbLight._m0[_1730].y) * _1797) * _1694);
    float _1881 = (((_1856 * cbLight._m0[_1808].z) * _1869) * _1684) + (((_1783 * cbLight._m0[_1730].z) * _1797) * _1694);
    float _1996;
    float _1998;
    float _2000;
    float _2002;
    float _2004;
    float _2006;
    if (_1665.y == 0u)
    {
        float _1936 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1936;
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1936;
        float _1939 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1936;
        uvec4 _1951 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1952 = _1951.x;
        uint _1963 = uint((float(_1951.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _1952))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _1952)));
        float _1973 = (log2(_1939 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1974 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        uint _1977 = uint(isnan(14.0) ? _1974 : (isnan(_1974) ? 14.0 : min(_1974, 14.0)));
        uvec4 _1982 = texelFetch(g_lightClusterGridBuffer, int(((_1977 << 2u) + (_1963 << 6u)) >> 2u));
        uint _1983 = _1982.x;
        uint _1984 = _1951.z;
        float _2074;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        if (((((1u << ((_1984 >> 4u) & 15u)) + 4294967295u) & _1983) == 0u) || ((_1984 & 240u) == 0u))
        {
            _2074 = 0.0;
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
        }
        else
        {
            float _2075;
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2250 = 0.0;
            float _2251 = 0.0;
            float _2252 = 0.0;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            uint _2256 = 0u;
            uint _2265;
            bool _2266;
            for (;;)
            {
                _2265 = texelFetch(g_lightClassification, int((((_1977 << 5u) + (_1963 << 9u)) + (_2256 << 2u)) >> 2u)).x;
                _2266 = _2265 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2266)
                {
                    frontier_phi_58_pred = _2251;
                    frontier_phi_58_pred_1 = _2255;
                    frontier_phi_58_pred_2 = _2254;
                    frontier_phi_58_pred_3 = _2253;
                    frontier_phi_58_pred_4 = _2252;
                    frontier_phi_58_pred_5 = _2250;
                }
                else
                {
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    uint _2431;
                    _2425 = _2250;
                    _2426 = _2251;
                    _2427 = _2252;
                    _2428 = _2253;
                    _2429 = _2254;
                    _2430 = _2255;
                    _2431 = _2265;
                    float _2331;
                    float _2332;
                    float _2333;
                    float _2334;
                    float _2335;
                    float _2336;
                    for (;;)
                    {
                        uint _2435 = uint(findLSB(_2431)) + (_2256 << 5u);
                        uint _2432 = (_2431 + 4294967295u) & _2431;
                        uint _2437 = _2435 * 48u;
                        vec4 _2451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2437)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 3u)).x));
                        uint _2457 = (_2435 * 48u) + 4u;
                        vec4 _2470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2457)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 3u)).x));
                        uint _2476 = (_2435 * 48u) + 8u;
                        vec3 _2487 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2476)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 2u)).x));
                        float _2491 = _2451.x - _1937;
                        float _2492 = _2451.y - _1938;
                        float _2493 = _2451.z - _1939;
                        float _2494 = dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493));
                        float _2497 = inversesqrt(_2494);
                        float _2498 = _2497 * _2491;
                        float _2499 = _2497 * _2492;
                        float _2500 = _2497 * _2493;
                        float _2501 = dot(vec3(_586, _589, _592), vec3(_2498, _2499, _2500));
                        float _2506 = 1.0 - (_2494 * _2451.w);
                        float _3668 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
                        float _2507 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
                        float _2508 = sqrt(_2494) * _2470.w;
                        float _2511 = 1.39999997615814208984375 / (_2508 + 1.39999997615814208984375);
                        float _2512 = _2511 * _2511;
                        float _2515 = ((1.0 - _2512) * _2501) + _2512;
                        float _2518 = _2508 * _2508;
                        float _2522 = ((isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0))) * _2507) / ((_2518 * 0.699999988079071044921875) + 1.0);
                        float _2526 = (-0.0) - _1937;
                        float _2527 = (-0.0) - _1938;
                        float _2528 = (-0.0) - _1939;
                        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
                        float _2533 = _2532 * _2526;
                        float _2534 = _2532 * _2527;
                        float _2535 = _2532 * _2528;
                        float _2543 = exp2(log2(1.0 / ((_2518 * 3.5) + 5.0)) * 0.25);
                        float _2544 = 1.0 - _647;
                        float _2551 = sqrt(1.0 - ((1.0 - (_2544 * _2544)) * (1.0 - (_2543 * _2543))));
                        float _2552 = _2551 * _2551;
                        float _2553 = _2552 * _2552;
                        float _2554 = _2533 + _2498;
                        float _2555 = _2534 + _2499;
                        float _2556 = _2535 + _2500;
                        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
                        float _2564 = dot(vec3(_586, _589, _592), vec3(_2533, _2534, _2535));
                        float _3684 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                        float _2567 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
                        float _2568 = dot(vec3(_586, _589, _592), vec3(_2560 * _2554, _2560 * _2555, _2560 * _2556));
                        float _3695 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
                        float _2571 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
                        float _2575 = ((_2571 * _2571) * (_2553 + (-1.0))) + 1.0;
                        float _2576 = _2511 * _2552;
                        float _2577 = _2576 * _2576;
                        float _2580 = ((1.0 - _2577) * _2501) + _2577;
                        float _3706 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                        float _2581 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
                        float _2582 = 1.0 - _2552;
                        float _2592 = (0.5 / (((_2581 * ((_2567 * _2582) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2581 * _2582) + _2552) * _2567))) * _2581;
                        float _3717 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
                        float _2603 = (((_2553 * 3.1415927410125732421875) * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) / ((_2575 * _2575) * ((_2518 * 2.1991131305694580078125) + 3.141590118408203125))) * _2507;
                        _2334 = (_2522 * _2470.x) + _2428;
                        _2335 = (_2522 * _2470.y) + _2429;
                        _2336 = (_2522 * _2470.z) + _2430;
                        _2331 = (_2603 * _2487.x) + _2425;
                        _2332 = (_2603 * _2487.y) + _2426;
                        _2333 = (_2603 * _2487.z) + _2427;
                        if (_2432 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2425 = _2331;
                            _2426 = _2332;
                            _2427 = _2333;
                            _2428 = _2334;
                            _2429 = _2335;
                            _2430 = _2336;
                            _2431 = _2432;
                        }
                    }
                    frontier_phi_58_pred = _2332;
                    frontier_phi_58_pred_1 = _2336;
                    frontier_phi_58_pred_2 = _2335;
                    frontier_phi_58_pred_3 = _2334;
                    frontier_phi_58_pred_4 = _2333;
                    frontier_phi_58_pred_5 = _2331;
                }
                _2077 = frontier_phi_58_pred;
                _2085 = frontier_phi_58_pred_1;
                _2083 = frontier_phi_58_pred_2;
                _2081 = frontier_phi_58_pred_3;
                _2079 = frontier_phi_58_pred_4;
                _2075 = frontier_phi_58_pred_5;
                uint _2257 = _2256 + 1u;
                if (_2257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2250 = _2075;
                    _2251 = _2077;
                    _2252 = _2079;
                    _2253 = _2081;
                    _2254 = _2083;
                    _2255 = _2085;
                    _2256 = _2257;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2074 = _2075;
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
        }
        uvec4 _2088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2089 = _2088.z;
        uint _2091 = (_2089 >> 8u) & 15u;
        float _2218;
        float _2220;
        float _2222;
        float _2224;
        float _2226;
        float _2228;
        if (((4294967295u << _2091) & _1983) == 0u)
        {
            _2218 = _2074;
            _2220 = _2076;
            _2222 = _2078;
            _2224 = _2080;
            _2226 = _2082;
            _2228 = _2084;
        }
        else
        {
            float _2243 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
            float _2244 = _2243 * _1937;
            float _2245 = _2243 * _1938;
            float _2246 = _2243 * _1939;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2091 < ((_2089 >> 12u) & 15u))
            {
                float _2219;
                float _2221;
                float _2223;
                float _2225;
                float _2227;
                float _2229;
                float _2408 = _2074;
                float _2409 = _2076;
                float _2410 = _2078;
                float _2411 = _2080;
                float _2412 = _2082;
                float _2413 = _2084;
                uint _2414 = _2091;
                uint _2423;
                bool _2424;
                for (;;)
                {
                    _2423 = texelFetch(g_lightClassification, int((((_1977 << 5u) + (_1963 << 9u)) + (_2414 << 2u)) >> 2u)).x;
                    _2424 = _2423 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2424)
                    {
                        frontier_phi_67_pred = _2413;
                        frontier_phi_67_pred_1 = _2412;
                        frontier_phi_67_pred_2 = _2411;
                        frontier_phi_67_pred_3 = _2410;
                        frontier_phi_67_pred_4 = _2409;
                        frontier_phi_67_pred_5 = _2408;
                    }
                    else
                    {
                        float _2629;
                        float _2630;
                        float _2631;
                        float _2632;
                        float _2633;
                        float _2634;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2642 = _2408;
                        float _2643 = _2409;
                        float _2644 = _2410;
                        float _2645 = _2411;
                        float _2646 = _2412;
                        float _2647 = _2413;
                        uint _2648 = _2423;
                        uint _2649;
                        vec4 _2674;
                        float _2675;
                        vec4 _2690;
                        vec3 _2702;
                        vec4 _2717;
                        vec4 _2732;
                        float _2778;
                        bool _2779;
                        for (;;)
                        {
                            uint _2659 = ((_2414 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2648));
                            _2649 = (_2648 + 4294967295u) & _2648;
                            uint _2661 = _2659 * 40u;
                            _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            _2675 = _2674.w;
                            uint _2677 = (_2659 * 40u) + 4u;
                            _2690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 3u)).x));
                            uint _2692 = (_2659 * 40u) + 8u;
                            _2702 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x));
                            uint _2704 = (_2659 * 40u) + 16u;
                            _2717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 3u)).x));
                            uint _2719 = (_2659 * 40u) + 20u;
                            _2732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 3u)).x));
                            uint _2734 = (_2659 * 40u) + 24u;
                            vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 3u)).x));
                            uint _2753 = (_2659 * 40u) + 28u;
                            vec4 _2766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 3u)).x));
                            _2778 = fma(_1939, _2766.z, fma(_1938, _2766.y, _2766.x * _1937)) + _2766.w;
                            _2779 = !((fma(_1939, _2747.z, fma(_1938, _2747.y, _2747.x * _1937)) + _2747.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2779)
                            {
                                float _2806 = _2674.x - _1937;
                                float _2807 = _2674.y - _1938;
                                float _2808 = _2674.z - _1939;
                                float _2809 = dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808));
                                float _2812 = inversesqrt(_2809);
                                float _2813 = _2812 * _2806;
                                float _2814 = _2812 * _2807;
                                float _2815 = _2812 * _2808;
                                float _2819 = 1.0 - (_2809 / (_2675 * _2675));
                                float _3728 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                                float _2820 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
                                float _2824 = sqrt(_2809) * _2690.w;
                                float _2826 = 1.39999997615814208984375 / (_2824 + 1.39999997615814208984375);
                                float _2827 = _2826 * _2826;
                                float _2830 = ((1.0 - _2827) * dot(vec3(_2813, _2814, _2815), vec3(_586, _589, _592))) + _2827;
                                float _2833 = _2824 * _2824;
                                float _2837 = (fma(_1939, _2717.z, fma(_1938, _2717.y, _2717.x * _1937)) + _2717.w) / _2778;
                                float _2838 = (fma(_1939, _2732.z, fma(_1938, _2732.y, _2732.x * _1937)) + _2732.w) / _2778;
                                float _2842 = 1.0 - dot(vec2(_2837, _2838), vec2(_2837, _2838));
                                float _3744 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                                float _2843 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
                                float _2844 = _2843 * (((isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))) * _2820) / ((_2833 * 0.699999988079071044921875) + 1.0));
                                float _2856 = exp2(log2(1.0 / ((_2833 * 3.5) + 5.0)) * 0.25);
                                float _2857 = 1.0 - _647;
                                float _2864 = sqrt(1.0 - ((1.0 - (_2857 * _2857)) * (1.0 - (_2856 * _2856))));
                                float _2865 = _2864 * _2864;
                                float _2866 = _2865 * _2865;
                                float _2867 = _2813 - _2244;
                                float _2868 = _2814 - _2245;
                                float _2869 = _2815 - _2246;
                                float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
                                float _2877 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2244, (-0.0) - _2245, (-0.0) - _2246));
                                float _3755 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                                float _2880 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                                float _2881 = dot(vec3(_586, _589, _592), vec3(_2873 * _2867, _2873 * _2868, _2873 * _2869));
                                float _3766 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2884 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
                                float _2888 = ((_2884 * _2884) * (_2866 + (-1.0))) + 1.0;
                                float _2889 = _2826 * _2865;
                                float _2890 = _2889 * _2889;
                                float _2896 = ((1.0 - _2890) * dot(vec3(_586, _589, _592), vec3(_2813, _2814, _2815))) + _2890;
                                float _3777 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                                float _2897 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
                                float _2898 = 1.0 - _2865;
                                float _2908 = (0.5 / (((_2897 * ((_2880 * _2898) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2897 * _2898) + _2865) * _2880))) * _2897;
                                float _3788 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                                float _2918 = (_2843 * _2820) * (((_2866 * 3.1415927410125732421875) * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) / ((_2888 * _2888) * ((_2833 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2844 * _2690.z;
                                frontier_phi_73_pred_1 = _2844 * _2690.y;
                                frontier_phi_73_pred_2 = _2844 * _2690.x;
                                frontier_phi_73_pred_3 = _2918 * _2702.z;
                                frontier_phi_73_pred_4 = _2918 * _2702.y;
                                frontier_phi_73_pred_5 = _2918 * _2702.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2927 = frontier_phi_73_pred;
                            _2926 = frontier_phi_73_pred_1;
                            _2925 = frontier_phi_73_pred_2;
                            _2924 = frontier_phi_73_pred_3;
                            _2923 = frontier_phi_73_pred_4;
                            _2922 = frontier_phi_73_pred_5;
                            _2632 = _2925 + _2645;
                            _2633 = _2926 + _2646;
                            _2634 = _2927 + _2647;
                            _2629 = _2922 + _2642;
                            _2630 = _2923 + _2643;
                            _2631 = _2924 + _2644;
                            if (_2649 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2642 = _2629;
                                _2643 = _2630;
                                _2644 = _2631;
                                _2645 = _2632;
                                _2646 = _2633;
                                _2647 = _2634;
                                _2648 = _2649;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2634;
                        frontier_phi_67_pred_1 = _2633;
                        frontier_phi_67_pred_2 = _2632;
                        frontier_phi_67_pred_3 = _2631;
                        frontier_phi_67_pred_4 = _2630;
                        frontier_phi_67_pred_5 = _2629;
                    }
                    _2229 = frontier_phi_67_pred;
                    _2227 = frontier_phi_67_pred_1;
                    _2225 = frontier_phi_67_pred_2;
                    _2223 = frontier_phi_67_pred_3;
                    _2221 = frontier_phi_67_pred_4;
                    _2219 = frontier_phi_67_pred_5;
                    uint _2415 = _2414 + 1u;
                    if (_2415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2408 = _2219;
                        _2409 = _2221;
                        _2410 = _2223;
                        _2411 = _2225;
                        _2412 = _2227;
                        _2413 = _2229;
                        _2414 = _2415;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2225;
                frontier_phi_49_50_ladder_1 = _2229;
                frontier_phi_49_50_ladder_2 = _2227;
                frontier_phi_49_50_ladder_3 = _2223;
                frontier_phi_49_50_ladder_4 = _2221;
                frontier_phi_49_50_ladder_5 = _2219;
            }
            else
            {
                frontier_phi_49_50_ladder = _2080;
                frontier_phi_49_50_ladder_1 = _2084;
                frontier_phi_49_50_ladder_2 = _2082;
                frontier_phi_49_50_ladder_3 = _2078;
                frontier_phi_49_50_ladder_4 = _2076;
                frontier_phi_49_50_ladder_5 = _2074;
            }
            _2218 = frontier_phi_49_50_ladder_5;
            _2220 = frontier_phi_49_50_ladder_4;
            _2222 = frontier_phi_49_50_ladder_3;
            _2224 = frontier_phi_49_50_ladder;
            _2226 = frontier_phi_49_50_ladder_2;
            _2228 = frontier_phi_49_50_ladder_1;
        }
        float _2233 = isnan(1.0) ? _631 : (isnan(_631) ? 1.0 : min(_631, 1.0));
        _1996 = (_2233 * _2224) + _1726;
        _1998 = (_2233 * _2226) + _1727;
        _2000 = (_2233 * _2228) + _1728;
        _2002 = ((_2218 * 0.039999999105930328369140625) * _2233) + _1879;
        _2004 = ((_2220 * 0.039999999105930328369140625) * _2233) + _1880;
        _2006 = ((_2222 * 0.039999999105930328369140625) * _2233) + _1881;
    }
    else
    {
        _1996 = _1726;
        _1998 = _1727;
        _2000 = _1728;
        _2002 = _1879;
        _2004 = _1880;
        _2006 = _1881;
    }
    float _3804 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3815 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3826 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _2023 = ((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1996 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _631))) + ((_2002 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1437)) * cbPerFrame._m0[3u].x);
    float _2024 = ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1998 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _631))) + ((_2004 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1437)) * cbPerFrame._m0[3u].x);
    float _2025 = ((isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_2000 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _631))) + ((_2006 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1437)) * cbPerFrame._m0[3u].x);
    uint _2029 = _605 + 6u;
    float _2037 = _565 / cbSceneParam._m0[86u].x;
    float _2038 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2052 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2037, _2038, (log2((isnan(cbSceneParam._m0[77u].w) ? _552 : (isnan(_552) ? cbSceneParam._m0[77u].w : min(_552, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2054 = _2052.x;
    float _2055 = _2052.y;
    float _2056 = _2052.z;
    float _2057 = _2052.w;
    float _2137;
    float _2139;
    float _2141;
    float _2143;
    if (_552 > cbSceneParam._m0[78u].w)
    {
        float _2099 = isnan(_552) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _552 : min(cbSceneParam._m0[80u].w, _552));
        float _2100 = _2099 / _552;
        float _2111 = _2100 * _257;
        float _2112 = _258 * _2100;
        float _2113 = (-0.0) - _2112;
        float _2114 = _2100 * _259;
        float _2116 = (cbSceneParam._m0[77u].w * _2113) / _2099;
        float _2117 = _2116 + cbSceneParam._m0[79u].w;
        float _2118 = cbSceneParam._m0[79u].w - _2112;
        float _2124 = sqrt(((_2111 * _2111) + (_2112 * _2112)) + (_2114 * _2114));
        float _2127 = (1.0 - (cbSceneParam._m0[77u].w / _2099)) * _2124;
        float _2133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2344;
        if (abs((_2113 - _2116) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2344 = ((((_2117 > 0.0) ? exp2(_2133 * _2117) : (2.0 - exp2(_2135 * _2117))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2127;
        }
        else
        {
            float _2279 = 1.0 / cbSceneParam._m0[80u].x;
            float _2280 = isnan(_2118) ? _2117 : (isnan(_2117) ? _2118 : max(_2117, _2118));
            float _2281 = isnan(_2118) ? _2117 : (isnan(_2117) ? _2118 : min(_2117, _2118));
            float _2290 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : min(_2280, 0.0));
            float _2291 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : min(_2281, 0.0));
            _2344 = ((abs(_2124 / _2113) * cbSceneParam._m0[80u].y) * ((((_2290 - _2291) * 2.0) - ((exp2(_2133 * (isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0)))) - exp2(_2133 * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))))) * _2279)) - ((exp2(_2135 * _2290) - exp2(_2135 * _2291)) * _2279))) + (_2127 * cbSceneParam._m0[80u].z);
        }
        vec4 _2346 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2037, _2038, 1.0), 0.0);
        float _2355 = exp2((_2344 * (-1.44269502162933349609375)) * (1.0 - _2346.w));
        float _2356 = log2(_2355);
        float _2372 = log2(_2057);
        _2137 = (exp2(_2372 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2356 * cbSceneParam._m0[78u].x)) * _2346.x) / cbSceneParam._m0[78u].x)) + _2054;
        _2139 = (exp2(_2372 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2356 * cbSceneParam._m0[78u].y)) * _2346.y) / cbSceneParam._m0[78u].y)) + _2055;
        _2141 = (exp2(_2372 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2356 * cbSceneParam._m0[78u].z)) * _2346.z) / cbSceneParam._m0[78u].z)) + _2056;
        _2143 = _2355 * _2057;
    }
    else
    {
        _2137 = _2054;
        _2139 = _2055;
        _2141 = _2056;
        _2143 = _2057;
    }
    float _2155 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2156 = _2155 == 3.0;
    float _2157 = log2(_2143);
    float _2164 = exp2(_2157 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)));
    float _2165 = exp2(_2157 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)));
    float _2166 = exp2(_2157 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)));
    float _2175 = (_2155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2175 * (_2156 ? _2164 : (_2164 + (cbSceneParam._m0[72u].w * _2137)));
    SV_Target.y = _2175 * (_2156 ? _2165 : (_2165 + (cbSceneParam._m0[72u].w * _2139)));
    SV_Target.z = _2175 * (_2156 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2141)));
    SV_Target.w = cbInstanceData._m0[_2029].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2029].w;
}


