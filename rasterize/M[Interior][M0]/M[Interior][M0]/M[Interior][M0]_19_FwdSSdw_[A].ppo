#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _397;
float _3191;
float _3192;
float _3193;
float _3194;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _330 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _337 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _346 = cbMtdParam._m0[23u].x + _261;
    float _347 = cbMtdParam._m0[23u].y + _262;
    float _348 = cbMtdParam._m0[23u].z + _263;
    float _362 = (-0.0) - dot(vec3(_346, _347, _348), vec3(_330 * _190, _330 * _191, _330 * _192));
    float _363 = (-0.0) - dot(vec3(_346, _347, _348), vec3(_337 * _204, _337 * _205, _337 * _206));
    float _364 = (-0.0) - dot(vec3(_346, _347, _348), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _368 * _364;
    float _371 = (cbMtdParam._m0[19u].w * _362) * _368;
    float _373 = (cbMtdParam._m0[20u].x * _363) * _368;
    float _376 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _377 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _395;
    float _398;
    float _400;
    if (_371 > 0.0)
    {
        float _381 = (1.0 - _376) / _371;
        _395 = _381;
        _398 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_381 * _369)) * 0.16666667163372039794921875;
        _400 = (fract((_381 * _373) + _377) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_371 < 0.0)
        {
            float _396 = ((-0.0) - _376) / _371;
            frontier_phi_3_2_ladder = _396;
            frontier_phi_3_2_ladder_1 = (fract((_396 * _373) + _377) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_396 * _369) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _397;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _395 = frontier_phi_3_2_ladder;
        _398 = frontier_phi_3_2_ladder_2;
        _400 = frontier_phi_3_2_ladder_1;
    }
    float _426;
    float _428;
    float _430;
    if (_373 > 0.0)
    {
        float _413 = (1.0 - _377) / _373;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_413 < _395)
        {
            frontier_phi_8_5_ladder = (fract(_413 * _369) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_413 * _371) + _376) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _413;
        }
        else
        {
            frontier_phi_8_5_ladder = _400;
            frontier_phi_8_5_ladder_1 = _398;
            frontier_phi_8_5_ladder_2 = _395;
        }
        _426 = frontier_phi_8_5_ladder_2;
        _428 = frontier_phi_8_5_ladder_1;
        _430 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_373 < 0.0)
        {
            float _427 = ((-0.0) - _377) / _373;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_427 < _395)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_427 * _369) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_427 * _371) + _376) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _427;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _400;
                frontier_phi_8_6_ladder_9_ladder_1 = _398;
                frontier_phi_8_6_ladder_9_ladder_2 = _395;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _400;
            frontier_phi_8_6_ladder_1 = _398;
            frontier_phi_8_6_ladder_2 = _395;
        }
        _426 = frontier_phi_8_6_ladder_2;
        _428 = frontier_phi_8_6_ladder_1;
        _430 = frontier_phi_8_6_ladder;
    }
    float _434 = (_369 > 0.0) ? (cbMtdParam._m0[16u].w / _369) : 5000.0;
    float _447;
    float _448;
    if (_434 < _426)
    {
        _447 = ((_376 + cbMtdParam._m0[17u].x) + (_434 * _371)) * 0.16666667163372039794921875;
        _448 = (((_434 * _373) + _377) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _447 = _428;
        _448 = _430;
    }
    vec4 _450 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_447, _448));
    float _455 = _450.x * cbMtdParam._m0[13u].x;
    float _456 = _450.y * cbMtdParam._m0[13u].y;
    float _457 = _450.z * cbMtdParam._m0[13u].z;
    float _462 = 0.5 - (_288 * 0.5);
    float _472 = (((_455 - _301) - (_455 * _288)) * _462) + _301;
    float _473 = (((_456 - _303) - (_456 * _288)) * _462) + _303;
    float _474 = (((_457 - _305) - (_457 * _288)) * _462) + _305;
    vec4 _486 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _494 = (_486.x * 2.0) + (-1.0);
    float _496 = (_486.y * 2.0) + (-1.0);
    float _497 = dot(vec2(_494, _496), vec2(_494, _496));
    float _3203 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _502 = sqrt(1.0 - (isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0))));
    float _503 = _486.z * _288;
    float _506 = fma(_502, _197, fma(_496, _204, _494 * _190));
    float _509 = fma(_502, _198, fma(_496, _205, _494 * _191));
    float _512 = fma(_502, _199, fma(_496, _206, _494 * _192));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3214 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _520 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
    float _3225 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3236 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3247 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _544 = _261 * _543;
    float _545 = _262 * _543;
    float _546 = _263 * _543;
    vec4 _551 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _553 = _551.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _716 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _722 = (cbMatDynParam._m0[5u].x * _716) + cbMatDynParam._m0[5u].y;
        float _3258 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
        float _727 = (cbMatDynParam._m0[5u].z * _716) + cbMatDynParam._m0[5u].w;
        float _3269 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0))) - _723)) + _723) < ((_553 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _571 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _572 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _592 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _595 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _598 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _611 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = _611 + 9u;
    uint _613 = _612 + uint(cbMatDynParam._m0[0u].w);
    float _619 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0)))) * cbInstanceData._m0[_613].x;
    float _620 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0)))) * cbInstanceData._m0[_613].y;
    float _621 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_613].z;
    float _3280 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    vec4 _633 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _571, cbSceneParam._m0[86u].y * _572));
    float _636 = _633.x * TEXCOORD.z;
    float _637 = dot(vec3(_517, _518, _519), vec3(_544, _545, _546));
    float _640 = _637 * 2.0;
    float _644 = (_640 * _517) - _544;
    float _645 = (_640 * _518) - _545;
    float _646 = (_640 * _519) - _546;
    float _650 = abs(dot(vec3(_544, _545, _546), vec3(_517, _518, _519)));
    float _3313 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _652 = sqrt(_520);
    float _665 = exp2((_652 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_652 * 3.0));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _761 = fma(_705, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697));
        float _765 = fma(_705, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697));
        float _769 = fma(_705, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697));
        float _793 = _697 + _517;
        float _794 = _701 + _518;
        float _795 = _705 + _519;
        float _805 = fma(_795, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793)) - _761;
        float _806 = fma(_795, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793)) - _765;
        float _807 = fma(_795, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793)) - _769;
        float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
        float _824 = ((_811 * _805) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_761 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_811 * _806) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_765 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_811 * _807) / cbModelParam._m0[34u].z) + ((((((_769 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_824, _825, _826), 0.0);
        float _863 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_829.x + (-0.5));
        float _865 = _863 * (_829.y + (-0.5));
        float _866 = _863 * (_829.z + (-0.5));
        float _873 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_836.x + (-0.5));
        float _875 = _873 * (_836.y + (-0.5));
        float _876 = _873 * (_836.z + (-0.5));
        float _883 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_843.x + (-0.5));
        float _885 = _883 * (_843.y + (-0.5));
        float _886 = _883 * (_843.z + (-0.5));
        float _893 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_850.x + (-0.5));
        float _895 = _893 * (_850.y + (-0.5));
        float _896 = _893 * (_850.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _917 = (dot(vec3(_517, _518, _519), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3339 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _927 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3350 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3361 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * (_929 + 1.0))) + _934) * _897;
        float _944 = _865 * 0.5;
        float _945 = _875 * 0.5;
        float _946 = _885 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_517, _518, _519), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3394 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_971 + 1.0))) + _976) * _898;
        float _986 = _866 * 0.5;
        float _987 = _876 * 0.5;
        float _988 = _886 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_517, _518, _519), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3427 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_1013 + 1.0))) + _1018) * _899;
        _1035 = _866;
        _1036 = _865;
        _1037 = _864;
        _1038 = _876;
        _1039 = _875;
        _1040 = _874;
        _1041 = _886;
        _1042 = _885;
        _1043 = _884;
        _1044 = _899;
        _1045 = _898;
        _1046 = _897;
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _397;
        _1036 = _397;
        _1037 = _397;
        _1038 = _397;
        _1039 = _397;
        _1040 = _397;
        _1041 = _397;
        _1042 = _397;
        _1043 = _397;
        _1044 = _397;
        _1045 = _397;
        _1046 = _397;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1078 = fma(_705, cbModelParam._m0[30u].z, fma(_701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _697));
        float _1082 = fma(_705, cbModelParam._m0[31u].z, fma(_701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _697));
        float _1086 = fma(_705, cbModelParam._m0[32u].z, fma(_701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _697));
        float _1109 = _697 + _517;
        float _1110 = _701 + _518;
        float _1111 = _705 + _519;
        float _1121 = fma(_1111, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109)) - _1078;
        float _1122 = fma(_1111, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109)) - _1082;
        float _1123 = fma(_1111, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109)) - _1086;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1078 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1082 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[35u].z) + ((((((_1086 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1177 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1144.x + (-0.5));
        float _1179 = _1177 * (_1144.y + (-0.5));
        float _1180 = _1177 * (_1144.z + (-0.5));
        float _1187 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1151.x + (-0.5));
        float _1189 = _1187 * (_1151.y + (-0.5));
        float _1190 = _1187 * (_1151.z + (-0.5));
        float _1197 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1158.x + (-0.5));
        float _1199 = _1197 * (_1158.y + (-0.5));
        float _1200 = _1197 * (_1158.z + (-0.5));
        float _1207 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1165.x + (-0.5));
        float _1209 = _1207 * (_1165.y + (-0.5));
        float _1210 = _1207 * (_1165.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_517, _518, _519), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3490 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_1241 + 1.0))) + _1246) * _1211;
        float _1256 = _1179 * 0.5;
        float _1257 = _1189 * 0.5;
        float _1258 = _1199 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_517, _518, _519), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3523 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1283 + 1.0))) + _1288) * _1212;
        float _1298 = _1180 * 0.5;
        float _1299 = _1190 * 0.5;
        float _1300 = _1200 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_517, _518, _519), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3556 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1325 + 1.0))) + _1330) * _1213;
        _1347 = _1180;
        _1348 = _1179;
        _1349 = _1178;
        _1350 = _1190;
        _1351 = _1189;
        _1352 = _1188;
        _1353 = _1200;
        _1354 = _1199;
        _1355 = _1198;
        _1356 = _1213;
        _1357 = _1212;
        _1358 = _1211;
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _397;
        _1348 = _397;
        _1349 = _397;
        _1350 = _397;
        _1351 = _397;
        _1352 = _397;
        _1353 = _397;
        _1354 = _397;
        _1355 = _397;
        _1356 = _397;
        _1357 = _397;
        _1358 = _397;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1047)) + _1047;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1048)) + _1048;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1049)) + _1049;
    float _1394 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1397 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1400 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1371));
    float _1415 = _644 * 0.5;
    float _1416 = _645 * 0.5;
    float _1417 = _646 * 0.5;
    float _1418 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1421 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1424 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1458;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1431 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1435 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1439 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1446 = dot(vec4(cbModelParam._m0[39u]), vec4(_1415, _1416, _1417, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1469;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1460 = dot(vec4(cbModelParam._m0[40u]), vec4(_1415, _1416, _1417, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1473 = (_1469 * cbModelParam._m0[1u].x) + (_1458 * (1.0 - cbModelParam._m0[1u].x));
    float _1483 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1483 : min(cbModelParam._m0[25u].z, _1483));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_705, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_705, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_705, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_646, cbModelParam._m0[13u].z, fma(_645, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _644));
        float _1547 = fma(_646, cbModelParam._m0[14u].z, fma(_645, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _644));
        float _1550 = fma(_646, cbModelParam._m0[15u].z, fma(_645, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _644));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1578 = frontier_phi_29_27_ladder;
        }
        float _1951;
        if (_1547 > 0.0)
        {
            _1951 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1951 = frontier_phi_38_34_ladder;
        }
        float _2259;
        if (_1550 > 0.0)
        {
            _2259 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2259 = frontier_phi_52_45_ladder;
        }
        float _2261 = isnan(_1951) ? _1578 : (isnan(_1578) ? _1951 : min(_1578, _1951));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1544) + _1533;
        float _2267 = (_2262 * _1547) + _1537;
        float _2268 = (_2262 * _1550) + _1541;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2269;
        float _2272 = _2269 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2268 > _2272) || ((_2268 < _2270) || ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 < _2270) || (_2266 > _2272))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2268, cbModelParam._m0[9u].z, fma(_2267, cbModelParam._m0[9u].y, _2266 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2268, cbModelParam._m0[10u].z, fma(_2267, cbModelParam._m0[10u].y, _2266 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2268, cbModelParam._m0[11u].z, fma(_2267, cbModelParam._m0[11u].y, _2266 * cbModelParam._m0[11u].x))), _1484);
            frontier_phi_28_52_ladder = _2410.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2410.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2410.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_28_52_ladder_2;
        _1568 = frontier_phi_28_52_ladder_1;
        _1570 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_644, _645, _646), _1484);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1630 = fma(_705, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697)) + cbModelParam._m0[21u].w;
        float _1634 = fma(_705, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697)) + cbModelParam._m0[22u].w;
        float _1638 = fma(_705, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697)) + cbModelParam._m0[23u].w;
        float _1641 = fma(_646, cbModelParam._m0[21u].z, fma(_645, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _644));
        float _1644 = fma(_646, cbModelParam._m0[22u].z, fma(_645, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _644));
        float _1647 = fma(_646, cbModelParam._m0[23u].z, fma(_645, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _644));
        float _1956;
        if (_1641 > 0.0)
        {
            _1956 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1956 = frontier_phi_40_36_ladder;
        }
        float _2285;
        if (_1644 > 0.0)
        {
            _2285 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2285 = frontier_phi_54_47_ladder;
        }
        float _2475;
        if (_1647 > 0.0)
        {
            _2475 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2475 = frontier_phi_72_65_ladder;
        }
        float _2477 = isnan(_2285) ? _1956 : (isnan(_1956) ? _2285 : min(_1956, _2285));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1641) + _1630;
        float _2483 = (_2478 * _1644) + _1634;
        float _2484 = (_2478 * _1647) + _1638;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2485;
        float _2488 = _2485 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2484 > _2488) || ((_2484 < _2486) || ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 < _2486) || (_2482 > _2488))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2484, cbModelParam._m0[17u].z, fma(_2483, cbModelParam._m0[17u].y, _2482 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2484, cbModelParam._m0[18u].z, fma(_2483, cbModelParam._m0[18u].y, _2482 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2484, cbModelParam._m0[19u].z, fma(_2483, cbModelParam._m0[19u].y, _2482 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_37_72_ladder = _2726.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2726.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2726.x * cbModelParam._m0[1u].z;
        }
        _1666 = frontier_phi_37_72_ladder_2;
        _1668 = frontier_phi_37_72_ladder_1;
        _1670 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_644, _645, _646), _1575);
        _1666 = _1650.x * cbModelParam._m0[1u].z;
        _1668 = _1650.y * cbModelParam._m0[1u].z;
        _1670 = _1650.z * cbModelParam._m0[1u].z;
    }
    float _1682 = ((((1.0 - _665) * ((_652 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_665 * _652)) * _636;
    float _1683 = _1682 * ((cbModelParam._m0[1u].w * (_1666 - _1566)) + _1566);
    float _1684 = _1682 * ((cbModelParam._m0[1u].w * (_1668 - _1568)) + _1568);
    float _1685 = _1682 * ((cbModelParam._m0[1u].w * (_1670 - _1570)) + _1570);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, _1683 * cbSceneParam._m0[91u].x));
    vec4 _1702 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_571, _572));
    float _1704 = _1702.w;
    float _1716 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1704);
    float _1717 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1704);
    float _1718 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1704);
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_611 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1730 = _636 + (-1.0);
    float _1733 = (cbLight._m0[_1725].x * _1730) + 1.0;
    float _1734 = (cbLight._m0[_1725].y * _1730) + 1.0;
    uint _1735 = _1724 + 5u;
    float _1741 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1745 = _1724 + 4u;
    float _1755 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1759 = _1724 | 1u;
    float _1770 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_517, _518, _519));
    float _1773 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_517, _518, _519));
    float _3692 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _3703 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1778 = (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.3183098733425140380859375;
    float _1780 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.3183098733425140380859375;
    float _1787 = ((cbLight._m0[_1735].x * _1741) * _1780) + (((cbLight._m0[_1745].x * _1716) * _1755) * _1778);
    float _1788 = ((_1741 * cbLight._m0[_1735].y) * _1780) + (((cbLight._m0[_1745].y * _1717) * _1755) * _1778);
    float _1789 = ((_1741 * cbLight._m0[_1735].z) * _1780) + (((cbLight._m0[_1745].z * _1718) * _1755) * _1778);
    uint _1791 = _1724 + 8u;
    float _1804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _520) * 0.949999988079071044921875);
    float _1805 = _1804 * _1804;
    float _1806 = cbLight._m0[_1724].x + _544;
    float _1807 = cbLight._m0[_1724].y + _545;
    float _1808 = cbLight._m0[_1724].z + _546;
    float _1812 = inversesqrt(dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808)));
    float _1813 = _1812 * _1806;
    float _1814 = _1812 * _1807;
    float _1815 = _1812 * _1808;
    float _1816 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1724].xyz));
    float _3714 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _1820 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _1821 = dot(vec3(_517, _518, _519), vec3(_1813, _1814, _1815));
    float _3736 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1813, _1814, _1815));
    float _3747 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1829 = _1805 * _1805;
    float _1833 = ((_1824 * _1824) * (_1829 + (-1.0))) + 1.0;
    float _1844 = (exp2(log2(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1845 = 1.0 - _1805;
    float _1856 = (0.5 / (((_1820 * ((_1819 * _1845) + _1805)) + 9.9999999392252902907785028219223e-09) + (((_1820 * _1845) + _1805) * _1819))) * _1819;
    float _3758 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1858 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1829 / ((_1833 * _1833) * 3.141590118408203125));
    uint _1872 = _1724 + 9u;
    float _1883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _520) * 0.949999988079071044921875);
    float _1884 = _1883 * _1883;
    float _1885 = cbLight._m0[_1759].x + _544;
    float _1886 = cbLight._m0[_1759].y + _545;
    float _1887 = cbLight._m0[_1759].z + _546;
    float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
    float _1892 = _1891 * _1885;
    float _1893 = _1891 * _1886;
    float _1894 = _1891 * _1887;
    float _1895 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1759].xyz));
    float _3769 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _1899 = dot(vec3(_517, _518, _519), vec3(_1892, _1893, _1894));
    float _3780 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1903 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1892, _1893, _1894));
    float _3791 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1907 = _1884 * _1884;
    float _1911 = ((_1902 * _1902) * (_1907 + (-1.0))) + 1.0;
    float _1920 = (exp2(log2(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1921 = 1.0 - _1884;
    float _1931 = (0.5 / (((_1820 * ((_1898 * _1921) + _1884)) + 9.9999999392252902907785028219223e-09) + (((_1820 * _1921) + _1884) * _1898))) * _1898;
    float _3802 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1933 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1907 / ((_1911 * _1911) * 3.141590118408203125));
    float _1943 = (((_1920 * cbLight._m0[_1872].x) * _1933) * _1741) + ((((cbLight._m0[_1791].x * _1716) * _1844) * _1858) * _1755);
    float _1944 = (((_1920 * cbLight._m0[_1872].y) * _1933) * _1741) + ((((cbLight._m0[_1791].y * _1717) * _1844) * _1858) * _1755);
    float _1945 = (((_1920 * cbLight._m0[_1872].z) * _1933) * _1741) + ((((cbLight._m0[_1791].z * _1718) * _1844) * _1858) * _1755);
    float _2060;
    float _2062;
    float _2064;
    float _2066;
    float _2068;
    float _2070;
    if (_1722.y == 0u)
    {
        float _2000 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2000;
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2000;
        float _2003 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2000;
        uvec4 _2015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2016 = _2015.x;
        uint _2027 = uint((float(_2015.y) * floor(float(uint(cbSceneParam._m0[85u].y * _572) / _2016))) + floor(float(uint(cbSceneParam._m0[85u].x * _571) / _2016)));
        float _2037 = (log2(_2003 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2038 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        uint _2041 = uint(isnan(14.0) ? _2038 : (isnan(_2038) ? 14.0 : min(_2038, 14.0)));
        uvec4 _2046 = texelFetch(g_lightClusterGridBuffer, int(((_2041 << 2u) + (_2027 << 6u)) >> 2u));
        uint _2047 = _2046.x;
        uint _2048 = _2015.z;
        float _2138;
        float _2140;
        float _2142;
        float _2144;
        float _2146;
        float _2148;
        if (((((1u << ((_2048 >> 4u) & 15u)) + 4294967295u) & _2047) == 0u) || ((_2048 & 240u) == 0u))
        {
            _2138 = 0.0;
            _2140 = 0.0;
            _2142 = 0.0;
            _2144 = 0.0;
            _2146 = 0.0;
            _2148 = 0.0;
        }
        else
        {
            float _2139;
            float _2141;
            float _2143;
            float _2145;
            float _2147;
            float _2149;
            float _2322 = 0.0;
            float _2323 = 0.0;
            float _2324 = 0.0;
            float _2325 = 0.0;
            float _2326 = 0.0;
            float _2327 = 0.0;
            uint _2328 = 0u;
            uint _2337;
            bool _2338;
            for (;;)
            {
                _2337 = texelFetch(g_lightClassification, int((((_2041 << 5u) + (_2027 << 9u)) + (_2328 << 2u)) >> 2u)).x;
                _2338 = _2337 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2338)
                {
                    frontier_phi_67_pred = _2325;
                    frontier_phi_67_pred_1 = _2324;
                    frontier_phi_67_pred_2 = _2323;
                    frontier_phi_67_pred_3 = _2322;
                    frontier_phi_67_pred_4 = _2326;
                    frontier_phi_67_pred_5 = _2327;
                }
                else
                {
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    uint _2524;
                    _2518 = _2322;
                    _2519 = _2323;
                    _2520 = _2324;
                    _2521 = _2325;
                    _2522 = _2326;
                    _2523 = _2327;
                    _2524 = _2337;
                    float _2419;
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    for (;;)
                    {
                        uint _2528 = uint(findLSB(_2524)) + (_2328 << 5u);
                        uint _2525 = (_2524 + 4294967295u) & _2524;
                        uint _2530 = _2528 * 48u;
                        vec4 _2544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2530)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 3u)).x));
                        uint _2550 = (_2528 * 48u) + 4u;
                        vec4 _2563 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2550)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 3u)).x));
                        uint _2569 = (_2528 * 48u) + 8u;
                        vec3 _2580 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2569)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 2u)).x));
                        float _2584 = _2544.x - _2001;
                        float _2585 = _2544.y - _2002;
                        float _2586 = _2544.z - _2003;
                        float _2587 = dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586));
                        float _2590 = inversesqrt(_2587);
                        float _2591 = _2590 * _2584;
                        float _2592 = _2590 * _2585;
                        float _2593 = _2590 * _2586;
                        float _2594 = dot(vec3(_592, _595, _598), vec3(_2591, _2592, _2593));
                        float _2599 = 1.0 - (_2587 * _2544.w);
                        float _3823 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
                        float _2600 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
                        float _2601 = sqrt(_2587) * _2563.w;
                        float _2604 = 1.39999997615814208984375 / (_2601 + 1.39999997615814208984375);
                        float _2605 = _2604 * _2604;
                        float _2608 = ((1.0 - _2605) * _2594) + _2605;
                        float _2611 = _2601 * _2601;
                        float _2615 = ((isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0))) * _2600) / ((_2611 * 0.699999988079071044921875) + 1.0);
                        float _2619 = (-0.0) - _2001;
                        float _2620 = (-0.0) - _2002;
                        float _2621 = (-0.0) - _2003;
                        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
                        float _2626 = _2625 * _2619;
                        float _2627 = _2625 * _2620;
                        float _2628 = _2625 * _2621;
                        float _2636 = exp2(log2(1.0 / ((_2611 * 3.5) + 5.0)) * 0.25);
                        float _2637 = 1.0 - _652;
                        float _2644 = sqrt(1.0 - ((1.0 - (_2637 * _2637)) * (1.0 - (_2636 * _2636))));
                        float _2645 = _2644 * _2644;
                        float _2646 = _2645 * _2645;
                        float _2647 = _2626 + _2591;
                        float _2648 = _2627 + _2592;
                        float _2649 = _2628 + _2593;
                        float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
                        float _2657 = dot(vec3(_592, _595, _598), vec3(_2626, _2627, _2628));
                        float _3839 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2660 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
                        float _2661 = dot(vec3(_592, _595, _598), vec3(_2653 * _2647, _2653 * _2648, _2653 * _2649));
                        float _3850 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
                        float _2664 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                        float _2668 = ((_2664 * _2664) * (_2646 + (-1.0))) + 1.0;
                        float _2669 = _2604 * _2645;
                        float _2670 = _2669 * _2669;
                        float _2673 = ((1.0 - _2670) * _2594) + _2670;
                        float _3861 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2674 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2675 = 1.0 - _2645;
                        float _2685 = (0.5 / (((_2674 * ((_2660 * _2675) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2674 * _2675) + _2645) * _2660))) * _2674;
                        float _3872 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2696 = (((_2646 * 3.1415927410125732421875) * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) / ((_2668 * _2668) * ((_2611 * 2.1991131305694580078125) + 3.141590118408203125))) * _2600;
                        _2422 = (_2615 * _2563.x) + _2521;
                        _2423 = (_2615 * _2563.y) + _2522;
                        _2424 = (_2615 * _2563.z) + _2523;
                        _2419 = (_2696 * _2580.x) + _2518;
                        _2420 = (_2696 * _2580.y) + _2519;
                        _2421 = (_2696 * _2580.z) + _2520;
                        if (_2525 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2518 = _2419;
                            _2519 = _2420;
                            _2520 = _2421;
                            _2521 = _2422;
                            _2522 = _2423;
                            _2523 = _2424;
                            _2524 = _2525;
                        }
                    }
                    frontier_phi_67_pred = _2422;
                    frontier_phi_67_pred_1 = _2421;
                    frontier_phi_67_pred_2 = _2420;
                    frontier_phi_67_pred_3 = _2419;
                    frontier_phi_67_pred_4 = _2423;
                    frontier_phi_67_pred_5 = _2424;
                }
                _2145 = frontier_phi_67_pred;
                _2143 = frontier_phi_67_pred_1;
                _2141 = frontier_phi_67_pred_2;
                _2139 = frontier_phi_67_pred_3;
                _2147 = frontier_phi_67_pred_4;
                _2149 = frontier_phi_67_pred_5;
                uint _2329 = _2328 + 1u;
                if (_2329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2322 = _2139;
                    _2323 = _2141;
                    _2324 = _2143;
                    _2325 = _2145;
                    _2326 = _2147;
                    _2327 = _2149;
                    _2328 = _2329;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2138 = _2139;
            _2140 = _2141;
            _2142 = _2143;
            _2144 = _2145;
            _2146 = _2147;
            _2148 = _2149;
        }
        uvec4 _2152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2153 = _2152.z;
        uint _2155 = (_2153 >> 8u) & 15u;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        if (((4294967295u << _2155) & _2047) == 0u)
        {
            _2290 = _2138;
            _2292 = _2140;
            _2294 = _2142;
            _2296 = _2144;
            _2298 = _2146;
            _2300 = _2148;
        }
        else
        {
            float _2315 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
            float _2316 = _2315 * _2001;
            float _2317 = _2315 * _2002;
            float _2318 = _2315 * _2003;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2155 < ((_2153 >> 12u) & 15u))
            {
                float _2291;
                float _2293;
                float _2295;
                float _2297;
                float _2299;
                float _2301;
                float _2501 = _2138;
                float _2502 = _2140;
                float _2503 = _2142;
                float _2504 = _2144;
                float _2505 = _2146;
                float _2506 = _2148;
                uint _2507 = _2155;
                uint _2516;
                bool _2517;
                for (;;)
                {
                    _2516 = texelFetch(g_lightClassification, int((((_2041 << 5u) + (_2027 << 9u)) + (_2507 << 2u)) >> 2u)).x;
                    _2517 = _2516 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2517)
                    {
                        frontier_phi_81_pred = _2504;
                        frontier_phi_81_pred_1 = _2503;
                        frontier_phi_81_pred_2 = _2502;
                        frontier_phi_81_pred_3 = _2501;
                        frontier_phi_81_pred_4 = _2506;
                        frontier_phi_81_pred_5 = _2505;
                    }
                    else
                    {
                        float _2731;
                        float _2732;
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _2744 = _2501;
                        float _2745 = _2502;
                        float _2746 = _2503;
                        float _2747 = _2504;
                        float _2748 = _2505;
                        float _2749 = _2506;
                        uint _2750 = _2516;
                        uint _2751;
                        vec4 _2776;
                        float _2777;
                        vec4 _2792;
                        vec3 _2804;
                        vec4 _2819;
                        vec4 _2834;
                        float _2880;
                        bool _2881;
                        for (;;)
                        {
                            uint _2761 = ((_2507 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2750));
                            _2751 = (_2750 + 4294967295u) & _2750;
                            uint _2763 = _2761 * 40u;
                            _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            _2777 = _2776.w;
                            uint _2779 = (_2761 * 40u) + 4u;
                            _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            uint _2794 = (_2761 * 40u) + 8u;
                            _2804 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x));
                            uint _2806 = (_2761 * 40u) + 16u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            uint _2821 = (_2761 * 40u) + 20u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2836 = (_2761 * 40u) + 24u;
                            vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            uint _2855 = (_2761 * 40u) + 28u;
                            vec4 _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            _2880 = fma(_2003, _2868.z, fma(_2002, _2868.y, _2868.x * _2001)) + _2868.w;
                            _2881 = !((fma(_2003, _2849.z, fma(_2002, _2849.y, _2849.x * _2001)) + _2849.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2881)
                            {
                                float _2908 = _2776.x - _2001;
                                float _2909 = _2776.y - _2002;
                                float _2910 = _2776.z - _2003;
                                float _2911 = dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910));
                                float _2914 = inversesqrt(_2911);
                                float _2915 = _2914 * _2908;
                                float _2916 = _2914 * _2909;
                                float _2917 = _2914 * _2910;
                                float _2921 = 1.0 - (_2911 / (_2777 * _2777));
                                float _3883 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                                float _2922 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                                float _2926 = sqrt(_2911) * _2792.w;
                                float _2928 = 1.39999997615814208984375 / (_2926 + 1.39999997615814208984375);
                                float _2929 = _2928 * _2928;
                                float _2932 = ((1.0 - _2929) * dot(vec3(_2915, _2916, _2917), vec3(_592, _595, _598))) + _2929;
                                float _2935 = _2926 * _2926;
                                float _2939 = (fma(_2003, _2819.z, fma(_2002, _2819.y, _2819.x * _2001)) + _2819.w) / _2880;
                                float _2940 = (fma(_2003, _2834.z, fma(_2002, _2834.y, _2834.x * _2001)) + _2834.w) / _2880;
                                float _2944 = 1.0 - dot(vec2(_2939, _2940), vec2(_2939, _2940));
                                float _3899 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                                float _2945 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
                                float _2946 = _2945 * (((isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))) * _2922) / ((_2935 * 0.699999988079071044921875) + 1.0));
                                float _2958 = exp2(log2(1.0 / ((_2935 * 3.5) + 5.0)) * 0.25);
                                float _2959 = 1.0 - _652;
                                float _2966 = sqrt(1.0 - ((1.0 - (_2959 * _2959)) * (1.0 - (_2958 * _2958))));
                                float _2967 = _2966 * _2966;
                                float _2968 = _2967 * _2967;
                                float _2969 = _2915 - _2316;
                                float _2970 = _2916 - _2317;
                                float _2971 = _2917 - _2318;
                                float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                                float _2979 = dot(vec3(_592, _595, _598), vec3((-0.0) - _2316, (-0.0) - _2317, (-0.0) - _2318));
                                float _3910 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2982 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
                                float _2983 = dot(vec3(_592, _595, _598), vec3(_2975 * _2969, _2975 * _2970, _2975 * _2971));
                                float _3921 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2986 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                                float _2990 = ((_2986 * _2986) * (_2968 + (-1.0))) + 1.0;
                                float _2991 = _2928 * _2967;
                                float _2992 = _2991 * _2991;
                                float _2998 = ((1.0 - _2992) * dot(vec3(_592, _595, _598), vec3(_2915, _2916, _2917))) + _2992;
                                float _3932 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _2999 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                                float _3000 = 1.0 - _2967;
                                float _3010 = (0.5 / (((_2999 * ((_2982 * _3000) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2999 * _3000) + _2967) * _2982))) * _2999;
                                float _3943 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3020 = (_2945 * _2922) * (((_2968 * 3.1415927410125732421875) * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) / ((_2990 * _2990) * ((_2935 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2946 * _2792.x;
                                frontier_phi_87_pred_1 = _3020 * _2804.z;
                                frontier_phi_87_pred_2 = _3020 * _2804.y;
                                frontier_phi_87_pred_3 = _3020 * _2804.x;
                                frontier_phi_87_pred_4 = _2946 * _2792.z;
                                frontier_phi_87_pred_5 = _2946 * _2792.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3027 = frontier_phi_87_pred;
                            _3026 = frontier_phi_87_pred_1;
                            _3025 = frontier_phi_87_pred_2;
                            _3024 = frontier_phi_87_pred_3;
                            _3029 = frontier_phi_87_pred_4;
                            _3028 = frontier_phi_87_pred_5;
                            _2734 = _3027 + _2747;
                            _2735 = _3028 + _2748;
                            _2736 = _3029 + _2749;
                            _2731 = _3024 + _2744;
                            _2732 = _3025 + _2745;
                            _2733 = _3026 + _2746;
                            if (_2751 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2744 = _2731;
                                _2745 = _2732;
                                _2746 = _2733;
                                _2747 = _2734;
                                _2748 = _2735;
                                _2749 = _2736;
                                _2750 = _2751;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2734;
                        frontier_phi_81_pred_1 = _2733;
                        frontier_phi_81_pred_2 = _2732;
                        frontier_phi_81_pred_3 = _2731;
                        frontier_phi_81_pred_4 = _2736;
                        frontier_phi_81_pred_5 = _2735;
                    }
                    _2297 = frontier_phi_81_pred;
                    _2295 = frontier_phi_81_pred_1;
                    _2293 = frontier_phi_81_pred_2;
                    _2291 = frontier_phi_81_pred_3;
                    _2301 = frontier_phi_81_pred_4;
                    _2299 = frontier_phi_81_pred_5;
                    uint _2508 = _2507 + 1u;
                    if (_2508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2501 = _2291;
                        _2502 = _2293;
                        _2503 = _2295;
                        _2504 = _2297;
                        _2505 = _2299;
                        _2506 = _2301;
                        _2507 = _2508;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2301;
                frontier_phi_56_57_ladder_1 = _2299;
                frontier_phi_56_57_ladder_2 = _2297;
                frontier_phi_56_57_ladder_3 = _2293;
                frontier_phi_56_57_ladder_4 = _2291;
                frontier_phi_56_57_ladder_5 = _2295;
            }
            else
            {
                frontier_phi_56_57_ladder = _2148;
                frontier_phi_56_57_ladder_1 = _2146;
                frontier_phi_56_57_ladder_2 = _2144;
                frontier_phi_56_57_ladder_3 = _2140;
                frontier_phi_56_57_ladder_4 = _2138;
                frontier_phi_56_57_ladder_5 = _2142;
            }
            _2290 = frontier_phi_56_57_ladder_4;
            _2292 = frontier_phi_56_57_ladder_3;
            _2294 = frontier_phi_56_57_ladder_5;
            _2296 = frontier_phi_56_57_ladder_2;
            _2298 = frontier_phi_56_57_ladder_1;
            _2300 = frontier_phi_56_57_ladder;
        }
        float _2305 = isnan(1.0) ? _636 : (isnan(_636) ? 1.0 : min(_636, 1.0));
        _2060 = (_2305 * _2296) + _1787;
        _2062 = (_2305 * _2298) + _1788;
        _2064 = (_2305 * _2300) + _1789;
        _2066 = ((_2290 * 0.039999999105930328369140625) * _2305) + _1943;
        _2068 = ((_2292 * 0.039999999105930328369140625) * _2305) + _1944;
        _2070 = ((_2294 * 0.039999999105930328369140625) * _2305) + _1945;
    }
    else
    {
        _2060 = _1787;
        _2062 = _1788;
        _2064 = _1789;
        _2066 = _1943;
        _2068 = _1944;
        _2070 = _1945;
    }
    float _3959 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3970 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3981 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _2087 = ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_2060 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _636))) + ((_2066 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1473)) * cbPerFrame._m0[3u].x);
    float _2088 = ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_2062 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _636))) + ((_2068 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1473)) * cbPerFrame._m0[3u].x);
    float _2089 = ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2064 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _636))) + ((_2070 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1473)) * cbPerFrame._m0[3u].x);
    float _2090 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    uint _2093 = _611 + 6u;
    float _2101 = _571 / cbSceneParam._m0[86u].x;
    float _2102 = _572 / cbSceneParam._m0[86u].y;
    vec4 _2116 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2101, _2102, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2118 = _2116.x;
    float _2119 = _2116.y;
    float _2120 = _2116.z;
    float _2121 = _2116.w;
    float _2201;
    float _2203;
    float _2205;
    float _2207;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2163 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2164 = _2163 / _539;
        float _2175 = _2164 * _261;
        float _2176 = _262 * _2164;
        float _2177 = (-0.0) - _2176;
        float _2178 = _2164 * _263;
        float _2180 = (cbSceneParam._m0[77u].w * _2177) / _2163;
        float _2181 = _2180 + cbSceneParam._m0[79u].w;
        float _2182 = cbSceneParam._m0[79u].w - _2176;
        float _2188 = sqrt(((_2175 * _2175) + (_2176 * _2176)) + (_2178 * _2178));
        float _2191 = (1.0 - (cbSceneParam._m0[77u].w / _2163)) * _2188;
        float _2197 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2199 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2432;
        if (abs((_2177 - _2180) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2432 = ((((_2181 > 0.0) ? exp2(_2197 * _2181) : (2.0 - exp2(_2199 * _2181))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2191;
        }
        else
        {
            float _2351 = 1.0 / cbSceneParam._m0[80u].x;
            float _2352 = isnan(_2182) ? _2181 : (isnan(_2181) ? _2182 : max(_2181, _2182));
            float _2353 = isnan(_2182) ? _2181 : (isnan(_2181) ? _2182 : min(_2181, _2182));
            float _2362 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : min(_2352, 0.0));
            float _2363 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : min(_2353, 0.0));
            _2432 = ((abs(_2188 / _2177) * cbSceneParam._m0[80u].y) * ((((_2362 - _2363) * 2.0) - ((exp2(_2197 * (isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0)))) - exp2(_2197 * (isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0))))) * _2351)) - ((exp2(_2199 * _2362) - exp2(_2199 * _2363)) * _2351))) + (_2191 * cbSceneParam._m0[80u].z);
        }
        vec4 _2434 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2101, _2102, 1.0), 0.0);
        float _2443 = exp2((_2432 * (-1.44269502162933349609375)) * (1.0 - _2434.w));
        float _2444 = log2(_2443);
        float _2460 = log2(_2121);
        _2201 = (exp2(_2460 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2444 * cbSceneParam._m0[78u].x)) * _2434.x) / cbSceneParam._m0[78u].x)) + _2118;
        _2203 = (exp2(_2460 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2444 * cbSceneParam._m0[78u].y)) * _2434.y) / cbSceneParam._m0[78u].y)) + _2119;
        _2205 = (exp2(_2460 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2444 * cbSceneParam._m0[78u].z)) * _2434.z) / cbSceneParam._m0[78u].z)) + _2120;
        _2207 = _2443 * _2121;
    }
    else
    {
        _2201 = _2118;
        _2203 = _2119;
        _2205 = _2120;
        _2207 = _2121;
    }
    bool _2470;
    vec4 _2217;
    vec4 _2239;
    float _2241;
    float _2245;
    float _2246;
    float _2247;
    float _2248;
    bool _2258;
    for (;;)
    {
        _2217 = cbMatDynParam._m0[0u];
        float _2219 = roundEven(_2217.y);
        bool _2220 = _2219 == 3.0;
        float _2221 = log2(_2207);
        float _2228 = exp2(_2221 * cbSceneParam._m0[78u].x) * _2090;
        float _2229 = exp2(_2221 * cbSceneParam._m0[78u].y) * _2091;
        float _2230 = exp2(_2221 * cbSceneParam._m0[78u].z) * _2092;
        float _2237 = _553 + (-0.5);
        _2239 = cbMtdParam._m0[1u];
        _2241 = _2239.y * _2237;
        float _2244 = (_2219 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2245 = _2244 * (_2220 ? _2228 : (_2228 + (cbSceneParam._m0[72u].w * _2201)));
        _2246 = _2244 * (_2220 ? _2229 : (_2229 + (cbSceneParam._m0[72u].w * _2203)));
        _2247 = _2244 * (_2220 ? _2230 : (_2230 + (cbSceneParam._m0[72u].w * _2205)));
        _2248 = _2237 * 0.999000012874603271484375;
        _2258 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2258)
        {
            if ((cbInstanceData._m0[_611 + 7u].x + _2248) < 0.5)
            {
                _2470 = true;
                break;
            }
        }
        uint _2386 = _612 + uint(_2217.w);
        if ((cbInstanceData._m0[_2386].w < 1.0) && ((cbInstanceData._m0[_2386].w + _2248) < 0.5))
        {
            _2470 = true;
            break;
        }
        if ((_2241 + 1.0) < _2239.x)
        {
            _2470 = true;
            break;
        }
        _2470 = false;
        break;
    }
    float _2701;
    if (_2470)
    {
        discard_state = true;
        _2701 = 0.0;
    }
    else
    {
        _2701 = cbInstanceData._m0[_2093].w;
    }
    SV_Target.x = _2245;
    SV_Target.y = _2246;
    SV_Target.z = _2247;
    SV_Target.w = _2701;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2093].w;
    discard_exit();
}


