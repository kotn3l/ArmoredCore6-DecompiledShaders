#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _426;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _341 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _351 = (_341.y * 2.0) + (-1.0);
    float _357 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _364 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _373 = cbMtdParam._m0[23u].x + _261;
    float _374 = cbMtdParam._m0[23u].y + _262;
    float _375 = cbMtdParam._m0[23u].z + _263;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_357 * _190, _357 * _191, _357 * _192));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_364 * _204, _364 * _205, _364 * _206));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _395 * _391;
    float _401 = ((cbMtdParam._m0[19u].w * _389) * _395) + (_349 * cbMtdParam._m0[20u].y);
    float _402 = ((cbMtdParam._m0[20u].x * _390) * _395) + (_351 * cbMtdParam._m0[20u].z);
    float _405 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _406 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _424;
    float _427;
    float _429;
    if (_401 > 0.0)
    {
        float _410 = (1.0 - _405) / _401;
        _424 = _410;
        _427 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_410 * _396)) * 0.16666667163372039794921875;
        _429 = (fract((_410 * _402) + _406) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_401 < 0.0)
        {
            float _425 = ((-0.0) - _405) / _401;
            frontier_phi_3_2_ladder = (fract(_425 * _396) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _425;
            frontier_phi_3_2_ladder_2 = (fract((_425 * _402) + _406) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _426;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _424 = frontier_phi_3_2_ladder_1;
        _427 = frontier_phi_3_2_ladder;
        _429 = frontier_phi_3_2_ladder_2;
    }
    float _455;
    float _457;
    float _459;
    if (_402 > 0.0)
    {
        float _442 = (1.0 - _406) / _402;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_442 < _424)
        {
            frontier_phi_8_5_ladder = (fract(_442 * _396) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_442 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _442;
        }
        else
        {
            frontier_phi_8_5_ladder = _429;
            frontier_phi_8_5_ladder_1 = _427;
            frontier_phi_8_5_ladder_2 = _424;
        }
        _455 = frontier_phi_8_5_ladder_2;
        _457 = frontier_phi_8_5_ladder_1;
        _459 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_402 < 0.0)
        {
            float _456 = ((-0.0) - _406) / _402;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_456 < _424)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_456 * _396) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_456 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _456;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _429;
                frontier_phi_8_6_ladder_9_ladder_1 = _427;
                frontier_phi_8_6_ladder_9_ladder_2 = _424;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _429;
            frontier_phi_8_6_ladder_1 = _427;
            frontier_phi_8_6_ladder_2 = _424;
        }
        _455 = frontier_phi_8_6_ladder_2;
        _457 = frontier_phi_8_6_ladder_1;
        _459 = frontier_phi_8_6_ladder;
    }
    float _463 = (_396 > 0.0) ? (cbMtdParam._m0[16u].w / _396) : 5000.0;
    float _476;
    float _477;
    if (_463 < _455)
    {
        _476 = ((_405 + cbMtdParam._m0[17u].x) + (_463 * _401)) * 0.16666667163372039794921875;
        _477 = (((_463 * _402) + _406) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _476 = _457;
        _477 = _459;
    }
    vec4 _479 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_476, _477));
    float _484 = _479.x * cbMtdParam._m0[13u].x;
    float _485 = _479.y * cbMtdParam._m0[13u].y;
    float _486 = _479.z * cbMtdParam._m0[13u].z;
    float _491 = 0.5 - (_288 * 0.5);
    float _501 = (((_484 - _301) - (_484 * _288)) * _491) + _301;
    float _502 = (((_485 - _303) - (_485 * _288)) * _491) + _303;
    float _503 = (((_486 - _305) - (_486 * _288)) * _491) + _305;
    vec4 _515 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _519 = _515.z;
    float _522 = (_515.x * 2.0) + (-1.0);
    float _523 = (_515.y * 2.0) + (-1.0);
    float _524 = dot(vec2(_522, _523), vec2(_522, _523));
    float _3399 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _529 = sqrt(1.0 - (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))));
    float _530 = _519 * _288;
    float _540 = (cbMtdParam._m0[15u].w * ((_345 - _530) + ((_519 - _345) * _288))) + _530;
    float _548 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _288))) + _522;
    float _549 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _288))) + _523;
    float _552 = fma(_529, _197, fma(_549, _204, _548 * _190));
    float _555 = fma(_529, _198, fma(_549, _205, _548 * _191));
    float _558 = fma(_529, _199, fma(_549, _206, _548 * _192));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _3410 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _566 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _3421 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3432 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3443 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _589 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _590 = _261 * _589;
    float _591 = _262 * _589;
    float _592 = _263 * _589;
    float _598 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _599 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_565, cbSceneParam._m0[5u].z, fma(_564, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _563));
    float _622 = fma(_565, cbSceneParam._m0[6u].z, fma(_564, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _563));
    float _625 = fma(_565, cbSceneParam._m0[7u].z, fma(_564, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _563));
    uint _638 = uint(roundEven(NORMAL.w)) * 13u;
    uint _640 = (_638 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _646 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_640].x;
    float _647 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_640].y;
    float _648 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_640].z;
    float _3454 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    vec4 _660 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _598, cbSceneParam._m0[86u].y * _599));
    float _663 = _660.x * TEXCOORD.z;
    float _664 = dot(vec3(_563, _564, _565), vec3(_590, _591, _592));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _563) - _590;
    float _672 = (_667 * _564) - _591;
    float _673 = (_667 * _565) - _592;
    float _677 = abs(dot(vec3(_590, _591, _592), vec3(_563, _564, _565)));
    float _3487 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_566);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _765 = fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724));
        float _769 = fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724));
        float _773 = fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724));
        float _797 = _724 + _563;
        float _798 = _728 + _564;
        float _799 = _732 + _565;
        float _809 = fma(_799, cbModelParam._m0[26u].z, fma(_798, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _797)) - _765;
        float _810 = fma(_799, cbModelParam._m0[27u].z, fma(_798, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _797)) - _769;
        float _811 = fma(_799, cbModelParam._m0[28u].z, fma(_798, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _797)) - _773;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_765 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_769 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[34u].z) + ((((((_773 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _867 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_833.x + (-0.5));
        float _869 = _867 * (_833.y + (-0.5));
        float _870 = _867 * (_833.z + (-0.5));
        float _877 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_840.x + (-0.5));
        float _879 = _877 * (_840.y + (-0.5));
        float _880 = _877 * (_840.z + (-0.5));
        float _887 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_847.x + (-0.5));
        float _889 = _887 * (_847.y + (-0.5));
        float _890 = _887 * (_847.z + (-0.5));
        float _897 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_854.x + (-0.5));
        float _899 = _897 * (_854.y + (-0.5));
        float _900 = _897 * (_854.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = _868 * 0.5;
        float _905 = _878 * 0.5;
        float _906 = _888 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _921 = (dot(vec3(_563, _564, _565), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _931 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3535 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_933 + 1.0))) + _938) * _901;
        float _948 = _869 * 0.5;
        float _949 = _879 * 0.5;
        float _950 = _889 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_563, _564, _565), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3568 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_975 + 1.0))) + _980) * _902;
        float _990 = _870 * 0.5;
        float _991 = _880 * 0.5;
        float _992 = _890 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_563, _564, _565), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3601 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1017 + 1.0))) + _1022) * _903;
        _1039 = _870;
        _1040 = _869;
        _1041 = _868;
        _1042 = _880;
        _1043 = _879;
        _1044 = _878;
        _1045 = _890;
        _1046 = _889;
        _1047 = _888;
        _1048 = _903;
        _1049 = _902;
        _1050 = _901;
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
    }
    else
    {
        _1039 = _426;
        _1040 = _426;
        _1041 = _426;
        _1042 = _426;
        _1043 = _426;
        _1044 = _426;
        _1045 = _426;
        _1046 = _426;
        _1047 = _426;
        _1048 = _426;
        _1049 = _426;
        _1050 = _426;
        _1051 = 0.0;
        _1052 = 0.0;
        _1053 = 0.0;
    }
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1079 = fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724));
        float _1083 = fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724));
        float _1087 = fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724));
        float _1110 = _724 + _563;
        float _1111 = _728 + _564;
        float _1112 = _732 + _565;
        float _1122 = fma(_1112, cbModelParam._m0[30u].z, fma(_1111, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1110)) - _1079;
        float _1123 = fma(_1112, cbModelParam._m0[31u].z, fma(_1111, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1110)) - _1083;
        float _1124 = fma(_1112, cbModelParam._m0[32u].z, fma(_1111, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1110)) - _1087;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1079 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1083 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[35u].z) + ((((((_1087 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1178 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1145.x + (-0.5));
        float _1180 = _1178 * (_1145.y + (-0.5));
        float _1181 = _1178 * (_1145.z + (-0.5));
        float _1188 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1152.x + (-0.5));
        float _1190 = _1188 * (_1152.y + (-0.5));
        float _1191 = _1188 * (_1152.z + (-0.5));
        float _1198 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1159.x + (-0.5));
        float _1200 = _1198 * (_1159.y + (-0.5));
        float _1201 = _1198 * (_1159.z + (-0.5));
        float _1208 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1166.x + (-0.5));
        float _1210 = _1208 * (_1166.y + (-0.5));
        float _1211 = _1208 * (_1166.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_563, _564, _565), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3664 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1242 + 1.0))) + _1247) * _1212;
        float _1257 = _1180 * 0.5;
        float _1258 = _1190 * 0.5;
        float _1259 = _1200 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_563, _564, _565), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3697 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1284 + 1.0))) + _1289) * _1213;
        float _1299 = _1181 * 0.5;
        float _1300 = _1191 * 0.5;
        float _1301 = _1201 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_563, _564, _565), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3730 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1326 + 1.0))) + _1331) * _1214;
        _1348 = _1181;
        _1349 = _1180;
        _1350 = _1179;
        _1351 = _1191;
        _1352 = _1190;
        _1353 = _1189;
        _1354 = _1201;
        _1355 = _1200;
        _1356 = _1199;
        _1357 = _1214;
        _1358 = _1213;
        _1359 = _1212;
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _426;
        _1349 = _426;
        _1350 = _426;
        _1351 = _426;
        _1352 = _426;
        _1353 = _426;
        _1354 = _426;
        _1355 = _426;
        _1356 = _426;
        _1357 = _426;
        _1358 = _426;
        _1359 = _426;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1051)) + _1051;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1052)) + _1052;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1053)) + _1053;
    float _1395 = fma(_1374, cbSceneParam._m0[89u].z, fma(_1373, cbSceneParam._m0[89u].y, _1372 * cbSceneParam._m0[89u].x));
    float _1398 = fma(_1374, cbSceneParam._m0[90u].z, fma(_1373, cbSceneParam._m0[90u].y, _1372 * cbSceneParam._m0[90u].x));
    float _1401 = fma(_1374, cbSceneParam._m0[91u].z, fma(_1373, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1372));
    float _1416 = _671 * 0.5;
    float _1417 = _672 * 0.5;
    float _1418 = _673 * 0.5;
    float _1419 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1422 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1425 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1459;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1432 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1436 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1440 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1447 = dot(vec4(cbModelParam._m0[39u]), vec4(_1416, _1417, _1418, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1447) ? 0.0 : (isnan(0.0) ? _1447 : max(0.0, _1447))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1470;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1461 = dot(vec4(cbModelParam._m0[40u]), vec4(_1416, _1417, _1418, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1474 = (_1470 * cbModelParam._m0[1u].x) + (_1459 * (1.0 - cbModelParam._m0[1u].x));
    float _1484 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _566);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1484 : min(cbModelParam._m0[25u].z, _1484));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1547 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1550 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1578 = frontier_phi_26_24_ladder;
        }
        float _1749;
        if (_1547 > 0.0)
        {
            _1749 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1749 = frontier_phi_35_31_ladder;
        }
        float _2194;
        if (_1550 > 0.0)
        {
            _2194 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2194 = frontier_phi_47_42_ladder;
        }
        float _2196 = isnan(_1749) ? _1578 : (isnan(_1578) ? _1749 : min(_1578, _1749));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1544) + _1533;
        float _2202 = (_2197 * _1547) + _1537;
        float _2203 = (_2197 * _1550) + _1541;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1485);
            frontier_phi_25_47_ladder = _2437.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2437.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2437.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_25_47_ladder_2;
        _1568 = frontier_phi_25_47_ladder_1;
        _1570 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1485);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _566);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1630 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1634 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1638 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1641 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1644 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1647 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1754;
        if (_1641 > 0.0)
        {
            _1754 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1754 = frontier_phi_37_33_ladder;
        }
        float _2221;
        if (_1644 > 0.0)
        {
            _2221 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2221 = frontier_phi_49_44_ladder;
        }
        float _2558;
        if (_1647 > 0.0)
        {
            _2558 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2558 = frontier_phi_61_56_ladder;
        }
        float _2560 = isnan(_2221) ? _1754 : (isnan(_1754) ? _2221 : min(_1754, _2221));
        float _2561 = isnan(_2558) ? _2560 : (isnan(_2560) ? _2558 : min(_2560, _2558));
        float _2565 = (_2561 * _1641) + _1630;
        float _2566 = (_2561 * _1644) + _1634;
        float _2567 = (_2561 * _1647) + _1638;
        float _2568 = _2561 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2568;
        float _2571 = _2568 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2567 > _2571) || ((_2567 < _2569) || ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 < _2569) || (_2565 > _2571))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2567, cbModelParam._m0[17u].z, fma(_2566, cbModelParam._m0[17u].y, _2565 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2567, cbModelParam._m0[18u].z, fma(_2566, cbModelParam._m0[18u].y, _2565 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2567, cbModelParam._m0[19u].z, fma(_2566, cbModelParam._m0[19u].y, _2565 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_34_61_ladder = _2688.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2688.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2688.x * cbModelParam._m0[1u].z;
        }
        _1666 = frontier_phi_34_61_ladder_2;
        _1668 = frontier_phi_34_61_ladder_1;
        _1670 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1575);
        _1666 = _1650.x * cbModelParam._m0[1u].z;
        _1668 = _1650.y * cbModelParam._m0[1u].z;
        _1670 = _1650.z * cbModelParam._m0[1u].z;
    }
    float _1682 = ((((1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_692 * _679)) * _663;
    float _1683 = _1682 * ((cbModelParam._m0[1u].w * (_1666 - _1566)) + _1566);
    float _1684 = _1682 * ((cbModelParam._m0[1u].w * (_1668 - _1568)) + _1568);
    float _1685 = _1682 * ((cbModelParam._m0[1u].w * (_1670 - _1570)) + _1570);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, _1683 * cbSceneParam._m0[91u].x));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1732 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1741 = _1728 / _1740;
    float _1742 = _1732 / _1740;
    float _1743 = _1736 / _1740;
    float _1890;
    float _1891;
    float _1892;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1770 = ((uint(_1743 > cbSceneParam._m0[59u].y) + uint(_1743 > cbSceneParam._m0[59u].x)) + uint(_1743 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1771 = _1770 + 43u;
        uint _1779 = _1770 + 44u;
        uint _1787 = _1770 + 45u;
        uint _1795 = _1770 + 46u;
        float _1806 = fma(_1740, cbSceneParam._m0[_1771].w, fma(_1736, cbSceneParam._m0[_1771].z, fma(_1732, cbSceneParam._m0[_1771].y, _1728 * cbSceneParam._m0[_1771].x)));
        float _1810 = fma(_1740, cbSceneParam._m0[_1779].w, fma(_1736, cbSceneParam._m0[_1779].z, fma(_1732, cbSceneParam._m0[_1779].y, _1728 * cbSceneParam._m0[_1779].x)));
        float _1818 = fma(_1740, cbSceneParam._m0[_1795].w, fma(_1736, cbSceneParam._m0[_1795].z, fma(_1732, cbSceneParam._m0[_1795].y, _1728 * cbSceneParam._m0[_1795].x)));
        float _1823 = cbSceneParam._m0[33u].z * _1818;
        float _1825 = cbSceneParam._m0[33u].w * _1818;
        float _1828 = fma(_1740, cbSceneParam._m0[_1787].w, fma(_1736, cbSceneParam._m0[_1787].z, fma(_1732, cbSceneParam._m0[_1787].y, _1728 * cbSceneParam._m0[_1787].x))) / _1818;
        float _1876 = (cbSceneParam._m0[33u].x - sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743))) * cbSceneParam._m0[33u].y;
        float _3856 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1883 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1823 + _1806) / _1818, (_1825 + _1810) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 + _1806) / _1818, (_1810 - _1823) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 - _1823) / _1818, (_1810 - _1825) / _1818), _1828), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 - _1825) / _1818, (_1823 + _1810) / _1818), _1828), 0.0)).x), vec4(0.25)));
        _1890 = 1.0 - (_1883 * cbSceneParam._m0[34u].x);
        _1891 = 1.0 - (_1883 * cbSceneParam._m0[34u].y);
        _1892 = 1.0 - (_1883 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1890 = 1.0;
        _1891 = 1.0;
        _1892 = 1.0;
    }
    float _1956;
    float _1958;
    float _1960;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1944 = fma(_1740, cbSceneParam._m0[63u].w, fma(_1736, cbSceneParam._m0[63u].z, fma(_1732, cbSceneParam._m0[63u].y, _1728 * cbSceneParam._m0[63u].x)));
        float _1945 = fma(_1740, cbSceneParam._m0[60u].w, fma(_1736, cbSceneParam._m0[60u].z, fma(_1732, cbSceneParam._m0[60u].y, _1728 * cbSceneParam._m0[60u].x))) / _1944;
        float _1946 = fma(_1740, cbSceneParam._m0[61u].w, fma(_1736, cbSceneParam._m0[61u].z, fma(_1732, cbSceneParam._m0[61u].y, _1728 * cbSceneParam._m0[61u].x))) / _1944;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1945 >= cbSceneParam._m0[64u].x) && (_1946 >= cbSceneParam._m0[64u].y)) && (_1945 <= cbSceneParam._m0[64u].z)) && (_1946 <= cbSceneParam._m0[64u].w))
        {
            float _2234 = fma(_1740, cbSceneParam._m0[62u].w, fma(_1736, cbSceneParam._m0[62u].z, fma(_1732, cbSceneParam._m0[62u].y, _1728 * cbSceneParam._m0[62u].x))) / _1944;
            float _2238 = isnan(cbSceneParam._m0[41u].w) ? _2234 : (isnan(_2234) ? cbSceneParam._m0[41u].w : max(_2234, cbSceneParam._m0[41u].w));
            float _2281 = (cbSceneParam._m0[33u].x - sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743))) * cbSceneParam._m0[33u].y;
            float _3872 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
            float _2288 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1945, cbSceneParam._m0[33u].w + _1946), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1945, _1946 - cbSceneParam._m0[33u].z), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1945 - cbSceneParam._m0[33u].z, _1946 - cbSceneParam._m0[33u].w), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1945 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1946), _2238), 0.0)).x), vec4(0.25)));
            float _2292 = 1.0 - (_2288 * cbSceneParam._m0[34u].x);
            float _2293 = 1.0 - (_2288 * cbSceneParam._m0[34u].y);
            float _2294 = 1.0 - (_2288 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2294) ? _1892 : (isnan(_1892) ? _2294 : min(_1892, _2294));
            frontier_phi_46_45_ladder_1 = isnan(_2293) ? _1891 : (isnan(_1891) ? _2293 : min(_1891, _2293));
            frontier_phi_46_45_ladder_2 = isnan(_2292) ? _1890 : (isnan(_1890) ? _2292 : min(_1890, _2292));
        }
        else
        {
            frontier_phi_46_45_ladder = _1892;
            frontier_phi_46_45_ladder_1 = _1891;
            frontier_phi_46_45_ladder_2 = _1890;
        }
        _1956 = frontier_phi_46_45_ladder_2;
        _1958 = frontier_phi_46_45_ladder_1;
        _1960 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1956 = _1890;
        _1958 = _1891;
        _1960 = _1892;
    }
    uvec4 _1965 = floatBitsToUint(cbInstanceData._m0[_638 + 5u]);
    uint _1967 = _1965.x * 14u;
    uint _1968 = _1967 + 13u;
    float _1973 = _663 + (-1.0);
    float _1976 = (cbLight._m0[_1968].x * _1973) + 1.0;
    float _1977 = (cbLight._m0[_1968].y * _1973) + 1.0;
    uint _1978 = _1967 + 5u;
    float _1984 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1988 = _1967 + 4u;
    float _1998 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _2002 = _1967 | 1u;
    float _2013 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_563, _564, _565));
    float _2016 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_563, _564, _565));
    float _3908 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _3919 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2021 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _2023 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _2030 = ((cbLight._m0[_1978].x * _1984) * _2023) + (((cbLight._m0[_1988].x * _1956) * _1998) * _2021);
    float _2031 = ((_1984 * cbLight._m0[_1978].y) * _2023) + (((cbLight._m0[_1988].y * _1958) * _1998) * _2021);
    float _2032 = ((_1984 * cbLight._m0[_1978].z) * _2023) + (((cbLight._m0[_1988].z * _1960) * _1998) * _2021);
    uint _2034 = _1967 + 8u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _566) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1967].x + _590;
    float _2050 = cbLight._m0[_1967].y + _591;
    float _2051 = cbLight._m0[_1967].z + _592;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_1967].xyz));
    float _3930 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _2063 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _2064 = dot(vec3(_563, _564, _565), vec3(_2056, _2057, _2058));
    float _3952 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2056, _2057, _2058));
    float _3963 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2048 * _2048;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2087 = (exp2(log2(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2088 = 1.0 - _2048;
    float _2099 = (0.5 / (((_2063 * ((_2062 * _2088) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2088) + _2048) * _2062))) * _2062;
    float _3974 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2101 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    uint _2115 = _1967 + 9u;
    float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _566) * 0.949999988079071044921875);
    float _2127 = _2126 * _2126;
    float _2128 = cbLight._m0[_2002].x + _590;
    float _2129 = cbLight._m0[_2002].y + _591;
    float _2130 = cbLight._m0[_2002].z + _592;
    float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
    float _2135 = _2134 * _2128;
    float _2136 = _2134 * _2129;
    float _2137 = _2134 * _2130;
    float _2138 = dot(vec3(_563, _564, _565), vec3(cbLight._m0[_2002].xyz));
    float _3985 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _2142 = dot(vec3(_563, _564, _565), vec3(_2135, _2136, _2137));
    float _3996 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2135, _2136, _2137));
    float _4007 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2127 * _2127;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2163 = (exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2164 = 1.0 - _2127;
    float _2174 = (0.5 / (((_2063 * ((_2141 * _2164) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2164) + _2127) * _2141))) * _2141;
    float _4018 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2176 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    float _2186 = (((_2163 * cbLight._m0[_2115].x) * _2176) * _1984) + ((((cbLight._m0[_2034].x * _1956) * _2087) * _2101) * _1998);
    float _2187 = (((_2163 * cbLight._m0[_2115].y) * _2176) * _1984) + ((((cbLight._m0[_2034].y * _1958) * _2087) * _2101) * _1998);
    float _2188 = (((_2163 * cbLight._m0[_2115].z) * _2176) * _1984) + ((((cbLight._m0[_2034].z * _1960) * _2087) * _2101) * _1998);
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    if (_1965.y == 0u)
    {
        uvec4 _2306 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2307 = _2306.x;
        uint _2318 = uint((float(_2306.y) * floor(float(uint(cbSceneParam._m0[85u].y * _599) / _2307))) + floor(float(uint(cbSceneParam._m0[85u].x * _598) / _2307)));
        float _2328 = (log2(_1743 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2329 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        uint _2332 = uint(isnan(14.0) ? _2329 : (isnan(_2329) ? 14.0 : min(_2329, 14.0)));
        uvec4 _2337 = texelFetch(g_lightClusterGridBuffer, int(((_2332 << 2u) + (_2318 << 6u)) >> 2u));
        uint _2338 = _2337.x;
        uint _2339 = _2306.z;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        if (((((1u << ((_2339 >> 4u) & 15u)) + 4294967295u) & _2338) == 0u) || ((_2339 & 240u) == 0u))
        {
            _2446 = 0.0;
            _2448 = 0.0;
            _2450 = 0.0;
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
        }
        else
        {
            float _2447;
            float _2449;
            float _2451;
            float _2453;
            float _2455;
            float _2457;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            uint _2622 = 0u;
            uint _2631;
            bool _2632;
            for (;;)
            {
                _2631 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2622 << 2u)) >> 2u)).x;
                _2632 = _2631 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2632)
                {
                    frontier_phi_70_pred = _2619;
                    frontier_phi_70_pred_1 = _2621;
                    frontier_phi_70_pred_2 = _2620;
                    frontier_phi_70_pred_3 = _2618;
                    frontier_phi_70_pred_4 = _2617;
                    frontier_phi_70_pred_5 = _2616;
                }
                else
                {
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    uint _2767;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2620;
                    _2766 = _2621;
                    _2767 = _2631;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    for (;;)
                    {
                        uint _2771 = uint(findLSB(_2767)) + (_2622 << 5u);
                        uint _2768 = (_2767 + 4294967295u) & _2767;
                        uint _2773 = _2771 * 48u;
                        vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 3u)).x));
                        uint _2793 = (_2771 * 48u) + 4u;
                        vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 3u)).x));
                        uint _2812 = (_2771 * 48u) + 8u;
                        vec3 _2823 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x));
                        float _2827 = _2787.x - _1741;
                        float _2828 = _2787.y - _1742;
                        float _2829 = _2787.z - _1743;
                        float _2830 = dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829));
                        float _2833 = inversesqrt(_2830);
                        float _2834 = _2833 * _2827;
                        float _2835 = _2833 * _2828;
                        float _2836 = _2833 * _2829;
                        float _2837 = dot(vec3(_619, _622, _625), vec3(_2834, _2835, _2836));
                        float _2842 = 1.0 - (_2830 * _2787.w);
                        float _4039 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2843 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2844 = sqrt(_2830) * _2806.w;
                        float _2847 = 1.39999997615814208984375 / (_2844 + 1.39999997615814208984375);
                        float _2848 = _2847 * _2847;
                        float _2851 = ((1.0 - _2848) * _2837) + _2848;
                        float _2854 = _2844 * _2844;
                        float _2858 = ((isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))) * _2843) / ((_2854 * 0.699999988079071044921875) + 1.0);
                        float _2862 = (-0.0) - _1741;
                        float _2863 = (-0.0) - _1742;
                        float _2864 = (-0.0) - _1743;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2878 = exp2(log2(1.0 / ((_2854 * 3.5) + 5.0)) * 0.25);
                        float _2879 = 1.0 - _679;
                        float _2886 = sqrt(1.0 - ((1.0 - (_2879 * _2879)) * (1.0 - (_2878 * _2878))));
                        float _2887 = _2886 * _2886;
                        float _2888 = _2887 * _2887;
                        float _2889 = _2869 + _2834;
                        float _2890 = _2870 + _2835;
                        float _2891 = _2871 + _2836;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2899 = dot(vec3(_619, _622, _625), vec3(_2869, _2870, _2871));
                        float _4055 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2903 = dot(vec3(_619, _622, _625), vec3(_2895 * _2889, _2895 * _2890, _2895 * _2891));
                        float _4066 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2906 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2910 = ((_2906 * _2906) * (_2888 + (-1.0))) + 1.0;
                        float _2911 = _2847 * _2887;
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2837) + _2912;
                        float _4077 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2917 = 1.0 - _2887;
                        float _2927 = (0.5 / (((_2916 * ((_2902 * _2917) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2916 * _2917) + _2887) * _2902))) * _2916;
                        float _4088 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2938 = (((_2888 * 3.1415927410125732421875) * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) / ((_2910 * _2910) * ((_2854 * 2.1991131305694580078125) + 3.141590118408203125))) * _2843;
                        _2696 = (_2858 * _2806.x) + _2764;
                        _2697 = (_2858 * _2806.y) + _2765;
                        _2698 = (_2858 * _2806.z) + _2766;
                        _2693 = (_2938 * _2823.x) + _2761;
                        _2694 = (_2938 * _2823.y) + _2762;
                        _2695 = (_2938 * _2823.z) + _2763;
                        if (_2768 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2698;
                            _2767 = _2768;
                        }
                    }
                    frontier_phi_70_pred = _2696;
                    frontier_phi_70_pred_1 = _2698;
                    frontier_phi_70_pred_2 = _2697;
                    frontier_phi_70_pred_3 = _2695;
                    frontier_phi_70_pred_4 = _2694;
                    frontier_phi_70_pred_5 = _2693;
                }
                _2453 = frontier_phi_70_pred;
                _2457 = frontier_phi_70_pred_1;
                _2455 = frontier_phi_70_pred_2;
                _2451 = frontier_phi_70_pred_3;
                _2449 = frontier_phi_70_pred_4;
                _2447 = frontier_phi_70_pred_5;
                uint _2623 = _2622 + 1u;
                if (_2623 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2616 = _2447;
                    _2617 = _2449;
                    _2618 = _2451;
                    _2619 = _2453;
                    _2620 = _2455;
                    _2621 = _2457;
                    _2622 = _2623;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2446 = _2447;
            _2448 = _2449;
            _2450 = _2451;
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
        }
        uvec4 _2460 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2461 = _2460.z;
        uint _2463 = (_2461 >> 8u) & 15u;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((4294967295u << _2463) & _2338) == 0u)
        {
            _2584 = _2446;
            _2586 = _2448;
            _2588 = _2450;
            _2590 = _2452;
            _2592 = _2454;
            _2594 = _2456;
        }
        else
        {
            float _2609 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
            float _2610 = _2609 * _1741;
            float _2611 = _2609 * _1742;
            float _2612 = _2609 * _1743;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2463 < ((_2461 >> 12u) & 15u))
            {
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2744 = _2446;
                float _2745 = _2448;
                float _2746 = _2450;
                float _2747 = _2452;
                float _2748 = _2454;
                float _2749 = _2456;
                uint _2750 = _2463;
                uint _2759;
                bool _2760;
                for (;;)
                {
                    _2759 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2750 << 2u)) >> 2u)).x;
                    _2760 = _2759 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2760)
                    {
                        frontier_phi_76_pred = _2749;
                        frontier_phi_76_pred_1 = _2748;
                        frontier_phi_76_pred_2 = _2747;
                        frontier_phi_76_pred_3 = _2746;
                        frontier_phi_76_pred_4 = _2745;
                        frontier_phi_76_pred_5 = _2744;
                    }
                    else
                    {
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _2956 = _2744;
                        float _2957 = _2745;
                        float _2958 = _2746;
                        float _2959 = _2747;
                        float _2960 = _2748;
                        float _2961 = _2749;
                        uint _2962 = _2759;
                        uint _2963;
                        vec4 _2988;
                        float _2989;
                        vec4 _3004;
                        vec3 _3016;
                        vec4 _3031;
                        vec4 _3046;
                        float _3092;
                        bool _3093;
                        for (;;)
                        {
                            uint _2973 = ((_2750 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2962));
                            _2963 = (_2962 + 4294967295u) & _2962;
                            uint _2975 = _2973 * 40u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _2989 = _2988.w;
                            uint _2991 = (_2973 * 40u) + 4u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3006 = (_2973 * 40u) + 8u;
                            _3016 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x));
                            uint _3018 = (_2973 * 40u) + 16u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3033 = (_2973 * 40u) + 20u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3048 = (_2973 * 40u) + 24u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3067 = (_2973 * 40u) + 28u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            _3092 = fma(_1743, _3080.z, fma(_1742, _3080.y, _3080.x * _1741)) + _3080.w;
                            _3093 = !((fma(_1743, _3061.z, fma(_1742, _3061.y, _3061.x * _1741)) + _3061.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3093)
                            {
                                float _3120 = _2988.x - _1741;
                                float _3121 = _2988.y - _1742;
                                float _3122 = _2988.z - _1743;
                                float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                                float _3126 = inversesqrt(_3123);
                                float _3127 = _3126 * _3120;
                                float _3128 = _3126 * _3121;
                                float _3129 = _3126 * _3122;
                                float _3133 = 1.0 - (_3123 / (_2989 * _2989));
                                float _4099 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3138 = sqrt(_3123) * _3004.w;
                                float _3140 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                                float _3141 = _3140 * _3140;
                                float _3144 = ((1.0 - _3141) * dot(vec3(_3127, _3128, _3129), vec3(_619, _622, _625))) + _3141;
                                float _3147 = _3138 * _3138;
                                float _3151 = (fma(_1743, _3031.z, fma(_1742, _3031.y, _3031.x * _1741)) + _3031.w) / _3092;
                                float _3152 = (fma(_1743, _3046.z, fma(_1742, _3046.y, _3046.x * _1741)) + _3046.w) / _3092;
                                float _3156 = 1.0 - dot(vec2(_3151, _3152), vec2(_3151, _3152));
                                float _4115 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3158 = _3157 * (((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3134) / ((_3147 * 0.699999988079071044921875) + 1.0));
                                float _3170 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                                float _3171 = 1.0 - _679;
                                float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                                float _3179 = _3178 * _3178;
                                float _3180 = _3179 * _3179;
                                float _3181 = _3127 - _2610;
                                float _3182 = _3128 - _2611;
                                float _3183 = _3129 - _2612;
                                float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                                float _3191 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2610, (-0.0) - _2611, (-0.0) - _2612));
                                float _4126 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3194 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3195 = dot(vec3(_619, _622, _625), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                                float _4137 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                                float _3203 = _3140 * _3179;
                                float _3204 = _3203 * _3203;
                                float _3210 = ((1.0 - _3204) * dot(vec3(_619, _622, _625), vec3(_3127, _3128, _3129))) + _3204;
                                float _4148 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3212 = 1.0 - _3179;
                                float _3222 = (0.5 / (((_3211 * ((_3194 * _3212) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3179) * _3194))) * _3211;
                                float _4159 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3232 = (_3157 * _3134) * (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) / ((_3202 * _3202) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3158 * _3004.z;
                                frontier_phi_82_pred_1 = _3158 * _3004.y;
                                frontier_phi_82_pred_2 = _3158 * _3004.x;
                                frontier_phi_82_pred_3 = _3232 * _3016.z;
                                frontier_phi_82_pred_4 = _3232 * _3016.y;
                                frontier_phi_82_pred_5 = _3232 * _3016.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3241 = frontier_phi_82_pred;
                            _3240 = frontier_phi_82_pred_1;
                            _3239 = frontier_phi_82_pred_2;
                            _3238 = frontier_phi_82_pred_3;
                            _3237 = frontier_phi_82_pred_4;
                            _3236 = frontier_phi_82_pred_5;
                            _2946 = _3239 + _2959;
                            _2947 = _3240 + _2960;
                            _2948 = _3241 + _2961;
                            _2943 = _3236 + _2956;
                            _2944 = _3237 + _2957;
                            _2945 = _3238 + _2958;
                            if (_2963 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2963;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2948;
                        frontier_phi_76_pred_1 = _2947;
                        frontier_phi_76_pred_2 = _2946;
                        frontier_phi_76_pred_3 = _2945;
                        frontier_phi_76_pred_4 = _2944;
                        frontier_phi_76_pred_5 = _2943;
                    }
                    _2595 = frontier_phi_76_pred;
                    _2593 = frontier_phi_76_pred_1;
                    _2591 = frontier_phi_76_pred_2;
                    _2589 = frontier_phi_76_pred_3;
                    _2587 = frontier_phi_76_pred_4;
                    _2585 = frontier_phi_76_pred_5;
                    uint _2751 = _2750 + 1u;
                    if (_2751 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2744 = _2585;
                        _2745 = _2587;
                        _2746 = _2589;
                        _2747 = _2591;
                        _2748 = _2593;
                        _2749 = _2595;
                        _2750 = _2751;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2593;
                frontier_phi_63_64_ladder_1 = _2595;
                frontier_phi_63_64_ladder_2 = _2591;
                frontier_phi_63_64_ladder_3 = _2589;
                frontier_phi_63_64_ladder_4 = _2587;
                frontier_phi_63_64_ladder_5 = _2585;
            }
            else
            {
                frontier_phi_63_64_ladder = _2454;
                frontier_phi_63_64_ladder_1 = _2456;
                frontier_phi_63_64_ladder_2 = _2452;
                frontier_phi_63_64_ladder_3 = _2450;
                frontier_phi_63_64_ladder_4 = _2448;
                frontier_phi_63_64_ladder_5 = _2446;
            }
            _2584 = frontier_phi_63_64_ladder_5;
            _2586 = frontier_phi_63_64_ladder_4;
            _2588 = frontier_phi_63_64_ladder_3;
            _2590 = frontier_phi_63_64_ladder_2;
            _2592 = frontier_phi_63_64_ladder;
            _2594 = frontier_phi_63_64_ladder_1;
        }
        float _2599 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2351 = (_2599 * _2590) + _2030;
        _2353 = (_2599 * _2592) + _2031;
        _2355 = (_2599 * _2594) + _2032;
        _2357 = ((_2584 * 0.039999999105930328369140625) * _2599) + _2186;
        _2359 = ((_2586 * 0.039999999105930328369140625) * _2599) + _2187;
        _2361 = ((_2588 * 0.039999999105930328369140625) * _2599) + _2188;
    }
    else
    {
        _2351 = _2030;
        _2353 = _2031;
        _2355 = _2032;
        _2357 = _2186;
        _2359 = _2187;
        _2361 = _2188;
    }
    float _4175 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4186 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4197 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _2378 = ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2351 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _663))) + ((_2357 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1474)) * cbPerFrame._m0[3u].x);
    float _2379 = ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2353 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _663))) + ((_2359 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1474)) * cbPerFrame._m0[3u].x);
    float _2380 = ((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2355 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _663))) + ((_2361 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1474)) * cbPerFrame._m0[3u].x);
    uint _2384 = _638 + 6u;
    float _2392 = _598 / cbSceneParam._m0[86u].x;
    float _2393 = _599 / cbSceneParam._m0[86u].y;
    vec4 _2407 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2392, _2393, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2409 = _2407.x;
    float _2410 = _2407.y;
    float _2411 = _2407.z;
    float _2412 = _2407.w;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2471 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2472 = _2471 / _585;
        float _2483 = _2472 * _261;
        float _2484 = _262 * _2472;
        float _2485 = (-0.0) - _2484;
        float _2486 = _2472 * _263;
        float _2488 = (cbSceneParam._m0[77u].w * _2485) / _2471;
        float _2489 = _2488 + cbSceneParam._m0[79u].w;
        float _2490 = cbSceneParam._m0[79u].w - _2484;
        float _2496 = sqrt(((_2483 * _2483) + (_2484 * _2484)) + (_2486 * _2486));
        float _2499 = (1.0 - (cbSceneParam._m0[77u].w / _2471)) * _2496;
        float _2504 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2506 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2706;
        if (abs((_2485 - _2488) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2706 = ((((_2489 > 0.0) ? exp2(_2504 * _2489) : (2.0 - exp2(_2506 * _2489))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2499;
        }
        else
        {
            float _2645 = 1.0 / cbSceneParam._m0[80u].x;
            float _2646 = isnan(_2490) ? _2489 : (isnan(_2489) ? _2490 : max(_2489, _2490));
            float _2647 = isnan(_2490) ? _2489 : (isnan(_2489) ? _2490 : min(_2489, _2490));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            float _2657 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : min(_2647, 0.0));
            _2706 = ((abs(_2496 / _2485) * cbSceneParam._m0[80u].y) * ((((_2656 - _2657) * 2.0) - ((exp2(_2504 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0)))) - exp2(_2504 * (isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0))))) * _2645)) - ((exp2(_2506 * _2656) - exp2(_2506 * _2657)) * _2645))) + (_2499 * cbSceneParam._m0[80u].z);
        }
        vec4 _2708 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2392, _2393, 1.0), 0.0);
        float _2717 = exp2((_2706 * (-1.44269502162933349609375)) * (1.0 - _2708.w));
        float _2718 = log2(_2717);
        float _2734 = log2(_2412);
        _2508 = (exp2(_2734 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].x)) * _2708.x) / cbSceneParam._m0[78u].x)) + _2409;
        _2510 = (exp2(_2734 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].y)) * _2708.y) / cbSceneParam._m0[78u].y)) + _2410;
        _2512 = (exp2(_2734 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].z)) * _2708.z) / cbSceneParam._m0[78u].z)) + _2411;
        _2514 = _2717 * _2412;
    }
    else
    {
        _2508 = _2409;
        _2510 = _2410;
        _2512 = _2411;
        _2514 = _2412;
    }
    float _2526 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2527 = _2526 == 3.0;
    float _2528 = log2(_2514);
    float _2535 = exp2(_2528 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0)));
    float _2536 = exp2(_2528 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0)));
    float _2537 = exp2(_2528 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0)));
    float _2546 = (_2526 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2546 * (_2527 ? _2535 : (_2535 + (cbSceneParam._m0[72u].w * _2508)));
    SV_Target.y = _2546 * (_2527 ? _2536 : (_2536 + (cbSceneParam._m0[72u].w * _2510)));
    SV_Target.z = _2546 * (_2527 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2512)));
    SV_Target.w = cbInstanceData._m0[_2384].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2384].w;
}


