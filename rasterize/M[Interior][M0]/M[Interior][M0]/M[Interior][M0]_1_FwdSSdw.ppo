#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _588;
uint _1755;
uint _1756;
uint _1757;
uint _1992;
uint _1993;
uint _1994;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _173 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _174 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _179 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _186 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _190 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _248 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _238);
    float _249 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _238);
    float _250 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _238);
    float _276 = cbMtdParam._m0[22u].y + _248;
    float _277 = cbMtdParam._m0[22u].z + _249;
    float _278 = cbMtdParam._m0[22u].w + _250;
    float _295 = (-0.0) - dot(vec3(_276, _277, _278), vec3(_179 * _172, _179 * _173, _179 * _174));
    float _296 = (-0.0) - dot(vec3(_276, _277, _278), vec3(_190 * TANGENT.x, _190 * TANGENT.y, _190 * TANGENT.z));
    float _297 = (-0.0) - dot(vec3(_276, _277, _278), vec3((-0.0) - (NORMAL.x * _186), (-0.0) - (NORMAL.y * _186), (-0.0) - (NORMAL.z * _186)));
    float _301 = inversesqrt(dot(vec3(_295, _296, _297), vec3(_295, _296, _297)));
    float _302 = _301 * _297;
    float _304 = (cbMtdParam._m0[19u].x * _295) * _301;
    float _306 = (cbMtdParam._m0[18u].w * _296) * _301;
    float _307 = fract(TEXCOORD.x);
    float _308 = fract(TEXCOORD.y);
    float _314;
    if (_304 > 0.0)
    {
        _314 = (1.0 - _307) / _304;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_304 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _307) / _304;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _314 = frontier_phi_3_2_ladder;
    }
    float _322;
    if (_306 > 0.0)
    {
        _322 = (1.0 - _308) / _306;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _308) / _306;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _322 = frontier_phi_7_6_ladder;
    }
    float _326 = (_302 > 0.0) ? (cbMtdParam._m0[15u].x / _302) : 5000.0;
    float _327 = isnan(_322) ? _314 : (isnan(_314) ? _322 : min(_314, _322));
    float _328 = isnan(_326) ? _327 : (isnan(_327) ? _326 : min(_327, _326));
    float _332 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _339 = ((_328 * _302) + _332) / _332;
    vec4 _365 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_307 + (-0.5)) + (_328 * _304)) / _339) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_308 + (-0.5)) + (_328 * _306)) / _339) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _394 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _398 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _399 = _248 * _398;
    float _400 = _249 * _398;
    float _401 = _250 * _398;
    float _407 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _408 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _417 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_407 * cbSceneParam._m0[86u].x, _408 * cbSceneParam._m0[86u].y));
    float _420 = _417.x * TEXCOORD.z;
    float _421 = (-0.0) - _399;
    float _422 = (-0.0) - _400;
    float _423 = (-0.0) - _401;
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _587;
    float _589;
    float _590;
    float _591;
    float _592;
    float _593;
    float _594;
    float _595;
    float _596;
    float _597;
    float _598;
    float _599;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _509 = (cbModelParam._m0[37u].x * ((((fma(_453, cbModelParam._m0[26u].z, fma(_449, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _445)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _511 = (cbModelParam._m0[37u].y * ((((fma(_453, cbModelParam._m0[27u].z, fma(_449, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _445)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _512 = (((((fma(_453, cbModelParam._m0[28u].z, fma(_449, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _445)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _515 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_509, _511, _512), 0.0);
        vec4 _522 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_509, _511, _512), 0.0);
        vec4 _529 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_509, _511, _512), 0.0);
        vec4 _536 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_509, _511, _512), 0.0);
        float _549 = exp2((_515.w + (-0.5)) * 20.0) * 2.0;
        float _560 = exp2((_522.w + (-0.5)) * 20.0) * 2.0;
        float _570 = exp2((_529.w + (-0.5)) * 20.0) * 2.0;
        float _580 = exp2((_536.w + (-0.5)) * 20.0) * 2.0;
        float _581 = _580 * (_536.x + (-0.5));
        float _582 = _580 * (_536.y + (-0.5));
        float _583 = _580 * (_536.z + (-0.5));
        _587 = _549 * (_515.z + (-0.5));
        _589 = _549 * (_515.y + (-0.5));
        _590 = _549 * (_515.x + (-0.5));
        _591 = _560 * (_522.z + (-0.5));
        _592 = _560 * (_522.y + (-0.5));
        _593 = _560 * (_522.x + (-0.5));
        _594 = _570 * (_529.z + (-0.5));
        _595 = _570 * (_529.y + (-0.5));
        _596 = _570 * (_529.x + (-0.5));
        _597 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        _598 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        _599 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    }
    else
    {
        _587 = _588;
        _589 = _588;
        _590 = _588;
        _591 = _588;
        _592 = _588;
        _593 = _588;
        _594 = _588;
        _595 = _588;
        _596 = _588;
        _597 = _588;
        _598 = _588;
        _599 = _588;
    }
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _653 = (cbModelParam._m0[38u].x * ((((fma(_453, cbModelParam._m0[30u].z, fma(_449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _445)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _654 = (cbModelParam._m0[38u].y * ((((fma(_453, cbModelParam._m0[31u].z, fma(_449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _445)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _655 = (((((fma(_453, cbModelParam._m0[32u].z, fma(_449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _445)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        float _690 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _700 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _710 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _720 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_678.x + (-0.5));
        float _722 = _720 * (_678.y + (-0.5));
        float _723 = _720 * (_678.z + (-0.5));
        _727 = _690 * (_657.z + (-0.5));
        _728 = _690 * (_657.y + (-0.5));
        _729 = _690 * (_657.x + (-0.5));
        _730 = _700 * (_664.z + (-0.5));
        _731 = _700 * (_664.y + (-0.5));
        _732 = _700 * (_664.x + (-0.5));
        _733 = _710 * (_671.z + (-0.5));
        _734 = _710 * (_671.y + (-0.5));
        _735 = _710 * (_671.x + (-0.5));
        _736 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        _737 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        _738 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    }
    else
    {
        _727 = _588;
        _728 = _588;
        _729 = _588;
        _730 = _588;
        _731 = _588;
        _732 = _588;
        _733 = _588;
        _734 = _588;
        _735 = _588;
        _736 = _588;
        _737 = _588;
        _738 = _588;
    }
    float _753 = _399 * (-0.5);
    float _754 = _400 * (-0.5);
    float _755 = _401 * (-0.5);
    float _756 = dot(vec4(_753, _754, _755, 1.0), vec4(_729, _732, _735, _738));
    float _759 = dot(vec4(_753, _754, _755, 1.0), vec4(_728, _731, _734, _737));
    float _762 = dot(vec4(_753, _754, _755, 1.0), vec4(_727, _730, _733, _736));
    float _797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _769 = dot(vec4(_753, _754, _755, 1.0), vec4(_587, _591, _594, _597));
        float _773 = dot(vec4(_753, _754, _755, 1.0), vec4(_589, _592, _595, _598));
        float _777 = dot(vec4(_753, _754, _755, 1.0), vec4(_590, _593, _596, _599));
        float _784 = dot(vec4(cbModelParam._m0[39u]), vec4(_753, _754, _755, 1.0));
        _797 = dot(vec3(isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0)), isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0)), isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_784) ? 0.0 : (isnan(0.0) ? _784 : max(0.0, _784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _797 = 1.0;
    }
    float _808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _799 = dot(vec4(cbModelParam._m0[40u]), vec4(_753, _754, _755, 1.0));
        _808 = dot(vec3(isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)), isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)), isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_799) ? 0.0 : (isnan(0.0) ? _799 : max(0.0, _799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _808 = 1.0;
    }
    float _812 = (_808 * cbModelParam._m0[1u].x) + (_797 * (1.0 - cbModelParam._m0[1u].x));
    float _818 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _901;
    float _903;
    float _905;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _868 = fma(_453, cbModelParam._m0[13u].z, fma(_449, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _445)) + cbModelParam._m0[13u].w;
        float _872 = fma(_453, cbModelParam._m0[14u].z, fma(_449, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _445)) + cbModelParam._m0[14u].w;
        float _876 = fma(_453, cbModelParam._m0[15u].z, fma(_449, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _445)) + cbModelParam._m0[15u].w;
        float _879 = fma(_423, cbModelParam._m0[13u].z, fma(_422, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _421));
        float _882 = fma(_423, cbModelParam._m0[14u].z, fma(_422, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _421));
        float _885 = fma(_423, cbModelParam._m0[15u].z, fma(_422, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _421));
        float _911;
        if (_879 > 0.0)
        {
            _911 = abs((1.0 - _868) / _879);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_879 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_868 + 1.0) / _879);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _911 = frontier_phi_22_20_ladder;
        }
        float _1212;
        if (_882 > 0.0)
        {
            _1212 = abs((1.0 - _872) / _882);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_882 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_872 + 1.0) / _882);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1212 = frontier_phi_31_27_ladder;
        }
        float _1508;
        if (_885 > 0.0)
        {
            _1508 = abs((1.0 - _876) / _885);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_885 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_876 + 1.0) / _885);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1508 = frontier_phi_45_38_ladder;
        }
        float _1510 = isnan(_1212) ? _911 : (isnan(_911) ? _1212 : min(_911, _1212));
        float _1511 = isnan(_1508) ? _1510 : (isnan(_1510) ? _1508 : min(_1510, _1508));
        float _1515 = (_1511 * _879) + _868;
        float _1516 = (_1511 * _882) + _872;
        float _1517 = (_1511 * _885) + _876;
        float _1518 = _1511 * 9.9999997473787516355514526367188e-05;
        float _1519 = (-1.0) - _1518;
        float _1521 = _1518 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1517 > _1521) || ((_1517 < _1519) || ((_1516 > _1521) || ((_1516 < _1519) || ((_1515 < _1519) || (_1515 > _1521))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1517, cbModelParam._m0[9u].z, fma(_1516, cbModelParam._m0[9u].y, _1515 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1517, cbModelParam._m0[10u].z, fma(_1516, cbModelParam._m0[10u].y, _1515 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1517, cbModelParam._m0[11u].z, fma(_1516, cbModelParam._m0[11u].y, _1515 * cbModelParam._m0[11u].x))), _818);
            frontier_phi_21_45_ladder = _1628.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _1628.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _1628.x * cbModelParam._m0[1u].y;
        }
        _901 = frontier_phi_21_45_ladder_2;
        _903 = frontier_phi_21_45_ladder_1;
        _905 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _889 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_421, _422, _423), _818);
        _901 = _889.x * cbModelParam._m0[1u].y;
        _903 = _889.y * cbModelParam._m0[1u].y;
        _905 = _889.z * cbModelParam._m0[1u].y;
    }
    float _908 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _997;
    float _999;
    float _1001;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _961 = fma(_453, cbModelParam._m0[21u].z, fma(_449, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _445)) + cbModelParam._m0[21u].w;
        float _965 = fma(_453, cbModelParam._m0[22u].z, fma(_449, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _445)) + cbModelParam._m0[22u].w;
        float _969 = fma(_453, cbModelParam._m0[23u].z, fma(_449, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _445)) + cbModelParam._m0[23u].w;
        float _972 = fma(_423, cbModelParam._m0[21u].z, fma(_422, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _421));
        float _975 = fma(_423, cbModelParam._m0[22u].z, fma(_422, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _421));
        float _978 = fma(_423, cbModelParam._m0[23u].z, fma(_422, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _421));
        float _1217;
        if (_972 > 0.0)
        {
            _1217 = abs((1.0 - _961) / _972);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_972 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_961 + 1.0) / _972);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1217 = frontier_phi_33_29_ladder;
        }
        float _1534;
        if (_975 > 0.0)
        {
            _1534 = abs((1.0 - _965) / _975);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_975 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_965 + 1.0) / _975);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1534 = frontier_phi_47_40_ladder;
        }
        float _1685;
        if (_978 > 0.0)
        {
            _1685 = abs((1.0 - _969) / _978);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_978 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_969 + 1.0) / _978);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1685 = frontier_phi_61_56_ladder;
        }
        float _1687 = isnan(_1534) ? _1217 : (isnan(_1217) ? _1534 : min(_1217, _1534));
        float _1688 = isnan(_1685) ? _1687 : (isnan(_1687) ? _1685 : min(_1687, _1685));
        float _1692 = (_1688 * _972) + _961;
        float _1693 = (_1688 * _975) + _965;
        float _1694 = (_1688 * _978) + _969;
        float _1695 = _1688 * 9.9999997473787516355514526367188e-05;
        float _1696 = (-1.0) - _1695;
        float _1698 = _1695 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_1694 > _1698) || ((_1694 < _1696) || ((_1693 > _1698) || ((_1693 < _1696) || ((_1692 < _1696) || (_1692 > _1698))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1694, cbModelParam._m0[17u].z, fma(_1693, cbModelParam._m0[17u].y, _1692 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1694, cbModelParam._m0[18u].z, fma(_1693, cbModelParam._m0[18u].y, _1692 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1694, cbModelParam._m0[19u].z, fma(_1693, cbModelParam._m0[19u].y, _1692 * cbModelParam._m0[19u].x))), _908);
            frontier_phi_30_61_ladder = _1854.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _1854.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _1854.x * cbModelParam._m0[1u].z;
        }
        _997 = frontier_phi_30_61_ladder_2;
        _999 = frontier_phi_30_61_ladder;
        _1001 = frontier_phi_30_61_ladder_1;
    }
    else
    {
        vec4 _981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_421, _422, _423), _908);
        _997 = _981.x * cbModelParam._m0[1u].z;
        _999 = _981.y * cbModelParam._m0[1u].z;
        _1001 = _981.z * cbModelParam._m0[1u].z;
    }
    float _1013 = _420 * 0.01200000010430812835693359375;
    float _1015 = _1013 * ((cbModelParam._m0[1u].w * (_997 - _901)) + _901);
    float _1016 = _1013 * ((cbModelParam._m0[1u].w * (_999 - _903)) + _903);
    float _1017 = _1013 * ((cbModelParam._m0[1u].w * (_1001 - _905)) + _905);
    float _1038 = fma(_1017, cbSceneParam._m0[89u].z, fma(_1016, cbSceneParam._m0[89u].y, _1015 * cbSceneParam._m0[89u].x));
    float _1041 = fma(_1017, cbSceneParam._m0[90u].z, fma(_1016, cbSceneParam._m0[90u].y, _1015 * cbSceneParam._m0[90u].x));
    float _1044 = fma(_1017, cbSceneParam._m0[91u].z, fma(_1016, cbSceneParam._m0[91u].y, _1015 * cbSceneParam._m0[91u].x));
    vec4 _1052 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_407, _408));
    float _1054 = _1052.w;
    uint _1070 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1075 = floatBitsToUint(cbInstanceData._m0[_1070 + 5u]);
    uint _1077 = _1075.x * 14u;
    uint _1078 = _1077 + 13u;
    float _1083 = _420 + (-1.0);
    float _1087 = (cbLight._m0[_1078].x * _1083) + 1.0;
    float _1088 = (cbLight._m0[_1078].y * _1083) + 1.0;
    uint _1089 = _1077 + 8u;
    float _1100 = cbLight._m0[_1077].x + _399;
    float _1101 = cbLight._m0[_1077].y + _400;
    float _1102 = cbLight._m0[_1077].z + _401;
    float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
    float _1110 = dot(vec3(0.0), vec3(cbLight._m0[_1077].xyz));
    float _2329 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    float _1114 = dot(vec3(0.0), vec3(_399, _400, _401));
    float _2340 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1117 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
    float _1118 = dot(vec3(cbLight._m0[_1077].xyz), vec3(_1100 * _1106, _1101 * _1106, _1102 * _1106));
    float _2351 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1129 = (exp2(log2(1.0 - (isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1135 = (0.5 / ((_1113 + 9.9999999392252902907785028219223e-09) + _1117)) * _1113;
    float _2362 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1137 = (isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0))) * 0.31831014156341552734375;
    float _1139 = isnan(1.0) ? _1087 : (isnan(_1087) ? 1.0 : min(_1087, 1.0));
    uint _1152 = _1077 + 9u;
    uint _1158 = _1077 | 1u;
    float _1164 = cbLight._m0[_1158].x + _399;
    float _1165 = cbLight._m0[_1158].y + _400;
    float _1166 = cbLight._m0[_1158].z + _401;
    float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
    float _1174 = dot(vec3(0.0), vec3(cbLight._m0[_1158].xyz));
    float _2378 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
    float _1178 = dot(vec3(cbLight._m0[_1158].xyz), vec3(_1164 * _1170, _1165 * _1170, _1166 * _1170));
    float _2389 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1187 = (exp2(log2(1.0 - (isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1191 = (0.5 / ((_1177 + 9.9999999392252902907785028219223e-09) + _1117)) * _1177;
    float _2400 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1193 = (isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0))) * 0.31831014156341552734375;
    float _1194 = isnan(1.0) ? _1088 : (isnan(_1088) ? 1.0 : min(_1088, 1.0));
    float _1204 = (((_1187 * cbLight._m0[_1152].x) * _1193) * _1194) + ((((cbLight._m0[_1089].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1054))) * _1129) * _1137) * _1139);
    float _1205 = (((_1187 * cbLight._m0[_1152].y) * _1193) * _1194) + ((((cbLight._m0[_1089].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1054))) * _1129) * _1137) * _1139);
    float _1206 = (((_1187 * cbLight._m0[_1152].z) * _1193) * _1194) + ((((cbLight._m0[_1089].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1054))) * _1129) * _1137) * _1139);
    float _1323;
    float _1325;
    float _1327;
    if (_1075.y == 0u)
    {
        float _1262 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1263 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1262;
        float _1264 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1262;
        float _1265 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1262;
        uvec4 _1277 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1278 = _1277.x;
        uint _1289 = uint((float(_1277.y) * floor(float(uint(cbSceneParam._m0[85u].y * _408) / _1278))) + floor(float(uint(cbSceneParam._m0[85u].x * _407) / _1278)));
        float _1299 = (log2(_1265 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1300 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        uint _1303 = uint(isnan(14.0) ? _1300 : (isnan(_1300) ? 14.0 : min(_1300, 14.0)));
        uvec4 _1309 = texelFetch(g_lightClusterGridBuffer, int(((_1303 << 2u) + (_1289 << 6u)) >> 2u));
        uint _1310 = _1309.x;
        uint _1311 = _1277.z;
        float _1400;
        float _1402;
        float _1404;
        if (((((1u << ((_1311 >> 4u) & 15u)) + 4294967295u) & _1310) == 0u) || ((_1311 & 240u) == 0u))
        {
            _1400 = 0.0;
            _1402 = 0.0;
            _1404 = 0.0;
        }
        else
        {
            float _1401;
            float _1403;
            float _1405;
            float _1559 = 0.0;
            float _1560 = 0.0;
            float _1561 = 0.0;
            uint _1562 = 0u;
            uint _1571;
            bool _1572;
            for (;;)
            {
                _1571 = texelFetch(g_lightClassification, int((((_1303 << 5u) + (_1289 << 9u)) + (_1562 << 2u)) >> 2u)).x;
                _1572 = _1571 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                if (_1572)
                {
                    frontier_phi_58_pred = _1561;
                    frontier_phi_58_pred_1 = _1560;
                    frontier_phi_58_pred_2 = _1559;
                }
                else
                {
                    float _1725;
                    float _1726;
                    float _1727;
                    uint _1728;
                    _1725 = _1559;
                    _1726 = _1560;
                    _1727 = _1561;
                    _1728 = _1571;
                    float _1637;
                    float _1638;
                    float _1639;
                    for (;;)
                    {
                        uint _1732 = uint(findLSB(_1728)) + (_1562 << 5u);
                        uint _1729 = (_1728 + 4294967295u) & _1728;
                        uint _1734 = _1732 * 48u;
                        vec4 _1748 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1734)).x, texelFetch(g_PointLightRenderingBuffer, int(_1734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1734 + 3u)).x));
                        uint _1765 = (_1732 * 48u) + 8u;
                        vec3 _1776 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1765)).x, texelFetch(g_PointLightRenderingBuffer, int(_1765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1765 + 2u)).x));
                        float _1780 = _1748.x - _1263;
                        float _1781 = _1748.y - _1264;
                        float _1782 = _1748.z - _1265;
                        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
                        float _1786 = inversesqrt(_1783);
                        float _1795 = 1.0 - (_1783 * _1748.w);
                        float _2426 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
                        float _1797 = sqrt(_1783) * uintBitsToFloat(uvec4(_1755, _1756, _1757, texelFetch(g_PointLightRenderingBuffer, int(((_1732 * 48u) + 4u) + 3u)).x)).w;
                        float _1800 = 1.39999997615814208984375 / (_1797 + 1.39999997615814208984375);
                        float _1801 = _1800 * _1800;
                        float _1804 = ((1.0 - _1801) * dot(vec3(0.0), vec3(_1786 * _1780, _1786 * _1781, _1786 * _1782))) + _1801;
                        float _1806 = (-0.0) - _1263;
                        float _1807 = (-0.0) - _1264;
                        float _1808 = (-0.0) - _1265;
                        float _1812 = inversesqrt(dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808)));
                        float _1816 = dot(vec3(0.0), vec3(_1812 * _1806, _1812 * _1807, _1812 * _1808));
                        float _2437 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
                        float _2448 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
                        float _1820 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
                        float _1824 = (0.5 / (((isnan(1.0) ? _2437 : (isnan(_2437) ? 1.0 : min(_2437, 1.0))) + 9.9999999392252902907785028219223e-09) + _1820)) * _1820;
                        float _2459 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
                        float _1833 = (((isnan(1.0) ? _2459 : (isnan(_2459) ? 1.0 : min(_2459, 1.0))) * 3.1415927410125732421875) / (((_1797 * _1797) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0)));
                        _1637 = (_1833 * _1776.x) + _1725;
                        _1638 = (_1833 * _1776.y) + _1726;
                        _1639 = (_1833 * _1776.z) + _1727;
                        if (_1729 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1725 = _1637;
                            _1726 = _1638;
                            _1727 = _1639;
                            _1728 = _1729;
                        }
                    }
                    frontier_phi_58_pred = _1639;
                    frontier_phi_58_pred_1 = _1638;
                    frontier_phi_58_pred_2 = _1637;
                }
                _1405 = frontier_phi_58_pred;
                _1403 = frontier_phi_58_pred_1;
                _1401 = frontier_phi_58_pred_2;
                uint _1563 = _1562 + 1u;
                if (_1563 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1559 = _1401;
                    _1560 = _1403;
                    _1561 = _1405;
                    _1562 = _1563;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1400 = _1401;
            _1402 = _1403;
            _1404 = _1405;
        }
        uvec4 _1408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1409 = _1408.z;
        uint _1411 = (_1409 >> 8u) & 15u;
        float _1539;
        float _1541;
        float _1543;
        if (((4294967295u << _1411) & _1310) == 0u)
        {
            _1539 = _1400;
            _1541 = _1402;
            _1543 = _1404;
        }
        else
        {
            float _1555 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            if (_1411 < ((_1409 >> 12u) & 15u))
            {
                float _1540;
                float _1542;
                float _1544;
                float _1711 = _1400;
                float _1712 = _1402;
                float _1713 = _1404;
                uint _1714 = _1411;
                uint _1723;
                bool _1724;
                for (;;)
                {
                    _1723 = texelFetch(g_lightClassification, int((((_1303 << 5u) + (_1289 << 9u)) + (_1714 << 2u)) >> 2u)).x;
                    _1724 = _1723 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    if (_1724)
                    {
                        frontier_phi_67_pred = _1713;
                        frontier_phi_67_pred_1 = _1712;
                        frontier_phi_67_pred_2 = _1711;
                    }
                    else
                    {
                        float _1859;
                        float _1860;
                        float _1861;
                        float _2081;
                        float _2082;
                        float _2083;
                        float _1869 = _1711;
                        float _1870 = _1712;
                        float _1871 = _1713;
                        uint _1872 = _1723;
                        uint _1873;
                        uint _1883;
                        vec4 _1898;
                        float _1899;
                        vec3 _1911;
                        vec4 _1926;
                        vec4 _1942;
                        float _1988;
                        bool _1989;
                        for (;;)
                        {
                            _1883 = ((_1714 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1872));
                            _1873 = (_1872 + 4294967295u) & _1872;
                            uint _1885 = _1883 * 40u;
                            _1898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1885 + 3u)).x));
                            _1899 = _1898.w;
                            uint _1901 = (_1883 * 40u) + 8u;
                            _1911 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1901 + 2u)).x));
                            uint _1913 = (_1883 * 40u) + 16u;
                            _1926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1913 + 3u)).x));
                            uint _1929 = (_1883 * 40u) + 20u;
                            _1942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1929 + 3u)).x));
                            uint _1944 = (_1883 * 40u) + 24u;
                            vec4 _1957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1944 + 3u)).x));
                            uint _1963 = (_1883 * 40u) + 28u;
                            vec4 _1976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1963 + 3u)).x));
                            _1988 = fma(_1265, _1976.z, fma(_1264, _1976.y, _1976.x * _1263)) + _1976.w;
                            _1989 = !((fma(_1265, _1957.z, fma(_1264, _1957.y, _1957.x * _1263)) + _1957.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            if (_1989)
                            {
                                float _2023 = _1898.x - _1263;
                                float _2024 = _1898.y - _1264;
                                float _2025 = _1898.z - _1265;
                                float _2026 = dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025));
                                float _2029 = inversesqrt(_2026);
                                float _2036 = 1.0 - (_2026 / (_1899 * _1899));
                                float _2470 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
                                float _2038 = sqrt(_2026) * uintBitsToFloat(uvec4(_1992, _1993, _1994, texelFetch(g_SpotLightRenderingBuffer, int(((_1883 * 40u) + 4u) + 3u)).x)).w;
                                float _2040 = 1.39999997615814208984375 / (_2038 + 1.39999997615814208984375);
                                float _2041 = _2040 * _2040;
                                float _2044 = (fma(_1265, _1926.z, fma(_1264, _1926.y, _1926.x * _1263)) + _1926.w) / _1988;
                                float _2045 = (fma(_1265, _1942.z, fma(_1264, _1942.y, _1942.x * _1263)) + _1942.w) / _1988;
                                float _2049 = 1.0 - dot(vec2(_2044, _2045), vec2(_2044, _2045));
                                float _2481 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
                                float _2057 = dot(vec3(0.0), vec3((-0.0) - (_1263 * _1555), (-0.0) - (_1264 * _1555), (-0.0) - (_1265 * _1555)));
                                float _2492 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
                                float _2065 = ((1.0 - _2041) * dot(vec3(0.0), vec3(_2029 * _2023, _2029 * _2024, _2029 * _2025))) + _2041;
                                float _2503 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
                                float _2066 = isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0));
                                float _2070 = (0.5 / (((isnan(1.0) ? _2492 : (isnan(_2492) ? 1.0 : min(_2492, 1.0))) + 9.9999999392252902907785028219223e-09) + _2066)) * _2066;
                                float _2514 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
                                float _2077 = ((isnan(1.0) ? _2481 : (isnan(_2481) ? 1.0 : min(_2481, 1.0))) * (isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0)))) * (((isnan(1.0) ? _2514 : (isnan(_2514) ? 1.0 : min(_2514, 1.0))) * 3.1415927410125732421875) / (((_2038 * _2038) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2077 * _1911.z;
                                frontier_phi_73_pred_1 = _2077 * _1911.y;
                                frontier_phi_73_pred_2 = _2077 * _1911.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                            }
                            _2083 = frontier_phi_73_pred;
                            _2082 = frontier_phi_73_pred_1;
                            _2081 = frontier_phi_73_pred_2;
                            _1859 = _2081 + _1869;
                            _1860 = _2082 + _1870;
                            _1861 = _2083 + _1871;
                            if (_1873 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1869 = _1859;
                                _1870 = _1860;
                                _1871 = _1861;
                                _1872 = _1873;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _1861;
                        frontier_phi_67_pred_1 = _1860;
                        frontier_phi_67_pred_2 = _1859;
                    }
                    _1544 = frontier_phi_67_pred;
                    _1542 = frontier_phi_67_pred_1;
                    _1540 = frontier_phi_67_pred_2;
                    uint _1715 = _1714 + 1u;
                    if (_1715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1711 = _1540;
                        _1712 = _1542;
                        _1713 = _1544;
                        _1714 = _1715;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1542;
                frontier_phi_49_50_ladder_1 = _1544;
                frontier_phi_49_50_ladder_2 = _1540;
            }
            else
            {
                frontier_phi_49_50_ladder = _1402;
                frontier_phi_49_50_ladder_1 = _1404;
                frontier_phi_49_50_ladder_2 = _1400;
            }
            _1539 = frontier_phi_49_50_ladder_2;
            _1541 = frontier_phi_49_50_ladder;
            _1543 = frontier_phi_49_50_ladder_1;
        }
        float _1548 = isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0));
        _1323 = ((_1539 * 0.039999999105930328369140625) * _1548) + _1204;
        _1325 = ((_1541 * 0.039999999105930328369140625) * _1548) + _1205;
        _1327 = ((_1543 * 0.039999999105930328369140625) * _1548) + _1206;
    }
    else
    {
        _1323 = _1204;
        _1325 = _1205;
        _1327 = _1206;
    }
    uint _1334 = (_1070 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1349 = ((cbMtdParam._m0[9u].x * _365.x) * cbInstanceData._m0[_1334].x) + ((_1323 + ((isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0))) * _812)) * cbPerFrame._m0[3u].x);
    float _1350 = ((cbMtdParam._m0[9u].y * _365.y) * cbInstanceData._m0[_1334].y) + ((_1325 + ((isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0))) * _812)) * cbPerFrame._m0[3u].x);
    float _1351 = ((cbMtdParam._m0[9u].z * _365.z) * cbInstanceData._m0[_1334].z) + ((_1327 + ((isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0))) * _812)) * cbPerFrame._m0[3u].x);
    uint _1355 = _1070 + 6u;
    float _1363 = _407 / cbSceneParam._m0[86u].x;
    float _1364 = _408 / cbSceneParam._m0[86u].y;
    vec4 _1378 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1363, _1364, (log2((isnan(cbSceneParam._m0[77u].w) ? _394 : (isnan(_394) ? cbSceneParam._m0[77u].w : min(_394, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1380 = _1378.x;
    float _1381 = _1378.y;
    float _1382 = _1378.z;
    float _1383 = _1378.w;
    float _1457;
    float _1459;
    float _1461;
    float _1463;
    if (_394 > cbSceneParam._m0[78u].w)
    {
        float _1419 = isnan(_394) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _394 : min(cbSceneParam._m0[80u].w, _394));
        float _1420 = _1419 / _394;
        float _1431 = _1420 * _248;
        float _1432 = _249 * _1420;
        float _1433 = (-0.0) - _1432;
        float _1434 = _1420 * _250;
        float _1436 = (cbSceneParam._m0[77u].w * _1433) / _1419;
        float _1437 = _1436 + cbSceneParam._m0[79u].w;
        float _1438 = cbSceneParam._m0[79u].w - _1432;
        float _1444 = sqrt(((_1431 * _1431) + (_1432 * _1432)) + (_1434 * _1434));
        float _1447 = (1.0 - (cbSceneParam._m0[77u].w / _1419)) * _1444;
        float _1453 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1455 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1647;
        if (abs((_1433 - _1436) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1647 = ((((_1437 > 0.0) ? exp2(_1453 * _1437) : (2.0 - exp2(_1455 * _1437))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1447;
        }
        else
        {
            float _1585 = 1.0 / cbSceneParam._m0[80u].x;
            float _1586 = isnan(_1438) ? _1437 : (isnan(_1437) ? _1438 : max(_1437, _1438));
            float _1587 = isnan(_1438) ? _1437 : (isnan(_1437) ? _1438 : min(_1437, _1438));
            float _1596 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : min(_1586, 0.0));
            float _1597 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : min(_1587, 0.0));
            _1647 = ((abs(_1444 / _1433) * cbSceneParam._m0[80u].y) * ((((_1596 - _1597) * 2.0) - ((exp2(_1453 * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)))) - exp2(_1453 * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))))) * _1585)) - ((exp2(_1455 * _1596) - exp2(_1455 * _1597)) * _1585))) + (_1447 * cbSceneParam._m0[80u].z);
        }
        vec4 _1649 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1363, _1364, 1.0), 0.0);
        float _1658 = exp2((_1647 * (-1.44269502162933349609375)) * (1.0 - _1649.w));
        float _1659 = log2(_1658);
        float _1675 = log2(_1383);
        _1457 = (exp2(_1675 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1659 * cbSceneParam._m0[78u].x)) * _1649.x) / cbSceneParam._m0[78u].x)) + _1380;
        _1459 = (exp2(_1675 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1659 * cbSceneParam._m0[78u].y)) * _1649.y) / cbSceneParam._m0[78u].y)) + _1381;
        _1461 = (exp2(_1675 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1659 * cbSceneParam._m0[78u].z)) * _1649.z) / cbSceneParam._m0[78u].z)) + _1382;
        _1463 = _1658 * _1383;
    }
    else
    {
        _1457 = _1380;
        _1459 = _1381;
        _1461 = _1382;
        _1463 = _1383;
    }
    float _1475 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1476 = _1475 == 3.0;
    float _1478 = log2(_1463);
    float _1485 = exp2(_1478 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    float _1486 = exp2(_1478 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    float _1487 = exp2(_1478 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    float _1496 = (_1475 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1496 * (_1476 ? _1485 : (_1485 + (cbSceneParam._m0[72u].w * _1457)));
    SV_Target.y = _1496 * (_1476 ? _1486 : (_1486 + (cbSceneParam._m0[72u].w * _1459)));
    SV_Target.z = _1496 * (_1476 ? _1487 : (_1487 + (cbSceneParam._m0[72u].w * _1461)));
    SV_Target.w = cbInstanceData._m0[_1355].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1355].w;
}


