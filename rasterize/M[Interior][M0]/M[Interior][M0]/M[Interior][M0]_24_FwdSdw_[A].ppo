#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1051;
float _3446;
float _3447;
float _3448;
float _3449;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _327 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _331 = _327.z;
    float _354 = (_327.x * 2.0) + (-1.0);
    float _356 = (_327.y * 2.0) + (-1.0);
    float _359 = _354 - (_354 * _292);
    float _360 = _356 - (_356 * _292);
    float _369 = cbMtdParam._m0[22u].y + _265;
    float _370 = cbMtdParam._m0[22u].z + _266;
    float _371 = cbMtdParam._m0[22u].w + _267;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_194, _195, _196));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_208, _209, _210));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _394 = _391 * _387;
    float _397 = ((_391 * _385) + (_359 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _398 = ((_391 * _386) + (_360 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _399 = fract(TEXCOORD.x);
    float _400 = fract(TEXCOORD.y);
    float _406;
    if (_397 > 0.0)
    {
        _406 = (1.0 - _399) / _397;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_397 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _399) / _397;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _406 = frontier_phi_3_2_ladder;
    }
    float _414;
    if (_398 > 0.0)
    {
        _414 = (1.0 - _400) / _398;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_398 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _400) / _398;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _414 = frontier_phi_7_6_ladder;
    }
    float _418 = (_394 > 0.0) ? (cbMtdParam._m0[15u].x / _394) : 5000.0;
    float _419 = isnan(_414) ? _406 : (isnan(_406) ? _414 : min(_406, _414));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _431 = ((_420 * _394) + _424) / _424;
    vec4 _456 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_399 + (-0.5)) + (_420 * _397)) / _431) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_400 + (-0.5)) + (_420 * _398)) / _431) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _476 = 0.5 - (_292 * 0.5);
    float _483 = ((((_458 - (_458 * _292)) * cbMtdParam._m0[9u].x) - _305) * _476) + _305;
    float _484 = ((((_459 - (_459 * _292)) * cbMtdParam._m0[9u].y) - _307) * _476) + _307;
    float _485 = (((cbMtdParam._m0[9u].z * (_460 - (_460 * _292))) - _309) * _476) + _309;
    vec4 _497 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _501 = _497.z;
    float _504 = (_497.x * 2.0) + (-1.0);
    float _505 = (_497.y * 2.0) + (-1.0);
    float _506 = dot(vec2(_504, _505), vec2(_504, _505));
    float _3468 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))));
    float _512 = _501 * _292;
    float _519 = (cbMtdParam._m0[15u].w * ((_331 - _512) + ((_501 - _331) * _292))) + _512;
    float _523 = (cbMtdParam._m0[16u].x * _359) + _504;
    float _524 = (cbMtdParam._m0[16u].x * _360) + _505;
    float _527 = fma(_511, _201, fma(_524, _208, _523 * _194));
    float _530 = fma(_511, _202, fma(_524, _209, _523 * _195));
    float _533 = fma(_511, _203, fma(_524, _210, _523 * _196));
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    float _538 = _537 * _527;
    float _539 = _537 * _530;
    float _540 = _537 * _533;
    float _3479 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _541 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3501 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3512 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _560 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _565 = _265 * _564;
    float _566 = _266 * _564;
    float _567 = _267 * _564;
    vec4 _572 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _574 = _572.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _732 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _738 = (cbMatDynParam._m0[5u].x * _732) + cbMatDynParam._m0[5u].y;
        float _3523 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _743 = (cbMatDynParam._m0[5u].z * _732) + cbMatDynParam._m0[5u].w;
        float _3534 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) - _739)) + _739) < ((_574 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _587 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _588 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _607 = fma(_540, cbSceneParam._m0[5u].z, fma(_539, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _538));
    float _610 = fma(_540, cbSceneParam._m0[6u].z, fma(_539, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _538));
    float _613 = fma(_540, cbSceneParam._m0[7u].z, fma(_539, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _538));
    uint _626 = uint(roundEven(NORMAL.w)) * 13u;
    uint _628 = _626 + 9u;
    uint _629 = _628 + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3545 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    vec4 _649 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _587, cbSceneParam._m0[86u].y * _588));
    float _652 = _649.x * TEXCOORD.z;
    float _653 = dot(vec3(_538, _539, _540), vec3(_565, _566, _567));
    float _656 = _653 * 2.0;
    float _660 = (_656 * _538) - _565;
    float _661 = (_656 * _539) - _566;
    float _662 = (_656 * _540) - _567;
    float _666 = abs(dot(vec3(_565, _566, _567), vec3(_538, _539, _540)));
    float _3578 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _668 = sqrt(_541);
    float _681 = exp2((_668 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_668 * 3.0));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1050;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _777 = fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713));
        float _781 = fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713));
        float _785 = fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713));
        float _808 = _713 + _538;
        float _809 = _717 + _539;
        float _810 = _721 + _540;
        float _820 = fma(_810, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808)) - _777;
        float _821 = fma(_810, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808)) - _781;
        float _822 = fma(_810, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808)) - _785;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_777 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_781 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[34u].z) + ((((((_785 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _878 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_844.x + (-0.5));
        float _880 = _878 * (_844.y + (-0.5));
        float _881 = _878 * (_844.z + (-0.5));
        float _888 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_851.x + (-0.5));
        float _890 = _888 * (_851.y + (-0.5));
        float _891 = _888 * (_851.z + (-0.5));
        float _898 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_858.x + (-0.5));
        float _900 = _898 * (_858.y + (-0.5));
        float _901 = _898 * (_858.z + (-0.5));
        float _908 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_865.x + (-0.5));
        float _910 = _908 * (_865.y + (-0.5));
        float _911 = _908 * (_865.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _932 = (dot(vec3(_538, _539, _540), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _942 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3626 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_944 + 1.0))) + _949) * _912;
        float _959 = _880 * 0.5;
        float _960 = _890 * 0.5;
        float _961 = _900 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_538, _539, _540), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3659 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_986 + 1.0))) + _991) * _913;
        float _1001 = _881 * 0.5;
        float _1002 = _891 * 0.5;
        float _1003 = _901 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_538, _539, _540), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3692 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1028 + 1.0))) + _1033) * _914;
        _1050 = _881;
        _1052 = _880;
        _1053 = _879;
        _1054 = _891;
        _1055 = _890;
        _1056 = _889;
        _1057 = _901;
        _1058 = _900;
        _1059 = _899;
        _1060 = _914;
        _1061 = _913;
        _1062 = _912;
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = _1051;
        _1052 = _1051;
        _1053 = _1051;
        _1054 = _1051;
        _1055 = _1051;
        _1056 = _1051;
        _1057 = _1051;
        _1058 = _1051;
        _1059 = _1051;
        _1060 = _1051;
        _1061 = _1051;
        _1062 = _1051;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1094 = fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713));
        float _1098 = fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713));
        float _1102 = fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713));
        float _1125 = _713 + _538;
        float _1126 = _717 + _539;
        float _1127 = _721 + _540;
        float _1137 = fma(_1127, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125)) - _1094;
        float _1138 = fma(_1127, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125)) - _1098;
        float _1139 = fma(_1127, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125)) - _1102;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1094 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1098 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[35u].z) + ((((((_1102 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1193 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1160.x + (-0.5));
        float _1195 = _1193 * (_1160.y + (-0.5));
        float _1196 = _1193 * (_1160.z + (-0.5));
        float _1203 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1167.x + (-0.5));
        float _1205 = _1203 * (_1167.y + (-0.5));
        float _1206 = _1203 * (_1167.z + (-0.5));
        float _1213 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1174.x + (-0.5));
        float _1215 = _1213 * (_1174.y + (-0.5));
        float _1216 = _1213 * (_1174.z + (-0.5));
        float _1223 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1181.x + (-0.5));
        float _1225 = _1223 * (_1181.y + (-0.5));
        float _1226 = _1223 * (_1181.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_538, _539, _540), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3755 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1257 + 1.0))) + _1262) * _1227;
        float _1272 = _1195 * 0.5;
        float _1273 = _1205 * 0.5;
        float _1274 = _1215 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_538, _539, _540), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3788 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1299 + 1.0))) + _1304) * _1228;
        float _1314 = _1196 * 0.5;
        float _1315 = _1206 * 0.5;
        float _1316 = _1216 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_538, _539, _540), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3821 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1341 + 1.0))) + _1346) * _1229;
        _1363 = _1196;
        _1364 = _1195;
        _1365 = _1194;
        _1366 = _1206;
        _1367 = _1205;
        _1368 = _1204;
        _1369 = _1216;
        _1370 = _1215;
        _1371 = _1214;
        _1372 = _1229;
        _1373 = _1228;
        _1374 = _1227;
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1051;
        _1364 = _1051;
        _1365 = _1051;
        _1366 = _1051;
        _1367 = _1051;
        _1368 = _1051;
        _1369 = _1051;
        _1370 = _1051;
        _1371 = _1051;
        _1372 = _1051;
        _1373 = _1051;
        _1374 = _1051;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1063)) + _1063;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1064)) + _1064;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1065)) + _1065;
    float _1410 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1387));
    float _1431 = _660 * 0.5;
    float _1432 = _661 * 0.5;
    float _1433 = _662 * 0.5;
    float _1434 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1437 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1440 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1474;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1447 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1050, _1054, _1057, _1060));
        float _1451 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1455 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1462 = dot(vec4(cbModelParam._m0[39u]), vec4(_1431, _1432, _1433, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1485;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1476 = dot(vec4(cbModelParam._m0[40u]), vec4(_1431, _1432, _1433, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1489 = (_1485 * cbModelParam._m0[1u].x) + (_1474 * (1.0 - cbModelParam._m0[1u].x));
    float _1499 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _541);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1499 : min(cbModelParam._m0[25u].z, _1499));
    float _1581;
    float _1583;
    float _1585;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1548 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1552 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1556 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1559 = fma(_662, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660));
        float _1562 = fma(_662, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660));
        float _1565 = fma(_662, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660));
        float _1593;
        if (_1559 > 0.0)
        {
            _1593 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1593 = frontier_phi_25_23_ladder;
        }
        float _1762;
        if (_1562 > 0.0)
        {
            _1762 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1762 = frontier_phi_34_30_ladder;
        }
        float _2206;
        if (_1565 > 0.0)
        {
            _2206 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2206 = frontier_phi_46_41_ladder;
        }
        float _2208 = isnan(_1762) ? _1593 : (isnan(_1593) ? _1762 : min(_1593, _1762));
        float _2209 = isnan(_2206) ? _2208 : (isnan(_2208) ? _2206 : min(_2208, _2206));
        float _2213 = (_2209 * _1559) + _1548;
        float _2214 = (_2209 * _1562) + _1552;
        float _2215 = (_2209 * _1565) + _1556;
        float _2216 = _2209 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2216;
        float _2220 = _2216 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 > _2220) || ((_2214 < _2218) || ((_2213 < _2218) || (_2213 > _2220))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2215, cbModelParam._m0[9u].z, fma(_2214, cbModelParam._m0[9u].y, _2213 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2215, cbModelParam._m0[10u].z, fma(_2214, cbModelParam._m0[10u].y, _2213 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2215, cbModelParam._m0[11u].z, fma(_2214, cbModelParam._m0[11u].y, _2213 * cbModelParam._m0[11u].x))), _1500);
            frontier_phi_24_46_ladder = _2449.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2449.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2449.x * cbModelParam._m0[1u].y;
        }
        _1581 = frontier_phi_24_46_ladder_2;
        _1583 = frontier_phi_24_46_ladder_1;
        _1585 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_660, _661, _662), _1500);
        _1581 = _1569.x * cbModelParam._m0[1u].y;
        _1583 = _1569.y * cbModelParam._m0[1u].y;
        _1585 = _1569.z * cbModelParam._m0[1u].y;
    }
    float _1589 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _541);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1589 : min(cbModelParam._m0[25u].w, _1589));
    float _1679;
    float _1681;
    float _1683;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1643 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1647 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1651 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1654 = fma(_662, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660));
        float _1657 = fma(_662, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660));
        float _1660 = fma(_662, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660));
        float _1767;
        if (_1654 > 0.0)
        {
            _1767 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1767 = frontier_phi_36_32_ladder;
        }
        float _2233;
        if (_1657 > 0.0)
        {
            _2233 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2233 = frontier_phi_48_43_ladder;
        }
        float _2578;
        if (_1660 > 0.0)
        {
            _2578 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2578 = frontier_phi_60_55_ladder;
        }
        float _2580 = isnan(_2233) ? _1767 : (isnan(_1767) ? _2233 : min(_1767, _2233));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1654) + _1643;
        float _2586 = (_2581 * _1657) + _1647;
        float _2587 = (_2581 * _1660) + _1651;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1590);
            frontier_phi_33_60_ladder = _2724.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2724.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2724.x * cbModelParam._m0[1u].z;
        }
        _1679 = frontier_phi_33_60_ladder_2;
        _1681 = frontier_phi_33_60_ladder_1;
        _1683 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_660, _661, _662), _1590);
        _1679 = _1663.x * cbModelParam._m0[1u].z;
        _1681 = _1663.y * cbModelParam._m0[1u].z;
        _1683 = _1663.z * cbModelParam._m0[1u].z;
    }
    float _1695 = ((((1.0 - _681) * ((_668 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_681 * _668)) * _652;
    float _1696 = _1695 * ((cbModelParam._m0[1u].w * (_1679 - _1581)) + _1581);
    float _1697 = _1695 * ((cbModelParam._m0[1u].w * (_1681 - _1583)) + _1583);
    float _1698 = _1695 * ((cbModelParam._m0[1u].w * (_1683 - _1585)) + _1585);
    float _1701 = fma(_1698, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1696 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1698, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1696 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1698, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, _1696 * cbSceneParam._m0[91u].x));
    float _1741 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1745 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1749 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1753 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1754 = _1741 / _1753;
    float _1755 = _1745 / _1753;
    float _1756 = _1749 / _1753;
    float _1903;
    float _1904;
    float _1905;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1783 = ((uint(_1756 > cbSceneParam._m0[59u].y) + uint(_1756 > cbSceneParam._m0[59u].x)) + uint(_1756 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1784 = _1783 + 43u;
        uint _1792 = _1783 + 44u;
        uint _1800 = _1783 + 45u;
        uint _1808 = _1783 + 46u;
        float _1819 = fma(_1753, cbSceneParam._m0[_1784].w, fma(_1749, cbSceneParam._m0[_1784].z, fma(_1745, cbSceneParam._m0[_1784].y, _1741 * cbSceneParam._m0[_1784].x)));
        float _1823 = fma(_1753, cbSceneParam._m0[_1792].w, fma(_1749, cbSceneParam._m0[_1792].z, fma(_1745, cbSceneParam._m0[_1792].y, _1741 * cbSceneParam._m0[_1792].x)));
        float _1831 = fma(_1753, cbSceneParam._m0[_1808].w, fma(_1749, cbSceneParam._m0[_1808].z, fma(_1745, cbSceneParam._m0[_1808].y, _1741 * cbSceneParam._m0[_1808].x)));
        float _1836 = cbSceneParam._m0[33u].z * _1831;
        float _1838 = cbSceneParam._m0[33u].w * _1831;
        float _1841 = fma(_1753, cbSceneParam._m0[_1800].w, fma(_1749, cbSceneParam._m0[_1800].z, fma(_1745, cbSceneParam._m0[_1800].y, _1741 * cbSceneParam._m0[_1800].x))) / _1831;
        float _1889 = (cbSceneParam._m0[33u].x - sqrt(((_1755 * _1755) + (_1754 * _1754)) + (_1756 * _1756))) * cbSceneParam._m0[33u].y;
        float _3947 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1896 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1836 + _1819) / _1831, (_1838 + _1823) / _1831), _1841), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1838 + _1819) / _1831, (_1823 - _1836) / _1831), _1841), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1819 - _1836) / _1831, (_1823 - _1838) / _1831), _1841), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1819 - _1838) / _1831, (_1836 + _1823) / _1831), _1841), 0.0)).x), vec4(0.25)));
        _1903 = 1.0 - (_1896 * cbSceneParam._m0[34u].x);
        _1904 = 1.0 - (_1896 * cbSceneParam._m0[34u].y);
        _1905 = 1.0 - (_1896 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1903 = 1.0;
        _1904 = 1.0;
        _1905 = 1.0;
    }
    float _1969;
    float _1971;
    float _1973;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1957 = fma(_1753, cbSceneParam._m0[63u].w, fma(_1749, cbSceneParam._m0[63u].z, fma(_1745, cbSceneParam._m0[63u].y, _1741 * cbSceneParam._m0[63u].x)));
        float _1958 = fma(_1753, cbSceneParam._m0[60u].w, fma(_1749, cbSceneParam._m0[60u].z, fma(_1745, cbSceneParam._m0[60u].y, _1741 * cbSceneParam._m0[60u].x))) / _1957;
        float _1959 = fma(_1753, cbSceneParam._m0[61u].w, fma(_1749, cbSceneParam._m0[61u].z, fma(_1745, cbSceneParam._m0[61u].y, _1741 * cbSceneParam._m0[61u].x))) / _1957;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1958 >= cbSceneParam._m0[64u].x) && (_1959 >= cbSceneParam._m0[64u].y)) && (_1958 <= cbSceneParam._m0[64u].z)) && (_1959 <= cbSceneParam._m0[64u].w))
        {
            float _2246 = fma(_1753, cbSceneParam._m0[62u].w, fma(_1749, cbSceneParam._m0[62u].z, fma(_1745, cbSceneParam._m0[62u].y, _1741 * cbSceneParam._m0[62u].x))) / _1957;
            float _2250 = isnan(cbSceneParam._m0[41u].w) ? _2246 : (isnan(_2246) ? cbSceneParam._m0[41u].w : max(_2246, cbSceneParam._m0[41u].w));
            float _2293 = (cbSceneParam._m0[33u].x - sqrt(((_1755 * _1755) + (_1754 * _1754)) + (_1756 * _1756))) * cbSceneParam._m0[33u].y;
            float _3963 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
            float _2300 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1958, cbSceneParam._m0[33u].w + _1959), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1958, _1959 - cbSceneParam._m0[33u].z), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1958 - cbSceneParam._m0[33u].z, _1959 - cbSceneParam._m0[33u].w), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1958 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1959), _2250), 0.0)).x), vec4(0.25)));
            float _2304 = 1.0 - (_2300 * cbSceneParam._m0[34u].x);
            float _2305 = 1.0 - (_2300 * cbSceneParam._m0[34u].y);
            float _2306 = 1.0 - (_2300 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2306) ? _1905 : (isnan(_1905) ? _2306 : min(_1905, _2306));
            frontier_phi_45_44_ladder_1 = isnan(_2305) ? _1904 : (isnan(_1904) ? _2305 : min(_1904, _2305));
            frontier_phi_45_44_ladder_2 = isnan(_2304) ? _1903 : (isnan(_1903) ? _2304 : min(_1903, _2304));
        }
        else
        {
            frontier_phi_45_44_ladder = _1905;
            frontier_phi_45_44_ladder_1 = _1904;
            frontier_phi_45_44_ladder_2 = _1903;
        }
        _1969 = frontier_phi_45_44_ladder_2;
        _1971 = frontier_phi_45_44_ladder_1;
        _1973 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1969 = _1903;
        _1971 = _1904;
        _1973 = _1905;
    }
    uvec4 _1978 = floatBitsToUint(cbInstanceData._m0[_626 + 5u]);
    uint _1980 = _1978.x * 14u;
    uint _1981 = _1980 + 13u;
    float _1986 = _652 + (-1.0);
    float _1989 = (cbLight._m0[_1981].x * _1986) + 1.0;
    float _1990 = (cbLight._m0[_1981].y * _1986) + 1.0;
    uint _1991 = _1980 + 5u;
    float _1997 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2001 = _1980 + 4u;
    float _2010 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2014 = _1980 | 1u;
    float _2025 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_538, _539, _540));
    float _2028 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_538, _539, _540));
    float _3999 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _4010 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2033 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.3183098733425140380859375;
    float _2035 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * 0.3183098733425140380859375;
    float _2042 = ((cbLight._m0[_1991].x * _1997) * _2035) + (((cbLight._m0[_2001].x * _1969) * _2010) * _2033);
    float _2043 = ((_1997 * cbLight._m0[_1991].y) * _2035) + (((cbLight._m0[_2001].y * _1971) * _2010) * _2033);
    float _2044 = ((_1997 * cbLight._m0[_1991].z) * _2035) + (((cbLight._m0[_2001].z * _1973) * _2010) * _2033);
    uint _2046 = _1980 + 8u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _541) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1980].x + _565;
    float _2062 = cbLight._m0[_1980].y + _566;
    float _2063 = cbLight._m0[_1980].z + _567;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_1980].xyz));
    float _4021 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _2075 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _2076 = dot(vec3(_538, _539, _540), vec3(_2068, _2069, _2070));
    float _4043 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2068, _2069, _2070));
    float _4054 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2060 * _2060;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2099 = (exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2100 = 1.0 - _2060;
    float _2111 = (0.5 / (((_2075 * ((_2074 * _2100) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2100) + _2060) * _2074))) * _2074;
    float _4065 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    uint _2127 = _1980 + 9u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _541) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_2014].x + _565;
    float _2141 = cbLight._m0[_2014].y + _566;
    float _2142 = cbLight._m0[_2014].z + _567;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_2014].xyz));
    float _4076 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _2154 = dot(vec3(_538, _539, _540), vec3(_2147, _2148, _2149));
    float _4087 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _2158 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2147, _2148, _2149));
    float _4098 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2162 = _2139 * _2139;
    float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
    float _2175 = (exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2176 = 1.0 - _2139;
    float _2186 = (0.5 / (((_2075 * ((_2153 * _2176) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2176) + _2139) * _2153))) * _2153;
    float _4109 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
    float _2198 = (((_2175 * cbLight._m0[_2127].x) * _2188) * _1997) + ((((cbLight._m0[_2046].x * _1969) * _2099) * _2113) * _2010);
    float _2199 = (((_2175 * cbLight._m0[_2127].y) * _2188) * _1997) + ((((cbLight._m0[_2046].y * _1971) * _2099) * _2113) * _2010);
    float _2200 = (((_2175 * cbLight._m0[_2127].z) * _2188) * _1997) + ((((cbLight._m0[_2046].z * _1973) * _2099) * _2113) * _2010);
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    if (_1978.y == 0u)
    {
        uvec4 _2318 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2319 = _2318.x;
        uint _2330 = uint((float(_2318.y) * floor(float(uint(cbSceneParam._m0[85u].y * _588) / _2319))) + floor(float(uint(cbSceneParam._m0[85u].x * _587) / _2319)));
        float _2340 = (log2(_1756 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2341 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        uint _2344 = uint(isnan(14.0) ? _2341 : (isnan(_2341) ? 14.0 : min(_2341, 14.0)));
        uvec4 _2349 = texelFetch(g_lightClusterGridBuffer, int(((_2344 << 2u) + (_2330 << 6u)) >> 2u));
        uint _2350 = _2349.x;
        uint _2351 = _2318.z;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        if (((((1u << ((_2351 >> 4u) & 15u)) + 4294967295u) & _2350) == 0u) || ((_2351 & 240u) == 0u))
        {
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
        }
        else
        {
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            uint _2642 = 0u;
            uint _2651;
            bool _2652;
            for (;;)
            {
                _2651 = texelFetch(g_lightClassification, int((((_2344 << 5u) + (_2330 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                _2652 = _2651 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2652)
                {
                    frontier_phi_71_pred = _2639;
                    frontier_phi_71_pred_1 = _2638;
                    frontier_phi_71_pred_2 = _2637;
                    frontier_phi_71_pred_3 = _2636;
                    frontier_phi_71_pred_4 = _2640;
                    frontier_phi_71_pred_5 = _2641;
                }
                else
                {
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    uint _2808;
                    _2802 = _2636;
                    _2803 = _2637;
                    _2804 = _2638;
                    _2805 = _2639;
                    _2806 = _2640;
                    _2807 = _2641;
                    _2808 = _2651;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    for (;;)
                    {
                        uint _2812 = uint(findLSB(_2808)) + (_2642 << 5u);
                        uint _2809 = (_2808 + 4294967295u) & _2808;
                        uint _2814 = _2812 * 48u;
                        vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 3u)).x));
                        uint _2834 = (_2812 * 48u) + 4u;
                        vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2853 = (_2812 * 48u) + 8u;
                        vec3 _2864 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x));
                        float _2868 = _2828.x - _1754;
                        float _2869 = _2828.y - _1755;
                        float _2870 = _2828.z - _1756;
                        float _2871 = dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870));
                        float _2874 = inversesqrt(_2871);
                        float _2875 = _2874 * _2868;
                        float _2876 = _2874 * _2869;
                        float _2877 = _2874 * _2870;
                        float _2878 = dot(vec3(_607, _610, _613), vec3(_2875, _2876, _2877));
                        float _2883 = 1.0 - (_2871 * _2828.w);
                        float _4130 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2884 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2885 = sqrt(_2871) * _2847.w;
                        float _2888 = 1.39999997615814208984375 / (_2885 + 1.39999997615814208984375);
                        float _2889 = _2888 * _2888;
                        float _2892 = ((1.0 - _2889) * _2878) + _2889;
                        float _2895 = _2885 * _2885;
                        float _2899 = ((isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))) * _2884) / ((_2895 * 0.699999988079071044921875) + 1.0);
                        float _2903 = (-0.0) - _1754;
                        float _2904 = (-0.0) - _1755;
                        float _2905 = (-0.0) - _1756;
                        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
                        float _2910 = _2909 * _2903;
                        float _2911 = _2909 * _2904;
                        float _2912 = _2909 * _2905;
                        float _2919 = exp2(log2(1.0 / ((_2895 * 3.5) + 5.0)) * 0.25);
                        float _2920 = 1.0 - _668;
                        float _2927 = sqrt(1.0 - ((1.0 - (_2920 * _2920)) * (1.0 - (_2919 * _2919))));
                        float _2928 = _2927 * _2927;
                        float _2929 = _2928 * _2928;
                        float _2930 = _2910 + _2875;
                        float _2931 = _2911 + _2876;
                        float _2932 = _2912 + _2877;
                        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                        float _2940 = dot(vec3(_607, _610, _613), vec3(_2910, _2911, _2912));
                        float _4146 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2944 = dot(vec3(_607, _610, _613), vec3(_2936 * _2930, _2936 * _2931, _2936 * _2932));
                        float _4157 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                        float _2951 = ((_2947 * _2947) * (_2929 + (-1.0))) + 1.0;
                        float _2952 = _2888 * _2928;
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2878) + _2953;
                        float _4168 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2958 = 1.0 - _2928;
                        float _2968 = (0.5 / (((_2957 * ((_2943 * _2958) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2957 * _2958) + _2928) * _2943))) * _2957;
                        float _4179 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2979 = (((_2929 * 3.1415927410125732421875) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) / ((_2951 * _2951) * ((_2895 * 2.1991131305694580078125) + 3.141590118408203125))) * _2884;
                        _2732 = (_2899 * _2847.x) + _2805;
                        _2733 = (_2899 * _2847.y) + _2806;
                        _2734 = (_2899 * _2847.z) + _2807;
                        _2729 = (_2979 * _2864.x) + _2802;
                        _2730 = (_2979 * _2864.y) + _2803;
                        _2731 = (_2979 * _2864.z) + _2804;
                        if (_2809 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2802 = _2729;
                            _2803 = _2730;
                            _2804 = _2731;
                            _2805 = _2732;
                            _2806 = _2733;
                            _2807 = _2734;
                            _2808 = _2809;
                        }
                    }
                    frontier_phi_71_pred = _2732;
                    frontier_phi_71_pred_1 = _2731;
                    frontier_phi_71_pred_2 = _2730;
                    frontier_phi_71_pred_3 = _2729;
                    frontier_phi_71_pred_4 = _2733;
                    frontier_phi_71_pred_5 = _2734;
                }
                _2465 = frontier_phi_71_pred;
                _2463 = frontier_phi_71_pred_1;
                _2461 = frontier_phi_71_pred_2;
                _2459 = frontier_phi_71_pred_3;
                _2467 = frontier_phi_71_pred_4;
                _2469 = frontier_phi_71_pred_5;
                uint _2643 = _2642 + 1u;
                if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2636 = _2459;
                    _2637 = _2461;
                    _2638 = _2463;
                    _2639 = _2465;
                    _2640 = _2467;
                    _2641 = _2469;
                    _2642 = _2643;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
        }
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.z;
        uint _2475 = (_2473 >> 8u) & 15u;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        if (((4294967295u << _2475) & _2350) == 0u)
        {
            _2604 = _2458;
            _2606 = _2460;
            _2608 = _2462;
            _2610 = _2464;
            _2612 = _2466;
            _2614 = _2468;
        }
        else
        {
            float _2629 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
            float _2630 = _2629 * _1754;
            float _2631 = _2629 * _1755;
            float _2632 = _2629 * _1756;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2475 < ((_2473 >> 12u) & 15u))
            {
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2785 = _2458;
                float _2786 = _2460;
                float _2787 = _2462;
                float _2788 = _2464;
                float _2789 = _2466;
                float _2790 = _2468;
                uint _2791 = _2475;
                uint _2800;
                bool _2801;
                for (;;)
                {
                    _2800 = texelFetch(g_lightClassification, int((((_2344 << 5u) + (_2330 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                    _2801 = _2800 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2801)
                    {
                        frontier_phi_82_pred = _2788;
                        frontier_phi_82_pred_1 = _2787;
                        frontier_phi_82_pred_2 = _2786;
                        frontier_phi_82_pred_3 = _2785;
                        frontier_phi_82_pred_4 = _2790;
                        frontier_phi_82_pred_5 = _2789;
                    }
                    else
                    {
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3006 = _2785;
                        float _3007 = _2786;
                        float _3008 = _2787;
                        float _3009 = _2788;
                        float _3010 = _2789;
                        float _3011 = _2790;
                        uint _3012 = _2800;
                        uint _3013;
                        vec4 _3038;
                        float _3039;
                        vec4 _3054;
                        vec3 _3066;
                        vec4 _3081;
                        vec4 _3096;
                        float _3142;
                        bool _3143;
                        for (;;)
                        {
                            uint _3023 = ((_2791 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3012));
                            _3013 = (_3012 + 4294967295u) & _3012;
                            uint _3025 = _3023 * 40u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            _3039 = _3038.w;
                            uint _3041 = (_3023 * 40u) + 4u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3056 = (_3023 * 40u) + 8u;
                            _3066 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x));
                            uint _3068 = (_3023 * 40u) + 16u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3083 = (_3023 * 40u) + 20u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3098 = (_3023 * 40u) + 24u;
                            vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3117 = (_3023 * 40u) + 28u;
                            vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3142 = fma(_1756, _3130.z, fma(_1755, _3130.y, _3130.x * _1754)) + _3130.w;
                            _3143 = !((fma(_1756, _3111.z, fma(_1755, _3111.y, _3111.x * _1754)) + _3111.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3143)
                            {
                                float _3170 = _3038.x - _1754;
                                float _3171 = _3038.y - _1755;
                                float _3172 = _3038.z - _1756;
                                float _3173 = dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172));
                                float _3176 = inversesqrt(_3173);
                                float _3177 = _3176 * _3170;
                                float _3178 = _3176 * _3171;
                                float _3179 = _3176 * _3172;
                                float _3183 = 1.0 - (_3173 / (_3039 * _3039));
                                float _4190 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3188 = sqrt(_3173) * _3054.w;
                                float _3190 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                                float _3191 = _3190 * _3190;
                                float _3194 = ((1.0 - _3191) * dot(vec3(_3177, _3178, _3179), vec3(_607, _610, _613))) + _3191;
                                float _3197 = _3188 * _3188;
                                float _3201 = (fma(_1756, _3081.z, fma(_1755, _3081.y, _3081.x * _1754)) + _3081.w) / _3142;
                                float _3202 = (fma(_1756, _3096.z, fma(_1755, _3096.y, _3096.x * _1754)) + _3096.w) / _3142;
                                float _3206 = 1.0 - dot(vec2(_3201, _3202), vec2(_3201, _3202));
                                float _4206 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3207 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3208 = _3207 * (((isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))) * _3184) / ((_3197 * 0.699999988079071044921875) + 1.0));
                                float _3220 = exp2(log2(1.0 / ((_3197 * 3.5) + 5.0)) * 0.25);
                                float _3221 = 1.0 - _668;
                                float _3228 = sqrt(1.0 - ((1.0 - (_3221 * _3221)) * (1.0 - (_3220 * _3220))));
                                float _3229 = _3228 * _3228;
                                float _3230 = _3229 * _3229;
                                float _3231 = _3177 - _2630;
                                float _3232 = _3178 - _2631;
                                float _3233 = _3179 - _2632;
                                float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                                float _3241 = dot(vec3(_607, _610, _613), vec3((-0.0) - _2630, (-0.0) - _2631, (-0.0) - _2632));
                                float _4217 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3244 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3245 = dot(vec3(_607, _610, _613), vec3(_3237 * _3231, _3237 * _3232, _3237 * _3233));
                                float _4228 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3248 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3252 = ((_3248 * _3248) * (_3230 + (-1.0))) + 1.0;
                                float _3253 = _3190 * _3229;
                                float _3254 = _3253 * _3253;
                                float _3260 = ((1.0 - _3254) * dot(vec3(_607, _610, _613), vec3(_3177, _3178, _3179))) + _3254;
                                float _4239 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3262 = 1.0 - _3229;
                                float _3272 = (0.5 / (((_3261 * ((_3244 * _3262) + _3229)) + 9.9999999392252902907785028219223e-09) + (((_3261 * _3262) + _3229) * _3244))) * _3261;
                                float _4250 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3282 = (_3207 * _3184) * (((_3230 * 3.1415927410125732421875) * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) / ((_3252 * _3252) * ((_3197 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3208 * _3054.x;
                                frontier_phi_88_pred_1 = _3282 * _3066.z;
                                frontier_phi_88_pred_2 = _3282 * _3066.y;
                                frontier_phi_88_pred_3 = _3282 * _3066.x;
                                frontier_phi_88_pred_4 = _3208 * _3054.z;
                                frontier_phi_88_pred_5 = _3208 * _3054.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3289 = frontier_phi_88_pred;
                            _3288 = frontier_phi_88_pred_1;
                            _3287 = frontier_phi_88_pred_2;
                            _3286 = frontier_phi_88_pred_3;
                            _3291 = frontier_phi_88_pred_4;
                            _3290 = frontier_phi_88_pred_5;
                            _2996 = _3289 + _3009;
                            _2997 = _3290 + _3010;
                            _2998 = _3291 + _3011;
                            _2993 = _3286 + _3006;
                            _2994 = _3287 + _3007;
                            _2995 = _3288 + _3008;
                            if (_3013 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _3013;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2996;
                        frontier_phi_82_pred_1 = _2995;
                        frontier_phi_82_pred_2 = _2994;
                        frontier_phi_82_pred_3 = _2993;
                        frontier_phi_82_pred_4 = _2998;
                        frontier_phi_82_pred_5 = _2997;
                    }
                    _2611 = frontier_phi_82_pred;
                    _2609 = frontier_phi_82_pred_1;
                    _2607 = frontier_phi_82_pred_2;
                    _2605 = frontier_phi_82_pred_3;
                    _2615 = frontier_phi_82_pred_4;
                    _2613 = frontier_phi_82_pred_5;
                    uint _2792 = _2791 + 1u;
                    if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2785 = _2605;
                        _2786 = _2607;
                        _2787 = _2609;
                        _2788 = _2611;
                        _2789 = _2613;
                        _2790 = _2615;
                        _2791 = _2792;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2615;
                frontier_phi_62_63_ladder_1 = _2613;
                frontier_phi_62_63_ladder_2 = _2611;
                frontier_phi_62_63_ladder_3 = _2607;
                frontier_phi_62_63_ladder_4 = _2605;
                frontier_phi_62_63_ladder_5 = _2609;
            }
            else
            {
                frontier_phi_62_63_ladder = _2468;
                frontier_phi_62_63_ladder_1 = _2466;
                frontier_phi_62_63_ladder_2 = _2464;
                frontier_phi_62_63_ladder_3 = _2460;
                frontier_phi_62_63_ladder_4 = _2458;
                frontier_phi_62_63_ladder_5 = _2462;
            }
            _2604 = frontier_phi_62_63_ladder_4;
            _2606 = frontier_phi_62_63_ladder_3;
            _2608 = frontier_phi_62_63_ladder_5;
            _2610 = frontier_phi_62_63_ladder_2;
            _2612 = frontier_phi_62_63_ladder_1;
            _2614 = frontier_phi_62_63_ladder;
        }
        float _2619 = isnan(1.0) ? _652 : (isnan(_652) ? 1.0 : min(_652, 1.0));
        _2363 = (_2619 * _2610) + _2042;
        _2365 = (_2619 * _2612) + _2043;
        _2367 = (_2619 * _2614) + _2044;
        _2369 = ((_2604 * 0.039999999105930328369140625) * _2619) + _2198;
        _2371 = ((_2606 * 0.039999999105930328369140625) * _2619) + _2199;
        _2373 = ((_2608 * 0.039999999105930328369140625) * _2619) + _2200;
    }
    else
    {
        _2363 = _2042;
        _2365 = _2043;
        _2367 = _2044;
        _2369 = _2198;
        _2371 = _2199;
        _2373 = _2200;
    }
    float _4266 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4277 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4288 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _2390 = ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2363 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _652))) + ((_2369 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2391 = ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2365 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _652))) + ((_2371 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2392 = ((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2367 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _652))) + ((_2373 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2393 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2395 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    uint _2396 = _626 + 6u;
    float _2404 = _587 / cbSceneParam._m0[86u].x;
    float _2405 = _588 / cbSceneParam._m0[86u].y;
    vec4 _2419 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, (log2((isnan(cbSceneParam._m0[77u].w) ? _560 : (isnan(_560) ? cbSceneParam._m0[77u].w : min(_560, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2421 = _2419.x;
    float _2422 = _2419.y;
    float _2423 = _2419.z;
    float _2424 = _2419.w;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    if (_560 > cbSceneParam._m0[78u].w)
    {
        float _2483 = isnan(_560) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _560 : min(cbSceneParam._m0[80u].w, _560));
        float _2484 = _2483 / _560;
        float _2495 = _2484 * _265;
        float _2496 = _266 * _2484;
        float _2497 = (-0.0) - _2496;
        float _2498 = _2484 * _267;
        float _2500 = (cbSceneParam._m0[77u].w * _2497) / _2483;
        float _2501 = _2500 + cbSceneParam._m0[79u].w;
        float _2502 = cbSceneParam._m0[79u].w - _2496;
        float _2508 = sqrt(((_2495 * _2495) + (_2496 * _2496)) + (_2498 * _2498));
        float _2511 = (1.0 - (cbSceneParam._m0[77u].w / _2483)) * _2508;
        float _2516 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2518 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2742;
        if (abs((_2497 - _2500) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2742 = ((((_2501 > 0.0) ? exp2(_2516 * _2501) : (2.0 - exp2(_2518 * _2501))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2511;
        }
        else
        {
            float _2665 = 1.0 / cbSceneParam._m0[80u].x;
            float _2666 = isnan(_2502) ? _2501 : (isnan(_2501) ? _2502 : max(_2501, _2502));
            float _2667 = isnan(_2502) ? _2501 : (isnan(_2501) ? _2502 : min(_2501, _2502));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            float _2677 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : min(_2667, 0.0));
            _2742 = ((abs(_2508 / _2497) * cbSceneParam._m0[80u].y) * ((((_2676 - _2677) * 2.0) - ((exp2(_2516 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0)))) - exp2(_2516 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0))))) * _2665)) - ((exp2(_2518 * _2676) - exp2(_2518 * _2677)) * _2665))) + (_2511 * cbSceneParam._m0[80u].z);
        }
        vec4 _2744 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, 1.0), 0.0);
        float _2753 = exp2((_2742 * (-1.44269502162933349609375)) * (1.0 - _2744.w));
        float _2754 = log2(_2753);
        float _2770 = log2(_2424);
        _2520 = (exp2(_2770 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].x)) * _2744.x) / cbSceneParam._m0[78u].x)) + _2421;
        _2522 = (exp2(_2770 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].y)) * _2744.y) / cbSceneParam._m0[78u].y)) + _2422;
        _2524 = (exp2(_2770 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].z)) * _2744.z) / cbSceneParam._m0[78u].z)) + _2423;
        _2526 = _2753 * _2424;
    }
    else
    {
        _2520 = _2421;
        _2522 = _2422;
        _2524 = _2423;
        _2526 = _2424;
    }
    bool _2780;
    vec4 _2536;
    vec4 _2558;
    float _2560;
    float _2564;
    float _2565;
    float _2566;
    float _2567;
    bool _2577;
    for (;;)
    {
        _2536 = cbMatDynParam._m0[0u];
        float _2538 = roundEven(_2536.y);
        bool _2539 = _2538 == 3.0;
        float _2540 = log2(_2526);
        float _2547 = exp2(_2540 * cbSceneParam._m0[78u].x) * _2393;
        float _2548 = exp2(_2540 * cbSceneParam._m0[78u].y) * _2394;
        float _2549 = exp2(_2540 * cbSceneParam._m0[78u].z) * _2395;
        float _2556 = _574 + (-0.5);
        _2558 = cbMtdParam._m0[1u];
        _2560 = _2558.y * _2556;
        float _2563 = (_2538 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2564 = _2563 * (_2539 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2520)));
        _2565 = _2563 * (_2539 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2522)));
        _2566 = _2563 * (_2539 ? _2549 : (_2549 + (cbSceneParam._m0[72u].w * _2524)));
        _2567 = _2556 * 0.999000012874603271484375;
        _2577 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2577)
        {
            if ((cbInstanceData._m0[_626 + 7u].x + _2567) < 0.5)
            {
                _2780 = true;
                break;
            }
        }
        uint _2700 = _628 + uint(_2536.w);
        if ((cbInstanceData._m0[_2700].w < 1.0) && ((cbInstanceData._m0[_2700].w + _2567) < 0.5))
        {
            _2780 = true;
            break;
        }
        if ((_2560 + 1.0) < _2558.x)
        {
            _2780 = true;
            break;
        }
        _2780 = false;
        break;
    }
    float _2984;
    if (_2780)
    {
        discard_state = true;
        _2984 = 0.0;
    }
    else
    {
        _2984 = cbInstanceData._m0[_2396].w;
    }
    SV_Target.x = _2564;
    SV_Target.y = _2565;
    SV_Target.z = _2566;
    SV_Target.w = _2984;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2396].w;
    discard_exit();
}


