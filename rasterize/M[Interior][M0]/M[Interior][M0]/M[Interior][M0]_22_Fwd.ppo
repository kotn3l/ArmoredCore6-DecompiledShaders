#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1249;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _391 = (_387 * _381) + (_355 * cbMtdParam._m0[20u].y);
    float _392 = (_387 * _382) + (_356 * cbMtdParam._m0[20u].z);
    float _393 = _391 * cbMtdParam._m0[19u].x;
    float _394 = _392 * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    bool _412 = _390 > 0.0;
    float _414 = _412 ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _421 = _395 + (-0.5);
    float _424 = _396 + (-0.5);
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_421 + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_424 + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _468 = (_454 - (_454 * _288)) * cbMtdParam._m0[9u].x;
    float _469 = (_455 - (_455 * _288)) * cbMtdParam._m0[9u].y;
    float _470 = cbMtdParam._m0[9u].z * (_456 - (_456 * _288));
    float _488 = _391 * cbMtdParam._m0[21u].x;
    float _489 = _392 * cbMtdParam._m0[20u].w;
    bool _490 = _488 > 0.0;
    float _495;
    if (_490)
    {
        _495 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _495 = frontier_phi_11_10_ladder;
    }
    bool _497 = _489 > 0.0;
    float _502;
    if (_497)
    {
        _502 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _502 = frontier_phi_15_14_ladder;
    }
    float _505 = _412 ? (cbMtdParam._m0[16u].z / _390) : 5000.0;
    float _506 = isnan(_502) ? _495 : (isnan(_495) ? _502 : min(_495, _502));
    float _507 = isnan(_505) ? _506 : (isnan(_506) ? _505 : min(_506, _505));
    float _511 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _515 = ((_507 * _390) + _511) / _511;
    float _520 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _522 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _538 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_507 * _488)) / _515) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_507 * _489)) / _515) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _543 = _538.x * cbMtdParam._m0[10u].x;
    float _544 = _538.y * cbMtdParam._m0[10u].y;
    float _545 = _538.z * cbMtdParam._m0[10u].z;
    float _553;
    if (_490)
    {
        _553 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _553 = frontier_phi_19_18_ladder;
    }
    float _559;
    if (_497)
    {
        _559 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _559 = frontier_phi_23_22_ladder;
    }
    float _561 = isnan(_559) ? _553 : (isnan(_553) ? _559 : min(_553, _559));
    float _562 = isnan(_505) ? _561 : (isnan(_561) ? _505 : min(_561, _505));
    float _569 = ((_562 * _390) + _511) / _511;
    vec4 _583 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_562 * _488)) / _569) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_562 * _489)) / _569) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _585 = _583.w;
    float _587 = _585 - (_585 * _288);
    float _597 = (_587 * ((_543 - _468) - (_543 * _288))) + _468;
    float _598 = (_587 * ((_544 - _469) - (_544 * _288))) + _469;
    float _599 = (_587 * ((_545 - _470) - (_545 * _288))) + _470;
    float _613 = _391 * cbMtdParam._m0[21u].z;
    float _614 = _392 * cbMtdParam._m0[21u].y;
    bool _615 = _613 > 0.0;
    float _620;
    if (_615)
    {
        _620 = (1.0 - _395) / _613;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_613 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _395) / _613;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _620 = frontier_phi_27_26_ladder;
    }
    bool _622 = _614 > 0.0;
    float _627;
    if (_622)
    {
        _627 = (1.0 - _396) / _614;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_614 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _396) / _614;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _627 = frontier_phi_31_30_ladder;
    }
    float _630 = _412 ? (cbMtdParam._m0[18u].x / _390) : 5000.0;
    float _631 = isnan(_627) ? _620 : (isnan(_620) ? _627 : min(_620, _627));
    float _632 = isnan(_630) ? _631 : (isnan(_631) ? _630 : min(_631, _630));
    float _636 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _640 = ((_632 * _390) + _636) / _636;
    float _645 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _647 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _664 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_421 + (_632 * _613)) / _640) + 0.5) + _645) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_424 + (_632 * _614)) / _640) + 0.5) + _647) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _669 = _664.x * cbMtdParam._m0[14u].x;
    float _670 = _664.y * cbMtdParam._m0[14u].y;
    float _671 = _664.z * cbMtdParam._m0[14u].z;
    float _679;
    if (_615)
    {
        _679 = (1.0 - _395) / _613;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_613 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _395) / _613;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _679 = frontier_phi_35_34_ladder;
    }
    float _685;
    if (_622)
    {
        _685 = (1.0 - _396) / _614;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_614 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _396) / _614;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _685 = frontier_phi_39_38_ladder;
    }
    float _687 = isnan(_685) ? _679 : (isnan(_679) ? _685 : min(_679, _685));
    float _688 = isnan(_630) ? _687 : (isnan(_687) ? _630 : min(_687, _630));
    float _695 = ((_688 * _390) + _636) / _636;
    vec4 _709 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_421 + (_688 * _613)) / _695) + 0.5) + _645) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_424 + (_688 * _614)) / _695) + 0.5) + _647) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _711 = _709.w;
    float _713 = _711 - (_711 * _288);
    vec4 _737 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _741 = _737.z;
    float _744 = (_737.x * 2.0) + (-1.0);
    float _745 = (_737.y * 2.0) + (-1.0);
    float _746 = dot(vec2(_744, _745), vec2(_744, _745));
    float _3419 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _751 = sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))));
    float _752 = _741 * _288;
    float _759 = (cbMtdParam._m0[15u].w * ((_327 - _752) + ((_741 - _327) * _288))) + _752;
    float _763 = (cbMtdParam._m0[16u].x * _355) + _744;
    float _764 = (cbMtdParam._m0[16u].x * _356) + _745;
    float _767 = fma(_751, _197, fma(_764, _204, _763 * _190));
    float _770 = fma(_751, _198, fma(_764, _205, _763 * _191));
    float _773 = fma(_751, _199, fma(_764, _206, _763 * _192));
    float _777 = inversesqrt(dot(vec3(_767, _770, _773), vec3(_767, _770, _773)));
    float _778 = _777 * _767;
    float _779 = _777 * _770;
    float _780 = _777 * _773;
    float _3430 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _781 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3452 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3463 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _800 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _804 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _805 = _261 * _804;
    float _806 = _262 * _804;
    float _807 = _263 * _804;
    float _813 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _814 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _833 = fma(_780, cbSceneParam._m0[5u].z, fma(_779, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _778));
    float _836 = fma(_780, cbSceneParam._m0[6u].z, fma(_779, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _778));
    float _839 = fma(_780, cbSceneParam._m0[7u].z, fma(_779, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _778));
    uint _852 = uint(roundEven(NORMAL.w)) * 13u;
    uint _854 = _852 + 9u;
    uint _855 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _861 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_855].x;
    float _862 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_855].y;
    float _863 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_855].z;
    float _3474 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    vec4 _875 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _813, cbSceneParam._m0[86u].y * _814));
    float _878 = _875.x * TEXCOORD.z;
    float _879 = dot(vec3(_778, _779, _780), vec3(_805, _806, _807));
    float _882 = _879 * 2.0;
    float _886 = (_882 * _778) - _805;
    float _887 = (_882 * _779) - _806;
    float _888 = (_882 * _780) - _807;
    float _892 = abs(dot(vec3(_805, _806, _807), vec3(_778, _779, _780)));
    float _3507 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _894 = sqrt(_781);
    float _907 = exp2((_894 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_894 * 3.0));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1248;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _975 = fma(_947, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939));
        float _979 = fma(_947, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939));
        float _983 = fma(_947, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939));
        float _1006 = _939 + _778;
        float _1007 = _943 + _779;
        float _1008 = _947 + _780;
        float _1018 = fma(_1008, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006)) - _975;
        float _1019 = fma(_1008, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006)) - _979;
        float _1020 = fma(_1008, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006)) - _983;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_975 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_979 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[34u].z) + ((((((_983 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1076 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1042.x + (-0.5));
        float _1078 = _1076 * (_1042.y + (-0.5));
        float _1079 = _1076 * (_1042.z + (-0.5));
        float _1086 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1049.x + (-0.5));
        float _1088 = _1086 * (_1049.y + (-0.5));
        float _1089 = _1086 * (_1049.z + (-0.5));
        float _1096 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1056.x + (-0.5));
        float _1098 = _1096 * (_1056.y + (-0.5));
        float _1099 = _1096 * (_1056.z + (-0.5));
        float _1106 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1063.x + (-0.5));
        float _1108 = _1106 * (_1063.y + (-0.5));
        float _1109 = _1106 * (_1063.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1130 = (dot(vec3(_778, _779, _780), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1140 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3555 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1142 + 1.0))) + _1147) * _1110;
        float _1157 = _1078 * 0.5;
        float _1158 = _1088 * 0.5;
        float _1159 = _1098 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_778, _779, _780), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3588 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_1184 + 1.0))) + _1189) * _1111;
        float _1199 = _1079 * 0.5;
        float _1200 = _1089 * 0.5;
        float _1201 = _1099 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_778, _779, _780), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3621 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1226 + 1.0))) + _1231) * _1112;
        _1248 = _1079;
        _1250 = _1078;
        _1251 = _1077;
        _1252 = _1089;
        _1253 = _1088;
        _1254 = _1087;
        _1255 = _1099;
        _1256 = _1098;
        _1257 = _1097;
        _1258 = _1112;
        _1259 = _1111;
        _1260 = _1110;
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _1249;
        _1250 = _1249;
        _1251 = _1249;
        _1252 = _1249;
        _1253 = _1249;
        _1254 = _1249;
        _1255 = _1249;
        _1256 = _1249;
        _1257 = _1249;
        _1258 = _1249;
        _1259 = _1249;
        _1260 = _1249;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1289 = fma(_947, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939));
        float _1293 = fma(_947, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939));
        float _1297 = fma(_947, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939));
        float _1320 = _939 + _778;
        float _1321 = _943 + _779;
        float _1322 = _947 + _780;
        float _1332 = fma(_1322, cbModelParam._m0[30u].z, fma(_1321, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1320)) - _1289;
        float _1333 = fma(_1322, cbModelParam._m0[31u].z, fma(_1321, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1320)) - _1293;
        float _1334 = fma(_1322, cbModelParam._m0[32u].z, fma(_1321, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1320)) - _1297;
        float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
        float _1351 = ((_1338 * _1332) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1289 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1338 * _1333) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1293 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1338 * _1334) / cbModelParam._m0[35u].z) + ((((((_1297 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        float _1388 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1355.x + (-0.5));
        float _1390 = _1388 * (_1355.y + (-0.5));
        float _1391 = _1388 * (_1355.z + (-0.5));
        float _1398 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1362.x + (-0.5));
        float _1400 = _1398 * (_1362.y + (-0.5));
        float _1401 = _1398 * (_1362.z + (-0.5));
        float _1408 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1369.x + (-0.5));
        float _1410 = _1408 * (_1369.y + (-0.5));
        float _1411 = _1408 * (_1369.z + (-0.5));
        float _1418 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1376.x + (-0.5));
        float _1420 = _1418 * (_1376.y + (-0.5));
        float _1421 = _1418 * (_1376.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_778, _779, _780), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3684 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1452 + 1.0))) + _1457) * _1422;
        float _1467 = _1390 * 0.5;
        float _1468 = _1400 * 0.5;
        float _1469 = _1410 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_778, _779, _780), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _3717 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1494 + 1.0))) + _1499) * _1423;
        float _1509 = _1391 * 0.5;
        float _1510 = _1401 * 0.5;
        float _1511 = _1411 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_778, _779, _780), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _3750 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1536 + 1.0))) + _1541) * _1424;
        _1558 = _1391;
        _1559 = _1390;
        _1560 = _1389;
        _1561 = _1401;
        _1562 = _1400;
        _1563 = _1399;
        _1564 = _1411;
        _1565 = _1410;
        _1566 = _1409;
        _1567 = _1424;
        _1568 = _1423;
        _1569 = _1422;
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
    }
    else
    {
        _1558 = _1249;
        _1559 = _1249;
        _1560 = _1249;
        _1561 = _1249;
        _1562 = _1249;
        _1563 = _1249;
        _1564 = _1249;
        _1565 = _1249;
        _1566 = _1249;
        _1567 = _1249;
        _1568 = _1249;
        _1569 = _1249;
        _1570 = 0.0;
        _1571 = 0.0;
        _1572 = 0.0;
    }
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1261)) + _1261;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1262)) + _1262;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1263)) + _1263;
    float _1605 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1608 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1611 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1582));
    float _1626 = _886 * 0.5;
    float _1627 = _887 * 0.5;
    float _1628 = _888 * 0.5;
    float _1629 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1632 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1635 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1669;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1642 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1248, _1252, _1255, _1258));
        float _1646 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1650 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1657 = dot(vec4(cbModelParam._m0[39u]), vec4(_1626, _1627, _1628, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1680;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1671 = dot(vec4(cbModelParam._m0[40u]), vec4(_1626, _1627, _1628, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1684 = (_1680 * cbModelParam._m0[1u].x) + (_1669 * (1.0 - cbModelParam._m0[1u].x));
    float _1694 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _781);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1694 : min(cbModelParam._m0[25u].z, _1694));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1742 = fma(_947, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939)) + cbModelParam._m0[13u].w;
        float _1746 = fma(_947, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939)) + cbModelParam._m0[14u].w;
        float _1750 = fma(_947, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939)) + cbModelParam._m0[15u].w;
        float _1753 = fma(_888, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886));
        float _1756 = fma(_888, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886));
        float _1759 = fma(_888, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886));
        float _1787;
        if (_1753 > 0.0)
        {
            _1787 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1787 = frontier_phi_54_52_ladder;
        }
        float _2132;
        if (_1756 > 0.0)
        {
            _2132 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2132 = frontier_phi_63_59_ladder;
        }
        float _2448;
        if (_1759 > 0.0)
        {
            _2448 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2448 = frontier_phi_77_70_ladder;
        }
        float _2450 = isnan(_2132) ? _1787 : (isnan(_1787) ? _2132 : min(_1787, _2132));
        float _2451 = isnan(_2448) ? _2450 : (isnan(_2450) ? _2448 : min(_2450, _2448));
        float _2455 = (_2451 * _1753) + _1742;
        float _2456 = (_2451 * _1756) + _1746;
        float _2457 = (_2451 * _1759) + _1750;
        float _2458 = _2451 * 9.9999997473787516355514526367188e-05;
        float _2459 = (-1.0) - _2458;
        float _2461 = _2458 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2457 > _2461) || ((_2457 < _2459) || ((_2456 > _2461) || ((_2456 < _2459) || ((_2455 < _2459) || (_2455 > _2461))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2457, cbModelParam._m0[9u].z, fma(_2456, cbModelParam._m0[9u].y, _2455 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2457, cbModelParam._m0[10u].z, fma(_2456, cbModelParam._m0[10u].y, _2455 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2457, cbModelParam._m0[11u].z, fma(_2456, cbModelParam._m0[11u].y, _2455 * cbModelParam._m0[11u].x))), _1695);
            frontier_phi_53_77_ladder = _2583.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2583.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2583.z * cbModelParam._m0[1u].y;
        }
        _1775 = frontier_phi_53_77_ladder;
        _1777 = frontier_phi_53_77_ladder_1;
        _1779 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_886, _887, _888), _1695);
        _1775 = _1763.x * cbModelParam._m0[1u].y;
        _1777 = _1763.y * cbModelParam._m0[1u].y;
        _1779 = _1763.z * cbModelParam._m0[1u].y;
    }
    float _1783 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _781);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1783 : min(cbModelParam._m0[25u].w, _1783));
    float _1872;
    float _1874;
    float _1876;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1836 = fma(_947, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939)) + cbModelParam._m0[21u].w;
        float _1840 = fma(_947, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939)) + cbModelParam._m0[22u].w;
        float _1844 = fma(_947, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939)) + cbModelParam._m0[23u].w;
        float _1847 = fma(_888, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886));
        float _1850 = fma(_888, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886));
        float _1853 = fma(_888, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886));
        float _2137;
        if (_1847 > 0.0)
        {
            _2137 = abs((1.0 - _1836) / _1847);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1836 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2137 = frontier_phi_65_61_ladder;
        }
        float _2474;
        if (_1850 > 0.0)
        {
            _2474 = abs((1.0 - _1840) / _1850);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1840 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2474 = frontier_phi_79_72_ladder;
        }
        float _2643;
        if (_1853 > 0.0)
        {
            _2643 = abs((1.0 - _1844) / _1853);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1844 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2643 = frontier_phi_93_88_ladder;
        }
        float _2645 = isnan(_2474) ? _2137 : (isnan(_2137) ? _2474 : min(_2137, _2474));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _1847) + _1836;
        float _2651 = (_2646 * _1850) + _1840;
        float _2652 = (_2646 * _1853) + _1844;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2653;
        float _2656 = _2653 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2652 > _2656) || ((_2652 < _2654) || ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 < _2654) || (_2650 > _2656))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2652, cbModelParam._m0[17u].z, fma(_2651, cbModelParam._m0[17u].y, _2650 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2652, cbModelParam._m0[18u].z, fma(_2651, cbModelParam._m0[18u].y, _2650 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2652, cbModelParam._m0[19u].z, fma(_2651, cbModelParam._m0[19u].y, _2650 * cbModelParam._m0[19u].x))), _1784);
            frontier_phi_62_93_ladder = _2885.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2885.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2885.x * cbModelParam._m0[1u].z;
        }
        _1872 = frontier_phi_62_93_ladder_2;
        _1874 = frontier_phi_62_93_ladder_1;
        _1876 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_886, _887, _888), _1784);
        _1872 = _1856.x * cbModelParam._m0[1u].z;
        _1874 = _1856.y * cbModelParam._m0[1u].z;
        _1876 = _1856.z * cbModelParam._m0[1u].z;
    }
    float _1888 = ((((1.0 - _907) * ((_894 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_907 * _894)) * _878;
    float _1889 = _1888 * ((cbModelParam._m0[1u].w * (_1872 - _1775)) + _1775);
    float _1890 = _1888 * ((cbModelParam._m0[1u].w * (_1874 - _1777)) + _1777);
    float _1891 = _1888 * ((cbModelParam._m0[1u].w * (_1876 - _1779)) + _1779);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1889 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1889 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, _1889 * cbSceneParam._m0[91u].x));
    uvec4 _1910 = floatBitsToUint(cbInstanceData._m0[_852 + 5u]);
    uint _1912 = _1910.x * 14u;
    uint _1913 = _1912 + 13u;
    float _1918 = _878 + (-1.0);
    float _1921 = (cbLight._m0[_1913].x * _1918) + 1.0;
    float _1922 = (cbLight._m0[_1913].y * _1918) + 1.0;
    uint _1923 = _1912 + 5u;
    float _1929 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1933 = _1912 + 4u;
    float _1939 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1943 = _1912 | 1u;
    float _1954 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_778, _779, _780));
    float _1957 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_778, _779, _780));
    float _3886 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _3897 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1962 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
    float _1964 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1971 = ((cbLight._m0[_1923].x * _1929) * _1964) + ((cbLight._m0[_1933].x * _1939) * _1962);
    float _1972 = ((_1929 * cbLight._m0[_1923].y) * _1964) + ((_1939 * cbLight._m0[_1933].y) * _1962);
    float _1973 = ((_1929 * cbLight._m0[_1923].z) * _1964) + ((_1939 * cbLight._m0[_1933].z) * _1962);
    uint _1975 = _1912 + 8u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _781) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1912].x + _805;
    float _1991 = cbLight._m0[_1912].y + _806;
    float _1992 = cbLight._m0[_1912].z + _807;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_1912].xyz));
    float _3908 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2004 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _2005 = dot(vec3(_778, _779, _780), vec3(_1997, _1998, _1999));
    float _3930 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_1997, _1998, _1999));
    float _3941 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1989 * _1989;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2028 = (exp2(log2(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2029 = 1.0 - _1989;
    float _2040 = (0.5 / (((_2004 * ((_2003 * _2029) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2029) + _1989) * _2003))) * _2003;
    float _3952 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    uint _2053 = _1912 + 9u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _781) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1943].x + _805;
    float _2067 = cbLight._m0[_1943].y + _806;
    float _2068 = cbLight._m0[_1943].z + _807;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_1943].xyz));
    float _3963 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _2080 = dot(vec3(_778, _779, _780), vec3(_2073, _2074, _2075));
    float _3974 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _2084 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2073, _2074, _2075));
    float _3985 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2088 = _2065 * _2065;
    float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
    float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2102 = 1.0 - _2065;
    float _2112 = (0.5 / (((_2004 * ((_2079 * _2102) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2102) + _2065) * _2079))) * _2079;
    float _3996 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
    float _2124 = (((_2101 * cbLight._m0[_2053].x) * _2114) * _1929) + (((_2028 * cbLight._m0[_1975].x) * _2042) * _1939);
    float _2125 = (((_2101 * cbLight._m0[_2053].y) * _2114) * _1929) + (((_2028 * cbLight._m0[_1975].y) * _2042) * _1939);
    float _2126 = (((_2101 * cbLight._m0[_2053].z) * _2114) * _1929) + (((_2028 * cbLight._m0[_1975].z) * _2042) * _1939);
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    if (_1910.y == 0u)
    {
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2181;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2181;
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2181;
        uvec4 _2196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2197 = _2196.x;
        uint _2208 = uint((float(_2196.y) * floor(float(uint(cbSceneParam._m0[85u].y * _814) / _2197))) + floor(float(uint(cbSceneParam._m0[85u].x * _813) / _2197)));
        float _2218 = (log2(_2184 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2219 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        uint _2222 = uint(isnan(14.0) ? _2219 : (isnan(_2219) ? 14.0 : min(_2219, 14.0)));
        uvec4 _2227 = texelFetch(g_lightClusterGridBuffer, int(((_2222 << 2u) + (_2208 << 6u)) >> 2u));
        uint _2228 = _2227.x;
        uint _2229 = _2196.z;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        if (((((1u << ((_2229 >> 4u) & 15u)) + 4294967295u) & _2228) == 0u) || ((_2229 & 240u) == 0u))
        {
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
        }
        else
        {
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            uint _2517 = 0u;
            uint _2526;
            bool _2527;
            for (;;)
            {
                _2526 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                _2527 = _2526 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2527)
                {
                    frontier_phi_90_pred = _2516;
                    frontier_phi_90_pred_1 = _2511;
                    frontier_phi_90_pred_2 = _2512;
                    frontier_phi_90_pred_3 = _2513;
                    frontier_phi_90_pred_4 = _2514;
                    frontier_phi_90_pred_5 = _2515;
                }
                else
                {
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    uint _2692;
                    _2686 = _2511;
                    _2687 = _2512;
                    _2688 = _2513;
                    _2689 = _2514;
                    _2690 = _2515;
                    _2691 = _2516;
                    _2692 = _2526;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    for (;;)
                    {
                        uint _2696 = uint(findLSB(_2692)) + (_2517 << 5u);
                        uint _2693 = (_2692 + 4294967295u) & _2692;
                        uint _2698 = _2696 * 48u;
                        vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 3u)).x));
                        uint _2718 = (_2696 * 48u) + 4u;
                        vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 3u)).x));
                        uint _2737 = (_2696 * 48u) + 8u;
                        vec3 _2748 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x));
                        float _2752 = _2712.x - _2182;
                        float _2753 = _2712.y - _2183;
                        float _2754 = _2712.z - _2184;
                        float _2755 = dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754));
                        float _2758 = inversesqrt(_2755);
                        float _2759 = _2758 * _2752;
                        float _2760 = _2758 * _2753;
                        float _2761 = _2758 * _2754;
                        float _2762 = dot(vec3(_833, _836, _839), vec3(_2759, _2760, _2761));
                        float _2767 = 1.0 - (_2755 * _2712.w);
                        float _4017 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2768 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2769 = sqrt(_2755) * _2731.w;
                        float _2772 = 1.39999997615814208984375 / (_2769 + 1.39999997615814208984375);
                        float _2773 = _2772 * _2772;
                        float _2776 = ((1.0 - _2773) * _2762) + _2773;
                        float _2779 = _2769 * _2769;
                        float _2783 = ((isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))) * _2768) / ((_2779 * 0.699999988079071044921875) + 1.0);
                        float _2787 = (-0.0) - _2182;
                        float _2788 = (-0.0) - _2183;
                        float _2789 = (-0.0) - _2184;
                        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
                        float _2794 = _2793 * _2787;
                        float _2795 = _2793 * _2788;
                        float _2796 = _2793 * _2789;
                        float _2804 = exp2(log2(1.0 / ((_2779 * 3.5) + 5.0)) * 0.25);
                        float _2805 = 1.0 - _894;
                        float _2812 = sqrt(1.0 - ((1.0 - (_2805 * _2805)) * (1.0 - (_2804 * _2804))));
                        float _2813 = _2812 * _2812;
                        float _2814 = _2813 * _2813;
                        float _2815 = _2794 + _2759;
                        float _2816 = _2795 + _2760;
                        float _2817 = _2796 + _2761;
                        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
                        float _2825 = dot(vec3(_833, _836, _839), vec3(_2794, _2795, _2796));
                        float _4033 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2828 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2829 = dot(vec3(_833, _836, _839), vec3(_2821 * _2815, _2821 * _2816, _2821 * _2817));
                        float _4044 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2832 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2836 = ((_2832 * _2832) * (_2814 + (-1.0))) + 1.0;
                        float _2837 = _2772 * _2813;
                        float _2838 = _2837 * _2837;
                        float _2841 = ((1.0 - _2838) * _2762) + _2838;
                        float _4055 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2843 = 1.0 - _2813;
                        float _2853 = (0.5 / (((_2842 * ((_2828 * _2843) + _2813)) + 9.9999999392252902907785028219223e-09) + (((_2842 * _2843) + _2813) * _2828))) * _2842;
                        float _4066 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2864 = (((_2814 * 3.1415927410125732421875) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) / ((_2836 * _2836) * ((_2779 * 2.1991131305694580078125) + 3.141590118408203125))) * _2768;
                        _2595 = (_2783 * _2731.x) + _2689;
                        _2596 = (_2783 * _2731.y) + _2690;
                        _2597 = (_2783 * _2731.z) + _2691;
                        _2592 = (_2864 * _2748.x) + _2686;
                        _2593 = (_2864 * _2748.y) + _2687;
                        _2594 = (_2864 * _2748.z) + _2688;
                        if (_2693 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2686 = _2592;
                            _2687 = _2593;
                            _2688 = _2594;
                            _2689 = _2595;
                            _2690 = _2596;
                            _2691 = _2597;
                            _2692 = _2693;
                        }
                    }
                    frontier_phi_90_pred = _2597;
                    frontier_phi_90_pred_1 = _2592;
                    frontier_phi_90_pred_2 = _2593;
                    frontier_phi_90_pred_3 = _2594;
                    frontier_phi_90_pred_4 = _2595;
                    frontier_phi_90_pred_5 = _2596;
                }
                _2346 = frontier_phi_90_pred;
                _2336 = frontier_phi_90_pred_1;
                _2338 = frontier_phi_90_pred_2;
                _2340 = frontier_phi_90_pred_3;
                _2342 = frontier_phi_90_pred_4;
                _2344 = frontier_phi_90_pred_5;
                uint _2518 = _2517 + 1u;
                if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2511 = _2336;
                    _2512 = _2338;
                    _2513 = _2340;
                    _2514 = _2342;
                    _2515 = _2344;
                    _2516 = _2346;
                    _2517 = _2518;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
        }
        uvec4 _2349 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2350 = _2349.z;
        uint _2352 = (_2350 >> 8u) & 15u;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((4294967295u << _2352) & _2228) == 0u)
        {
            _2479 = _2335;
            _2481 = _2337;
            _2483 = _2339;
            _2485 = _2341;
            _2487 = _2343;
            _2489 = _2345;
        }
        else
        {
            float _2504 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
            float _2505 = _2504 * _2182;
            float _2506 = _2504 * _2183;
            float _2507 = _2504 * _2184;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2352 < ((_2350 >> 12u) & 15u))
            {
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2669 = _2335;
                float _2670 = _2337;
                float _2671 = _2339;
                float _2672 = _2341;
                float _2673 = _2343;
                float _2674 = _2345;
                uint _2675 = _2352;
                uint _2684;
                bool _2685;
                for (;;)
                {
                    _2684 = texelFetch(g_lightClassification, int((((_2222 << 5u) + (_2208 << 9u)) + (_2675 << 2u)) >> 2u)).x;
                    _2685 = _2684 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2685)
                    {
                        frontier_phi_99_pred = _2672;
                        frontier_phi_99_pred_1 = _2671;
                        frontier_phi_99_pred_2 = _2670;
                        frontier_phi_99_pred_3 = _2669;
                        frontier_phi_99_pred_4 = _2674;
                        frontier_phi_99_pred_5 = _2673;
                    }
                    else
                    {
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _2903 = _2669;
                        float _2904 = _2670;
                        float _2905 = _2671;
                        float _2906 = _2672;
                        float _2907 = _2673;
                        float _2908 = _2674;
                        uint _2909 = _2684;
                        uint _2910;
                        vec4 _2935;
                        float _2936;
                        vec4 _2951;
                        vec3 _2963;
                        vec4 _2978;
                        vec4 _2993;
                        float _3039;
                        bool _3040;
                        for (;;)
                        {
                            uint _2920 = ((_2675 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2909));
                            _2910 = (_2909 + 4294967295u) & _2909;
                            uint _2922 = _2920 * 40u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            _2936 = _2935.w;
                            uint _2938 = (_2920 * 40u) + 4u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2953 = (_2920 * 40u) + 8u;
                            _2963 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x));
                            uint _2965 = (_2920 * 40u) + 16u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2980 = (_2920 * 40u) + 20u;
                            _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2995 = (_2920 * 40u) + 24u;
                            vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            uint _3014 = (_2920 * 40u) + 28u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            _3039 = fma(_2184, _3027.z, fma(_2183, _3027.y, _3027.x * _2182)) + _3027.w;
                            _3040 = !((fma(_2184, _3008.z, fma(_2183, _3008.y, _3008.x * _2182)) + _3008.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3040)
                            {
                                float _3067 = _2935.x - _2182;
                                float _3068 = _2935.y - _2183;
                                float _3069 = _2935.z - _2184;
                                float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                                float _3073 = inversesqrt(_3070);
                                float _3074 = _3073 * _3067;
                                float _3075 = _3073 * _3068;
                                float _3076 = _3073 * _3069;
                                float _3080 = 1.0 - (_3070 / (_2936 * _2936));
                                float _4077 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3085 = sqrt(_3070) * _2951.w;
                                float _3087 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                                float _3088 = _3087 * _3087;
                                float _3091 = ((1.0 - _3088) * dot(vec3(_3074, _3075, _3076), vec3(_833, _836, _839))) + _3088;
                                float _3094 = _3085 * _3085;
                                float _3098 = (fma(_2184, _2978.z, fma(_2183, _2978.y, _2978.x * _2182)) + _2978.w) / _3039;
                                float _3099 = (fma(_2184, _2993.z, fma(_2183, _2993.y, _2993.x * _2182)) + _2993.w) / _3039;
                                float _3103 = 1.0 - dot(vec2(_3098, _3099), vec2(_3098, _3099));
                                float _4093 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3105 = _3104 * (((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3081) / ((_3094 * 0.699999988079071044921875) + 1.0));
                                float _3117 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                                float _3118 = 1.0 - _894;
                                float _3125 = sqrt(1.0 - ((1.0 - (_3118 * _3118)) * (1.0 - (_3117 * _3117))));
                                float _3126 = _3125 * _3125;
                                float _3127 = _3126 * _3126;
                                float _3128 = _3074 - _2505;
                                float _3129 = _3075 - _2506;
                                float _3130 = _3076 - _2507;
                                float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                                float _3138 = dot(vec3(_833, _836, _839), vec3((-0.0) - _2505, (-0.0) - _2506, (-0.0) - _2507));
                                float _4104 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3141 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3142 = dot(vec3(_833, _836, _839), vec3(_3134 * _3128, _3134 * _3129, _3134 * _3130));
                                float _4115 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3145 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3149 = ((_3145 * _3145) * (_3127 + (-1.0))) + 1.0;
                                float _3150 = _3087 * _3126;
                                float _3151 = _3150 * _3150;
                                float _3157 = ((1.0 - _3151) * dot(vec3(_833, _836, _839), vec3(_3074, _3075, _3076))) + _3151;
                                float _4126 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3159 = 1.0 - _3126;
                                float _3169 = (0.5 / (((_3158 * ((_3141 * _3159) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_3158 * _3159) + _3126) * _3141))) * _3158;
                                float _4137 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3179 = (_3104 * _3081) * (((_3127 * 3.1415927410125732421875) * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) / ((_3149 * _3149) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3105 * _2951.z;
                                frontier_phi_105_pred_1 = _3179 * _2963.x;
                                frontier_phi_105_pred_2 = _3179 * _2963.y;
                                frontier_phi_105_pred_3 = _3179 * _2963.z;
                                frontier_phi_105_pred_4 = _3105 * _2951.x;
                                frontier_phi_105_pred_5 = _3105 * _2951.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3188 = frontier_phi_105_pred;
                            _3183 = frontier_phi_105_pred_1;
                            _3184 = frontier_phi_105_pred_2;
                            _3185 = frontier_phi_105_pred_3;
                            _3186 = frontier_phi_105_pred_4;
                            _3187 = frontier_phi_105_pred_5;
                            _2893 = _3186 + _2906;
                            _2894 = _3187 + _2907;
                            _2895 = _3188 + _2908;
                            _2890 = _3183 + _2903;
                            _2891 = _3184 + _2904;
                            _2892 = _3185 + _2905;
                            if (_2910 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2910;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2893;
                        frontier_phi_99_pred_1 = _2892;
                        frontier_phi_99_pred_2 = _2891;
                        frontier_phi_99_pred_3 = _2890;
                        frontier_phi_99_pred_4 = _2895;
                        frontier_phi_99_pred_5 = _2894;
                    }
                    _2486 = frontier_phi_99_pred;
                    _2484 = frontier_phi_99_pred_1;
                    _2482 = frontier_phi_99_pred_2;
                    _2480 = frontier_phi_99_pred_3;
                    _2490 = frontier_phi_99_pred_4;
                    _2488 = frontier_phi_99_pred_5;
                    uint _2676 = _2675 + 1u;
                    if (_2676 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2669 = _2480;
                        _2670 = _2482;
                        _2671 = _2484;
                        _2672 = _2486;
                        _2673 = _2488;
                        _2674 = _2490;
                        _2675 = _2676;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2490;
                frontier_phi_81_82_ladder_1 = _2486;
                frontier_phi_81_82_ladder_2 = _2484;
                frontier_phi_81_82_ladder_3 = _2482;
                frontier_phi_81_82_ladder_4 = _2480;
                frontier_phi_81_82_ladder_5 = _2488;
            }
            else
            {
                frontier_phi_81_82_ladder = _2345;
                frontier_phi_81_82_ladder_1 = _2341;
                frontier_phi_81_82_ladder_2 = _2339;
                frontier_phi_81_82_ladder_3 = _2337;
                frontier_phi_81_82_ladder_4 = _2335;
                frontier_phi_81_82_ladder_5 = _2343;
            }
            _2479 = frontier_phi_81_82_ladder_4;
            _2481 = frontier_phi_81_82_ladder_3;
            _2483 = frontier_phi_81_82_ladder_2;
            _2485 = frontier_phi_81_82_ladder_1;
            _2487 = frontier_phi_81_82_ladder_5;
            _2489 = frontier_phi_81_82_ladder;
        }
        float _2494 = isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0));
        _2241 = (_2494 * _2485) + _1971;
        _2243 = (_2494 * _2487) + _1972;
        _2245 = (_2494 * _2489) + _1973;
        _2247 = ((_2479 * 0.039999999105930328369140625) * _2494) + _2124;
        _2249 = ((_2481 * 0.039999999105930328369140625) * _2494) + _2125;
        _2251 = ((_2483 * 0.039999999105930328369140625) * _2494) + _2126;
    }
    else
    {
        _2241 = _1971;
        _2243 = _1972;
        _2245 = _1973;
        _2247 = _2124;
        _2249 = _2125;
        _2251 = _2126;
    }
    uint _2257 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _4153 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4164 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4175 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2282 = (((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2241 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _878))) + ((_2247 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1684)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2257].x * ((_713 * ((_669 - _597) - (_669 * _288))) + _597));
    float _2284 = ((cbInstanceData._m0[_2257].y * ((_713 * ((_670 - _598) - (_670 * _288))) + _598)) + ((_2249 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1684)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2243 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _878)));
    float _2286 = ((cbInstanceData._m0[_2257].z * ((_713 * ((_671 - _599) - (_671 * _288))) + _599)) + ((_2251 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1684)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2245 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _878)));
    uint _2290 = _852 + 6u;
    float _2298 = _813 / cbSceneParam._m0[86u].x;
    float _2299 = _814 / cbSceneParam._m0[86u].y;
    vec4 _2313 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, (log2((isnan(cbSceneParam._m0[77u].w) ? _800 : (isnan(_800) ? cbSceneParam._m0[77u].w : min(_800, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2315 = _2313.x;
    float _2316 = _2313.y;
    float _2317 = _2313.z;
    float _2318 = _2313.w;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    if (_800 > cbSceneParam._m0[78u].w)
    {
        float _2360 = isnan(_800) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _800 : min(cbSceneParam._m0[80u].w, _800));
        float _2361 = _2360 / _800;
        float _2372 = _2361 * _261;
        float _2373 = _262 * _2361;
        float _2374 = (-0.0) - _2373;
        float _2375 = _2361 * _263;
        float _2377 = (cbSceneParam._m0[77u].w * _2374) / _2360;
        float _2378 = _2377 + cbSceneParam._m0[79u].w;
        float _2379 = cbSceneParam._m0[79u].w - _2373;
        float _2385 = sqrt(((_2372 * _2372) + (_2373 * _2373)) + (_2375 * _2375));
        float _2388 = (1.0 - (cbSceneParam._m0[77u].w / _2360)) * _2385;
        float _2394 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2396 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2605;
        if (abs((_2374 - _2377) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2605 = ((((_2378 > 0.0) ? exp2(_2394 * _2378) : (2.0 - exp2(_2396 * _2378))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2388;
        }
        else
        {
            float _2540 = 1.0 / cbSceneParam._m0[80u].x;
            float _2541 = isnan(_2379) ? _2378 : (isnan(_2378) ? _2379 : max(_2378, _2379));
            float _2542 = isnan(_2379) ? _2378 : (isnan(_2378) ? _2379 : min(_2378, _2379));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            _2605 = ((abs(_2385 / _2374) * cbSceneParam._m0[80u].y) * ((((_2551 - _2552) * 2.0) - ((exp2(_2394 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0)))) - exp2(_2394 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0))))) * _2540)) - ((exp2(_2396 * _2551) - exp2(_2396 * _2552)) * _2540))) + (_2388 * cbSceneParam._m0[80u].z);
        }
        vec4 _2607 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, 1.0), 0.0);
        float _2616 = exp2((_2605 * (-1.44269502162933349609375)) * (1.0 - _2607.w));
        float _2617 = log2(_2616);
        float _2633 = log2(_2318);
        _2398 = (exp2(_2633 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].x)) * _2607.x) / cbSceneParam._m0[78u].x)) + _2315;
        _2400 = (exp2(_2633 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].y)) * _2607.y) / cbSceneParam._m0[78u].y)) + _2316;
        _2402 = (exp2(_2633 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].z)) * _2607.z) / cbSceneParam._m0[78u].z)) + _2317;
        _2404 = _2616 * _2318;
    }
    else
    {
        _2398 = _2315;
        _2400 = _2316;
        _2402 = _2317;
        _2404 = _2318;
    }
    float _2416 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2417 = _2416 == 3.0;
    float _2418 = log2(_2404);
    float _2425 = exp2(_2418 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0)));
    float _2426 = exp2(_2418 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0)));
    float _2427 = exp2(_2418 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0)));
    float _2436 = (_2416 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2436 * (_2417 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2398)));
    SV_Target.y = _2436 * (_2417 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2400)));
    SV_Target.z = _2436 * (_2417 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2402)));
    SV_Target.w = cbInstanceData._m0[_2290].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2290].w;
}


