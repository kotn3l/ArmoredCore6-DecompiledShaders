#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1138;
float _3297;
float _3298;
float _3299;
float _3300;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    bool _378 = _356 > 0.0;
    float _380 = _378 ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = _361 + (-0.5);
    float _390 = _362 + (-0.5);
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_387 + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_390 + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _434 = (_420 - (_420 * _290)) * cbMtdParam._m0[9u].x;
    float _435 = (_421 - (_421 * _290)) * cbMtdParam._m0[9u].y;
    float _436 = cbMtdParam._m0[9u].z * (_422 - (_422 * _290));
    float _458 = (cbMtdParam._m0[21u].x * _349) * _355;
    float _460 = (cbMtdParam._m0[20u].w * _350) * _355;
    bool _461 = _458 > 0.0;
    float _466;
    if (_461)
    {
        _466 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _466 = frontier_phi_11_10_ladder;
    }
    bool _468 = _460 > 0.0;
    float _473;
    if (_468)
    {
        _473 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _473 = frontier_phi_15_14_ladder;
    }
    float _476 = _378 ? (cbMtdParam._m0[16u].z / _356) : 5000.0;
    float _477 = isnan(_473) ? _466 : (isnan(_466) ? _473 : min(_466, _473));
    float _478 = isnan(_476) ? _477 : (isnan(_477) ? _476 : min(_477, _476));
    float _482 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _486 = ((_478 * _356) + _482) / _482;
    float _491 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _493 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _509 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_478 * _458)) / _486) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_478 * _460)) / _486) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _514 = _509.x * cbMtdParam._m0[10u].x;
    float _515 = _509.y * cbMtdParam._m0[10u].y;
    float _516 = _509.z * cbMtdParam._m0[10u].z;
    float _524;
    if (_461)
    {
        _524 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _524 = frontier_phi_19_18_ladder;
    }
    float _530;
    if (_468)
    {
        _530 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _530 = frontier_phi_23_22_ladder;
    }
    float _532 = isnan(_530) ? _524 : (isnan(_524) ? _530 : min(_524, _530));
    float _533 = isnan(_476) ? _532 : (isnan(_532) ? _476 : min(_532, _476));
    float _540 = ((_533 * _356) + _482) / _482;
    vec4 _554 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_533 * _458)) / _540) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_533 * _460)) / _540) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _556 = _554.w;
    float _558 = _556 - (_556 * _290);
    float _569 = 0.5 - (_290 * 0.5);
    float _579 = (((_434 - _303) + (_558 * ((_514 - _434) - (_514 * _290)))) * _569) + _303;
    float _580 = (((_435 - _305) + (_558 * ((_515 - _435) - (_515 * _290)))) * _569) + _305;
    float _581 = (((_436 - _307) + (_558 * ((_516 - _436) - (_516 * _290)))) * _569) + _307;
    vec4 _593 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _601 = (_593.x * 2.0) + (-1.0);
    float _603 = (_593.y * 2.0) + (-1.0);
    float _604 = dot(vec2(_601, _603), vec2(_601, _603));
    float _3339 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _609 = sqrt(1.0 - (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))));
    float _610 = _593.z * _290;
    float _613 = fma(_609, _199, fma(_603, _206, _601 * _192));
    float _616 = fma(_609, _200, fma(_603, _207, _601 * _193));
    float _619 = fma(_609, _201, fma(_603, _208, _601 * _194));
    float _623 = inversesqrt(dot(vec3(_613, _616, _619), vec3(_613, _616, _619)));
    float _624 = _623 * _613;
    float _625 = _623 * _616;
    float _626 = _623 * _619;
    float _3350 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _627 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3372 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3383 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _651 = _263 * _650;
    float _652 = _264 * _650;
    float _653 = _265 * _650;
    vec4 _658 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _660 = _658.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _819 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _825 = (cbMatDynParam._m0[5u].x * _819) + cbMatDynParam._m0[5u].y;
        float _3394 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _830 = (cbMatDynParam._m0[5u].z * _819) + cbMatDynParam._m0[5u].w;
        float _3405 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) - _826)) + _826) < ((_660 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_626, cbSceneParam._m0[5u].z, fma(_625, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _624));
    float _697 = fma(_626, cbSceneParam._m0[6u].z, fma(_625, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _624));
    float _700 = fma(_626, cbSceneParam._m0[7u].z, fma(_625, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _624));
    uint _713 = uint(roundEven(NORMAL.w)) * 13u;
    uint _715 = _713 + 9u;
    uint _716 = _715 + uint(cbMatDynParam._m0[0u].w);
    float _722 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) * cbInstanceData._m0[_716].x;
    float _723 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * cbInstanceData._m0[_716].y;
    float _724 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_716].z;
    float _3416 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _3438 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    vec4 _736 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _673, cbSceneParam._m0[86u].y * _674));
    float _739 = _736.x * TEXCOORD.z;
    float _740 = dot(vec3(_624, _625, _626), vec3(_651, _652, _653));
    float _743 = _740 * 2.0;
    float _747 = (_743 * _624) - _651;
    float _748 = (_743 * _625) - _652;
    float _749 = (_743 * _626) - _653;
    float _753 = abs(dot(vec3(_651, _652, _653), vec3(_624, _625, _626)));
    float _3449 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _755 = sqrt(_627);
    float _768 = exp2((_755 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_755 * 3.0));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1137;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _864 = fma(_808, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800));
        float _868 = fma(_808, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800));
        float _872 = fma(_808, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800));
        float _895 = _800 + _624;
        float _896 = _804 + _625;
        float _897 = _808 + _626;
        float _907 = fma(_897, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _895)) - _864;
        float _908 = fma(_897, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _895)) - _868;
        float _909 = fma(_897, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _895)) - _872;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _926 = ((_913 * _907) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_864 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_913 * _908) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_868 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_913 * _909) / cbModelParam._m0[34u].z) + ((((((_872 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        float _965 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_931.x + (-0.5));
        float _967 = _965 * (_931.y + (-0.5));
        float _968 = _965 * (_931.z + (-0.5));
        float _975 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_938.x + (-0.5));
        float _977 = _975 * (_938.y + (-0.5));
        float _978 = _975 * (_938.z + (-0.5));
        float _985 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_945.x + (-0.5));
        float _987 = _985 * (_945.y + (-0.5));
        float _988 = _985 * (_945.z + (-0.5));
        float _995 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_952.x + (-0.5));
        float _997 = _995 * (_952.y + (-0.5));
        float _998 = _995 * (_952.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1019 = (dot(vec3(_624, _625, _626), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1029 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3497 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1031 + 1.0))) + _1036) * _999;
        float _1046 = _967 * 0.5;
        float _1047 = _977 * 0.5;
        float _1048 = _987 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_624, _625, _626), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3530 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1073 + 1.0))) + _1078) * _1000;
        float _1088 = _968 * 0.5;
        float _1089 = _978 * 0.5;
        float _1090 = _988 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_624, _625, _626), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3563 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_1115 + 1.0))) + _1120) * _1001;
        _1137 = _968;
        _1139 = _967;
        _1140 = _966;
        _1141 = _978;
        _1142 = _977;
        _1143 = _976;
        _1144 = _988;
        _1145 = _987;
        _1146 = _986;
        _1147 = _1001;
        _1148 = _1000;
        _1149 = _999;
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
    }
    else
    {
        _1137 = _1138;
        _1139 = _1138;
        _1140 = _1138;
        _1141 = _1138;
        _1142 = _1138;
        _1143 = _1138;
        _1144 = _1138;
        _1145 = _1138;
        _1146 = _1138;
        _1147 = _1138;
        _1148 = _1138;
        _1149 = _1138;
        _1150 = 0.0;
        _1151 = 0.0;
        _1152 = 0.0;
    }
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1181 = fma(_808, cbModelParam._m0[30u].z, fma(_804, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _800));
        float _1185 = fma(_808, cbModelParam._m0[31u].z, fma(_804, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _800));
        float _1189 = fma(_808, cbModelParam._m0[32u].z, fma(_804, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _800));
        float _1212 = _800 + _624;
        float _1213 = _804 + _625;
        float _1214 = _808 + _626;
        float _1224 = fma(_1214, cbModelParam._m0[30u].z, fma(_1213, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1212)) - _1181;
        float _1225 = fma(_1214, cbModelParam._m0[31u].z, fma(_1213, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1212)) - _1185;
        float _1226 = fma(_1214, cbModelParam._m0[32u].z, fma(_1213, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1212)) - _1189;
        float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
        float _1243 = ((_1230 * _1224) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1181 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1230 * _1225) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1185 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1230 * _1226) / cbModelParam._m0[35u].z) + ((((((_1189 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1280 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1247.x + (-0.5));
        float _1282 = _1280 * (_1247.y + (-0.5));
        float _1283 = _1280 * (_1247.z + (-0.5));
        float _1290 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1254.x + (-0.5));
        float _1292 = _1290 * (_1254.y + (-0.5));
        float _1293 = _1290 * (_1254.z + (-0.5));
        float _1300 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1261.x + (-0.5));
        float _1302 = _1300 * (_1261.y + (-0.5));
        float _1303 = _1300 * (_1261.z + (-0.5));
        float _1310 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1268.x + (-0.5));
        float _1312 = _1310 * (_1268.y + (-0.5));
        float _1313 = _1310 * (_1268.z + (-0.5));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = _1281 * 0.5;
        float _1318 = _1291 * 0.5;
        float _1319 = _1301 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_624, _625, _626), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3626 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1344 + 1.0))) + _1349) * _1314;
        float _1359 = _1282 * 0.5;
        float _1360 = _1292 * 0.5;
        float _1361 = _1302 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_624, _625, _626), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _3659 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1386 + 1.0))) + _1391) * _1315;
        float _1401 = _1283 * 0.5;
        float _1402 = _1293 * 0.5;
        float _1403 = _1303 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_624, _625, _626), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3692 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1428 + 1.0))) + _1433) * _1316;
        _1450 = _1283;
        _1451 = _1282;
        _1452 = _1281;
        _1453 = _1293;
        _1454 = _1292;
        _1455 = _1291;
        _1456 = _1303;
        _1457 = _1302;
        _1458 = _1301;
        _1459 = _1316;
        _1460 = _1315;
        _1461 = _1314;
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1138;
        _1451 = _1138;
        _1452 = _1138;
        _1453 = _1138;
        _1454 = _1138;
        _1455 = _1138;
        _1456 = _1138;
        _1457 = _1138;
        _1458 = _1138;
        _1459 = _1138;
        _1460 = _1138;
        _1461 = _1138;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1150)) + _1150;
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1151)) + _1151;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1152)) + _1152;
    float _1497 = fma(_1476, cbSceneParam._m0[89u].z, fma(_1475, cbSceneParam._m0[89u].y, _1474 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1476, cbSceneParam._m0[90u].z, fma(_1475, cbSceneParam._m0[90u].y, _1474 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1476, cbSceneParam._m0[91u].z, fma(_1475, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1474));
    float _1518 = _747 * 0.5;
    float _1519 = _748 * 0.5;
    float _1520 = _749 * 0.5;
    float _1521 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1524 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1527 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1561;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1534 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1137, _1141, _1144, _1147));
        float _1538 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1542 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1549 = dot(vec4(cbModelParam._m0[39u]), vec4(_1518, _1519, _1520, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1572;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1563 = dot(vec4(cbModelParam._m0[40u]), vec4(_1518, _1519, _1520, 1.0));
        _1572 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1572 = 1.0;
    }
    float _1576 = (_1572 * cbModelParam._m0[1u].x) + (_1561 * (1.0 - cbModelParam._m0[1u].x));
    float _1586 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _627);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1586 : min(cbModelParam._m0[25u].z, _1586));
    float _1668;
    float _1670;
    float _1672;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1635 = fma(_808, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800)) + cbModelParam._m0[13u].w;
        float _1639 = fma(_808, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800)) + cbModelParam._m0[14u].w;
        float _1643 = fma(_808, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800)) + cbModelParam._m0[15u].w;
        float _1646 = fma(_749, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747));
        float _1649 = fma(_749, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747));
        float _1652 = fma(_749, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747));
        float _1680;
        if (_1646 > 0.0)
        {
            _1680 = abs((1.0 - _1635) / _1646);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1635 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1680 = frontier_phi_41_39_ladder;
        }
        float _2049;
        if (_1649 > 0.0)
        {
            _2049 = abs((1.0 - _1639) / _1649);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1639 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2049 = frontier_phi_50_46_ladder;
        }
        float _2357;
        if (_1652 > 0.0)
        {
            _2357 = abs((1.0 - _1643) / _1652);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1643 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2357 = frontier_phi_64_57_ladder;
        }
        float _2359 = isnan(_2049) ? _1680 : (isnan(_1680) ? _2049 : min(_1680, _2049));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1646) + _1635;
        float _2365 = (_2360 * _1649) + _1639;
        float _2366 = (_2360 * _1652) + _1643;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2367;
        float _2370 = _2367 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2366 > _2370) || ((_2366 < _2368) || ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 < _2368) || (_2364 > _2370))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2366, cbModelParam._m0[9u].z, fma(_2365, cbModelParam._m0[9u].y, _2364 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2366, cbModelParam._m0[10u].z, fma(_2365, cbModelParam._m0[10u].y, _2364 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2366, cbModelParam._m0[11u].z, fma(_2365, cbModelParam._m0[11u].y, _2364 * cbModelParam._m0[11u].x))), _1587);
            frontier_phi_40_64_ladder = _2508.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2508.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2508.x * cbModelParam._m0[1u].y;
        }
        _1668 = frontier_phi_40_64_ladder_2;
        _1670 = frontier_phi_40_64_ladder_1;
        _1672 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_747, _748, _749), _1587);
        _1668 = _1656.x * cbModelParam._m0[1u].y;
        _1670 = _1656.y * cbModelParam._m0[1u].y;
        _1672 = _1656.z * cbModelParam._m0[1u].y;
    }
    float _1676 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _627);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1676 : min(cbModelParam._m0[25u].w, _1676));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1729 = fma(_808, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800)) + cbModelParam._m0[21u].w;
        float _1733 = fma(_808, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800)) + cbModelParam._m0[22u].w;
        float _1737 = fma(_808, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800)) + cbModelParam._m0[23u].w;
        float _1740 = fma(_749, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747));
        float _1743 = fma(_749, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747));
        float _1746 = fma(_749, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747));
        float _2054;
        if (_1740 > 0.0)
        {
            _2054 = abs((1.0 - _1729) / _1740);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1729 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2054 = frontier_phi_52_48_ladder;
        }
        float _2383;
        if (_1743 > 0.0)
        {
            _2383 = abs((1.0 - _1733) / _1743);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1733 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2383 = frontier_phi_66_59_ladder;
        }
        float _2573;
        if (_1746 > 0.0)
        {
            _2573 = abs((1.0 - _1737) / _1746);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1737 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2573 = frontier_phi_84_77_ladder;
        }
        float _2575 = isnan(_2383) ? _2054 : (isnan(_2054) ? _2383 : min(_2054, _2383));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1740) + _1729;
        float _2581 = (_2576 * _1743) + _1733;
        float _2582 = (_2576 * _1746) + _1737;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1677);
            frontier_phi_49_84_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1765 = frontier_phi_49_84_ladder_2;
        _1767 = frontier_phi_49_84_ladder_1;
        _1769 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1749 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_747, _748, _749), _1677);
        _1765 = _1749.x * cbModelParam._m0[1u].z;
        _1767 = _1749.y * cbModelParam._m0[1u].z;
        _1769 = _1749.z * cbModelParam._m0[1u].z;
    }
    float _1781 = ((((1.0 - _768) * ((_755 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_768 * _755)) * _739;
    float _1782 = _1781 * ((cbModelParam._m0[1u].w * (_1765 - _1668)) + _1668);
    float _1783 = _1781 * ((cbModelParam._m0[1u].w * (_1767 - _1670)) + _1670);
    float _1784 = _1781 * ((cbModelParam._m0[1u].w * (_1769 - _1672)) + _1672);
    float _1787 = fma(_1784, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1782 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1784, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1782 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1784, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, _1782 * cbSceneParam._m0[91u].x));
    vec4 _1801 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_673, _674));
    float _1803 = _1801.w;
    float _1815 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1803);
    float _1816 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1803);
    float _1817 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1803);
    uvec4 _1821 = floatBitsToUint(cbInstanceData._m0[_713 + 5u]);
    uint _1823 = _1821.x * 14u;
    uint _1824 = _1823 + 13u;
    float _1829 = _739 + (-1.0);
    float _1832 = (cbLight._m0[_1824].x * _1829) + 1.0;
    float _1833 = (cbLight._m0[_1824].y * _1829) + 1.0;
    uint _1834 = _1823 + 5u;
    float _1840 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1844 = _1823 + 4u;
    float _1853 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1857 = _1823 | 1u;
    float _1868 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_624, _625, _626));
    float _1871 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_624, _625, _626));
    float _3828 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _3839 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1876 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.3183098733425140380859375;
    float _1878 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.3183098733425140380859375;
    float _1885 = ((cbLight._m0[_1834].x * _1840) * _1878) + (((cbLight._m0[_1844].x * _1815) * _1853) * _1876);
    float _1886 = ((_1840 * cbLight._m0[_1834].y) * _1878) + (((cbLight._m0[_1844].y * _1816) * _1853) * _1876);
    float _1887 = ((_1840 * cbLight._m0[_1834].z) * _1878) + (((cbLight._m0[_1844].z * _1817) * _1853) * _1876);
    uint _1889 = _1823 + 8u;
    float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _627) * 0.949999988079071044921875);
    float _1903 = _1902 * _1902;
    float _1904 = cbLight._m0[_1823].x + _651;
    float _1905 = cbLight._m0[_1823].y + _652;
    float _1906 = cbLight._m0[_1823].z + _653;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1911 = _1910 * _1904;
    float _1912 = _1910 * _1905;
    float _1913 = _1910 * _1906;
    float _1914 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_1823].xyz));
    float _3850 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _1918 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _1919 = dot(vec3(_624, _625, _626), vec3(_1911, _1912, _1913));
    float _3872 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _1923 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1911, _1912, _1913));
    float _3883 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1927 = _1903 * _1903;
    float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
    float _1942 = (exp2(log2(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1943 = 1.0 - _1903;
    float _1954 = (0.5 / (((_1918 * ((_1917 * _1943) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _1943) + _1903) * _1917))) * _1917;
    float _3894 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1956 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
    uint _1970 = _1823 + 9u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _627) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1857].x + _651;
    float _1984 = cbLight._m0[_1857].y + _652;
    float _1985 = cbLight._m0[_1857].z + _653;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_1857].xyz));
    float _3905 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1997 = dot(vec3(_624, _625, _626), vec3(_1990, _1991, _1992));
    float _3916 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _2001 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_1990, _1991, _1992));
    float _3927 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2005 = _1982 * _1982;
    float _2009 = ((_2000 * _2000) * (_2005 + (-1.0))) + 1.0;
    float _2018 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2019 = 1.0 - _1982;
    float _2029 = (0.5 / (((_1918 * ((_1996 * _2019) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2019) + _1982) * _1996))) * _1996;
    float _3938 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2031 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_2005 / ((_2009 * _2009) * 3.141590118408203125));
    float _2041 = (((_2018 * cbLight._m0[_1970].x) * _2031) * _1840) + ((((cbLight._m0[_1889].x * _1815) * _1942) * _1956) * _1853);
    float _2042 = (((_2018 * cbLight._m0[_1970].y) * _2031) * _1840) + ((((cbLight._m0[_1889].y * _1816) * _1942) * _1956) * _1853);
    float _2043 = (((_2018 * cbLight._m0[_1970].z) * _2031) * _1840) + ((((cbLight._m0[_1889].z * _1817) * _1942) * _1956) * _1853);
    float _2158;
    float _2160;
    float _2162;
    float _2164;
    float _2166;
    float _2168;
    if (_1821.y == 0u)
    {
        float _2098 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2099 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2098;
        float _2100 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2098;
        float _2101 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2098;
        uvec4 _2113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2114 = _2113.x;
        uint _2125 = uint((float(_2113.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _2114))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _2114)));
        float _2135 = (log2(_2101 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2136 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        uint _2139 = uint(isnan(14.0) ? _2136 : (isnan(_2136) ? 14.0 : min(_2136, 14.0)));
        uvec4 _2144 = texelFetch(g_lightClusterGridBuffer, int(((_2139 << 2u) + (_2125 << 6u)) >> 2u));
        uint _2145 = _2144.x;
        uint _2146 = _2113.z;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        float _2246;
        if (((((1u << ((_2146 >> 4u) & 15u)) + 4294967295u) & _2145) == 0u) || ((_2146 & 240u) == 0u))
        {
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
            _2244 = 0.0;
            _2246 = 0.0;
        }
        else
        {
            float _2237;
            float _2239;
            float _2241;
            float _2243;
            float _2245;
            float _2247;
            float _2420 = 0.0;
            float _2421 = 0.0;
            float _2422 = 0.0;
            float _2423 = 0.0;
            float _2424 = 0.0;
            float _2425 = 0.0;
            uint _2426 = 0u;
            uint _2435;
            bool _2436;
            for (;;)
            {
                _2435 = texelFetch(g_lightClassification, int((((_2139 << 5u) + (_2125 << 9u)) + (_2426 << 2u)) >> 2u)).x;
                _2436 = _2435 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2436)
                {
                    frontier_phi_79_pred = _2425;
                    frontier_phi_79_pred_1 = _2424;
                    frontier_phi_79_pred_2 = _2423;
                    frontier_phi_79_pred_3 = _2422;
                    frontier_phi_79_pred_4 = _2421;
                    frontier_phi_79_pred_5 = _2420;
                }
                else
                {
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    uint _2622;
                    _2616 = _2420;
                    _2617 = _2421;
                    _2618 = _2422;
                    _2619 = _2423;
                    _2620 = _2424;
                    _2621 = _2425;
                    _2622 = _2435;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    for (;;)
                    {
                        uint _2626 = uint(findLSB(_2622)) + (_2426 << 5u);
                        uint _2623 = (_2622 + 4294967295u) & _2622;
                        uint _2628 = _2626 * 48u;
                        vec4 _2642 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 3u)).x));
                        uint _2648 = (_2626 * 48u) + 4u;
                        vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2648)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 3u)).x));
                        uint _2667 = (_2626 * 48u) + 8u;
                        vec3 _2678 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x));
                        float _2682 = _2642.x - _2099;
                        float _2683 = _2642.y - _2100;
                        float _2684 = _2642.z - _2101;
                        float _2685 = dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684));
                        float _2688 = inversesqrt(_2685);
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2692 = dot(vec3(_694, _697, _700), vec3(_2689, _2690, _2691));
                        float _2697 = 1.0 - (_2685 * _2642.w);
                        float _3959 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2698 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2699 = sqrt(_2685) * _2661.w;
                        float _2702 = 1.39999997615814208984375 / (_2699 + 1.39999997615814208984375);
                        float _2703 = _2702 * _2702;
                        float _2706 = ((1.0 - _2703) * _2692) + _2703;
                        float _2709 = _2699 * _2699;
                        float _2713 = ((isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0))) * _2698) / ((_2709 * 0.699999988079071044921875) + 1.0);
                        float _2717 = (-0.0) - _2099;
                        float _2718 = (-0.0) - _2100;
                        float _2719 = (-0.0) - _2101;
                        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
                        float _2724 = _2723 * _2717;
                        float _2725 = _2723 * _2718;
                        float _2726 = _2723 * _2719;
                        float _2734 = exp2(log2(1.0 / ((_2709 * 3.5) + 5.0)) * 0.25);
                        float _2735 = 1.0 - _755;
                        float _2742 = sqrt(1.0 - ((1.0 - (_2735 * _2735)) * (1.0 - (_2734 * _2734))));
                        float _2743 = _2742 * _2742;
                        float _2744 = _2743 * _2743;
                        float _2745 = _2724 + _2689;
                        float _2746 = _2725 + _2690;
                        float _2747 = _2726 + _2691;
                        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
                        float _2755 = dot(vec3(_694, _697, _700), vec3(_2724, _2725, _2726));
                        float _3975 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2758 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2759 = dot(vec3(_694, _697, _700), vec3(_2751 * _2745, _2751 * _2746, _2751 * _2747));
                        float _3986 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2762 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2766 = ((_2762 * _2762) * (_2744 + (-1.0))) + 1.0;
                        float _2767 = _2702 * _2743;
                        float _2768 = _2767 * _2767;
                        float _2771 = ((1.0 - _2768) * _2692) + _2768;
                        float _3997 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2772 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2773 = 1.0 - _2743;
                        float _2783 = (0.5 / (((_2772 * ((_2758 * _2773) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2772 * _2773) + _2743) * _2758))) * _2772;
                        float _4008 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2794 = (((_2744 * 3.1415927410125732421875) * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) / ((_2766 * _2766) * ((_2709 * 2.1991131305694580078125) + 3.141590118408203125))) * _2698;
                        _2520 = (_2713 * _2661.x) + _2619;
                        _2521 = (_2713 * _2661.y) + _2620;
                        _2522 = (_2713 * _2661.z) + _2621;
                        _2517 = (_2794 * _2678.x) + _2616;
                        _2518 = (_2794 * _2678.y) + _2617;
                        _2519 = (_2794 * _2678.z) + _2618;
                        if (_2623 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2616 = _2517;
                            _2617 = _2518;
                            _2618 = _2519;
                            _2619 = _2520;
                            _2620 = _2521;
                            _2621 = _2522;
                            _2622 = _2623;
                        }
                    }
                    frontier_phi_79_pred = _2522;
                    frontier_phi_79_pred_1 = _2521;
                    frontier_phi_79_pred_2 = _2520;
                    frontier_phi_79_pred_3 = _2519;
                    frontier_phi_79_pred_4 = _2518;
                    frontier_phi_79_pred_5 = _2517;
                }
                _2247 = frontier_phi_79_pred;
                _2245 = frontier_phi_79_pred_1;
                _2243 = frontier_phi_79_pred_2;
                _2241 = frontier_phi_79_pred_3;
                _2239 = frontier_phi_79_pred_4;
                _2237 = frontier_phi_79_pred_5;
                uint _2427 = _2426 + 1u;
                if (_2427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2420 = _2237;
                    _2421 = _2239;
                    _2422 = _2241;
                    _2423 = _2243;
                    _2424 = _2245;
                    _2425 = _2247;
                    _2426 = _2427;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
            _2244 = _2245;
            _2246 = _2247;
        }
        uvec4 _2250 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2251 = _2250.z;
        uint _2253 = (_2251 >> 8u) & 15u;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        if (((4294967295u << _2253) & _2145) == 0u)
        {
            _2388 = _2236;
            _2390 = _2238;
            _2392 = _2240;
            _2394 = _2242;
            _2396 = _2244;
            _2398 = _2246;
        }
        else
        {
            float _2413 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
            float _2414 = _2413 * _2099;
            float _2415 = _2413 * _2100;
            float _2416 = _2413 * _2101;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2253 < ((_2251 >> 12u) & 15u))
            {
                float _2389;
                float _2391;
                float _2393;
                float _2395;
                float _2397;
                float _2399;
                float _2599 = _2236;
                float _2600 = _2238;
                float _2601 = _2240;
                float _2602 = _2242;
                float _2603 = _2244;
                float _2604 = _2246;
                uint _2605 = _2253;
                uint _2614;
                bool _2615;
                for (;;)
                {
                    _2614 = texelFetch(g_lightClassification, int((((_2139 << 5u) + (_2125 << 9u)) + (_2605 << 2u)) >> 2u)).x;
                    _2615 = _2614 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2615)
                    {
                        frontier_phi_93_pred = _2603;
                        frontier_phi_93_pred_1 = _2602;
                        frontier_phi_93_pred_2 = _2601;
                        frontier_phi_93_pred_3 = _2600;
                        frontier_phi_93_pred_4 = _2599;
                        frontier_phi_93_pred_5 = _2604;
                    }
                    else
                    {
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _2842 = _2599;
                        float _2843 = _2600;
                        float _2844 = _2601;
                        float _2845 = _2602;
                        float _2846 = _2603;
                        float _2847 = _2604;
                        uint _2848 = _2614;
                        uint _2849;
                        vec4 _2874;
                        float _2875;
                        vec4 _2890;
                        vec3 _2902;
                        vec4 _2917;
                        vec4 _2932;
                        float _2978;
                        bool _2979;
                        for (;;)
                        {
                            uint _2859 = ((_2605 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2848));
                            _2849 = (_2848 + 4294967295u) & _2848;
                            uint _2861 = _2859 * 40u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            _2875 = _2874.w;
                            uint _2877 = (_2859 * 40u) + 4u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2892 = (_2859 * 40u) + 8u;
                            _2902 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x));
                            uint _2904 = (_2859 * 40u) + 16u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2859 * 40u) + 20u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2934 = (_2859 * 40u) + 24u;
                            vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2953 = (_2859 * 40u) + 28u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            _2978 = fma(_2101, _2966.z, fma(_2100, _2966.y, _2966.x * _2099)) + _2966.w;
                            _2979 = !((fma(_2101, _2947.z, fma(_2100, _2947.y, _2947.x * _2099)) + _2947.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2979)
                            {
                                float _3006 = _2874.x - _2099;
                                float _3007 = _2874.y - _2100;
                                float _3008 = _2874.z - _2101;
                                float _3009 = dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008));
                                float _3012 = inversesqrt(_3009);
                                float _3013 = _3012 * _3006;
                                float _3014 = _3012 * _3007;
                                float _3015 = _3012 * _3008;
                                float _3019 = 1.0 - (_3009 / (_2875 * _2875));
                                float _4019 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3020 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _3024 = sqrt(_3009) * _2890.w;
                                float _3026 = 1.39999997615814208984375 / (_3024 + 1.39999997615814208984375);
                                float _3027 = _3026 * _3026;
                                float _3030 = ((1.0 - _3027) * dot(vec3(_3013, _3014, _3015), vec3(_694, _697, _700))) + _3027;
                                float _3033 = _3024 * _3024;
                                float _3037 = (fma(_2101, _2917.z, fma(_2100, _2917.y, _2917.x * _2099)) + _2917.w) / _2978;
                                float _3038 = (fma(_2101, _2932.z, fma(_2100, _2932.y, _2932.x * _2099)) + _2932.w) / _2978;
                                float _3042 = 1.0 - dot(vec2(_3037, _3038), vec2(_3037, _3038));
                                float _4035 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _3044 = _3043 * (((isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))) * _3020) / ((_3033 * 0.699999988079071044921875) + 1.0));
                                float _3056 = exp2(log2(1.0 / ((_3033 * 3.5) + 5.0)) * 0.25);
                                float _3057 = 1.0 - _755;
                                float _3064 = sqrt(1.0 - ((1.0 - (_3057 * _3057)) * (1.0 - (_3056 * _3056))));
                                float _3065 = _3064 * _3064;
                                float _3066 = _3065 * _3065;
                                float _3067 = _3013 - _2414;
                                float _3068 = _3014 - _2415;
                                float _3069 = _3015 - _2416;
                                float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                                float _3077 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2414, (-0.0) - _2415, (-0.0) - _2416));
                                float _4046 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3080 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3081 = dot(vec3(_694, _697, _700), vec3(_3073 * _3067, _3073 * _3068, _3073 * _3069));
                                float _4057 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3084 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3088 = ((_3084 * _3084) * (_3066 + (-1.0))) + 1.0;
                                float _3089 = _3026 * _3065;
                                float _3090 = _3089 * _3089;
                                float _3096 = ((1.0 - _3090) * dot(vec3(_694, _697, _700), vec3(_3013, _3014, _3015))) + _3090;
                                float _4068 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3097 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3098 = 1.0 - _3065;
                                float _3108 = (0.5 / (((_3097 * ((_3080 * _3098) + _3065)) + 9.9999999392252902907785028219223e-09) + (((_3097 * _3098) + _3065) * _3080))) * _3097;
                                float _4079 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3118 = (_3043 * _3020) * (((_3066 * 3.1415927410125732421875) * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) / ((_3088 * _3088) * ((_3033 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3044 * _2890.z;
                                frontier_phi_99_pred_1 = _3044 * _2890.y;
                                frontier_phi_99_pred_2 = _3044 * _2890.x;
                                frontier_phi_99_pred_3 = _3118 * _2902.z;
                                frontier_phi_99_pred_4 = _3118 * _2902.y;
                                frontier_phi_99_pred_5 = _3118 * _2902.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3127 = frontier_phi_99_pred;
                            _3126 = frontier_phi_99_pred_1;
                            _3125 = frontier_phi_99_pred_2;
                            _3124 = frontier_phi_99_pred_3;
                            _3123 = frontier_phi_99_pred_4;
                            _3122 = frontier_phi_99_pred_5;
                            _2832 = _3125 + _2845;
                            _2833 = _3126 + _2846;
                            _2834 = _3127 + _2847;
                            _2829 = _3122 + _2842;
                            _2830 = _3123 + _2843;
                            _2831 = _3124 + _2844;
                            if (_2849 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2849;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2833;
                        frontier_phi_93_pred_1 = _2832;
                        frontier_phi_93_pred_2 = _2831;
                        frontier_phi_93_pred_3 = _2830;
                        frontier_phi_93_pred_4 = _2829;
                        frontier_phi_93_pred_5 = _2834;
                    }
                    _2397 = frontier_phi_93_pred;
                    _2395 = frontier_phi_93_pred_1;
                    _2393 = frontier_phi_93_pred_2;
                    _2391 = frontier_phi_93_pred_3;
                    _2389 = frontier_phi_93_pred_4;
                    _2399 = frontier_phi_93_pred_5;
                    uint _2606 = _2605 + 1u;
                    if (_2606 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2599 = _2389;
                        _2600 = _2391;
                        _2601 = _2393;
                        _2602 = _2395;
                        _2603 = _2397;
                        _2604 = _2399;
                        _2605 = _2606;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2399;
                frontier_phi_68_69_ladder_1 = _2397;
                frontier_phi_68_69_ladder_2 = _2395;
                frontier_phi_68_69_ladder_3 = _2393;
                frontier_phi_68_69_ladder_4 = _2389;
                frontier_phi_68_69_ladder_5 = _2391;
            }
            else
            {
                frontier_phi_68_69_ladder = _2246;
                frontier_phi_68_69_ladder_1 = _2244;
                frontier_phi_68_69_ladder_2 = _2242;
                frontier_phi_68_69_ladder_3 = _2240;
                frontier_phi_68_69_ladder_4 = _2236;
                frontier_phi_68_69_ladder_5 = _2238;
            }
            _2388 = frontier_phi_68_69_ladder_4;
            _2390 = frontier_phi_68_69_ladder_5;
            _2392 = frontier_phi_68_69_ladder_3;
            _2394 = frontier_phi_68_69_ladder_2;
            _2396 = frontier_phi_68_69_ladder_1;
            _2398 = frontier_phi_68_69_ladder;
        }
        float _2403 = isnan(1.0) ? _739 : (isnan(_739) ? 1.0 : min(_739, 1.0));
        _2158 = (_2403 * _2394) + _1885;
        _2160 = (_2403 * _2396) + _1886;
        _2162 = (_2403 * _2398) + _1887;
        _2164 = ((_2388 * 0.039999999105930328369140625) * _2403) + _2041;
        _2166 = ((_2390 * 0.039999999105930328369140625) * _2403) + _2042;
        _2168 = ((_2392 * 0.039999999105930328369140625) * _2403) + _2043;
    }
    else
    {
        _2158 = _1885;
        _2160 = _1886;
        _2162 = _1887;
        _2164 = _2041;
        _2166 = _2042;
        _2168 = _2043;
    }
    float _4095 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4106 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4117 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _2185 = ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2158 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _739))) + ((_2164 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1576)) * cbPerFrame._m0[3u].x);
    float _2186 = ((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2160 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _739))) + ((_2166 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1576)) * cbPerFrame._m0[3u].x);
    float _2187 = ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2162 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _739))) + ((_2168 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1576)) * cbPerFrame._m0[3u].x);
    float _2188 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    uint _2191 = _713 + 6u;
    float _2199 = _673 / cbSceneParam._m0[86u].x;
    float _2200 = _674 / cbSceneParam._m0[86u].y;
    vec4 _2214 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2199, _2200, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2216 = _2214.x;
    float _2217 = _2214.y;
    float _2218 = _2214.z;
    float _2219 = _2214.w;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _2261 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _2262 = _2261 / _646;
        float _2273 = _2262 * _263;
        float _2274 = _264 * _2262;
        float _2275 = (-0.0) - _2274;
        float _2276 = _2262 * _265;
        float _2278 = (cbSceneParam._m0[77u].w * _2275) / _2261;
        float _2279 = _2278 + cbSceneParam._m0[79u].w;
        float _2280 = cbSceneParam._m0[79u].w - _2274;
        float _2286 = sqrt(((_2273 * _2273) + (_2274 * _2274)) + (_2276 * _2276));
        float _2289 = (1.0 - (cbSceneParam._m0[77u].w / _2261)) * _2286;
        float _2295 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2297 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2530;
        if (abs((_2275 - _2278) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2530 = ((((_2279 > 0.0) ? exp2(_2295 * _2279) : (2.0 - exp2(_2297 * _2279))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2289;
        }
        else
        {
            float _2449 = 1.0 / cbSceneParam._m0[80u].x;
            float _2450 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : max(_2279, _2280));
            float _2451 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : min(_2279, _2280));
            float _2460 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : min(_2450, 0.0));
            float _2461 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : min(_2451, 0.0));
            _2530 = ((abs(_2286 / _2275) * cbSceneParam._m0[80u].y) * ((((_2460 - _2461) * 2.0) - ((exp2(_2295 * (isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0)))) - exp2(_2295 * (isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0))))) * _2449)) - ((exp2(_2297 * _2460) - exp2(_2297 * _2461)) * _2449))) + (_2289 * cbSceneParam._m0[80u].z);
        }
        vec4 _2532 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2199, _2200, 1.0), 0.0);
        float _2541 = exp2((_2530 * (-1.44269502162933349609375)) * (1.0 - _2532.w));
        float _2542 = log2(_2541);
        float _2558 = log2(_2219);
        _2299 = (exp2(_2558 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2542 * cbSceneParam._m0[78u].x)) * _2532.x) / cbSceneParam._m0[78u].x)) + _2216;
        _2301 = (exp2(_2558 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2542 * cbSceneParam._m0[78u].y)) * _2532.y) / cbSceneParam._m0[78u].y)) + _2217;
        _2303 = (exp2(_2558 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2542 * cbSceneParam._m0[78u].z)) * _2532.z) / cbSceneParam._m0[78u].z)) + _2218;
        _2305 = _2541 * _2219;
    }
    else
    {
        _2299 = _2216;
        _2301 = _2217;
        _2303 = _2218;
        _2305 = _2219;
    }
    bool _2568;
    vec4 _2315;
    vec4 _2337;
    float _2339;
    float _2343;
    float _2344;
    float _2345;
    float _2346;
    bool _2356;
    for (;;)
    {
        _2315 = cbMatDynParam._m0[0u];
        float _2317 = roundEven(_2315.y);
        bool _2318 = _2317 == 3.0;
        float _2319 = log2(_2305);
        float _2326 = exp2(_2319 * cbSceneParam._m0[78u].x) * _2188;
        float _2327 = exp2(_2319 * cbSceneParam._m0[78u].y) * _2189;
        float _2328 = exp2(_2319 * cbSceneParam._m0[78u].z) * _2190;
        float _2335 = _660 + (-0.5);
        _2337 = cbMtdParam._m0[1u];
        _2339 = _2337.y * _2335;
        float _2342 = (_2317 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2343 = _2342 * (_2318 ? _2326 : (_2326 + (cbSceneParam._m0[72u].w * _2299)));
        _2344 = _2342 * (_2318 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2301)));
        _2345 = _2342 * (_2318 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2303)));
        _2346 = _2335 * 0.999000012874603271484375;
        _2356 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2356)
        {
            if ((cbInstanceData._m0[_713 + 7u].x + _2346) < 0.5)
            {
                _2568 = true;
                break;
            }
        }
        uint _2484 = _715 + uint(_2315.w);
        if ((cbInstanceData._m0[_2484].w < 1.0) && ((cbInstanceData._m0[_2484].w + _2346) < 0.5))
        {
            _2568 = true;
            break;
        }
        if ((_2339 + 1.0) < _2337.x)
        {
            _2568 = true;
            break;
        }
        _2568 = false;
        break;
    }
    float _2799;
    if (_2568)
    {
        discard_state = true;
        _2799 = 0.0;
    }
    else
    {
        _2799 = cbInstanceData._m0[_2191].w;
    }
    SV_Target.x = _2343;
    SV_Target.y = _2344;
    SV_Target.z = _2345;
    SV_Target.w = _2799;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2191].w;
    discard_exit();
}


