#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _879;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _173 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _174 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _179 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _186 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _251 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _241);
    float _252 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _241);
    float _253 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _241);
    float _279 = cbMtdParam._m0[22u].y + _251;
    float _280 = cbMtdParam._m0[22u].z + _252;
    float _281 = cbMtdParam._m0[22u].w + _253;
    float _295 = (-0.0) - dot(vec3(_279, _280, _281), vec3(_179 * _172, _179 * _173, _179 * _174));
    float _296 = (-0.0) - dot(vec3(_279, _280, _281), vec3(_193 * TANGENT.x, _193 * TANGENT.y, _193 * TANGENT.z));
    float _297 = (-0.0) - dot(vec3(_279, _280, _281), vec3((-0.0) - (_186 * NORMAL.x), (-0.0) - (_186 * NORMAL.y), (-0.0) - (_186 * NORMAL.z)));
    float _301 = inversesqrt(dot(vec3(_295, _296, _297), vec3(_295, _296, _297)));
    float _302 = _301 * _297;
    float _304 = (cbMtdParam._m0[19u].x * _295) * _301;
    float _306 = (cbMtdParam._m0[18u].w * _296) * _301;
    float _307 = fract(TEXCOORD.x);
    float _308 = fract(TEXCOORD.y);
    float _314;
    if (_304 > 0.0)
    {
        _314 = (1.0 - _307) / _304;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_304 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _307) / _304;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _314 = frontier_phi_3_2_ladder;
    }
    float _322;
    if (_306 > 0.0)
    {
        _322 = (1.0 - _308) / _306;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _308) / _306;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _322 = frontier_phi_7_6_ladder;
    }
    bool _324 = _302 > 0.0;
    float _326 = _324 ? (cbMtdParam._m0[15u].x / _302) : 5000.0;
    float _327 = isnan(_322) ? _314 : (isnan(_314) ? _322 : min(_314, _322));
    float _328 = isnan(_326) ? _327 : (isnan(_327) ? _326 : min(_327, _326));
    float _332 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _333 = _307 + (-0.5);
    float _336 = _308 + (-0.5);
    float _339 = ((_328 * _302) + _332) / _332;
    vec4 _365 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_333 + (_328 * _304)) / _339) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_336 + (_328 * _306)) / _339) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _376 = cbMtdParam._m0[9u].x * _365.x;
    float _377 = cbMtdParam._m0[9u].y * _365.y;
    float _378 = cbMtdParam._m0[9u].z * _365.z;
    float _400 = (cbMtdParam._m0[21u].x * _295) * _301;
    float _402 = (cbMtdParam._m0[20u].w * _296) * _301;
    bool _403 = _400 > 0.0;
    float _408;
    if (_403)
    {
        _408 = (1.0 - _307) / _400;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _307) / _400;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _408 = frontier_phi_11_10_ladder;
    }
    bool _410 = _402 > 0.0;
    float _415;
    if (_410)
    {
        _415 = (1.0 - _308) / _402;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _308) / _402;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _415 = frontier_phi_15_14_ladder;
    }
    float _418 = _324 ? (cbMtdParam._m0[16u].z / _302) : 5000.0;
    float _419 = isnan(_415) ? _408 : (isnan(_408) ? _415 : min(_408, _415));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _428 = ((_420 * _302) + _424) / _424;
    float _433 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _435 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _451 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_333 + (_420 * _400)) / _428) + 0.5) + _433) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_336 + (_420 * _402)) / _428) + 0.5) + _435) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _463;
    if (_403)
    {
        _463 = (1.0 - _307) / _400;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _307) / _400;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _463 = frontier_phi_19_18_ladder;
    }
    float _469;
    if (_410)
    {
        _469 = (1.0 - _308) / _402;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _308) / _402;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _469 = frontier_phi_23_22_ladder;
    }
    float _471 = isnan(_469) ? _463 : (isnan(_463) ? _469 : min(_463, _469));
    float _472 = isnan(_418) ? _471 : (isnan(_471) ? _418 : min(_471, _418));
    float _479 = ((_472 * _302) + _424) / _424;
    vec4 _493 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_333 + (_472 * _400)) / _479) + 0.5) + _433) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_336 + (_472 * _402)) / _479) + 0.5) + _435) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _495 = _493.w;
    float _502 = (_495 * ((_451.x * cbMtdParam._m0[10u].x) - _376)) + _376;
    float _503 = (_495 * ((_451.y * cbMtdParam._m0[10u].y) - _377)) + _377;
    float _504 = (_495 * ((_451.z * cbMtdParam._m0[10u].z) - _378)) + _378;
    float _2811 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _2822 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _2833 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _523 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _527 = inversesqrt(dot(vec3(_251, _252, _253), vec3(_251, _252, _253)));
    float _528 = _251 * _527;
    float _529 = _252 * _527;
    float _530 = _253 * _527;
    float _536 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _537 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _550 = uint(roundEven(NORMAL.w)) * 13u;
    uint _553 = (_550 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _559 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2811 : (isnan(_2811) ? 1.0 : min(_2811, 1.0)))) * cbInstanceData._m0[_553].x;
    float _560 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0)))) * cbInstanceData._m0[_553].y;
    float _561 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2833 : (isnan(_2833) ? 1.0 : min(_2833, 1.0)))) * cbInstanceData._m0[_553].z;
    float _2844 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0));
    float _2855 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _2855 : (isnan(_2855) ? 1.0 : min(_2855, 1.0));
    float _2866 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0));
    vec4 _573 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _536, cbSceneParam._m0[86u].y * _537));
    float _576 = _573.x * TEXCOORD.z;
    float _577 = (-0.0) - _528;
    float _578 = (-0.0) - _529;
    float _579 = (-0.0) - _530;
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _878;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _665 = (cbModelParam._m0[37u].x * ((((fma(_609, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _667 = (cbModelParam._m0[37u].y * ((((fma(_609, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _668 = (((((fma(_609, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_665, _667, _668), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_665, _667, _668), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_665, _667, _668), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_665, _667, _668), 0.0);
        float _705 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _705 * (_671.x + (-0.5));
        float _708 = _705 * (_671.y + (-0.5));
        float _709 = _705 * (_671.z + (-0.5));
        float _716 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_678.x + (-0.5));
        float _718 = _716 * (_678.y + (-0.5));
        float _719 = _716 * (_678.z + (-0.5));
        float _726 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_685.x + (-0.5));
        float _728 = _726 * (_685.y + (-0.5));
        float _729 = _726 * (_685.z + (-0.5));
        float _736 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_692.x + (-0.5));
        float _738 = _736 * (_692.y + (-0.5));
        float _739 = _736 * (_692.z + (-0.5));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = _707 * 0.5;
        float _744 = _717 * 0.5;
        float _745 = _727 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _760 = (dot(vec3(0.0), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _2892 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _770 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _2903 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _2914 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _2892 : (isnan(_2892) ? 1.0 : min(_2892, 1.0))) * (_772 + 1.0))) + _777) * _740;
        float _787 = _708 * 0.5;
        float _788 = _718 * 0.5;
        float _789 = _728 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(0.0), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _2925 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _2936 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _2947 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0))) * (_814 + 1.0))) + _819) * _741;
        float _829 = _709 * 0.5;
        float _830 = _719 * 0.5;
        float _831 = _729 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(0.0), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _2958 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _2969 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _2980 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0))) * (_856 + 1.0))) + _861) * _742;
        _878 = _709;
        _880 = _708;
        _881 = _707;
        _882 = _719;
        _883 = _718;
        _884 = _717;
        _885 = _729;
        _886 = _728;
        _887 = _727;
        _888 = _742;
        _889 = _741;
        _890 = _740;
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
    }
    else
    {
        _878 = _879;
        _880 = _879;
        _881 = _879;
        _882 = _879;
        _883 = _879;
        _884 = _879;
        _885 = _879;
        _886 = _879;
        _887 = _879;
        _888 = _879;
        _889 = _879;
        _890 = _879;
        _891 = 0.0;
        _892 = 0.0;
        _893 = 0.0;
    }
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = (cbModelParam._m0[38u].x * ((((fma(_609, cbModelParam._m0[30u].z, fma(_605, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _601)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _948 = (cbModelParam._m0[38u].y * ((((fma(_609, cbModelParam._m0[31u].z, fma(_605, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _601)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _949 = (((((fma(_609, cbModelParam._m0[32u].z, fma(_605, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _601)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _984 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_951.x + (-0.5));
        float _986 = _984 * (_951.y + (-0.5));
        float _987 = _984 * (_951.z + (-0.5));
        float _994 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_958.x + (-0.5));
        float _996 = _994 * (_958.y + (-0.5));
        float _997 = _994 * (_958.z + (-0.5));
        float _1004 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_965.x + (-0.5));
        float _1006 = _1004 * (_965.y + (-0.5));
        float _1007 = _1004 * (_965.z + (-0.5));
        float _1014 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_972.x + (-0.5));
        float _1016 = _1014 * (_972.y + (-0.5));
        float _1017 = _1014 * (_972.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(0.0), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3021 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3032 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3032 : (isnan(_3032) ? 1.0 : min(_3032, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3043 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3021 : (isnan(_3021) ? 1.0 : min(_3021, 1.0))) * (_1048 + 1.0))) + _1053) * _1018;
        float _1063 = _986 * 0.5;
        float _1064 = _996 * 0.5;
        float _1065 = _1006 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(0.0), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3054 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3065 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3076 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0))) * (_1090 + 1.0))) + _1095) * _1019;
        float _1105 = _987 * 0.5;
        float _1106 = _997 * 0.5;
        float _1107 = _1007 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(0.0), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3087 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3098 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3109 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0))) * (_1132 + 1.0))) + _1137) * _1020;
        _1154 = _987;
        _1155 = _986;
        _1156 = _985;
        _1157 = _997;
        _1158 = _996;
        _1159 = _995;
        _1160 = _1007;
        _1161 = _1006;
        _1162 = _1005;
        _1163 = _1020;
        _1164 = _1019;
        _1165 = _1018;
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _879;
        _1155 = _879;
        _1156 = _879;
        _1157 = _879;
        _1158 = _879;
        _1159 = _879;
        _1160 = _879;
        _1161 = _879;
        _1162 = _879;
        _1163 = _879;
        _1164 = _879;
        _1165 = _879;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _891)) + _891;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _892)) + _892;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _893)) + _893;
    float _1201 = fma(_1180, cbSceneParam._m0[89u].z, fma(_1179, cbSceneParam._m0[89u].y, _1178 * cbSceneParam._m0[89u].x));
    float _1204 = fma(_1180, cbSceneParam._m0[90u].z, fma(_1179, cbSceneParam._m0[90u].y, _1178 * cbSceneParam._m0[90u].x));
    float _1207 = fma(_1180, cbSceneParam._m0[91u].z, fma(_1179, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1178));
    float _1222 = _528 * (-0.5);
    float _1223 = _529 * (-0.5);
    float _1224 = _530 * (-0.5);
    float _1225 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1228 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1231 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1265;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1238 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_878, _882, _885, _888));
        float _1242 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_880, _883, _886, _889));
        float _1246 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_881, _884, _887, _890));
        float _1253 = dot(vec4(cbModelParam._m0[39u]), vec4(_1222, _1223, _1224, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1253) ? 0.0 : (isnan(0.0) ? _1253 : max(0.0, _1253))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1276;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1267 = dot(vec4(cbModelParam._m0[40u]), vec4(_1222, _1223, _1224, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1280 = (_1276 * cbModelParam._m0[1u].x) + (_1265 * (1.0 - cbModelParam._m0[1u].x));
    float _1289 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1371;
    float _1373;
    float _1375;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1338 = fma(_609, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _601)) + cbModelParam._m0[13u].w;
        float _1342 = fma(_609, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _601)) + cbModelParam._m0[14u].w;
        float _1346 = fma(_609, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _601)) + cbModelParam._m0[15u].w;
        float _1349 = fma(_579, cbModelParam._m0[13u].z, fma(_578, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _577));
        float _1352 = fma(_579, cbModelParam._m0[14u].z, fma(_578, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _577));
        float _1355 = fma(_579, cbModelParam._m0[15u].z, fma(_578, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _577));
        float _1381;
        if (_1349 > 0.0)
        {
            _1381 = abs((1.0 - _1338) / _1349);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1338 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1381 = frontier_phi_38_36_ladder;
        }
        float _1678;
        if (_1352 > 0.0)
        {
            _1678 = abs((1.0 - _1342) / _1352);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1342 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1678 = frontier_phi_47_43_ladder;
        }
        float _1981;
        if (_1355 > 0.0)
        {
            _1981 = abs((1.0 - _1346) / _1355);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1346 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _1981 = frontier_phi_61_54_ladder;
        }
        float _1983 = isnan(_1678) ? _1381 : (isnan(_1381) ? _1678 : min(_1381, _1678));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1349) + _1338;
        float _1989 = (_1984 * _1352) + _1342;
        float _1990 = (_1984 * _1355) + _1346;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1992 = (-1.0) - _1991;
        float _1994 = _1991 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_1990 > _1994) || ((_1990 < _1992) || ((_1989 > _1994) || ((_1989 < _1992) || ((_1988 < _1992) || (_1988 > _1994))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2113 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1990, cbModelParam._m0[9u].z, fma(_1989, cbModelParam._m0[9u].y, _1988 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1990, cbModelParam._m0[10u].z, fma(_1989, cbModelParam._m0[10u].y, _1988 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1990, cbModelParam._m0[11u].z, fma(_1989, cbModelParam._m0[11u].y, _1988 * cbModelParam._m0[11u].x))), _1289);
            frontier_phi_37_61_ladder = _2113.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2113.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2113.x * cbModelParam._m0[1u].y;
        }
        _1371 = frontier_phi_37_61_ladder_2;
        _1373 = frontier_phi_37_61_ladder_1;
        _1375 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_577, _578, _579), _1289);
        _1371 = _1359.x * cbModelParam._m0[1u].y;
        _1373 = _1359.y * cbModelParam._m0[1u].y;
        _1375 = _1359.z * cbModelParam._m0[1u].y;
    }
    float _1378 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1466;
    float _1468;
    float _1470;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1430 = fma(_609, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _601)) + cbModelParam._m0[21u].w;
        float _1434 = fma(_609, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _601)) + cbModelParam._m0[22u].w;
        float _1438 = fma(_609, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _601)) + cbModelParam._m0[23u].w;
        float _1441 = fma(_579, cbModelParam._m0[21u].z, fma(_578, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _577));
        float _1444 = fma(_579, cbModelParam._m0[22u].z, fma(_578, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _577));
        float _1447 = fma(_579, cbModelParam._m0[23u].z, fma(_578, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _577));
        float _1683;
        if (_1441 > 0.0)
        {
            _1683 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1683 = frontier_phi_49_45_ladder;
        }
        float _2007;
        if (_1444 > 0.0)
        {
            _2007 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2007 = frontier_phi_63_56_ladder;
        }
        float _2173;
        if (_1447 > 0.0)
        {
            _2173 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2173 = frontier_phi_77_72_ladder;
        }
        float _2175 = isnan(_2007) ? _1683 : (isnan(_1683) ? _2007 : min(_1683, _2007));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1441) + _1430;
        float _2181 = (_2176 * _1444) + _1434;
        float _2182 = (_2176 * _1447) + _1438;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2183;
        float _2186 = _2183 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2182 > _2186) || ((_2182 < _2184) || ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 < _2184) || (_2180 > _2186))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2182, cbModelParam._m0[17u].z, fma(_2181, cbModelParam._m0[17u].y, _2180 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2182, cbModelParam._m0[18u].z, fma(_2181, cbModelParam._m0[18u].y, _2180 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2182, cbModelParam._m0[19u].z, fma(_2181, cbModelParam._m0[19u].y, _2180 * cbModelParam._m0[19u].x))), _1378);
            frontier_phi_46_77_ladder = _2365.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2365.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2365.x * cbModelParam._m0[1u].z;
        }
        _1466 = frontier_phi_46_77_ladder_2;
        _1468 = frontier_phi_46_77_ladder_1;
        _1470 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_577, _578, _579), _1378);
        _1466 = _1450.x * cbModelParam._m0[1u].z;
        _1468 = _1450.y * cbModelParam._m0[1u].z;
        _1470 = _1450.z * cbModelParam._m0[1u].z;
    }
    float _1482 = _576 * 0.01200000010430812835693359375;
    float _1484 = _1482 * ((cbModelParam._m0[1u].w * (_1466 - _1371)) + _1371);
    float _1485 = _1482 * ((cbModelParam._m0[1u].w * (_1468 - _1373)) + _1373);
    float _1486 = _1482 * ((cbModelParam._m0[1u].w * (_1470 - _1375)) + _1375);
    float _1489 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, _1484 * cbSceneParam._m0[91u].x));
    uvec4 _1506 = floatBitsToUint(cbInstanceData._m0[_550 + 5u]);
    uint _1508 = _1506.x * 14u;
    uint _1509 = _1508 + 13u;
    float _1514 = _576 + (-1.0);
    float _1518 = (cbLight._m0[_1509].x * _1514) + 1.0;
    float _1519 = (cbLight._m0[_1509].y * _1514) + 1.0;
    uint _1520 = _1508 + 5u;
    float _1526 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
    uint _1530 = _1508 + 4u;
    float _1536 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
    uint _1540 = _1508 | 1u;
    float _1551 = dot(vec3(cbLight._m0[_1508].xyz), vec3(0.0));
    float _1554 = dot(vec3(cbLight._m0[_1540].xyz), vec3(0.0));
    float _3245 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
    float _3256 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    float _1559 = (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * 0.3183098733425140380859375;
    float _1561 = (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * 0.3183098733425140380859375;
    float _1568 = ((cbLight._m0[_1520].x * _1526) * _1561) + ((cbLight._m0[_1530].x * _1536) * _1559);
    float _1569 = ((_1526 * cbLight._m0[_1520].y) * _1561) + ((_1536 * cbLight._m0[_1530].y) * _1559);
    float _1570 = ((_1526 * cbLight._m0[_1520].z) * _1561) + ((_1536 * cbLight._m0[_1530].z) * _1559);
    uint _1571 = _1508 + 8u;
    float _1577 = cbLight._m0[_1508].x + _528;
    float _1578 = cbLight._m0[_1508].y + _529;
    float _1579 = cbLight._m0[_1508].z + _530;
    float _1583 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
    float _1587 = dot(vec3(0.0), vec3(cbLight._m0[_1508].xyz));
    float _3267 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _1590 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    float _1591 = dot(vec3(0.0), vec3(_528, _529, _530));
    float _3278 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1594 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _1595 = dot(vec3(cbLight._m0[_1508].xyz), vec3(_1577 * _1583, _1578 * _1583, _1579 * _1583));
    float _3289 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1606 = (exp2(log2(1.0 - (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1612 = (0.5 / ((_1590 + 9.9999999392252902907785028219223e-09) + _1594)) * _1590;
    float _3300 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1614 = (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * 0.31831014156341552734375;
    uint _1625 = _1508 + 9u;
    float _1631 = cbLight._m0[_1540].x + _528;
    float _1632 = cbLight._m0[_1540].y + _529;
    float _1633 = cbLight._m0[_1540].z + _530;
    float _1637 = inversesqrt(dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633)));
    float _1641 = dot(vec3(0.0), vec3(cbLight._m0[_1540].xyz));
    float _3311 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1644 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _1645 = dot(vec3(cbLight._m0[_1540].xyz), vec3(_1631 * _1637, _1632 * _1637, _1633 * _1637));
    float _3322 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1654 = (exp2(log2(1.0 - (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1658 = (0.5 / ((_1644 + 9.9999999392252902907785028219223e-09) + _1594)) * _1644;
    float _3333 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1660 = (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * 0.31831014156341552734375;
    float _1670 = (((_1654 * cbLight._m0[_1625].x) * _1660) * _1526) + (((_1606 * cbLight._m0[_1571].x) * _1614) * _1536);
    float _1671 = (((_1654 * cbLight._m0[_1625].y) * _1660) * _1526) + (((_1606 * cbLight._m0[_1571].y) * _1614) * _1536);
    float _1672 = (((_1654 * cbLight._m0[_1625].z) * _1660) * _1526) + (((_1606 * cbLight._m0[_1571].z) * _1614) * _1536);
    float _1789;
    float _1791;
    float _1793;
    float _1795;
    float _1797;
    float _1799;
    if (_1506.y == 0u)
    {
        float _1728 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1729 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1728;
        float _1730 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1728;
        float _1731 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1728;
        uvec4 _1743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1744 = _1743.x;
        uint _1755 = uint((float(_1743.y) * floor(float(uint(cbSceneParam._m0[85u].y * _537) / _1744))) + floor(float(uint(cbSceneParam._m0[85u].x * _536) / _1744)));
        float _1765 = (log2(_1731 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1766 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        uint _1769 = uint(isnan(14.0) ? _1766 : (isnan(_1766) ? 14.0 : min(_1766, 14.0)));
        uvec4 _1775 = texelFetch(g_lightClusterGridBuffer, int(((_1769 << 2u) + (_1755 << 6u)) >> 2u));
        uint _1776 = _1775.x;
        uint _1777 = _1743.z;
        float _1867;
        float _1869;
        float _1871;
        float _1873;
        float _1875;
        float _1877;
        if (((((1u << ((_1777 >> 4u) & 15u)) + 4294967295u) & _1776) == 0u) || ((_1777 & 240u) == 0u))
        {
            _1867 = 0.0;
            _1869 = 0.0;
            _1871 = 0.0;
            _1873 = 0.0;
            _1875 = 0.0;
            _1877 = 0.0;
        }
        else
        {
            float _1868;
            float _1870;
            float _1872;
            float _1874;
            float _1876;
            float _1878;
            float _2041 = 0.0;
            float _2042 = 0.0;
            float _2043 = 0.0;
            float _2044 = 0.0;
            float _2045 = 0.0;
            float _2046 = 0.0;
            uint _2047 = 0u;
            uint _2056;
            bool _2057;
            for (;;)
            {
                _2056 = texelFetch(g_lightClassification, int((((_1769 << 5u) + (_1755 << 9u)) + (_2047 << 2u)) >> 2u)).x;
                _2057 = _2056 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2057)
                {
                    frontier_phi_74_pred = _2044;
                    frontier_phi_74_pred_1 = _2043;
                    frontier_phi_74_pred_2 = _2042;
                    frontier_phi_74_pred_3 = _2041;
                    frontier_phi_74_pred_4 = _2045;
                    frontier_phi_74_pred_5 = _2046;
                }
                else
                {
                    float _2216;
                    float _2217;
                    float _2218;
                    float _2219;
                    float _2220;
                    float _2221;
                    uint _2222;
                    _2216 = _2041;
                    _2217 = _2042;
                    _2218 = _2043;
                    _2219 = _2044;
                    _2220 = _2045;
                    _2221 = _2046;
                    _2222 = _2056;
                    float _2122;
                    float _2123;
                    float _2124;
                    float _2125;
                    float _2126;
                    float _2127;
                    for (;;)
                    {
                        uint _2226 = uint(findLSB(_2222)) + (_2047 << 5u);
                        uint _2223 = (_2222 + 4294967295u) & _2222;
                        uint _2228 = _2226 * 48u;
                        vec4 _2242 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2228)).x, texelFetch(g_PointLightRenderingBuffer, int(_2228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2228 + 3u)).x));
                        uint _2248 = (_2226 * 48u) + 4u;
                        vec4 _2261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2248)).x, texelFetch(g_PointLightRenderingBuffer, int(_2248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2248 + 3u)).x));
                        uint _2267 = (_2226 * 48u) + 8u;
                        vec3 _2278 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2267)).x, texelFetch(g_PointLightRenderingBuffer, int(_2267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2267 + 2u)).x));
                        float _2282 = _2242.x - _1729;
                        float _2283 = _2242.y - _1730;
                        float _2284 = _2242.z - _1731;
                        float _2285 = dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284));
                        float _2288 = inversesqrt(_2285);
                        float _2297 = 1.0 - (_2285 * _2242.w);
                        float _3354 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
                        float _2298 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
                        float _2299 = sqrt(_2285) * _2261.w;
                        float _2302 = 1.39999997615814208984375 / (_2299 + 1.39999997615814208984375);
                        float _2303 = _2302 * _2302;
                        float _2306 = ((1.0 - _2303) * dot(vec3(0.0), vec3(_2288 * _2282, _2288 * _2283, _2288 * _2284))) + _2303;
                        float _2309 = _2299 * _2299;
                        float _2313 = ((isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0))) * _2298) / ((_2309 * 0.699999988079071044921875) + 1.0);
                        float _2317 = (-0.0) - _1729;
                        float _2318 = (-0.0) - _1730;
                        float _2319 = (-0.0) - _1731;
                        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
                        float _2327 = dot(vec3(0.0), vec3(_2323 * _2317, _2323 * _2318, _2323 * _2319));
                        float _3370 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
                        float _3381 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
                        float _2331 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
                        float _2335 = (0.5 / (((isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) + 9.9999999392252902907785028219223e-09) + _2331)) * _2331;
                        float _3392 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
                        float _2344 = (((isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * 3.1415927410125732421875) / ((_2309 * 2.1991131305694580078125) + 3.141590118408203125)) * _2298;
                        _2125 = (_2313 * _2261.x) + _2219;
                        _2126 = (_2313 * _2261.y) + _2220;
                        _2127 = (_2313 * _2261.z) + _2221;
                        _2122 = (_2344 * _2278.x) + _2216;
                        _2123 = (_2344 * _2278.y) + _2217;
                        _2124 = (_2344 * _2278.z) + _2218;
                        if (_2223 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2216 = _2122;
                            _2217 = _2123;
                            _2218 = _2124;
                            _2219 = _2125;
                            _2220 = _2126;
                            _2221 = _2127;
                            _2222 = _2223;
                        }
                    }
                    frontier_phi_74_pred = _2125;
                    frontier_phi_74_pred_1 = _2124;
                    frontier_phi_74_pred_2 = _2123;
                    frontier_phi_74_pred_3 = _2122;
                    frontier_phi_74_pred_4 = _2126;
                    frontier_phi_74_pred_5 = _2127;
                }
                _1874 = frontier_phi_74_pred;
                _1872 = frontier_phi_74_pred_1;
                _1870 = frontier_phi_74_pred_2;
                _1868 = frontier_phi_74_pred_3;
                _1876 = frontier_phi_74_pred_4;
                _1878 = frontier_phi_74_pred_5;
                uint _2048 = _2047 + 1u;
                if (_2048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2041 = _1868;
                    _2042 = _1870;
                    _2043 = _1872;
                    _2044 = _1874;
                    _2045 = _1876;
                    _2046 = _1878;
                    _2047 = _2048;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1867 = _1868;
            _1869 = _1870;
            _1871 = _1872;
            _1873 = _1874;
            _1875 = _1876;
            _1877 = _1878;
        }
        uvec4 _1881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1882 = _1881.z;
        uint _1884 = (_1882 >> 8u) & 15u;
        float _2012;
        float _2014;
        float _2016;
        float _2018;
        float _2020;
        float _2022;
        if (((4294967295u << _1884) & _1776) == 0u)
        {
            _2012 = _1867;
            _2014 = _1869;
            _2016 = _1871;
            _2018 = _1873;
            _2020 = _1875;
            _2022 = _1877;
        }
        else
        {
            float _2037 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_1884 < ((_1882 >> 12u) & 15u))
            {
                float _2013;
                float _2015;
                float _2017;
                float _2019;
                float _2021;
                float _2023;
                float _2199 = _1867;
                float _2200 = _1869;
                float _2201 = _1871;
                float _2202 = _1873;
                float _2203 = _1875;
                float _2204 = _1877;
                uint _2205 = _1884;
                uint _2214;
                bool _2215;
                for (;;)
                {
                    _2214 = texelFetch(g_lightClassification, int((((_1769 << 5u) + (_1755 << 9u)) + (_2205 << 2u)) >> 2u)).x;
                    _2215 = _2214 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2215)
                    {
                        frontier_phi_83_pred = _2202;
                        frontier_phi_83_pred_1 = _2201;
                        frontier_phi_83_pred_2 = _2200;
                        frontier_phi_83_pred_3 = _2199;
                        frontier_phi_83_pred_4 = _2204;
                        frontier_phi_83_pred_5 = _2203;
                    }
                    else
                    {
                        float _2370;
                        float _2371;
                        float _2372;
                        float _2373;
                        float _2374;
                        float _2375;
                        float _2619;
                        float _2620;
                        float _2621;
                        float _2622;
                        float _2623;
                        float _2624;
                        float _2383 = _2199;
                        float _2384 = _2200;
                        float _2385 = _2201;
                        float _2386 = _2202;
                        float _2387 = _2203;
                        float _2388 = _2204;
                        uint _2389 = _2214;
                        uint _2390;
                        vec4 _2415;
                        float _2416;
                        vec4 _2431;
                        vec3 _2443;
                        vec4 _2458;
                        vec4 _2473;
                        float _2519;
                        bool _2520;
                        for (;;)
                        {
                            uint _2400 = ((_2205 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2389));
                            _2390 = (_2389 + 4294967295u) & _2389;
                            uint _2402 = _2400 * 40u;
                            _2415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2402 + 3u)).x));
                            _2416 = _2415.w;
                            uint _2418 = (_2400 * 40u) + 4u;
                            _2431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2418 + 3u)).x));
                            uint _2433 = (_2400 * 40u) + 8u;
                            _2443 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2433 + 2u)).x));
                            uint _2445 = (_2400 * 40u) + 16u;
                            _2458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 3u)).x));
                            uint _2460 = (_2400 * 40u) + 20u;
                            _2473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 3u)).x));
                            uint _2475 = (_2400 * 40u) + 24u;
                            vec4 _2488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2475 + 3u)).x));
                            uint _2494 = (_2400 * 40u) + 28u;
                            vec4 _2507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2494 + 3u)).x));
                            _2519 = fma(_1731, _2507.z, fma(_1730, _2507.y, _2507.x * _1729)) + _2507.w;
                            _2520 = !((fma(_1731, _2488.z, fma(_1730, _2488.y, _2488.x * _1729)) + _2488.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2520)
                            {
                                float _2547 = _2415.x - _1729;
                                float _2548 = _2415.y - _1730;
                                float _2549 = _2415.z - _1731;
                                float _2550 = dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549));
                                float _2553 = inversesqrt(_2550);
                                float _2554 = _2553 * _2547;
                                float _2555 = _2553 * _2548;
                                float _2556 = _2553 * _2549;
                                float _2560 = 1.0 - (_2550 / (_2416 * _2416));
                                float _3403 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
                                float _2561 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
                                float _2565 = sqrt(_2550) * _2431.w;
                                float _2567 = 1.39999997615814208984375 / (_2565 + 1.39999997615814208984375);
                                float _2568 = _2567 * _2567;
                                float _2569 = 1.0 - _2568;
                                float _2571 = (_2569 * dot(vec3(_2554, _2555, _2556), vec3(0.0))) + _2568;
                                float _2574 = _2565 * _2565;
                                float _2578 = (fma(_1731, _2458.z, fma(_1730, _2458.y, _2458.x * _1729)) + _2458.w) / _2519;
                                float _2579 = (fma(_1731, _2473.z, fma(_1730, _2473.y, _2473.x * _1729)) + _2473.w) / _2519;
                                float _2583 = 1.0 - dot(vec2(_2578, _2579), vec2(_2578, _2579));
                                float _3419 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                                float _2584 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
                                float _2585 = _2584 * (((isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0))) * _2561) / ((_2574 * 0.699999988079071044921875) + 1.0));
                                float _2595 = dot(vec3(0.0), vec3((-0.0) - (_1729 * _2037), (-0.0) - (_1730 * _2037), (-0.0) - (_1731 * _2037)));
                                float _3430 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
                                float _2603 = (_2569 * dot(vec3(0.0), vec3(_2554, _2555, _2556))) + _2568;
                                float _3441 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                                float _2604 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
                                float _2608 = (0.5 / (((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) + 9.9999999392252902907785028219223e-09) + _2604)) * _2604;
                                float _3452 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                                float _2615 = (_2584 * _2561) * (((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 3.1415927410125732421875) / ((_2574 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2585 * _2431.x;
                                frontier_phi_89_pred_1 = _2615 * _2443.z;
                                frontier_phi_89_pred_2 = _2615 * _2443.y;
                                frontier_phi_89_pred_3 = _2615 * _2443.x;
                                frontier_phi_89_pred_4 = _2585 * _2431.z;
                                frontier_phi_89_pred_5 = _2585 * _2431.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _2622 = frontier_phi_89_pred;
                            _2621 = frontier_phi_89_pred_1;
                            _2620 = frontier_phi_89_pred_2;
                            _2619 = frontier_phi_89_pred_3;
                            _2624 = frontier_phi_89_pred_4;
                            _2623 = frontier_phi_89_pred_5;
                            _2373 = _2622 + _2386;
                            _2374 = _2623 + _2387;
                            _2375 = _2624 + _2388;
                            _2370 = _2619 + _2383;
                            _2371 = _2620 + _2384;
                            _2372 = _2621 + _2385;
                            if (_2390 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2383 = _2370;
                                _2384 = _2371;
                                _2385 = _2372;
                                _2386 = _2373;
                                _2387 = _2374;
                                _2388 = _2375;
                                _2389 = _2390;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2373;
                        frontier_phi_83_pred_1 = _2372;
                        frontier_phi_83_pred_2 = _2371;
                        frontier_phi_83_pred_3 = _2370;
                        frontier_phi_83_pred_4 = _2375;
                        frontier_phi_83_pred_5 = _2374;
                    }
                    _2019 = frontier_phi_83_pred;
                    _2017 = frontier_phi_83_pred_1;
                    _2015 = frontier_phi_83_pred_2;
                    _2013 = frontier_phi_83_pred_3;
                    _2023 = frontier_phi_83_pred_4;
                    _2021 = frontier_phi_83_pred_5;
                    uint _2206 = _2205 + 1u;
                    if (_2206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2199 = _2013;
                        _2200 = _2015;
                        _2201 = _2017;
                        _2202 = _2019;
                        _2203 = _2021;
                        _2204 = _2023;
                        _2205 = _2206;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2023;
                frontier_phi_65_66_ladder_1 = _2021;
                frontier_phi_65_66_ladder_2 = _2017;
                frontier_phi_65_66_ladder_3 = _2015;
                frontier_phi_65_66_ladder_4 = _2019;
                frontier_phi_65_66_ladder_5 = _2013;
            }
            else
            {
                frontier_phi_65_66_ladder = _1877;
                frontier_phi_65_66_ladder_1 = _1875;
                frontier_phi_65_66_ladder_2 = _1871;
                frontier_phi_65_66_ladder_3 = _1869;
                frontier_phi_65_66_ladder_4 = _1873;
                frontier_phi_65_66_ladder_5 = _1867;
            }
            _2012 = frontier_phi_65_66_ladder_5;
            _2014 = frontier_phi_65_66_ladder_3;
            _2016 = frontier_phi_65_66_ladder_2;
            _2018 = frontier_phi_65_66_ladder_4;
            _2020 = frontier_phi_65_66_ladder_1;
            _2022 = frontier_phi_65_66_ladder;
        }
        float _2027 = isnan(1.0) ? _576 : (isnan(_576) ? 1.0 : min(_576, 1.0));
        _1789 = (_2027 * _2018) + _1568;
        _1791 = (_2027 * _2020) + _1569;
        _1793 = (_2027 * _2022) + _1570;
        _1795 = ((_2012 * 0.039999999105930328369140625) * _2027) + _1670;
        _1797 = ((_2014 * 0.039999999105930328369140625) * _2027) + _1671;
        _1799 = ((_2016 * 0.039999999105930328369140625) * _2027) + _1672;
    }
    else
    {
        _1789 = _1568;
        _1791 = _1569;
        _1793 = _1570;
        _1795 = _1670;
        _1797 = _1671;
        _1799 = _1672;
    }
    float _3468 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3479 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3490 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _1816 = ((isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_1789 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _576))) + ((_1795 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _1817 = ((isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_1791 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _576))) + ((_1797 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _1818 = ((isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_1793 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _576))) + ((_1799 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    uint _1822 = _550 + 6u;
    float _1830 = _536 / cbSceneParam._m0[86u].x;
    float _1831 = _537 / cbSceneParam._m0[86u].y;
    vec4 _1845 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1830, _1831, (log2((isnan(cbSceneParam._m0[77u].w) ? _523 : (isnan(_523) ? cbSceneParam._m0[77u].w : min(_523, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1847 = _1845.x;
    float _1848 = _1845.y;
    float _1849 = _1845.z;
    float _1850 = _1845.w;
    float _1930;
    float _1932;
    float _1934;
    float _1936;
    if (_523 > cbSceneParam._m0[78u].w)
    {
        float _1892 = isnan(_523) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _523 : min(cbSceneParam._m0[80u].w, _523));
        float _1893 = _1892 / _523;
        float _1904 = _1893 * _251;
        float _1905 = _252 * _1893;
        float _1906 = (-0.0) - _1905;
        float _1907 = _1893 * _253;
        float _1909 = (cbSceneParam._m0[77u].w * _1906) / _1892;
        float _1910 = _1909 + cbSceneParam._m0[79u].w;
        float _1911 = cbSceneParam._m0[79u].w - _1905;
        float _1917 = sqrt(((_1904 * _1904) + (_1905 * _1905)) + (_1907 * _1907));
        float _1920 = (1.0 - (cbSceneParam._m0[77u].w / _1892)) * _1917;
        float _1926 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1928 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2135;
        if (abs((_1906 - _1909) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2135 = ((((_1910 > 0.0) ? exp2(_1926 * _1910) : (2.0 - exp2(_1928 * _1910))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1920;
        }
        else
        {
            float _2070 = 1.0 / cbSceneParam._m0[80u].x;
            float _2071 = isnan(_1911) ? _1910 : (isnan(_1910) ? _1911 : max(_1910, _1911));
            float _2072 = isnan(_1911) ? _1910 : (isnan(_1910) ? _1911 : min(_1910, _1911));
            float _2081 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : min(_2071, 0.0));
            float _2082 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : min(_2072, 0.0));
            _2135 = ((abs(_1917 / _1906) * cbSceneParam._m0[80u].y) * ((((_2081 - _2082) * 2.0) - ((exp2(_1926 * (isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0)))) - exp2(_1926 * (isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))))) * _2070)) - ((exp2(_1928 * _2081) - exp2(_1928 * _2082)) * _2070))) + (_1920 * cbSceneParam._m0[80u].z);
        }
        vec4 _2137 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1830, _1831, 1.0), 0.0);
        float _2146 = exp2((_2135 * (-1.44269502162933349609375)) * (1.0 - _2137.w));
        float _2147 = log2(_2146);
        float _2163 = log2(_1850);
        _1930 = (exp2(_2163 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2147 * cbSceneParam._m0[78u].x)) * _2137.x) / cbSceneParam._m0[78u].x)) + _1847;
        _1932 = (exp2(_2163 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2147 * cbSceneParam._m0[78u].y)) * _2137.y) / cbSceneParam._m0[78u].y)) + _1848;
        _1934 = (exp2(_2163 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2147 * cbSceneParam._m0[78u].z)) * _2137.z) / cbSceneParam._m0[78u].z)) + _1849;
        _1936 = _2146 * _1850;
    }
    else
    {
        _1930 = _1847;
        _1932 = _1848;
        _1934 = _1849;
        _1936 = _1850;
    }
    float _1948 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1949 = _1948 == 3.0;
    float _1951 = log2(_1936);
    float _1958 = exp2(_1951 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
    float _1959 = exp2(_1951 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)));
    float _1960 = exp2(_1951 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
    float _1969 = (_1948 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1969 * (_1949 ? _1958 : (_1958 + (cbSceneParam._m0[72u].w * _1930)));
    SV_Target.y = _1969 * (_1949 ? _1959 : (_1959 + (cbSceneParam._m0[72u].w * _1932)));
    SV_Target.z = _1969 * (_1949 ? _1960 : (_1960 + (cbSceneParam._m0[72u].w * _1934)));
    SV_Target.w = cbInstanceData._m0[_1822].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1822].w;
}


