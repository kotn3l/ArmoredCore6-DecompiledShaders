#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1000;
float _3113;
float _3114;
float _3115;
float _3116;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    float _376 = (_352 > 0.0) ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_357 + (-0.5)) + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_358 + (-0.5)) + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _434 = 0.5 - (_286 * 0.5);
    float _441 = ((((_416 - (_416 * _286)) * cbMtdParam._m0[9u].x) - _299) * _434) + _299;
    float _442 = ((((_417 - (_417 * _286)) * cbMtdParam._m0[9u].y) - _301) * _434) + _301;
    float _443 = (((cbMtdParam._m0[9u].z * (_418 - (_418 * _286))) - _303) * _434) + _303;
    vec4 _455 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _463 = (_455.x * 2.0) + (-1.0);
    float _465 = (_455.y * 2.0) + (-1.0);
    float _466 = dot(vec2(_463, _465), vec2(_463, _465));
    float _3135 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0))));
    float _472 = _455.z * _286;
    float _475 = fma(_471, _195, fma(_465, _202, _463 * _188));
    float _478 = fma(_471, _196, fma(_465, _203, _463 * _189));
    float _481 = fma(_471, _197, fma(_465, _204, _463 * _190));
    float _485 = inversesqrt(dot(vec3(_475, _478, _481), vec3(_475, _478, _481)));
    float _486 = _485 * _475;
    float _487 = _485 * _478;
    float _488 = _485 * _481;
    float _3146 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _489 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
    float _3157 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3168 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3179 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _508 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _513 = _259 * _512;
    float _514 = _260 * _512;
    float _515 = _261 * _512;
    vec4 _520 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _522 = _520.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _681 = sqrt(((_259 * _259) + (_260 * _260)) + (_261 * _261));
        float _687 = (cbMatDynParam._m0[5u].x * _681) + cbMatDynParam._m0[5u].y;
        float _3190 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
        float _692 = (cbMatDynParam._m0[5u].z * _681) + cbMatDynParam._m0[5u].w;
        float _3201 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0))) - _688)) + _688) < ((_522 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _535 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _536 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _556 = fma(_488, cbSceneParam._m0[5u].z, fma(_487, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _486));
    float _559 = fma(_488, cbSceneParam._m0[6u].z, fma(_487, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _486));
    float _562 = fma(_488, cbSceneParam._m0[7u].z, fma(_487, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _486));
    uint _575 = uint(roundEven(NORMAL.w)) * 13u;
    uint _577 = _575 + 9u;
    uint _578 = _577 + uint(cbMatDynParam._m0[0u].w);
    float _584 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0)))) * cbInstanceData._m0[_578].x;
    float _585 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0)))) * cbInstanceData._m0[_578].y;
    float _586 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0)))) * cbInstanceData._m0[_578].z;
    float _3212 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _3223 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
    float _3234 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    vec4 _598 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _535, cbSceneParam._m0[86u].y * _536));
    float _601 = _598.x * TEXCOORD.z;
    float _602 = dot(vec3(_486, _487, _488), vec3(_513, _514, _515));
    float _605 = _602 * 2.0;
    float _609 = (_605 * _486) - _513;
    float _610 = (_605 * _487) - _514;
    float _611 = (_605 * _488) - _515;
    float _615 = abs(dot(vec3(_513, _514, _515), vec3(_486, _487, _488)));
    float _3245 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _617 = sqrt(_489);
    float _630 = exp2((_617 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_617 * 3.0));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _999;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _726 = fma(_670, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662));
        float _730 = fma(_670, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662));
        float _734 = fma(_670, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662));
        float _757 = _662 + _486;
        float _758 = _666 + _487;
        float _759 = _670 + _488;
        float _769 = fma(_759, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757)) - _726;
        float _770 = fma(_759, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757)) - _730;
        float _771 = fma(_759, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757)) - _734;
        float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
        float _788 = ((_775 * _769) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_726 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_775 * _770) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_730 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_775 * _771) / cbModelParam._m0[34u].z) + ((((((_734 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        float _827 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_793.x + (-0.5));
        float _829 = _827 * (_793.y + (-0.5));
        float _830 = _827 * (_793.z + (-0.5));
        float _837 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_800.x + (-0.5));
        float _839 = _837 * (_800.y + (-0.5));
        float _840 = _837 * (_800.z + (-0.5));
        float _847 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_807.x + (-0.5));
        float _849 = _847 * (_807.y + (-0.5));
        float _850 = _847 * (_807.z + (-0.5));
        float _857 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_814.x + (-0.5));
        float _859 = _857 * (_814.y + (-0.5));
        float _860 = _857 * (_814.z + (-0.5));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = _828 * 0.5;
        float _865 = _838 * 0.5;
        float _866 = _848 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _881 = (dot(vec3(_486, _487, _488), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3271 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _891 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3282 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3293 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * (_893 + 1.0))) + _898) * _861;
        float _908 = _829 * 0.5;
        float _909 = _839 * 0.5;
        float _910 = _849 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_486, _487, _488), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3304 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3315 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3326 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))) * (_935 + 1.0))) + _940) * _862;
        float _950 = _830 * 0.5;
        float _951 = _840 * 0.5;
        float _952 = _850 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_486, _487, _488), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3337 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3348 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3359 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))) * (_977 + 1.0))) + _982) * _863;
        _999 = _830;
        _1001 = _829;
        _1002 = _828;
        _1003 = _840;
        _1004 = _839;
        _1005 = _838;
        _1006 = _850;
        _1007 = _849;
        _1008 = _848;
        _1009 = _863;
        _1010 = _862;
        _1011 = _861;
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
    }
    else
    {
        _999 = _1000;
        _1001 = _1000;
        _1002 = _1000;
        _1003 = _1000;
        _1004 = _1000;
        _1005 = _1000;
        _1006 = _1000;
        _1007 = _1000;
        _1008 = _1000;
        _1009 = _1000;
        _1010 = _1000;
        _1011 = _1000;
        _1012 = 0.0;
        _1013 = 0.0;
        _1014 = 0.0;
    }
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1043 = fma(_670, cbModelParam._m0[30u].z, fma(_666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _662));
        float _1047 = fma(_670, cbModelParam._m0[31u].z, fma(_666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _662));
        float _1051 = fma(_670, cbModelParam._m0[32u].z, fma(_666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _662));
        float _1074 = _662 + _486;
        float _1075 = _666 + _487;
        float _1076 = _670 + _488;
        float _1086 = fma(_1076, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1074)) - _1043;
        float _1087 = fma(_1076, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1074)) - _1047;
        float _1088 = fma(_1076, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1074)) - _1051;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1043 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1047 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[35u].z) + ((((((_1051 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1142 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1109.x + (-0.5));
        float _1144 = _1142 * (_1109.y + (-0.5));
        float _1145 = _1142 * (_1109.z + (-0.5));
        float _1152 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1116.x + (-0.5));
        float _1154 = _1152 * (_1116.y + (-0.5));
        float _1155 = _1152 * (_1116.z + (-0.5));
        float _1162 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1123.x + (-0.5));
        float _1164 = _1162 * (_1123.y + (-0.5));
        float _1165 = _1162 * (_1123.z + (-0.5));
        float _1172 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1130.x + (-0.5));
        float _1174 = _1172 * (_1130.y + (-0.5));
        float _1175 = _1172 * (_1130.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_486, _487, _488), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3422 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_1206 + 1.0))) + _1211) * _1176;
        float _1221 = _1144 * 0.5;
        float _1222 = _1154 * 0.5;
        float _1223 = _1164 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_486, _487, _488), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3433 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3444 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3455 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * (_1248 + 1.0))) + _1253) * _1177;
        float _1263 = _1145 * 0.5;
        float _1264 = _1155 * 0.5;
        float _1265 = _1165 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_486, _487, _488), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3466 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3477 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3488 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * (_1290 + 1.0))) + _1295) * _1178;
        _1312 = _1145;
        _1313 = _1144;
        _1314 = _1143;
        _1315 = _1155;
        _1316 = _1154;
        _1317 = _1153;
        _1318 = _1165;
        _1319 = _1164;
        _1320 = _1163;
        _1321 = _1178;
        _1322 = _1177;
        _1323 = _1176;
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
    }
    else
    {
        _1312 = _1000;
        _1313 = _1000;
        _1314 = _1000;
        _1315 = _1000;
        _1316 = _1000;
        _1317 = _1000;
        _1318 = _1000;
        _1319 = _1000;
        _1320 = _1000;
        _1321 = _1000;
        _1322 = _1000;
        _1323 = _1000;
        _1324 = 0.0;
        _1325 = 0.0;
        _1326 = 0.0;
    }
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1012)) + _1012;
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1013)) + _1013;
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1014)) + _1014;
    float _1359 = fma(_1338, cbSceneParam._m0[89u].z, fma(_1337, cbSceneParam._m0[89u].y, _1336 * cbSceneParam._m0[89u].x));
    float _1362 = fma(_1338, cbSceneParam._m0[90u].z, fma(_1337, cbSceneParam._m0[90u].y, _1336 * cbSceneParam._m0[90u].x));
    float _1365 = fma(_1338, cbSceneParam._m0[91u].z, fma(_1337, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1336));
    float _1380 = _609 * 0.5;
    float _1381 = _610 * 0.5;
    float _1382 = _611 * 0.5;
    float _1383 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1386 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1389 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1423;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1396 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_999, _1003, _1006, _1009));
        float _1400 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1404 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1411 = dot(vec4(cbModelParam._m0[39u]), vec4(_1380, _1381, _1382, 1.0));
        _1423 = dot(vec3(isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1411) ? 0.0 : (isnan(0.0) ? _1411 : max(0.0, _1411))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1423 = 1.0;
    }
    float _1434;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1425 = dot(vec4(cbModelParam._m0[40u]), vec4(_1380, _1381, _1382, 1.0));
        _1434 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1434 = 1.0;
    }
    float _1438 = (_1434 * cbModelParam._m0[1u].x) + (_1423 * (1.0 - cbModelParam._m0[1u].x));
    float _1448 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _489);
    float _1449 = isnan(_1448) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1448 : min(cbModelParam._m0[25u].z, _1448));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1497 = fma(_670, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662)) + cbModelParam._m0[13u].w;
        float _1501 = fma(_670, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662)) + cbModelParam._m0[14u].w;
        float _1505 = fma(_670, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662)) + cbModelParam._m0[15u].w;
        float _1508 = fma(_611, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609));
        float _1511 = fma(_611, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609));
        float _1514 = fma(_611, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609));
        float _1542;
        if (_1508 > 0.0)
        {
            _1542 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1542 = frontier_phi_25_23_ladder;
        }
        float _1888;
        if (_1511 > 0.0)
        {
            _1888 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1888 = frontier_phi_34_30_ladder;
        }
        float _2196;
        if (_1514 > 0.0)
        {
            _2196 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2196 = frontier_phi_48_41_ladder;
        }
        float _2198 = isnan(_1888) ? _1542 : (isnan(_1542) ? _1888 : min(_1542, _1888));
        float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
        float _2203 = (_2199 * _1508) + _1497;
        float _2204 = (_2199 * _1511) + _1501;
        float _2205 = (_2199 * _1514) + _1505;
        float _2206 = _2199 * 9.9999997473787516355514526367188e-05;
        float _2207 = (-1.0) - _2206;
        float _2209 = _2206 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2205 > _2209) || ((_2205 < _2207) || ((_2204 > _2209) || ((_2204 < _2207) || ((_2203 < _2207) || (_2203 > _2209))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2205, cbModelParam._m0[9u].z, fma(_2204, cbModelParam._m0[9u].y, _2203 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2205, cbModelParam._m0[10u].z, fma(_2204, cbModelParam._m0[10u].y, _2203 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2205, cbModelParam._m0[11u].z, fma(_2204, cbModelParam._m0[11u].y, _2203 * cbModelParam._m0[11u].x))), _1449);
            frontier_phi_24_48_ladder = _2347.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2347.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2347.x * cbModelParam._m0[1u].y;
        }
        _1530 = frontier_phi_24_48_ladder_2;
        _1532 = frontier_phi_24_48_ladder_1;
        _1534 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_609, _610, _611), _1449);
        _1530 = _1518.x * cbModelParam._m0[1u].y;
        _1532 = _1518.y * cbModelParam._m0[1u].y;
        _1534 = _1518.z * cbModelParam._m0[1u].y;
    }
    float _1538 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _489);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1538 : min(cbModelParam._m0[25u].w, _1538));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1592 = fma(_670, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662)) + cbModelParam._m0[21u].w;
        float _1596 = fma(_670, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662)) + cbModelParam._m0[22u].w;
        float _1600 = fma(_670, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662)) + cbModelParam._m0[23u].w;
        float _1603 = fma(_611, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609));
        float _1606 = fma(_611, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609));
        float _1609 = fma(_611, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609));
        float _1893;
        if (_1603 > 0.0)
        {
            _1893 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1893 = frontier_phi_36_32_ladder;
        }
        float _2222;
        if (_1606 > 0.0)
        {
            _2222 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2222 = frontier_phi_50_43_ladder;
        }
        float _2412;
        if (_1609 > 0.0)
        {
            _2412 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2412 = frontier_phi_68_61_ladder;
        }
        float _2414 = isnan(_2222) ? _1893 : (isnan(_1893) ? _2222 : min(_1893, _2222));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1603) + _1592;
        float _2420 = (_2415 * _1606) + _1596;
        float _2421 = (_2415 * _1609) + _1600;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2422;
        float _2425 = _2422 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2421 > _2425) || ((_2421 < _2423) || ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 < _2423) || (_2419 > _2425))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2421, cbModelParam._m0[17u].z, fma(_2420, cbModelParam._m0[17u].y, _2419 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2421, cbModelParam._m0[18u].z, fma(_2420, cbModelParam._m0[18u].y, _2419 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2421, cbModelParam._m0[19u].z, fma(_2420, cbModelParam._m0[19u].y, _2419 * cbModelParam._m0[19u].x))), _1539);
            frontier_phi_33_68_ladder = _2663.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2663.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2663.x * cbModelParam._m0[1u].z;
        }
        _1628 = frontier_phi_33_68_ladder_2;
        _1630 = frontier_phi_33_68_ladder;
        _1632 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_609, _610, _611), _1539);
        _1628 = _1612.x * cbModelParam._m0[1u].z;
        _1630 = _1612.y * cbModelParam._m0[1u].z;
        _1632 = _1612.z * cbModelParam._m0[1u].z;
    }
    float _1644 = ((((1.0 - _630) * ((_617 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_630 * _617)) * _601;
    float _1645 = _1644 * ((cbModelParam._m0[1u].w * (_1628 - _1530)) + _1530);
    float _1646 = _1644 * ((cbModelParam._m0[1u].w * (_1630 - _1532)) + _1532);
    float _1647 = _1644 * ((cbModelParam._m0[1u].w * (_1632 - _1534)) + _1534);
    float _1650 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, _1645 * cbSceneParam._m0[91u].x));
    uvec4 _1666 = floatBitsToUint(cbInstanceData._m0[_575 + 5u]);
    uint _1668 = _1666.x * 14u;
    uint _1669 = _1668 + 13u;
    float _1674 = _601 + (-1.0);
    float _1677 = (cbLight._m0[_1669].x * _1674) + 1.0;
    float _1678 = (cbLight._m0[_1669].y * _1674) + 1.0;
    uint _1679 = _1668 + 5u;
    float _1685 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
    uint _1689 = _1668 + 4u;
    float _1695 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1699 = _1668 | 1u;
    float _1710 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_486, _487, _488));
    float _1713 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_486, _487, _488));
    float _3624 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _3635 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1718 = (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.3183098733425140380859375;
    float _1720 = (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * 0.3183098733425140380859375;
    float _1727 = ((cbLight._m0[_1679].x * _1685) * _1720) + ((cbLight._m0[_1689].x * _1695) * _1718);
    float _1728 = ((_1685 * cbLight._m0[_1679].y) * _1720) + ((_1695 * cbLight._m0[_1689].y) * _1718);
    float _1729 = ((_1685 * cbLight._m0[_1679].z) * _1720) + ((_1695 * cbLight._m0[_1689].z) * _1718);
    uint _1731 = _1668 + 8u;
    float _1744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1668].w)) * _489) * 0.949999988079071044921875);
    float _1745 = _1744 * _1744;
    float _1746 = cbLight._m0[_1668].x + _513;
    float _1747 = cbLight._m0[_1668].y + _514;
    float _1748 = cbLight._m0[_1668].z + _515;
    float _1752 = inversesqrt(dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748)));
    float _1753 = _1752 * _1746;
    float _1754 = _1752 * _1747;
    float _1755 = _1752 * _1748;
    float _1756 = dot(vec3(_486, _487, _488), vec3(cbLight._m0[_1668].xyz));
    float _3646 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1760 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _1761 = dot(vec3(_486, _487, _488), vec3(_1753, _1754, _1755));
    float _3668 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _1765 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_1753, _1754, _1755));
    float _3679 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1769 = _1745 * _1745;
    float _1773 = ((_1764 * _1764) * (_1769 + (-1.0))) + 1.0;
    float _1784 = (exp2(log2(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1785 = 1.0 - _1745;
    float _1796 = (0.5 / (((_1760 * ((_1759 * _1785) + _1745)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _1785) + _1745) * _1759))) * _1759;
    float _3690 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1798 = (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1769 / ((_1773 * _1773) * 3.141590118408203125));
    uint _1809 = _1668 + 9u;
    float _1820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _489) * 0.949999988079071044921875);
    float _1821 = _1820 * _1820;
    float _1822 = cbLight._m0[_1699].x + _513;
    float _1823 = cbLight._m0[_1699].y + _514;
    float _1824 = cbLight._m0[_1699].z + _515;
    float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
    float _1829 = _1828 * _1822;
    float _1830 = _1828 * _1823;
    float _1831 = _1828 * _1824;
    float _1832 = dot(vec3(_486, _487, _488), vec3(cbLight._m0[_1699].xyz));
    float _3701 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _1836 = dot(vec3(_486, _487, _488), vec3(_1829, _1830, _1831));
    float _3712 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _1840 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1829, _1830, _1831));
    float _3723 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1844 = _1821 * _1821;
    float _1848 = ((_1839 * _1839) * (_1844 + (-1.0))) + 1.0;
    float _1857 = (exp2(log2(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1858 = 1.0 - _1821;
    float _1868 = (0.5 / (((_1760 * ((_1835 * _1858) + _1821)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _1858) + _1821) * _1835))) * _1835;
    float _3734 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1844 / ((_1848 * _1848) * 3.141590118408203125));
    float _1880 = (((_1857 * cbLight._m0[_1809].x) * _1870) * _1685) + (((_1784 * cbLight._m0[_1731].x) * _1798) * _1695);
    float _1881 = (((_1857 * cbLight._m0[_1809].y) * _1870) * _1685) + (((_1784 * cbLight._m0[_1731].y) * _1798) * _1695);
    float _1882 = (((_1857 * cbLight._m0[_1809].z) * _1870) * _1685) + (((_1784 * cbLight._m0[_1731].z) * _1798) * _1695);
    float _1997;
    float _1999;
    float _2001;
    float _2003;
    float _2005;
    float _2007;
    if (_1666.y == 0u)
    {
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1937;
        float _1939 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1937;
        float _1940 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1937;
        uvec4 _1952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1953 = _1952.x;
        uint _1964 = uint((float(_1952.y) * floor(float(uint(cbSceneParam._m0[85u].y * _536) / _1953))) + floor(float(uint(cbSceneParam._m0[85u].x * _535) / _1953)));
        float _1974 = (log2(_1940 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1975 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        uint _1978 = uint(isnan(14.0) ? _1975 : (isnan(_1975) ? 14.0 : min(_1975, 14.0)));
        uvec4 _1983 = texelFetch(g_lightClusterGridBuffer, int(((_1978 << 2u) + (_1964 << 6u)) >> 2u));
        uint _1984 = _1983.x;
        uint _1985 = _1952.z;
        float _2075;
        float _2077;
        float _2079;
        float _2081;
        float _2083;
        float _2085;
        if (((((1u << ((_1985 >> 4u) & 15u)) + 4294967295u) & _1984) == 0u) || ((_1985 & 240u) == 0u))
        {
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
        }
        else
        {
            float _2076;
            float _2078;
            float _2080;
            float _2082;
            float _2084;
            float _2086;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            float _2262 = 0.0;
            float _2263 = 0.0;
            float _2264 = 0.0;
            uint _2265 = 0u;
            uint _2274;
            bool _2275;
            for (;;)
            {
                _2274 = texelFetch(g_lightClassification, int((((_1978 << 5u) + (_1964 << 9u)) + (_2265 << 2u)) >> 2u)).x;
                _2275 = _2274 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2275)
                {
                    frontier_phi_63_pred = _2261;
                    frontier_phi_63_pred_1 = _2264;
                    frontier_phi_63_pred_2 = _2263;
                    frontier_phi_63_pred_3 = _2262;
                    frontier_phi_63_pred_4 = _2260;
                    frontier_phi_63_pred_5 = _2259;
                }
                else
                {
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    uint _2461;
                    _2455 = _2259;
                    _2456 = _2260;
                    _2457 = _2261;
                    _2458 = _2262;
                    _2459 = _2263;
                    _2460 = _2264;
                    _2461 = _2274;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    for (;;)
                    {
                        uint _2465 = uint(findLSB(_2461)) + (_2265 << 5u);
                        uint _2462 = (_2461 + 4294967295u) & _2461;
                        uint _2467 = _2465 * 48u;
                        vec4 _2481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2467)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 3u)).x));
                        uint _2487 = (_2465 * 48u) + 4u;
                        vec4 _2500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2487)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 3u)).x));
                        uint _2506 = (_2465 * 48u) + 8u;
                        vec3 _2517 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2506)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 2u)).x));
                        float _2521 = _2481.x - _1938;
                        float _2522 = _2481.y - _1939;
                        float _2523 = _2481.z - _1940;
                        float _2524 = dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523));
                        float _2527 = inversesqrt(_2524);
                        float _2528 = _2527 * _2521;
                        float _2529 = _2527 * _2522;
                        float _2530 = _2527 * _2523;
                        float _2531 = dot(vec3(_556, _559, _562), vec3(_2528, _2529, _2530));
                        float _2536 = 1.0 - (_2524 * _2481.w);
                        float _3755 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
                        float _2537 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                        float _2538 = sqrt(_2524) * _2500.w;
                        float _2541 = 1.39999997615814208984375 / (_2538 + 1.39999997615814208984375);
                        float _2542 = _2541 * _2541;
                        float _2545 = ((1.0 - _2542) * _2531) + _2542;
                        float _2548 = _2538 * _2538;
                        float _2552 = ((isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0))) * _2537) / ((_2548 * 0.699999988079071044921875) + 1.0);
                        float _2556 = (-0.0) - _1938;
                        float _2557 = (-0.0) - _1939;
                        float _2558 = (-0.0) - _1940;
                        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
                        float _2563 = _2562 * _2556;
                        float _2564 = _2562 * _2557;
                        float _2565 = _2562 * _2558;
                        float _2573 = exp2(log2(1.0 / ((_2548 * 3.5) + 5.0)) * 0.25);
                        float _2574 = 1.0 - _617;
                        float _2581 = sqrt(1.0 - ((1.0 - (_2574 * _2574)) * (1.0 - (_2573 * _2573))));
                        float _2582 = _2581 * _2581;
                        float _2583 = _2582 * _2582;
                        float _2584 = _2563 + _2528;
                        float _2585 = _2564 + _2529;
                        float _2586 = _2565 + _2530;
                        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
                        float _2594 = dot(vec3(_556, _559, _562), vec3(_2563, _2564, _2565));
                        float _3771 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
                        float _2597 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                        float _2598 = dot(vec3(_556, _559, _562), vec3(_2590 * _2584, _2590 * _2585, _2590 * _2586));
                        float _3782 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
                        float _2601 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
                        float _2605 = ((_2601 * _2601) * (_2583 + (-1.0))) + 1.0;
                        float _2606 = _2541 * _2582;
                        float _2607 = _2606 * _2606;
                        float _2610 = ((1.0 - _2607) * _2531) + _2607;
                        float _3793 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
                        float _2611 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
                        float _2612 = 1.0 - _2582;
                        float _2622 = (0.5 / (((_2611 * ((_2597 * _2612) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2612) + _2582) * _2597))) * _2611;
                        float _3804 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
                        float _2633 = (((_2583 * 3.1415927410125732421875) * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) / ((_2605 * _2605) * ((_2548 * 2.1991131305694580078125) + 3.141590118408203125))) * _2537;
                        _2359 = (_2552 * _2500.x) + _2458;
                        _2360 = (_2552 * _2500.y) + _2459;
                        _2361 = (_2552 * _2500.z) + _2460;
                        _2356 = (_2633 * _2517.x) + _2455;
                        _2357 = (_2633 * _2517.y) + _2456;
                        _2358 = (_2633 * _2517.z) + _2457;
                        if (_2462 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2455 = _2356;
                            _2456 = _2357;
                            _2457 = _2358;
                            _2458 = _2359;
                            _2459 = _2360;
                            _2460 = _2361;
                            _2461 = _2462;
                        }
                    }
                    frontier_phi_63_pred = _2358;
                    frontier_phi_63_pred_1 = _2361;
                    frontier_phi_63_pred_2 = _2360;
                    frontier_phi_63_pred_3 = _2359;
                    frontier_phi_63_pred_4 = _2357;
                    frontier_phi_63_pred_5 = _2356;
                }
                _2080 = frontier_phi_63_pred;
                _2086 = frontier_phi_63_pred_1;
                _2084 = frontier_phi_63_pred_2;
                _2082 = frontier_phi_63_pred_3;
                _2078 = frontier_phi_63_pred_4;
                _2076 = frontier_phi_63_pred_5;
                uint _2266 = _2265 + 1u;
                if (_2266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2259 = _2076;
                    _2260 = _2078;
                    _2261 = _2080;
                    _2262 = _2082;
                    _2263 = _2084;
                    _2264 = _2086;
                    _2265 = _2266;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
        }
        uvec4 _2089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2090 = _2089.z;
        uint _2092 = (_2090 >> 8u) & 15u;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        float _2235;
        float _2237;
        if (((4294967295u << _2092) & _1984) == 0u)
        {
            _2227 = _2075;
            _2229 = _2077;
            _2231 = _2079;
            _2233 = _2081;
            _2235 = _2083;
            _2237 = _2085;
        }
        else
        {
            float _2252 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
            float _2253 = _2252 * _1938;
            float _2254 = _2252 * _1939;
            float _2255 = _2252 * _1940;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2092 < ((_2090 >> 12u) & 15u))
            {
                float _2228;
                float _2230;
                float _2232;
                float _2234;
                float _2236;
                float _2238;
                float _2438 = _2075;
                float _2439 = _2077;
                float _2440 = _2079;
                float _2441 = _2081;
                float _2442 = _2083;
                float _2443 = _2085;
                uint _2444 = _2092;
                uint _2453;
                bool _2454;
                for (;;)
                {
                    _2453 = texelFetch(g_lightClassification, int((((_1978 << 5u) + (_1964 << 9u)) + (_2444 << 2u)) >> 2u)).x;
                    _2454 = _2453 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2454)
                    {
                        frontier_phi_77_pred = _2443;
                        frontier_phi_77_pred_1 = _2442;
                        frontier_phi_77_pred_2 = _2441;
                        frontier_phi_77_pred_3 = _2440;
                        frontier_phi_77_pred_4 = _2439;
                        frontier_phi_77_pred_5 = _2438;
                    }
                    else
                    {
                        float _2668;
                        float _2669;
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2673;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2681 = _2438;
                        float _2682 = _2439;
                        float _2683 = _2440;
                        float _2684 = _2441;
                        float _2685 = _2442;
                        float _2686 = _2443;
                        uint _2687 = _2453;
                        uint _2688;
                        vec4 _2713;
                        float _2714;
                        vec4 _2729;
                        vec3 _2741;
                        vec4 _2756;
                        vec4 _2772;
                        float _2818;
                        bool _2819;
                        for (;;)
                        {
                            uint _2698 = ((_2444 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2687));
                            _2688 = (_2687 + 4294967295u) & _2687;
                            uint _2700 = _2698 * 40u;
                            _2713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 3u)).x));
                            _2714 = _2713.w;
                            uint _2716 = (_2698 * 40u) + 4u;
                            _2729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 3u)).x));
                            uint _2731 = (_2698 * 40u) + 8u;
                            _2741 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 2u)).x));
                            uint _2743 = (_2698 * 40u) + 16u;
                            _2756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 3u)).x));
                            uint _2759 = (_2698 * 40u) + 20u;
                            _2772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 3u)).x));
                            uint _2774 = (_2698 * 40u) + 24u;
                            vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            uint _2793 = (_2698 * 40u) + 28u;
                            vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            _2818 = fma(_1940, _2806.z, fma(_1939, _2806.y, _2806.x * _1938)) + _2806.w;
                            _2819 = !((fma(_1940, _2787.z, fma(_1939, _2787.y, _2787.x * _1938)) + _2787.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2819)
                            {
                                float _2846 = _2713.x - _1938;
                                float _2847 = _2713.y - _1939;
                                float _2848 = _2713.z - _1940;
                                float _2849 = dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848));
                                float _2852 = inversesqrt(_2849);
                                float _2853 = _2852 * _2846;
                                float _2854 = _2852 * _2847;
                                float _2855 = _2852 * _2848;
                                float _2859 = 1.0 - (_2849 / (_2714 * _2714));
                                float _3815 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                                float _2860 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
                                float _2864 = sqrt(_2849) * _2729.w;
                                float _2866 = 1.39999997615814208984375 / (_2864 + 1.39999997615814208984375);
                                float _2867 = _2866 * _2866;
                                float _2870 = ((1.0 - _2867) * dot(vec3(_2853, _2854, _2855), vec3(_556, _559, _562))) + _2867;
                                float _2873 = _2864 * _2864;
                                float _2877 = (fma(_1940, _2756.z, fma(_1939, _2756.y, _2756.x * _1938)) + _2756.w) / _2818;
                                float _2878 = (fma(_1940, _2772.z, fma(_1939, _2772.y, _2772.x * _1938)) + _2772.w) / _2818;
                                float _2882 = 1.0 - dot(vec2(_2877, _2878), vec2(_2877, _2878));
                                float _3831 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                                float _2883 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
                                float _2884 = _2883 * (((isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))) * _2860) / ((_2873 * 0.699999988079071044921875) + 1.0));
                                float _2896 = exp2(log2(1.0 / ((_2873 * 3.5) + 5.0)) * 0.25);
                                float _2897 = 1.0 - _617;
                                float _2904 = sqrt(1.0 - ((1.0 - (_2897 * _2897)) * (1.0 - (_2896 * _2896))));
                                float _2905 = _2904 * _2904;
                                float _2906 = _2905 * _2905;
                                float _2907 = _2853 - _2253;
                                float _2908 = _2854 - _2254;
                                float _2909 = _2855 - _2255;
                                float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                                float _2917 = dot(vec3(_556, _559, _562), vec3((-0.0) - _2253, (-0.0) - _2254, (-0.0) - _2255));
                                float _3842 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                                float _2920 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
                                float _2921 = dot(vec3(_556, _559, _562), vec3(_2913 * _2907, _2913 * _2908, _2913 * _2909));
                                float _3853 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                                float _2924 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
                                float _2928 = ((_2924 * _2924) * (_2906 + (-1.0))) + 1.0;
                                float _2929 = _2866 * _2905;
                                float _2930 = _2929 * _2929;
                                float _2936 = ((1.0 - _2930) * dot(vec3(_556, _559, _562), vec3(_2853, _2854, _2855))) + _2930;
                                float _3864 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                                float _2937 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
                                float _2938 = 1.0 - _2905;
                                float _2948 = (0.5 / (((_2937 * ((_2920 * _2938) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2937 * _2938) + _2905) * _2920))) * _2937;
                                float _3875 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                                float _2958 = (_2883 * _2860) * (((_2906 * 3.1415927410125732421875) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) / ((_2928 * _2928) * ((_2873 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2884 * _2729.x;
                                frontier_phi_83_pred_1 = _2884 * _2729.z;
                                frontier_phi_83_pred_2 = _2884 * _2729.y;
                                frontier_phi_83_pred_3 = _2958 * _2741.z;
                                frontier_phi_83_pred_4 = _2958 * _2741.y;
                                frontier_phi_83_pred_5 = _2958 * _2741.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2965 = frontier_phi_83_pred;
                            _2967 = frontier_phi_83_pred_1;
                            _2966 = frontier_phi_83_pred_2;
                            _2964 = frontier_phi_83_pred_3;
                            _2963 = frontier_phi_83_pred_4;
                            _2962 = frontier_phi_83_pred_5;
                            _2671 = _2965 + _2684;
                            _2672 = _2966 + _2685;
                            _2673 = _2967 + _2686;
                            _2668 = _2962 + _2681;
                            _2669 = _2963 + _2682;
                            _2670 = _2964 + _2683;
                            if (_2688 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2681 = _2668;
                                _2682 = _2669;
                                _2683 = _2670;
                                _2684 = _2671;
                                _2685 = _2672;
                                _2686 = _2673;
                                _2687 = _2688;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2673;
                        frontier_phi_77_pred_1 = _2672;
                        frontier_phi_77_pred_2 = _2671;
                        frontier_phi_77_pred_3 = _2670;
                        frontier_phi_77_pred_4 = _2669;
                        frontier_phi_77_pred_5 = _2668;
                    }
                    _2238 = frontier_phi_77_pred;
                    _2236 = frontier_phi_77_pred_1;
                    _2234 = frontier_phi_77_pred_2;
                    _2232 = frontier_phi_77_pred_3;
                    _2230 = frontier_phi_77_pred_4;
                    _2228 = frontier_phi_77_pred_5;
                    uint _2445 = _2444 + 1u;
                    if (_2445 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2438 = _2228;
                        _2439 = _2230;
                        _2440 = _2232;
                        _2441 = _2234;
                        _2442 = _2236;
                        _2443 = _2238;
                        _2444 = _2445;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2230;
                frontier_phi_52_53_ladder_1 = _2238;
                frontier_phi_52_53_ladder_2 = _2236;
                frontier_phi_52_53_ladder_3 = _2234;
                frontier_phi_52_53_ladder_4 = _2232;
                frontier_phi_52_53_ladder_5 = _2228;
            }
            else
            {
                frontier_phi_52_53_ladder = _2077;
                frontier_phi_52_53_ladder_1 = _2085;
                frontier_phi_52_53_ladder_2 = _2083;
                frontier_phi_52_53_ladder_3 = _2081;
                frontier_phi_52_53_ladder_4 = _2079;
                frontier_phi_52_53_ladder_5 = _2075;
            }
            _2227 = frontier_phi_52_53_ladder_5;
            _2229 = frontier_phi_52_53_ladder;
            _2231 = frontier_phi_52_53_ladder_4;
            _2233 = frontier_phi_52_53_ladder_3;
            _2235 = frontier_phi_52_53_ladder_2;
            _2237 = frontier_phi_52_53_ladder_1;
        }
        float _2242 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _1997 = (_2242 * _2233) + _1727;
        _1999 = (_2242 * _2235) + _1728;
        _2001 = (_2242 * _2237) + _1729;
        _2003 = ((_2227 * 0.039999999105930328369140625) * _2242) + _1880;
        _2005 = ((_2229 * 0.039999999105930328369140625) * _2242) + _1881;
        _2007 = ((_2231 * 0.039999999105930328369140625) * _2242) + _1882;
    }
    else
    {
        _1997 = _1727;
        _1999 = _1728;
        _2001 = _1729;
        _2003 = _1880;
        _2005 = _1881;
        _2007 = _1882;
    }
    float _3891 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3902 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3913 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _2024 = ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1997 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _601))) + ((_2003 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1438)) * cbPerFrame._m0[3u].x);
    float _2025 = ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1999 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _601))) + ((_2005 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1438)) * cbPerFrame._m0[3u].x);
    float _2026 = ((isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_2001 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _601))) + ((_2007 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1438)) * cbPerFrame._m0[3u].x);
    float _2027 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    uint _2030 = _575 + 6u;
    float _2038 = _535 / cbSceneParam._m0[86u].x;
    float _2039 = _536 / cbSceneParam._m0[86u].y;
    vec4 _2053 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2038, _2039, (log2((isnan(cbSceneParam._m0[77u].w) ? _508 : (isnan(_508) ? cbSceneParam._m0[77u].w : min(_508, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2055 = _2053.x;
    float _2056 = _2053.y;
    float _2057 = _2053.z;
    float _2058 = _2053.w;
    float _2138;
    float _2140;
    float _2142;
    float _2144;
    if (_508 > cbSceneParam._m0[78u].w)
    {
        float _2100 = isnan(_508) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _508 : min(cbSceneParam._m0[80u].w, _508));
        float _2101 = _2100 / _508;
        float _2112 = _2101 * _259;
        float _2113 = _260 * _2101;
        float _2114 = (-0.0) - _2113;
        float _2115 = _2101 * _261;
        float _2117 = (cbSceneParam._m0[77u].w * _2114) / _2100;
        float _2118 = _2117 + cbSceneParam._m0[79u].w;
        float _2119 = cbSceneParam._m0[79u].w - _2113;
        float _2125 = sqrt(((_2112 * _2112) + (_2113 * _2113)) + (_2115 * _2115));
        float _2128 = (1.0 - (cbSceneParam._m0[77u].w / _2100)) * _2125;
        float _2134 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2136 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2369;
        if (abs((_2114 - _2117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2369 = ((((_2118 > 0.0) ? exp2(_2134 * _2118) : (2.0 - exp2(_2136 * _2118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2128;
        }
        else
        {
            float _2288 = 1.0 / cbSceneParam._m0[80u].x;
            float _2289 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : max(_2118, _2119));
            float _2290 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : min(_2118, _2119));
            float _2299 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : min(_2289, 0.0));
            float _2300 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : min(_2290, 0.0));
            _2369 = ((abs(_2125 / _2114) * cbSceneParam._m0[80u].y) * ((((_2299 - _2300) * 2.0) - ((exp2(_2134 * (isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0)))) - exp2(_2134 * (isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))))) * _2288)) - ((exp2(_2136 * _2299) - exp2(_2136 * _2300)) * _2288))) + (_2128 * cbSceneParam._m0[80u].z);
        }
        vec4 _2371 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2038, _2039, 1.0), 0.0);
        float _2380 = exp2((_2369 * (-1.44269502162933349609375)) * (1.0 - _2371.w));
        float _2381 = log2(_2380);
        float _2397 = log2(_2058);
        _2138 = (exp2(_2397 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2381 * cbSceneParam._m0[78u].x)) * _2371.x) / cbSceneParam._m0[78u].x)) + _2055;
        _2140 = (exp2(_2397 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2381 * cbSceneParam._m0[78u].y)) * _2371.y) / cbSceneParam._m0[78u].y)) + _2056;
        _2142 = (exp2(_2397 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2381 * cbSceneParam._m0[78u].z)) * _2371.z) / cbSceneParam._m0[78u].z)) + _2057;
        _2144 = _2380 * _2058;
    }
    else
    {
        _2138 = _2055;
        _2140 = _2056;
        _2142 = _2057;
        _2144 = _2058;
    }
    bool _2407;
    vec4 _2154;
    vec4 _2176;
    float _2178;
    float _2182;
    float _2183;
    float _2184;
    float _2185;
    bool _2195;
    for (;;)
    {
        _2154 = cbMatDynParam._m0[0u];
        float _2156 = roundEven(_2154.y);
        bool _2157 = _2156 == 3.0;
        float _2158 = log2(_2144);
        float _2165 = exp2(_2158 * cbSceneParam._m0[78u].x) * _2027;
        float _2166 = exp2(_2158 * cbSceneParam._m0[78u].y) * _2028;
        float _2167 = exp2(_2158 * cbSceneParam._m0[78u].z) * _2029;
        float _2174 = _522 + (-0.5);
        _2176 = cbMtdParam._m0[1u];
        _2178 = _2176.y * _2174;
        float _2181 = (_2156 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2182 = _2181 * (_2157 ? _2165 : (_2165 + (cbSceneParam._m0[72u].w * _2138)));
        _2183 = _2181 * (_2157 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2140)));
        _2184 = _2181 * (_2157 ? _2167 : (_2167 + (cbSceneParam._m0[72u].w * _2142)));
        _2185 = _2174 * 0.999000012874603271484375;
        _2195 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2195)
        {
            if ((cbInstanceData._m0[_575 + 7u].x + _2185) < 0.5)
            {
                _2407 = true;
                break;
            }
        }
        uint _2323 = _577 + uint(_2154.w);
        if ((cbInstanceData._m0[_2323].w < 1.0) && ((cbInstanceData._m0[_2323].w + _2185) < 0.5))
        {
            _2407 = true;
            break;
        }
        if ((_2178 + 1.0) < _2176.x)
        {
            _2407 = true;
            break;
        }
        _2407 = false;
        break;
    }
    float _2638;
    if (_2407)
    {
        discard_state = true;
        _2638 = 0.0;
    }
    else
    {
        _2638 = cbInstanceData._m0[_2030].w;
    }
    SV_Target.x = _2182;
    SV_Target.y = _2183;
    SV_Target.z = _2184;
    SV_Target.w = _2638;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2030].w;
    discard_exit();
}


