#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1004;
float _3400;
float _3401;
float _3402;
float _3403;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    float _380 = (_356 > 0.0) ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_361 + (-0.5)) + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_362 + (-0.5)) + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _438 = 0.5 - (_290 * 0.5);
    float _445 = ((((_420 - (_420 * _290)) * cbMtdParam._m0[9u].x) - _303) * _438) + _303;
    float _446 = ((((_421 - (_421 * _290)) * cbMtdParam._m0[9u].y) - _305) * _438) + _305;
    float _447 = (((cbMtdParam._m0[9u].z * (_422 - (_422 * _290))) - _307) * _438) + _307;
    vec4 _459 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _467 = (_459.x * 2.0) + (-1.0);
    float _469 = (_459.y * 2.0) + (-1.0);
    float _470 = dot(vec2(_467, _469), vec2(_467, _469));
    float _3422 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))));
    float _476 = _459.z * _290;
    float _479 = fma(_475, _199, fma(_469, _206, _467 * _192));
    float _482 = fma(_475, _200, fma(_469, _207, _467 * _193));
    float _485 = fma(_475, _201, fma(_469, _208, _467 * _194));
    float _489 = inversesqrt(dot(vec3(_479, _482, _485), vec3(_479, _482, _485)));
    float _490 = _489 * _479;
    float _491 = _489 * _482;
    float _492 = _489 * _485;
    float _3433 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _493 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3455 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3466 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _512 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _517 = _263 * _516;
    float _518 = _264 * _516;
    float _519 = _265 * _516;
    vec4 _524 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _526 = _524.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _685 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _691 = (cbMatDynParam._m0[5u].x * _685) + cbMatDynParam._m0[5u].y;
        float _3477 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _696 = (cbMatDynParam._m0[5u].z * _685) + cbMatDynParam._m0[5u].w;
        float _3488 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) - _692)) + _692) < ((_526 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _539 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _540 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _560 = fma(_492, cbSceneParam._m0[5u].z, fma(_491, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _490));
    float _563 = fma(_492, cbSceneParam._m0[6u].z, fma(_491, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _490));
    float _566 = fma(_492, cbSceneParam._m0[7u].z, fma(_491, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _490));
    uint _579 = uint(roundEven(NORMAL.w)) * 13u;
    uint _581 = _579 + 9u;
    uint _582 = _581 + uint(cbMatDynParam._m0[0u].w);
    float _588 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_582].x;
    float _589 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_582].y;
    float _590 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_582].z;
    float _3499 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    vec4 _602 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _539, cbSceneParam._m0[86u].y * _540));
    float _605 = _602.x * TEXCOORD.z;
    float _606 = dot(vec3(_490, _491, _492), vec3(_517, _518, _519));
    float _609 = _606 * 2.0;
    float _613 = (_609 * _490) - _517;
    float _614 = (_609 * _491) - _518;
    float _615 = (_609 * _492) - _519;
    float _619 = abs(dot(vec3(_517, _518, _519), vec3(_490, _491, _492)));
    float _3532 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _621 = sqrt(_493);
    float _634 = exp2((_621 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1003;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _730 = fma(_674, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666));
        float _734 = fma(_674, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666));
        float _738 = fma(_674, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666));
        float _761 = _666 + _490;
        float _762 = _670 + _491;
        float _763 = _674 + _492;
        float _773 = fma(_763, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761)) - _730;
        float _774 = fma(_763, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761)) - _734;
        float _775 = fma(_763, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761)) - _738;
        float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
        float _792 = ((_779 * _773) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_730 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_779 * _774) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_734 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_779 * _775) / cbModelParam._m0[34u].z) + ((((((_738 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        float _831 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_797.x + (-0.5));
        float _833 = _831 * (_797.y + (-0.5));
        float _834 = _831 * (_797.z + (-0.5));
        float _841 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_804.x + (-0.5));
        float _843 = _841 * (_804.y + (-0.5));
        float _844 = _841 * (_804.z + (-0.5));
        float _851 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_811.x + (-0.5));
        float _853 = _851 * (_811.y + (-0.5));
        float _854 = _851 * (_811.z + (-0.5));
        float _861 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_818.x + (-0.5));
        float _863 = _861 * (_818.y + (-0.5));
        float _864 = _861 * (_818.z + (-0.5));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = _832 * 0.5;
        float _869 = _842 * 0.5;
        float _870 = _852 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _885 = (dot(vec3(_490, _491, _492), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _895 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3580 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_897 + 1.0))) + _902) * _865;
        float _912 = _833 * 0.5;
        float _913 = _843 * 0.5;
        float _914 = _853 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_490, _491, _492), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3613 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_939 + 1.0))) + _944) * _866;
        float _954 = _834 * 0.5;
        float _955 = _844 * 0.5;
        float _956 = _854 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_490, _491, _492), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3646 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_981 + 1.0))) + _986) * _867;
        _1003 = _834;
        _1005 = _833;
        _1006 = _832;
        _1007 = _844;
        _1008 = _843;
        _1009 = _842;
        _1010 = _854;
        _1011 = _853;
        _1012 = _852;
        _1013 = _867;
        _1014 = _866;
        _1015 = _865;
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
    }
    else
    {
        _1003 = _1004;
        _1005 = _1004;
        _1006 = _1004;
        _1007 = _1004;
        _1008 = _1004;
        _1009 = _1004;
        _1010 = _1004;
        _1011 = _1004;
        _1012 = _1004;
        _1013 = _1004;
        _1014 = _1004;
        _1015 = _1004;
        _1016 = 0.0;
        _1017 = 0.0;
        _1018 = 0.0;
    }
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1047 = fma(_674, cbModelParam._m0[30u].z, fma(_670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _666));
        float _1051 = fma(_674, cbModelParam._m0[31u].z, fma(_670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _666));
        float _1055 = fma(_674, cbModelParam._m0[32u].z, fma(_670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _666));
        float _1078 = _666 + _490;
        float _1079 = _670 + _491;
        float _1080 = _674 + _492;
        float _1090 = fma(_1080, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078)) - _1047;
        float _1091 = fma(_1080, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078)) - _1051;
        float _1092 = fma(_1080, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078)) - _1055;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1047 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1051 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[35u].z) + ((((((_1055 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1146 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1113.x + (-0.5));
        float _1148 = _1146 * (_1113.y + (-0.5));
        float _1149 = _1146 * (_1113.z + (-0.5));
        float _1156 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1120.x + (-0.5));
        float _1158 = _1156 * (_1120.y + (-0.5));
        float _1159 = _1156 * (_1120.z + (-0.5));
        float _1166 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1127.x + (-0.5));
        float _1168 = _1166 * (_1127.y + (-0.5));
        float _1169 = _1166 * (_1127.z + (-0.5));
        float _1176 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1134.x + (-0.5));
        float _1178 = _1176 * (_1134.y + (-0.5));
        float _1179 = _1176 * (_1134.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_490, _491, _492), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3709 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1210 + 1.0))) + _1215) * _1180;
        float _1225 = _1148 * 0.5;
        float _1226 = _1158 * 0.5;
        float _1227 = _1168 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_490, _491, _492), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3742 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1252 + 1.0))) + _1257) * _1181;
        float _1267 = _1149 * 0.5;
        float _1268 = _1159 * 0.5;
        float _1269 = _1169 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_490, _491, _492), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3775 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1294 + 1.0))) + _1299) * _1182;
        _1316 = _1149;
        _1317 = _1148;
        _1318 = _1147;
        _1319 = _1159;
        _1320 = _1158;
        _1321 = _1157;
        _1322 = _1169;
        _1323 = _1168;
        _1324 = _1167;
        _1325 = _1182;
        _1326 = _1181;
        _1327 = _1180;
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1004;
        _1317 = _1004;
        _1318 = _1004;
        _1319 = _1004;
        _1320 = _1004;
        _1321 = _1004;
        _1322 = _1004;
        _1323 = _1004;
        _1324 = _1004;
        _1325 = _1004;
        _1326 = _1004;
        _1327 = _1004;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1016)) + _1016;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1017)) + _1017;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1018)) + _1018;
    float _1363 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1366 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1369 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1340));
    float _1384 = _613 * 0.5;
    float _1385 = _614 * 0.5;
    float _1386 = _615 * 0.5;
    float _1387 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1390 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1393 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1427;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1400 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1003, _1007, _1010, _1013));
        float _1404 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1408 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1415 = dot(vec4(cbModelParam._m0[39u]), vec4(_1384, _1385, _1386, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1415) ? 0.0 : (isnan(0.0) ? _1415 : max(0.0, _1415))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1438;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1429 = dot(vec4(cbModelParam._m0[40u]), vec4(_1384, _1385, _1386, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1442 = (_1438 * cbModelParam._m0[1u].x) + (_1427 * (1.0 - cbModelParam._m0[1u].x));
    float _1452 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _493);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1452 : min(cbModelParam._m0[25u].z, _1452));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1501 = fma(_674, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666)) + cbModelParam._m0[13u].w;
        float _1505 = fma(_674, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666)) + cbModelParam._m0[14u].w;
        float _1509 = fma(_674, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666)) + cbModelParam._m0[15u].w;
        float _1512 = fma(_615, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613));
        float _1515 = fma(_615, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613));
        float _1518 = fma(_615, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613));
        float _1546;
        if (_1512 > 0.0)
        {
            _1546 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1546 = frontier_phi_25_23_ladder;
        }
        float _1715;
        if (_1515 > 0.0)
        {
            _1715 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1715 = frontier_phi_34_30_ladder;
        }
        float _2159;
        if (_1518 > 0.0)
        {
            _2159 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2159 = frontier_phi_46_41_ladder;
        }
        float _2161 = isnan(_1715) ? _1546 : (isnan(_1546) ? _1715 : min(_1546, _1715));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1512) + _1501;
        float _2167 = (_2162 * _1515) + _1505;
        float _2168 = (_2162 * _1518) + _1509;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2171 = (-1.0) - _2169;
        float _2173 = _2169 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2168 > _2173) || ((_2168 < _2171) || ((_2167 > _2173) || ((_2167 < _2171) || ((_2166 < _2171) || (_2166 > _2173))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2168, cbModelParam._m0[9u].z, fma(_2167, cbModelParam._m0[9u].y, _2166 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2168, cbModelParam._m0[10u].z, fma(_2167, cbModelParam._m0[10u].y, _2166 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2168, cbModelParam._m0[11u].z, fma(_2167, cbModelParam._m0[11u].y, _2166 * cbModelParam._m0[11u].x))), _1453);
            frontier_phi_24_46_ladder = _2402.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2402.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2402.x * cbModelParam._m0[1u].y;
        }
        _1534 = frontier_phi_24_46_ladder_2;
        _1536 = frontier_phi_24_46_ladder_1;
        _1538 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_613, _614, _615), _1453);
        _1534 = _1522.x * cbModelParam._m0[1u].y;
        _1536 = _1522.y * cbModelParam._m0[1u].y;
        _1538 = _1522.z * cbModelParam._m0[1u].y;
    }
    float _1542 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _493);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1542 : min(cbModelParam._m0[25u].w, _1542));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1596 = fma(_674, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666)) + cbModelParam._m0[21u].w;
        float _1600 = fma(_674, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666)) + cbModelParam._m0[22u].w;
        float _1604 = fma(_674, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666)) + cbModelParam._m0[23u].w;
        float _1607 = fma(_615, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613));
        float _1610 = fma(_615, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613));
        float _1613 = fma(_615, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613));
        float _1720;
        if (_1607 > 0.0)
        {
            _1720 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1720 = frontier_phi_36_32_ladder;
        }
        float _2186;
        if (_1610 > 0.0)
        {
            _2186 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2186 = frontier_phi_48_43_ladder;
        }
        float _2531;
        if (_1613 > 0.0)
        {
            _2531 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2531 = frontier_phi_60_55_ladder;
        }
        float _2533 = isnan(_2186) ? _1720 : (isnan(_1720) ? _2186 : min(_1720, _2186));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _1607) + _1596;
        float _2539 = (_2534 * _1610) + _1600;
        float _2540 = (_2534 * _1613) + _1604;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2542 = (-1.0) - _2541;
        float _2544 = _2541 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2540 > _2544) || ((_2540 < _2542) || ((_2539 > _2544) || ((_2539 < _2542) || ((_2538 < _2542) || (_2538 > _2544))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2540, cbModelParam._m0[17u].z, fma(_2539, cbModelParam._m0[17u].y, _2538 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2540, cbModelParam._m0[18u].z, fma(_2539, cbModelParam._m0[18u].y, _2538 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2540, cbModelParam._m0[19u].z, fma(_2539, cbModelParam._m0[19u].y, _2538 * cbModelParam._m0[19u].x))), _1543);
            frontier_phi_33_60_ladder = _2677.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2677.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2677.x * cbModelParam._m0[1u].z;
        }
        _1632 = frontier_phi_33_60_ladder_2;
        _1634 = frontier_phi_33_60_ladder_1;
        _1636 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_613, _614, _615), _1543);
        _1632 = _1616.x * cbModelParam._m0[1u].z;
        _1634 = _1616.y * cbModelParam._m0[1u].z;
        _1636 = _1616.z * cbModelParam._m0[1u].z;
    }
    float _1648 = ((((1.0 - _634) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_634 * _621)) * _605;
    float _1649 = _1648 * ((cbModelParam._m0[1u].w * (_1632 - _1534)) + _1534);
    float _1650 = _1648 * ((cbModelParam._m0[1u].w * (_1634 - _1536)) + _1536);
    float _1651 = _1648 * ((cbModelParam._m0[1u].w * (_1636 - _1538)) + _1538);
    float _1654 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, _1649 * cbSceneParam._m0[91u].x));
    float _1694 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1698 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1706 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1707 = _1694 / _1706;
    float _1708 = _1698 / _1706;
    float _1709 = _1702 / _1706;
    float _1856;
    float _1857;
    float _1858;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1736 = ((uint(_1709 > cbSceneParam._m0[59u].y) + uint(_1709 > cbSceneParam._m0[59u].x)) + uint(_1709 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1737 = _1736 + 43u;
        uint _1745 = _1736 + 44u;
        uint _1753 = _1736 + 45u;
        uint _1761 = _1736 + 46u;
        float _1772 = fma(_1706, cbSceneParam._m0[_1737].w, fma(_1702, cbSceneParam._m0[_1737].z, fma(_1698, cbSceneParam._m0[_1737].y, _1694 * cbSceneParam._m0[_1737].x)));
        float _1776 = fma(_1706, cbSceneParam._m0[_1745].w, fma(_1702, cbSceneParam._m0[_1745].z, fma(_1698, cbSceneParam._m0[_1745].y, _1694 * cbSceneParam._m0[_1745].x)));
        float _1784 = fma(_1706, cbSceneParam._m0[_1761].w, fma(_1702, cbSceneParam._m0[_1761].z, fma(_1698, cbSceneParam._m0[_1761].y, _1694 * cbSceneParam._m0[_1761].x)));
        float _1789 = cbSceneParam._m0[33u].z * _1784;
        float _1791 = cbSceneParam._m0[33u].w * _1784;
        float _1794 = fma(_1706, cbSceneParam._m0[_1753].w, fma(_1702, cbSceneParam._m0[_1753].z, fma(_1698, cbSceneParam._m0[_1753].y, _1694 * cbSceneParam._m0[_1753].x))) / _1784;
        float _1842 = (cbSceneParam._m0[33u].x - sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709))) * cbSceneParam._m0[33u].y;
        float _3901 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1849 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1789 + _1772) / _1784, (_1791 + _1776) / _1784), _1794), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 + _1772) / _1784, (_1776 - _1789) / _1784), _1794), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1772 - _1789) / _1784, (_1776 - _1791) / _1784), _1794), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1772 - _1791) / _1784, (_1789 + _1776) / _1784), _1794), 0.0)).x), vec4(0.25)));
        _1856 = 1.0 - (_1849 * cbSceneParam._m0[34u].x);
        _1857 = 1.0 - (_1849 * cbSceneParam._m0[34u].y);
        _1858 = 1.0 - (_1849 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1856 = 1.0;
        _1857 = 1.0;
        _1858 = 1.0;
    }
    float _1922;
    float _1924;
    float _1926;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1910 = fma(_1706, cbSceneParam._m0[63u].w, fma(_1702, cbSceneParam._m0[63u].z, fma(_1698, cbSceneParam._m0[63u].y, _1694 * cbSceneParam._m0[63u].x)));
        float _1911 = fma(_1706, cbSceneParam._m0[60u].w, fma(_1702, cbSceneParam._m0[60u].z, fma(_1698, cbSceneParam._m0[60u].y, _1694 * cbSceneParam._m0[60u].x))) / _1910;
        float _1912 = fma(_1706, cbSceneParam._m0[61u].w, fma(_1702, cbSceneParam._m0[61u].z, fma(_1698, cbSceneParam._m0[61u].y, _1694 * cbSceneParam._m0[61u].x))) / _1910;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1911 >= cbSceneParam._m0[64u].x) && (_1912 >= cbSceneParam._m0[64u].y)) && (_1911 <= cbSceneParam._m0[64u].z)) && (_1912 <= cbSceneParam._m0[64u].w))
        {
            float _2199 = fma(_1706, cbSceneParam._m0[62u].w, fma(_1702, cbSceneParam._m0[62u].z, fma(_1698, cbSceneParam._m0[62u].y, _1694 * cbSceneParam._m0[62u].x))) / _1910;
            float _2203 = isnan(cbSceneParam._m0[41u].w) ? _2199 : (isnan(_2199) ? cbSceneParam._m0[41u].w : max(_2199, cbSceneParam._m0[41u].w));
            float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709))) * cbSceneParam._m0[33u].y;
            float _3917 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
            float _2253 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1911, cbSceneParam._m0[33u].w + _1912), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1911, _1912 - cbSceneParam._m0[33u].z), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1911 - cbSceneParam._m0[33u].z, _1912 - cbSceneParam._m0[33u].w), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1911 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1912), _2203), 0.0)).x), vec4(0.25)));
            float _2257 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
            float _2258 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
            float _2259 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2259) ? _1858 : (isnan(_1858) ? _2259 : min(_1858, _2259));
            frontier_phi_45_44_ladder_1 = isnan(_2258) ? _1857 : (isnan(_1857) ? _2258 : min(_1857, _2258));
            frontier_phi_45_44_ladder_2 = isnan(_2257) ? _1856 : (isnan(_1856) ? _2257 : min(_1856, _2257));
        }
        else
        {
            frontier_phi_45_44_ladder = _1858;
            frontier_phi_45_44_ladder_1 = _1857;
            frontier_phi_45_44_ladder_2 = _1856;
        }
        _1922 = frontier_phi_45_44_ladder_2;
        _1924 = frontier_phi_45_44_ladder_1;
        _1926 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1922 = _1856;
        _1924 = _1857;
        _1926 = _1858;
    }
    uvec4 _1931 = floatBitsToUint(cbInstanceData._m0[_579 + 5u]);
    uint _1933 = _1931.x * 14u;
    uint _1934 = _1933 + 13u;
    float _1939 = _605 + (-1.0);
    float _1942 = (cbLight._m0[_1934].x * _1939) + 1.0;
    float _1943 = (cbLight._m0[_1934].y * _1939) + 1.0;
    uint _1944 = _1933 + 5u;
    float _1950 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1954 = _1933 + 4u;
    float _1963 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1967 = _1933 | 1u;
    float _1978 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_490, _491, _492));
    float _1981 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_490, _491, _492));
    float _3953 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _3964 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1986 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1988 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1995 = ((cbLight._m0[_1944].x * _1950) * _1988) + (((cbLight._m0[_1954].x * _1922) * _1963) * _1986);
    float _1996 = ((_1950 * cbLight._m0[_1944].y) * _1988) + (((cbLight._m0[_1954].y * _1924) * _1963) * _1986);
    float _1997 = ((_1950 * cbLight._m0[_1944].z) * _1988) + (((cbLight._m0[_1954].z * _1926) * _1963) * _1986);
    uint _1999 = _1933 + 8u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _493) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1933].x + _517;
    float _2015 = cbLight._m0[_1933].y + _518;
    float _2016 = cbLight._m0[_1933].z + _519;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_1933].xyz));
    float _3975 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _2028 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _2029 = dot(vec3(_490, _491, _492), vec3(_2021, _2022, _2023));
    float _3997 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2021, _2022, _2023));
    float _4008 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2013 * _2013;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2052 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2053 = 1.0 - _2013;
    float _2064 = (0.5 / (((_2028 * ((_2027 * _2053) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2053) + _2013) * _2027))) * _2027;
    float _4019 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2066 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    uint _2080 = _1933 + 9u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _493) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1967].x + _517;
    float _2094 = cbLight._m0[_1967].y + _518;
    float _2095 = cbLight._m0[_1967].z + _519;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_490, _491, _492), vec3(cbLight._m0[_1967].xyz));
    float _4030 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _2107 = dot(vec3(_490, _491, _492), vec3(_2100, _2101, _2102));
    float _4041 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2100, _2101, _2102));
    float _4052 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2092 * _2092;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2129 = 1.0 - _2092;
    float _2139 = (0.5 / (((_2028 * ((_2106 * _2129) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2129) + _2092) * _2106))) * _2106;
    float _4063 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    float _2151 = (((_2128 * cbLight._m0[_2080].x) * _2141) * _1950) + ((((cbLight._m0[_1999].x * _1922) * _2052) * _2066) * _1963);
    float _2152 = (((_2128 * cbLight._m0[_2080].y) * _2141) * _1950) + ((((cbLight._m0[_1999].y * _1924) * _2052) * _2066) * _1963);
    float _2153 = (((_2128 * cbLight._m0[_2080].z) * _2141) * _1950) + ((((cbLight._m0[_1999].z * _1926) * _2052) * _2066) * _1963);
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_1931.y == 0u)
    {
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.x;
        uint _2283 = uint((float(_2271.y) * floor(float(uint(cbSceneParam._m0[85u].y * _540) / _2272))) + floor(float(uint(cbSceneParam._m0[85u].x * _539) / _2272)));
        float _2293 = (log2(_1709 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2294 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        uint _2297 = uint(isnan(14.0) ? _2294 : (isnan(_2294) ? 14.0 : min(_2294, 14.0)));
        uvec4 _2302 = texelFetch(g_lightClusterGridBuffer, int(((_2297 << 2u) + (_2283 << 6u)) >> 2u));
        uint _2303 = _2302.x;
        uint _2304 = _2271.z;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        if (((((1u << ((_2304 >> 4u) & 15u)) + 4294967295u) & _2303) == 0u) || ((_2304 & 240u) == 0u))
        {
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
        }
        else
        {
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            uint _2595 = 0u;
            uint _2604;
            bool _2605;
            for (;;)
            {
                _2604 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2595 << 2u)) >> 2u)).x;
                _2605 = _2604 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2605)
                {
                    frontier_phi_71_pred = _2592;
                    frontier_phi_71_pred_1 = _2591;
                    frontier_phi_71_pred_2 = _2590;
                    frontier_phi_71_pred_3 = _2589;
                    frontier_phi_71_pred_4 = _2593;
                    frontier_phi_71_pred_5 = _2594;
                }
                else
                {
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    uint _2761;
                    _2755 = _2589;
                    _2756 = _2590;
                    _2757 = _2591;
                    _2758 = _2592;
                    _2759 = _2593;
                    _2760 = _2594;
                    _2761 = _2604;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    for (;;)
                    {
                        uint _2765 = uint(findLSB(_2761)) + (_2595 << 5u);
                        uint _2762 = (_2761 + 4294967295u) & _2761;
                        uint _2767 = _2765 * 48u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        uint _2787 = (_2765 * 48u) + 4u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2806 = (_2765 * 48u) + 8u;
                        vec3 _2817 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x));
                        float _2821 = _2781.x - _1707;
                        float _2822 = _2781.y - _1708;
                        float _2823 = _2781.z - _1709;
                        float _2824 = dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823));
                        float _2827 = inversesqrt(_2824);
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2831 = dot(vec3(_560, _563, _566), vec3(_2828, _2829, _2830));
                        float _2836 = 1.0 - (_2824 * _2781.w);
                        float _4084 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                        float _2838 = sqrt(_2824) * _2800.w;
                        float _2841 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2831) + _2842;
                        float _2848 = _2838 * _2838;
                        float _2852 = ((isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0))) * _2837) / ((_2848 * 0.699999988079071044921875) + 1.0);
                        float _2856 = (-0.0) - _1707;
                        float _2857 = (-0.0) - _1708;
                        float _2858 = (-0.0) - _1709;
                        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
                        float _2863 = _2862 * _2856;
                        float _2864 = _2862 * _2857;
                        float _2865 = _2862 * _2858;
                        float _2872 = exp2(log2(1.0 / ((_2848 * 3.5) + 5.0)) * 0.25);
                        float _2873 = 1.0 - _621;
                        float _2880 = sqrt(1.0 - ((1.0 - (_2873 * _2873)) * (1.0 - (_2872 * _2872))));
                        float _2881 = _2880 * _2880;
                        float _2882 = _2881 * _2881;
                        float _2883 = _2863 + _2828;
                        float _2884 = _2864 + _2829;
                        float _2885 = _2865 + _2830;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2893 = dot(vec3(_560, _563, _566), vec3(_2863, _2864, _2865));
                        float _4100 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2896 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2897 = dot(vec3(_560, _563, _566), vec3(_2889 * _2883, _2889 * _2884, _2889 * _2885));
                        float _4111 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2900 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2904 = ((_2900 * _2900) * (_2882 + (-1.0))) + 1.0;
                        float _2905 = _2841 * _2881;
                        float _2906 = _2905 * _2905;
                        float _2909 = ((1.0 - _2906) * _2831) + _2906;
                        float _4122 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2910 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2911 = 1.0 - _2881;
                        float _2921 = (0.5 / (((_2910 * ((_2896 * _2911) + _2881)) + 9.9999999392252902907785028219223e-09) + (((_2910 * _2911) + _2881) * _2896))) * _2910;
                        float _4133 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2932 = (((_2882 * 3.1415927410125732421875) * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) / ((_2904 * _2904) * ((_2848 * 2.1991131305694580078125) + 3.141590118408203125))) * _2837;
                        _2685 = (_2852 * _2800.x) + _2758;
                        _2686 = (_2852 * _2800.y) + _2759;
                        _2687 = (_2852 * _2800.z) + _2760;
                        _2682 = (_2932 * _2817.x) + _2755;
                        _2683 = (_2932 * _2817.y) + _2756;
                        _2684 = (_2932 * _2817.z) + _2757;
                        if (_2762 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2685;
                            _2759 = _2686;
                            _2760 = _2687;
                            _2761 = _2762;
                        }
                    }
                    frontier_phi_71_pred = _2685;
                    frontier_phi_71_pred_1 = _2684;
                    frontier_phi_71_pred_2 = _2683;
                    frontier_phi_71_pred_3 = _2682;
                    frontier_phi_71_pred_4 = _2686;
                    frontier_phi_71_pred_5 = _2687;
                }
                _2418 = frontier_phi_71_pred;
                _2416 = frontier_phi_71_pred_1;
                _2414 = frontier_phi_71_pred_2;
                _2412 = frontier_phi_71_pred_3;
                _2420 = frontier_phi_71_pred_4;
                _2422 = frontier_phi_71_pred_5;
                uint _2596 = _2595 + 1u;
                if (_2596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2589 = _2412;
                    _2590 = _2414;
                    _2591 = _2416;
                    _2592 = _2418;
                    _2593 = _2420;
                    _2594 = _2422;
                    _2595 = _2596;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
        }
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.z;
        uint _2428 = (_2426 >> 8u) & 15u;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        if (((4294967295u << _2428) & _2303) == 0u)
        {
            _2557 = _2411;
            _2559 = _2413;
            _2561 = _2415;
            _2563 = _2417;
            _2565 = _2419;
            _2567 = _2421;
        }
        else
        {
            float _2582 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
            float _2583 = _2582 * _1707;
            float _2584 = _2582 * _1708;
            float _2585 = _2582 * _1709;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2428 < ((_2426 >> 12u) & 15u))
            {
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2738 = _2411;
                float _2739 = _2413;
                float _2740 = _2415;
                float _2741 = _2417;
                float _2742 = _2419;
                float _2743 = _2421;
                uint _2744 = _2428;
                uint _2753;
                bool _2754;
                for (;;)
                {
                    _2753 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                    _2754 = _2753 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2754)
                    {
                        frontier_phi_82_pred = _2741;
                        frontier_phi_82_pred_1 = _2740;
                        frontier_phi_82_pred_2 = _2739;
                        frontier_phi_82_pred_3 = _2738;
                        frontier_phi_82_pred_4 = _2743;
                        frontier_phi_82_pred_5 = _2742;
                    }
                    else
                    {
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _2959 = _2738;
                        float _2960 = _2739;
                        float _2961 = _2740;
                        float _2962 = _2741;
                        float _2963 = _2742;
                        float _2964 = _2743;
                        uint _2965 = _2753;
                        uint _2966;
                        vec4 _2991;
                        float _2992;
                        vec4 _3007;
                        vec3 _3019;
                        vec4 _3034;
                        vec4 _3050;
                        float _3096;
                        bool _3097;
                        for (;;)
                        {
                            uint _2976 = ((_2744 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2965));
                            _2966 = (_2965 + 4294967295u) & _2965;
                            uint _2978 = _2976 * 40u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            _2992 = _2991.w;
                            uint _2994 = (_2976 * 40u) + 4u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2976 * 40u) + 8u;
                            _3019 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x));
                            uint _3021 = (_2976 * 40u) + 16u;
                            _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3037 = (_2976 * 40u) + 20u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3052 = (_2976 * 40u) + 24u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3071 = (_2976 * 40u) + 28u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3096 = fma(_1709, _3084.z, fma(_1708, _3084.y, _3084.x * _1707)) + _3084.w;
                            _3097 = !((fma(_1709, _3065.z, fma(_1708, _3065.y, _3065.x * _1707)) + _3065.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3097)
                            {
                                float _3124 = _2991.x - _1707;
                                float _3125 = _2991.y - _1708;
                                float _3126 = _2991.z - _1709;
                                float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                                float _3130 = inversesqrt(_3127);
                                float _3131 = _3130 * _3124;
                                float _3132 = _3130 * _3125;
                                float _3133 = _3130 * _3126;
                                float _3137 = 1.0 - (_3127 / (_2992 * _2992));
                                float _4144 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3142 = sqrt(_3127) * _3007.w;
                                float _3144 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                                float _3145 = _3144 * _3144;
                                float _3148 = ((1.0 - _3145) * dot(vec3(_3131, _3132, _3133), vec3(_560, _563, _566))) + _3145;
                                float _3151 = _3142 * _3142;
                                float _3155 = (fma(_1709, _3034.z, fma(_1708, _3034.y, _3034.x * _1707)) + _3034.w) / _3096;
                                float _3156 = (fma(_1709, _3050.z, fma(_1708, _3050.y, _3050.x * _1707)) + _3050.w) / _3096;
                                float _3160 = 1.0 - dot(vec2(_3155, _3156), vec2(_3155, _3156));
                                float _4160 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3162 = _3161 * (((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3138) / ((_3151 * 0.699999988079071044921875) + 1.0));
                                float _3174 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                                float _3175 = 1.0 - _621;
                                float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                                float _3183 = _3182 * _3182;
                                float _3184 = _3183 * _3183;
                                float _3185 = _3131 - _2583;
                                float _3186 = _3132 - _2584;
                                float _3187 = _3133 - _2585;
                                float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                                float _3195 = dot(vec3(_560, _563, _566), vec3((-0.0) - _2583, (-0.0) - _2584, (-0.0) - _2585));
                                float _4171 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3199 = dot(vec3(_560, _563, _566), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                                float _4182 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3202 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                                float _3207 = _3144 * _3183;
                                float _3208 = _3207 * _3207;
                                float _3214 = ((1.0 - _3208) * dot(vec3(_560, _563, _566), vec3(_3131, _3132, _3133))) + _3208;
                                float _4193 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3216 = 1.0 - _3183;
                                float _3226 = (0.5 / (((_3215 * ((_3198 * _3216) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3183) * _3198))) * _3215;
                                float _4204 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3236 = (_3161 * _3138) * (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) / ((_3206 * _3206) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3162 * _3007.x;
                                frontier_phi_88_pred_1 = _3236 * _3019.z;
                                frontier_phi_88_pred_2 = _3236 * _3019.y;
                                frontier_phi_88_pred_3 = _3236 * _3019.x;
                                frontier_phi_88_pred_4 = _3162 * _3007.z;
                                frontier_phi_88_pred_5 = _3162 * _3007.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3243 = frontier_phi_88_pred;
                            _3242 = frontier_phi_88_pred_1;
                            _3241 = frontier_phi_88_pred_2;
                            _3240 = frontier_phi_88_pred_3;
                            _3245 = frontier_phi_88_pred_4;
                            _3244 = frontier_phi_88_pred_5;
                            _2949 = _3243 + _2962;
                            _2950 = _3244 + _2963;
                            _2951 = _3245 + _2964;
                            _2946 = _3240 + _2959;
                            _2947 = _3241 + _2960;
                            _2948 = _3242 + _2961;
                            if (_2966 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2966;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2949;
                        frontier_phi_82_pred_1 = _2948;
                        frontier_phi_82_pred_2 = _2947;
                        frontier_phi_82_pred_3 = _2946;
                        frontier_phi_82_pred_4 = _2951;
                        frontier_phi_82_pred_5 = _2950;
                    }
                    _2564 = frontier_phi_82_pred;
                    _2562 = frontier_phi_82_pred_1;
                    _2560 = frontier_phi_82_pred_2;
                    _2558 = frontier_phi_82_pred_3;
                    _2568 = frontier_phi_82_pred_4;
                    _2566 = frontier_phi_82_pred_5;
                    uint _2745 = _2744 + 1u;
                    if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2738 = _2558;
                        _2739 = _2560;
                        _2740 = _2562;
                        _2741 = _2564;
                        _2742 = _2566;
                        _2743 = _2568;
                        _2744 = _2745;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2568;
                frontier_phi_62_63_ladder_1 = _2566;
                frontier_phi_62_63_ladder_2 = _2564;
                frontier_phi_62_63_ladder_3 = _2560;
                frontier_phi_62_63_ladder_4 = _2558;
                frontier_phi_62_63_ladder_5 = _2562;
            }
            else
            {
                frontier_phi_62_63_ladder = _2421;
                frontier_phi_62_63_ladder_1 = _2419;
                frontier_phi_62_63_ladder_2 = _2417;
                frontier_phi_62_63_ladder_3 = _2413;
                frontier_phi_62_63_ladder_4 = _2411;
                frontier_phi_62_63_ladder_5 = _2415;
            }
            _2557 = frontier_phi_62_63_ladder_4;
            _2559 = frontier_phi_62_63_ladder_3;
            _2561 = frontier_phi_62_63_ladder_5;
            _2563 = frontier_phi_62_63_ladder_2;
            _2565 = frontier_phi_62_63_ladder_1;
            _2567 = frontier_phi_62_63_ladder;
        }
        float _2572 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _2316 = (_2572 * _2563) + _1995;
        _2318 = (_2572 * _2565) + _1996;
        _2320 = (_2572 * _2567) + _1997;
        _2322 = ((_2557 * 0.039999999105930328369140625) * _2572) + _2151;
        _2324 = ((_2559 * 0.039999999105930328369140625) * _2572) + _2152;
        _2326 = ((_2561 * 0.039999999105930328369140625) * _2572) + _2153;
    }
    else
    {
        _2316 = _1995;
        _2318 = _1996;
        _2320 = _1997;
        _2322 = _2151;
        _2324 = _2152;
        _2326 = _2153;
    }
    float _4220 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4231 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4242 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _2343 = ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2316 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _605))) + ((_2322 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2344 = ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2318 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _605))) + ((_2324 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2345 = ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2320 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _605))) + ((_2326 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2346 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    uint _2349 = _579 + 6u;
    float _2357 = _539 / cbSceneParam._m0[86u].x;
    float _2358 = _540 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _512 : (isnan(_512) ? cbSceneParam._m0[77u].w : min(_512, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    if (_512 > cbSceneParam._m0[78u].w)
    {
        float _2436 = isnan(_512) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _512 : min(cbSceneParam._m0[80u].w, _512));
        float _2437 = _2436 / _512;
        float _2448 = _2437 * _263;
        float _2449 = _264 * _2437;
        float _2450 = (-0.0) - _2449;
        float _2451 = _2437 * _265;
        float _2453 = (cbSceneParam._m0[77u].w * _2450) / _2436;
        float _2454 = _2453 + cbSceneParam._m0[79u].w;
        float _2455 = cbSceneParam._m0[79u].w - _2449;
        float _2461 = sqrt(((_2448 * _2448) + (_2449 * _2449)) + (_2451 * _2451));
        float _2464 = (1.0 - (cbSceneParam._m0[77u].w / _2436)) * _2461;
        float _2469 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2471 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2695;
        if (abs((_2450 - _2453) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2695 = ((((_2454 > 0.0) ? exp2(_2469 * _2454) : (2.0 - exp2(_2471 * _2454))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2464;
        }
        else
        {
            float _2618 = 1.0 / cbSceneParam._m0[80u].x;
            float _2619 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : max(_2454, _2455));
            float _2620 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : min(_2454, _2455));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            float _2630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : min(_2620, 0.0));
            _2695 = ((abs(_2461 / _2450) * cbSceneParam._m0[80u].y) * ((((_2629 - _2630) * 2.0) - ((exp2(_2469 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0)))) - exp2(_2469 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0))))) * _2618)) - ((exp2(_2471 * _2629) - exp2(_2471 * _2630)) * _2618))) + (_2464 * cbSceneParam._m0[80u].z);
        }
        vec4 _2697 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2706 = exp2((_2695 * (-1.44269502162933349609375)) * (1.0 - _2697.w));
        float _2707 = log2(_2706);
        float _2723 = log2(_2377);
        _2473 = (exp2(_2723 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2707 * cbSceneParam._m0[78u].x)) * _2697.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2475 = (exp2(_2723 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2707 * cbSceneParam._m0[78u].y)) * _2697.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2477 = (exp2(_2723 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2707 * cbSceneParam._m0[78u].z)) * _2697.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2479 = _2706 * _2377;
    }
    else
    {
        _2473 = _2374;
        _2475 = _2375;
        _2477 = _2376;
        _2479 = _2377;
    }
    bool _2733;
    vec4 _2489;
    vec4 _2511;
    float _2513;
    float _2517;
    float _2518;
    float _2519;
    float _2520;
    bool _2530;
    for (;;)
    {
        _2489 = cbMatDynParam._m0[0u];
        float _2491 = roundEven(_2489.y);
        bool _2492 = _2491 == 3.0;
        float _2493 = log2(_2479);
        float _2500 = exp2(_2493 * cbSceneParam._m0[78u].x) * _2346;
        float _2501 = exp2(_2493 * cbSceneParam._m0[78u].y) * _2347;
        float _2502 = exp2(_2493 * cbSceneParam._m0[78u].z) * _2348;
        float _2509 = _526 + (-0.5);
        _2511 = cbMtdParam._m0[1u];
        _2513 = _2511.y * _2509;
        float _2516 = (_2491 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2517 = _2516 * (_2492 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2473)));
        _2518 = _2516 * (_2492 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2475)));
        _2519 = _2516 * (_2492 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2477)));
        _2520 = _2509 * 0.999000012874603271484375;
        _2530 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2530)
        {
            if ((cbInstanceData._m0[_579 + 7u].x + _2520) < 0.5)
            {
                _2733 = true;
                break;
            }
        }
        uint _2653 = _581 + uint(_2489.w);
        if ((cbInstanceData._m0[_2653].w < 1.0) && ((cbInstanceData._m0[_2653].w + _2520) < 0.5))
        {
            _2733 = true;
            break;
        }
        if ((_2513 + 1.0) < _2511.x)
        {
            _2733 = true;
            break;
        }
        _2733 = false;
        break;
    }
    float _2937;
    if (_2733)
    {
        discard_state = true;
        _2937 = 0.0;
    }
    else
    {
        _2937 = cbInstanceData._m0[_2349].w;
    }
    SV_Target.x = _2517;
    SV_Target.y = _2518;
    SV_Target.z = _2519;
    SV_Target.w = _2937;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
    discard_exit();
}


