#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _395;
float _3170;
float _3171;
float _3172;
float _3173;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _328 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _335 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _344 = cbMtdParam._m0[23u].x + _259;
    float _345 = cbMtdParam._m0[23u].y + _260;
    float _346 = cbMtdParam._m0[23u].z + _261;
    float _360 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_328 * _188, _328 * _189, _328 * _190));
    float _361 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_335 * _202, _335 * _203, _335 * _204));
    float _362 = (-0.0) - dot(vec3(_344, _345, _346), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _366 * _362;
    float _369 = (cbMtdParam._m0[19u].w * _360) * _366;
    float _371 = (cbMtdParam._m0[20u].x * _361) * _366;
    float _374 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _375 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _393;
    float _396;
    float _398;
    if (_369 > 0.0)
    {
        float _379 = (1.0 - _374) / _369;
        _393 = _379;
        _396 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_379 * _367)) * 0.16666667163372039794921875;
        _398 = (fract((_379 * _371) + _375) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _394 = ((-0.0) - _374) / _369;
            frontier_phi_3_2_ladder = _394;
            frontier_phi_3_2_ladder_1 = (fract((_394 * _371) + _375) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_394 * _367) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _395;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _393 = frontier_phi_3_2_ladder;
        _396 = frontier_phi_3_2_ladder_2;
        _398 = frontier_phi_3_2_ladder_1;
    }
    float _424;
    float _426;
    float _428;
    if (_371 > 0.0)
    {
        float _411 = (1.0 - _375) / _371;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_411 < _393)
        {
            frontier_phi_8_5_ladder = (fract(_411 * _367) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_411 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _411;
        }
        else
        {
            frontier_phi_8_5_ladder = _398;
            frontier_phi_8_5_ladder_1 = _396;
            frontier_phi_8_5_ladder_2 = _393;
        }
        _424 = frontier_phi_8_5_ladder_2;
        _426 = frontier_phi_8_5_ladder_1;
        _428 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_371 < 0.0)
        {
            float _425 = ((-0.0) - _375) / _371;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_425 < _393)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_425 * _367) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_425 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _425;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _398;
                frontier_phi_8_6_ladder_9_ladder_1 = _396;
                frontier_phi_8_6_ladder_9_ladder_2 = _393;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _398;
            frontier_phi_8_6_ladder_1 = _396;
            frontier_phi_8_6_ladder_2 = _393;
        }
        _424 = frontier_phi_8_6_ladder_2;
        _426 = frontier_phi_8_6_ladder_1;
        _428 = frontier_phi_8_6_ladder;
    }
    float _432 = (_367 > 0.0) ? (cbMtdParam._m0[16u].w / _367) : 5000.0;
    float _445;
    float _446;
    if (_432 < _424)
    {
        _445 = ((_374 + cbMtdParam._m0[17u].x) + (_432 * _369)) * 0.16666667163372039794921875;
        _446 = (((_432 * _371) + _375) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _445 = _426;
        _446 = _428;
    }
    vec4 _448 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_445, _446));
    float _453 = _448.x * cbMtdParam._m0[13u].x;
    float _454 = _448.y * cbMtdParam._m0[13u].y;
    float _455 = _448.z * cbMtdParam._m0[13u].z;
    vec4 _473 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _481 = (_473.x * 2.0) + (-1.0);
    float _483 = (_473.y * 2.0) + (-1.0);
    float _484 = dot(vec2(_481, _483), vec2(_481, _483));
    float _3182 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0))));
    float _490 = _473.z * _286;
    float _493 = fma(_489, _195, fma(_483, _202, _481 * _188));
    float _496 = fma(_489, _196, fma(_483, _203, _481 * _189));
    float _499 = fma(_489, _197, fma(_483, _204, _481 * _190));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3193 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _507 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    float _3204 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3215 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3226 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _526 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _530 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _531 = _259 * _530;
    float _532 = _260 * _530;
    float _533 = _261 * _530;
    vec4 _538 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _540 = _538.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _703 = sqrt(((_259 * _259) + (_260 * _260)) + (_261 * _261));
        float _709 = (cbMatDynParam._m0[5u].x * _703) + cbMatDynParam._m0[5u].y;
        float _3237 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _714 = (cbMatDynParam._m0[5u].z * _703) + cbMatDynParam._m0[5u].w;
        float _3248 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) - _710)) + _710) < ((_540 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _579 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _582 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _585 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    uint _598 = uint(roundEven(NORMAL.w)) * 13u;
    uint _599 = _598 + 9u;
    uint _600 = _599 + uint(cbMatDynParam._m0[0u].w);
    float _606 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0)))) * cbInstanceData._m0[_600].x;
    float _607 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_600].y;
    float _608 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_600].z;
    float _3259 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    vec4 _620 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _623 = _620.x * TEXCOORD.z;
    float _624 = dot(vec3(_504, _505, _506), vec3(_531, _532, _533));
    float _627 = _624 * 2.0;
    float _631 = (_627 * _504) - _531;
    float _632 = (_627 * _505) - _532;
    float _633 = (_627 * _506) - _533;
    float _637 = abs(dot(vec3(_531, _532, _533), vec3(_504, _505, _506)));
    float _3292 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _639 = sqrt(_507);
    float _652 = exp2((_639 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_639 * 3.0));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _748 = fma(_692, cbModelParam._m0[26u].z, fma(_688, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _684));
        float _752 = fma(_692, cbModelParam._m0[27u].z, fma(_688, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _684));
        float _756 = fma(_692, cbModelParam._m0[28u].z, fma(_688, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _684));
        float _780 = _684 + _504;
        float _781 = _688 + _505;
        float _782 = _692 + _506;
        float _792 = fma(_782, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _780)) - _748;
        float _793 = fma(_782, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _780)) - _752;
        float _794 = fma(_782, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _780)) - _756;
        float _798 = inversesqrt(dot(vec3(_792, _793, _794), vec3(_792, _793, _794)));
        float _811 = ((_798 * _792) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_748 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_798 * _793) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_752 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_798 * _794) / cbModelParam._m0[34u].z) + ((((((_756 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        float _850 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_816.x + (-0.5));
        float _852 = _850 * (_816.y + (-0.5));
        float _853 = _850 * (_816.z + (-0.5));
        float _860 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_823.x + (-0.5));
        float _862 = _860 * (_823.y + (-0.5));
        float _863 = _860 * (_823.z + (-0.5));
        float _870 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_830.x + (-0.5));
        float _872 = _870 * (_830.y + (-0.5));
        float _873 = _870 * (_830.z + (-0.5));
        float _880 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_837.x + (-0.5));
        float _882 = _880 * (_837.y + (-0.5));
        float _883 = _880 * (_837.z + (-0.5));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = _851 * 0.5;
        float _888 = _861 * 0.5;
        float _889 = _871 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _904 = (dot(vec3(_504, _505, _506), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _914 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3340 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_916 + 1.0))) + _921) * _884;
        float _931 = _852 * 0.5;
        float _932 = _862 * 0.5;
        float _933 = _872 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_504, _505, _506), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3373 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_958 + 1.0))) + _963) * _885;
        float _973 = _853 * 0.5;
        float _974 = _863 * 0.5;
        float _975 = _873 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_504, _505, _506), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3406 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_1000 + 1.0))) + _1005) * _886;
        _1022 = _853;
        _1023 = _852;
        _1024 = _851;
        _1025 = _863;
        _1026 = _862;
        _1027 = _861;
        _1028 = _873;
        _1029 = _872;
        _1030 = _871;
        _1031 = _886;
        _1032 = _885;
        _1033 = _884;
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
    }
    else
    {
        _1022 = _395;
        _1023 = _395;
        _1024 = _395;
        _1025 = _395;
        _1026 = _395;
        _1027 = _395;
        _1028 = _395;
        _1029 = _395;
        _1030 = _395;
        _1031 = _395;
        _1032 = _395;
        _1033 = _395;
        _1034 = 0.0;
        _1035 = 0.0;
        _1036 = 0.0;
    }
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1065 = fma(_692, cbModelParam._m0[30u].z, fma(_688, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _684));
        float _1069 = fma(_692, cbModelParam._m0[31u].z, fma(_688, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _684));
        float _1073 = fma(_692, cbModelParam._m0[32u].z, fma(_688, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _684));
        float _1096 = _684 + _504;
        float _1097 = _688 + _505;
        float _1098 = _692 + _506;
        float _1108 = fma(_1098, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1096)) - _1065;
        float _1109 = fma(_1098, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1096)) - _1069;
        float _1110 = fma(_1098, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1096)) - _1073;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1065 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1069 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[35u].z) + ((((((_1073 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1164 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1131.x + (-0.5));
        float _1166 = _1164 * (_1131.y + (-0.5));
        float _1167 = _1164 * (_1131.z + (-0.5));
        float _1174 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1138.x + (-0.5));
        float _1176 = _1174 * (_1138.y + (-0.5));
        float _1177 = _1174 * (_1138.z + (-0.5));
        float _1184 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1145.x + (-0.5));
        float _1186 = _1184 * (_1145.y + (-0.5));
        float _1187 = _1184 * (_1145.z + (-0.5));
        float _1194 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1152.x + (-0.5));
        float _1196 = _1194 * (_1152.y + (-0.5));
        float _1197 = _1194 * (_1152.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_504, _505, _506), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3469 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1228 + 1.0))) + _1233) * _1198;
        float _1243 = _1166 * 0.5;
        float _1244 = _1176 * 0.5;
        float _1245 = _1186 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_504, _505, _506), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3502 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1270 + 1.0))) + _1275) * _1199;
        float _1285 = _1167 * 0.5;
        float _1286 = _1177 * 0.5;
        float _1287 = _1187 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_504, _505, _506), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3535 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1312 + 1.0))) + _1317) * _1200;
        _1334 = _1167;
        _1335 = _1166;
        _1336 = _1165;
        _1337 = _1177;
        _1338 = _1176;
        _1339 = _1175;
        _1340 = _1187;
        _1341 = _1186;
        _1342 = _1185;
        _1343 = _1200;
        _1344 = _1199;
        _1345 = _1198;
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _395;
        _1335 = _395;
        _1336 = _395;
        _1337 = _395;
        _1338 = _395;
        _1339 = _395;
        _1340 = _395;
        _1341 = _395;
        _1342 = _395;
        _1343 = _395;
        _1344 = _395;
        _1345 = _395;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1034)) + _1034;
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1035)) + _1035;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1036)) + _1036;
    float _1381 = fma(_1360, cbSceneParam._m0[89u].z, fma(_1359, cbSceneParam._m0[89u].y, _1358 * cbSceneParam._m0[89u].x));
    float _1384 = fma(_1360, cbSceneParam._m0[90u].z, fma(_1359, cbSceneParam._m0[90u].y, _1358 * cbSceneParam._m0[90u].x));
    float _1387 = fma(_1360, cbSceneParam._m0[91u].z, fma(_1359, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1358));
    float _1402 = _631 * 0.5;
    float _1403 = _632 * 0.5;
    float _1404 = _633 * 0.5;
    float _1405 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1408 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1411 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1445;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1418 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1422 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1426 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1433 = dot(vec4(cbModelParam._m0[39u]), vec4(_1402, _1403, _1404, 1.0));
        _1445 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1433) ? 0.0 : (isnan(0.0) ? _1433 : max(0.0, _1433))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1445 = 1.0;
    }
    float _1456;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1447 = dot(vec4(cbModelParam._m0[40u]), vec4(_1402, _1403, _1404, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1447) ? 0.0 : (isnan(0.0) ? _1447 : max(0.0, _1447))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1460 = (_1456 * cbModelParam._m0[1u].x) + (_1445 * (1.0 - cbModelParam._m0[1u].x));
    float _1470 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _507);
    float _1471 = isnan(_1470) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1470 : min(cbModelParam._m0[25u].z, _1470));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1520 = fma(_692, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _684)) + cbModelParam._m0[13u].w;
        float _1524 = fma(_692, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _684)) + cbModelParam._m0[14u].w;
        float _1528 = fma(_692, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _684)) + cbModelParam._m0[15u].w;
        float _1531 = fma(_633, cbModelParam._m0[13u].z, fma(_632, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _631));
        float _1534 = fma(_633, cbModelParam._m0[14u].z, fma(_632, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _631));
        float _1537 = fma(_633, cbModelParam._m0[15u].z, fma(_632, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _631));
        float _1565;
        if (_1531 > 0.0)
        {
            _1565 = abs((1.0 - _1520) / _1531);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1520 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1565 = frontier_phi_29_27_ladder;
        }
        float _1914;
        if (_1534 > 0.0)
        {
            _1914 = abs((1.0 - _1524) / _1534);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1524 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1914 = frontier_phi_38_34_ladder;
        }
        float _2238;
        if (_1537 > 0.0)
        {
            _2238 = abs((1.0 - _1528) / _1537);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1528 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2238 = frontier_phi_52_45_ladder;
        }
        float _2240 = isnan(_1914) ? _1565 : (isnan(_1565) ? _1914 : min(_1565, _1914));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1531) + _1520;
        float _2246 = (_2241 * _1534) + _1524;
        float _2247 = (_2241 * _1537) + _1528;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2248;
        float _2251 = _2248 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2247 > _2251) || ((_2247 < _2249) || ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 < _2249) || (_2245 > _2251))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2247, cbModelParam._m0[9u].z, fma(_2246, cbModelParam._m0[9u].y, _2245 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2247, cbModelParam._m0[10u].z, fma(_2246, cbModelParam._m0[10u].y, _2245 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2247, cbModelParam._m0[11u].z, fma(_2246, cbModelParam._m0[11u].y, _2245 * cbModelParam._m0[11u].x))), _1471);
            frontier_phi_28_52_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1553 = frontier_phi_28_52_ladder_2;
        _1555 = frontier_phi_28_52_ladder_1;
        _1557 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_631, _632, _633), _1471);
        _1553 = _1541.x * cbModelParam._m0[1u].y;
        _1555 = _1541.y * cbModelParam._m0[1u].y;
        _1557 = _1541.z * cbModelParam._m0[1u].y;
    }
    float _1561 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _507);
    float _1562 = isnan(_1561) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1561 : min(cbModelParam._m0[25u].w, _1561));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1617 = fma(_692, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _684)) + cbModelParam._m0[21u].w;
        float _1621 = fma(_692, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _684)) + cbModelParam._m0[22u].w;
        float _1625 = fma(_692, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _684)) + cbModelParam._m0[23u].w;
        float _1628 = fma(_633, cbModelParam._m0[21u].z, fma(_632, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _631));
        float _1631 = fma(_633, cbModelParam._m0[22u].z, fma(_632, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _631));
        float _1634 = fma(_633, cbModelParam._m0[23u].z, fma(_632, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _631));
        float _1919;
        if (_1628 > 0.0)
        {
            _1919 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1919 = frontier_phi_40_36_ladder;
        }
        float _2264;
        if (_1631 > 0.0)
        {
            _2264 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2264 = frontier_phi_54_47_ladder;
        }
        float _2454;
        if (_1634 > 0.0)
        {
            _2454 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2454 = frontier_phi_72_65_ladder;
        }
        float _2456 = isnan(_2264) ? _1919 : (isnan(_1919) ? _2264 : min(_1919, _2264));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1628) + _1617;
        float _2462 = (_2457 * _1631) + _1621;
        float _2463 = (_2457 * _1634) + _1625;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2465 = (-1.0) - _2464;
        float _2467 = _2464 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2463 > _2467) || ((_2463 < _2465) || ((_2462 > _2467) || ((_2462 < _2465) || ((_2461 < _2465) || (_2461 > _2467))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2463, cbModelParam._m0[17u].z, fma(_2462, cbModelParam._m0[17u].y, _2461 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2463, cbModelParam._m0[18u].z, fma(_2462, cbModelParam._m0[18u].y, _2461 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2463, cbModelParam._m0[19u].z, fma(_2462, cbModelParam._m0[19u].y, _2461 * cbModelParam._m0[19u].x))), _1562);
            frontier_phi_37_72_ladder = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1653 = frontier_phi_37_72_ladder_2;
        _1655 = frontier_phi_37_72_ladder_1;
        _1657 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_631, _632, _633), _1562);
        _1653 = _1637.x * cbModelParam._m0[1u].z;
        _1655 = _1637.y * cbModelParam._m0[1u].z;
        _1657 = _1637.z * cbModelParam._m0[1u].z;
    }
    float _1669 = ((((1.0 - _652) * ((_639 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_652 * _639)) * _623;
    float _1670 = _1669 * ((cbModelParam._m0[1u].w * (_1653 - _1553)) + _1553);
    float _1671 = _1669 * ((cbModelParam._m0[1u].w * (_1655 - _1555)) + _1555);
    float _1672 = _1669 * ((cbModelParam._m0[1u].w * (_1657 - _1557)) + _1557);
    float _1675 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, _1670 * cbSceneParam._m0[91u].x));
    uvec4 _1691 = floatBitsToUint(cbInstanceData._m0[_598 + 5u]);
    uint _1693 = _1691.x * 14u;
    uint _1694 = _1693 + 13u;
    float _1699 = _623 + (-1.0);
    float _1702 = (cbLight._m0[_1694].x * _1699) + 1.0;
    float _1703 = (cbLight._m0[_1694].y * _1699) + 1.0;
    uint _1704 = _1693 + 5u;
    float _1710 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1714 = _1693 + 4u;
    float _1721 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1725 = _1693 | 1u;
    float _1736 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_504, _505, _506));
    float _1739 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_504, _505, _506));
    float _3671 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _3682 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1744 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.3183098733425140380859375;
    float _1746 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.3183098733425140380859375;
    float _1753 = ((cbLight._m0[_1704].x * _1710) * _1746) + ((cbLight._m0[_1714].x * _1721) * _1744);
    float _1754 = ((_1710 * cbLight._m0[_1704].y) * _1746) + ((_1721 * cbLight._m0[_1714].y) * _1744);
    float _1755 = ((_1710 * cbLight._m0[_1704].z) * _1746) + ((_1721 * cbLight._m0[_1714].z) * _1744);
    uint _1757 = _1693 + 8u;
    float _1770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1693].w)) * _507) * 0.949999988079071044921875);
    float _1771 = _1770 * _1770;
    float _1772 = cbLight._m0[_1693].x + _531;
    float _1773 = cbLight._m0[_1693].y + _532;
    float _1774 = cbLight._m0[_1693].z + _533;
    float _1778 = inversesqrt(dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774)));
    float _1779 = _1778 * _1772;
    float _1780 = _1778 * _1773;
    float _1781 = _1778 * _1774;
    float _1782 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1693].xyz));
    float _3693 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _1786 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _1787 = dot(vec3(_504, _505, _506), vec3(_1779, _1780, _1781));
    float _3715 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _1791 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_1779, _1780, _1781));
    float _3726 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1795 = _1771 * _1771;
    float _1799 = ((_1790 * _1790) * (_1795 + (-1.0))) + 1.0;
    float _1810 = (exp2(log2(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1811 = 1.0 - _1771;
    float _1822 = (0.5 / (((_1786 * ((_1785 * _1811) + _1771)) + 9.9999999392252902907785028219223e-09) + (((_1786 * _1811) + _1771) * _1785))) * _1785;
    float _3737 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1824 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1795 / ((_1799 * _1799) * 3.141590118408203125));
    uint _1835 = _1693 + 9u;
    float _1846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _507) * 0.949999988079071044921875);
    float _1847 = _1846 * _1846;
    float _1848 = cbLight._m0[_1725].x + _531;
    float _1849 = cbLight._m0[_1725].y + _532;
    float _1850 = cbLight._m0[_1725].z + _533;
    float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
    float _1855 = _1854 * _1848;
    float _1856 = _1854 * _1849;
    float _1857 = _1854 * _1850;
    float _1858 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1725].xyz));
    float _3748 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _1862 = dot(vec3(_504, _505, _506), vec3(_1855, _1856, _1857));
    float _3759 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1865 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _1866 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1855, _1856, _1857));
    float _3770 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1870 = _1847 * _1847;
    float _1874 = ((_1865 * _1865) * (_1870 + (-1.0))) + 1.0;
    float _1883 = (exp2(log2(1.0 - (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1884 = 1.0 - _1847;
    float _1894 = (0.5 / (((_1786 * ((_1861 * _1884) + _1847)) + 9.9999999392252902907785028219223e-09) + (((_1786 * _1884) + _1847) * _1861))) * _1861;
    float _3781 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1896 = (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1870 / ((_1874 * _1874) * 3.141590118408203125));
    float _1906 = (((_1883 * cbLight._m0[_1835].x) * _1896) * _1710) + (((_1810 * cbLight._m0[_1757].x) * _1824) * _1721);
    float _1907 = (((_1883 * cbLight._m0[_1835].y) * _1896) * _1710) + (((_1810 * cbLight._m0[_1757].y) * _1824) * _1721);
    float _1908 = (((_1883 * cbLight._m0[_1835].z) * _1896) * _1710) + (((_1810 * cbLight._m0[_1757].z) * _1824) * _1721);
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    float _2031;
    float _2033;
    if (_1691.y == 0u)
    {
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1963;
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1963;
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1963;
        uvec4 _1978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1979 = _1978.x;
        uint _1990 = uint((float(_1978.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _1979))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _1979)));
        float _2000 = (log2(_1966 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2001 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        uint _2004 = uint(isnan(14.0) ? _2001 : (isnan(_2001) ? 14.0 : min(_2001, 14.0)));
        uvec4 _2009 = texelFetch(g_lightClusterGridBuffer, int(((_2004 << 2u) + (_1990 << 6u)) >> 2u));
        uint _2010 = _2009.x;
        uint _2011 = _1978.z;
        float _2117;
        float _2119;
        float _2121;
        float _2123;
        float _2125;
        float _2127;
        if (((((1u << ((_2011 >> 4u) & 15u)) + 4294967295u) & _2010) == 0u) || ((_2011 & 240u) == 0u))
        {
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
        }
        else
        {
            float _2118;
            float _2120;
            float _2122;
            float _2124;
            float _2126;
            float _2128;
            float _2301 = 0.0;
            float _2302 = 0.0;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            uint _2307 = 0u;
            uint _2316;
            bool _2317;
            for (;;)
            {
                _2316 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2307 << 2u)) >> 2u)).x;
                _2317 = _2316 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2317)
                {
                    frontier_phi_67_pred = _2304;
                    frontier_phi_67_pred_1 = _2303;
                    frontier_phi_67_pred_2 = _2302;
                    frontier_phi_67_pred_3 = _2301;
                    frontier_phi_67_pred_4 = _2305;
                    frontier_phi_67_pred_5 = _2306;
                }
                else
                {
                    float _2497;
                    float _2498;
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    uint _2503;
                    _2497 = _2301;
                    _2498 = _2302;
                    _2499 = _2303;
                    _2500 = _2304;
                    _2501 = _2305;
                    _2502 = _2306;
                    _2503 = _2316;
                    float _2398;
                    float _2399;
                    float _2400;
                    float _2401;
                    float _2402;
                    float _2403;
                    for (;;)
                    {
                        uint _2507 = uint(findLSB(_2503)) + (_2307 << 5u);
                        uint _2504 = (_2503 + 4294967295u) & _2503;
                        uint _2509 = _2507 * 48u;
                        vec4 _2523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2509)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 3u)).x));
                        uint _2529 = (_2507 * 48u) + 4u;
                        vec4 _2542 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2529)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 3u)).x));
                        uint _2548 = (_2507 * 48u) + 8u;
                        vec3 _2559 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2548)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 2u)).x));
                        float _2563 = _2523.x - _1964;
                        float _2564 = _2523.y - _1965;
                        float _2565 = _2523.z - _1966;
                        float _2566 = dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565));
                        float _2569 = inversesqrt(_2566);
                        float _2570 = _2569 * _2563;
                        float _2571 = _2569 * _2564;
                        float _2572 = _2569 * _2565;
                        float _2573 = dot(vec3(_579, _582, _585), vec3(_2570, _2571, _2572));
                        float _2578 = 1.0 - (_2566 * _2523.w);
                        float _3802 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
                        float _2579 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
                        float _2580 = sqrt(_2566) * _2542.w;
                        float _2583 = 1.39999997615814208984375 / (_2580 + 1.39999997615814208984375);
                        float _2584 = _2583 * _2583;
                        float _2587 = ((1.0 - _2584) * _2573) + _2584;
                        float _2590 = _2580 * _2580;
                        float _2594 = ((isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0))) * _2579) / ((_2590 * 0.699999988079071044921875) + 1.0);
                        float _2598 = (-0.0) - _1964;
                        float _2599 = (-0.0) - _1965;
                        float _2600 = (-0.0) - _1966;
                        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
                        float _2605 = _2604 * _2598;
                        float _2606 = _2604 * _2599;
                        float _2607 = _2604 * _2600;
                        float _2615 = exp2(log2(1.0 / ((_2590 * 3.5) + 5.0)) * 0.25);
                        float _2616 = 1.0 - _639;
                        float _2623 = sqrt(1.0 - ((1.0 - (_2616 * _2616)) * (1.0 - (_2615 * _2615))));
                        float _2624 = _2623 * _2623;
                        float _2625 = _2624 * _2624;
                        float _2626 = _2605 + _2570;
                        float _2627 = _2606 + _2571;
                        float _2628 = _2607 + _2572;
                        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
                        float _2636 = dot(vec3(_579, _582, _585), vec3(_2605, _2606, _2607));
                        float _3818 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                        float _2639 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
                        float _2640 = dot(vec3(_579, _582, _585), vec3(_2632 * _2626, _2632 * _2627, _2632 * _2628));
                        float _3829 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
                        float _2643 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
                        float _2647 = ((_2643 * _2643) * (_2625 + (-1.0))) + 1.0;
                        float _2648 = _2583 * _2624;
                        float _2649 = _2648 * _2648;
                        float _2652 = ((1.0 - _2649) * _2573) + _2649;
                        float _3840 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                        float _2653 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
                        float _2654 = 1.0 - _2624;
                        float _2664 = (0.5 / (((_2653 * ((_2639 * _2654) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _2654) + _2624) * _2639))) * _2653;
                        float _3851 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2675 = (((_2625 * 3.1415927410125732421875) * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) / ((_2647 * _2647) * ((_2590 * 2.1991131305694580078125) + 3.141590118408203125))) * _2579;
                        _2401 = (_2594 * _2542.x) + _2500;
                        _2402 = (_2594 * _2542.y) + _2501;
                        _2403 = (_2594 * _2542.z) + _2502;
                        _2398 = (_2675 * _2559.x) + _2497;
                        _2399 = (_2675 * _2559.y) + _2498;
                        _2400 = (_2675 * _2559.z) + _2499;
                        if (_2504 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2497 = _2398;
                            _2498 = _2399;
                            _2499 = _2400;
                            _2500 = _2401;
                            _2501 = _2402;
                            _2502 = _2403;
                            _2503 = _2504;
                        }
                    }
                    frontier_phi_67_pred = _2401;
                    frontier_phi_67_pred_1 = _2400;
                    frontier_phi_67_pred_2 = _2399;
                    frontier_phi_67_pred_3 = _2398;
                    frontier_phi_67_pred_4 = _2402;
                    frontier_phi_67_pred_5 = _2403;
                }
                _2124 = frontier_phi_67_pred;
                _2122 = frontier_phi_67_pred_1;
                _2120 = frontier_phi_67_pred_2;
                _2118 = frontier_phi_67_pred_3;
                _2126 = frontier_phi_67_pred_4;
                _2128 = frontier_phi_67_pred_5;
                uint _2308 = _2307 + 1u;
                if (_2308 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2301 = _2118;
                    _2302 = _2120;
                    _2303 = _2122;
                    _2304 = _2124;
                    _2305 = _2126;
                    _2306 = _2128;
                    _2307 = _2308;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
        }
        uvec4 _2131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2132 = _2131.z;
        uint _2134 = (_2132 >> 8u) & 15u;
        float _2269;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        if (((4294967295u << _2134) & _2010) == 0u)
        {
            _2269 = _2117;
            _2271 = _2119;
            _2273 = _2121;
            _2275 = _2123;
            _2277 = _2125;
            _2279 = _2127;
        }
        else
        {
            float _2294 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
            float _2295 = _2294 * _1964;
            float _2296 = _2294 * _1965;
            float _2297 = _2294 * _1966;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2134 < ((_2132 >> 12u) & 15u))
            {
                float _2270;
                float _2272;
                float _2274;
                float _2276;
                float _2278;
                float _2280;
                float _2480 = _2117;
                float _2481 = _2119;
                float _2482 = _2121;
                float _2483 = _2123;
                float _2484 = _2125;
                float _2485 = _2127;
                uint _2486 = _2134;
                uint _2495;
                bool _2496;
                for (;;)
                {
                    _2495 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2486 << 2u)) >> 2u)).x;
                    _2496 = _2495 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2496)
                    {
                        frontier_phi_81_pred = _2483;
                        frontier_phi_81_pred_1 = _2482;
                        frontier_phi_81_pred_2 = _2481;
                        frontier_phi_81_pred_3 = _2480;
                        frontier_phi_81_pred_4 = _2485;
                        frontier_phi_81_pred_5 = _2484;
                    }
                    else
                    {
                        float _2710;
                        float _2711;
                        float _2712;
                        float _2713;
                        float _2714;
                        float _2715;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _2723 = _2480;
                        float _2724 = _2481;
                        float _2725 = _2482;
                        float _2726 = _2483;
                        float _2727 = _2484;
                        float _2728 = _2485;
                        uint _2729 = _2495;
                        uint _2730;
                        vec4 _2755;
                        float _2756;
                        vec4 _2771;
                        vec3 _2783;
                        vec4 _2798;
                        vec4 _2813;
                        float _2859;
                        bool _2860;
                        for (;;)
                        {
                            uint _2740 = ((_2486 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2729));
                            _2730 = (_2729 + 4294967295u) & _2729;
                            uint _2742 = _2740 * 40u;
                            _2755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 3u)).x));
                            _2756 = _2755.w;
                            uint _2758 = (_2740 * 40u) + 4u;
                            _2771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 3u)).x));
                            uint _2773 = (_2740 * 40u) + 8u;
                            _2783 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x));
                            uint _2785 = (_2740 * 40u) + 16u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            uint _2800 = (_2740 * 40u) + 20u;
                            _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            uint _2815 = (_2740 * 40u) + 24u;
                            vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            uint _2834 = (_2740 * 40u) + 28u;
                            vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            _2859 = fma(_1966, _2847.z, fma(_1965, _2847.y, _2847.x * _1964)) + _2847.w;
                            _2860 = !((fma(_1966, _2828.z, fma(_1965, _2828.y, _2828.x * _1964)) + _2828.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2860)
                            {
                                float _2887 = _2755.x - _1964;
                                float _2888 = _2755.y - _1965;
                                float _2889 = _2755.z - _1966;
                                float _2890 = dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889));
                                float _2893 = inversesqrt(_2890);
                                float _2894 = _2893 * _2887;
                                float _2895 = _2893 * _2888;
                                float _2896 = _2893 * _2889;
                                float _2900 = 1.0 - (_2890 / (_2756 * _2756));
                                float _3862 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                                float _2901 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
                                float _2905 = sqrt(_2890) * _2771.w;
                                float _2907 = 1.39999997615814208984375 / (_2905 + 1.39999997615814208984375);
                                float _2908 = _2907 * _2907;
                                float _2911 = ((1.0 - _2908) * dot(vec3(_2894, _2895, _2896), vec3(_579, _582, _585))) + _2908;
                                float _2914 = _2905 * _2905;
                                float _2918 = (fma(_1966, _2798.z, fma(_1965, _2798.y, _2798.x * _1964)) + _2798.w) / _2859;
                                float _2919 = (fma(_1966, _2813.z, fma(_1965, _2813.y, _2813.x * _1964)) + _2813.w) / _2859;
                                float _2923 = 1.0 - dot(vec2(_2918, _2919), vec2(_2918, _2919));
                                float _3878 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                                float _2924 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                                float _2925 = _2924 * (((isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))) * _2901) / ((_2914 * 0.699999988079071044921875) + 1.0));
                                float _2937 = exp2(log2(1.0 / ((_2914 * 3.5) + 5.0)) * 0.25);
                                float _2938 = 1.0 - _639;
                                float _2945 = sqrt(1.0 - ((1.0 - (_2938 * _2938)) * (1.0 - (_2937 * _2937))));
                                float _2946 = _2945 * _2945;
                                float _2947 = _2946 * _2946;
                                float _2948 = _2894 - _2295;
                                float _2949 = _2895 - _2296;
                                float _2950 = _2896 - _2297;
                                float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
                                float _2958 = dot(vec3(_579, _582, _585), vec3((-0.0) - _2295, (-0.0) - _2296, (-0.0) - _2297));
                                float _3889 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                                float _2961 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
                                float _2962 = dot(vec3(_579, _582, _585), vec3(_2954 * _2948, _2954 * _2949, _2954 * _2950));
                                float _3900 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2965 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                                float _2969 = ((_2965 * _2965) * (_2947 + (-1.0))) + 1.0;
                                float _2970 = _2907 * _2946;
                                float _2971 = _2970 * _2970;
                                float _2977 = ((1.0 - _2971) * dot(vec3(_579, _582, _585), vec3(_2894, _2895, _2896))) + _2971;
                                float _3911 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                                float _2979 = 1.0 - _2946;
                                float _2989 = (0.5 / (((_2978 * ((_2961 * _2979) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2978 * _2979) + _2946) * _2961))) * _2978;
                                float _3922 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2999 = (_2924 * _2901) * (((_2947 * 3.1415927410125732421875) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) / ((_2969 * _2969) * ((_2914 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2925 * _2771.x;
                                frontier_phi_87_pred_1 = _2999 * _2783.z;
                                frontier_phi_87_pred_2 = _2999 * _2783.y;
                                frontier_phi_87_pred_3 = _2999 * _2783.x;
                                frontier_phi_87_pred_4 = _2925 * _2771.z;
                                frontier_phi_87_pred_5 = _2925 * _2771.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3006 = frontier_phi_87_pred;
                            _3005 = frontier_phi_87_pred_1;
                            _3004 = frontier_phi_87_pred_2;
                            _3003 = frontier_phi_87_pred_3;
                            _3008 = frontier_phi_87_pred_4;
                            _3007 = frontier_phi_87_pred_5;
                            _2713 = _3006 + _2726;
                            _2714 = _3007 + _2727;
                            _2715 = _3008 + _2728;
                            _2710 = _3003 + _2723;
                            _2711 = _3004 + _2724;
                            _2712 = _3005 + _2725;
                            if (_2730 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2723 = _2710;
                                _2724 = _2711;
                                _2725 = _2712;
                                _2726 = _2713;
                                _2727 = _2714;
                                _2728 = _2715;
                                _2729 = _2730;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2713;
                        frontier_phi_81_pred_1 = _2712;
                        frontier_phi_81_pred_2 = _2711;
                        frontier_phi_81_pred_3 = _2710;
                        frontier_phi_81_pred_4 = _2715;
                        frontier_phi_81_pred_5 = _2714;
                    }
                    _2276 = frontier_phi_81_pred;
                    _2274 = frontier_phi_81_pred_1;
                    _2272 = frontier_phi_81_pred_2;
                    _2270 = frontier_phi_81_pred_3;
                    _2280 = frontier_phi_81_pred_4;
                    _2278 = frontier_phi_81_pred_5;
                    uint _2487 = _2486 + 1u;
                    if (_2487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2480 = _2270;
                        _2481 = _2272;
                        _2482 = _2274;
                        _2483 = _2276;
                        _2484 = _2278;
                        _2485 = _2280;
                        _2486 = _2487;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2280;
                frontier_phi_56_57_ladder_1 = _2278;
                frontier_phi_56_57_ladder_2 = _2276;
                frontier_phi_56_57_ladder_3 = _2272;
                frontier_phi_56_57_ladder_4 = _2270;
                frontier_phi_56_57_ladder_5 = _2274;
            }
            else
            {
                frontier_phi_56_57_ladder = _2127;
                frontier_phi_56_57_ladder_1 = _2125;
                frontier_phi_56_57_ladder_2 = _2123;
                frontier_phi_56_57_ladder_3 = _2119;
                frontier_phi_56_57_ladder_4 = _2117;
                frontier_phi_56_57_ladder_5 = _2121;
            }
            _2269 = frontier_phi_56_57_ladder_4;
            _2271 = frontier_phi_56_57_ladder_3;
            _2273 = frontier_phi_56_57_ladder_5;
            _2275 = frontier_phi_56_57_ladder_2;
            _2277 = frontier_phi_56_57_ladder_1;
            _2279 = frontier_phi_56_57_ladder;
        }
        float _2284 = isnan(1.0) ? _623 : (isnan(_623) ? 1.0 : min(_623, 1.0));
        _2023 = (_2284 * _2275) + _1753;
        _2025 = (_2284 * _2277) + _1754;
        _2027 = (_2284 * _2279) + _1755;
        _2029 = ((_2269 * 0.039999999105930328369140625) * _2284) + _1906;
        _2031 = ((_2271 * 0.039999999105930328369140625) * _2284) + _1907;
        _2033 = ((_2273 * 0.039999999105930328369140625) * _2284) + _1908;
    }
    else
    {
        _2023 = _1753;
        _2025 = _1754;
        _2027 = _1755;
        _2029 = _1906;
        _2031 = _1907;
        _2033 = _1908;
    }
    uint _2039 = _599 + uint(cbMatDynParam._m0[0u].w);
    float _3938 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3949 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3960 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _2064 = (((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_2023 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _623))) + ((_2029 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1460)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2039].x * (_453 - (_453 * _286)));
    float _2066 = ((cbInstanceData._m0[_2039].y * (_454 - (_454 * _286))) + ((_2031 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1460)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_2025 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _623)));
    float _2068 = ((cbInstanceData._m0[_2039].z * (_455 - (_455 * _286))) + ((_2033 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1460)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2027 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _623)));
    float _2069 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2070 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2071 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    uint _2072 = _598 + 6u;
    float _2080 = _558 / cbSceneParam._m0[86u].x;
    float _2081 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2095 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2080, _2081, (log2((isnan(cbSceneParam._m0[77u].w) ? _526 : (isnan(_526) ? cbSceneParam._m0[77u].w : min(_526, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2097 = _2095.x;
    float _2098 = _2095.y;
    float _2099 = _2095.z;
    float _2100 = _2095.w;
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    if (_526 > cbSceneParam._m0[78u].w)
    {
        float _2142 = isnan(_526) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _526 : min(cbSceneParam._m0[80u].w, _526));
        float _2143 = _2142 / _526;
        float _2154 = _2143 * _259;
        float _2155 = _260 * _2143;
        float _2156 = (-0.0) - _2155;
        float _2157 = _2143 * _261;
        float _2159 = (cbSceneParam._m0[77u].w * _2156) / _2142;
        float _2160 = _2159 + cbSceneParam._m0[79u].w;
        float _2161 = cbSceneParam._m0[79u].w - _2155;
        float _2167 = sqrt(((_2154 * _2154) + (_2155 * _2155)) + (_2157 * _2157));
        float _2170 = (1.0 - (cbSceneParam._m0[77u].w / _2142)) * _2167;
        float _2176 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2178 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2411;
        if (abs((_2156 - _2159) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2411 = ((((_2160 > 0.0) ? exp2(_2176 * _2160) : (2.0 - exp2(_2178 * _2160))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2170;
        }
        else
        {
            float _2330 = 1.0 / cbSceneParam._m0[80u].x;
            float _2331 = isnan(_2161) ? _2160 : (isnan(_2160) ? _2161 : max(_2160, _2161));
            float _2332 = isnan(_2161) ? _2160 : (isnan(_2160) ? _2161 : min(_2160, _2161));
            float _2341 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : min(_2331, 0.0));
            float _2342 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : min(_2332, 0.0));
            _2411 = ((abs(_2167 / _2156) * cbSceneParam._m0[80u].y) * ((((_2341 - _2342) * 2.0) - ((exp2(_2176 * (isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0)))) - exp2(_2176 * (isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0))))) * _2330)) - ((exp2(_2178 * _2341) - exp2(_2178 * _2342)) * _2330))) + (_2170 * cbSceneParam._m0[80u].z);
        }
        vec4 _2413 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2080, _2081, 1.0), 0.0);
        float _2422 = exp2((_2411 * (-1.44269502162933349609375)) * (1.0 - _2413.w));
        float _2423 = log2(_2422);
        float _2439 = log2(_2100);
        _2180 = (exp2(_2439 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2423 * cbSceneParam._m0[78u].x)) * _2413.x) / cbSceneParam._m0[78u].x)) + _2097;
        _2182 = (exp2(_2439 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2423 * cbSceneParam._m0[78u].y)) * _2413.y) / cbSceneParam._m0[78u].y)) + _2098;
        _2184 = (exp2(_2439 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2423 * cbSceneParam._m0[78u].z)) * _2413.z) / cbSceneParam._m0[78u].z)) + _2099;
        _2186 = _2422 * _2100;
    }
    else
    {
        _2180 = _2097;
        _2182 = _2098;
        _2184 = _2099;
        _2186 = _2100;
    }
    bool _2449;
    vec4 _2196;
    vec4 _2218;
    float _2220;
    float _2224;
    float _2225;
    float _2226;
    float _2227;
    bool _2237;
    for (;;)
    {
        _2196 = cbMatDynParam._m0[0u];
        float _2198 = roundEven(_2196.y);
        bool _2199 = _2198 == 3.0;
        float _2200 = log2(_2186);
        float _2207 = exp2(_2200 * cbSceneParam._m0[78u].x) * _2069;
        float _2208 = exp2(_2200 * cbSceneParam._m0[78u].y) * _2070;
        float _2209 = exp2(_2200 * cbSceneParam._m0[78u].z) * _2071;
        float _2216 = _540 + (-0.5);
        _2218 = cbMtdParam._m0[1u];
        _2220 = _2218.y * _2216;
        float _2223 = (_2198 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2224 = _2223 * (_2199 ? _2207 : (_2207 + (cbSceneParam._m0[72u].w * _2180)));
        _2225 = _2223 * (_2199 ? _2208 : (_2208 + (cbSceneParam._m0[72u].w * _2182)));
        _2226 = _2223 * (_2199 ? _2209 : (_2209 + (cbSceneParam._m0[72u].w * _2184)));
        _2227 = _2216 * 0.999000012874603271484375;
        _2237 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2237)
        {
            if ((cbInstanceData._m0[_598 + 7u].x + _2227) < 0.5)
            {
                _2449 = true;
                break;
            }
        }
        uint _2365 = _599 + uint(_2196.w);
        if ((cbInstanceData._m0[_2365].w < 1.0) && ((cbInstanceData._m0[_2365].w + _2227) < 0.5))
        {
            _2449 = true;
            break;
        }
        if ((_2220 + 1.0) < _2218.x)
        {
            _2449 = true;
            break;
        }
        _2449 = false;
        break;
    }
    float _2680;
    if (_2449)
    {
        discard_state = true;
        _2680 = 0.0;
    }
    else
    {
        _2680 = cbInstanceData._m0[_2072].w;
    }
    SV_Target.x = _2224;
    SV_Target.y = _2225;
    SV_Target.z = _2226;
    SV_Target.w = _2680;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2072].w;
    discard_exit();
}


