#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1182;
float _3600;
float _3601;
float _3602;
float _3603;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    vec4 _329 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _333 = _329.z;
    float _356 = (_329.x * 2.0) + (-1.0);
    float _358 = (_329.y * 2.0) + (-1.0);
    float _361 = _356 - (_356 * _294);
    float _362 = _358 - (_358 * _294);
    float _371 = cbMtdParam._m0[22u].y + _267;
    float _372 = cbMtdParam._m0[22u].z + _268;
    float _373 = cbMtdParam._m0[22u].w + _269;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_196, _197, _198));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_210, _211, _212));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _393 * _389;
    float _397 = (_393 * _387) + (_361 * cbMtdParam._m0[20u].y);
    float _398 = (_393 * _388) + (_362 * cbMtdParam._m0[20u].z);
    float _399 = _397 * cbMtdParam._m0[19u].x;
    float _400 = _398 * cbMtdParam._m0[18u].w;
    float _401 = fract(TEXCOORD.x);
    float _402 = fract(TEXCOORD.y);
    float _408;
    if (_399 > 0.0)
    {
        _408 = (1.0 - _401) / _399;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_399 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _401) / _399;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _408 = frontier_phi_3_2_ladder;
    }
    float _416;
    if (_400 > 0.0)
    {
        _416 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _416 = frontier_phi_7_6_ladder;
    }
    bool _418 = _396 > 0.0;
    float _420 = _418 ? (cbMtdParam._m0[15u].x / _396) : 5000.0;
    float _421 = isnan(_416) ? _408 : (isnan(_408) ? _416 : min(_408, _416));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = _401 + (-0.5);
    float _430 = _402 + (-0.5);
    float _433 = ((_422 * _396) + _426) / _426;
    vec4 _458 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_427 + (_422 * _399)) / _433) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_430 + (_422 * _400)) / _433) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _462 = _458.z;
    float _474 = (_460 - (_460 * _294)) * cbMtdParam._m0[9u].x;
    float _475 = (_461 - (_461 * _294)) * cbMtdParam._m0[9u].y;
    float _476 = cbMtdParam._m0[9u].z * (_462 - (_462 * _294));
    float _494 = _397 * cbMtdParam._m0[21u].x;
    float _495 = _398 * cbMtdParam._m0[20u].w;
    bool _496 = _494 > 0.0;
    float _501;
    if (_496)
    {
        _501 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _501 = frontier_phi_11_10_ladder;
    }
    bool _503 = _495 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _508 = frontier_phi_15_14_ladder;
    }
    float _511 = _418 ? (cbMtdParam._m0[16u].z / _396) : 5000.0;
    float _512 = isnan(_508) ? _501 : (isnan(_501) ? _508 : min(_501, _508));
    float _513 = isnan(_511) ? _512 : (isnan(_512) ? _511 : min(_512, _511));
    float _517 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _521 = ((_513 * _396) + _517) / _517;
    float _526 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _528 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _544 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_513 * _494)) / _521) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_513 * _495)) / _521) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _549 = _544.x * cbMtdParam._m0[10u].x;
    float _550 = _544.y * cbMtdParam._m0[10u].y;
    float _551 = _544.z * cbMtdParam._m0[10u].z;
    float _559;
    if (_496)
    {
        _559 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _559 = frontier_phi_19_18_ladder;
    }
    float _565;
    if (_503)
    {
        _565 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _565 = frontier_phi_23_22_ladder;
    }
    float _567 = isnan(_565) ? _559 : (isnan(_559) ? _565 : min(_559, _565));
    float _568 = isnan(_511) ? _567 : (isnan(_567) ? _511 : min(_567, _511));
    float _575 = ((_568 * _396) + _517) / _517;
    vec4 _589 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_568 * _494)) / _575) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_568 * _495)) / _575) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _591 = _589.w;
    float _593 = _591 - (_591 * _294);
    float _604 = 0.5 - (_294 * 0.5);
    float _614 = (((_474 - _307) + (_593 * ((_549 - _474) - (_549 * _294)))) * _604) + _307;
    float _615 = (((_475 - _309) + (_593 * ((_550 - _475) - (_550 * _294)))) * _604) + _309;
    float _616 = (((_476 - _311) + (_593 * ((_551 - _476) - (_551 * _294)))) * _604) + _311;
    vec4 _628 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _632 = _628.z;
    float _635 = (_628.x * 2.0) + (-1.0);
    float _636 = (_628.y * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3642 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _642 = sqrt(1.0 - (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))));
    float _643 = _632 * _294;
    float _650 = (cbMtdParam._m0[15u].w * ((_333 - _643) + ((_632 - _333) * _294))) + _643;
    float _654 = (cbMtdParam._m0[16u].x * _361) + _635;
    float _655 = (cbMtdParam._m0[16u].x * _362) + _636;
    float _658 = fma(_642, _203, fma(_655, _210, _654 * _196));
    float _661 = fma(_642, _204, fma(_655, _211, _654 * _197));
    float _664 = fma(_642, _205, fma(_655, _212, _654 * _198));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _3653 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _672 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _3664 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3675 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3686 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _696 = _267 * _695;
    float _697 = _268 * _695;
    float _698 = _269 * _695;
    vec4 _703 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _705 = _703.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _863 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _869 = (cbMatDynParam._m0[5u].x * _863) + cbMatDynParam._m0[5u].y;
        float _3697 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _874 = (cbMatDynParam._m0[5u].z * _863) + cbMatDynParam._m0[5u].w;
        float _3708 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) - _870)) + _870) < ((_705 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _738 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _741 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _744 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    uint _757 = uint(roundEven(NORMAL.w)) * 13u;
    uint _759 = _757 + 9u;
    uint _760 = _759 + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * cbInstanceData._m0[_760].z;
    float _3719 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    vec4 _780 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _783 = _780.x * TEXCOORD.z;
    float _784 = dot(vec3(_669, _670, _671), vec3(_696, _697, _698));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _669) - _696;
    float _792 = (_787 * _670) - _697;
    float _793 = (_787 * _671) - _698;
    float _797 = abs(dot(vec3(_696, _697, _698), vec3(_669, _670, _671)));
    float _3752 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_672);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _908 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _912 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _916 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _939 = _844 + _669;
        float _940 = _848 + _670;
        float _941 = _852 + _671;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _908;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _912;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _916;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_908 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_912 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_916 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_669, _670, _671), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3800 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_669, _670, _671), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3833 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_669, _670, _671), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3866 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1225 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1229 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1233 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1256 = _844 + _669;
        float _1257 = _848 + _670;
        float _1258 = _852 + _671;
        float _1268 = fma(_1258, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1225 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1229 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[35u].z) + ((((((_1233 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1324 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1291.x + (-0.5));
        float _1326 = _1324 * (_1291.y + (-0.5));
        float _1327 = _1324 * (_1291.z + (-0.5));
        float _1334 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1298.x + (-0.5));
        float _1336 = _1334 * (_1298.y + (-0.5));
        float _1337 = _1334 * (_1298.z + (-0.5));
        float _1344 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1305.x + (-0.5));
        float _1346 = _1344 * (_1305.y + (-0.5));
        float _1347 = _1344 * (_1305.z + (-0.5));
        float _1354 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1312.x + (-0.5));
        float _1356 = _1354 * (_1312.y + (-0.5));
        float _1357 = _1354 * (_1312.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_669, _670, _671), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3929 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1388 + 1.0))) + _1393) * _1358;
        float _1403 = _1326 * 0.5;
        float _1404 = _1336 * 0.5;
        float _1405 = _1346 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_669, _670, _671), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3962 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1430 + 1.0))) + _1435) * _1359;
        float _1445 = _1327 * 0.5;
        float _1446 = _1337 * 0.5;
        float _1447 = _1347 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_669, _670, _671), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3995 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1472 + 1.0))) + _1477) * _1360;
        _1494 = _1327;
        _1495 = _1326;
        _1496 = _1325;
        _1497 = _1337;
        _1498 = _1336;
        _1499 = _1335;
        _1500 = _1347;
        _1501 = _1346;
        _1502 = _1345;
        _1503 = _1360;
        _1504 = _1359;
        _1505 = _1358;
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = _1182;
        _1502 = _1182;
        _1503 = _1182;
        _1504 = _1182;
        _1505 = _1182;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1194)) + _1194;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1195)) + _1195;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1196)) + _1196;
    float _1541 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1518));
    float _1562 = _791 * 0.5;
    float _1563 = _792 * 0.5;
    float _1564 = _793 * 0.5;
    float _1565 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1568 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1571 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1605;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1578 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1582 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1586 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1593 = dot(vec4(cbModelParam._m0[39u]), vec4(_1562, _1563, _1564, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1616;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1607 = dot(vec4(cbModelParam._m0[40u]), vec4(_1562, _1563, _1564, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1620 = (_1616 * cbModelParam._m0[1u].x) + (_1605 * (1.0 - cbModelParam._m0[1u].x));
    float _1630 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _672);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1630 : min(cbModelParam._m0[25u].z, _1630));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1679 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1683 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1687 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1690 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1693 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1696 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1724;
        if (_1690 > 0.0)
        {
            _1724 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1724 = frontier_phi_41_39_ladder;
        }
        float _1892;
        if (_1693 > 0.0)
        {
            _1892 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1892 = frontier_phi_50_46_ladder;
        }
        float _2336;
        if (_1696 > 0.0)
        {
            _2336 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2336 = frontier_phi_62_57_ladder;
        }
        float _2338 = isnan(_1892) ? _1724 : (isnan(_1724) ? _1892 : min(_1724, _1892));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1690) + _1679;
        float _2344 = (_2339 * _1693) + _1683;
        float _2345 = (_2339 * _1696) + _1687;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2346;
        float _2350 = _2346 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 > _2350) || ((_2344 < _2348) || ((_2343 < _2348) || (_2343 > _2350))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1631);
            frontier_phi_40_62_ladder = _2579.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2579.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2579.x * cbModelParam._m0[1u].y;
        }
        _1712 = frontier_phi_40_62_ladder_2;
        _1714 = frontier_phi_40_62_ladder_1;
        _1716 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1631);
        _1712 = _1700.x * cbModelParam._m0[1u].y;
        _1714 = _1700.y * cbModelParam._m0[1u].y;
        _1716 = _1700.z * cbModelParam._m0[1u].y;
    }
    float _1720 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _672);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1720 : min(cbModelParam._m0[25u].w, _1720));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1773 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1777 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1781 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1784 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1787 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1790 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _1897;
        if (_1784 > 0.0)
        {
            _1897 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1897 = frontier_phi_52_48_ladder;
        }
        float _2363;
        if (_1787 > 0.0)
        {
            _2363 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2363 = frontier_phi_64_59_ladder;
        }
        float _2708;
        if (_1790 > 0.0)
        {
            _2708 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2708 = frontier_phi_76_71_ladder;
        }
        float _2710 = isnan(_2363) ? _1897 : (isnan(_1897) ? _2363 : min(_1897, _2363));
        float _2711 = isnan(_2708) ? _2710 : (isnan(_2710) ? _2708 : min(_2710, _2708));
        float _2715 = (_2711 * _1784) + _1773;
        float _2716 = (_2711 * _1787) + _1777;
        float _2717 = (_2711 * _1790) + _1781;
        float _2718 = _2711 * 9.9999997473787516355514526367188e-05;
        float _2719 = (-1.0) - _2718;
        float _2721 = _2718 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2717 > _2721) || ((_2717 < _2719) || ((_2716 > _2721) || ((_2716 < _2719) || ((_2715 < _2719) || (_2715 > _2721))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2717, cbModelParam._m0[17u].z, fma(_2716, cbModelParam._m0[17u].y, _2715 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2717, cbModelParam._m0[18u].z, fma(_2716, cbModelParam._m0[18u].y, _2715 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2717, cbModelParam._m0[19u].z, fma(_2716, cbModelParam._m0[19u].y, _2715 * cbModelParam._m0[19u].x))), _1721);
            frontier_phi_49_76_ladder = _2854.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2854.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2854.y * cbModelParam._m0[1u].z;
        }
        _1809 = frontier_phi_49_76_ladder_1;
        _1811 = frontier_phi_49_76_ladder_2;
        _1813 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1721);
        _1809 = _1793.x * cbModelParam._m0[1u].z;
        _1811 = _1793.y * cbModelParam._m0[1u].z;
        _1813 = _1793.z * cbModelParam._m0[1u].z;
    }
    float _1825 = ((((1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_812 * _799)) * _783;
    float _1826 = _1825 * ((cbModelParam._m0[1u].w * (_1809 - _1712)) + _1712);
    float _1827 = _1825 * ((cbModelParam._m0[1u].w * (_1811 - _1714)) + _1714);
    float _1828 = _1825 * ((cbModelParam._m0[1u].w * (_1813 - _1716)) + _1716);
    float _1831 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, _1826 * cbSceneParam._m0[91u].x));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1884 = _1871 / _1883;
    float _1885 = _1875 / _1883;
    float _1886 = _1879 / _1883;
    float _2033;
    float _2034;
    float _2035;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1913 = ((uint(_1886 > cbSceneParam._m0[59u].y) + uint(_1886 > cbSceneParam._m0[59u].x)) + uint(_1886 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1914 = _1913 + 43u;
        uint _1922 = _1913 + 44u;
        uint _1930 = _1913 + 45u;
        uint _1938 = _1913 + 46u;
        float _1949 = fma(_1883, cbSceneParam._m0[_1914].w, fma(_1879, cbSceneParam._m0[_1914].z, fma(_1875, cbSceneParam._m0[_1914].y, _1871 * cbSceneParam._m0[_1914].x)));
        float _1953 = fma(_1883, cbSceneParam._m0[_1922].w, fma(_1879, cbSceneParam._m0[_1922].z, fma(_1875, cbSceneParam._m0[_1922].y, _1871 * cbSceneParam._m0[_1922].x)));
        float _1961 = fma(_1883, cbSceneParam._m0[_1938].w, fma(_1879, cbSceneParam._m0[_1938].z, fma(_1875, cbSceneParam._m0[_1938].y, _1871 * cbSceneParam._m0[_1938].x)));
        float _1966 = cbSceneParam._m0[33u].z * _1961;
        float _1968 = cbSceneParam._m0[33u].w * _1961;
        float _1971 = fma(_1883, cbSceneParam._m0[_1930].w, fma(_1879, cbSceneParam._m0[_1930].z, fma(_1875, cbSceneParam._m0[_1930].y, _1871 * cbSceneParam._m0[_1930].x))) / _1961;
        float _2019 = (cbSceneParam._m0[33u].x - sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886))) * cbSceneParam._m0[33u].y;
        float _4121 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2026 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 + _1949) / _1961, (_1968 + _1953) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1968 + _1949) / _1961, (_1953 - _1966) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 - _1966) / _1961, (_1953 - _1968) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 - _1968) / _1961, (_1966 + _1953) / _1961), _1971), 0.0)).x), vec4(0.25)));
        _2033 = 1.0 - (_2026 * cbSceneParam._m0[34u].x);
        _2034 = 1.0 - (_2026 * cbSceneParam._m0[34u].y);
        _2035 = 1.0 - (_2026 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2033 = 1.0;
        _2034 = 1.0;
        _2035 = 1.0;
    }
    float _2099;
    float _2101;
    float _2103;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2087 = fma(_1883, cbSceneParam._m0[63u].w, fma(_1879, cbSceneParam._m0[63u].z, fma(_1875, cbSceneParam._m0[63u].y, _1871 * cbSceneParam._m0[63u].x)));
        float _2088 = fma(_1883, cbSceneParam._m0[60u].w, fma(_1879, cbSceneParam._m0[60u].z, fma(_1875, cbSceneParam._m0[60u].y, _1871 * cbSceneParam._m0[60u].x))) / _2087;
        float _2089 = fma(_1883, cbSceneParam._m0[61u].w, fma(_1879, cbSceneParam._m0[61u].z, fma(_1875, cbSceneParam._m0[61u].y, _1871 * cbSceneParam._m0[61u].x))) / _2087;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_2088 >= cbSceneParam._m0[64u].x) && (_2089 >= cbSceneParam._m0[64u].y)) && (_2088 <= cbSceneParam._m0[64u].z)) && (_2089 <= cbSceneParam._m0[64u].w))
        {
            float _2376 = fma(_1883, cbSceneParam._m0[62u].w, fma(_1879, cbSceneParam._m0[62u].z, fma(_1875, cbSceneParam._m0[62u].y, _1871 * cbSceneParam._m0[62u].x))) / _2087;
            float _2380 = isnan(cbSceneParam._m0[41u].w) ? _2376 : (isnan(_2376) ? cbSceneParam._m0[41u].w : max(_2376, cbSceneParam._m0[41u].w));
            float _2423 = (cbSceneParam._m0[33u].x - sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886))) * cbSceneParam._m0[33u].y;
            float _4137 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
            float _2430 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2088, cbSceneParam._m0[33u].w + _2089), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2088, _2089 - cbSceneParam._m0[33u].z), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2088 - cbSceneParam._m0[33u].z, _2089 - cbSceneParam._m0[33u].w), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2088 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2089), _2380), 0.0)).x), vec4(0.25)));
            float _2434 = 1.0 - (_2430 * cbSceneParam._m0[34u].x);
            float _2435 = 1.0 - (_2430 * cbSceneParam._m0[34u].y);
            float _2436 = 1.0 - (_2430 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2436) ? _2035 : (isnan(_2035) ? _2436 : min(_2035, _2436));
            frontier_phi_61_60_ladder_1 = isnan(_2435) ? _2034 : (isnan(_2034) ? _2435 : min(_2034, _2435));
            frontier_phi_61_60_ladder_2 = isnan(_2434) ? _2033 : (isnan(_2033) ? _2434 : min(_2033, _2434));
        }
        else
        {
            frontier_phi_61_60_ladder = _2035;
            frontier_phi_61_60_ladder_1 = _2034;
            frontier_phi_61_60_ladder_2 = _2033;
        }
        _2099 = frontier_phi_61_60_ladder_2;
        _2101 = frontier_phi_61_60_ladder_1;
        _2103 = frontier_phi_61_60_ladder;
    }
    else
    {
        _2099 = _2033;
        _2101 = _2034;
        _2103 = _2035;
    }
    uvec4 _2108 = floatBitsToUint(cbInstanceData._m0[_757 + 5u]);
    uint _2110 = _2108.x * 14u;
    uint _2111 = _2110 + 13u;
    float _2116 = _783 + (-1.0);
    float _2119 = (cbLight._m0[_2111].x * _2116) + 1.0;
    float _2120 = (cbLight._m0[_2111].y * _2116) + 1.0;
    uint _2121 = _2110 + 5u;
    float _2127 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2131 = _2110 + 4u;
    float _2140 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2144 = _2110 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_669, _670, _671));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_669, _670, _671));
    float _4173 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4184 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2121].x * _2127) * _2165) + (((cbLight._m0[_2131].x * _2099) * _2140) * _2163);
    float _2173 = ((_2127 * cbLight._m0[_2121].y) * _2165) + (((cbLight._m0[_2131].y * _2101) * _2140) * _2163);
    float _2174 = ((_2127 * cbLight._m0[_2121].z) * _2165) + (((cbLight._m0[_2131].z * _2103) * _2140) * _2163);
    uint _2176 = _2110 + 8u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _672) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_2110].x + _696;
    float _2192 = cbLight._m0[_2110].y + _697;
    float _2193 = cbLight._m0[_2110].z + _698;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2110].xyz));
    float _4195 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2205 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2206 = dot(vec3(_669, _670, _671), vec3(_2198, _2199, _2200));
    float _4217 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2198, _2199, _2200));
    float _4228 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2190 * _2190;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2230 = 1.0 - _2190;
    float _2241 = (0.5 / (((_2205 * ((_2204 * _2230) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2230) + _2190) * _2204))) * _2204;
    float _4239 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    uint _2257 = _2110 + 9u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _672) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2144].x + _696;
    float _2271 = cbLight._m0[_2144].y + _697;
    float _2272 = cbLight._m0[_2144].z + _698;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2144].xyz));
    float _4250 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2284 = dot(vec3(_669, _670, _671), vec3(_2277, _2278, _2279));
    float _4261 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2277, _2278, _2279));
    float _4272 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2269 * _2269;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2306 = 1.0 - _2269;
    float _2316 = (0.5 / (((_2205 * ((_2283 * _2306) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2306) + _2269) * _2283))) * _2283;
    float _4283 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    float _2328 = (((_2305 * cbLight._m0[_2257].x) * _2318) * _2127) + ((((cbLight._m0[_2176].x * _2099) * _2229) * _2243) * _2140);
    float _2329 = (((_2305 * cbLight._m0[_2257].y) * _2318) * _2127) + ((((cbLight._m0[_2176].y * _2101) * _2229) * _2243) * _2140);
    float _2330 = (((_2305 * cbLight._m0[_2257].z) * _2318) * _2127) + ((((cbLight._m0[_2176].z * _2103) * _2229) * _2243) * _2140);
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_2108.y == 0u)
    {
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.x;
        uint _2460 = uint((float(_2448.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2449))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2449)));
        float _2470 = (log2(_1886 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2471 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        uint _2474 = uint(isnan(14.0) ? _2471 : (isnan(_2471) ? 14.0 : min(_2471, 14.0)));
        uvec4 _2479 = texelFetch(g_lightClusterGridBuffer, int(((_2474 << 2u) + (_2460 << 6u)) >> 2u));
        uint _2480 = _2479.x;
        uint _2481 = _2448.z;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((((1u << ((_2481 >> 4u) & 15u)) + 4294967295u) & _2480) == 0u) || ((_2481 & 240u) == 0u))
        {
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
        }
        else
        {
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            uint _2772 = 0u;
            uint _2781;
            bool _2782;
            for (;;)
            {
                _2781 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2772 << 2u)) >> 2u)).x;
                _2782 = _2781 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_2782)
                {
                    frontier_phi_87_pred = _2766;
                    frontier_phi_87_pred_1 = _2771;
                    frontier_phi_87_pred_2 = _2770;
                    frontier_phi_87_pred_3 = _2769;
                    frontier_phi_87_pred_4 = _2768;
                    frontier_phi_87_pred_5 = _2767;
                }
                else
                {
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    uint _2938;
                    _2932 = _2766;
                    _2933 = _2767;
                    _2934 = _2768;
                    _2935 = _2769;
                    _2936 = _2770;
                    _2937 = _2771;
                    _2938 = _2781;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    for (;;)
                    {
                        uint _2942 = uint(findLSB(_2938)) + (_2772 << 5u);
                        uint _2939 = (_2938 + 4294967295u) & _2938;
                        uint _2944 = _2942 * 48u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 3u)).x));
                        uint _2964 = (_2942 * 48u) + 4u;
                        vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2983 = (_2942 * 48u) + 8u;
                        vec3 _2994 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x));
                        float _2998 = _2958.x - _1884;
                        float _2999 = _2958.y - _1885;
                        float _3000 = _2958.z - _1886;
                        float _3001 = dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000));
                        float _3004 = inversesqrt(_3001);
                        float _3005 = _3004 * _2998;
                        float _3006 = _3004 * _2999;
                        float _3007 = _3004 * _3000;
                        float _3008 = dot(vec3(_738, _741, _744), vec3(_3005, _3006, _3007));
                        float _3013 = 1.0 - (_3001 * _2958.w);
                        float _4304 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3015 = sqrt(_3001) * _2977.w;
                        float _3018 = 1.39999997615814208984375 / (_3015 + 1.39999997615814208984375);
                        float _3019 = _3018 * _3018;
                        float _3022 = ((1.0 - _3019) * _3008) + _3019;
                        float _3025 = _3015 * _3015;
                        float _3029 = ((isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))) * _3014) / ((_3025 * 0.699999988079071044921875) + 1.0);
                        float _3033 = (-0.0) - _1884;
                        float _3034 = (-0.0) - _1885;
                        float _3035 = (-0.0) - _1886;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3049 = exp2(log2(1.0 / ((_3025 * 3.5) + 5.0)) * 0.25);
                        float _3050 = 1.0 - _799;
                        float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                        float _3058 = _3057 * _3057;
                        float _3059 = _3058 * _3058;
                        float _3060 = _3040 + _3005;
                        float _3061 = _3041 + _3006;
                        float _3062 = _3042 + _3007;
                        float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                        float _3070 = dot(vec3(_738, _741, _744), vec3(_3040, _3041, _3042));
                        float _4320 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3074 = dot(vec3(_738, _741, _744), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                        float _4331 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                        float _3082 = _3018 * _3058;
                        float _3083 = _3082 * _3082;
                        float _3086 = ((1.0 - _3083) * _3008) + _3083;
                        float _4342 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3088 = 1.0 - _3058;
                        float _3098 = (0.5 / (((_3087 * ((_3073 * _3088) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3087 * _3088) + _3058) * _3073))) * _3087;
                        float _4353 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3109 = (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) / ((_3081 * _3081) * ((_3025 * 2.1991131305694580078125) + 3.141590118408203125))) * _3014;
                        _2862 = (_3029 * _2977.x) + _2935;
                        _2863 = (_3029 * _2977.y) + _2936;
                        _2864 = (_3029 * _2977.z) + _2937;
                        _2859 = (_3109 * _2994.x) + _2932;
                        _2860 = (_3109 * _2994.y) + _2933;
                        _2861 = (_3109 * _2994.z) + _2934;
                        if (_2939 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2939;
                        }
                    }
                    frontier_phi_87_pred = _2859;
                    frontier_phi_87_pred_1 = _2864;
                    frontier_phi_87_pred_2 = _2863;
                    frontier_phi_87_pred_3 = _2862;
                    frontier_phi_87_pred_4 = _2861;
                    frontier_phi_87_pred_5 = _2860;
                }
                _2589 = frontier_phi_87_pred;
                _2599 = frontier_phi_87_pred_1;
                _2597 = frontier_phi_87_pred_2;
                _2595 = frontier_phi_87_pred_3;
                _2593 = frontier_phi_87_pred_4;
                _2591 = frontier_phi_87_pred_5;
                uint _2773 = _2772 + 1u;
                if (_2773 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2766 = _2589;
                    _2767 = _2591;
                    _2768 = _2593;
                    _2769 = _2595;
                    _2770 = _2597;
                    _2771 = _2599;
                    _2772 = _2773;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
        }
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.z;
        uint _2605 = (_2603 >> 8u) & 15u;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((4294967295u << _2605) & _2480) == 0u)
        {
            _2734 = _2588;
            _2736 = _2590;
            _2738 = _2592;
            _2740 = _2594;
            _2742 = _2596;
            _2744 = _2598;
        }
        else
        {
            float _2759 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
            float _2760 = _2759 * _1884;
            float _2761 = _2759 * _1885;
            float _2762 = _2759 * _1886;
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2605 < ((_2603 >> 12u) & 15u))
            {
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2915 = _2588;
                float _2916 = _2590;
                float _2917 = _2592;
                float _2918 = _2594;
                float _2919 = _2596;
                float _2920 = _2598;
                uint _2921 = _2605;
                uint _2930;
                bool _2931;
                for (;;)
                {
                    _2930 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2921 << 2u)) >> 2u)).x;
                    _2931 = _2930 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_2931)
                    {
                        frontier_phi_98_pred = _2920;
                        frontier_phi_98_pred_1 = _2919;
                        frontier_phi_98_pred_2 = _2918;
                        frontier_phi_98_pred_3 = _2917;
                        frontier_phi_98_pred_4 = _2916;
                        frontier_phi_98_pred_5 = _2915;
                    }
                    else
                    {
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3136 = _2915;
                        float _3137 = _2916;
                        float _3138 = _2917;
                        float _3139 = _2918;
                        float _3140 = _2919;
                        float _3141 = _2920;
                        uint _3142 = _2930;
                        uint _3143;
                        vec4 _3168;
                        float _3169;
                        vec4 _3184;
                        vec3 _3196;
                        vec4 _3211;
                        vec4 _3226;
                        float _3272;
                        bool _3273;
                        for (;;)
                        {
                            uint _3153 = ((_2921 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3142));
                            _3143 = (_3142 + 4294967295u) & _3142;
                            uint _3155 = _3153 * 40u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            _3169 = _3168.w;
                            uint _3171 = (_3153 * 40u) + 4u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3186 = (_3153 * 40u) + 8u;
                            _3196 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x));
                            uint _3198 = (_3153 * 40u) + 16u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3213 = (_3153 * 40u) + 20u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3153 * 40u) + 24u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3247 = (_3153 * 40u) + 28u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3272 = fma(_1886, _3260.z, fma(_1885, _3260.y, _3260.x * _1884)) + _3260.w;
                            _3273 = !((fma(_1886, _3241.z, fma(_1885, _3241.y, _3241.x * _1884)) + _3241.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_3273)
                            {
                                float _3300 = _3168.x - _1884;
                                float _3301 = _3168.y - _1885;
                                float _3302 = _3168.z - _1886;
                                float _3303 = dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302));
                                float _3306 = inversesqrt(_3303);
                                float _3307 = _3306 * _3300;
                                float _3308 = _3306 * _3301;
                                float _3309 = _3306 * _3302;
                                float _3313 = 1.0 - (_3303 / (_3169 * _3169));
                                float _4364 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3318 = sqrt(_3303) * _3184.w;
                                float _3320 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                                float _3321 = _3320 * _3320;
                                float _3324 = ((1.0 - _3321) * dot(vec3(_3307, _3308, _3309), vec3(_738, _741, _744))) + _3321;
                                float _3327 = _3318 * _3318;
                                float _3331 = (fma(_1886, _3211.z, fma(_1885, _3211.y, _3211.x * _1884)) + _3211.w) / _3272;
                                float _3332 = (fma(_1886, _3226.z, fma(_1885, _3226.y, _3226.x * _1884)) + _3226.w) / _3272;
                                float _3336 = 1.0 - dot(vec2(_3331, _3332), vec2(_3331, _3332));
                                float _4380 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3338 = _3337 * (((isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))) * _3314) / ((_3327 * 0.699999988079071044921875) + 1.0));
                                float _3350 = exp2(log2(1.0 / ((_3327 * 3.5) + 5.0)) * 0.25);
                                float _3351 = 1.0 - _799;
                                float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                                float _3359 = _3358 * _3358;
                                float _3360 = _3359 * _3359;
                                float _3361 = _3307 - _2760;
                                float _3362 = _3308 - _2761;
                                float _3363 = _3309 - _2762;
                                float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                                float _3371 = dot(vec3(_738, _741, _744), vec3((-0.0) - _2760, (-0.0) - _2761, (-0.0) - _2762));
                                float _4391 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3375 = dot(vec3(_738, _741, _744), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                                float _4402 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                                float _3383 = _3320 * _3359;
                                float _3384 = _3383 * _3383;
                                float _3390 = ((1.0 - _3384) * dot(vec3(_738, _741, _744), vec3(_3307, _3308, _3309))) + _3384;
                                float _4413 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3392 = 1.0 - _3359;
                                float _3402 = (0.5 / (((_3391 * ((_3374 * _3392) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3359) * _3374))) * _3391;
                                float _4424 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3412 = (_3337 * _3314) * (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) / ((_3382 * _3382) * ((_3327 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_104_pred = _3338 * _3184.y;
                                frontier_phi_104_pred_1 = _3338 * _3184.x;
                                frontier_phi_104_pred_2 = _3412 * _3196.z;
                                frontier_phi_104_pred_3 = _3412 * _3196.y;
                                frontier_phi_104_pred_4 = _3412 * _3196.x;
                                frontier_phi_104_pred_5 = _3338 * _3184.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _3420 = frontier_phi_104_pred;
                            _3419 = frontier_phi_104_pred_1;
                            _3418 = frontier_phi_104_pred_2;
                            _3417 = frontier_phi_104_pred_3;
                            _3416 = frontier_phi_104_pred_4;
                            _3421 = frontier_phi_104_pred_5;
                            _3126 = _3419 + _3139;
                            _3127 = _3420 + _3140;
                            _3128 = _3421 + _3141;
                            _3123 = _3416 + _3136;
                            _3124 = _3417 + _3137;
                            _3125 = _3418 + _3138;
                            if (_3143 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3143;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _3128;
                        frontier_phi_98_pred_1 = _3127;
                        frontier_phi_98_pred_2 = _3126;
                        frontier_phi_98_pred_3 = _3125;
                        frontier_phi_98_pred_4 = _3124;
                        frontier_phi_98_pred_5 = _3123;
                    }
                    _2745 = frontier_phi_98_pred;
                    _2743 = frontier_phi_98_pred_1;
                    _2741 = frontier_phi_98_pred_2;
                    _2739 = frontier_phi_98_pred_3;
                    _2737 = frontier_phi_98_pred_4;
                    _2735 = frontier_phi_98_pred_5;
                    uint _2922 = _2921 + 1u;
                    if (_2922 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2915 = _2735;
                        _2916 = _2737;
                        _2917 = _2739;
                        _2918 = _2741;
                        _2919 = _2743;
                        _2920 = _2745;
                        _2921 = _2922;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2739;
                frontier_phi_78_79_ladder_1 = _2745;
                frontier_phi_78_79_ladder_2 = _2743;
                frontier_phi_78_79_ladder_3 = _2741;
                frontier_phi_78_79_ladder_4 = _2737;
                frontier_phi_78_79_ladder_5 = _2735;
            }
            else
            {
                frontier_phi_78_79_ladder = _2592;
                frontier_phi_78_79_ladder_1 = _2598;
                frontier_phi_78_79_ladder_2 = _2596;
                frontier_phi_78_79_ladder_3 = _2594;
                frontier_phi_78_79_ladder_4 = _2590;
                frontier_phi_78_79_ladder_5 = _2588;
            }
            _2734 = frontier_phi_78_79_ladder_5;
            _2736 = frontier_phi_78_79_ladder_4;
            _2738 = frontier_phi_78_79_ladder;
            _2740 = frontier_phi_78_79_ladder_3;
            _2742 = frontier_phi_78_79_ladder_2;
            _2744 = frontier_phi_78_79_ladder_1;
        }
        float _2749 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2493 = (_2749 * _2740) + _2172;
        _2495 = (_2749 * _2742) + _2173;
        _2497 = (_2749 * _2744) + _2174;
        _2499 = ((_2734 * 0.039999999105930328369140625) * _2749) + _2328;
        _2501 = ((_2736 * 0.039999999105930328369140625) * _2749) + _2329;
        _2503 = ((_2738 * 0.039999999105930328369140625) * _2749) + _2330;
    }
    else
    {
        _2493 = _2172;
        _2495 = _2173;
        _2497 = _2174;
        _2499 = _2328;
        _2501 = _2329;
        _2503 = _2330;
    }
    float _4440 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4451 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4462 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _2520 = ((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2493 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _783))) + ((_2499 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2521 = ((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2495 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _783))) + ((_2501 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2522 = ((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2497 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _783))) + ((_2503 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2523 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2524 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2525 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    uint _2526 = _757 + 6u;
    float _2534 = _718 / cbSceneParam._m0[86u].x;
    float _2535 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2549 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2551 = _2549.x;
    float _2552 = _2549.y;
    float _2553 = _2549.z;
    float _2554 = _2549.w;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2613 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2614 = _2613 / _691;
        float _2625 = _2614 * _267;
        float _2626 = _268 * _2614;
        float _2627 = (-0.0) - _2626;
        float _2628 = _2614 * _269;
        float _2630 = (cbSceneParam._m0[77u].w * _2627) / _2613;
        float _2631 = _2630 + cbSceneParam._m0[79u].w;
        float _2632 = cbSceneParam._m0[79u].w - _2626;
        float _2638 = sqrt(((_2625 * _2625) + (_2626 * _2626)) + (_2628 * _2628));
        float _2641 = (1.0 - (cbSceneParam._m0[77u].w / _2613)) * _2638;
        float _2646 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2648 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2872;
        if (abs((_2627 - _2630) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2872 = ((((_2631 > 0.0) ? exp2(_2646 * _2631) : (2.0 - exp2(_2648 * _2631))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2641;
        }
        else
        {
            float _2795 = 1.0 / cbSceneParam._m0[80u].x;
            float _2796 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : max(_2631, _2632));
            float _2797 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : min(_2631, _2632));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            _2872 = ((abs(_2638 / _2627) * cbSceneParam._m0[80u].y) * ((((_2806 - _2807) * 2.0) - ((exp2(_2646 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0)))) - exp2(_2646 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))))) * _2795)) - ((exp2(_2648 * _2806) - exp2(_2648 * _2807)) * _2795))) + (_2641 * cbSceneParam._m0[80u].z);
        }
        vec4 _2874 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, 1.0), 0.0);
        float _2883 = exp2((_2872 * (-1.44269502162933349609375)) * (1.0 - _2874.w));
        float _2884 = log2(_2883);
        float _2900 = log2(_2554);
        _2650 = (exp2(_2900 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].x)) * _2874.x) / cbSceneParam._m0[78u].x)) + _2551;
        _2652 = (exp2(_2900 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].y)) * _2874.y) / cbSceneParam._m0[78u].y)) + _2552;
        _2654 = (exp2(_2900 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].z)) * _2874.z) / cbSceneParam._m0[78u].z)) + _2553;
        _2656 = _2883 * _2554;
    }
    else
    {
        _2650 = _2551;
        _2652 = _2552;
        _2654 = _2553;
        _2656 = _2554;
    }
    bool _2910;
    vec4 _2666;
    vec4 _2688;
    float _2690;
    float _2694;
    float _2695;
    float _2696;
    float _2697;
    bool _2707;
    for (;;)
    {
        _2666 = cbMatDynParam._m0[0u];
        float _2668 = roundEven(_2666.y);
        bool _2669 = _2668 == 3.0;
        float _2670 = log2(_2656);
        float _2677 = exp2(_2670 * cbSceneParam._m0[78u].x) * _2523;
        float _2678 = exp2(_2670 * cbSceneParam._m0[78u].y) * _2524;
        float _2679 = exp2(_2670 * cbSceneParam._m0[78u].z) * _2525;
        float _2686 = _705 + (-0.5);
        _2688 = cbMtdParam._m0[1u];
        _2690 = _2688.y * _2686;
        float _2693 = (_2668 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2694 = _2693 * (_2669 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2650)));
        _2695 = _2693 * (_2669 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2652)));
        _2696 = _2693 * (_2669 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2654)));
        _2697 = _2686 * 0.999000012874603271484375;
        _2707 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2707)
        {
            if ((cbInstanceData._m0[_757 + 7u].x + _2697) < 0.5)
            {
                _2910 = true;
                break;
            }
        }
        uint _2830 = _759 + uint(_2666.w);
        if ((cbInstanceData._m0[_2830].w < 1.0) && ((cbInstanceData._m0[_2830].w + _2697) < 0.5))
        {
            _2910 = true;
            break;
        }
        if ((_2690 + 1.0) < _2688.x)
        {
            _2910 = true;
            break;
        }
        _2910 = false;
        break;
    }
    float _3114;
    if (_2910)
    {
        discard_state = true;
        _3114 = 0.0;
    }
    else
    {
        _3114 = cbInstanceData._m0[_2526].w;
    }
    SV_Target.x = _2694;
    SV_Target.y = _2695;
    SV_Target.z = _2696;
    SV_Target.w = _3114;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2526].w;
    discard_exit();
}


