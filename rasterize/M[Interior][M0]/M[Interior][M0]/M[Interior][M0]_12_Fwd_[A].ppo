#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _926;
float _2881;
float _2882;
float _2883;
float _2884;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _255 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _245);
    float _256 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _245);
    float _257 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _245);
    float _283 = cbMtdParam._m0[22u].y + _255;
    float _284 = cbMtdParam._m0[22u].z + _256;
    float _285 = cbMtdParam._m0[22u].w + _257;
    float _299 = (-0.0) - dot(vec3(_283, _284, _285), vec3(_183 * _176, _183 * _177, _183 * _178));
    float _300 = (-0.0) - dot(vec3(_283, _284, _285), vec3(_197 * TANGENT.x, _197 * TANGENT.y, _197 * TANGENT.z));
    float _301 = (-0.0) - dot(vec3(_283, _284, _285), vec3((-0.0) - (_190 * NORMAL.x), (-0.0) - (_190 * NORMAL.y), (-0.0) - (_190 * NORMAL.z)));
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _305 * _301;
    float _308 = (cbMtdParam._m0[19u].x * _299) * _305;
    float _310 = (cbMtdParam._m0[18u].w * _300) * _305;
    float _311 = fract(TEXCOORD.x);
    float _312 = fract(TEXCOORD.y);
    float _318;
    if (_308 > 0.0)
    {
        _318 = (1.0 - _311) / _308;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _311) / _308;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _318 = frontier_phi_3_2_ladder;
    }
    float _326;
    if (_310 > 0.0)
    {
        _326 = (1.0 - _312) / _310;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _312) / _310;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _326 = frontier_phi_7_6_ladder;
    }
    bool _328 = _306 > 0.0;
    float _330 = _328 ? (cbMtdParam._m0[15u].x / _306) : 5000.0;
    float _331 = isnan(_326) ? _318 : (isnan(_318) ? _326 : min(_318, _326));
    float _332 = isnan(_330) ? _331 : (isnan(_331) ? _330 : min(_331, _330));
    float _336 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _337 = _311 + (-0.5);
    float _340 = _312 + (-0.5);
    float _343 = ((_332 * _306) + _336) / _336;
    vec4 _369 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_337 + (_332 * _308)) / _343) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_340 + (_332 * _310)) / _343) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _380 = cbMtdParam._m0[9u].x * _369.x;
    float _381 = cbMtdParam._m0[9u].y * _369.y;
    float _382 = cbMtdParam._m0[9u].z * _369.z;
    float _404 = (cbMtdParam._m0[21u].x * _299) * _305;
    float _406 = (cbMtdParam._m0[20u].w * _300) * _305;
    bool _407 = _404 > 0.0;
    float _412;
    if (_407)
    {
        _412 = (1.0 - _311) / _404;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _311) / _404;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _412 = frontier_phi_11_10_ladder;
    }
    bool _414 = _406 > 0.0;
    float _419;
    if (_414)
    {
        _419 = (1.0 - _312) / _406;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _312) / _406;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _419 = frontier_phi_15_14_ladder;
    }
    float _422 = _328 ? (cbMtdParam._m0[16u].z / _306) : 5000.0;
    float _423 = isnan(_419) ? _412 : (isnan(_412) ? _419 : min(_412, _419));
    float _424 = isnan(_422) ? _423 : (isnan(_423) ? _422 : min(_423, _422));
    float _428 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _432 = ((_424 * _306) + _428) / _428;
    float _437 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _439 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _455 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_337 + (_424 * _404)) / _432) + 0.5) + _437) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_340 + (_424 * _406)) / _432) + 0.5) + _439) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _467;
    if (_407)
    {
        _467 = (1.0 - _311) / _404;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _311) / _404;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _467 = frontier_phi_19_18_ladder;
    }
    float _473;
    if (_414)
    {
        _473 = (1.0 - _312) / _406;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _312) / _406;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _473 = frontier_phi_23_22_ladder;
    }
    float _475 = isnan(_473) ? _467 : (isnan(_467) ? _473 : min(_467, _473));
    float _476 = isnan(_422) ? _475 : (isnan(_475) ? _422 : min(_475, _422));
    float _483 = ((_476 * _306) + _428) / _428;
    vec4 _497 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_337 + (_476 * _404)) / _483) + 0.5) + _437) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_340 + (_476 * _406)) / _483) + 0.5) + _439) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _499 = _497.w;
    float _506 = (_499 * ((_455.x * cbMtdParam._m0[10u].x) - _380)) + _380;
    float _507 = (_499 * ((_455.y * cbMtdParam._m0[10u].y) - _381)) + _381;
    float _508 = (_499 * ((_455.z * cbMtdParam._m0[10u].z) - _382)) + _382;
    float _2923 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _2934 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2945 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _527 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _531 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _532 = _255 * _531;
    float _533 = _256 * _531;
    float _534 = _257 * _531;
    vec4 _539 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _541 = _539.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _638 = sqrt(((_255 * _255) + (_256 * _256)) + (_257 * _257));
        float _645 = (cbMatDynParam._m0[5u].x * _638) + cbMatDynParam._m0[5u].y;
        float _2956 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0));
        float _650 = (cbMatDynParam._m0[5u].z * _638) + cbMatDynParam._m0[5u].w;
        float _2967 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2967 : (isnan(_2967) ? 1.0 : min(_2967, 1.0))) - _646)) + _646) < ((_541 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _568 = uint(roundEven(NORMAL.w)) * 13u;
    uint _570 = _568 + 9u;
    uint _571 = _570 + uint(cbMatDynParam._m0[0u].w);
    float _577 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2923 : (isnan(_2923) ? 1.0 : min(_2923, 1.0)))) * cbInstanceData._m0[_571].x;
    float _578 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0)))) * cbInstanceData._m0[_571].y;
    float _579 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2945 : (isnan(_2945) ? 1.0 : min(_2945, 1.0)))) * cbInstanceData._m0[_571].z;
    float _2978 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0));
    float _2989 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0));
    float _3000 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0));
    vec4 _591 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _594 = _591.x * TEXCOORD.z;
    float _595 = (-0.0) - _532;
    float _596 = (-0.0) - _533;
    float _597 = (-0.0) - _534;
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _925;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _712 = (cbModelParam._m0[37u].x * ((((fma(_627, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _619)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _714 = (cbModelParam._m0[37u].y * ((((fma(_627, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _619)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _715 = (((((fma(_627, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _619)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_712, _714, _715), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_712, _714, _715), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_712, _714, _715), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_712, _714, _715), 0.0);
        float _752 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _752 * (_718.x + (-0.5));
        float _755 = _752 * (_718.y + (-0.5));
        float _756 = _752 * (_718.z + (-0.5));
        float _763 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_725.x + (-0.5));
        float _765 = _763 * (_725.y + (-0.5));
        float _766 = _763 * (_725.z + (-0.5));
        float _773 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_732.x + (-0.5));
        float _775 = _773 * (_732.y + (-0.5));
        float _776 = _773 * (_732.z + (-0.5));
        float _783 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_739.x + (-0.5));
        float _785 = _783 * (_739.y + (-0.5));
        float _786 = _783 * (_739.z + (-0.5));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = _754 * 0.5;
        float _791 = _764 * 0.5;
        float _792 = _774 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _807 = (dot(vec3(0.0), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3026 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _817 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3037 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3048 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0))) * (_819 + 1.0))) + _824) * _787;
        float _834 = _755 * 0.5;
        float _835 = _765 * 0.5;
        float _836 = _775 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(0.0), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3059 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3070 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3081 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0))) * (_861 + 1.0))) + _866) * _788;
        float _876 = _756 * 0.5;
        float _877 = _766 * 0.5;
        float _878 = _776 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(0.0), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3092 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3103 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3114 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0))) * (_903 + 1.0))) + _908) * _789;
        _925 = _756;
        _927 = _755;
        _928 = _754;
        _929 = _766;
        _930 = _765;
        _931 = _764;
        _932 = _776;
        _933 = _775;
        _934 = _774;
        _935 = _789;
        _936 = _788;
        _937 = _787;
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
    }
    else
    {
        _925 = _926;
        _927 = _926;
        _928 = _926;
        _929 = _926;
        _930 = _926;
        _931 = _926;
        _932 = _926;
        _933 = _926;
        _934 = _926;
        _935 = _926;
        _936 = _926;
        _937 = _926;
        _938 = 0.0;
        _939 = 0.0;
        _940 = 0.0;
    }
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = (cbModelParam._m0[38u].x * ((((fma(_627, cbModelParam._m0[30u].z, fma(_623, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _619)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _998 = (cbModelParam._m0[38u].y * ((((fma(_627, cbModelParam._m0[31u].z, fma(_623, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _619)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _999 = (((((fma(_627, cbModelParam._m0[32u].z, fma(_623, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _619)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        float _1034 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_1001.x + (-0.5));
        float _1036 = _1034 * (_1001.y + (-0.5));
        float _1037 = _1034 * (_1001.z + (-0.5));
        float _1044 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1008.x + (-0.5));
        float _1046 = _1044 * (_1008.y + (-0.5));
        float _1047 = _1044 * (_1008.z + (-0.5));
        float _1054 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1015.x + (-0.5));
        float _1056 = _1054 * (_1015.y + (-0.5));
        float _1057 = _1054 * (_1015.z + (-0.5));
        float _1064 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1022.x + (-0.5));
        float _1066 = _1064 * (_1022.y + (-0.5));
        float _1067 = _1064 * (_1022.z + (-0.5));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = _1035 * 0.5;
        float _1072 = _1045 * 0.5;
        float _1073 = _1055 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(0.0), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3155 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3166 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3177 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0))) * (_1098 + 1.0))) + _1103) * _1068;
        float _1113 = _1036 * 0.5;
        float _1114 = _1046 * 0.5;
        float _1115 = _1056 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(0.0), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3188 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3199 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3210 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))) * (_1140 + 1.0))) + _1145) * _1069;
        float _1155 = _1037 * 0.5;
        float _1156 = _1047 * 0.5;
        float _1157 = _1057 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(0.0), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3221 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3232 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3243 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0))) * (_1182 + 1.0))) + _1187) * _1070;
        _1204 = _1037;
        _1205 = _1036;
        _1206 = _1035;
        _1207 = _1047;
        _1208 = _1046;
        _1209 = _1045;
        _1210 = _1057;
        _1211 = _1056;
        _1212 = _1055;
        _1213 = _1070;
        _1214 = _1069;
        _1215 = _1068;
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
    }
    else
    {
        _1204 = _926;
        _1205 = _926;
        _1206 = _926;
        _1207 = _926;
        _1208 = _926;
        _1209 = _926;
        _1210 = _926;
        _1211 = _926;
        _1212 = _926;
        _1213 = _926;
        _1214 = _926;
        _1215 = _926;
        _1216 = 0.0;
        _1217 = 0.0;
        _1218 = 0.0;
    }
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _938)) + _938;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _939)) + _939;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _940)) + _940;
    float _1251 = fma(_1230, cbSceneParam._m0[89u].z, fma(_1229, cbSceneParam._m0[89u].y, _1228 * cbSceneParam._m0[89u].x));
    float _1254 = fma(_1230, cbSceneParam._m0[90u].z, fma(_1229, cbSceneParam._m0[90u].y, _1228 * cbSceneParam._m0[90u].x));
    float _1257 = fma(_1230, cbSceneParam._m0[91u].z, fma(_1229, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1228));
    float _1272 = _532 * (-0.5);
    float _1273 = _533 * (-0.5);
    float _1274 = _534 * (-0.5);
    float _1275 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1278 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1281 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1315;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1288 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_925, _929, _932, _935));
        float _1292 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_927, _930, _933, _936));
        float _1296 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_928, _931, _934, _937));
        float _1303 = dot(vec4(cbModelParam._m0[39u]), vec4(_1272, _1273, _1274, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1326;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1317 = dot(vec4(cbModelParam._m0[40u]), vec4(_1272, _1273, _1274, 1.0));
        _1326 = dot(vec3(isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1326 = 1.0;
    }
    float _1330 = (_1326 * cbModelParam._m0[1u].x) + (_1315 * (1.0 - cbModelParam._m0[1u].x));
    float _1339 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1388 = fma(_627, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619)) + cbModelParam._m0[13u].w;
        float _1392 = fma(_627, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619)) + cbModelParam._m0[14u].w;
        float _1396 = fma(_627, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619)) + cbModelParam._m0[15u].w;
        float _1399 = fma(_597, cbModelParam._m0[13u].z, fma(_596, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _595));
        float _1402 = fma(_597, cbModelParam._m0[14u].z, fma(_596, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _595));
        float _1405 = fma(_597, cbModelParam._m0[15u].z, fma(_596, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _595));
        float _1431;
        if (_1399 > 0.0)
        {
            _1431 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1431 = frontier_phi_41_39_ladder;
        }
        float _1727;
        if (_1402 > 0.0)
        {
            _1727 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1727 = frontier_phi_50_46_ladder;
        }
        float _2038;
        if (_1405 > 0.0)
        {
            _2038 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2038 = frontier_phi_64_57_ladder;
        }
        float _2040 = isnan(_1727) ? _1431 : (isnan(_1431) ? _1727 : min(_1431, _1727));
        float _2041 = isnan(_2038) ? _2040 : (isnan(_2040) ? _2038 : min(_2040, _2038));
        float _2045 = (_2041 * _1399) + _1388;
        float _2046 = (_2041 * _1402) + _1392;
        float _2047 = (_2041 * _1405) + _1396;
        float _2048 = _2041 * 9.9999997473787516355514526367188e-05;
        float _2049 = (-1.0) - _2048;
        float _2051 = _2048 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2047 > _2051) || ((_2047 < _2049) || ((_2046 > _2051) || ((_2046 < _2049) || ((_2045 < _2049) || (_2045 > _2051))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2186 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2047, cbModelParam._m0[9u].z, fma(_2046, cbModelParam._m0[9u].y, _2045 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2047, cbModelParam._m0[10u].z, fma(_2046, cbModelParam._m0[10u].y, _2045 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2047, cbModelParam._m0[11u].z, fma(_2046, cbModelParam._m0[11u].y, _2045 * cbModelParam._m0[11u].x))), _1339);
            frontier_phi_40_64_ladder = _2186.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2186.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2186.x * cbModelParam._m0[1u].y;
        }
        _1421 = frontier_phi_40_64_ladder_2;
        _1423 = frontier_phi_40_64_ladder_1;
        _1425 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_595, _596, _597), _1339);
        _1421 = _1409.x * cbModelParam._m0[1u].y;
        _1423 = _1409.y * cbModelParam._m0[1u].y;
        _1425 = _1409.z * cbModelParam._m0[1u].y;
    }
    float _1428 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1480 = fma(_627, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619)) + cbModelParam._m0[21u].w;
        float _1484 = fma(_627, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619)) + cbModelParam._m0[22u].w;
        float _1488 = fma(_627, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619)) + cbModelParam._m0[23u].w;
        float _1491 = fma(_597, cbModelParam._m0[21u].z, fma(_596, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _595));
        float _1494 = fma(_597, cbModelParam._m0[22u].z, fma(_596, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _595));
        float _1497 = fma(_597, cbModelParam._m0[23u].z, fma(_596, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _595));
        float _1732;
        if (_1491 > 0.0)
        {
            _1732 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1732 = frontier_phi_52_48_ladder;
        }
        float _2064;
        if (_1494 > 0.0)
        {
            _2064 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2064 = frontier_phi_66_59_ladder;
        }
        float _2251;
        if (_1497 > 0.0)
        {
            _2251 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2251 = frontier_phi_84_77_ladder;
        }
        float _2253 = isnan(_2064) ? _1732 : (isnan(_1732) ? _2064 : min(_1732, _2064));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1491) + _1480;
        float _2259 = (_2254 * _1494) + _1484;
        float _2260 = (_2254 * _1497) + _1488;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2261;
        float _2264 = _2261 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2260 > _2264) || ((_2260 < _2262) || ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 < _2262) || (_2258 > _2264))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2260, cbModelParam._m0[17u].z, fma(_2259, cbModelParam._m0[17u].y, _2258 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2260, cbModelParam._m0[18u].z, fma(_2259, cbModelParam._m0[18u].y, _2258 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2260, cbModelParam._m0[19u].z, fma(_2259, cbModelParam._m0[19u].y, _2258 * cbModelParam._m0[19u].x))), _1428);
            frontier_phi_49_84_ladder = _2452.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2452.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2452.x * cbModelParam._m0[1u].z;
        }
        _1516 = frontier_phi_49_84_ladder_2;
        _1518 = frontier_phi_49_84_ladder_1;
        _1520 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_595, _596, _597), _1428);
        _1516 = _1500.x * cbModelParam._m0[1u].z;
        _1518 = _1500.y * cbModelParam._m0[1u].z;
        _1520 = _1500.z * cbModelParam._m0[1u].z;
    }
    float _1532 = _594 * 0.01200000010430812835693359375;
    float _1534 = _1532 * ((cbModelParam._m0[1u].w * (_1516 - _1421)) + _1421);
    float _1535 = _1532 * ((cbModelParam._m0[1u].w * (_1518 - _1423)) + _1423);
    float _1536 = _1532 * ((cbModelParam._m0[1u].w * (_1520 - _1425)) + _1425);
    float _1539 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, _1534 * cbSceneParam._m0[91u].x));
    uvec4 _1555 = floatBitsToUint(cbInstanceData._m0[_568 + 5u]);
    uint _1557 = _1555.x * 14u;
    uint _1558 = _1557 + 13u;
    float _1563 = _594 + (-1.0);
    float _1567 = (cbLight._m0[_1558].x * _1563) + 1.0;
    float _1568 = (cbLight._m0[_1558].y * _1563) + 1.0;
    uint _1569 = _1557 + 5u;
    float _1575 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
    uint _1579 = _1557 + 4u;
    float _1585 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
    uint _1589 = _1557 | 1u;
    float _1600 = dot(vec3(cbLight._m0[_1557].xyz), vec3(0.0));
    float _1603 = dot(vec3(cbLight._m0[_1589].xyz), vec3(0.0));
    float _3379 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _3390 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1608 = (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * 0.3183098733425140380859375;
    float _1610 = (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * 0.3183098733425140380859375;
    float _1617 = ((cbLight._m0[_1569].x * _1575) * _1610) + ((cbLight._m0[_1579].x * _1585) * _1608);
    float _1618 = ((_1575 * cbLight._m0[_1569].y) * _1610) + ((_1585 * cbLight._m0[_1579].y) * _1608);
    float _1619 = ((_1575 * cbLight._m0[_1569].z) * _1610) + ((_1585 * cbLight._m0[_1579].z) * _1608);
    uint _1620 = _1557 + 8u;
    float _1626 = cbLight._m0[_1557].x + _532;
    float _1627 = cbLight._m0[_1557].y + _533;
    float _1628 = cbLight._m0[_1557].z + _534;
    float _1632 = inversesqrt(dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628)));
    float _1636 = dot(vec3(0.0), vec3(cbLight._m0[_1557].xyz));
    float _3401 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1639 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _1640 = dot(vec3(0.0), vec3(_532, _533, _534));
    float _3412 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1643 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _1644 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1626 * _1632, _1627 * _1632, _1628 * _1632));
    float _3423 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1655 = (exp2(log2(1.0 - (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1661 = (0.5 / ((_1639 + 9.9999999392252902907785028219223e-09) + _1643)) * _1639;
    float _3434 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1663 = (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 0.31831014156341552734375;
    uint _1674 = _1557 + 9u;
    float _1680 = cbLight._m0[_1589].x + _532;
    float _1681 = cbLight._m0[_1589].y + _533;
    float _1682 = cbLight._m0[_1589].z + _534;
    float _1686 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
    float _1690 = dot(vec3(0.0), vec3(cbLight._m0[_1589].xyz));
    float _3445 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1693 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _1694 = dot(vec3(cbLight._m0[_1589].xyz), vec3(_1680 * _1686, _1681 * _1686, _1682 * _1686));
    float _3456 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1703 = (exp2(log2(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1707 = (0.5 / ((_1693 + 9.9999999392252902907785028219223e-09) + _1643)) * _1693;
    float _3467 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1709 = (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * 0.31831014156341552734375;
    float _1719 = (((_1703 * cbLight._m0[_1674].x) * _1709) * _1575) + (((_1655 * cbLight._m0[_1620].x) * _1663) * _1585);
    float _1720 = (((_1703 * cbLight._m0[_1674].y) * _1709) * _1575) + (((_1655 * cbLight._m0[_1620].y) * _1663) * _1585);
    float _1721 = (((_1703 * cbLight._m0[_1674].z) * _1709) * _1575) + (((_1655 * cbLight._m0[_1620].z) * _1663) * _1585);
    float _1837;
    float _1839;
    float _1841;
    float _1843;
    float _1845;
    float _1847;
    if (_1555.y == 0u)
    {
        float _1777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1777;
        float _1779 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1777;
        float _1780 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1777;
        uvec4 _1792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1793 = _1792.x;
        uint _1804 = uint((float(_1792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _1793))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _1793)));
        float _1814 = (log2(_1780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1815 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        uint _1818 = uint(isnan(14.0) ? _1815 : (isnan(_1815) ? 14.0 : min(_1815, 14.0)));
        uvec4 _1823 = texelFetch(g_lightClusterGridBuffer, int(((_1818 << 2u) + (_1804 << 6u)) >> 2u));
        uint _1824 = _1823.x;
        uint _1825 = _1792.z;
        float _1915;
        float _1917;
        float _1919;
        float _1921;
        float _1923;
        float _1925;
        if (((((1u << ((_1825 >> 4u) & 15u)) + 4294967295u) & _1824) == 0u) || ((_1825 & 240u) == 0u))
        {
            _1915 = 0.0;
            _1917 = 0.0;
            _1919 = 0.0;
            _1921 = 0.0;
            _1923 = 0.0;
            _1925 = 0.0;
        }
        else
        {
            float _1916;
            float _1918;
            float _1920;
            float _1922;
            float _1924;
            float _1926;
            float _2098 = 0.0;
            float _2099 = 0.0;
            float _2100 = 0.0;
            float _2101 = 0.0;
            float _2102 = 0.0;
            float _2103 = 0.0;
            uint _2104 = 0u;
            uint _2113;
            bool _2114;
            for (;;)
            {
                _2113 = texelFetch(g_lightClassification, int((((_1818 << 5u) + (_1804 << 9u)) + (_2104 << 2u)) >> 2u)).x;
                _2114 = _2113 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2114)
                {
                    frontier_phi_79_pred = _2103;
                    frontier_phi_79_pred_1 = _2102;
                    frontier_phi_79_pred_2 = _2101;
                    frontier_phi_79_pred_3 = _2100;
                    frontier_phi_79_pred_4 = _2099;
                    frontier_phi_79_pred_5 = _2098;
                }
                else
                {
                    float _2294;
                    float _2295;
                    float _2296;
                    float _2297;
                    float _2298;
                    float _2299;
                    uint _2300;
                    _2294 = _2098;
                    _2295 = _2099;
                    _2296 = _2100;
                    _2297 = _2101;
                    _2298 = _2102;
                    _2299 = _2103;
                    _2300 = _2113;
                    float _2195;
                    float _2196;
                    float _2197;
                    float _2198;
                    float _2199;
                    float _2200;
                    for (;;)
                    {
                        uint _2304 = uint(findLSB(_2300)) + (_2104 << 5u);
                        uint _2301 = (_2300 + 4294967295u) & _2300;
                        uint _2306 = _2304 * 48u;
                        vec4 _2320 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2306)).x, texelFetch(g_PointLightRenderingBuffer, int(_2306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2306 + 3u)).x));
                        uint _2326 = (_2304 * 48u) + 4u;
                        vec4 _2339 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2326)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 3u)).x));
                        uint _2345 = (_2304 * 48u) + 8u;
                        vec3 _2356 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2345)).x, texelFetch(g_PointLightRenderingBuffer, int(_2345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2345 + 2u)).x));
                        float _2360 = _2320.x - _1778;
                        float _2361 = _2320.y - _1779;
                        float _2362 = _2320.z - _1780;
                        float _2363 = dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362));
                        float _2366 = inversesqrt(_2363);
                        float _2375 = 1.0 - (_2363 * _2320.w);
                        float _3488 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
                        float _2376 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
                        float _2377 = sqrt(_2363) * _2339.w;
                        float _2380 = 1.39999997615814208984375 / (_2377 + 1.39999997615814208984375);
                        float _2381 = _2380 * _2380;
                        float _2384 = ((1.0 - _2381) * dot(vec3(0.0), vec3(_2366 * _2360, _2366 * _2361, _2366 * _2362))) + _2381;
                        float _2387 = _2377 * _2377;
                        float _2391 = ((isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0))) * _2376) / ((_2387 * 0.699999988079071044921875) + 1.0);
                        float _2395 = (-0.0) - _1778;
                        float _2396 = (-0.0) - _1779;
                        float _2397 = (-0.0) - _1780;
                        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
                        float _2405 = dot(vec3(0.0), vec3(_2401 * _2395, _2401 * _2396, _2401 * _2397));
                        float _3504 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
                        float _3515 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
                        float _2409 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
                        float _2413 = (0.5 / (((isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) + 9.9999999392252902907785028219223e-09) + _2409)) * _2409;
                        float _3526 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
                        float _2422 = (((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 3.1415927410125732421875) / ((_2387 * 2.1991131305694580078125) + 3.141590118408203125)) * _2376;
                        _2198 = (_2391 * _2339.x) + _2297;
                        _2199 = (_2391 * _2339.y) + _2298;
                        _2200 = (_2391 * _2339.z) + _2299;
                        _2195 = (_2422 * _2356.x) + _2294;
                        _2196 = (_2422 * _2356.y) + _2295;
                        _2197 = (_2422 * _2356.z) + _2296;
                        if (_2301 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2294 = _2195;
                            _2295 = _2196;
                            _2296 = _2197;
                            _2297 = _2198;
                            _2298 = _2199;
                            _2299 = _2200;
                            _2300 = _2301;
                        }
                    }
                    frontier_phi_79_pred = _2200;
                    frontier_phi_79_pred_1 = _2199;
                    frontier_phi_79_pred_2 = _2198;
                    frontier_phi_79_pred_3 = _2197;
                    frontier_phi_79_pred_4 = _2196;
                    frontier_phi_79_pred_5 = _2195;
                }
                _1926 = frontier_phi_79_pred;
                _1924 = frontier_phi_79_pred_1;
                _1922 = frontier_phi_79_pred_2;
                _1920 = frontier_phi_79_pred_3;
                _1918 = frontier_phi_79_pred_4;
                _1916 = frontier_phi_79_pred_5;
                uint _2105 = _2104 + 1u;
                if (_2105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2098 = _1916;
                    _2099 = _1918;
                    _2100 = _1920;
                    _2101 = _1922;
                    _2102 = _1924;
                    _2103 = _1926;
                    _2104 = _2105;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1915 = _1916;
            _1917 = _1918;
            _1919 = _1920;
            _1921 = _1922;
            _1923 = _1924;
            _1925 = _1926;
        }
        uvec4 _1929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1930 = _1929.z;
        uint _1932 = (_1930 >> 8u) & 15u;
        float _2069;
        float _2071;
        float _2073;
        float _2075;
        float _2077;
        float _2079;
        if (((4294967295u << _1932) & _1824) == 0u)
        {
            _2069 = _1915;
            _2071 = _1917;
            _2073 = _1919;
            _2075 = _1921;
            _2077 = _1923;
            _2079 = _1925;
        }
        else
        {
            float _2094 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_1932 < ((_1930 >> 12u) & 15u))
            {
                float _2070;
                float _2072;
                float _2074;
                float _2076;
                float _2078;
                float _2080;
                float _2277 = _1915;
                float _2278 = _1917;
                float _2279 = _1919;
                float _2280 = _1921;
                float _2281 = _1923;
                float _2282 = _1925;
                uint _2283 = _1932;
                uint _2292;
                bool _2293;
                for (;;)
                {
                    _2292 = texelFetch(g_lightClassification, int((((_1818 << 5u) + (_1804 << 9u)) + (_2283 << 2u)) >> 2u)).x;
                    _2293 = _2292 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2293)
                    {
                        frontier_phi_93_pred = _2281;
                        frontier_phi_93_pred_1 = _2280;
                        frontier_phi_93_pred_2 = _2279;
                        frontier_phi_93_pred_3 = _2278;
                        frontier_phi_93_pred_4 = _2277;
                        frontier_phi_93_pred_5 = _2282;
                    }
                    else
                    {
                        float _2457;
                        float _2458;
                        float _2459;
                        float _2460;
                        float _2461;
                        float _2462;
                        float _2706;
                        float _2707;
                        float _2708;
                        float _2709;
                        float _2710;
                        float _2711;
                        float _2470 = _2277;
                        float _2471 = _2278;
                        float _2472 = _2279;
                        float _2473 = _2280;
                        float _2474 = _2281;
                        float _2475 = _2282;
                        uint _2476 = _2292;
                        uint _2477;
                        vec4 _2502;
                        float _2503;
                        vec4 _2518;
                        vec3 _2530;
                        vec4 _2545;
                        vec4 _2560;
                        float _2606;
                        bool _2607;
                        for (;;)
                        {
                            uint _2487 = ((_2283 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2476));
                            _2477 = (_2476 + 4294967295u) & _2476;
                            uint _2489 = _2487 * 40u;
                            _2502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2489 + 3u)).x));
                            _2503 = _2502.w;
                            uint _2505 = (_2487 * 40u) + 4u;
                            _2518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 3u)).x));
                            uint _2520 = (_2487 * 40u) + 8u;
                            _2530 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 2u)).x));
                            uint _2532 = (_2487 * 40u) + 16u;
                            _2545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2532 + 3u)).x));
                            uint _2547 = (_2487 * 40u) + 20u;
                            _2560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2547 + 3u)).x));
                            uint _2562 = (_2487 * 40u) + 24u;
                            vec4 _2575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2562 + 3u)).x));
                            uint _2581 = (_2487 * 40u) + 28u;
                            vec4 _2594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 3u)).x));
                            _2606 = fma(_1780, _2594.z, fma(_1779, _2594.y, _2594.x * _1778)) + _2594.w;
                            _2607 = !((fma(_1780, _2575.z, fma(_1779, _2575.y, _2575.x * _1778)) + _2575.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2607)
                            {
                                float _2634 = _2502.x - _1778;
                                float _2635 = _2502.y - _1779;
                                float _2636 = _2502.z - _1780;
                                float _2637 = dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636));
                                float _2640 = inversesqrt(_2637);
                                float _2641 = _2640 * _2634;
                                float _2642 = _2640 * _2635;
                                float _2643 = _2640 * _2636;
                                float _2647 = 1.0 - (_2637 / (_2503 * _2503));
                                float _3537 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                                float _2648 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
                                float _2652 = sqrt(_2637) * _2518.w;
                                float _2654 = 1.39999997615814208984375 / (_2652 + 1.39999997615814208984375);
                                float _2655 = _2654 * _2654;
                                float _2656 = 1.0 - _2655;
                                float _2658 = (_2656 * dot(vec3(_2641, _2642, _2643), vec3(0.0))) + _2655;
                                float _2661 = _2652 * _2652;
                                float _2665 = (fma(_1780, _2545.z, fma(_1779, _2545.y, _2545.x * _1778)) + _2545.w) / _2606;
                                float _2666 = (fma(_1780, _2560.z, fma(_1779, _2560.y, _2560.x * _1778)) + _2560.w) / _2606;
                                float _2670 = 1.0 - dot(vec2(_2665, _2666), vec2(_2665, _2666));
                                float _3553 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                                float _2671 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
                                float _2672 = _2671 * (((isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0))) * _2648) / ((_2661 * 0.699999988079071044921875) + 1.0));
                                float _2682 = dot(vec3(0.0), vec3((-0.0) - (_1778 * _2094), (-0.0) - (_1779 * _2094), (-0.0) - (_1780 * _2094)));
                                float _3564 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                                float _2690 = (_2656 * dot(vec3(0.0), vec3(_2641, _2642, _2643))) + _2655;
                                float _3575 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                                float _2691 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
                                float _2695 = (0.5 / (((isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) + 9.9999999392252902907785028219223e-09) + _2691)) * _2691;
                                float _3586 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                                float _2702 = (_2671 * _2648) * (((isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * 3.1415927410125732421875) / ((_2661 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2672 * _2518.z;
                                frontier_phi_99_pred_1 = _2672 * _2518.y;
                                frontier_phi_99_pred_2 = _2672 * _2518.x;
                                frontier_phi_99_pred_3 = _2702 * _2530.z;
                                frontier_phi_99_pred_4 = _2702 * _2530.y;
                                frontier_phi_99_pred_5 = _2702 * _2530.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _2711 = frontier_phi_99_pred;
                            _2710 = frontier_phi_99_pred_1;
                            _2709 = frontier_phi_99_pred_2;
                            _2708 = frontier_phi_99_pred_3;
                            _2707 = frontier_phi_99_pred_4;
                            _2706 = frontier_phi_99_pred_5;
                            _2460 = _2709 + _2473;
                            _2461 = _2710 + _2474;
                            _2462 = _2711 + _2475;
                            _2457 = _2706 + _2470;
                            _2458 = _2707 + _2471;
                            _2459 = _2708 + _2472;
                            if (_2477 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2470 = _2457;
                                _2471 = _2458;
                                _2472 = _2459;
                                _2473 = _2460;
                                _2474 = _2461;
                                _2475 = _2462;
                                _2476 = _2477;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2461;
                        frontier_phi_93_pred_1 = _2460;
                        frontier_phi_93_pred_2 = _2459;
                        frontier_phi_93_pred_3 = _2458;
                        frontier_phi_93_pred_4 = _2457;
                        frontier_phi_93_pred_5 = _2462;
                    }
                    _2078 = frontier_phi_93_pred;
                    _2076 = frontier_phi_93_pred_1;
                    _2074 = frontier_phi_93_pred_2;
                    _2072 = frontier_phi_93_pred_3;
                    _2070 = frontier_phi_93_pred_4;
                    _2080 = frontier_phi_93_pred_5;
                    uint _2284 = _2283 + 1u;
                    if (_2284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2277 = _2070;
                        _2278 = _2072;
                        _2279 = _2074;
                        _2280 = _2076;
                        _2281 = _2078;
                        _2282 = _2080;
                        _2283 = _2284;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2080;
                frontier_phi_68_69_ladder_1 = _2078;
                frontier_phi_68_69_ladder_2 = _2076;
                frontier_phi_68_69_ladder_3 = _2074;
                frontier_phi_68_69_ladder_4 = _2070;
                frontier_phi_68_69_ladder_5 = _2072;
            }
            else
            {
                frontier_phi_68_69_ladder = _1925;
                frontier_phi_68_69_ladder_1 = _1923;
                frontier_phi_68_69_ladder_2 = _1921;
                frontier_phi_68_69_ladder_3 = _1919;
                frontier_phi_68_69_ladder_4 = _1915;
                frontier_phi_68_69_ladder_5 = _1917;
            }
            _2069 = frontier_phi_68_69_ladder_4;
            _2071 = frontier_phi_68_69_ladder_5;
            _2073 = frontier_phi_68_69_ladder_3;
            _2075 = frontier_phi_68_69_ladder_2;
            _2077 = frontier_phi_68_69_ladder_1;
            _2079 = frontier_phi_68_69_ladder;
        }
        float _2084 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
        _1837 = (_2084 * _2075) + _1617;
        _1839 = (_2084 * _2077) + _1618;
        _1841 = (_2084 * _2079) + _1619;
        _1843 = ((_2069 * 0.039999999105930328369140625) * _2084) + _1719;
        _1845 = ((_2071 * 0.039999999105930328369140625) * _2084) + _1720;
        _1847 = ((_2073 * 0.039999999105930328369140625) * _2084) + _1721;
    }
    else
    {
        _1837 = _1617;
        _1839 = _1618;
        _1841 = _1619;
        _1843 = _1719;
        _1845 = _1720;
        _1847 = _1721;
    }
    float _3602 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3613 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3624 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _1864 = ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1837 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _594))) + ((_1843 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1330)) * cbPerFrame._m0[3u].x);
    float _1865 = ((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1839 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _594))) + ((_1845 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1330)) * cbPerFrame._m0[3u].x);
    float _1866 = ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1841 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _594))) + ((_1847 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1330)) * cbPerFrame._m0[3u].x);
    float _1867 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1868 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1869 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    uint _1870 = _568 + 6u;
    float _1878 = _554 / cbSceneParam._m0[86u].x;
    float _1879 = _555 / cbSceneParam._m0[86u].y;
    vec4 _1893 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1878, _1879, (log2((isnan(cbSceneParam._m0[77u].w) ? _527 : (isnan(_527) ? cbSceneParam._m0[77u].w : min(_527, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1895 = _1893.x;
    float _1896 = _1893.y;
    float _1897 = _1893.z;
    float _1898 = _1893.w;
    float _1978;
    float _1980;
    float _1982;
    float _1984;
    if (_527 > cbSceneParam._m0[78u].w)
    {
        float _1940 = isnan(_527) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _527 : min(cbSceneParam._m0[80u].w, _527));
        float _1941 = _1940 / _527;
        float _1952 = _1941 * _255;
        float _1953 = _256 * _1941;
        float _1954 = (-0.0) - _1953;
        float _1955 = _1941 * _257;
        float _1957 = (cbSceneParam._m0[77u].w * _1954) / _1940;
        float _1958 = _1957 + cbSceneParam._m0[79u].w;
        float _1959 = cbSceneParam._m0[79u].w - _1953;
        float _1965 = sqrt(((_1952 * _1952) + (_1953 * _1953)) + (_1955 * _1955));
        float _1968 = (1.0 - (cbSceneParam._m0[77u].w / _1940)) * _1965;
        float _1974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2208;
        if (abs((_1954 - _1957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2208 = ((((_1958 > 0.0) ? exp2(_1974 * _1958) : (2.0 - exp2(_1976 * _1958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1968;
        }
        else
        {
            float _2127 = 1.0 / cbSceneParam._m0[80u].x;
            float _2128 = isnan(_1959) ? _1958 : (isnan(_1958) ? _1959 : max(_1958, _1959));
            float _2129 = isnan(_1959) ? _1958 : (isnan(_1958) ? _1959 : min(_1958, _1959));
            float _2138 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : min(_2128, 0.0));
            float _2139 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : min(_2129, 0.0));
            _2208 = ((abs(_1965 / _1954) * cbSceneParam._m0[80u].y) * ((((_2138 - _2139) * 2.0) - ((exp2(_1974 * (isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0)))) - exp2(_1974 * (isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))))) * _2127)) - ((exp2(_1976 * _2138) - exp2(_1976 * _2139)) * _2127))) + (_1968 * cbSceneParam._m0[80u].z);
        }
        vec4 _2210 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1878, _1879, 1.0), 0.0);
        float _2219 = exp2((_2208 * (-1.44269502162933349609375)) * (1.0 - _2210.w));
        float _2220 = log2(_2219);
        float _2236 = log2(_1898);
        _1978 = (exp2(_2236 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2220 * cbSceneParam._m0[78u].x)) * _2210.x) / cbSceneParam._m0[78u].x)) + _1895;
        _1980 = (exp2(_2236 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2220 * cbSceneParam._m0[78u].y)) * _2210.y) / cbSceneParam._m0[78u].y)) + _1896;
        _1982 = (exp2(_2236 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2220 * cbSceneParam._m0[78u].z)) * _2210.z) / cbSceneParam._m0[78u].z)) + _1897;
        _1984 = _2219 * _1898;
    }
    else
    {
        _1978 = _1895;
        _1980 = _1896;
        _1982 = _1897;
        _1984 = _1898;
    }
    bool _2246;
    vec4 _1994;
    vec4 _2017;
    float _2019;
    float _2023;
    float _2024;
    float _2025;
    float _2026;
    bool _2037;
    for (;;)
    {
        _1994 = cbMatDynParam._m0[0u];
        float _1996 = roundEven(_1994.y);
        bool _1997 = _1996 == 3.0;
        float _1999 = log2(_1984);
        float _2006 = exp2(_1999 * cbSceneParam._m0[78u].x) * _1867;
        float _2007 = exp2(_1999 * cbSceneParam._m0[78u].y) * _1868;
        float _2008 = exp2(_1999 * cbSceneParam._m0[78u].z) * _1869;
        float _2015 = _541 + (-0.5);
        _2017 = cbMtdParam._m0[1u];
        _2019 = _2017.y * _2015;
        float _2022 = (_1996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2023 = _2022 * (_1997 ? _2006 : (_2006 + (cbSceneParam._m0[72u].w * _1978)));
        _2024 = _2022 * (_1997 ? _2007 : (_2007 + (cbSceneParam._m0[72u].w * _1980)));
        _2025 = _2022 * (_1997 ? _2008 : (_2008 + (cbSceneParam._m0[72u].w * _1982)));
        _2026 = _2015 * 0.999000012874603271484375;
        _2037 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2037)
        {
            if ((cbInstanceData._m0[_568 + 7u].x + _2026) < 0.5)
            {
                _2246 = true;
                break;
            }
        }
        uint _2162 = _570 + uint(_1994.w);
        if ((cbInstanceData._m0[_2162].w < 1.0) && ((cbInstanceData._m0[_2162].w + _2026) < 0.5))
        {
            _2246 = true;
            break;
        }
        if ((_2019 + 1.0) < _2017.x)
        {
            _2246 = true;
            break;
        }
        _2246 = false;
        break;
    }
    float _2427;
    if (_2246)
    {
        discard_state = true;
        _2427 = 0.0;
    }
    else
    {
        _2427 = cbInstanceData._m0[_1870].w;
    }
    SV_Target.x = _2023;
    SV_Target.y = _2024;
    SV_Target.z = _2025;
    SV_Target.w = _2427;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1870].w;
    discard_exit();
}


