#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _955;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _184 = _183 * _176;
    float _185 = _183 * _177;
    float _186 = _183 * _178;
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _191 = _190 * NORMAL.x;
    float _192 = _190 * NORMAL.y;
    float _193 = _190 * NORMAL.z;
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _198 = _197 * TANGENT.x;
    float _199 = _197 * TANGENT.y;
    float _200 = _197 * TANGENT.z;
    float _245 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _255 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _245);
    float _256 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _245);
    float _257 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _245);
    vec4 _276 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _276.w;
    float _295 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _282) + cbMtdParam._m0[11u].x) * _276.x;
    float _297 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _282) + cbMtdParam._m0[11u].y) * _276.y;
    float _299 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _282) + cbMtdParam._m0[11u].z) * _276.z;
    float _325 = cbMtdParam._m0[22u].y + _255;
    float _326 = cbMtdParam._m0[22u].z + _256;
    float _327 = cbMtdParam._m0[22u].w + _257;
    float _341 = (-0.0) - dot(vec3(_325, _326, _327), vec3(_184, _185, _186));
    float _342 = (-0.0) - dot(vec3(_325, _326, _327), vec3(_198, _199, _200));
    float _343 = (-0.0) - dot(vec3(_325, _326, _327), vec3((-0.0) - _191, (-0.0) - _192, (-0.0) - _193));
    float _347 = inversesqrt(dot(vec3(_341, _342, _343), vec3(_341, _342, _343)));
    float _348 = _347 * _343;
    float _350 = (cbMtdParam._m0[19u].x * _341) * _347;
    float _352 = (cbMtdParam._m0[18u].w * _342) * _347;
    float _353 = fract(TEXCOORD.x);
    float _354 = fract(TEXCOORD.y);
    float _360;
    if (_350 > 0.0)
    {
        _360 = (1.0 - _353) / _350;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _353) / _350;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _360 = frontier_phi_3_2_ladder;
    }
    float _368;
    if (_352 > 0.0)
    {
        _368 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _368 = frontier_phi_7_6_ladder;
    }
    float _372 = (_348 > 0.0) ? (cbMtdParam._m0[15u].x / _348) : 5000.0;
    float _373 = isnan(_368) ? _360 : (isnan(_360) ? _368 : min(_360, _368));
    float _374 = isnan(_372) ? _373 : (isnan(_373) ? _372 : min(_373, _372));
    float _378 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _385 = ((_374 * _348) + _378) / _378;
    vec4 _410 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_353 + (-0.5)) + (_374 * _350)) / _385) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_354 + (-0.5)) + (_374 * _352)) / _385) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    float _414 = _410.z;
    float _430 = 0.5 - (_282 * 0.5);
    float _437 = ((((_412 - (_412 * _282)) * cbMtdParam._m0[9u].x) - _295) * _430) + _295;
    float _438 = ((((_413 - (_413 * _282)) * cbMtdParam._m0[9u].y) - _297) * _430) + _297;
    float _439 = (((cbMtdParam._m0[9u].z * (_414 - (_414 * _282))) - _299) * _430) + _299;
    vec4 _451 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _459 = (_451.x * 2.0) + (-1.0);
    float _461 = (_451.y * 2.0) + (-1.0);
    float _462 = dot(vec2(_459, _461), vec2(_459, _461));
    float _3024 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0))));
    float _468 = _451.z * _282;
    float _471 = fma(_467, _191, fma(_461, _198, _459 * _184));
    float _474 = fma(_467, _192, fma(_461, _199, _459 * _185));
    float _477 = fma(_467, _193, fma(_461, _200, _459 * _186));
    float _481 = inversesqrt(dot(vec3(_471, _474, _477), vec3(_471, _474, _477)));
    float _482 = _481 * _471;
    float _483 = _481 * _474;
    float _484 = _481 * _477;
    float _3035 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _485 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
    float _3046 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3057 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3068 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _504 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _508 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _509 = _255 * _508;
    float _510 = _256 * _508;
    float _511 = _257 * _508;
    float _517 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _518 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _539 = fma(_484, cbSceneParam._m0[5u].z, fma(_483, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _482));
    float _542 = fma(_484, cbSceneParam._m0[6u].z, fma(_483, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _482));
    float _545 = fma(_484, cbSceneParam._m0[7u].z, fma(_483, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _482));
    uint _558 = uint(roundEven(NORMAL.w)) * 13u;
    uint _561 = (_558 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _567 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0)))) * cbInstanceData._m0[_561].x;
    float _568 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0)))) * cbInstanceData._m0[_561].y;
    float _569 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0)))) * cbInstanceData._m0[_561].z;
    float _3079 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
    float _3090 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
    float _3101 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
    vec4 _581 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _517, cbSceneParam._m0[86u].y * _518));
    float _584 = _581.x * TEXCOORD.z;
    float _585 = dot(vec3(_482, _483, _484), vec3(_509, _510, _511));
    float _588 = _585 * 2.0;
    float _592 = (_588 * _482) - _509;
    float _593 = (_588 * _483) - _510;
    float _594 = (_588 * _484) - _511;
    float _598 = abs(dot(vec3(_509, _510, _511), vec3(_482, _483, _484)));
    float _3112 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _600 = sqrt(_485);
    float _613 = exp2((_600 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_600 * 3.0));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _954;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _681 = fma(_653, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _645));
        float _685 = fma(_653, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _645));
        float _689 = fma(_653, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _645));
        float _712 = _645 + _482;
        float _713 = _649 + _483;
        float _714 = _653 + _484;
        float _724 = fma(_714, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _712)) - _681;
        float _725 = fma(_714, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _712)) - _685;
        float _726 = fma(_714, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _712)) - _689;
        float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
        float _743 = ((_730 * _724) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_681 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_730 * _725) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_685 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_730 * _726) / cbModelParam._m0[34u].z) + ((((((_689 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        float _782 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_748.x + (-0.5));
        float _784 = _782 * (_748.y + (-0.5));
        float _785 = _782 * (_748.z + (-0.5));
        float _792 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_755.x + (-0.5));
        float _794 = _792 * (_755.y + (-0.5));
        float _795 = _792 * (_755.z + (-0.5));
        float _802 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_762.x + (-0.5));
        float _804 = _802 * (_762.y + (-0.5));
        float _805 = _802 * (_762.z + (-0.5));
        float _812 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_769.x + (-0.5));
        float _814 = _812 * (_769.y + (-0.5));
        float _815 = _812 * (_769.z + (-0.5));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = _783 * 0.5;
        float _820 = _793 * 0.5;
        float _821 = _803 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _836 = (dot(vec3(_482, _483, _484), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3138 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _846 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3149 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3160 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))) * (_848 + 1.0))) + _853) * _816;
        float _863 = _784 * 0.5;
        float _864 = _794 * 0.5;
        float _865 = _804 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_482, _483, _484), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3171 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3182 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3193 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))) * (_890 + 1.0))) + _895) * _817;
        float _905 = _785 * 0.5;
        float _906 = _795 * 0.5;
        float _907 = _805 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_482, _483, _484), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3204 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3215 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3226 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0))) * (_932 + 1.0))) + _937) * _818;
        _954 = _785;
        _956 = _784;
        _957 = _783;
        _958 = _795;
        _959 = _794;
        _960 = _793;
        _961 = _805;
        _962 = _804;
        _963 = _803;
        _964 = _818;
        _965 = _817;
        _966 = _816;
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
    }
    else
    {
        _954 = _955;
        _956 = _955;
        _957 = _955;
        _958 = _955;
        _959 = _955;
        _960 = _955;
        _961 = _955;
        _962 = _955;
        _963 = _955;
        _964 = _955;
        _965 = _955;
        _966 = _955;
        _967 = 0.0;
        _968 = 0.0;
        _969 = 0.0;
    }
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _995 = fma(_653, cbModelParam._m0[30u].z, fma(_649, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _645));
        float _999 = fma(_653, cbModelParam._m0[31u].z, fma(_649, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _645));
        float _1003 = fma(_653, cbModelParam._m0[32u].z, fma(_649, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _645));
        float _1026 = _645 + _482;
        float _1027 = _649 + _483;
        float _1028 = _653 + _484;
        float _1038 = fma(_1028, cbModelParam._m0[30u].z, fma(_1027, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026)) - _995;
        float _1039 = fma(_1028, cbModelParam._m0[31u].z, fma(_1027, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026)) - _999;
        float _1040 = fma(_1028, cbModelParam._m0[32u].z, fma(_1027, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026)) - _1003;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_995 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_999 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[35u].z) + ((((((_1003 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1094 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1061.x + (-0.5));
        float _1096 = _1094 * (_1061.y + (-0.5));
        float _1097 = _1094 * (_1061.z + (-0.5));
        float _1104 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1068.x + (-0.5));
        float _1106 = _1104 * (_1068.y + (-0.5));
        float _1107 = _1104 * (_1068.z + (-0.5));
        float _1114 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1075.x + (-0.5));
        float _1116 = _1114 * (_1075.y + (-0.5));
        float _1117 = _1114 * (_1075.z + (-0.5));
        float _1124 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1082.x + (-0.5));
        float _1126 = _1124 * (_1082.y + (-0.5));
        float _1127 = _1124 * (_1082.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_482, _483, _484), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3267 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3278 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3289 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (_1158 + 1.0))) + _1163) * _1128;
        float _1173 = _1096 * 0.5;
        float _1174 = _1106 * 0.5;
        float _1175 = _1116 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_482, _483, _484), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3300 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3311 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3322 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * (_1200 + 1.0))) + _1205) * _1129;
        float _1215 = _1097 * 0.5;
        float _1216 = _1107 * 0.5;
        float _1217 = _1117 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_482, _483, _484), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3333 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3344 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3355 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * (_1242 + 1.0))) + _1247) * _1130;
        _1264 = _1097;
        _1265 = _1096;
        _1266 = _1095;
        _1267 = _1107;
        _1268 = _1106;
        _1269 = _1105;
        _1270 = _1117;
        _1271 = _1116;
        _1272 = _1115;
        _1273 = _1130;
        _1274 = _1129;
        _1275 = _1128;
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _955;
        _1265 = _955;
        _1266 = _955;
        _1267 = _955;
        _1268 = _955;
        _1269 = _955;
        _1270 = _955;
        _1271 = _955;
        _1272 = _955;
        _1273 = _955;
        _1274 = _955;
        _1275 = _955;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _967)) + _967;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _968)) + _968;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _969)) + _969;
    float _1311 = fma(_1290, cbSceneParam._m0[89u].z, fma(_1289, cbSceneParam._m0[89u].y, _1288 * cbSceneParam._m0[89u].x));
    float _1314 = fma(_1290, cbSceneParam._m0[90u].z, fma(_1289, cbSceneParam._m0[90u].y, _1288 * cbSceneParam._m0[90u].x));
    float _1317 = fma(_1290, cbSceneParam._m0[91u].z, fma(_1289, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1288));
    float _1332 = _592 * 0.5;
    float _1333 = _593 * 0.5;
    float _1334 = _594 * 0.5;
    float _1335 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1338 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1341 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1375;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1348 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_954, _958, _961, _964));
        float _1352 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_956, _959, _962, _965));
        float _1356 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_957, _960, _963, _966));
        float _1363 = dot(vec4(cbModelParam._m0[39u]), vec4(_1332, _1333, _1334, 1.0));
        _1375 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1363) ? 0.0 : (isnan(0.0) ? _1363 : max(0.0, _1363))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1375 = 1.0;
    }
    float _1386;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1377 = dot(vec4(cbModelParam._m0[40u]), vec4(_1332, _1333, _1334, 1.0));
        _1386 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1386 = 1.0;
    }
    float _1390 = (_1386 * cbModelParam._m0[1u].x) + (_1375 * (1.0 - cbModelParam._m0[1u].x));
    float _1400 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _485);
    float _1401 = isnan(_1400) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1400 : min(cbModelParam._m0[25u].z, _1400));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1449 = fma(_653, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645)) + cbModelParam._m0[13u].w;
        float _1453 = fma(_653, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645)) + cbModelParam._m0[14u].w;
        float _1457 = fma(_653, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645)) + cbModelParam._m0[15u].w;
        float _1460 = fma(_594, cbModelParam._m0[13u].z, fma(_593, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592));
        float _1463 = fma(_594, cbModelParam._m0[14u].z, fma(_593, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592));
        float _1466 = fma(_594, cbModelParam._m0[15u].z, fma(_593, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592));
        float _1494;
        if (_1460 > 0.0)
        {
            _1494 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1494 = frontier_phi_22_20_ladder;
        }
        float _1840;
        if (_1463 > 0.0)
        {
            _1840 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1840 = frontier_phi_31_27_ladder;
        }
        float _2140;
        if (_1466 > 0.0)
        {
            _2140 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2140 = frontier_phi_45_38_ladder;
        }
        float _2142 = isnan(_1840) ? _1494 : (isnan(_1494) ? _1840 : min(_1494, _1840));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1460) + _1449;
        float _2148 = (_2143 * _1463) + _1453;
        float _2149 = (_2143 * _1466) + _1457;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2150;
        float _2153 = _2150 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2149 > _2153) || ((_2149 < _2151) || ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 < _2151) || (_2147 > _2153))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2275 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1401);
            frontier_phi_21_45_ladder = _2275.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2275.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2275.x * cbModelParam._m0[1u].y;
        }
        _1482 = frontier_phi_21_45_ladder_2;
        _1484 = frontier_phi_21_45_ladder_1;
        _1486 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_592, _593, _594), _1401);
        _1482 = _1470.x * cbModelParam._m0[1u].y;
        _1484 = _1470.y * cbModelParam._m0[1u].y;
        _1486 = _1470.z * cbModelParam._m0[1u].y;
    }
    float _1490 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _485);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1490 : min(cbModelParam._m0[25u].w, _1490));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1544 = fma(_653, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645)) + cbModelParam._m0[21u].w;
        float _1548 = fma(_653, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645)) + cbModelParam._m0[22u].w;
        float _1552 = fma(_653, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645)) + cbModelParam._m0[23u].w;
        float _1555 = fma(_594, cbModelParam._m0[21u].z, fma(_593, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592));
        float _1558 = fma(_594, cbModelParam._m0[22u].z, fma(_593, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592));
        float _1561 = fma(_594, cbModelParam._m0[23u].z, fma(_593, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592));
        float _1845;
        if (_1555 > 0.0)
        {
            _1845 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1845 = frontier_phi_33_29_ladder;
        }
        float _2166;
        if (_1558 > 0.0)
        {
            _2166 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2166 = frontier_phi_47_40_ladder;
        }
        float _2335;
        if (_1561 > 0.0)
        {
            _2335 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2335 = frontier_phi_61_56_ladder;
        }
        float _2337 = isnan(_2166) ? _1845 : (isnan(_1845) ? _2166 : min(_1845, _2166));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1555) + _1544;
        float _2343 = (_2338 * _1558) + _1548;
        float _2344 = (_2338 * _1561) + _1552;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2345;
        float _2348 = _2345 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2344 > _2348) || ((_2344 < _2346) || ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 < _2346) || (_2342 > _2348))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2344, cbModelParam._m0[17u].z, fma(_2343, cbModelParam._m0[17u].y, _2342 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2344, cbModelParam._m0[18u].z, fma(_2343, cbModelParam._m0[18u].y, _2342 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2344, cbModelParam._m0[19u].z, fma(_2343, cbModelParam._m0[19u].y, _2342 * cbModelParam._m0[19u].x))), _1491);
            frontier_phi_30_61_ladder = _2577.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2577.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2577.x * cbModelParam._m0[1u].z;
        }
        _1580 = frontier_phi_30_61_ladder_2;
        _1582 = frontier_phi_30_61_ladder_1;
        _1584 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_592, _593, _594), _1491);
        _1580 = _1564.x * cbModelParam._m0[1u].z;
        _1582 = _1564.y * cbModelParam._m0[1u].z;
        _1584 = _1564.z * cbModelParam._m0[1u].z;
    }
    float _1596 = ((((1.0 - _613) * ((_600 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_613 * _600)) * _584;
    float _1597 = _1596 * ((cbModelParam._m0[1u].w * (_1580 - _1482)) + _1482);
    float _1598 = _1596 * ((cbModelParam._m0[1u].w * (_1582 - _1484)) + _1484);
    float _1599 = _1596 * ((cbModelParam._m0[1u].w * (_1584 - _1486)) + _1486);
    float _1602 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, _1597 * cbSceneParam._m0[91u].x));
    uvec4 _1618 = floatBitsToUint(cbInstanceData._m0[_558 + 5u]);
    uint _1620 = _1618.x * 14u;
    uint _1621 = _1620 + 13u;
    float _1626 = _584 + (-1.0);
    float _1629 = (cbLight._m0[_1621].x * _1626) + 1.0;
    float _1630 = (cbLight._m0[_1621].y * _1626) + 1.0;
    uint _1631 = _1620 + 5u;
    float _1637 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
    uint _1641 = _1620 + 4u;
    float _1647 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
    uint _1651 = _1620 | 1u;
    float _1662 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_482, _483, _484));
    float _1665 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_482, _483, _484));
    float _3491 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _3502 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1670 = (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * 0.3183098733425140380859375;
    float _1672 = (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * 0.3183098733425140380859375;
    float _1679 = ((cbLight._m0[_1631].x * _1637) * _1672) + ((cbLight._m0[_1641].x * _1647) * _1670);
    float _1680 = ((_1637 * cbLight._m0[_1631].y) * _1672) + ((_1647 * cbLight._m0[_1641].y) * _1670);
    float _1681 = ((_1637 * cbLight._m0[_1631].z) * _1672) + ((_1647 * cbLight._m0[_1641].z) * _1670);
    uint _1683 = _1620 + 8u;
    float _1696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1620].w)) * _485) * 0.949999988079071044921875);
    float _1697 = _1696 * _1696;
    float _1698 = cbLight._m0[_1620].x + _509;
    float _1699 = cbLight._m0[_1620].y + _510;
    float _1700 = cbLight._m0[_1620].z + _511;
    float _1704 = inversesqrt(dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700)));
    float _1705 = _1704 * _1698;
    float _1706 = _1704 * _1699;
    float _1707 = _1704 * _1700;
    float _1708 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_1620].xyz));
    float _3513 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _1712 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _1713 = dot(vec3(_482, _483, _484), vec3(_1705, _1706, _1707));
    float _3535 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _1717 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_1705, _1706, _1707));
    float _3546 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1721 = _1697 * _1697;
    float _1725 = ((_1716 * _1716) * (_1721 + (-1.0))) + 1.0;
    float _1736 = (exp2(log2(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1737 = 1.0 - _1697;
    float _1748 = (0.5 / (((_1712 * ((_1711 * _1737) + _1697)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1737) + _1697) * _1711))) * _1711;
    float _3557 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1750 = (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_1721 / ((_1725 * _1725) * 3.141590118408203125));
    uint _1761 = _1620 + 9u;
    float _1772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1651].w)) * _485) * 0.949999988079071044921875);
    float _1773 = _1772 * _1772;
    float _1774 = cbLight._m0[_1651].x + _509;
    float _1775 = cbLight._m0[_1651].y + _510;
    float _1776 = cbLight._m0[_1651].z + _511;
    float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
    float _1781 = _1780 * _1774;
    float _1782 = _1780 * _1775;
    float _1783 = _1780 * _1776;
    float _1784 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_1651].xyz));
    float _3568 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _1788 = dot(vec3(_482, _483, _484), vec3(_1781, _1782, _1783));
    float _3579 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _1792 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_1781, _1782, _1783));
    float _3590 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1796 = _1773 * _1773;
    float _1800 = ((_1791 * _1791) * (_1796 + (-1.0))) + 1.0;
    float _1809 = (exp2(log2(1.0 - (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1810 = 1.0 - _1773;
    float _1820 = (0.5 / (((_1712 * ((_1787 * _1810) + _1773)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1810) + _1773) * _1787))) * _1787;
    float _3601 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1796 / ((_1800 * _1800) * 3.141590118408203125));
    float _1832 = (((_1809 * cbLight._m0[_1761].x) * _1822) * _1637) + (((_1736 * cbLight._m0[_1683].x) * _1750) * _1647);
    float _1833 = (((_1809 * cbLight._m0[_1761].y) * _1822) * _1637) + (((_1736 * cbLight._m0[_1683].y) * _1750) * _1647);
    float _1834 = (((_1809 * cbLight._m0[_1761].z) * _1822) * _1637) + (((_1736 * cbLight._m0[_1683].z) * _1750) * _1647);
    float _1949;
    float _1951;
    float _1953;
    float _1955;
    float _1957;
    float _1959;
    if (_1618.y == 0u)
    {
        float _1889 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1890 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1889;
        float _1891 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1889;
        float _1892 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1889;
        uvec4 _1904 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1905 = _1904.x;
        uint _1916 = uint((float(_1904.y) * floor(float(uint(cbSceneParam._m0[85u].y * _518) / _1905))) + floor(float(uint(cbSceneParam._m0[85u].x * _517) / _1905)));
        float _1926 = (log2(_1892 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1927 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        uint _1930 = uint(isnan(14.0) ? _1927 : (isnan(_1927) ? 14.0 : min(_1927, 14.0)));
        uvec4 _1935 = texelFetch(g_lightClusterGridBuffer, int(((_1930 << 2u) + (_1916 << 6u)) >> 2u));
        uint _1936 = _1935.x;
        uint _1937 = _1904.z;
        float _2027;
        float _2029;
        float _2031;
        float _2033;
        float _2035;
        float _2037;
        if (((((1u << ((_1937 >> 4u) & 15u)) + 4294967295u) & _1936) == 0u) || ((_1937 & 240u) == 0u))
        {
            _2027 = 0.0;
            _2029 = 0.0;
            _2031 = 0.0;
            _2033 = 0.0;
            _2035 = 0.0;
            _2037 = 0.0;
        }
        else
        {
            float _2028;
            float _2030;
            float _2032;
            float _2034;
            float _2036;
            float _2038;
            float _2203 = 0.0;
            float _2204 = 0.0;
            float _2205 = 0.0;
            float _2206 = 0.0;
            float _2207 = 0.0;
            float _2208 = 0.0;
            uint _2209 = 0u;
            uint _2218;
            bool _2219;
            for (;;)
            {
                _2218 = texelFetch(g_lightClassification, int((((_1930 << 5u) + (_1916 << 9u)) + (_2209 << 2u)) >> 2u)).x;
                _2219 = _2218 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2219)
                {
                    frontier_phi_58_pred = _2204;
                    frontier_phi_58_pred_1 = _2208;
                    frontier_phi_58_pred_2 = _2207;
                    frontier_phi_58_pred_3 = _2206;
                    frontier_phi_58_pred_4 = _2205;
                    frontier_phi_58_pred_5 = _2203;
                }
                else
                {
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    uint _2384;
                    _2378 = _2203;
                    _2379 = _2204;
                    _2380 = _2205;
                    _2381 = _2206;
                    _2382 = _2207;
                    _2383 = _2208;
                    _2384 = _2218;
                    float _2284;
                    float _2285;
                    float _2286;
                    float _2287;
                    float _2288;
                    float _2289;
                    for (;;)
                    {
                        uint _2388 = uint(findLSB(_2384)) + (_2209 << 5u);
                        uint _2385 = (_2384 + 4294967295u) & _2384;
                        uint _2390 = _2388 * 48u;
                        vec4 _2404 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2390)).x, texelFetch(g_PointLightRenderingBuffer, int(_2390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2390 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2390 + 3u)).x));
                        uint _2410 = (_2388 * 48u) + 4u;
                        vec4 _2423 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2410)).x, texelFetch(g_PointLightRenderingBuffer, int(_2410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2410 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2410 + 3u)).x));
                        uint _2429 = (_2388 * 48u) + 8u;
                        vec3 _2440 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2429)).x, texelFetch(g_PointLightRenderingBuffer, int(_2429 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2429 + 2u)).x));
                        float _2444 = _2404.x - _1890;
                        float _2445 = _2404.y - _1891;
                        float _2446 = _2404.z - _1892;
                        float _2447 = dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446));
                        float _2450 = inversesqrt(_2447);
                        float _2451 = _2450 * _2444;
                        float _2452 = _2450 * _2445;
                        float _2453 = _2450 * _2446;
                        float _2454 = dot(vec3(_539, _542, _545), vec3(_2451, _2452, _2453));
                        float _2459 = 1.0 - (_2447 * _2404.w);
                        float _3622 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
                        float _2460 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
                        float _2461 = sqrt(_2447) * _2423.w;
                        float _2464 = 1.39999997615814208984375 / (_2461 + 1.39999997615814208984375);
                        float _2465 = _2464 * _2464;
                        float _2468 = ((1.0 - _2465) * _2454) + _2465;
                        float _2471 = _2461 * _2461;
                        float _2475 = ((isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0))) * _2460) / ((_2471 * 0.699999988079071044921875) + 1.0);
                        float _2479 = (-0.0) - _1890;
                        float _2480 = (-0.0) - _1891;
                        float _2481 = (-0.0) - _1892;
                        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
                        float _2486 = _2485 * _2479;
                        float _2487 = _2485 * _2480;
                        float _2488 = _2485 * _2481;
                        float _2496 = exp2(log2(1.0 / ((_2471 * 3.5) + 5.0)) * 0.25);
                        float _2497 = 1.0 - _600;
                        float _2504 = sqrt(1.0 - ((1.0 - (_2497 * _2497)) * (1.0 - (_2496 * _2496))));
                        float _2505 = _2504 * _2504;
                        float _2506 = _2505 * _2505;
                        float _2507 = _2486 + _2451;
                        float _2508 = _2487 + _2452;
                        float _2509 = _2488 + _2453;
                        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
                        float _2517 = dot(vec3(_539, _542, _545), vec3(_2486, _2487, _2488));
                        float _3638 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
                        float _2520 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
                        float _2521 = dot(vec3(_539, _542, _545), vec3(_2513 * _2507, _2513 * _2508, _2513 * _2509));
                        float _3649 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
                        float _2524 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
                        float _2528 = ((_2524 * _2524) * (_2506 + (-1.0))) + 1.0;
                        float _2529 = _2464 * _2505;
                        float _2530 = _2529 * _2529;
                        float _2533 = ((1.0 - _2530) * _2454) + _2530;
                        float _3660 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                        float _2534 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
                        float _2535 = 1.0 - _2505;
                        float _2545 = (0.5 / (((_2534 * ((_2520 * _2535) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2535) + _2505) * _2520))) * _2534;
                        float _3671 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
                        float _2556 = (((_2506 * 3.1415927410125732421875) * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) / ((_2528 * _2528) * ((_2471 * 2.1991131305694580078125) + 3.141590118408203125))) * _2460;
                        _2287 = (_2475 * _2423.x) + _2381;
                        _2288 = (_2475 * _2423.y) + _2382;
                        _2289 = (_2475 * _2423.z) + _2383;
                        _2284 = (_2556 * _2440.x) + _2378;
                        _2285 = (_2556 * _2440.y) + _2379;
                        _2286 = (_2556 * _2440.z) + _2380;
                        if (_2385 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2378 = _2284;
                            _2379 = _2285;
                            _2380 = _2286;
                            _2381 = _2287;
                            _2382 = _2288;
                            _2383 = _2289;
                            _2384 = _2385;
                        }
                    }
                    frontier_phi_58_pred = _2285;
                    frontier_phi_58_pred_1 = _2289;
                    frontier_phi_58_pred_2 = _2288;
                    frontier_phi_58_pred_3 = _2287;
                    frontier_phi_58_pred_4 = _2286;
                    frontier_phi_58_pred_5 = _2284;
                }
                _2030 = frontier_phi_58_pred;
                _2038 = frontier_phi_58_pred_1;
                _2036 = frontier_phi_58_pred_2;
                _2034 = frontier_phi_58_pred_3;
                _2032 = frontier_phi_58_pred_4;
                _2028 = frontier_phi_58_pred_5;
                uint _2210 = _2209 + 1u;
                if (_2210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2203 = _2028;
                    _2204 = _2030;
                    _2205 = _2032;
                    _2206 = _2034;
                    _2207 = _2036;
                    _2208 = _2038;
                    _2209 = _2210;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2027 = _2028;
            _2029 = _2030;
            _2031 = _2032;
            _2033 = _2034;
            _2035 = _2036;
            _2037 = _2038;
        }
        uvec4 _2041 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2042 = _2041.z;
        uint _2044 = (_2042 >> 8u) & 15u;
        float _2171;
        float _2173;
        float _2175;
        float _2177;
        float _2179;
        float _2181;
        if (((4294967295u << _2044) & _1936) == 0u)
        {
            _2171 = _2027;
            _2173 = _2029;
            _2175 = _2031;
            _2177 = _2033;
            _2179 = _2035;
            _2181 = _2037;
        }
        else
        {
            float _2196 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
            float _2197 = _2196 * _1890;
            float _2198 = _2196 * _1891;
            float _2199 = _2196 * _1892;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2044 < ((_2042 >> 12u) & 15u))
            {
                float _2172;
                float _2174;
                float _2176;
                float _2178;
                float _2180;
                float _2182;
                float _2361 = _2027;
                float _2362 = _2029;
                float _2363 = _2031;
                float _2364 = _2033;
                float _2365 = _2035;
                float _2366 = _2037;
                uint _2367 = _2044;
                uint _2376;
                bool _2377;
                for (;;)
                {
                    _2376 = texelFetch(g_lightClassification, int((((_1930 << 5u) + (_1916 << 9u)) + (_2367 << 2u)) >> 2u)).x;
                    _2377 = _2376 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2377)
                    {
                        frontier_phi_67_pred = _2366;
                        frontier_phi_67_pred_1 = _2365;
                        frontier_phi_67_pred_2 = _2364;
                        frontier_phi_67_pred_3 = _2363;
                        frontier_phi_67_pred_4 = _2362;
                        frontier_phi_67_pred_5 = _2361;
                    }
                    else
                    {
                        float _2582;
                        float _2583;
                        float _2584;
                        float _2585;
                        float _2586;
                        float _2587;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2595 = _2361;
                        float _2596 = _2362;
                        float _2597 = _2363;
                        float _2598 = _2364;
                        float _2599 = _2365;
                        float _2600 = _2366;
                        uint _2601 = _2376;
                        uint _2602;
                        vec4 _2627;
                        float _2628;
                        vec4 _2643;
                        vec3 _2655;
                        vec4 _2670;
                        vec4 _2686;
                        float _2732;
                        bool _2733;
                        for (;;)
                        {
                            uint _2612 = ((_2367 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2601));
                            _2602 = (_2601 + 4294967295u) & _2601;
                            uint _2614 = _2612 * 40u;
                            _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            _2628 = _2627.w;
                            uint _2630 = (_2612 * 40u) + 4u;
                            _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            uint _2645 = (_2612 * 40u) + 8u;
                            _2655 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x));
                            uint _2657 = (_2612 * 40u) + 16u;
                            _2670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 3u)).x));
                            uint _2673 = (_2612 * 40u) + 20u;
                            _2686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 3u)).x));
                            uint _2688 = (_2612 * 40u) + 24u;
                            vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            uint _2707 = (_2612 * 40u) + 28u;
                            vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 3u)).x));
                            _2732 = fma(_1892, _2720.z, fma(_1891, _2720.y, _2720.x * _1890)) + _2720.w;
                            _2733 = !((fma(_1892, _2701.z, fma(_1891, _2701.y, _2701.x * _1890)) + _2701.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2733)
                            {
                                float _2760 = _2627.x - _1890;
                                float _2761 = _2627.y - _1891;
                                float _2762 = _2627.z - _1892;
                                float _2763 = dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762));
                                float _2766 = inversesqrt(_2763);
                                float _2767 = _2766 * _2760;
                                float _2768 = _2766 * _2761;
                                float _2769 = _2766 * _2762;
                                float _2773 = 1.0 - (_2763 / (_2628 * _2628));
                                float _3682 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                                float _2774 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
                                float _2778 = sqrt(_2763) * _2643.w;
                                float _2780 = 1.39999997615814208984375 / (_2778 + 1.39999997615814208984375);
                                float _2781 = _2780 * _2780;
                                float _2784 = ((1.0 - _2781) * dot(vec3(_2767, _2768, _2769), vec3(_539, _542, _545))) + _2781;
                                float _2787 = _2778 * _2778;
                                float _2791 = (fma(_1892, _2670.z, fma(_1891, _2670.y, _2670.x * _1890)) + _2670.w) / _2732;
                                float _2792 = (fma(_1892, _2686.z, fma(_1891, _2686.y, _2686.x * _1890)) + _2686.w) / _2732;
                                float _2796 = 1.0 - dot(vec2(_2791, _2792), vec2(_2791, _2792));
                                float _3698 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                                float _2797 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
                                float _2798 = _2797 * (((isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))) * _2774) / ((_2787 * 0.699999988079071044921875) + 1.0));
                                float _2810 = exp2(log2(1.0 / ((_2787 * 3.5) + 5.0)) * 0.25);
                                float _2811 = 1.0 - _600;
                                float _2818 = sqrt(1.0 - ((1.0 - (_2811 * _2811)) * (1.0 - (_2810 * _2810))));
                                float _2819 = _2818 * _2818;
                                float _2820 = _2819 * _2819;
                                float _2821 = _2767 - _2197;
                                float _2822 = _2768 - _2198;
                                float _2823 = _2769 - _2199;
                                float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                                float _2831 = dot(vec3(_539, _542, _545), vec3((-0.0) - _2197, (-0.0) - _2198, (-0.0) - _2199));
                                float _3709 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2834 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
                                float _2835 = dot(vec3(_539, _542, _545), vec3(_2827 * _2821, _2827 * _2822, _2827 * _2823));
                                float _3720 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                                float _2838 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
                                float _2842 = ((_2838 * _2838) * (_2820 + (-1.0))) + 1.0;
                                float _2843 = _2780 * _2819;
                                float _2844 = _2843 * _2843;
                                float _2850 = ((1.0 - _2844) * dot(vec3(_539, _542, _545), vec3(_2767, _2768, _2769))) + _2844;
                                float _3731 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                                float _2851 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
                                float _2852 = 1.0 - _2819;
                                float _2862 = (0.5 / (((_2851 * ((_2834 * _2852) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2851 * _2852) + _2819) * _2834))) * _2851;
                                float _3742 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                                float _2872 = (_2797 * _2774) * (((_2820 * 3.1415927410125732421875) * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) / ((_2842 * _2842) * ((_2787 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2798 * _2643.z;
                                frontier_phi_73_pred_1 = _2798 * _2643.y;
                                frontier_phi_73_pred_2 = _2798 * _2643.x;
                                frontier_phi_73_pred_3 = _2872 * _2655.z;
                                frontier_phi_73_pred_4 = _2872 * _2655.y;
                                frontier_phi_73_pred_5 = _2872 * _2655.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2881 = frontier_phi_73_pred;
                            _2880 = frontier_phi_73_pred_1;
                            _2879 = frontier_phi_73_pred_2;
                            _2878 = frontier_phi_73_pred_3;
                            _2877 = frontier_phi_73_pred_4;
                            _2876 = frontier_phi_73_pred_5;
                            _2585 = _2879 + _2598;
                            _2586 = _2880 + _2599;
                            _2587 = _2881 + _2600;
                            _2582 = _2876 + _2595;
                            _2583 = _2877 + _2596;
                            _2584 = _2878 + _2597;
                            if (_2602 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2595 = _2582;
                                _2596 = _2583;
                                _2597 = _2584;
                                _2598 = _2585;
                                _2599 = _2586;
                                _2600 = _2587;
                                _2601 = _2602;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2587;
                        frontier_phi_67_pred_1 = _2586;
                        frontier_phi_67_pred_2 = _2585;
                        frontier_phi_67_pred_3 = _2584;
                        frontier_phi_67_pred_4 = _2583;
                        frontier_phi_67_pred_5 = _2582;
                    }
                    _2182 = frontier_phi_67_pred;
                    _2180 = frontier_phi_67_pred_1;
                    _2178 = frontier_phi_67_pred_2;
                    _2176 = frontier_phi_67_pred_3;
                    _2174 = frontier_phi_67_pred_4;
                    _2172 = frontier_phi_67_pred_5;
                    uint _2368 = _2367 + 1u;
                    if (_2368 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2361 = _2172;
                        _2362 = _2174;
                        _2363 = _2176;
                        _2364 = _2178;
                        _2365 = _2180;
                        _2366 = _2182;
                        _2367 = _2368;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2178;
                frontier_phi_49_50_ladder_1 = _2182;
                frontier_phi_49_50_ladder_2 = _2180;
                frontier_phi_49_50_ladder_3 = _2176;
                frontier_phi_49_50_ladder_4 = _2174;
                frontier_phi_49_50_ladder_5 = _2172;
            }
            else
            {
                frontier_phi_49_50_ladder = _2033;
                frontier_phi_49_50_ladder_1 = _2037;
                frontier_phi_49_50_ladder_2 = _2035;
                frontier_phi_49_50_ladder_3 = _2031;
                frontier_phi_49_50_ladder_4 = _2029;
                frontier_phi_49_50_ladder_5 = _2027;
            }
            _2171 = frontier_phi_49_50_ladder_5;
            _2173 = frontier_phi_49_50_ladder_4;
            _2175 = frontier_phi_49_50_ladder_3;
            _2177 = frontier_phi_49_50_ladder;
            _2179 = frontier_phi_49_50_ladder_2;
            _2181 = frontier_phi_49_50_ladder_1;
        }
        float _2186 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
        _1949 = (_2186 * _2177) + _1679;
        _1951 = (_2186 * _2179) + _1680;
        _1953 = (_2186 * _2181) + _1681;
        _1955 = ((_2171 * 0.039999999105930328369140625) * _2186) + _1832;
        _1957 = ((_2173 * 0.039999999105930328369140625) * _2186) + _1833;
        _1959 = ((_2175 * 0.039999999105930328369140625) * _2186) + _1834;
    }
    else
    {
        _1949 = _1679;
        _1951 = _1680;
        _1953 = _1681;
        _1955 = _1832;
        _1957 = _1833;
        _1959 = _1834;
    }
    float _3758 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3769 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3780 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _1976 = ((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1949 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _584))) + ((_1955 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1390)) * cbPerFrame._m0[3u].x);
    float _1977 = ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1951 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _584))) + ((_1957 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1390)) * cbPerFrame._m0[3u].x);
    float _1978 = ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1953 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _584))) + ((_1959 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1390)) * cbPerFrame._m0[3u].x);
    uint _1982 = _558 + 6u;
    float _1990 = _517 / cbSceneParam._m0[86u].x;
    float _1991 = _518 / cbSceneParam._m0[86u].y;
    vec4 _2005 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1990, _1991, (log2((isnan(cbSceneParam._m0[77u].w) ? _504 : (isnan(_504) ? cbSceneParam._m0[77u].w : min(_504, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2007 = _2005.x;
    float _2008 = _2005.y;
    float _2009 = _2005.z;
    float _2010 = _2005.w;
    float _2090;
    float _2092;
    float _2094;
    float _2096;
    if (_504 > cbSceneParam._m0[78u].w)
    {
        float _2052 = isnan(_504) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _504 : min(cbSceneParam._m0[80u].w, _504));
        float _2053 = _2052 / _504;
        float _2064 = _2053 * _255;
        float _2065 = _256 * _2053;
        float _2066 = (-0.0) - _2065;
        float _2067 = _2053 * _257;
        float _2069 = (cbSceneParam._m0[77u].w * _2066) / _2052;
        float _2070 = _2069 + cbSceneParam._m0[79u].w;
        float _2071 = cbSceneParam._m0[79u].w - _2065;
        float _2077 = sqrt(((_2064 * _2064) + (_2065 * _2065)) + (_2067 * _2067));
        float _2080 = (1.0 - (cbSceneParam._m0[77u].w / _2052)) * _2077;
        float _2086 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2088 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2297;
        if (abs((_2066 - _2069) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2297 = ((((_2070 > 0.0) ? exp2(_2086 * _2070) : (2.0 - exp2(_2088 * _2070))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2080;
        }
        else
        {
            float _2232 = 1.0 / cbSceneParam._m0[80u].x;
            float _2233 = isnan(_2071) ? _2070 : (isnan(_2070) ? _2071 : max(_2070, _2071));
            float _2234 = isnan(_2071) ? _2070 : (isnan(_2070) ? _2071 : min(_2070, _2071));
            float _2243 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : min(_2233, 0.0));
            float _2244 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : min(_2234, 0.0));
            _2297 = ((abs(_2077 / _2066) * cbSceneParam._m0[80u].y) * ((((_2243 - _2244) * 2.0) - ((exp2(_2086 * (isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0)))) - exp2(_2086 * (isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0))))) * _2232)) - ((exp2(_2088 * _2243) - exp2(_2088 * _2244)) * _2232))) + (_2080 * cbSceneParam._m0[80u].z);
        }
        vec4 _2299 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1990, _1991, 1.0), 0.0);
        float _2308 = exp2((_2297 * (-1.44269502162933349609375)) * (1.0 - _2299.w));
        float _2309 = log2(_2308);
        float _2325 = log2(_2010);
        _2090 = (exp2(_2325 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2309 * cbSceneParam._m0[78u].x)) * _2299.x) / cbSceneParam._m0[78u].x)) + _2007;
        _2092 = (exp2(_2325 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2309 * cbSceneParam._m0[78u].y)) * _2299.y) / cbSceneParam._m0[78u].y)) + _2008;
        _2094 = (exp2(_2325 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2309 * cbSceneParam._m0[78u].z)) * _2299.z) / cbSceneParam._m0[78u].z)) + _2009;
        _2096 = _2308 * _2010;
    }
    else
    {
        _2090 = _2007;
        _2092 = _2008;
        _2094 = _2009;
        _2096 = _2010;
    }
    float _2108 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2109 = _2108 == 3.0;
    float _2110 = log2(_2096);
    float _2117 = exp2(_2110 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)));
    float _2118 = exp2(_2110 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)));
    float _2119 = exp2(_2110 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)));
    float _2128 = (_2108 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2128 * (_2109 ? _2117 : (_2117 + (cbSceneParam._m0[72u].w * _2090)));
    SV_Target.y = _2128 * (_2109 ? _2118 : (_2118 + (cbSceneParam._m0[72u].w * _2092)));
    SV_Target.z = _2128 * (_2109 ? _2119 : (_2119 + (cbSceneParam._m0[72u].w * _2094)));
    SV_Target.w = cbInstanceData._m0[_1982].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1982].w;
}


