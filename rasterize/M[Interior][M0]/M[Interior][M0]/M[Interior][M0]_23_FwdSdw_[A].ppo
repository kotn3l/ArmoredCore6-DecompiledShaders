#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _430;
float _3503;
float _3504;
float _3505;
float _3506;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _345 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _349 = _345.z;
    float _353 = (_345.x * 2.0) + (-1.0);
    float _355 = (_345.y * 2.0) + (-1.0);
    float _361 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _368 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _377 = cbMtdParam._m0[23u].x + _265;
    float _378 = cbMtdParam._m0[23u].y + _266;
    float _379 = cbMtdParam._m0[23u].z + _267;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_361 * _194, _361 * _195, _361 * _196));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_368 * _208, _368 * _209, _368 * _210));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _399 * _395;
    float _405 = ((cbMtdParam._m0[19u].w * _393) * _399) + (_353 * cbMtdParam._m0[20u].y);
    float _406 = ((cbMtdParam._m0[20u].x * _394) * _399) + (_355 * cbMtdParam._m0[20u].z);
    float _409 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _410 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _428;
    float _431;
    float _433;
    if (_405 > 0.0)
    {
        float _414 = (1.0 - _409) / _405;
        _428 = _414;
        _431 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_414 * _400)) * 0.16666667163372039794921875;
        _433 = (fract((_414 * _406) + _410) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_405 < 0.0)
        {
            float _429 = ((-0.0) - _409) / _405;
            frontier_phi_3_2_ladder = (fract(_429 * _400) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _429;
            frontier_phi_3_2_ladder_2 = (fract((_429 * _406) + _410) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _430;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _428 = frontier_phi_3_2_ladder_1;
        _431 = frontier_phi_3_2_ladder;
        _433 = frontier_phi_3_2_ladder_2;
    }
    float _459;
    float _461;
    float _463;
    if (_406 > 0.0)
    {
        float _446 = (1.0 - _410) / _406;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_446 < _428)
        {
            frontier_phi_8_5_ladder = (fract(_446 * _400) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_446 * _405) + _409) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _446;
        }
        else
        {
            frontier_phi_8_5_ladder = _433;
            frontier_phi_8_5_ladder_1 = _431;
            frontier_phi_8_5_ladder_2 = _428;
        }
        _459 = frontier_phi_8_5_ladder_2;
        _461 = frontier_phi_8_5_ladder_1;
        _463 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_406 < 0.0)
        {
            float _460 = ((-0.0) - _410) / _406;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_460 < _428)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_460 * _400) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_460 * _405) + _409) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _460;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _433;
                frontier_phi_8_6_ladder_9_ladder_1 = _431;
                frontier_phi_8_6_ladder_9_ladder_2 = _428;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _433;
            frontier_phi_8_6_ladder_1 = _431;
            frontier_phi_8_6_ladder_2 = _428;
        }
        _459 = frontier_phi_8_6_ladder_2;
        _461 = frontier_phi_8_6_ladder_1;
        _463 = frontier_phi_8_6_ladder;
    }
    float _467 = (_400 > 0.0) ? (cbMtdParam._m0[16u].w / _400) : 5000.0;
    float _480;
    float _481;
    if (_467 < _459)
    {
        _480 = ((_409 + cbMtdParam._m0[17u].x) + (_467 * _405)) * 0.16666667163372039794921875;
        _481 = (((_467 * _406) + _410) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _480 = _461;
        _481 = _463;
    }
    vec4 _483 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_480, _481));
    float _488 = _483.x * cbMtdParam._m0[13u].x;
    float _489 = _483.y * cbMtdParam._m0[13u].y;
    float _490 = _483.z * cbMtdParam._m0[13u].z;
    vec4 _508 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _512 = _508.z;
    float _515 = (_508.x * 2.0) + (-1.0);
    float _516 = (_508.y * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3515 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))));
    float _523 = _512 * _292;
    float _533 = (cbMtdParam._m0[15u].w * ((_349 - _523) + ((_512 - _349) * _292))) + _523;
    float _541 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _292))) + _515;
    float _542 = (cbMtdParam._m0[16u].x * (_355 - (_355 * _292))) + _516;
    float _545 = fma(_522, _201, fma(_542, _208, _541 * _194));
    float _548 = fma(_522, _202, fma(_542, _209, _541 * _195));
    float _551 = fma(_522, _203, fma(_542, _210, _541 * _196));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3526 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _559 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3548 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3559 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _578 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _582 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _583 = _265 * _582;
    float _584 = _266 * _582;
    float _585 = _267 * _582;
    vec4 _590 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _592 = _590.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _754 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _760 = (cbMatDynParam._m0[5u].x * _754) + cbMatDynParam._m0[5u].y;
        float _3570 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _765 = (cbMatDynParam._m0[5u].z * _754) + cbMatDynParam._m0[5u].w;
        float _3581 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) - _761)) + _761) < ((_592 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _610 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _611 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _630 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _633 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _636 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _649 = uint(roundEven(NORMAL.w)) * 13u;
    uint _650 = _649 + 9u;
    uint _651 = _650 + uint(cbMatDynParam._m0[0u].w);
    float _657 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_651].x;
    float _658 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_651].y;
    float _659 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_651].z;
    float _3592 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    vec4 _671 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _610, cbSceneParam._m0[86u].y * _611));
    float _674 = _671.x * TEXCOORD.z;
    float _675 = dot(vec3(_556, _557, _558), vec3(_583, _584, _585));
    float _678 = _675 * 2.0;
    float _682 = (_678 * _556) - _583;
    float _683 = (_678 * _557) - _584;
    float _684 = (_678 * _558) - _585;
    float _688 = abs(dot(vec3(_583, _584, _585), vec3(_556, _557, _558)));
    float _3625 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _690 = sqrt(_559);
    float _703 = exp2((_690 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_690 * 3.0));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _799 = fma(_743, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735));
        float _803 = fma(_743, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735));
        float _807 = fma(_743, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735));
        float _831 = _735 + _556;
        float _832 = _739 + _557;
        float _833 = _743 + _558;
        float _843 = fma(_833, cbModelParam._m0[26u].z, fma(_832, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831)) - _799;
        float _844 = fma(_833, cbModelParam._m0[27u].z, fma(_832, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831)) - _803;
        float _845 = fma(_833, cbModelParam._m0[28u].z, fma(_832, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831)) - _807;
        float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
        float _862 = ((_849 * _843) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_799 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_849 * _844) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_803 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_849 * _845) / cbModelParam._m0[34u].z) + ((((((_807 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        float _901 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_867.x + (-0.5));
        float _903 = _901 * (_867.y + (-0.5));
        float _904 = _901 * (_867.z + (-0.5));
        float _911 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_874.x + (-0.5));
        float _913 = _911 * (_874.y + (-0.5));
        float _914 = _911 * (_874.z + (-0.5));
        float _921 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_881.x + (-0.5));
        float _923 = _921 * (_881.y + (-0.5));
        float _924 = _921 * (_881.z + (-0.5));
        float _931 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_888.x + (-0.5));
        float _933 = _931 * (_888.y + (-0.5));
        float _934 = _931 * (_888.z + (-0.5));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = _902 * 0.5;
        float _939 = _912 * 0.5;
        float _940 = _922 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _955 = (dot(vec3(_556, _557, _558), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _965 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3673 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_967 + 1.0))) + _972) * _935;
        float _982 = _903 * 0.5;
        float _983 = _913 * 0.5;
        float _984 = _923 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_556, _557, _558), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3706 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1009 + 1.0))) + _1014) * _936;
        float _1024 = _904 * 0.5;
        float _1025 = _914 * 0.5;
        float _1026 = _924 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_556, _557, _558), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3739 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1051 + 1.0))) + _1056) * _937;
        _1073 = _904;
        _1074 = _903;
        _1075 = _902;
        _1076 = _914;
        _1077 = _913;
        _1078 = _912;
        _1079 = _924;
        _1080 = _923;
        _1081 = _922;
        _1082 = _937;
        _1083 = _936;
        _1084 = _935;
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
    }
    else
    {
        _1073 = _430;
        _1074 = _430;
        _1075 = _430;
        _1076 = _430;
        _1077 = _430;
        _1078 = _430;
        _1079 = _430;
        _1080 = _430;
        _1081 = _430;
        _1082 = _430;
        _1083 = _430;
        _1084 = _430;
        _1085 = 0.0;
        _1086 = 0.0;
        _1087 = 0.0;
    }
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1116 = fma(_743, cbModelParam._m0[30u].z, fma(_739, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _735));
        float _1120 = fma(_743, cbModelParam._m0[31u].z, fma(_739, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _735));
        float _1124 = fma(_743, cbModelParam._m0[32u].z, fma(_739, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _735));
        float _1147 = _735 + _556;
        float _1148 = _739 + _557;
        float _1149 = _743 + _558;
        float _1159 = fma(_1149, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1147)) - _1116;
        float _1160 = fma(_1149, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1147)) - _1120;
        float _1161 = fma(_1149, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1147)) - _1124;
        float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
        float _1178 = ((_1165 * _1159) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1116 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1165 * _1160) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1120 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1165 * _1161) / cbModelParam._m0[35u].z) + ((((((_1124 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        float _1215 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1182.x + (-0.5));
        float _1217 = _1215 * (_1182.y + (-0.5));
        float _1218 = _1215 * (_1182.z + (-0.5));
        float _1225 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1189.x + (-0.5));
        float _1227 = _1225 * (_1189.y + (-0.5));
        float _1228 = _1225 * (_1189.z + (-0.5));
        float _1235 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1196.x + (-0.5));
        float _1237 = _1235 * (_1196.y + (-0.5));
        float _1238 = _1235 * (_1196.z + (-0.5));
        float _1245 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1203.x + (-0.5));
        float _1247 = _1245 * (_1203.y + (-0.5));
        float _1248 = _1245 * (_1203.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_556, _557, _558), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3802 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1279 + 1.0))) + _1284) * _1249;
        float _1294 = _1217 * 0.5;
        float _1295 = _1227 * 0.5;
        float _1296 = _1237 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_556, _557, _558), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3835 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1321 + 1.0))) + _1326) * _1250;
        float _1336 = _1218 * 0.5;
        float _1337 = _1228 * 0.5;
        float _1338 = _1238 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_556, _557, _558), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3868 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1363 + 1.0))) + _1368) * _1251;
        _1385 = _1218;
        _1386 = _1217;
        _1387 = _1216;
        _1388 = _1228;
        _1389 = _1227;
        _1390 = _1226;
        _1391 = _1238;
        _1392 = _1237;
        _1393 = _1236;
        _1394 = _1251;
        _1395 = _1250;
        _1396 = _1249;
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
    }
    else
    {
        _1385 = _430;
        _1386 = _430;
        _1387 = _430;
        _1388 = _430;
        _1389 = _430;
        _1390 = _430;
        _1391 = _430;
        _1392 = _430;
        _1393 = _430;
        _1394 = _430;
        _1395 = _430;
        _1396 = _430;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1085)) + _1085;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1086)) + _1086;
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1087)) + _1087;
    float _1432 = fma(_1411, cbSceneParam._m0[89u].z, fma(_1410, cbSceneParam._m0[89u].y, _1409 * cbSceneParam._m0[89u].x));
    float _1435 = fma(_1411, cbSceneParam._m0[90u].z, fma(_1410, cbSceneParam._m0[90u].y, _1409 * cbSceneParam._m0[90u].x));
    float _1438 = fma(_1411, cbSceneParam._m0[91u].z, fma(_1410, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1409));
    float _1453 = _682 * 0.5;
    float _1454 = _683 * 0.5;
    float _1455 = _684 * 0.5;
    float _1456 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1459 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1462 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1496;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1469 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1473 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1477 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1484 = dot(vec4(cbModelParam._m0[39u]), vec4(_1453, _1454, _1455, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1507;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1498 = dot(vec4(cbModelParam._m0[40u]), vec4(_1453, _1454, _1455, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1511 = (_1507 * cbModelParam._m0[1u].x) + (_1496 * (1.0 - cbModelParam._m0[1u].x));
    float _1521 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1521 : min(cbModelParam._m0[25u].z, _1521));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1570 = fma(_743, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735)) + cbModelParam._m0[13u].w;
        float _1574 = fma(_743, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735)) + cbModelParam._m0[14u].w;
        float _1578 = fma(_743, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735)) + cbModelParam._m0[15u].w;
        float _1581 = fma(_684, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _682));
        float _1584 = fma(_684, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _682));
        float _1587 = fma(_684, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _682));
        float _1615;
        if (_1581 > 0.0)
        {
            _1615 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1615 = frontier_phi_29_27_ladder;
        }
        float _1786;
        if (_1584 > 0.0)
        {
            _1786 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1786 = frontier_phi_38_34_ladder;
        }
        float _2231;
        if (_1587 > 0.0)
        {
            _2231 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2231 = frontier_phi_50_45_ladder;
        }
        float _2233 = isnan(_1786) ? _1615 : (isnan(_1615) ? _1786 : min(_1615, _1786));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1581) + _1570;
        float _2239 = (_2234 * _1584) + _1574;
        float _2240 = (_2234 * _1587) + _1578;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2241;
        float _2245 = _2241 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 > _2245) || ((_2239 < _2243) || ((_2238 < _2243) || (_2238 > _2245))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2240, cbModelParam._m0[9u].z, fma(_2239, cbModelParam._m0[9u].y, _2238 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2240, cbModelParam._m0[10u].z, fma(_2239, cbModelParam._m0[10u].y, _2238 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2240, cbModelParam._m0[11u].z, fma(_2239, cbModelParam._m0[11u].y, _2238 * cbModelParam._m0[11u].x))), _1522);
            frontier_phi_28_50_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1603 = frontier_phi_28_50_ladder_2;
        _1605 = frontier_phi_28_50_ladder_1;
        _1607 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_682, _683, _684), _1522);
        _1603 = _1591.x * cbModelParam._m0[1u].y;
        _1605 = _1591.y * cbModelParam._m0[1u].y;
        _1607 = _1591.z * cbModelParam._m0[1u].y;
    }
    float _1611 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1611 : min(cbModelParam._m0[25u].w, _1611));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1667 = fma(_743, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735)) + cbModelParam._m0[21u].w;
        float _1671 = fma(_743, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735)) + cbModelParam._m0[22u].w;
        float _1675 = fma(_743, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735)) + cbModelParam._m0[23u].w;
        float _1678 = fma(_684, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _682));
        float _1681 = fma(_684, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _682));
        float _1684 = fma(_684, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _682));
        float _1791;
        if (_1678 > 0.0)
        {
            _1791 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1791 = frontier_phi_40_36_ladder;
        }
        float _2258;
        if (_1681 > 0.0)
        {
            _2258 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2258 = frontier_phi_52_47_ladder;
        }
        float _2619;
        if (_1684 > 0.0)
        {
            _2619 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2619 = frontier_phi_64_59_ladder;
        }
        float _2621 = isnan(_2258) ? _1791 : (isnan(_1791) ? _2258 : min(_1791, _2258));
        float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
        float _2626 = (_2622 * _1678) + _1667;
        float _2627 = (_2622 * _1681) + _1671;
        float _2628 = (_2622 * _1684) + _1675;
        float _2629 = _2622 * 9.9999997473787516355514526367188e-05;
        float _2630 = (-1.0) - _2629;
        float _2632 = _2629 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2628 > _2632) || ((_2628 < _2630) || ((_2627 > _2632) || ((_2627 < _2630) || ((_2626 < _2630) || (_2626 > _2632))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2628, cbModelParam._m0[17u].z, fma(_2627, cbModelParam._m0[17u].y, _2626 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2628, cbModelParam._m0[18u].z, fma(_2627, cbModelParam._m0[18u].y, _2626 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2628, cbModelParam._m0[19u].z, fma(_2627, cbModelParam._m0[19u].y, _2626 * cbModelParam._m0[19u].x))), _1612);
            frontier_phi_37_64_ladder = _2765.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2765.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2765.x * cbModelParam._m0[1u].z;
        }
        _1703 = frontier_phi_37_64_ladder_2;
        _1705 = frontier_phi_37_64_ladder_1;
        _1707 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_682, _683, _684), _1612);
        _1703 = _1687.x * cbModelParam._m0[1u].z;
        _1705 = _1687.y * cbModelParam._m0[1u].z;
        _1707 = _1687.z * cbModelParam._m0[1u].z;
    }
    float _1719 = ((((1.0 - _703) * ((_690 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_703 * _690)) * _674;
    float _1720 = _1719 * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1721 = _1719 * ((cbModelParam._m0[1u].w * (_1705 - _1605)) + _1605);
    float _1722 = _1719 * ((cbModelParam._m0[1u].w * (_1707 - _1607)) + _1607);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, _1720 * cbSceneParam._m0[91u].x));
    float _1765 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1778 = _1765 / _1777;
    float _1779 = _1769 / _1777;
    float _1780 = _1773 / _1777;
    float _1927;
    float _1928;
    float _1929;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1807 = ((uint(_1780 > cbSceneParam._m0[59u].y) + uint(_1780 > cbSceneParam._m0[59u].x)) + uint(_1780 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1808 = _1807 + 43u;
        uint _1816 = _1807 + 44u;
        uint _1824 = _1807 + 45u;
        uint _1832 = _1807 + 46u;
        float _1843 = fma(_1777, cbSceneParam._m0[_1808].w, fma(_1773, cbSceneParam._m0[_1808].z, fma(_1769, cbSceneParam._m0[_1808].y, _1765 * cbSceneParam._m0[_1808].x)));
        float _1847 = fma(_1777, cbSceneParam._m0[_1816].w, fma(_1773, cbSceneParam._m0[_1816].z, fma(_1769, cbSceneParam._m0[_1816].y, _1765 * cbSceneParam._m0[_1816].x)));
        float _1855 = fma(_1777, cbSceneParam._m0[_1832].w, fma(_1773, cbSceneParam._m0[_1832].z, fma(_1769, cbSceneParam._m0[_1832].y, _1765 * cbSceneParam._m0[_1832].x)));
        float _1860 = cbSceneParam._m0[33u].z * _1855;
        float _1862 = cbSceneParam._m0[33u].w * _1855;
        float _1865 = fma(_1777, cbSceneParam._m0[_1824].w, fma(_1773, cbSceneParam._m0[_1824].z, fma(_1769, cbSceneParam._m0[_1824].y, _1765 * cbSceneParam._m0[_1824].x))) / _1855;
        float _1913 = (cbSceneParam._m0[33u].x - sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780))) * cbSceneParam._m0[33u].y;
        float _3994 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1920 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 + _1843) / _1855, (_1862 + _1847) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 + _1843) / _1855, (_1847 - _1860) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 - _1860) / _1855, (_1847 - _1862) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 - _1862) / _1855, (_1860 + _1847) / _1855), _1865), 0.0)).x), vec4(0.25)));
        _1927 = 1.0 - (_1920 * cbSceneParam._m0[34u].x);
        _1928 = 1.0 - (_1920 * cbSceneParam._m0[34u].y);
        _1929 = 1.0 - (_1920 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1927 = 1.0;
        _1928 = 1.0;
        _1929 = 1.0;
    }
    float _1993;
    float _1995;
    float _1997;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1981 = fma(_1777, cbSceneParam._m0[63u].w, fma(_1773, cbSceneParam._m0[63u].z, fma(_1769, cbSceneParam._m0[63u].y, _1765 * cbSceneParam._m0[63u].x)));
        float _1982 = fma(_1777, cbSceneParam._m0[60u].w, fma(_1773, cbSceneParam._m0[60u].z, fma(_1769, cbSceneParam._m0[60u].y, _1765 * cbSceneParam._m0[60u].x))) / _1981;
        float _1983 = fma(_1777, cbSceneParam._m0[61u].w, fma(_1773, cbSceneParam._m0[61u].z, fma(_1769, cbSceneParam._m0[61u].y, _1765 * cbSceneParam._m0[61u].x))) / _1981;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1982 >= cbSceneParam._m0[64u].x) && (_1983 >= cbSceneParam._m0[64u].y)) && (_1982 <= cbSceneParam._m0[64u].z)) && (_1983 <= cbSceneParam._m0[64u].w))
        {
            float _2271 = fma(_1777, cbSceneParam._m0[62u].w, fma(_1773, cbSceneParam._m0[62u].z, fma(_1769, cbSceneParam._m0[62u].y, _1765 * cbSceneParam._m0[62u].x))) / _1981;
            float _2275 = isnan(cbSceneParam._m0[41u].w) ? _2271 : (isnan(_2271) ? cbSceneParam._m0[41u].w : max(_2271, cbSceneParam._m0[41u].w));
            float _2318 = (cbSceneParam._m0[33u].x - sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780))) * cbSceneParam._m0[33u].y;
            float _4010 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
            float _2325 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1982, cbSceneParam._m0[33u].w + _1983), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1982, _1983 - cbSceneParam._m0[33u].z), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1982 - cbSceneParam._m0[33u].z, _1983 - cbSceneParam._m0[33u].w), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1982 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1983), _2275), 0.0)).x), vec4(0.25)));
            float _2329 = 1.0 - (_2325 * cbSceneParam._m0[34u].x);
            float _2330 = 1.0 - (_2325 * cbSceneParam._m0[34u].y);
            float _2331 = 1.0 - (_2325 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2331) ? _1929 : (isnan(_1929) ? _2331 : min(_1929, _2331));
            frontier_phi_49_48_ladder_1 = isnan(_2330) ? _1928 : (isnan(_1928) ? _2330 : min(_1928, _2330));
            frontier_phi_49_48_ladder_2 = isnan(_2329) ? _1927 : (isnan(_1927) ? _2329 : min(_1927, _2329));
        }
        else
        {
            frontier_phi_49_48_ladder = _1929;
            frontier_phi_49_48_ladder_1 = _1928;
            frontier_phi_49_48_ladder_2 = _1927;
        }
        _1993 = frontier_phi_49_48_ladder_2;
        _1995 = frontier_phi_49_48_ladder_1;
        _1997 = frontier_phi_49_48_ladder;
    }
    else
    {
        _1993 = _1927;
        _1995 = _1928;
        _1997 = _1929;
    }
    uvec4 _2002 = floatBitsToUint(cbInstanceData._m0[_649 + 5u]);
    uint _2004 = _2002.x * 14u;
    uint _2005 = _2004 + 13u;
    float _2010 = _674 + (-1.0);
    float _2013 = (cbLight._m0[_2005].x * _2010) + 1.0;
    float _2014 = (cbLight._m0[_2005].y * _2010) + 1.0;
    uint _2015 = _2004 + 5u;
    float _2021 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2025 = _2004 + 4u;
    float _2035 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2039 = _2004 | 1u;
    float _2050 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_556, _557, _558));
    float _2053 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_556, _557, _558));
    float _4046 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _4057 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2058 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _2060 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _2067 = ((cbLight._m0[_2015].x * _2021) * _2060) + (((cbLight._m0[_2025].x * _1993) * _2035) * _2058);
    float _2068 = ((_2021 * cbLight._m0[_2015].y) * _2060) + (((cbLight._m0[_2025].y * _1995) * _2035) * _2058);
    float _2069 = ((_2021 * cbLight._m0[_2015].z) * _2060) + (((cbLight._m0[_2025].z * _1997) * _2035) * _2058);
    uint _2071 = _2004 + 8u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _559) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_2004].x + _583;
    float _2087 = cbLight._m0[_2004].y + _584;
    float _2088 = cbLight._m0[_2004].z + _585;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2004].xyz));
    float _4068 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _2100 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _2101 = dot(vec3(_556, _557, _558), vec3(_2093, _2094, _2095));
    float _4090 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2093, _2094, _2095));
    float _4101 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2085 * _2085;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2125 = 1.0 - _2085;
    float _2136 = (0.5 / (((_2100 * ((_2099 * _2125) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2125) + _2085) * _2099))) * _2099;
    float _4112 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2138 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    uint _2152 = _2004 + 9u;
    float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _559) * 0.949999988079071044921875);
    float _2164 = _2163 * _2163;
    float _2165 = cbLight._m0[_2039].x + _583;
    float _2166 = cbLight._m0[_2039].y + _584;
    float _2167 = cbLight._m0[_2039].z + _585;
    float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
    float _2172 = _2171 * _2165;
    float _2173 = _2171 * _2166;
    float _2174 = _2171 * _2167;
    float _2175 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2039].xyz));
    float _4123 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2179 = dot(vec3(_556, _557, _558), vec3(_2172, _2173, _2174));
    float _4134 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2172, _2173, _2174));
    float _4145 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2164 * _2164;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2200 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2201 = 1.0 - _2164;
    float _2211 = (0.5 / (((_2100 * ((_2178 * _2201) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2201) + _2164) * _2178))) * _2178;
    float _4156 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    float _2223 = (((_2200 * cbLight._m0[_2152].x) * _2213) * _2021) + ((((cbLight._m0[_2071].x * _1993) * _2124) * _2138) * _2035);
    float _2224 = (((_2200 * cbLight._m0[_2152].y) * _2213) * _2021) + ((((cbLight._m0[_2071].y * _1995) * _2124) * _2138) * _2035);
    float _2225 = (((_2200 * cbLight._m0[_2152].z) * _2213) * _2021) + ((((cbLight._m0[_2071].z * _1997) * _2124) * _2138) * _2035);
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_2002.y == 0u)
    {
        uvec4 _2343 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2344 = _2343.x;
        uint _2355 = uint((float(_2343.y) * floor(float(uint(cbSceneParam._m0[85u].y * _611) / _2344))) + floor(float(uint(cbSceneParam._m0[85u].x * _610) / _2344)));
        float _2365 = (log2(_1780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2366 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        uint _2369 = uint(isnan(14.0) ? _2366 : (isnan(_2366) ? 14.0 : min(_2366, 14.0)));
        uvec4 _2374 = texelFetch(g_lightClusterGridBuffer, int(((_2369 << 2u) + (_2355 << 6u)) >> 2u));
        uint _2375 = _2374.x;
        uint _2376 = _2343.z;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        if (((((1u << ((_2376 >> 4u) & 15u)) + 4294967295u) & _2375) == 0u) || ((_2376 & 240u) == 0u))
        {
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
        }
        else
        {
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            uint _2683 = 0u;
            uint _2692;
            bool _2693;
            for (;;)
            {
                _2692 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                _2693 = _2692 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2693)
                {
                    frontier_phi_75_pred = _2680;
                    frontier_phi_75_pred_1 = _2682;
                    frontier_phi_75_pred_2 = _2681;
                    frontier_phi_75_pred_3 = _2679;
                    frontier_phi_75_pred_4 = _2678;
                    frontier_phi_75_pred_5 = _2677;
                }
                else
                {
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    uint _2849;
                    _2843 = _2677;
                    _2844 = _2678;
                    _2845 = _2679;
                    _2846 = _2680;
                    _2847 = _2681;
                    _2848 = _2682;
                    _2849 = _2692;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    for (;;)
                    {
                        uint _2853 = uint(findLSB(_2849)) + (_2683 << 5u);
                        uint _2850 = (_2849 + 4294967295u) & _2849;
                        uint _2855 = _2853 * 48u;
                        vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 3u)).x));
                        uint _2875 = (_2853 * 48u) + 4u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2894 = (_2853 * 48u) + 8u;
                        vec3 _2905 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x));
                        float _2909 = _2869.x - _1778;
                        float _2910 = _2869.y - _1779;
                        float _2911 = _2869.z - _1780;
                        float _2912 = dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911));
                        float _2915 = inversesqrt(_2912);
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2919 = dot(vec3(_630, _633, _636), vec3(_2916, _2917, _2918));
                        float _2924 = 1.0 - (_2912 * _2869.w);
                        float _4177 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2925 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2926 = sqrt(_2912) * _2888.w;
                        float _2929 = 1.39999997615814208984375 / (_2926 + 1.39999997615814208984375);
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2919) + _2930;
                        float _2936 = _2926 * _2926;
                        float _2940 = ((isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))) * _2925) / ((_2936 * 0.699999988079071044921875) + 1.0);
                        float _2944 = (-0.0) - _1778;
                        float _2945 = (-0.0) - _1779;
                        float _2946 = (-0.0) - _1780;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2960 = exp2(log2(1.0 / ((_2936 * 3.5) + 5.0)) * 0.25);
                        float _2961 = 1.0 - _690;
                        float _2968 = sqrt(1.0 - ((1.0 - (_2961 * _2961)) * (1.0 - (_2960 * _2960))));
                        float _2969 = _2968 * _2968;
                        float _2970 = _2969 * _2969;
                        float _2971 = _2951 + _2916;
                        float _2972 = _2952 + _2917;
                        float _2973 = _2953 + _2918;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2981 = dot(vec3(_630, _633, _636), vec3(_2951, _2952, _2953));
                        float _4193 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2984 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2985 = dot(vec3(_630, _633, _636), vec3(_2977 * _2971, _2977 * _2972, _2977 * _2973));
                        float _4204 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2988 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2992 = ((_2988 * _2988) * (_2970 + (-1.0))) + 1.0;
                        float _2993 = _2929 * _2969;
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2919) + _2994;
                        float _4215 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2999 = 1.0 - _2969;
                        float _3009 = (0.5 / (((_2998 * ((_2984 * _2999) + _2969)) + 9.9999999392252902907785028219223e-09) + (((_2998 * _2999) + _2969) * _2984))) * _2998;
                        float _4226 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3020 = (((_2970 * 3.1415927410125732421875) * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) / ((_2992 * _2992) * ((_2936 * 2.1991131305694580078125) + 3.141590118408203125))) * _2925;
                        _2773 = (_2940 * _2888.x) + _2846;
                        _2774 = (_2940 * _2888.y) + _2847;
                        _2775 = (_2940 * _2888.z) + _2848;
                        _2770 = (_3020 * _2905.x) + _2843;
                        _2771 = (_3020 * _2905.y) + _2844;
                        _2772 = (_3020 * _2905.z) + _2845;
                        if (_2850 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2843 = _2770;
                            _2844 = _2771;
                            _2845 = _2772;
                            _2846 = _2773;
                            _2847 = _2774;
                            _2848 = _2775;
                            _2849 = _2850;
                        }
                    }
                    frontier_phi_75_pred = _2773;
                    frontier_phi_75_pred_1 = _2775;
                    frontier_phi_75_pred_2 = _2774;
                    frontier_phi_75_pred_3 = _2772;
                    frontier_phi_75_pred_4 = _2771;
                    frontier_phi_75_pred_5 = _2770;
                }
                _2506 = frontier_phi_75_pred;
                _2510 = frontier_phi_75_pred_1;
                _2508 = frontier_phi_75_pred_2;
                _2504 = frontier_phi_75_pred_3;
                _2502 = frontier_phi_75_pred_4;
                _2500 = frontier_phi_75_pred_5;
                uint _2684 = _2683 + 1u;
                if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2677 = _2500;
                    _2678 = _2502;
                    _2679 = _2504;
                    _2680 = _2506;
                    _2681 = _2508;
                    _2682 = _2510;
                    _2683 = _2684;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
        }
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.z;
        uint _2516 = (_2514 >> 8u) & 15u;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((4294967295u << _2516) & _2375) == 0u)
        {
            _2645 = _2499;
            _2647 = _2501;
            _2649 = _2503;
            _2651 = _2505;
            _2653 = _2507;
            _2655 = _2509;
        }
        else
        {
            float _2670 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
            float _2671 = _2670 * _1778;
            float _2672 = _2670 * _1779;
            float _2673 = _2670 * _1780;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2516 < ((_2514 >> 12u) & 15u))
            {
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2826 = _2499;
                float _2827 = _2501;
                float _2828 = _2503;
                float _2829 = _2505;
                float _2830 = _2507;
                float _2831 = _2509;
                uint _2832 = _2516;
                uint _2841;
                bool _2842;
                for (;;)
                {
                    _2841 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                    _2842 = _2841 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2842)
                    {
                        frontier_phi_86_pred = _2831;
                        frontier_phi_86_pred_1 = _2830;
                        frontier_phi_86_pred_2 = _2829;
                        frontier_phi_86_pred_3 = _2828;
                        frontier_phi_86_pred_4 = _2827;
                        frontier_phi_86_pred_5 = _2826;
                    }
                    else
                    {
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3047 = _2826;
                        float _3048 = _2827;
                        float _3049 = _2828;
                        float _3050 = _2829;
                        float _3051 = _2830;
                        float _3052 = _2831;
                        uint _3053 = _2841;
                        uint _3054;
                        vec4 _3079;
                        float _3080;
                        vec4 _3095;
                        vec3 _3107;
                        vec4 _3122;
                        vec4 _3137;
                        float _3183;
                        bool _3184;
                        for (;;)
                        {
                            uint _3064 = ((_2832 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3053));
                            _3054 = (_3053 + 4294967295u) & _3053;
                            uint _3066 = _3064 * 40u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            _3080 = _3079.w;
                            uint _3082 = (_3064 * 40u) + 4u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3064 * 40u) + 8u;
                            _3107 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x));
                            uint _3109 = (_3064 * 40u) + 16u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3124 = (_3064 * 40u) + 20u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3064 * 40u) + 24u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3158 = (_3064 * 40u) + 28u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3183 = fma(_1780, _3171.z, fma(_1779, _3171.y, _3171.x * _1778)) + _3171.w;
                            _3184 = !((fma(_1780, _3152.z, fma(_1779, _3152.y, _3152.x * _1778)) + _3152.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3184)
                            {
                                float _3211 = _3079.x - _1778;
                                float _3212 = _3079.y - _1779;
                                float _3213 = _3079.z - _1780;
                                float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                                float _3217 = inversesqrt(_3214);
                                float _3218 = _3217 * _3211;
                                float _3219 = _3217 * _3212;
                                float _3220 = _3217 * _3213;
                                float _3224 = 1.0 - (_3214 / (_3080 * _3080));
                                float _4237 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3229 = sqrt(_3214) * _3095.w;
                                float _3231 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                                float _3232 = _3231 * _3231;
                                float _3235 = ((1.0 - _3232) * dot(vec3(_3218, _3219, _3220), vec3(_630, _633, _636))) + _3232;
                                float _3238 = _3229 * _3229;
                                float _3242 = (fma(_1780, _3122.z, fma(_1779, _3122.y, _3122.x * _1778)) + _3122.w) / _3183;
                                float _3243 = (fma(_1780, _3137.z, fma(_1779, _3137.y, _3137.x * _1778)) + _3137.w) / _3183;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4253 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3225) / ((_3238 * 0.699999988079071044921875) + 1.0));
                                float _3261 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _690;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3218 - _2671;
                                float _3273 = _3219 - _2672;
                                float _3274 = _3220 - _2673;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_630, _633, _636), vec3((-0.0) - _2671, (-0.0) - _2672, (-0.0) - _2673));
                                float _4264 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3286 = dot(vec3(_630, _633, _636), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4275 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3231 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_630, _633, _636), vec3(_3218, _3219, _3220))) + _3295;
                                float _4286 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4297 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3248 * _3225) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) / ((_3293 * _3293) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3249 * _3095.z;
                                frontier_phi_92_pred_1 = _3249 * _3095.y;
                                frontier_phi_92_pred_2 = _3249 * _3095.x;
                                frontier_phi_92_pred_3 = _3323 * _3107.z;
                                frontier_phi_92_pred_4 = _3323 * _3107.y;
                                frontier_phi_92_pred_5 = _3323 * _3107.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3332 = frontier_phi_92_pred;
                            _3331 = frontier_phi_92_pred_1;
                            _3330 = frontier_phi_92_pred_2;
                            _3329 = frontier_phi_92_pred_3;
                            _3328 = frontier_phi_92_pred_4;
                            _3327 = frontier_phi_92_pred_5;
                            _3037 = _3330 + _3050;
                            _3038 = _3331 + _3051;
                            _3039 = _3332 + _3052;
                            _3034 = _3327 + _3047;
                            _3035 = _3328 + _3048;
                            _3036 = _3329 + _3049;
                            if (_3054 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3054;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3039;
                        frontier_phi_86_pred_1 = _3038;
                        frontier_phi_86_pred_2 = _3037;
                        frontier_phi_86_pred_3 = _3036;
                        frontier_phi_86_pred_4 = _3035;
                        frontier_phi_86_pred_5 = _3034;
                    }
                    _2656 = frontier_phi_86_pred;
                    _2654 = frontier_phi_86_pred_1;
                    _2652 = frontier_phi_86_pred_2;
                    _2650 = frontier_phi_86_pred_3;
                    _2648 = frontier_phi_86_pred_4;
                    _2646 = frontier_phi_86_pred_5;
                    uint _2833 = _2832 + 1u;
                    if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2826 = _2646;
                        _2827 = _2648;
                        _2828 = _2650;
                        _2829 = _2652;
                        _2830 = _2654;
                        _2831 = _2656;
                        _2832 = _2833;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2652;
                frontier_phi_66_67_ladder_1 = _2656;
                frontier_phi_66_67_ladder_2 = _2654;
                frontier_phi_66_67_ladder_3 = _2650;
                frontier_phi_66_67_ladder_4 = _2648;
                frontier_phi_66_67_ladder_5 = _2646;
            }
            else
            {
                frontier_phi_66_67_ladder = _2505;
                frontier_phi_66_67_ladder_1 = _2509;
                frontier_phi_66_67_ladder_2 = _2507;
                frontier_phi_66_67_ladder_3 = _2503;
                frontier_phi_66_67_ladder_4 = _2501;
                frontier_phi_66_67_ladder_5 = _2499;
            }
            _2645 = frontier_phi_66_67_ladder_5;
            _2647 = frontier_phi_66_67_ladder_4;
            _2649 = frontier_phi_66_67_ladder_3;
            _2651 = frontier_phi_66_67_ladder;
            _2653 = frontier_phi_66_67_ladder_2;
            _2655 = frontier_phi_66_67_ladder_1;
        }
        float _2660 = isnan(1.0) ? _674 : (isnan(_674) ? 1.0 : min(_674, 1.0));
        _2388 = (_2660 * _2651) + _2067;
        _2390 = (_2660 * _2653) + _2068;
        _2392 = (_2660 * _2655) + _2069;
        _2394 = ((_2645 * 0.039999999105930328369140625) * _2660) + _2223;
        _2396 = ((_2647 * 0.039999999105930328369140625) * _2660) + _2224;
        _2398 = ((_2649 * 0.039999999105930328369140625) * _2660) + _2225;
    }
    else
    {
        _2388 = _2067;
        _2390 = _2068;
        _2392 = _2069;
        _2394 = _2223;
        _2396 = _2224;
        _2398 = _2225;
    }
    uint _2404 = _650 + uint(cbMatDynParam._m0[0u].w);
    float _4313 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4324 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4335 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _2429 = (((isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2388 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _674))) + ((_2394 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1511)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2404].x * (_488 - (_488 * _292)));
    float _2431 = ((cbInstanceData._m0[_2404].y * (_489 - (_489 * _292))) + ((_2396 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1511)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2390 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _674)));
    float _2433 = ((cbInstanceData._m0[_2404].z * (_490 - (_490 * _292))) + ((_2398 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1511)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2392 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _674)));
    float _2434 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2435 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2436 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    uint _2437 = _649 + 6u;
    float _2445 = _610 / cbSceneParam._m0[86u].x;
    float _2446 = _611 / cbSceneParam._m0[86u].y;
    vec4 _2460 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, (log2((isnan(cbSceneParam._m0[77u].w) ? _578 : (isnan(_578) ? cbSceneParam._m0[77u].w : min(_578, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2462 = _2460.x;
    float _2463 = _2460.y;
    float _2464 = _2460.z;
    float _2465 = _2460.w;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    if (_578 > cbSceneParam._m0[78u].w)
    {
        float _2524 = isnan(_578) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _578 : min(cbSceneParam._m0[80u].w, _578));
        float _2525 = _2524 / _578;
        float _2536 = _2525 * _265;
        float _2537 = _266 * _2525;
        float _2538 = (-0.0) - _2537;
        float _2539 = _2525 * _267;
        float _2541 = (cbSceneParam._m0[77u].w * _2538) / _2524;
        float _2542 = _2541 + cbSceneParam._m0[79u].w;
        float _2543 = cbSceneParam._m0[79u].w - _2537;
        float _2549 = sqrt(((_2536 * _2536) + (_2537 * _2537)) + (_2539 * _2539));
        float _2552 = (1.0 - (cbSceneParam._m0[77u].w / _2524)) * _2549;
        float _2557 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2559 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2783;
        if (abs((_2538 - _2541) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2783 = ((((_2542 > 0.0) ? exp2(_2557 * _2542) : (2.0 - exp2(_2559 * _2542))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2552;
        }
        else
        {
            float _2706 = 1.0 / cbSceneParam._m0[80u].x;
            float _2707 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : max(_2542, _2543));
            float _2708 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : min(_2542, _2543));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            _2783 = ((abs(_2549 / _2538) * cbSceneParam._m0[80u].y) * ((((_2717 - _2718) * 2.0) - ((exp2(_2557 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0)))) - exp2(_2557 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))))) * _2706)) - ((exp2(_2559 * _2717) - exp2(_2559 * _2718)) * _2706))) + (_2552 * cbSceneParam._m0[80u].z);
        }
        vec4 _2785 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, 1.0), 0.0);
        float _2794 = exp2((_2783 * (-1.44269502162933349609375)) * (1.0 - _2785.w));
        float _2795 = log2(_2794);
        float _2811 = log2(_2465);
        _2561 = (exp2(_2811 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].x)) * _2785.x) / cbSceneParam._m0[78u].x)) + _2462;
        _2563 = (exp2(_2811 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].y)) * _2785.y) / cbSceneParam._m0[78u].y)) + _2463;
        _2565 = (exp2(_2811 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].z)) * _2785.z) / cbSceneParam._m0[78u].z)) + _2464;
        _2567 = _2794 * _2465;
    }
    else
    {
        _2561 = _2462;
        _2563 = _2463;
        _2565 = _2464;
        _2567 = _2465;
    }
    bool _2821;
    vec4 _2577;
    vec4 _2599;
    float _2601;
    float _2605;
    float _2606;
    float _2607;
    float _2608;
    bool _2618;
    for (;;)
    {
        _2577 = cbMatDynParam._m0[0u];
        float _2579 = roundEven(_2577.y);
        bool _2580 = _2579 == 3.0;
        float _2581 = log2(_2567);
        float _2588 = exp2(_2581 * cbSceneParam._m0[78u].x) * _2434;
        float _2589 = exp2(_2581 * cbSceneParam._m0[78u].y) * _2435;
        float _2590 = exp2(_2581 * cbSceneParam._m0[78u].z) * _2436;
        float _2597 = _592 + (-0.5);
        _2599 = cbMtdParam._m0[1u];
        _2601 = _2599.y * _2597;
        float _2604 = (_2579 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2605 = _2604 * (_2580 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2561)));
        _2606 = _2604 * (_2580 ? _2589 : (_2589 + (cbSceneParam._m0[72u].w * _2563)));
        _2607 = _2604 * (_2580 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2565)));
        _2608 = _2597 * 0.999000012874603271484375;
        _2618 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2618)
        {
            if ((cbInstanceData._m0[_649 + 7u].x + _2608) < 0.5)
            {
                _2821 = true;
                break;
            }
        }
        uint _2741 = _650 + uint(_2577.w);
        if ((cbInstanceData._m0[_2741].w < 1.0) && ((cbInstanceData._m0[_2741].w + _2608) < 0.5))
        {
            _2821 = true;
            break;
        }
        if ((_2601 + 1.0) < _2599.x)
        {
            _2821 = true;
            break;
        }
        _2821 = false;
        break;
    }
    float _3025;
    if (_2821)
    {
        discard_state = true;
        _3025 = 0.0;
    }
    else
    {
        _3025 = cbInstanceData._m0[_2437].w;
    }
    SV_Target.x = _2605;
    SV_Target.y = _2606;
    SV_Target.z = _2607;
    SV_Target.w = _3025;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2437].w;
    discard_exit();
}


