#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1093;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    bool _374 = _352 > 0.0;
    float _376 = _374 ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _383 = _357 + (-0.5);
    float _386 = _358 + (-0.5);
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_383 + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_386 + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _430 = (_416 - (_416 * _286)) * cbMtdParam._m0[9u].x;
    float _431 = (_417 - (_417 * _286)) * cbMtdParam._m0[9u].y;
    float _432 = cbMtdParam._m0[9u].z * (_418 - (_418 * _286));
    float _454 = (cbMtdParam._m0[21u].x * _345) * _351;
    float _456 = (cbMtdParam._m0[20u].w * _346) * _351;
    bool _457 = _454 > 0.0;
    float _462;
    if (_457)
    {
        _462 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _462 = frontier_phi_11_10_ladder;
    }
    bool _464 = _456 > 0.0;
    float _469;
    if (_464)
    {
        _469 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _469 = frontier_phi_15_14_ladder;
    }
    float _472 = _374 ? (cbMtdParam._m0[16u].z / _352) : 5000.0;
    float _473 = isnan(_469) ? _462 : (isnan(_462) ? _469 : min(_462, _469));
    float _474 = isnan(_472) ? _473 : (isnan(_473) ? _472 : min(_473, _472));
    float _478 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _482 = ((_474 * _352) + _478) / _478;
    float _487 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _489 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _505 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_474 * _454)) / _482) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_474 * _456)) / _482) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _510 = _505.x * cbMtdParam._m0[10u].x;
    float _511 = _505.y * cbMtdParam._m0[10u].y;
    float _512 = _505.z * cbMtdParam._m0[10u].z;
    float _520;
    if (_457)
    {
        _520 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_464)
    {
        _526 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_472) ? _528 : (isnan(_528) ? _472 : min(_528, _472));
    float _536 = ((_529 * _352) + _478) / _478;
    vec4 _550 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_529 * _454)) / _536) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_529 * _456)) / _536) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _552 = _550.w;
    float _554 = _552 - (_552 * _286);
    float _565 = 0.5 - (_286 * 0.5);
    float _575 = (((_430 - _299) + (_554 * ((_510 - _430) - (_510 * _286)))) * _565) + _299;
    float _576 = (((_431 - _301) + (_554 * ((_511 - _431) - (_511 * _286)))) * _565) + _301;
    float _577 = (((_432 - _303) + (_554 * ((_512 - _432) - (_512 * _286)))) * _565) + _303;
    vec4 _589 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _597 = (_589.x * 2.0) + (-1.0);
    float _599 = (_589.y * 2.0) + (-1.0);
    float _600 = dot(vec2(_597, _599), vec2(_597, _599));
    float _3228 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _605 = sqrt(1.0 - (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))));
    float _606 = _589.z * _286;
    float _609 = fma(_605, _195, fma(_599, _202, _597 * _188));
    float _612 = fma(_605, _196, fma(_599, _203, _597 * _189));
    float _615 = fma(_605, _197, fma(_599, _204, _597 * _190));
    float _619 = inversesqrt(dot(vec3(_609, _612, _615), vec3(_609, _612, _615)));
    float _620 = _619 * _609;
    float _621 = _619 * _612;
    float _622 = _619 * _615;
    float _3239 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _623 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _3250 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3261 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3272 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _642 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _646 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _647 = _259 * _646;
    float _648 = _260 * _646;
    float _649 = _261 * _646;
    float _655 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _656 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _677 = fma(_622, cbSceneParam._m0[5u].z, fma(_621, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _620));
    float _680 = fma(_622, cbSceneParam._m0[6u].z, fma(_621, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _620));
    float _683 = fma(_622, cbSceneParam._m0[7u].z, fma(_621, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _620));
    uint _696 = uint(roundEven(NORMAL.w)) * 13u;
    uint _699 = (_696 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _705 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_699].x;
    float _706 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_699].y;
    float _707 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_699].z;
    float _3283 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _3305 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    vec4 _719 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _655, cbSceneParam._m0[86u].y * _656));
    float _722 = _719.x * TEXCOORD.z;
    float _723 = dot(vec3(_620, _621, _622), vec3(_647, _648, _649));
    float _726 = _723 * 2.0;
    float _730 = (_726 * _620) - _647;
    float _731 = (_726 * _621) - _648;
    float _732 = (_726 * _622) - _649;
    float _736 = abs(dot(vec3(_647, _648, _649), vec3(_620, _621, _622)));
    float _3316 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _738 = sqrt(_623);
    float _751 = exp2((_738 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_738 * 3.0));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1092;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _819 = fma(_791, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783));
        float _823 = fma(_791, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783));
        float _827 = fma(_791, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783));
        float _850 = _783 + _620;
        float _851 = _787 + _621;
        float _852 = _791 + _622;
        float _862 = fma(_852, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850)) - _819;
        float _863 = fma(_852, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850)) - _823;
        float _864 = fma(_852, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850)) - _827;
        float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
        float _881 = ((_868 * _862) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_819 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_868 * _863) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_823 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_868 * _864) / cbModelParam._m0[34u].z) + ((((((_827 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        float _920 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_886.x + (-0.5));
        float _922 = _920 * (_886.y + (-0.5));
        float _923 = _920 * (_886.z + (-0.5));
        float _930 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_893.x + (-0.5));
        float _932 = _930 * (_893.y + (-0.5));
        float _933 = _930 * (_893.z + (-0.5));
        float _940 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_900.x + (-0.5));
        float _942 = _940 * (_900.y + (-0.5));
        float _943 = _940 * (_900.z + (-0.5));
        float _950 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_907.x + (-0.5));
        float _952 = _950 * (_907.y + (-0.5));
        float _953 = _950 * (_907.z + (-0.5));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = _921 * 0.5;
        float _958 = _931 * 0.5;
        float _959 = _941 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _974 = (dot(vec3(_620, _621, _622), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _984 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3364 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_986 + 1.0))) + _991) * _954;
        float _1001 = _922 * 0.5;
        float _1002 = _932 * 0.5;
        float _1003 = _942 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_620, _621, _622), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3397 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_1028 + 1.0))) + _1033) * _955;
        float _1043 = _923 * 0.5;
        float _1044 = _933 * 0.5;
        float _1045 = _943 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_620, _621, _622), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3430 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_1070 + 1.0))) + _1075) * _956;
        _1092 = _923;
        _1094 = _922;
        _1095 = _921;
        _1096 = _933;
        _1097 = _932;
        _1098 = _931;
        _1099 = _943;
        _1100 = _942;
        _1101 = _941;
        _1102 = _956;
        _1103 = _955;
        _1104 = _954;
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
    }
    else
    {
        _1092 = _1093;
        _1094 = _1093;
        _1095 = _1093;
        _1096 = _1093;
        _1097 = _1093;
        _1098 = _1093;
        _1099 = _1093;
        _1100 = _1093;
        _1101 = _1093;
        _1102 = _1093;
        _1103 = _1093;
        _1104 = _1093;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1133 = fma(_791, cbModelParam._m0[30u].z, fma(_787, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _783));
        float _1137 = fma(_791, cbModelParam._m0[31u].z, fma(_787, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _783));
        float _1141 = fma(_791, cbModelParam._m0[32u].z, fma(_787, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _783));
        float _1164 = _783 + _620;
        float _1165 = _787 + _621;
        float _1166 = _791 + _622;
        float _1176 = fma(_1166, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164)) - _1133;
        float _1177 = fma(_1166, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164)) - _1137;
        float _1178 = fma(_1166, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164)) - _1141;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1133 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1137 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[35u].z) + ((((((_1141 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1232 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1199.x + (-0.5));
        float _1234 = _1232 * (_1199.y + (-0.5));
        float _1235 = _1232 * (_1199.z + (-0.5));
        float _1242 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1206.x + (-0.5));
        float _1244 = _1242 * (_1206.y + (-0.5));
        float _1245 = _1242 * (_1206.z + (-0.5));
        float _1252 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1213.x + (-0.5));
        float _1254 = _1252 * (_1213.y + (-0.5));
        float _1255 = _1252 * (_1213.z + (-0.5));
        float _1262 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1220.x + (-0.5));
        float _1264 = _1262 * (_1220.y + (-0.5));
        float _1265 = _1262 * (_1220.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_620, _621, _622), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3493 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1296 + 1.0))) + _1301) * _1266;
        float _1311 = _1234 * 0.5;
        float _1312 = _1244 * 0.5;
        float _1313 = _1254 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_620, _621, _622), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3526 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1338 + 1.0))) + _1343) * _1267;
        float _1353 = _1235 * 0.5;
        float _1354 = _1245 * 0.5;
        float _1355 = _1255 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_620, _621, _622), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3559 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1380 + 1.0))) + _1385) * _1268;
        _1402 = _1235;
        _1403 = _1234;
        _1404 = _1233;
        _1405 = _1245;
        _1406 = _1244;
        _1407 = _1243;
        _1408 = _1255;
        _1409 = _1254;
        _1410 = _1253;
        _1411 = _1268;
        _1412 = _1267;
        _1413 = _1266;
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1093;
        _1403 = _1093;
        _1404 = _1093;
        _1405 = _1093;
        _1406 = _1093;
        _1407 = _1093;
        _1408 = _1093;
        _1409 = _1093;
        _1410 = _1093;
        _1411 = _1093;
        _1412 = _1093;
        _1413 = _1093;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1105)) + _1105;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1106)) + _1106;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1107)) + _1107;
    float _1449 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1426));
    float _1470 = _730 * 0.5;
    float _1471 = _731 * 0.5;
    float _1472 = _732 * 0.5;
    float _1473 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1476 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1479 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1513;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1486 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1092, _1096, _1099, _1102));
        float _1490 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1494 = dot(vec4(_1470, _1471, _1472, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1501 = dot(vec4(cbModelParam._m0[39u]), vec4(_1470, _1471, _1472, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1524;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1515 = dot(vec4(cbModelParam._m0[40u]), vec4(_1470, _1471, _1472, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1528 = (_1524 * cbModelParam._m0[1u].x) + (_1513 * (1.0 - cbModelParam._m0[1u].x));
    float _1538 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _623);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1538 : min(cbModelParam._m0[25u].z, _1538));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1587 = fma(_791, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _783)) + cbModelParam._m0[13u].w;
        float _1591 = fma(_791, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _783)) + cbModelParam._m0[14u].w;
        float _1595 = fma(_791, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _783)) + cbModelParam._m0[15u].w;
        float _1598 = fma(_732, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730));
        float _1601 = fma(_732, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730));
        float _1604 = fma(_732, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730));
        float _1632;
        if (_1598 > 0.0)
        {
            _1632 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1632 = frontier_phi_38_36_ladder;
        }
        float _2001;
        if (_1601 > 0.0)
        {
            _2001 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2001 = frontier_phi_47_43_ladder;
        }
        float _2301;
        if (_1604 > 0.0)
        {
            _2301 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2301 = frontier_phi_61_54_ladder;
        }
        float _2303 = isnan(_2001) ? _1632 : (isnan(_1632) ? _2001 : min(_1632, _2001));
        float _2304 = isnan(_2301) ? _2303 : (isnan(_2303) ? _2301 : min(_2303, _2301));
        float _2308 = (_2304 * _1598) + _1587;
        float _2309 = (_2304 * _1601) + _1591;
        float _2310 = (_2304 * _1604) + _1595;
        float _2311 = _2304 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2311;
        float _2314 = _2311 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2310 > _2314) || ((_2310 < _2312) || ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 < _2312) || (_2308 > _2314))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2310, cbModelParam._m0[9u].z, fma(_2309, cbModelParam._m0[9u].y, _2308 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2310, cbModelParam._m0[10u].z, fma(_2309, cbModelParam._m0[10u].y, _2308 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2310, cbModelParam._m0[11u].z, fma(_2309, cbModelParam._m0[11u].y, _2308 * cbModelParam._m0[11u].x))), _1539);
            frontier_phi_37_61_ladder = _2436.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2436.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2436.x * cbModelParam._m0[1u].y;
        }
        _1620 = frontier_phi_37_61_ladder_2;
        _1622 = frontier_phi_37_61_ladder_1;
        _1624 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_730, _731, _732), _1539);
        _1620 = _1608.x * cbModelParam._m0[1u].y;
        _1622 = _1608.y * cbModelParam._m0[1u].y;
        _1624 = _1608.z * cbModelParam._m0[1u].y;
    }
    float _1628 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _623);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1628 : min(cbModelParam._m0[25u].w, _1628));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1681 = fma(_791, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _783)) + cbModelParam._m0[21u].w;
        float _1685 = fma(_791, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _783)) + cbModelParam._m0[22u].w;
        float _1689 = fma(_791, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _783)) + cbModelParam._m0[23u].w;
        float _1692 = fma(_732, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730));
        float _1695 = fma(_732, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730));
        float _1698 = fma(_732, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730));
        float _2006;
        if (_1692 > 0.0)
        {
            _2006 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2006 = frontier_phi_49_45_ladder;
        }
        float _2327;
        if (_1695 > 0.0)
        {
            _2327 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2327 = frontier_phi_63_56_ladder;
        }
        float _2496;
        if (_1698 > 0.0)
        {
            _2496 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2496 = frontier_phi_77_72_ladder;
        }
        float _2498 = isnan(_2327) ? _2006 : (isnan(_2006) ? _2327 : min(_2006, _2327));
        float _2499 = isnan(_2496) ? _2498 : (isnan(_2498) ? _2496 : min(_2498, _2496));
        float _2503 = (_2499 * _1692) + _1681;
        float _2504 = (_2499 * _1695) + _1685;
        float _2505 = (_2499 * _1698) + _1689;
        float _2506 = _2499 * 9.9999997473787516355514526367188e-05;
        float _2507 = (-1.0) - _2506;
        float _2509 = _2506 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2505 > _2509) || ((_2505 < _2507) || ((_2504 > _2509) || ((_2504 < _2507) || ((_2503 < _2507) || (_2503 > _2509))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2505, cbModelParam._m0[17u].z, fma(_2504, cbModelParam._m0[17u].y, _2503 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2505, cbModelParam._m0[18u].z, fma(_2504, cbModelParam._m0[18u].y, _2503 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2505, cbModelParam._m0[19u].z, fma(_2504, cbModelParam._m0[19u].y, _2503 * cbModelParam._m0[19u].x))), _1629);
            frontier_phi_46_77_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1717 = frontier_phi_46_77_ladder_2;
        _1719 = frontier_phi_46_77_ladder_1;
        _1721 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_730, _731, _732), _1629);
        _1717 = _1701.x * cbModelParam._m0[1u].z;
        _1719 = _1701.y * cbModelParam._m0[1u].z;
        _1721 = _1701.z * cbModelParam._m0[1u].z;
    }
    float _1733 = ((((1.0 - _751) * ((_738 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_751 * _738)) * _722;
    float _1734 = _1733 * ((cbModelParam._m0[1u].w * (_1717 - _1620)) + _1620);
    float _1735 = _1733 * ((cbModelParam._m0[1u].w * (_1719 - _1622)) + _1622);
    float _1736 = _1733 * ((cbModelParam._m0[1u].w * (_1721 - _1624)) + _1624);
    float _1739 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1734 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1734 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, _1734 * cbSceneParam._m0[91u].x));
    vec4 _1753 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_655, _656));
    float _1755 = _1753.w;
    float _1767 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1755);
    float _1768 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1755);
    float _1769 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1755);
    uvec4 _1773 = floatBitsToUint(cbInstanceData._m0[_696 + 5u]);
    uint _1775 = _1773.x * 14u;
    uint _1776 = _1775 + 13u;
    float _1781 = _722 + (-1.0);
    float _1784 = (cbLight._m0[_1776].x * _1781) + 1.0;
    float _1785 = (cbLight._m0[_1776].y * _1781) + 1.0;
    uint _1786 = _1775 + 5u;
    float _1792 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1796 = _1775 + 4u;
    float _1805 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1809 = _1775 | 1u;
    float _1820 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_620, _621, _622));
    float _1823 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_620, _621, _622));
    float _3695 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _3706 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1828 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.3183098733425140380859375;
    float _1830 = (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.3183098733425140380859375;
    float _1837 = ((cbLight._m0[_1786].x * _1792) * _1830) + (((cbLight._m0[_1796].x * _1767) * _1805) * _1828);
    float _1838 = ((_1792 * cbLight._m0[_1786].y) * _1830) + (((cbLight._m0[_1796].y * _1768) * _1805) * _1828);
    float _1839 = ((_1792 * cbLight._m0[_1786].z) * _1830) + (((cbLight._m0[_1796].z * _1769) * _1805) * _1828);
    uint _1841 = _1775 + 8u;
    float _1854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1775].w)) * _623) * 0.949999988079071044921875);
    float _1855 = _1854 * _1854;
    float _1856 = cbLight._m0[_1775].x + _647;
    float _1857 = cbLight._m0[_1775].y + _648;
    float _1858 = cbLight._m0[_1775].z + _649;
    float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
    float _1863 = _1862 * _1856;
    float _1864 = _1862 * _1857;
    float _1865 = _1862 * _1858;
    float _1866 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_1775].xyz));
    float _3717 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _1870 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _1871 = dot(vec3(_620, _621, _622), vec3(_1863, _1864, _1865));
    float _3739 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _1875 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_1863, _1864, _1865));
    float _3750 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1879 = _1855 * _1855;
    float _1883 = ((_1874 * _1874) * (_1879 + (-1.0))) + 1.0;
    float _1894 = (exp2(log2(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1895 = 1.0 - _1855;
    float _1906 = (0.5 / (((_1870 * ((_1869 * _1895) + _1855)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _1895) + _1855) * _1869))) * _1869;
    float _3761 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1908 = (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1879 / ((_1883 * _1883) * 3.141590118408203125));
    uint _1922 = _1775 + 9u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _623) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1809].x + _647;
    float _1936 = cbLight._m0[_1809].y + _648;
    float _1937 = cbLight._m0[_1809].z + _649;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_1809].xyz));
    float _3772 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _1949 = dot(vec3(_620, _621, _622), vec3(_1942, _1943, _1944));
    float _3783 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1953 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_1942, _1943, _1944));
    float _3794 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1957 = _1934 * _1934;
    float _1961 = ((_1952 * _1952) * (_1957 + (-1.0))) + 1.0;
    float _1970 = (exp2(log2(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1971 = 1.0 - _1934;
    float _1981 = (0.5 / (((_1870 * ((_1948 * _1971) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1870 * _1971) + _1934) * _1948))) * _1948;
    float _3805 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1983 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1957 / ((_1961 * _1961) * 3.141590118408203125));
    float _1993 = (((_1970 * cbLight._m0[_1922].x) * _1983) * _1792) + ((((cbLight._m0[_1841].x * _1767) * _1894) * _1908) * _1805);
    float _1994 = (((_1970 * cbLight._m0[_1922].y) * _1983) * _1792) + ((((cbLight._m0[_1841].y * _1768) * _1894) * _1908) * _1805);
    float _1995 = (((_1970 * cbLight._m0[_1922].z) * _1983) * _1792) + ((((cbLight._m0[_1841].z * _1769) * _1894) * _1908) * _1805);
    float _2110;
    float _2112;
    float _2114;
    float _2116;
    float _2118;
    float _2120;
    if (_1773.y == 0u)
    {
        float _2050 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2051 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2050;
        float _2052 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2050;
        float _2053 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2050;
        uvec4 _2065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2066 = _2065.x;
        uint _2077 = uint((float(_2065.y) * floor(float(uint(cbSceneParam._m0[85u].y * _656) / _2066))) + floor(float(uint(cbSceneParam._m0[85u].x * _655) / _2066)));
        float _2087 = (log2(_2053 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2088 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        uint _2091 = uint(isnan(14.0) ? _2088 : (isnan(_2088) ? 14.0 : min(_2088, 14.0)));
        uvec4 _2096 = texelFetch(g_lightClusterGridBuffer, int(((_2091 << 2u) + (_2077 << 6u)) >> 2u));
        uint _2097 = _2096.x;
        uint _2098 = _2065.z;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        float _2196;
        float _2198;
        if (((((1u << ((_2098 >> 4u) & 15u)) + 4294967295u) & _2097) == 0u) || ((_2098 & 240u) == 0u))
        {
            _2188 = 0.0;
            _2190 = 0.0;
            _2192 = 0.0;
            _2194 = 0.0;
            _2196 = 0.0;
            _2198 = 0.0;
        }
        else
        {
            float _2189;
            float _2191;
            float _2193;
            float _2195;
            float _2197;
            float _2199;
            float _2364 = 0.0;
            float _2365 = 0.0;
            float _2366 = 0.0;
            float _2367 = 0.0;
            float _2368 = 0.0;
            float _2369 = 0.0;
            uint _2370 = 0u;
            uint _2379;
            bool _2380;
            for (;;)
            {
                _2379 = texelFetch(g_lightClassification, int((((_2091 << 5u) + (_2077 << 9u)) + (_2370 << 2u)) >> 2u)).x;
                _2380 = _2379 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2380)
                {
                    frontier_phi_74_pred = _2367;
                    frontier_phi_74_pred_1 = _2366;
                    frontier_phi_74_pred_2 = _2365;
                    frontier_phi_74_pred_3 = _2364;
                    frontier_phi_74_pred_4 = _2368;
                    frontier_phi_74_pred_5 = _2369;
                }
                else
                {
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    uint _2545;
                    _2539 = _2364;
                    _2540 = _2365;
                    _2541 = _2366;
                    _2542 = _2367;
                    _2543 = _2368;
                    _2544 = _2369;
                    _2545 = _2379;
                    float _2445;
                    float _2446;
                    float _2447;
                    float _2448;
                    float _2449;
                    float _2450;
                    for (;;)
                    {
                        uint _2549 = uint(findLSB(_2545)) + (_2370 << 5u);
                        uint _2546 = (_2545 + 4294967295u) & _2545;
                        uint _2551 = _2549 * 48u;
                        vec4 _2565 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2551)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 3u)).x));
                        uint _2571 = (_2549 * 48u) + 4u;
                        vec4 _2584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2571)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 3u)).x));
                        uint _2590 = (_2549 * 48u) + 8u;
                        vec3 _2601 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x));
                        float _2605 = _2565.x - _2051;
                        float _2606 = _2565.y - _2052;
                        float _2607 = _2565.z - _2053;
                        float _2608 = dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607));
                        float _2611 = inversesqrt(_2608);
                        float _2612 = _2611 * _2605;
                        float _2613 = _2611 * _2606;
                        float _2614 = _2611 * _2607;
                        float _2615 = dot(vec3(_677, _680, _683), vec3(_2612, _2613, _2614));
                        float _2620 = 1.0 - (_2608 * _2565.w);
                        float _3826 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2621 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
                        float _2622 = sqrt(_2608) * _2584.w;
                        float _2625 = 1.39999997615814208984375 / (_2622 + 1.39999997615814208984375);
                        float _2626 = _2625 * _2625;
                        float _2629 = ((1.0 - _2626) * _2615) + _2626;
                        float _2632 = _2622 * _2622;
                        float _2636 = ((isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0))) * _2621) / ((_2632 * 0.699999988079071044921875) + 1.0);
                        float _2640 = (-0.0) - _2051;
                        float _2641 = (-0.0) - _2052;
                        float _2642 = (-0.0) - _2053;
                        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
                        float _2647 = _2646 * _2640;
                        float _2648 = _2646 * _2641;
                        float _2649 = _2646 * _2642;
                        float _2657 = exp2(log2(1.0 / ((_2632 * 3.5) + 5.0)) * 0.25);
                        float _2658 = 1.0 - _738;
                        float _2665 = sqrt(1.0 - ((1.0 - (_2658 * _2658)) * (1.0 - (_2657 * _2657))));
                        float _2666 = _2665 * _2665;
                        float _2667 = _2666 * _2666;
                        float _2668 = _2647 + _2612;
                        float _2669 = _2648 + _2613;
                        float _2670 = _2649 + _2614;
                        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
                        float _2678 = dot(vec3(_677, _680, _683), vec3(_2647, _2648, _2649));
                        float _3842 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                        float _2681 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
                        float _2682 = dot(vec3(_677, _680, _683), vec3(_2674 * _2668, _2674 * _2669, _2674 * _2670));
                        float _3853 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                        float _2685 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
                        float _2689 = ((_2685 * _2685) * (_2667 + (-1.0))) + 1.0;
                        float _2690 = _2625 * _2666;
                        float _2691 = _2690 * _2690;
                        float _2694 = ((1.0 - _2691) * _2615) + _2691;
                        float _3864 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
                        float _2695 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
                        float _2696 = 1.0 - _2666;
                        float _2706 = (0.5 / (((_2695 * ((_2681 * _2696) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2695 * _2696) + _2666) * _2681))) * _2695;
                        float _3875 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2717 = (((_2667 * 3.1415927410125732421875) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) / ((_2689 * _2689) * ((_2632 * 2.1991131305694580078125) + 3.141590118408203125))) * _2621;
                        _2448 = (_2636 * _2584.x) + _2542;
                        _2449 = (_2636 * _2584.y) + _2543;
                        _2450 = (_2636 * _2584.z) + _2544;
                        _2445 = (_2717 * _2601.x) + _2539;
                        _2446 = (_2717 * _2601.y) + _2540;
                        _2447 = (_2717 * _2601.z) + _2541;
                        if (_2546 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2539 = _2445;
                            _2540 = _2446;
                            _2541 = _2447;
                            _2542 = _2448;
                            _2543 = _2449;
                            _2544 = _2450;
                            _2545 = _2546;
                        }
                    }
                    frontier_phi_74_pred = _2448;
                    frontier_phi_74_pred_1 = _2447;
                    frontier_phi_74_pred_2 = _2446;
                    frontier_phi_74_pred_3 = _2445;
                    frontier_phi_74_pred_4 = _2449;
                    frontier_phi_74_pred_5 = _2450;
                }
                _2195 = frontier_phi_74_pred;
                _2193 = frontier_phi_74_pred_1;
                _2191 = frontier_phi_74_pred_2;
                _2189 = frontier_phi_74_pred_3;
                _2197 = frontier_phi_74_pred_4;
                _2199 = frontier_phi_74_pred_5;
                uint _2371 = _2370 + 1u;
                if (_2371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2364 = _2189;
                    _2365 = _2191;
                    _2366 = _2193;
                    _2367 = _2195;
                    _2368 = _2197;
                    _2369 = _2199;
                    _2370 = _2371;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2188 = _2189;
            _2190 = _2191;
            _2192 = _2193;
            _2194 = _2195;
            _2196 = _2197;
            _2198 = _2199;
        }
        uvec4 _2202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2203 = _2202.z;
        uint _2205 = (_2203 >> 8u) & 15u;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        if (((4294967295u << _2205) & _2097) == 0u)
        {
            _2332 = _2188;
            _2334 = _2190;
            _2336 = _2192;
            _2338 = _2194;
            _2340 = _2196;
            _2342 = _2198;
        }
        else
        {
            float _2357 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
            float _2358 = _2357 * _2051;
            float _2359 = _2357 * _2052;
            float _2360 = _2357 * _2053;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2205 < ((_2203 >> 12u) & 15u))
            {
                float _2333;
                float _2335;
                float _2337;
                float _2339;
                float _2341;
                float _2343;
                float _2522 = _2188;
                float _2523 = _2190;
                float _2524 = _2192;
                float _2525 = _2194;
                float _2526 = _2196;
                float _2527 = _2198;
                uint _2528 = _2205;
                uint _2537;
                bool _2538;
                for (;;)
                {
                    _2537 = texelFetch(g_lightClassification, int((((_2091 << 5u) + (_2077 << 9u)) + (_2528 << 2u)) >> 2u)).x;
                    _2538 = _2537 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2538)
                    {
                        frontier_phi_83_pred = _2525;
                        frontier_phi_83_pred_1 = _2524;
                        frontier_phi_83_pred_2 = _2523;
                        frontier_phi_83_pred_3 = _2522;
                        frontier_phi_83_pred_4 = _2527;
                        frontier_phi_83_pred_5 = _2526;
                    }
                    else
                    {
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _2748;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _2756 = _2522;
                        float _2757 = _2523;
                        float _2758 = _2524;
                        float _2759 = _2525;
                        float _2760 = _2526;
                        float _2761 = _2527;
                        uint _2762 = _2537;
                        uint _2763;
                        vec4 _2788;
                        float _2789;
                        vec4 _2804;
                        vec3 _2816;
                        vec4 _2831;
                        vec4 _2846;
                        float _2892;
                        bool _2893;
                        for (;;)
                        {
                            uint _2773 = ((_2528 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2762));
                            _2763 = (_2762 + 4294967295u) & _2762;
                            uint _2775 = _2773 * 40u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            _2789 = _2788.w;
                            uint _2791 = (_2773 * 40u) + 4u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2806 = (_2773 * 40u) + 8u;
                            _2816 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x));
                            uint _2818 = (_2773 * 40u) + 16u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2833 = (_2773 * 40u) + 20u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2773 * 40u) + 24u;
                            vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2867 = (_2773 * 40u) + 28u;
                            vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2892 = fma(_2053, _2880.z, fma(_2052, _2880.y, _2880.x * _2051)) + _2880.w;
                            _2893 = !((fma(_2053, _2861.z, fma(_2052, _2861.y, _2861.x * _2051)) + _2861.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2893)
                            {
                                float _2920 = _2788.x - _2051;
                                float _2921 = _2788.y - _2052;
                                float _2922 = _2788.z - _2053;
                                float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                                float _2926 = inversesqrt(_2923);
                                float _2927 = _2926 * _2920;
                                float _2928 = _2926 * _2921;
                                float _2929 = _2926 * _2922;
                                float _2933 = 1.0 - (_2923 / (_2789 * _2789));
                                float _3886 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                                float _2934 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
                                float _2938 = sqrt(_2923) * _2804.w;
                                float _2940 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                                float _2941 = _2940 * _2940;
                                float _2944 = ((1.0 - _2941) * dot(vec3(_2927, _2928, _2929), vec3(_677, _680, _683))) + _2941;
                                float _2947 = _2938 * _2938;
                                float _2951 = (fma(_2053, _2831.z, fma(_2052, _2831.y, _2831.x * _2051)) + _2831.w) / _2892;
                                float _2952 = (fma(_2053, _2846.z, fma(_2052, _2846.y, _2846.x * _2051)) + _2846.w) / _2892;
                                float _2956 = 1.0 - dot(vec2(_2951, _2952), vec2(_2951, _2952));
                                float _3902 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
                                float _2958 = _2957 * (((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2934) / ((_2947 * 0.699999988079071044921875) + 1.0));
                                float _2970 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                                float _2971 = 1.0 - _738;
                                float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                                float _2979 = _2978 * _2978;
                                float _2980 = _2979 * _2979;
                                float _2981 = _2927 - _2358;
                                float _2982 = _2928 - _2359;
                                float _2983 = _2929 - _2360;
                                float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                                float _2991 = dot(vec3(_677, _680, _683), vec3((-0.0) - _2358, (-0.0) - _2359, (-0.0) - _2360));
                                float _3913 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2994 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
                                float _2995 = dot(vec3(_677, _680, _683), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                                float _3924 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2998 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                                float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                                float _3003 = _2940 * _2979;
                                float _3004 = _3003 * _3003;
                                float _3010 = ((1.0 - _3004) * dot(vec3(_677, _680, _683), vec3(_2927, _2928, _2929))) + _3004;
                                float _3935 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
                                float _3012 = 1.0 - _2979;
                                float _3022 = (0.5 / (((_3011 * ((_2994 * _3012) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3011 * _3012) + _2979) * _2994))) * _3011;
                                float _3946 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3032 = (_2957 * _2934) * (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) / ((_3002 * _3002) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2958 * _2804.x;
                                frontier_phi_89_pred_1 = _3032 * _2816.z;
                                frontier_phi_89_pred_2 = _3032 * _2816.y;
                                frontier_phi_89_pred_3 = _3032 * _2816.x;
                                frontier_phi_89_pred_4 = _2958 * _2804.z;
                                frontier_phi_89_pred_5 = _2958 * _2804.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3039 = frontier_phi_89_pred;
                            _3038 = frontier_phi_89_pred_1;
                            _3037 = frontier_phi_89_pred_2;
                            _3036 = frontier_phi_89_pred_3;
                            _3041 = frontier_phi_89_pred_4;
                            _3040 = frontier_phi_89_pred_5;
                            _2746 = _3039 + _2759;
                            _2747 = _3040 + _2760;
                            _2748 = _3041 + _2761;
                            _2743 = _3036 + _2756;
                            _2744 = _3037 + _2757;
                            _2745 = _3038 + _2758;
                            if (_2763 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2763;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2746;
                        frontier_phi_83_pred_1 = _2745;
                        frontier_phi_83_pred_2 = _2744;
                        frontier_phi_83_pred_3 = _2743;
                        frontier_phi_83_pred_4 = _2748;
                        frontier_phi_83_pred_5 = _2747;
                    }
                    _2339 = frontier_phi_83_pred;
                    _2337 = frontier_phi_83_pred_1;
                    _2335 = frontier_phi_83_pred_2;
                    _2333 = frontier_phi_83_pred_3;
                    _2343 = frontier_phi_83_pred_4;
                    _2341 = frontier_phi_83_pred_5;
                    uint _2529 = _2528 + 1u;
                    if (_2529 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2522 = _2333;
                        _2523 = _2335;
                        _2524 = _2337;
                        _2525 = _2339;
                        _2526 = _2341;
                        _2527 = _2343;
                        _2528 = _2529;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2343;
                frontier_phi_65_66_ladder_1 = _2341;
                frontier_phi_65_66_ladder_2 = _2337;
                frontier_phi_65_66_ladder_3 = _2335;
                frontier_phi_65_66_ladder_4 = _2339;
                frontier_phi_65_66_ladder_5 = _2333;
            }
            else
            {
                frontier_phi_65_66_ladder = _2198;
                frontier_phi_65_66_ladder_1 = _2196;
                frontier_phi_65_66_ladder_2 = _2192;
                frontier_phi_65_66_ladder_3 = _2190;
                frontier_phi_65_66_ladder_4 = _2194;
                frontier_phi_65_66_ladder_5 = _2188;
            }
            _2332 = frontier_phi_65_66_ladder_5;
            _2334 = frontier_phi_65_66_ladder_3;
            _2336 = frontier_phi_65_66_ladder_2;
            _2338 = frontier_phi_65_66_ladder_4;
            _2340 = frontier_phi_65_66_ladder_1;
            _2342 = frontier_phi_65_66_ladder;
        }
        float _2347 = isnan(1.0) ? _722 : (isnan(_722) ? 1.0 : min(_722, 1.0));
        _2110 = (_2347 * _2338) + _1837;
        _2112 = (_2347 * _2340) + _1838;
        _2114 = (_2347 * _2342) + _1839;
        _2116 = ((_2332 * 0.039999999105930328369140625) * _2347) + _1993;
        _2118 = ((_2334 * 0.039999999105930328369140625) * _2347) + _1994;
        _2120 = ((_2336 * 0.039999999105930328369140625) * _2347) + _1995;
    }
    else
    {
        _2110 = _1837;
        _2112 = _1838;
        _2114 = _1839;
        _2116 = _1993;
        _2118 = _1994;
        _2120 = _1995;
    }
    float _3962 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _3973 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3984 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _2137 = ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_2110 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _722))) + ((_2116 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1528)) * cbPerFrame._m0[3u].x);
    float _2138 = ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2112 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _722))) + ((_2118 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1528)) * cbPerFrame._m0[3u].x);
    float _2139 = ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2114 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _722))) + ((_2120 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1528)) * cbPerFrame._m0[3u].x);
    uint _2143 = _696 + 6u;
    float _2151 = _655 / cbSceneParam._m0[86u].x;
    float _2152 = _656 / cbSceneParam._m0[86u].y;
    vec4 _2166 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2151, _2152, (log2((isnan(cbSceneParam._m0[77u].w) ? _642 : (isnan(_642) ? cbSceneParam._m0[77u].w : min(_642, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2168 = _2166.x;
    float _2169 = _2166.y;
    float _2170 = _2166.z;
    float _2171 = _2166.w;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    if (_642 > cbSceneParam._m0[78u].w)
    {
        float _2213 = isnan(_642) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _642 : min(cbSceneParam._m0[80u].w, _642));
        float _2214 = _2213 / _642;
        float _2225 = _2214 * _259;
        float _2226 = _260 * _2214;
        float _2227 = (-0.0) - _2226;
        float _2228 = _2214 * _261;
        float _2230 = (cbSceneParam._m0[77u].w * _2227) / _2213;
        float _2231 = _2230 + cbSceneParam._m0[79u].w;
        float _2232 = cbSceneParam._m0[79u].w - _2226;
        float _2238 = sqrt(((_2225 * _2225) + (_2226 * _2226)) + (_2228 * _2228));
        float _2241 = (1.0 - (cbSceneParam._m0[77u].w / _2213)) * _2238;
        float _2247 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2249 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2458;
        if (abs((_2227 - _2230) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2458 = ((((_2231 > 0.0) ? exp2(_2247 * _2231) : (2.0 - exp2(_2249 * _2231))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2241;
        }
        else
        {
            float _2393 = 1.0 / cbSceneParam._m0[80u].x;
            float _2394 = isnan(_2232) ? _2231 : (isnan(_2231) ? _2232 : max(_2231, _2232));
            float _2395 = isnan(_2232) ? _2231 : (isnan(_2231) ? _2232 : min(_2231, _2232));
            float _2404 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : min(_2394, 0.0));
            float _2405 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : min(_2395, 0.0));
            _2458 = ((abs(_2238 / _2227) * cbSceneParam._m0[80u].y) * ((((_2404 - _2405) * 2.0) - ((exp2(_2247 * (isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0)))) - exp2(_2247 * (isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0))))) * _2393)) - ((exp2(_2249 * _2404) - exp2(_2249 * _2405)) * _2393))) + (_2241 * cbSceneParam._m0[80u].z);
        }
        vec4 _2460 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2151, _2152, 1.0), 0.0);
        float _2469 = exp2((_2458 * (-1.44269502162933349609375)) * (1.0 - _2460.w));
        float _2470 = log2(_2469);
        float _2486 = log2(_2171);
        _2251 = (exp2(_2486 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2470 * cbSceneParam._m0[78u].x)) * _2460.x) / cbSceneParam._m0[78u].x)) + _2168;
        _2253 = (exp2(_2486 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2470 * cbSceneParam._m0[78u].y)) * _2460.y) / cbSceneParam._m0[78u].y)) + _2169;
        _2255 = (exp2(_2486 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2470 * cbSceneParam._m0[78u].z)) * _2460.z) / cbSceneParam._m0[78u].z)) + _2170;
        _2257 = _2469 * _2171;
    }
    else
    {
        _2251 = _2168;
        _2253 = _2169;
        _2255 = _2170;
        _2257 = _2171;
    }
    float _2269 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2270 = _2269 == 3.0;
    float _2271 = log2(_2257);
    float _2278 = exp2(_2271 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0)));
    float _2279 = exp2(_2271 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0)));
    float _2280 = exp2(_2271 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0)));
    float _2289 = (_2269 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2289 * (_2270 ? _2278 : (_2278 + (cbSceneParam._m0[72u].w * _2251)));
    SV_Target.y = _2289 * (_2270 ? _2279 : (_2279 + (cbSceneParam._m0[72u].w * _2253)));
    SV_Target.z = _2289 * (_2270 ? _2280 : (_2280 + (cbSceneParam._m0[72u].w * _2255)));
    SV_Target.w = cbInstanceData._m0[_2143].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2143].w;
}


