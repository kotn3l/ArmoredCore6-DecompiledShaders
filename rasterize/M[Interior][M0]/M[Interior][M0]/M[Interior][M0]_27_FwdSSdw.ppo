#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _424;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    vec4 _339 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _343 = _339.z;
    float _347 = (_339.x * 2.0) + (-1.0);
    float _349 = (_339.y * 2.0) + (-1.0);
    float _355 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _362 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _371 = cbMtdParam._m0[23u].x + _259;
    float _372 = cbMtdParam._m0[23u].y + _260;
    float _373 = cbMtdParam._m0[23u].z + _261;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_355 * _188, _355 * _189, _355 * _190));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_362 * _202, _362 * _203, _362 * _204));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _393 * _389;
    float _399 = ((cbMtdParam._m0[19u].w * _387) * _393) + (_347 * cbMtdParam._m0[20u].y);
    float _400 = ((cbMtdParam._m0[20u].x * _388) * _393) + (_349 * cbMtdParam._m0[20u].z);
    float _403 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _404 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _422;
    float _425;
    float _427;
    if (_399 > 0.0)
    {
        float _408 = (1.0 - _403) / _399;
        _422 = _408;
        _425 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_408 * _394)) * 0.16666667163372039794921875;
        _427 = (fract((_408 * _400) + _404) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_399 < 0.0)
        {
            float _423 = ((-0.0) - _403) / _399;
            frontier_phi_3_2_ladder = (fract((_423 * _400) + _404) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _423;
            frontier_phi_3_2_ladder_2 = (fract(_423 * _394) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _424;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _422 = frontier_phi_3_2_ladder_1;
        _425 = frontier_phi_3_2_ladder_2;
        _427 = frontier_phi_3_2_ladder;
    }
    float _453;
    float _455;
    float _457;
    if (_400 > 0.0)
    {
        float _440 = (1.0 - _404) / _400;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_440 < _422)
        {
            frontier_phi_8_5_ladder = (fract((_440 * _399) + _403) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _440;
            frontier_phi_8_5_ladder_2 = (fract(_440 * _394) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _425;
            frontier_phi_8_5_ladder_1 = _422;
            frontier_phi_8_5_ladder_2 = _427;
        }
        _453 = frontier_phi_8_5_ladder_1;
        _455 = frontier_phi_8_5_ladder;
        _457 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_400 < 0.0)
        {
            float _454 = ((-0.0) - _404) / _400;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_454 < _422)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_454 * _399) + _403) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _454;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_454 * _394) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _425;
                frontier_phi_8_6_ladder_9_ladder_1 = _422;
                frontier_phi_8_6_ladder_9_ladder_2 = _427;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _425;
            frontier_phi_8_6_ladder_1 = _422;
            frontier_phi_8_6_ladder_2 = _427;
        }
        _453 = frontier_phi_8_6_ladder_1;
        _455 = frontier_phi_8_6_ladder;
        _457 = frontier_phi_8_6_ladder_2;
    }
    float _461 = (_394 > 0.0) ? (cbMtdParam._m0[16u].w / _394) : 5000.0;
    float _474;
    float _475;
    if (_461 < _453)
    {
        _474 = ((_403 + cbMtdParam._m0[17u].x) + (_461 * _399)) * 0.16666667163372039794921875;
        _475 = (((_461 * _400) + _404) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _474 = _455;
        _475 = _457;
    }
    vec4 _477 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_474, _475));
    float _482 = _477.x * cbMtdParam._m0[13u].x;
    float _483 = _477.y * cbMtdParam._m0[13u].y;
    float _484 = _477.z * cbMtdParam._m0[13u].z;
    float _489 = 0.5 - (_286 * 0.5);
    float _499 = (((_482 - _299) - (_482 * _286)) * _489) + _299;
    float _500 = (((_483 - _301) - (_483 * _286)) * _489) + _301;
    float _501 = (((_484 - _303) - (_484 * _286)) * _489) + _303;
    vec4 _513 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _517 = _513.z;
    float _520 = (_513.x * 2.0) + (-1.0);
    float _521 = (_513.y * 2.0) + (-1.0);
    float _522 = dot(vec2(_520, _521), vec2(_520, _521));
    float _3138 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _527 = sqrt(1.0 - (isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))));
    float _528 = _517 * _286;
    float _538 = (cbMtdParam._m0[15u].w * ((_343 - _528) + ((_517 - _343) * _286))) + _528;
    float _546 = (cbMtdParam._m0[16u].x * (_347 - (_347 * _286))) + _520;
    float _547 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _286))) + _521;
    float _550 = fma(_527, _195, fma(_547, _202, _546 * _188));
    float _553 = fma(_527, _196, fma(_547, _203, _546 * _189));
    float _556 = fma(_527, _197, fma(_547, _204, _546 * _190));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _3149 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _564 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
    float _3160 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3171 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3182 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _583 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _587 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _588 = _259 * _587;
    float _589 = _260 * _587;
    float _590 = _261 * _587;
    float _596 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _597 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _617 = fma(_563, cbSceneParam._m0[5u].z, fma(_562, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _561));
    float _620 = fma(_563, cbSceneParam._m0[6u].z, fma(_562, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _561));
    float _623 = fma(_563, cbSceneParam._m0[7u].z, fma(_562, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _561));
    uint _636 = uint(roundEven(NORMAL.w)) * 13u;
    uint _638 = (_636 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _644 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0)))) * cbInstanceData._m0[_638].x;
    float _645 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0)))) * cbInstanceData._m0[_638].y;
    float _646 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0)))) * cbInstanceData._m0[_638].z;
    float _3193 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    float _3204 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
    float _3215 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _596, cbSceneParam._m0[86u].y * _597));
    float _661 = _658.x * TEXCOORD.z;
    float _662 = dot(vec3(_561, _562, _563), vec3(_588, _589, _590));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _561) - _588;
    float _670 = (_665 * _562) - _589;
    float _671 = (_665 * _563) - _590;
    float _675 = abs(dot(vec3(_588, _589, _590), vec3(_561, _562, _563)));
    float _3226 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(_564);
    float _690 = exp2((_677 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_677 * 3.0));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _763 = fma(_730, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722));
        float _767 = fma(_730, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722));
        float _771 = fma(_730, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722));
        float _795 = _722 + _561;
        float _796 = _726 + _562;
        float _797 = _730 + _563;
        float _807 = fma(_797, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795)) - _763;
        float _808 = fma(_797, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795)) - _767;
        float _809 = fma(_797, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795)) - _771;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_763 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_767 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[34u].z) + ((((((_771 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _865 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_831.x + (-0.5));
        float _867 = _865 * (_831.y + (-0.5));
        float _868 = _865 * (_831.z + (-0.5));
        float _875 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_838.x + (-0.5));
        float _877 = _875 * (_838.y + (-0.5));
        float _878 = _875 * (_838.z + (-0.5));
        float _885 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_845.x + (-0.5));
        float _887 = _885 * (_845.y + (-0.5));
        float _888 = _885 * (_845.z + (-0.5));
        float _895 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_852.x + (-0.5));
        float _897 = _895 * (_852.y + (-0.5));
        float _898 = _895 * (_852.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _919 = (dot(vec3(_561, _562, _563), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3252 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _929 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3263 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3274 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))) * (_931 + 1.0))) + _936) * _899;
        float _946 = _867 * 0.5;
        float _947 = _877 * 0.5;
        float _948 = _887 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_561, _562, _563), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3285 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3296 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3307 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * (_973 + 1.0))) + _978) * _900;
        float _988 = _868 * 0.5;
        float _989 = _878 * 0.5;
        float _990 = _888 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_561, _562, _563), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3340 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_1015 + 1.0))) + _1020) * _901;
        _1037 = _868;
        _1038 = _867;
        _1039 = _866;
        _1040 = _878;
        _1041 = _877;
        _1042 = _876;
        _1043 = _888;
        _1044 = _887;
        _1045 = _886;
        _1046 = _901;
        _1047 = _900;
        _1048 = _899;
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _424;
        _1038 = _424;
        _1039 = _424;
        _1040 = _424;
        _1041 = _424;
        _1042 = _424;
        _1043 = _424;
        _1044 = _424;
        _1045 = _424;
        _1046 = _424;
        _1047 = _424;
        _1048 = _424;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1077 = fma(_730, cbModelParam._m0[30u].z, fma(_726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _722));
        float _1081 = fma(_730, cbModelParam._m0[31u].z, fma(_726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _722));
        float _1085 = fma(_730, cbModelParam._m0[32u].z, fma(_726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _722));
        float _1108 = _722 + _561;
        float _1109 = _726 + _562;
        float _1110 = _730 + _563;
        float _1120 = fma(_1110, cbModelParam._m0[30u].z, fma(_1109, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1108)) - _1077;
        float _1121 = fma(_1110, cbModelParam._m0[31u].z, fma(_1109, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1108)) - _1081;
        float _1122 = fma(_1110, cbModelParam._m0[32u].z, fma(_1109, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1108)) - _1085;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1077 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1081 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[35u].z) + ((((((_1085 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1176 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1143.x + (-0.5));
        float _1178 = _1176 * (_1143.y + (-0.5));
        float _1179 = _1176 * (_1143.z + (-0.5));
        float _1186 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1150.x + (-0.5));
        float _1188 = _1186 * (_1150.y + (-0.5));
        float _1189 = _1186 * (_1150.z + (-0.5));
        float _1196 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1157.x + (-0.5));
        float _1198 = _1196 * (_1157.y + (-0.5));
        float _1199 = _1196 * (_1157.z + (-0.5));
        float _1206 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1164.x + (-0.5));
        float _1208 = _1206 * (_1164.y + (-0.5));
        float _1209 = _1206 * (_1164.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_561, _562, _563), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3403 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_1240 + 1.0))) + _1245) * _1210;
        float _1255 = _1178 * 0.5;
        float _1256 = _1188 * 0.5;
        float _1257 = _1198 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_561, _562, _563), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3436 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_1282 + 1.0))) + _1287) * _1211;
        float _1297 = _1179 * 0.5;
        float _1298 = _1189 * 0.5;
        float _1299 = _1199 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_561, _562, _563), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3469 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1324 + 1.0))) + _1329) * _1212;
        _1346 = _1179;
        _1347 = _1178;
        _1348 = _1177;
        _1349 = _1189;
        _1350 = _1188;
        _1351 = _1187;
        _1352 = _1199;
        _1353 = _1198;
        _1354 = _1197;
        _1355 = _1212;
        _1356 = _1211;
        _1357 = _1210;
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _424;
        _1347 = _424;
        _1348 = _424;
        _1349 = _424;
        _1350 = _424;
        _1351 = _424;
        _1352 = _424;
        _1353 = _424;
        _1354 = _424;
        _1355 = _424;
        _1356 = _424;
        _1357 = _424;
        _1358 = 0.0;
        _1359 = 0.0;
        _1360 = 0.0;
    }
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1049)) + _1049;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1051)) + _1051;
    float _1393 = fma(_1372, cbSceneParam._m0[89u].z, fma(_1371, cbSceneParam._m0[89u].y, _1370 * cbSceneParam._m0[89u].x));
    float _1396 = fma(_1372, cbSceneParam._m0[90u].z, fma(_1371, cbSceneParam._m0[90u].y, _1370 * cbSceneParam._m0[90u].x));
    float _1399 = fma(_1372, cbSceneParam._m0[91u].z, fma(_1371, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1370));
    float _1414 = _669 * 0.5;
    float _1415 = _670 * 0.5;
    float _1416 = _671 * 0.5;
    float _1417 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1420 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1423 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1457;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1430 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1434 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1438 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1445 = dot(vec4(cbModelParam._m0[39u]), vec4(_1414, _1415, _1416, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1445) ? 0.0 : (isnan(0.0) ? _1445 : max(0.0, _1445))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1468;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1459 = dot(vec4(cbModelParam._m0[40u]), vec4(_1414, _1415, _1416, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1459) ? 0.0 : (isnan(0.0) ? _1459 : max(0.0, _1459))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1472 = (_1468 * cbModelParam._m0[1u].x) + (_1457 * (1.0 - cbModelParam._m0[1u].x));
    float _1482 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _564);
    float _1483 = isnan(_1482) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1482 : min(cbModelParam._m0[25u].z, _1482));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_730, cbModelParam._m0[13u].z, fma(_726, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_730, cbModelParam._m0[14u].z, fma(_726, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_730, cbModelParam._m0[15u].z, fma(_726, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1545 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1548 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1576 = frontier_phi_26_24_ladder;
        }
        float _1949;
        if (_1545 > 0.0)
        {
            _1949 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1949 = frontier_phi_35_31_ladder;
        }
        float _2249;
        if (_1548 > 0.0)
        {
            _2249 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2249 = frontier_phi_49_42_ladder;
        }
        float _2251 = isnan(_1949) ? _1576 : (isnan(_1576) ? _1949 : min(_1576, _1949));
        float _2252 = isnan(_2249) ? _2251 : (isnan(_2251) ? _2249 : min(_2251, _2249));
        float _2256 = (_2252 * _1542) + _1531;
        float _2257 = (_2252 * _1545) + _1535;
        float _2258 = (_2252 * _1548) + _1539;
        float _2259 = _2252 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2259;
        float _2262 = _2259 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2258 > _2262) || ((_2258 < _2260) || ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 < _2260) || (_2256 > _2262))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2258, cbModelParam._m0[9u].z, fma(_2257, cbModelParam._m0[9u].y, _2256 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2258, cbModelParam._m0[10u].z, fma(_2257, cbModelParam._m0[10u].y, _2256 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2258, cbModelParam._m0[11u].z, fma(_2257, cbModelParam._m0[11u].y, _2256 * cbModelParam._m0[11u].x))), _1483);
            frontier_phi_25_49_ladder = _2384.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2384.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2384.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_25_49_ladder_2;
        _1566 = frontier_phi_25_49_ladder_1;
        _1568 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1483);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _564);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_730, cbModelParam._m0[21u].z, fma(_726, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_730, cbModelParam._m0[22u].z, fma(_726, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_730, cbModelParam._m0[23u].z, fma(_726, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1642 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1645 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1954;
        if (_1639 > 0.0)
        {
            _1954 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1954 = frontier_phi_37_33_ladder;
        }
        float _2275;
        if (_1642 > 0.0)
        {
            _2275 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2275 = frontier_phi_51_44_ladder;
        }
        float _2444;
        if (_1645 > 0.0)
        {
            _2444 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2444 = frontier_phi_65_60_ladder;
        }
        float _2446 = isnan(_2275) ? _1954 : (isnan(_1954) ? _2275 : min(_1954, _2275));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1639) + _1628;
        float _2452 = (_2447 * _1642) + _1632;
        float _2453 = (_2447 * _1645) + _1636;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2454;
        float _2457 = _2454 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2453 > _2457) || ((_2453 < _2455) || ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 < _2455) || (_2451 > _2457))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2453, cbModelParam._m0[17u].z, fma(_2452, cbModelParam._m0[17u].y, _2451 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2453, cbModelParam._m0[18u].z, fma(_2452, cbModelParam._m0[18u].y, _2451 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2453, cbModelParam._m0[19u].z, fma(_2452, cbModelParam._m0[19u].y, _2451 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_34_65_ladder = _2686.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2686.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2686.z * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_34_65_ladder_1;
        _1666 = frontier_phi_34_65_ladder;
        _1668 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1573);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1680 = ((((1.0 - _690) * ((_677 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_690 * _677)) * _661;
    float _1681 = _1680 * ((cbModelParam._m0[1u].w * (_1664 - _1564)) + _1564);
    float _1682 = _1680 * ((cbModelParam._m0[1u].w * (_1666 - _1566)) + _1566);
    float _1683 = _1680 * ((cbModelParam._m0[1u].w * (_1668 - _1568)) + _1568);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    vec4 _1700 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_596, _597));
    float _1702 = _1700.w;
    float _1714 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1702);
    float _1715 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1702);
    float _1716 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1702);
    uvec4 _1720 = floatBitsToUint(cbInstanceData._m0[_636 + 5u]);
    uint _1722 = _1720.x * 14u;
    uint _1723 = _1722 + 13u;
    float _1728 = _661 + (-1.0);
    float _1731 = (cbLight._m0[_1723].x * _1728) + 1.0;
    float _1732 = (cbLight._m0[_1723].y * _1728) + 1.0;
    uint _1733 = _1722 + 5u;
    float _1739 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
    uint _1743 = _1722 + 4u;
    float _1753 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1757 = _1722 | 1u;
    float _1768 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_561, _562, _563));
    float _1771 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_561, _562, _563));
    float _3605 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _3616 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1776 = (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.3183098733425140380859375;
    float _1778 = (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.3183098733425140380859375;
    float _1785 = ((cbLight._m0[_1733].x * _1739) * _1778) + (((cbLight._m0[_1743].x * _1714) * _1753) * _1776);
    float _1786 = ((_1739 * cbLight._m0[_1733].y) * _1778) + (((cbLight._m0[_1743].y * _1715) * _1753) * _1776);
    float _1787 = ((_1739 * cbLight._m0[_1733].z) * _1778) + (((cbLight._m0[_1743].z * _1716) * _1753) * _1776);
    uint _1789 = _1722 + 8u;
    float _1802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _564) * 0.949999988079071044921875);
    float _1803 = _1802 * _1802;
    float _1804 = cbLight._m0[_1722].x + _588;
    float _1805 = cbLight._m0[_1722].y + _589;
    float _1806 = cbLight._m0[_1722].z + _590;
    float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
    float _1811 = _1810 * _1804;
    float _1812 = _1810 * _1805;
    float _1813 = _1810 * _1806;
    float _1814 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1722].xyz));
    float _3627 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _1818 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _1819 = dot(vec3(_561, _562, _563), vec3(_1811, _1812, _1813));
    float _3649 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1811, _1812, _1813));
    float _3660 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1827 = _1803 * _1803;
    float _1831 = ((_1822 * _1822) * (_1827 + (-1.0))) + 1.0;
    float _1842 = (exp2(log2(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1843 = 1.0 - _1803;
    float _1854 = (0.5 / (((_1818 * ((_1817 * _1843) + _1803)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _1843) + _1803) * _1817))) * _1817;
    float _3671 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1856 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1827 / ((_1831 * _1831) * 3.141590118408203125));
    uint _1870 = _1722 + 9u;
    float _1881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _564) * 0.949999988079071044921875);
    float _1882 = _1881 * _1881;
    float _1883 = cbLight._m0[_1757].x + _588;
    float _1884 = cbLight._m0[_1757].y + _589;
    float _1885 = cbLight._m0[_1757].z + _590;
    float _1889 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
    float _1890 = _1889 * _1883;
    float _1891 = _1889 * _1884;
    float _1892 = _1889 * _1885;
    float _1893 = dot(vec3(_561, _562, _563), vec3(cbLight._m0[_1757].xyz));
    float _3682 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _1897 = dot(vec3(_561, _562, _563), vec3(_1890, _1891, _1892));
    float _3693 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_1890, _1891, _1892));
    float _3704 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1882 * _1882;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1918 = (exp2(log2(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1919 = 1.0 - _1882;
    float _1929 = (0.5 / (((_1818 * ((_1896 * _1919) + _1882)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _1919) + _1882) * _1896))) * _1896;
    float _3715 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1931 = (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    float _1941 = (((_1918 * cbLight._m0[_1870].x) * _1931) * _1739) + ((((cbLight._m0[_1789].x * _1714) * _1842) * _1856) * _1753);
    float _1942 = (((_1918 * cbLight._m0[_1870].y) * _1931) * _1739) + ((((cbLight._m0[_1789].y * _1715) * _1842) * _1856) * _1753);
    float _1943 = (((_1918 * cbLight._m0[_1870].z) * _1931) * _1739) + ((((cbLight._m0[_1789].z * _1716) * _1842) * _1856) * _1753);
    float _2058;
    float _2060;
    float _2062;
    float _2064;
    float _2066;
    float _2068;
    if (_1720.y == 0u)
    {
        float _1998 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1999 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1998;
        float _2000 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1998;
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1998;
        uvec4 _2013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2014 = _2013.x;
        uint _2025 = uint((float(_2013.y) * floor(float(uint(cbSceneParam._m0[85u].y * _597) / _2014))) + floor(float(uint(cbSceneParam._m0[85u].x * _596) / _2014)));
        float _2035 = (log2(_2001 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2036 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        uint _2039 = uint(isnan(14.0) ? _2036 : (isnan(_2036) ? 14.0 : min(_2036, 14.0)));
        uvec4 _2044 = texelFetch(g_lightClusterGridBuffer, int(((_2039 << 2u) + (_2025 << 6u)) >> 2u));
        uint _2045 = _2044.x;
        uint _2046 = _2013.z;
        float _2136;
        float _2138;
        float _2140;
        float _2142;
        float _2144;
        float _2146;
        if (((((1u << ((_2046 >> 4u) & 15u)) + 4294967295u) & _2045) == 0u) || ((_2046 & 240u) == 0u))
        {
            _2136 = 0.0;
            _2138 = 0.0;
            _2140 = 0.0;
            _2142 = 0.0;
            _2144 = 0.0;
            _2146 = 0.0;
        }
        else
        {
            float _2137;
            float _2139;
            float _2141;
            float _2143;
            float _2145;
            float _2147;
            float _2312 = 0.0;
            float _2313 = 0.0;
            float _2314 = 0.0;
            float _2315 = 0.0;
            float _2316 = 0.0;
            float _2317 = 0.0;
            uint _2318 = 0u;
            uint _2327;
            bool _2328;
            for (;;)
            {
                _2327 = texelFetch(g_lightClassification, int((((_2039 << 5u) + (_2025 << 9u)) + (_2318 << 2u)) >> 2u)).x;
                _2328 = _2327 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2328)
                {
                    frontier_phi_62_pred = _2313;
                    frontier_phi_62_pred_1 = _2312;
                    frontier_phi_62_pred_2 = _2314;
                    frontier_phi_62_pred_3 = _2317;
                    frontier_phi_62_pred_4 = _2316;
                    frontier_phi_62_pred_5 = _2315;
                }
                else
                {
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    float _2491;
                    float _2492;
                    uint _2493;
                    _2487 = _2312;
                    _2488 = _2313;
                    _2489 = _2314;
                    _2490 = _2315;
                    _2491 = _2316;
                    _2492 = _2317;
                    _2493 = _2327;
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    for (;;)
                    {
                        uint _2497 = uint(findLSB(_2493)) + (_2318 << 5u);
                        uint _2494 = (_2493 + 4294967295u) & _2493;
                        uint _2499 = _2497 * 48u;
                        vec4 _2513 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2499)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 3u)).x));
                        uint _2519 = (_2497 * 48u) + 4u;
                        vec4 _2532 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 3u)).x));
                        uint _2538 = (_2497 * 48u) + 8u;
                        vec3 _2549 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2538)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2538 + 2u)).x));
                        float _2553 = _2513.x - _1999;
                        float _2554 = _2513.y - _2000;
                        float _2555 = _2513.z - _2001;
                        float _2556 = dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555));
                        float _2559 = inversesqrt(_2556);
                        float _2560 = _2559 * _2553;
                        float _2561 = _2559 * _2554;
                        float _2562 = _2559 * _2555;
                        float _2563 = dot(vec3(_617, _620, _623), vec3(_2560, _2561, _2562));
                        float _2568 = 1.0 - (_2556 * _2513.w);
                        float _3736 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
                        float _2569 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
                        float _2570 = sqrt(_2556) * _2532.w;
                        float _2573 = 1.39999997615814208984375 / (_2570 + 1.39999997615814208984375);
                        float _2574 = _2573 * _2573;
                        float _2577 = ((1.0 - _2574) * _2563) + _2574;
                        float _2580 = _2570 * _2570;
                        float _2584 = ((isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0))) * _2569) / ((_2580 * 0.699999988079071044921875) + 1.0);
                        float _2588 = (-0.0) - _1999;
                        float _2589 = (-0.0) - _2000;
                        float _2590 = (-0.0) - _2001;
                        float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
                        float _2595 = _2594 * _2588;
                        float _2596 = _2594 * _2589;
                        float _2597 = _2594 * _2590;
                        float _2605 = exp2(log2(1.0 / ((_2580 * 3.5) + 5.0)) * 0.25);
                        float _2606 = 1.0 - _677;
                        float _2613 = sqrt(1.0 - ((1.0 - (_2606 * _2606)) * (1.0 - (_2605 * _2605))));
                        float _2614 = _2613 * _2613;
                        float _2615 = _2614 * _2614;
                        float _2616 = _2595 + _2560;
                        float _2617 = _2596 + _2561;
                        float _2618 = _2597 + _2562;
                        float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
                        float _2626 = dot(vec3(_617, _620, _623), vec3(_2595, _2596, _2597));
                        float _3752 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
                        float _2629 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
                        float _2630 = dot(vec3(_617, _620, _623), vec3(_2622 * _2616, _2622 * _2617, _2622 * _2618));
                        float _3763 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
                        float _2633 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
                        float _2637 = ((_2633 * _2633) * (_2615 + (-1.0))) + 1.0;
                        float _2638 = _2573 * _2614;
                        float _2639 = _2638 * _2638;
                        float _2642 = ((1.0 - _2639) * _2563) + _2639;
                        float _3774 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2643 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
                        float _2644 = 1.0 - _2614;
                        float _2654 = (0.5 / (((_2643 * ((_2629 * _2644) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2643 * _2644) + _2614) * _2629))) * _2643;
                        float _3785 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                        float _2665 = (((_2615 * 3.1415927410125732421875) * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) / ((_2637 * _2637) * ((_2580 * 2.1991131305694580078125) + 3.141590118408203125))) * _2569;
                        _2396 = (_2584 * _2532.x) + _2490;
                        _2397 = (_2584 * _2532.y) + _2491;
                        _2398 = (_2584 * _2532.z) + _2492;
                        _2393 = (_2665 * _2549.x) + _2487;
                        _2394 = (_2665 * _2549.y) + _2488;
                        _2395 = (_2665 * _2549.z) + _2489;
                        if (_2494 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2487 = _2393;
                            _2488 = _2394;
                            _2489 = _2395;
                            _2490 = _2396;
                            _2491 = _2397;
                            _2492 = _2398;
                            _2493 = _2494;
                        }
                    }
                    frontier_phi_62_pred = _2394;
                    frontier_phi_62_pred_1 = _2393;
                    frontier_phi_62_pred_2 = _2395;
                    frontier_phi_62_pred_3 = _2398;
                    frontier_phi_62_pred_4 = _2397;
                    frontier_phi_62_pred_5 = _2396;
                }
                _2139 = frontier_phi_62_pred;
                _2137 = frontier_phi_62_pred_1;
                _2141 = frontier_phi_62_pred_2;
                _2147 = frontier_phi_62_pred_3;
                _2145 = frontier_phi_62_pred_4;
                _2143 = frontier_phi_62_pred_5;
                uint _2319 = _2318 + 1u;
                if (_2319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2312 = _2137;
                    _2313 = _2139;
                    _2314 = _2141;
                    _2315 = _2143;
                    _2316 = _2145;
                    _2317 = _2147;
                    _2318 = _2319;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2136 = _2137;
            _2138 = _2139;
            _2140 = _2141;
            _2142 = _2143;
            _2144 = _2145;
            _2146 = _2147;
        }
        uvec4 _2150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2151 = _2150.z;
        uint _2153 = (_2151 >> 8u) & 15u;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        if (((4294967295u << _2153) & _2045) == 0u)
        {
            _2280 = _2136;
            _2282 = _2138;
            _2284 = _2140;
            _2286 = _2142;
            _2288 = _2144;
            _2290 = _2146;
        }
        else
        {
            float _2305 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
            float _2306 = _2305 * _1999;
            float _2307 = _2305 * _2000;
            float _2308 = _2305 * _2001;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2153 < ((_2151 >> 12u) & 15u))
            {
                float _2281;
                float _2283;
                float _2285;
                float _2287;
                float _2289;
                float _2291;
                float _2470 = _2136;
                float _2471 = _2138;
                float _2472 = _2140;
                float _2473 = _2142;
                float _2474 = _2144;
                float _2475 = _2146;
                uint _2476 = _2153;
                uint _2485;
                bool _2486;
                for (;;)
                {
                    _2485 = texelFetch(g_lightClassification, int((((_2039 << 5u) + (_2025 << 9u)) + (_2476 << 2u)) >> 2u)).x;
                    _2486 = _2485 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2486)
                    {
                        frontier_phi_71_pred = _2471;
                        frontier_phi_71_pred_1 = _2470;
                        frontier_phi_71_pred_2 = _2475;
                        frontier_phi_71_pred_3 = _2474;
                        frontier_phi_71_pred_4 = _2473;
                        frontier_phi_71_pred_5 = _2472;
                    }
                    else
                    {
                        float _2691;
                        float _2692;
                        float _2693;
                        float _2694;
                        float _2695;
                        float _2696;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2704 = _2470;
                        float _2705 = _2471;
                        float _2706 = _2472;
                        float _2707 = _2473;
                        float _2708 = _2474;
                        float _2709 = _2475;
                        uint _2710 = _2485;
                        uint _2711;
                        vec4 _2736;
                        float _2737;
                        vec4 _2752;
                        vec3 _2764;
                        vec4 _2779;
                        vec4 _2794;
                        float _2840;
                        bool _2841;
                        for (;;)
                        {
                            uint _2721 = ((_2476 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2710));
                            _2711 = (_2710 + 4294967295u) & _2710;
                            uint _2723 = _2721 * 40u;
                            _2736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 3u)).x));
                            _2737 = _2736.w;
                            uint _2739 = (_2721 * 40u) + 4u;
                            _2752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 3u)).x));
                            uint _2754 = (_2721 * 40u) + 8u;
                            _2764 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 2u)).x));
                            uint _2766 = (_2721 * 40u) + 16u;
                            _2779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 3u)).x));
                            uint _2781 = (_2721 * 40u) + 20u;
                            _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            uint _2796 = (_2721 * 40u) + 24u;
                            vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            uint _2815 = (_2721 * 40u) + 28u;
                            vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            _2840 = fma(_2001, _2828.z, fma(_2000, _2828.y, _2828.x * _1999)) + _2828.w;
                            _2841 = !((fma(_2001, _2809.z, fma(_2000, _2809.y, _2809.x * _1999)) + _2809.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2841)
                            {
                                float _2868 = _2736.x - _1999;
                                float _2869 = _2736.y - _2000;
                                float _2870 = _2736.z - _2001;
                                float _2871 = dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870));
                                float _2874 = inversesqrt(_2871);
                                float _2875 = _2874 * _2868;
                                float _2876 = _2874 * _2869;
                                float _2877 = _2874 * _2870;
                                float _2881 = 1.0 - (_2871 / (_2737 * _2737));
                                float _3796 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2882 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
                                float _2886 = sqrt(_2871) * _2752.w;
                                float _2888 = 1.39999997615814208984375 / (_2886 + 1.39999997615814208984375);
                                float _2889 = _2888 * _2888;
                                float _2892 = ((1.0 - _2889) * dot(vec3(_2875, _2876, _2877), vec3(_617, _620, _623))) + _2889;
                                float _2895 = _2886 * _2886;
                                float _2899 = (fma(_2001, _2779.z, fma(_2000, _2779.y, _2779.x * _1999)) + _2779.w) / _2840;
                                float _2900 = (fma(_2001, _2794.z, fma(_2000, _2794.y, _2794.x * _1999)) + _2794.w) / _2840;
                                float _2904 = 1.0 - dot(vec2(_2899, _2900), vec2(_2899, _2900));
                                float _3812 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                                float _2905 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
                                float _2906 = _2905 * (((isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))) * _2882) / ((_2895 * 0.699999988079071044921875) + 1.0));
                                float _2918 = exp2(log2(1.0 / ((_2895 * 3.5) + 5.0)) * 0.25);
                                float _2919 = 1.0 - _677;
                                float _2926 = sqrt(1.0 - ((1.0 - (_2919 * _2919)) * (1.0 - (_2918 * _2918))));
                                float _2927 = _2926 * _2926;
                                float _2928 = _2927 * _2927;
                                float _2929 = _2875 - _2306;
                                float _2930 = _2876 - _2307;
                                float _2931 = _2877 - _2308;
                                float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                                float _2939 = dot(vec3(_617, _620, _623), vec3((-0.0) - _2306, (-0.0) - _2307, (-0.0) - _2308));
                                float _3823 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                                float _2942 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
                                float _2943 = dot(vec3(_617, _620, _623), vec3(_2935 * _2929, _2935 * _2930, _2935 * _2931));
                                float _3834 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                                float _2946 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
                                float _2950 = ((_2946 * _2946) * (_2928 + (-1.0))) + 1.0;
                                float _2951 = _2888 * _2927;
                                float _2952 = _2951 * _2951;
                                float _2958 = ((1.0 - _2952) * dot(vec3(_617, _620, _623), vec3(_2875, _2876, _2877))) + _2952;
                                float _3845 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                                float _2959 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                                float _2960 = 1.0 - _2927;
                                float _2970 = (0.5 / (((_2959 * ((_2942 * _2960) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2959 * _2960) + _2927) * _2942))) * _2959;
                                float _3856 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2980 = (_2905 * _2882) * (((_2928 * 3.1415927410125732421875) * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) / ((_2950 * _2950) * ((_2895 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2980 * _2764.y;
                                frontier_phi_77_pred_1 = _2980 * _2764.x;
                                frontier_phi_77_pred_2 = _2906 * _2752.z;
                                frontier_phi_77_pred_3 = _2906 * _2752.y;
                                frontier_phi_77_pred_4 = _2906 * _2752.x;
                                frontier_phi_77_pred_5 = _2980 * _2764.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2985 = frontier_phi_77_pred;
                            _2984 = frontier_phi_77_pred_1;
                            _2989 = frontier_phi_77_pred_2;
                            _2988 = frontier_phi_77_pred_3;
                            _2987 = frontier_phi_77_pred_4;
                            _2986 = frontier_phi_77_pred_5;
                            _2694 = _2987 + _2707;
                            _2695 = _2988 + _2708;
                            _2696 = _2989 + _2709;
                            _2691 = _2984 + _2704;
                            _2692 = _2985 + _2705;
                            _2693 = _2986 + _2706;
                            if (_2711 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2704 = _2691;
                                _2705 = _2692;
                                _2706 = _2693;
                                _2707 = _2694;
                                _2708 = _2695;
                                _2709 = _2696;
                                _2710 = _2711;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2692;
                        frontier_phi_71_pred_1 = _2691;
                        frontier_phi_71_pred_2 = _2696;
                        frontier_phi_71_pred_3 = _2695;
                        frontier_phi_71_pred_4 = _2694;
                        frontier_phi_71_pred_5 = _2693;
                    }
                    _2283 = frontier_phi_71_pred;
                    _2281 = frontier_phi_71_pred_1;
                    _2291 = frontier_phi_71_pred_2;
                    _2289 = frontier_phi_71_pred_3;
                    _2287 = frontier_phi_71_pred_4;
                    _2285 = frontier_phi_71_pred_5;
                    uint _2477 = _2476 + 1u;
                    if (_2477 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2470 = _2281;
                        _2471 = _2283;
                        _2472 = _2285;
                        _2473 = _2287;
                        _2474 = _2289;
                        _2475 = _2291;
                        _2476 = _2477;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2291;
                frontier_phi_53_54_ladder_1 = _2287;
                frontier_phi_53_54_ladder_2 = _2285;
                frontier_phi_53_54_ladder_3 = _2283;
                frontier_phi_53_54_ladder_4 = _2281;
                frontier_phi_53_54_ladder_5 = _2289;
            }
            else
            {
                frontier_phi_53_54_ladder = _2146;
                frontier_phi_53_54_ladder_1 = _2142;
                frontier_phi_53_54_ladder_2 = _2140;
                frontier_phi_53_54_ladder_3 = _2138;
                frontier_phi_53_54_ladder_4 = _2136;
                frontier_phi_53_54_ladder_5 = _2144;
            }
            _2280 = frontier_phi_53_54_ladder_4;
            _2282 = frontier_phi_53_54_ladder_3;
            _2284 = frontier_phi_53_54_ladder_2;
            _2286 = frontier_phi_53_54_ladder_1;
            _2288 = frontier_phi_53_54_ladder_5;
            _2290 = frontier_phi_53_54_ladder;
        }
        float _2295 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2058 = (_2295 * _2286) + _1785;
        _2060 = (_2295 * _2288) + _1786;
        _2062 = (_2295 * _2290) + _1787;
        _2064 = ((_2280 * 0.039999999105930328369140625) * _2295) + _1941;
        _2066 = ((_2282 * 0.039999999105930328369140625) * _2295) + _1942;
        _2068 = ((_2284 * 0.039999999105930328369140625) * _2295) + _1943;
    }
    else
    {
        _2058 = _1785;
        _2060 = _1786;
        _2062 = _1787;
        _2064 = _1941;
        _2066 = _1942;
        _2068 = _1943;
    }
    float _3872 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3883 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3894 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _2085 = ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_2058 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _661))) + ((_2064 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1472)) * cbPerFrame._m0[3u].x);
    float _2086 = ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_2060 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _661))) + ((_2066 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1472)) * cbPerFrame._m0[3u].x);
    float _2087 = ((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_2062 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _661))) + ((_2068 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1472)) * cbPerFrame._m0[3u].x);
    uint _2091 = _636 + 6u;
    float _2099 = _596 / cbSceneParam._m0[86u].x;
    float _2100 = _597 / cbSceneParam._m0[86u].y;
    vec4 _2114 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2099, _2100, (log2((isnan(cbSceneParam._m0[77u].w) ? _583 : (isnan(_583) ? cbSceneParam._m0[77u].w : min(_583, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2116 = _2114.x;
    float _2117 = _2114.y;
    float _2118 = _2114.z;
    float _2119 = _2114.w;
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    if (_583 > cbSceneParam._m0[78u].w)
    {
        float _2161 = isnan(_583) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _583 : min(cbSceneParam._m0[80u].w, _583));
        float _2162 = _2161 / _583;
        float _2173 = _2162 * _259;
        float _2174 = _260 * _2162;
        float _2175 = (-0.0) - _2174;
        float _2176 = _2162 * _261;
        float _2178 = (cbSceneParam._m0[77u].w * _2175) / _2161;
        float _2179 = _2178 + cbSceneParam._m0[79u].w;
        float _2180 = cbSceneParam._m0[79u].w - _2174;
        float _2186 = sqrt(((_2173 * _2173) + (_2174 * _2174)) + (_2176 * _2176));
        float _2189 = (1.0 - (cbSceneParam._m0[77u].w / _2161)) * _2186;
        float _2195 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2197 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2406;
        if (abs((_2175 - _2178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2406 = ((((_2179 > 0.0) ? exp2(_2195 * _2179) : (2.0 - exp2(_2197 * _2179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2189;
        }
        else
        {
            float _2341 = 1.0 / cbSceneParam._m0[80u].x;
            float _2342 = isnan(_2180) ? _2179 : (isnan(_2179) ? _2180 : max(_2179, _2180));
            float _2343 = isnan(_2180) ? _2179 : (isnan(_2179) ? _2180 : min(_2179, _2180));
            float _2352 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : min(_2342, 0.0));
            float _2353 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : min(_2343, 0.0));
            _2406 = ((abs(_2186 / _2175) * cbSceneParam._m0[80u].y) * ((((_2352 - _2353) * 2.0) - ((exp2(_2195 * (isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0)))) - exp2(_2195 * (isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0))))) * _2341)) - ((exp2(_2197 * _2352) - exp2(_2197 * _2353)) * _2341))) + (_2189 * cbSceneParam._m0[80u].z);
        }
        vec4 _2408 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2099, _2100, 1.0), 0.0);
        float _2417 = exp2((_2406 * (-1.44269502162933349609375)) * (1.0 - _2408.w));
        float _2418 = log2(_2417);
        float _2434 = log2(_2119);
        _2199 = (exp2(_2434 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].x)) * _2408.x) / cbSceneParam._m0[78u].x)) + _2116;
        _2201 = (exp2(_2434 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].y)) * _2408.y) / cbSceneParam._m0[78u].y)) + _2117;
        _2203 = (exp2(_2434 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].z)) * _2408.z) / cbSceneParam._m0[78u].z)) + _2118;
        _2205 = _2417 * _2119;
    }
    else
    {
        _2199 = _2116;
        _2201 = _2117;
        _2203 = _2118;
        _2205 = _2119;
    }
    float _2217 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2218 = _2217 == 3.0;
    float _2219 = log2(_2205);
    float _2226 = exp2(_2219 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0)));
    float _2227 = exp2(_2219 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0)));
    float _2228 = exp2(_2219 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0)));
    float _2237 = (_2217 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2237 * (_2218 ? _2226 : (_2226 + (cbSceneParam._m0[72u].w * _2199)));
    SV_Target.y = _2237 * (_2218 ? _2227 : (_2227 + (cbSceneParam._m0[72u].w * _2201)));
    SV_Target.z = _2237 * (_2218 ? _2228 : (_2228 + (cbSceneParam._m0[72u].w * _2203)));
    SV_Target.w = cbInstanceData._m0[_2091].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2091].w;
}


