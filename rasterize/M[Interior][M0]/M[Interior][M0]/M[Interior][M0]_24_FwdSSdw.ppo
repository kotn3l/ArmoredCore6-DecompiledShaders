#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M0_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1004;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    vec4 _321 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _325 = _321.z;
    float _348 = (_321.x * 2.0) + (-1.0);
    float _350 = (_321.y * 2.0) + (-1.0);
    float _353 = _348 - (_348 * _286);
    float _354 = _350 - (_350 * _286);
    float _363 = cbMtdParam._m0[22u].y + _259;
    float _364 = cbMtdParam._m0[22u].z + _260;
    float _365 = cbMtdParam._m0[22u].w + _261;
    float _379 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_188, _189, _190));
    float _380 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_202, _203, _204));
    float _381 = (-0.0) - dot(vec3(_363, _364, _365), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _388 = _385 * _381;
    float _391 = ((_385 * _379) + (_353 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _392 = ((_385 * _380) + (_354 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _393 = fract(TEXCOORD.x);
    float _394 = fract(TEXCOORD.y);
    float _400;
    if (_391 > 0.0)
    {
        _400 = (1.0 - _393) / _391;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_391 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _393) / _391;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _400 = frontier_phi_3_2_ladder;
    }
    float _408;
    if (_392 > 0.0)
    {
        _408 = (1.0 - _394) / _392;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_392 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _394) / _392;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _408 = frontier_phi_7_6_ladder;
    }
    float _412 = (_388 > 0.0) ? (cbMtdParam._m0[15u].x / _388) : 5000.0;
    float _413 = isnan(_408) ? _400 : (isnan(_400) ? _408 : min(_400, _408));
    float _414 = isnan(_412) ? _413 : (isnan(_413) ? _412 : min(_413, _412));
    float _418 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _425 = ((_414 * _388) + _418) / _418;
    vec4 _450 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_393 + (-0.5)) + (_414 * _391)) / _425) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_394 + (-0.5)) + (_414 * _392)) / _425) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _454 = _450.z;
    float _470 = 0.5 - (_286 * 0.5);
    float _477 = ((((_452 - (_452 * _286)) * cbMtdParam._m0[9u].x) - _299) * _470) + _299;
    float _478 = ((((_453 - (_453 * _286)) * cbMtdParam._m0[9u].y) - _301) * _470) + _301;
    float _479 = (((cbMtdParam._m0[9u].z * (_454 - (_454 * _286))) - _303) * _470) + _303;
    vec4 _491 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _495 = _491.z;
    float _498 = (_491.x * 2.0) + (-1.0);
    float _499 = (_491.y * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3096 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0))));
    float _506 = _495 * _286;
    float _513 = (cbMtdParam._m0[15u].w * ((_325 - _506) + ((_495 - _325) * _286))) + _506;
    float _517 = (cbMtdParam._m0[16u].x * _353) + _498;
    float _518 = (cbMtdParam._m0[16u].x * _354) + _499;
    float _521 = fma(_505, _195, fma(_518, _202, _517 * _188));
    float _524 = fma(_505, _196, fma(_518, _203, _517 * _189));
    float _527 = fma(_505, _197, fma(_518, _204, _517 * _190));
    float _531 = inversesqrt(dot(vec3(_521, _524, _527), vec3(_521, _524, _527)));
    float _532 = _531 * _521;
    float _533 = _531 * _524;
    float _534 = _531 * _527;
    float _3107 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _535 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
    float _3118 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3129 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3140 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _554 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _558 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _559 = _259 * _558;
    float _560 = _260 * _558;
    float _561 = _261 * _558;
    float _567 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _568 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _588 = fma(_534, cbSceneParam._m0[5u].z, fma(_533, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _532));
    float _591 = fma(_534, cbSceneParam._m0[6u].z, fma(_533, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _532));
    float _594 = fma(_534, cbSceneParam._m0[7u].z, fma(_533, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _532));
    uint _607 = uint(roundEven(NORMAL.w)) * 13u;
    uint _610 = (_607 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3151 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
    float _3162 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0));
    float _3173 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0));
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _567, cbSceneParam._m0[86u].y * _568));
    float _633 = _630.x * TEXCOORD.z;
    float _634 = dot(vec3(_532, _533, _534), vec3(_559, _560, _561));
    float _637 = _634 * 2.0;
    float _641 = (_637 * _532) - _559;
    float _642 = (_637 * _533) - _560;
    float _643 = (_637 * _534) - _561;
    float _647 = abs(dot(vec3(_559, _560, _561), vec3(_532, _533, _534)));
    float _3184 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _649 = sqrt(_535);
    float _662 = exp2((_649 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_649 * 3.0));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1003;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _730 = fma(_702, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694));
        float _734 = fma(_702, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694));
        float _738 = fma(_702, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694));
        float _761 = _694 + _532;
        float _762 = _698 + _533;
        float _763 = _702 + _534;
        float _773 = fma(_763, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761)) - _730;
        float _774 = fma(_763, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761)) - _734;
        float _775 = fma(_763, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761)) - _738;
        float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
        float _792 = ((_779 * _773) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_730 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_779 * _774) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_734 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_779 * _775) / cbModelParam._m0[34u].z) + ((((((_738 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        float _831 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_797.x + (-0.5));
        float _833 = _831 * (_797.y + (-0.5));
        float _834 = _831 * (_797.z + (-0.5));
        float _841 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_804.x + (-0.5));
        float _843 = _841 * (_804.y + (-0.5));
        float _844 = _841 * (_804.z + (-0.5));
        float _851 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_811.x + (-0.5));
        float _853 = _851 * (_811.y + (-0.5));
        float _854 = _851 * (_811.z + (-0.5));
        float _861 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_818.x + (-0.5));
        float _863 = _861 * (_818.y + (-0.5));
        float _864 = _861 * (_818.z + (-0.5));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = _832 * 0.5;
        float _869 = _842 * 0.5;
        float _870 = _852 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _885 = (dot(vec3(_532, _533, _534), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3210 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _895 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3221 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3232 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0))) * (_897 + 1.0))) + _902) * _865;
        float _912 = _833 * 0.5;
        float _913 = _843 * 0.5;
        float _914 = _853 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_532, _533, _534), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3243 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3254 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3265 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) * (_939 + 1.0))) + _944) * _866;
        float _954 = _834 * 0.5;
        float _955 = _844 * 0.5;
        float _956 = _854 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_532, _533, _534), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3276 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3287 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3298 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * (_981 + 1.0))) + _986) * _867;
        _1003 = _834;
        _1005 = _833;
        _1006 = _832;
        _1007 = _844;
        _1008 = _843;
        _1009 = _842;
        _1010 = _854;
        _1011 = _853;
        _1012 = _852;
        _1013 = _867;
        _1014 = _866;
        _1015 = _865;
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
    }
    else
    {
        _1003 = _1004;
        _1005 = _1004;
        _1006 = _1004;
        _1007 = _1004;
        _1008 = _1004;
        _1009 = _1004;
        _1010 = _1004;
        _1011 = _1004;
        _1012 = _1004;
        _1013 = _1004;
        _1014 = _1004;
        _1015 = _1004;
        _1016 = 0.0;
        _1017 = 0.0;
        _1018 = 0.0;
    }
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1044 = fma(_702, cbModelParam._m0[30u].z, fma(_698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _694));
        float _1048 = fma(_702, cbModelParam._m0[31u].z, fma(_698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _694));
        float _1052 = fma(_702, cbModelParam._m0[32u].z, fma(_698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _694));
        float _1075 = _694 + _532;
        float _1076 = _698 + _533;
        float _1077 = _702 + _534;
        float _1087 = fma(_1077, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075)) - _1044;
        float _1088 = fma(_1077, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075)) - _1048;
        float _1089 = fma(_1077, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075)) - _1052;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1044 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1048 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[35u].z) + ((((((_1052 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1143 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1110.x + (-0.5));
        float _1145 = _1143 * (_1110.y + (-0.5));
        float _1146 = _1143 * (_1110.z + (-0.5));
        float _1153 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1117.x + (-0.5));
        float _1155 = _1153 * (_1117.y + (-0.5));
        float _1156 = _1153 * (_1117.z + (-0.5));
        float _1163 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1124.x + (-0.5));
        float _1165 = _1163 * (_1124.y + (-0.5));
        float _1166 = _1163 * (_1124.z + (-0.5));
        float _1173 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1131.x + (-0.5));
        float _1175 = _1173 * (_1131.y + (-0.5));
        float _1176 = _1173 * (_1131.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_532, _533, _534), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3339 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3350 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3361 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * (_1207 + 1.0))) + _1212) * _1177;
        float _1222 = _1145 * 0.5;
        float _1223 = _1155 * 0.5;
        float _1224 = _1165 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_532, _533, _534), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3394 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_1249 + 1.0))) + _1254) * _1178;
        float _1264 = _1146 * 0.5;
        float _1265 = _1156 * 0.5;
        float _1266 = _1166 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_532, _533, _534), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3427 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_1291 + 1.0))) + _1296) * _1179;
        _1313 = _1146;
        _1314 = _1145;
        _1315 = _1144;
        _1316 = _1156;
        _1317 = _1155;
        _1318 = _1154;
        _1319 = _1166;
        _1320 = _1165;
        _1321 = _1164;
        _1322 = _1179;
        _1323 = _1178;
        _1324 = _1177;
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1004;
        _1314 = _1004;
        _1315 = _1004;
        _1316 = _1004;
        _1317 = _1004;
        _1318 = _1004;
        _1319 = _1004;
        _1320 = _1004;
        _1321 = _1004;
        _1322 = _1004;
        _1323 = _1004;
        _1324 = _1004;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1016)) + _1016;
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1017)) + _1017;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1018)) + _1018;
    float _1360 = fma(_1339, cbSceneParam._m0[89u].z, fma(_1338, cbSceneParam._m0[89u].y, _1337 * cbSceneParam._m0[89u].x));
    float _1363 = fma(_1339, cbSceneParam._m0[90u].z, fma(_1338, cbSceneParam._m0[90u].y, _1337 * cbSceneParam._m0[90u].x));
    float _1366 = fma(_1339, cbSceneParam._m0[91u].z, fma(_1338, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1337));
    float _1381 = _641 * 0.5;
    float _1382 = _642 * 0.5;
    float _1383 = _643 * 0.5;
    float _1384 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1387 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1390 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1424;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1397 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1003, _1007, _1010, _1013));
        float _1401 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1405 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1412 = dot(vec4(cbModelParam._m0[39u]), vec4(_1381, _1382, _1383, 1.0));
        _1424 = dot(vec3(isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1424 = 1.0;
    }
    float _1435;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1426 = dot(vec4(cbModelParam._m0[40u]), vec4(_1381, _1382, _1383, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1439 = (_1435 * cbModelParam._m0[1u].x) + (_1424 * (1.0 - cbModelParam._m0[1u].x));
    float _1449 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _535);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1449 : min(cbModelParam._m0[25u].z, _1449));
    float _1531;
    float _1533;
    float _1535;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1498 = fma(_702, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694)) + cbModelParam._m0[13u].w;
        float _1502 = fma(_702, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694)) + cbModelParam._m0[14u].w;
        float _1506 = fma(_702, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694)) + cbModelParam._m0[15u].w;
        float _1509 = fma(_643, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641));
        float _1512 = fma(_643, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641));
        float _1515 = fma(_643, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641));
        float _1543;
        if (_1509 > 0.0)
        {
            _1543 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1543 = frontier_phi_22_20_ladder;
        }
        float _1913;
        if (_1512 > 0.0)
        {
            _1913 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1913 = frontier_phi_31_27_ladder;
        }
        float _2213;
        if (_1515 > 0.0)
        {
            _2213 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2213 = frontier_phi_45_38_ladder;
        }
        float _2215 = isnan(_1913) ? _1543 : (isnan(_1543) ? _1913 : min(_1543, _1913));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1509) + _1498;
        float _2221 = (_2216 * _1512) + _1502;
        float _2222 = (_2216 * _1515) + _1506;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2223;
        float _2226 = _2223 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2222 > _2226) || ((_2222 < _2224) || ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 < _2224) || (_2220 > _2226))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2222, cbModelParam._m0[9u].z, fma(_2221, cbModelParam._m0[9u].y, _2220 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2222, cbModelParam._m0[10u].z, fma(_2221, cbModelParam._m0[10u].y, _2220 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2222, cbModelParam._m0[11u].z, fma(_2221, cbModelParam._m0[11u].y, _2220 * cbModelParam._m0[11u].x))), _1450);
            frontier_phi_21_45_ladder = _2348.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2348.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2348.x * cbModelParam._m0[1u].y;
        }
        _1531 = frontier_phi_21_45_ladder_2;
        _1533 = frontier_phi_21_45_ladder_1;
        _1535 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_641, _642, _643), _1450);
        _1531 = _1519.x * cbModelParam._m0[1u].y;
        _1533 = _1519.y * cbModelParam._m0[1u].y;
        _1535 = _1519.z * cbModelParam._m0[1u].y;
    }
    float _1539 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _535);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1539 : min(cbModelParam._m0[25u].w, _1539));
    float _1629;
    float _1631;
    float _1633;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1593 = fma(_702, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694)) + cbModelParam._m0[21u].w;
        float _1597 = fma(_702, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694)) + cbModelParam._m0[22u].w;
        float _1601 = fma(_702, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694)) + cbModelParam._m0[23u].w;
        float _1604 = fma(_643, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641));
        float _1607 = fma(_643, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641));
        float _1610 = fma(_643, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641));
        float _1918;
        if (_1604 > 0.0)
        {
            _1918 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1918 = frontier_phi_33_29_ladder;
        }
        float _2239;
        if (_1607 > 0.0)
        {
            _2239 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2239 = frontier_phi_47_40_ladder;
        }
        float _2408;
        if (_1610 > 0.0)
        {
            _2408 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2408 = frontier_phi_61_56_ladder;
        }
        float _2410 = isnan(_2239) ? _1918 : (isnan(_1918) ? _2239 : min(_1918, _2239));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1604) + _1593;
        float _2416 = (_2411 * _1607) + _1597;
        float _2417 = (_2411 * _1610) + _1601;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2418;
        float _2421 = _2418 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2417 > _2421) || ((_2417 < _2419) || ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 < _2419) || (_2415 > _2421))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2417, cbModelParam._m0[17u].z, fma(_2416, cbModelParam._m0[17u].y, _2415 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2417, cbModelParam._m0[18u].z, fma(_2416, cbModelParam._m0[18u].y, _2415 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2417, cbModelParam._m0[19u].z, fma(_2416, cbModelParam._m0[19u].y, _2415 * cbModelParam._m0[19u].x))), _1540);
            frontier_phi_30_61_ladder = _2650.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2650.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2650.x * cbModelParam._m0[1u].z;
        }
        _1629 = frontier_phi_30_61_ladder_2;
        _1631 = frontier_phi_30_61_ladder_1;
        _1633 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_641, _642, _643), _1540);
        _1629 = _1613.x * cbModelParam._m0[1u].z;
        _1631 = _1613.y * cbModelParam._m0[1u].z;
        _1633 = _1613.z * cbModelParam._m0[1u].z;
    }
    float _1645 = ((((1.0 - _662) * ((_649 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_662 * _649)) * _633;
    float _1646 = _1645 * ((cbModelParam._m0[1u].w * (_1629 - _1531)) + _1531);
    float _1647 = _1645 * ((cbModelParam._m0[1u].w * (_1631 - _1533)) + _1533);
    float _1648 = _1645 * ((cbModelParam._m0[1u].w * (_1633 - _1535)) + _1535);
    float _1651 = fma(_1648, cbSceneParam._m0[89u].z, fma(_1647, cbSceneParam._m0[89u].y, _1646 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1648, cbSceneParam._m0[90u].z, fma(_1647, cbSceneParam._m0[90u].y, _1646 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1648, cbSceneParam._m0[91u].z, fma(_1647, cbSceneParam._m0[91u].y, _1646 * cbSceneParam._m0[91u].x));
    vec4 _1665 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_567, _568));
    float _1667 = _1665.w;
    float _1679 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1667);
    float _1680 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1667);
    float _1681 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1667);
    uvec4 _1685 = floatBitsToUint(cbInstanceData._m0[_607 + 5u]);
    uint _1687 = _1685.x * 14u;
    uint _1688 = _1687 + 13u;
    float _1693 = _633 + (-1.0);
    float _1696 = (cbLight._m0[_1688].x * _1693) + 1.0;
    float _1697 = (cbLight._m0[_1688].y * _1693) + 1.0;
    uint _1698 = _1687 + 5u;
    float _1704 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1708 = _1687 + 4u;
    float _1717 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1721 = _1687 | 1u;
    float _1732 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_532, _533, _534));
    float _1735 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_532, _533, _534));
    float _3563 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _3574 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1740 = (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 0.3183098733425140380859375;
    float _1742 = (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.3183098733425140380859375;
    float _1749 = ((cbLight._m0[_1698].x * _1704) * _1742) + (((cbLight._m0[_1708].x * _1679) * _1717) * _1740);
    float _1750 = ((_1704 * cbLight._m0[_1698].y) * _1742) + (((cbLight._m0[_1708].y * _1680) * _1717) * _1740);
    float _1751 = ((_1704 * cbLight._m0[_1698].z) * _1742) + (((cbLight._m0[_1708].z * _1681) * _1717) * _1740);
    uint _1753 = _1687 + 8u;
    float _1766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1687].w)) * _535) * 0.949999988079071044921875);
    float _1767 = _1766 * _1766;
    float _1768 = cbLight._m0[_1687].x + _559;
    float _1769 = cbLight._m0[_1687].y + _560;
    float _1770 = cbLight._m0[_1687].z + _561;
    float _1774 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
    float _1775 = _1774 * _1768;
    float _1776 = _1774 * _1769;
    float _1777 = _1774 * _1770;
    float _1778 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_1687].xyz));
    float _3585 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _1782 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _1783 = dot(vec3(_532, _533, _534), vec3(_1775, _1776, _1777));
    float _3607 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _1787 = dot(vec3(cbLight._m0[_1687].xyz), vec3(_1775, _1776, _1777));
    float _3618 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1791 = _1767 * _1767;
    float _1795 = ((_1786 * _1786) * (_1791 + (-1.0))) + 1.0;
    float _1806 = (exp2(log2(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1807 = 1.0 - _1767;
    float _1818 = (0.5 / (((_1782 * ((_1781 * _1807) + _1767)) + 9.9999999392252902907785028219223e-09) + (((_1782 * _1807) + _1767) * _1781))) * _1781;
    float _3629 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1791 / ((_1795 * _1795) * 3.141590118408203125));
    uint _1834 = _1687 + 9u;
    float _1845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1721].w)) * _535) * 0.949999988079071044921875);
    float _1846 = _1845 * _1845;
    float _1847 = cbLight._m0[_1721].x + _559;
    float _1848 = cbLight._m0[_1721].y + _560;
    float _1849 = cbLight._m0[_1721].z + _561;
    float _1853 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
    float _1854 = _1853 * _1847;
    float _1855 = _1853 * _1848;
    float _1856 = _1853 * _1849;
    float _1857 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_1721].xyz));
    float _3640 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _1861 = dot(vec3(_532, _533, _534), vec3(_1854, _1855, _1856));
    float _3651 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _1865 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1854, _1855, _1856));
    float _3662 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1869 = _1846 * _1846;
    float _1873 = ((_1864 * _1864) * (_1869 + (-1.0))) + 1.0;
    float _1882 = (exp2(log2(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1883 = 1.0 - _1846;
    float _1893 = (0.5 / (((_1782 * ((_1860 * _1883) + _1846)) + 9.9999999392252902907785028219223e-09) + (((_1782 * _1883) + _1846) * _1860))) * _1860;
    float _3673 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1895 = (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1869 / ((_1873 * _1873) * 3.141590118408203125));
    float _1905 = (((_1882 * cbLight._m0[_1834].x) * _1895) * _1704) + ((((cbLight._m0[_1753].x * _1679) * _1806) * _1820) * _1717);
    float _1906 = (((_1882 * cbLight._m0[_1834].y) * _1895) * _1704) + ((((cbLight._m0[_1753].y * _1680) * _1806) * _1820) * _1717);
    float _1907 = (((_1882 * cbLight._m0[_1834].z) * _1895) * _1704) + ((((cbLight._m0[_1753].z * _1681) * _1806) * _1820) * _1717);
    float _2022;
    float _2024;
    float _2026;
    float _2028;
    float _2030;
    float _2032;
    if (_1685.y == 0u)
    {
        float _1962 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1962;
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1962;
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1962;
        uvec4 _1977 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1978 = _1977.x;
        uint _1989 = uint((float(_1977.y) * floor(float(uint(cbSceneParam._m0[85u].y * _568) / _1978))) + floor(float(uint(cbSceneParam._m0[85u].x * _567) / _1978)));
        float _1999 = (log2(_1965 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2000 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        uint _2003 = uint(isnan(14.0) ? _2000 : (isnan(_2000) ? 14.0 : min(_2000, 14.0)));
        uvec4 _2008 = texelFetch(g_lightClusterGridBuffer, int(((_2003 << 2u) + (_1989 << 6u)) >> 2u));
        uint _2009 = _2008.x;
        uint _2010 = _1977.z;
        float _2100;
        float _2102;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        if (((((1u << ((_2010 >> 4u) & 15u)) + 4294967295u) & _2009) == 0u) || ((_2010 & 240u) == 0u))
        {
            _2100 = 0.0;
            _2102 = 0.0;
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
        }
        else
        {
            float _2101;
            float _2103;
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2276 = 0.0;
            float _2277 = 0.0;
            float _2278 = 0.0;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            uint _2282 = 0u;
            uint _2291;
            bool _2292;
            for (;;)
            {
                _2291 = texelFetch(g_lightClassification, int((((_2003 << 5u) + (_1989 << 9u)) + (_2282 << 2u)) >> 2u)).x;
                _2292 = _2291 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2292)
                {
                    frontier_phi_58_pred = _2277;
                    frontier_phi_58_pred_1 = _2281;
                    frontier_phi_58_pred_2 = _2280;
                    frontier_phi_58_pred_3 = _2279;
                    frontier_phi_58_pred_4 = _2278;
                    frontier_phi_58_pred_5 = _2276;
                }
                else
                {
                    float _2451;
                    float _2452;
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    uint _2457;
                    _2451 = _2276;
                    _2452 = _2277;
                    _2453 = _2278;
                    _2454 = _2279;
                    _2455 = _2280;
                    _2456 = _2281;
                    _2457 = _2291;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    for (;;)
                    {
                        uint _2461 = uint(findLSB(_2457)) + (_2282 << 5u);
                        uint _2458 = (_2457 + 4294967295u) & _2457;
                        uint _2463 = _2461 * 48u;
                        vec4 _2477 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2463)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 3u)).x));
                        uint _2483 = (_2461 * 48u) + 4u;
                        vec4 _2496 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2483)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 3u)).x));
                        uint _2502 = (_2461 * 48u) + 8u;
                        vec3 _2513 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2502)).x, texelFetch(g_PointLightRenderingBuffer, int(_2502 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2502 + 2u)).x));
                        float _2517 = _2477.x - _1963;
                        float _2518 = _2477.y - _1964;
                        float _2519 = _2477.z - _1965;
                        float _2520 = dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519));
                        float _2523 = inversesqrt(_2520);
                        float _2524 = _2523 * _2517;
                        float _2525 = _2523 * _2518;
                        float _2526 = _2523 * _2519;
                        float _2527 = dot(vec3(_588, _591, _594), vec3(_2524, _2525, _2526));
                        float _2532 = 1.0 - (_2520 * _2477.w);
                        float _3694 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
                        float _2533 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
                        float _2534 = sqrt(_2520) * _2496.w;
                        float _2537 = 1.39999997615814208984375 / (_2534 + 1.39999997615814208984375);
                        float _2538 = _2537 * _2537;
                        float _2541 = ((1.0 - _2538) * _2527) + _2538;
                        float _2544 = _2534 * _2534;
                        float _2548 = ((isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))) * _2533) / ((_2544 * 0.699999988079071044921875) + 1.0);
                        float _2552 = (-0.0) - _1963;
                        float _2553 = (-0.0) - _1964;
                        float _2554 = (-0.0) - _1965;
                        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
                        float _2559 = _2558 * _2552;
                        float _2560 = _2558 * _2553;
                        float _2561 = _2558 * _2554;
                        float _2569 = exp2(log2(1.0 / ((_2544 * 3.5) + 5.0)) * 0.25);
                        float _2570 = 1.0 - _649;
                        float _2577 = sqrt(1.0 - ((1.0 - (_2570 * _2570)) * (1.0 - (_2569 * _2569))));
                        float _2578 = _2577 * _2577;
                        float _2579 = _2578 * _2578;
                        float _2580 = _2559 + _2524;
                        float _2581 = _2560 + _2525;
                        float _2582 = _2561 + _2526;
                        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
                        float _2590 = dot(vec3(_588, _591, _594), vec3(_2559, _2560, _2561));
                        float _3710 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
                        float _2593 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
                        float _2594 = dot(vec3(_588, _591, _594), vec3(_2586 * _2580, _2586 * _2581, _2586 * _2582));
                        float _3721 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
                        float _2597 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
                        float _2601 = ((_2597 * _2597) * (_2579 + (-1.0))) + 1.0;
                        float _2602 = _2537 * _2578;
                        float _2603 = _2602 * _2602;
                        float _2606 = ((1.0 - _2603) * _2527) + _2603;
                        float _3732 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
                        float _2607 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
                        float _2608 = 1.0 - _2578;
                        float _2618 = (0.5 / (((_2607 * ((_2593 * _2608) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2608) + _2578) * _2593))) * _2607;
                        float _3743 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                        float _2629 = (((_2579 * 3.1415927410125732421875) * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) / ((_2601 * _2601) * ((_2544 * 2.1991131305694580078125) + 3.141590118408203125))) * _2533;
                        _2360 = (_2548 * _2496.x) + _2454;
                        _2361 = (_2548 * _2496.y) + _2455;
                        _2362 = (_2548 * _2496.z) + _2456;
                        _2357 = (_2629 * _2513.x) + _2451;
                        _2358 = (_2629 * _2513.y) + _2452;
                        _2359 = (_2629 * _2513.z) + _2453;
                        if (_2458 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2451 = _2357;
                            _2452 = _2358;
                            _2453 = _2359;
                            _2454 = _2360;
                            _2455 = _2361;
                            _2456 = _2362;
                            _2457 = _2458;
                        }
                    }
                    frontier_phi_58_pred = _2358;
                    frontier_phi_58_pred_1 = _2362;
                    frontier_phi_58_pred_2 = _2361;
                    frontier_phi_58_pred_3 = _2360;
                    frontier_phi_58_pred_4 = _2359;
                    frontier_phi_58_pred_5 = _2357;
                }
                _2103 = frontier_phi_58_pred;
                _2111 = frontier_phi_58_pred_1;
                _2109 = frontier_phi_58_pred_2;
                _2107 = frontier_phi_58_pred_3;
                _2105 = frontier_phi_58_pred_4;
                _2101 = frontier_phi_58_pred_5;
                uint _2283 = _2282 + 1u;
                if (_2283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2276 = _2101;
                    _2277 = _2103;
                    _2278 = _2105;
                    _2279 = _2107;
                    _2280 = _2109;
                    _2281 = _2111;
                    _2282 = _2283;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2100 = _2101;
            _2102 = _2103;
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
        }
        uvec4 _2114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2115 = _2114.z;
        uint _2117 = (_2115 >> 8u) & 15u;
        float _2244;
        float _2246;
        float _2248;
        float _2250;
        float _2252;
        float _2254;
        if (((4294967295u << _2117) & _2009) == 0u)
        {
            _2244 = _2100;
            _2246 = _2102;
            _2248 = _2104;
            _2250 = _2106;
            _2252 = _2108;
            _2254 = _2110;
        }
        else
        {
            float _2269 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
            float _2270 = _2269 * _1963;
            float _2271 = _2269 * _1964;
            float _2272 = _2269 * _1965;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2117 < ((_2115 >> 12u) & 15u))
            {
                float _2245;
                float _2247;
                float _2249;
                float _2251;
                float _2253;
                float _2255;
                float _2434 = _2100;
                float _2435 = _2102;
                float _2436 = _2104;
                float _2437 = _2106;
                float _2438 = _2108;
                float _2439 = _2110;
                uint _2440 = _2117;
                uint _2449;
                bool _2450;
                for (;;)
                {
                    _2449 = texelFetch(g_lightClassification, int((((_2003 << 5u) + (_1989 << 9u)) + (_2440 << 2u)) >> 2u)).x;
                    _2450 = _2449 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2450)
                    {
                        frontier_phi_67_pred = _2439;
                        frontier_phi_67_pred_1 = _2438;
                        frontier_phi_67_pred_2 = _2437;
                        frontier_phi_67_pred_3 = _2436;
                        frontier_phi_67_pred_4 = _2435;
                        frontier_phi_67_pred_5 = _2434;
                    }
                    else
                    {
                        float _2655;
                        float _2656;
                        float _2657;
                        float _2658;
                        float _2659;
                        float _2660;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2668 = _2434;
                        float _2669 = _2435;
                        float _2670 = _2436;
                        float _2671 = _2437;
                        float _2672 = _2438;
                        float _2673 = _2439;
                        uint _2674 = _2449;
                        uint _2675;
                        vec4 _2700;
                        float _2701;
                        vec4 _2716;
                        vec3 _2728;
                        vec4 _2743;
                        vec4 _2758;
                        float _2804;
                        bool _2805;
                        for (;;)
                        {
                            uint _2685 = ((_2440 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2674));
                            _2675 = (_2674 + 4294967295u) & _2674;
                            uint _2687 = _2685 * 40u;
                            _2700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 3u)).x));
                            _2701 = _2700.w;
                            uint _2703 = (_2685 * 40u) + 4u;
                            _2716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 3u)).x));
                            uint _2718 = (_2685 * 40u) + 8u;
                            _2728 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x));
                            uint _2730 = (_2685 * 40u) + 16u;
                            _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            uint _2745 = (_2685 * 40u) + 20u;
                            _2758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 3u)).x));
                            uint _2760 = (_2685 * 40u) + 24u;
                            vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 3u)).x));
                            uint _2779 = (_2685 * 40u) + 28u;
                            vec4 _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            _2804 = fma(_1965, _2792.z, fma(_1964, _2792.y, _2792.x * _1963)) + _2792.w;
                            _2805 = !((fma(_1965, _2773.z, fma(_1964, _2773.y, _2773.x * _1963)) + _2773.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2805)
                            {
                                float _2832 = _2700.x - _1963;
                                float _2833 = _2700.y - _1964;
                                float _2834 = _2700.z - _1965;
                                float _2835 = dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834));
                                float _2838 = inversesqrt(_2835);
                                float _2839 = _2838 * _2832;
                                float _2840 = _2838 * _2833;
                                float _2841 = _2838 * _2834;
                                float _2845 = 1.0 - (_2835 / (_2701 * _2701));
                                float _3754 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                                float _2846 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
                                float _2850 = sqrt(_2835) * _2716.w;
                                float _2852 = 1.39999997615814208984375 / (_2850 + 1.39999997615814208984375);
                                float _2853 = _2852 * _2852;
                                float _2856 = ((1.0 - _2853) * dot(vec3(_2839, _2840, _2841), vec3(_588, _591, _594))) + _2853;
                                float _2859 = _2850 * _2850;
                                float _2863 = (fma(_1965, _2743.z, fma(_1964, _2743.y, _2743.x * _1963)) + _2743.w) / _2804;
                                float _2864 = (fma(_1965, _2758.z, fma(_1964, _2758.y, _2758.x * _1963)) + _2758.w) / _2804;
                                float _2868 = 1.0 - dot(vec2(_2863, _2864), vec2(_2863, _2864));
                                float _3770 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                                float _2869 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
                                float _2870 = _2869 * (((isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))) * _2846) / ((_2859 * 0.699999988079071044921875) + 1.0));
                                float _2882 = exp2(log2(1.0 / ((_2859 * 3.5) + 5.0)) * 0.25);
                                float _2883 = 1.0 - _649;
                                float _2890 = sqrt(1.0 - ((1.0 - (_2883 * _2883)) * (1.0 - (_2882 * _2882))));
                                float _2891 = _2890 * _2890;
                                float _2892 = _2891 * _2891;
                                float _2893 = _2839 - _2270;
                                float _2894 = _2840 - _2271;
                                float _2895 = _2841 - _2272;
                                float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
                                float _2903 = dot(vec3(_588, _591, _594), vec3((-0.0) - _2270, (-0.0) - _2271, (-0.0) - _2272));
                                float _3781 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                                float _2906 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
                                float _2907 = dot(vec3(_588, _591, _594), vec3(_2899 * _2893, _2899 * _2894, _2899 * _2895));
                                float _3792 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                                float _2910 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
                                float _2914 = ((_2910 * _2910) * (_2892 + (-1.0))) + 1.0;
                                float _2915 = _2852 * _2891;
                                float _2916 = _2915 * _2915;
                                float _2922 = ((1.0 - _2916) * dot(vec3(_588, _591, _594), vec3(_2839, _2840, _2841))) + _2916;
                                float _3803 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                                float _2923 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
                                float _2924 = 1.0 - _2891;
                                float _2934 = (0.5 / (((_2923 * ((_2906 * _2924) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2923 * _2924) + _2891) * _2906))) * _2923;
                                float _3814 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                                float _2944 = (_2869 * _2846) * (((_2892 * 3.1415927410125732421875) * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) / ((_2914 * _2914) * ((_2859 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2870 * _2716.z;
                                frontier_phi_73_pred_1 = _2870 * _2716.y;
                                frontier_phi_73_pred_2 = _2870 * _2716.x;
                                frontier_phi_73_pred_3 = _2944 * _2728.z;
                                frontier_phi_73_pred_4 = _2944 * _2728.y;
                                frontier_phi_73_pred_5 = _2944 * _2728.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2953 = frontier_phi_73_pred;
                            _2952 = frontier_phi_73_pred_1;
                            _2951 = frontier_phi_73_pred_2;
                            _2950 = frontier_phi_73_pred_3;
                            _2949 = frontier_phi_73_pred_4;
                            _2948 = frontier_phi_73_pred_5;
                            _2658 = _2951 + _2671;
                            _2659 = _2952 + _2672;
                            _2660 = _2953 + _2673;
                            _2655 = _2948 + _2668;
                            _2656 = _2949 + _2669;
                            _2657 = _2950 + _2670;
                            if (_2675 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2668 = _2655;
                                _2669 = _2656;
                                _2670 = _2657;
                                _2671 = _2658;
                                _2672 = _2659;
                                _2673 = _2660;
                                _2674 = _2675;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2660;
                        frontier_phi_67_pred_1 = _2659;
                        frontier_phi_67_pred_2 = _2658;
                        frontier_phi_67_pred_3 = _2657;
                        frontier_phi_67_pred_4 = _2656;
                        frontier_phi_67_pred_5 = _2655;
                    }
                    _2255 = frontier_phi_67_pred;
                    _2253 = frontier_phi_67_pred_1;
                    _2251 = frontier_phi_67_pred_2;
                    _2249 = frontier_phi_67_pred_3;
                    _2247 = frontier_phi_67_pred_4;
                    _2245 = frontier_phi_67_pred_5;
                    uint _2441 = _2440 + 1u;
                    if (_2441 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2434 = _2245;
                        _2435 = _2247;
                        _2436 = _2249;
                        _2437 = _2251;
                        _2438 = _2253;
                        _2439 = _2255;
                        _2440 = _2441;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2251;
                frontier_phi_49_50_ladder_1 = _2255;
                frontier_phi_49_50_ladder_2 = _2253;
                frontier_phi_49_50_ladder_3 = _2249;
                frontier_phi_49_50_ladder_4 = _2247;
                frontier_phi_49_50_ladder_5 = _2245;
            }
            else
            {
                frontier_phi_49_50_ladder = _2106;
                frontier_phi_49_50_ladder_1 = _2110;
                frontier_phi_49_50_ladder_2 = _2108;
                frontier_phi_49_50_ladder_3 = _2104;
                frontier_phi_49_50_ladder_4 = _2102;
                frontier_phi_49_50_ladder_5 = _2100;
            }
            _2244 = frontier_phi_49_50_ladder_5;
            _2246 = frontier_phi_49_50_ladder_4;
            _2248 = frontier_phi_49_50_ladder_3;
            _2250 = frontier_phi_49_50_ladder;
            _2252 = frontier_phi_49_50_ladder_2;
            _2254 = frontier_phi_49_50_ladder_1;
        }
        float _2259 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _2022 = (_2259 * _2250) + _1749;
        _2024 = (_2259 * _2252) + _1750;
        _2026 = (_2259 * _2254) + _1751;
        _2028 = ((_2244 * 0.039999999105930328369140625) * _2259) + _1905;
        _2030 = ((_2246 * 0.039999999105930328369140625) * _2259) + _1906;
        _2032 = ((_2248 * 0.039999999105930328369140625) * _2259) + _1907;
    }
    else
    {
        _2022 = _1749;
        _2024 = _1750;
        _2026 = _1751;
        _2028 = _1905;
        _2030 = _1906;
        _2032 = _1907;
    }
    float _3830 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3841 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3852 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _2049 = ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_2022 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _633))) + ((_2028 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1439)) * cbPerFrame._m0[3u].x);
    float _2050 = ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_2024 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _633))) + ((_2030 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1439)) * cbPerFrame._m0[3u].x);
    float _2051 = ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_2026 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _633))) + ((_2032 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1439)) * cbPerFrame._m0[3u].x);
    uint _2055 = _607 + 6u;
    float _2063 = _567 / cbSceneParam._m0[86u].x;
    float _2064 = _568 / cbSceneParam._m0[86u].y;
    vec4 _2078 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2063, _2064, (log2((isnan(cbSceneParam._m0[77u].w) ? _554 : (isnan(_554) ? cbSceneParam._m0[77u].w : min(_554, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2080 = _2078.x;
    float _2081 = _2078.y;
    float _2082 = _2078.z;
    float _2083 = _2078.w;
    float _2163;
    float _2165;
    float _2167;
    float _2169;
    if (_554 > cbSceneParam._m0[78u].w)
    {
        float _2125 = isnan(_554) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _554 : min(cbSceneParam._m0[80u].w, _554));
        float _2126 = _2125 / _554;
        float _2137 = _2126 * _259;
        float _2138 = _260 * _2126;
        float _2139 = (-0.0) - _2138;
        float _2140 = _2126 * _261;
        float _2142 = (cbSceneParam._m0[77u].w * _2139) / _2125;
        float _2143 = _2142 + cbSceneParam._m0[79u].w;
        float _2144 = cbSceneParam._m0[79u].w - _2138;
        float _2150 = sqrt(((_2137 * _2137) + (_2138 * _2138)) + (_2140 * _2140));
        float _2153 = (1.0 - (cbSceneParam._m0[77u].w / _2125)) * _2150;
        float _2159 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2161 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2370;
        if (abs((_2139 - _2142) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2370 = ((((_2143 > 0.0) ? exp2(_2159 * _2143) : (2.0 - exp2(_2161 * _2143))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2153;
        }
        else
        {
            float _2305 = 1.0 / cbSceneParam._m0[80u].x;
            float _2306 = isnan(_2144) ? _2143 : (isnan(_2143) ? _2144 : max(_2143, _2144));
            float _2307 = isnan(_2144) ? _2143 : (isnan(_2143) ? _2144 : min(_2143, _2144));
            float _2316 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : min(_2306, 0.0));
            float _2317 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : min(_2307, 0.0));
            _2370 = ((abs(_2150 / _2139) * cbSceneParam._m0[80u].y) * ((((_2316 - _2317) * 2.0) - ((exp2(_2159 * (isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0)))) - exp2(_2159 * (isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))))) * _2305)) - ((exp2(_2161 * _2316) - exp2(_2161 * _2317)) * _2305))) + (_2153 * cbSceneParam._m0[80u].z);
        }
        vec4 _2372 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2063, _2064, 1.0), 0.0);
        float _2381 = exp2((_2370 * (-1.44269502162933349609375)) * (1.0 - _2372.w));
        float _2382 = log2(_2381);
        float _2398 = log2(_2083);
        _2163 = (exp2(_2398 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2382 * cbSceneParam._m0[78u].x)) * _2372.x) / cbSceneParam._m0[78u].x)) + _2080;
        _2165 = (exp2(_2398 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2382 * cbSceneParam._m0[78u].y)) * _2372.y) / cbSceneParam._m0[78u].y)) + _2081;
        _2167 = (exp2(_2398 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2382 * cbSceneParam._m0[78u].z)) * _2372.z) / cbSceneParam._m0[78u].z)) + _2082;
        _2169 = _2381 * _2083;
    }
    else
    {
        _2163 = _2080;
        _2165 = _2081;
        _2167 = _2082;
        _2169 = _2083;
    }
    float _2181 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2182 = _2181 == 3.0;
    float _2183 = log2(_2169);
    float _2190 = exp2(_2183 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)));
    float _2191 = exp2(_2183 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0)));
    float _2192 = exp2(_2183 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    float _2201 = (_2181 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2201 * (_2182 ? _2190 : (_2190 + (cbSceneParam._m0[72u].w * _2163)));
    SV_Target.y = _2201 * (_2182 ? _2191 : (_2191 + (cbSceneParam._m0[72u].w * _2165)));
    SV_Target.z = _2201 * (_2182 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2167)));
    SV_Target.w = cbInstanceData._m0[_2055].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2055].w;
}


