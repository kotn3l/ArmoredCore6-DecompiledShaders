#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _883;
uint _2056;
uint _2057;
uint _2058;
uint _2301;
uint _2302;
uint _2303;
float _2574;
float _2575;
float _2576;
float _2577;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    float _285 = cbMtdParam._m0[22u].y + _257;
    float _286 = cbMtdParam._m0[22u].z + _258;
    float _287 = cbMtdParam._m0[22u].w + _259;
    float _301 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _302 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_199 * TANGENT.x, _199 * TANGENT.y, _199 * TANGENT.z));
    float _303 = (-0.0) - dot(vec3(_285, _286, _287), vec3((-0.0) - (_192 * NORMAL.x), (-0.0) - (_192 * NORMAL.y), (-0.0) - (_192 * NORMAL.z)));
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _307 * _303;
    float _310 = (cbMtdParam._m0[19u].x * _301) * _307;
    float _312 = (cbMtdParam._m0[18u].w * _302) * _307;
    float _313 = fract(TEXCOORD.x);
    float _314 = fract(TEXCOORD.y);
    float _320;
    if (_310 > 0.0)
    {
        _320 = (1.0 - _313) / _310;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _313) / _310;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _320 = frontier_phi_3_2_ladder;
    }
    float _328;
    if (_312 > 0.0)
    {
        _328 = (1.0 - _314) / _312;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _314) / _312;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _328 = frontier_phi_7_6_ladder;
    }
    bool _330 = _308 > 0.0;
    float _332 = _330 ? (cbMtdParam._m0[15u].x / _308) : 5000.0;
    float _333 = isnan(_328) ? _320 : (isnan(_320) ? _328 : min(_320, _328));
    float _334 = isnan(_332) ? _333 : (isnan(_333) ? _332 : min(_333, _332));
    float _338 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _339 = _313 + (-0.5);
    float _342 = _314 + (-0.5);
    float _345 = ((_334 * _308) + _338) / _338;
    vec4 _371 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_339 + (_334 * _310)) / _345) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_342 + (_334 * _312)) / _345) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _382 = cbMtdParam._m0[9u].x * _371.x;
    float _383 = cbMtdParam._m0[9u].y * _371.y;
    float _384 = cbMtdParam._m0[9u].z * _371.z;
    float _406 = (cbMtdParam._m0[21u].x * _301) * _307;
    float _408 = (cbMtdParam._m0[20u].w * _302) * _307;
    bool _409 = _406 > 0.0;
    float _414;
    if (_409)
    {
        _414 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _414 = frontier_phi_11_10_ladder;
    }
    bool _416 = _408 > 0.0;
    float _421;
    if (_416)
    {
        _421 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _421 = frontier_phi_15_14_ladder;
    }
    float _424 = _330 ? (cbMtdParam._m0[16u].z / _308) : 5000.0;
    float _425 = isnan(_421) ? _414 : (isnan(_414) ? _421 : min(_414, _421));
    float _426 = isnan(_424) ? _425 : (isnan(_425) ? _424 : min(_425, _424));
    float _430 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _434 = ((_426 * _308) + _430) / _430;
    float _439 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _441 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _457 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_426 * _406)) / _434) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_426 * _408)) / _434) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _469;
    if (_409)
    {
        _469 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _469 = frontier_phi_19_18_ladder;
    }
    float _475;
    if (_416)
    {
        _475 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _475 = frontier_phi_23_22_ladder;
    }
    float _477 = isnan(_475) ? _469 : (isnan(_469) ? _475 : min(_469, _475));
    float _478 = isnan(_424) ? _477 : (isnan(_477) ? _424 : min(_477, _424));
    float _485 = ((_478 * _308) + _430) / _430;
    vec4 _499 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_478 * _406)) / _485) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_478 * _408)) / _485) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _501 = _499.w;
    float _508 = (_501 * ((_457.x * cbMtdParam._m0[10u].x) - _382)) + _382;
    float _509 = (_501 * ((_457.y * cbMtdParam._m0[10u].y) - _383)) + _383;
    float _510 = (_501 * ((_457.z * cbMtdParam._m0[10u].z) - _384)) + _384;
    float _525 = (cbMtdParam._m0[21u].z * _301) * _307;
    float _527 = (cbMtdParam._m0[21u].y * _302) * _307;
    bool _528 = _525 > 0.0;
    float _533;
    if (_528)
    {
        _533 = (1.0 - _313) / _525;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _313) / _525;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _533 = frontier_phi_27_26_ladder;
    }
    bool _535 = _527 > 0.0;
    float _540;
    if (_535)
    {
        _540 = (1.0 - _314) / _527;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _314) / _527;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _540 = frontier_phi_31_30_ladder;
    }
    float _543 = _330 ? (cbMtdParam._m0[18u].x / _308) : 5000.0;
    float _544 = isnan(_540) ? _533 : (isnan(_533) ? _540 : min(_533, _540));
    float _545 = isnan(_543) ? _544 : (isnan(_544) ? _543 : min(_544, _543));
    float _549 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _553 = ((_545 * _308) + _549) / _549;
    float _558 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _560 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _577 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_339 + (_545 * _525)) / _553) + 0.5) + _558) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_342 + (_545 * _527)) / _553) + 0.5) + _560) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _589;
    if (_528)
    {
        _589 = (1.0 - _313) / _525;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _313) / _525;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _589 = frontier_phi_35_34_ladder;
    }
    float _595;
    if (_535)
    {
        _595 = (1.0 - _314) / _527;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _314) / _527;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _595 = frontier_phi_39_38_ladder;
    }
    float _597 = isnan(_595) ? _589 : (isnan(_589) ? _595 : min(_589, _595));
    float _598 = isnan(_543) ? _597 : (isnan(_597) ? _543 : min(_597, _543));
    float _605 = ((_598 * _308) + _549) / _549;
    vec4 _619 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_339 + (_598 * _525)) / _605) + 0.5) + _558) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_342 + (_598 * _527)) / _605) + 0.5) + _560) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _621 = _619.w;
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _651 = _257 * _650;
    float _652 = _258 * _650;
    float _653 = _259 * _650;
    vec4 _658 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _660 = _658.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _730 = sqrt(((_257 * _257) + (_258 * _258)) + (_259 * _259));
        float _737 = (cbMatDynParam._m0[5u].x * _730) + cbMatDynParam._m0[5u].y;
        float _2636 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _2636 : (isnan(_2636) ? 1.0 : min(_2636, 1.0));
        float _742 = (cbMatDynParam._m0[5u].z * _730) + cbMatDynParam._m0[5u].w;
        float _2647 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2647 : (isnan(_2647) ? 1.0 : min(_2647, 1.0))) - _738)) + _738) < ((_660 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _683 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_673 * cbSceneParam._m0[86u].x, _674 * cbSceneParam._m0[86u].y));
    float _686 = _683.x * TEXCOORD.z;
    float _687 = (-0.0) - _651;
    float _688 = (-0.0) - _652;
    float _689 = (-0.0) - _653;
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _882;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = (cbModelParam._m0[37u].x * ((((fma(_719, cbModelParam._m0[26u].z, fma(_715, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _806 = (cbModelParam._m0[37u].y * ((((fma(_719, cbModelParam._m0[27u].z, fma(_715, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _807 = (((((fma(_719, cbModelParam._m0[28u].z, fma(_715, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _806, _807), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _806, _807), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _806, _807), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _806, _807), 0.0);
        float _844 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _855 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _865 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _875 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_831.x + (-0.5));
        float _877 = _875 * (_831.y + (-0.5));
        float _878 = _875 * (_831.z + (-0.5));
        _882 = _844 * (_810.z + (-0.5));
        _884 = _844 * (_810.y + (-0.5));
        _885 = _844 * (_810.x + (-0.5));
        _886 = _855 * (_817.z + (-0.5));
        _887 = _855 * (_817.y + (-0.5));
        _888 = _855 * (_817.x + (-0.5));
        _889 = _865 * (_824.z + (-0.5));
        _890 = _865 * (_824.y + (-0.5));
        _891 = _865 * (_824.x + (-0.5));
        _892 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        _893 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        _894 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    }
    else
    {
        _882 = _883;
        _884 = _883;
        _885 = _883;
        _886 = _883;
        _887 = _883;
        _888 = _883;
        _889 = _883;
        _890 = _883;
        _891 = _883;
        _892 = _883;
        _893 = _883;
        _894 = _883;
    }
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = (cbModelParam._m0[38u].x * ((((fma(_719, cbModelParam._m0[30u].z, fma(_715, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _711)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _952 = (cbModelParam._m0[38u].y * ((((fma(_719, cbModelParam._m0[31u].z, fma(_715, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _711)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _953 = (((((fma(_719, cbModelParam._m0[32u].z, fma(_715, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _711)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _988 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _998 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_976.x + (-0.5));
        float _1020 = _1018 * (_976.y + (-0.5));
        float _1021 = _1018 * (_976.z + (-0.5));
        _1025 = _988 * (_955.z + (-0.5));
        _1026 = _988 * (_955.y + (-0.5));
        _1027 = _988 * (_955.x + (-0.5));
        _1028 = _998 * (_962.z + (-0.5));
        _1029 = _998 * (_962.y + (-0.5));
        _1030 = _998 * (_962.x + (-0.5));
        _1031 = _1008 * (_969.z + (-0.5));
        _1032 = _1008 * (_969.y + (-0.5));
        _1033 = _1008 * (_969.x + (-0.5));
        _1034 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        _1035 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        _1036 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    }
    else
    {
        _1025 = _883;
        _1026 = _883;
        _1027 = _883;
        _1028 = _883;
        _1029 = _883;
        _1030 = _883;
        _1031 = _883;
        _1032 = _883;
        _1033 = _883;
        _1034 = _883;
        _1035 = _883;
        _1036 = _883;
    }
    float _1051 = _651 * (-0.5);
    float _1052 = _652 * (-0.5);
    float _1053 = _653 * (-0.5);
    float _1054 = dot(vec4(_1051, _1052, _1053, 1.0), vec4(_1027, _1030, _1033, _1036));
    float _1057 = dot(vec4(_1051, _1052, _1053, 1.0), vec4(_1026, _1029, _1032, _1035));
    float _1060 = dot(vec4(_1051, _1052, _1053, 1.0), vec4(_1025, _1028, _1031, _1034));
    float _1095;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1067 = dot(vec4(_1051, _1052, _1053, 1.0), vec4(_882, _886, _889, _892));
        float _1071 = dot(vec4(_1051, _1052, _1053, 1.0), vec4(_884, _887, _890, _893));
        float _1075 = dot(vec4(_1051, _1052, _1053, 1.0), vec4(_885, _888, _891, _894));
        float _1082 = dot(vec4(cbModelParam._m0[39u]), vec4(_1051, _1052, _1053, 1.0));
        _1095 = dot(vec3(isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)), isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)), isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1082) ? 0.0 : (isnan(0.0) ? _1082 : max(0.0, _1082))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1095 = 1.0;
    }
    float _1106;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1097 = dot(vec4(cbModelParam._m0[40u]), vec4(_1051, _1052, _1053, 1.0));
        _1106 = dot(vec3(isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)), isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)), isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1097) ? 0.0 : (isnan(0.0) ? _1097 : max(0.0, _1097))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1106 = 1.0;
    }
    float _1110 = (_1106 * cbModelParam._m0[1u].x) + (_1095 * (1.0 - cbModelParam._m0[1u].x));
    float _1116 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1197;
    float _1199;
    float _1201;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1164 = fma(_719, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711)) + cbModelParam._m0[13u].w;
        float _1168 = fma(_719, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711)) + cbModelParam._m0[14u].w;
        float _1172 = fma(_719, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711)) + cbModelParam._m0[15u].w;
        float _1175 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1178 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1181 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1207;
        if (_1175 > 0.0)
        {
            _1207 = abs((1.0 - _1164) / _1175);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1175 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1164 + 1.0) / _1175);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1207 = frontier_phi_57_55_ladder;
        }
        float _1484;
        if (_1178 > 0.0)
        {
            _1484 = abs((1.0 - _1168) / _1178);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1178 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1168 + 1.0) / _1178);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1484 = frontier_phi_66_62_ladder;
        }
        float _1788;
        if (_1181 > 0.0)
        {
            _1788 = abs((1.0 - _1172) / _1181);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1181 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1172 + 1.0) / _1181);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _1788 = frontier_phi_80_73_ladder;
        }
        float _1790 = isnan(_1484) ? _1207 : (isnan(_1207) ? _1484 : min(_1207, _1484));
        float _1791 = isnan(_1788) ? _1790 : (isnan(_1790) ? _1788 : min(_1790, _1788));
        float _1795 = (_1791 * _1175) + _1164;
        float _1796 = (_1791 * _1178) + _1168;
        float _1797 = (_1791 * _1181) + _1172;
        float _1798 = _1791 * 9.9999997473787516355514526367188e-05;
        float _1799 = (-1.0) - _1798;
        float _1801 = _1798 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_1797 > _1801) || ((_1797 < _1799) || ((_1796 > _1801) || ((_1796 < _1799) || ((_1795 < _1799) || (_1795 > _1801))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1797, cbModelParam._m0[9u].z, fma(_1796, cbModelParam._m0[9u].y, _1795 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1797, cbModelParam._m0[10u].z, fma(_1796, cbModelParam._m0[10u].y, _1795 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1797, cbModelParam._m0[11u].z, fma(_1796, cbModelParam._m0[11u].y, _1795 * cbModelParam._m0[11u].x))), _1116);
            frontier_phi_56_80_ladder = _1924.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _1924.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _1924.x * cbModelParam._m0[1u].y;
        }
        _1197 = frontier_phi_56_80_ladder_2;
        _1199 = frontier_phi_56_80_ladder_1;
        _1201 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1185 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1116);
        _1197 = _1185.x * cbModelParam._m0[1u].y;
        _1199 = _1185.y * cbModelParam._m0[1u].y;
        _1201 = _1185.z * cbModelParam._m0[1u].y;
    }
    float _1204 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1292;
    float _1294;
    float _1296;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1256 = fma(_719, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711)) + cbModelParam._m0[21u].w;
        float _1260 = fma(_719, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711)) + cbModelParam._m0[22u].w;
        float _1264 = fma(_719, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711)) + cbModelParam._m0[23u].w;
        float _1267 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1270 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1273 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1489;
        if (_1267 > 0.0)
        {
            _1489 = abs((1.0 - _1256) / _1267);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1267 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1256 + 1.0) / _1267);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1489 = frontier_phi_68_64_ladder;
        }
        float _1814;
        if (_1270 > 0.0)
        {
            _1814 = abs((1.0 - _1260) / _1270);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1270 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1260 + 1.0) / _1270);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _1814 = frontier_phi_82_75_ladder;
        }
        float _1986;
        if (_1273 > 0.0)
        {
            _1986 = abs((1.0 - _1264) / _1273);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1273 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1264 + 1.0) / _1273);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _1986 = frontier_phi_100_93_ladder;
        }
        float _1988 = isnan(_1814) ? _1489 : (isnan(_1489) ? _1814 : min(_1489, _1814));
        float _1989 = isnan(_1986) ? _1988 : (isnan(_1988) ? _1986 : min(_1988, _1986));
        float _1993 = (_1989 * _1267) + _1256;
        float _1994 = (_1989 * _1270) + _1260;
        float _1995 = (_1989 * _1273) + _1264;
        float _1996 = _1989 * 9.9999997473787516355514526367188e-05;
        float _1997 = (-1.0) - _1996;
        float _1999 = _1996 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_1995 > _1999) || ((_1995 < _1997) || ((_1994 > _1999) || ((_1994 < _1997) || ((_1993 < _1997) || (_1993 > _1999))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2164 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1995, cbModelParam._m0[17u].z, fma(_1994, cbModelParam._m0[17u].y, _1993 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1995, cbModelParam._m0[18u].z, fma(_1994, cbModelParam._m0[18u].y, _1993 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1995, cbModelParam._m0[19u].z, fma(_1994, cbModelParam._m0[19u].y, _1993 * cbModelParam._m0[19u].x))), _1204);
            frontier_phi_65_100_ladder = _2164.z * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2164.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2164.x * cbModelParam._m0[1u].z;
        }
        _1292 = frontier_phi_65_100_ladder_2;
        _1294 = frontier_phi_65_100_ladder_1;
        _1296 = frontier_phi_65_100_ladder;
    }
    else
    {
        vec4 _1276 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1204);
        _1292 = _1276.x * cbModelParam._m0[1u].z;
        _1294 = _1276.y * cbModelParam._m0[1u].z;
        _1296 = _1276.z * cbModelParam._m0[1u].z;
    }
    float _1308 = _686 * 0.01200000010430812835693359375;
    float _1310 = _1308 * ((cbModelParam._m0[1u].w * (_1292 - _1197)) + _1197);
    float _1311 = _1308 * ((cbModelParam._m0[1u].w * (_1294 - _1199)) + _1199);
    float _1312 = _1308 * ((cbModelParam._m0[1u].w * (_1296 - _1201)) + _1201);
    float _1333 = fma(_1312, cbSceneParam._m0[89u].z, fma(_1311, cbSceneParam._m0[89u].y, _1310 * cbSceneParam._m0[89u].x));
    float _1336 = fma(_1312, cbSceneParam._m0[90u].z, fma(_1311, cbSceneParam._m0[90u].y, _1310 * cbSceneParam._m0[90u].x));
    float _1339 = fma(_1312, cbSceneParam._m0[91u].z, fma(_1311, cbSceneParam._m0[91u].y, _1310 * cbSceneParam._m0[91u].x));
    uint _1346 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1350 = floatBitsToUint(cbInstanceData._m0[_1346 + 5u]);
    uint _1352 = _1350.x * 14u;
    uint _1353 = _1352 + 13u;
    float _1358 = _686 + (-1.0);
    float _1362 = (cbLight._m0[_1353].x * _1358) + 1.0;
    float _1363 = (cbLight._m0[_1353].y * _1358) + 1.0;
    uint _1364 = _1352 + 8u;
    float _1375 = cbLight._m0[_1352].x + _651;
    float _1376 = cbLight._m0[_1352].y + _652;
    float _1377 = cbLight._m0[_1352].z + _653;
    float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
    float _1385 = dot(vec3(0.0), vec3(cbLight._m0[_1352].xyz));
    float _2773 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
    float _1388 = isnan(1.0) ? _2773 : (isnan(_2773) ? 1.0 : min(_2773, 1.0));
    float _1389 = dot(vec3(0.0), vec3(_651, _652, _653));
    float _2784 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    float _1392 = isnan(1.0) ? _2784 : (isnan(_2784) ? 1.0 : min(_2784, 1.0));
    float _1393 = dot(vec3(cbLight._m0[_1352].xyz), vec3(_1375 * _1381, _1376 * _1381, _1377 * _1381));
    float _2795 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
    float _1404 = (exp2(log2(1.0 - (isnan(1.0) ? _2795 : (isnan(_2795) ? 1.0 : min(_2795, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1410 = (0.5 / ((_1388 + 9.9999999392252902907785028219223e-09) + _1392)) * _1388;
    float _2806 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
    float _1412 = (isnan(1.0) ? _2806 : (isnan(_2806) ? 1.0 : min(_2806, 1.0))) * 0.31831014156341552734375;
    float _1414 = isnan(1.0) ? _1362 : (isnan(_1362) ? 1.0 : min(_1362, 1.0));
    uint _1424 = _1352 + 9u;
    uint _1430 = _1352 | 1u;
    float _1436 = cbLight._m0[_1430].x + _651;
    float _1437 = cbLight._m0[_1430].y + _652;
    float _1438 = cbLight._m0[_1430].z + _653;
    float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
    float _1446 = dot(vec3(0.0), vec3(cbLight._m0[_1430].xyz));
    float _2822 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
    float _1449 = isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0));
    float _1450 = dot(vec3(cbLight._m0[_1430].xyz), vec3(_1436 * _1442, _1437 * _1442, _1438 * _1442));
    float _2833 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
    float _1459 = (exp2(log2(1.0 - (isnan(1.0) ? _2833 : (isnan(_2833) ? 1.0 : min(_2833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1463 = (0.5 / ((_1449 + 9.9999999392252902907785028219223e-09) + _1392)) * _1449;
    float _2844 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _1465 = (isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0))) * 0.31831014156341552734375;
    float _1466 = isnan(1.0) ? _1363 : (isnan(_1363) ? 1.0 : min(_1363, 1.0));
    float _1476 = (((_1459 * cbLight._m0[_1424].x) * _1465) * _1466) + (((_1404 * cbLight._m0[_1364].x) * _1412) * _1414);
    float _1477 = (((_1459 * cbLight._m0[_1424].y) * _1465) * _1466) + (((_1404 * cbLight._m0[_1364].y) * _1412) * _1414);
    float _1478 = (((_1459 * cbLight._m0[_1424].z) * _1465) * _1466) + (((_1404 * cbLight._m0[_1364].z) * _1412) * _1414);
    float _1594;
    float _1596;
    float _1598;
    if (_1350.y == 0u)
    {
        float _1534 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1535 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1534;
        float _1536 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1534;
        float _1537 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1534;
        uvec4 _1549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1550 = _1549.x;
        uint _1561 = uint((float(_1549.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _1550))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _1550)));
        float _1571 = (log2(_1537 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1572 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        uint _1575 = uint(isnan(14.0) ? _1572 : (isnan(_1572) ? 14.0 : min(_1572, 14.0)));
        uvec4 _1580 = texelFetch(g_lightClusterGridBuffer, int(((_1575 << 2u) + (_1561 << 6u)) >> 2u));
        uint _1581 = _1580.x;
        uint _1582 = _1549.z;
        float _1671;
        float _1673;
        float _1675;
        if (((((1u << ((_1582 >> 4u) & 15u)) + 4294967295u) & _1581) == 0u) || ((_1582 & 240u) == 0u))
        {
            _1671 = 0.0;
            _1673 = 0.0;
            _1675 = 0.0;
        }
        else
        {
            float _1672;
            float _1674;
            float _1676;
            float _1839 = 0.0;
            float _1840 = 0.0;
            float _1841 = 0.0;
            uint _1842 = 0u;
            uint _1851;
            bool _1852;
            for (;;)
            {
                _1851 = texelFetch(g_lightClassification, int((((_1575 << 5u) + (_1561 << 9u)) + (_1842 << 2u)) >> 2u)).x;
                _1852 = _1851 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                if (_1852)
                {
                    frontier_phi_95_pred = _1841;
                    frontier_phi_95_pred_1 = _1840;
                    frontier_phi_95_pred_2 = _1839;
                }
                else
                {
                    float _2026;
                    float _2027;
                    float _2028;
                    uint _2029;
                    _2026 = _1839;
                    _2027 = _1840;
                    _2028 = _1841;
                    _2029 = _1851;
                    float _1933;
                    float _1934;
                    float _1935;
                    for (;;)
                    {
                        uint _2033 = uint(findLSB(_2029)) + (_1842 << 5u);
                        uint _2030 = (_2029 + 4294967295u) & _2029;
                        uint _2035 = _2033 * 48u;
                        vec4 _2049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2035)).x, texelFetch(g_PointLightRenderingBuffer, int(_2035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2035 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2035 + 3u)).x));
                        uint _2066 = (_2033 * 48u) + 8u;
                        vec3 _2077 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2066)).x, texelFetch(g_PointLightRenderingBuffer, int(_2066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2066 + 2u)).x));
                        float _2081 = _2049.x - _1535;
                        float _2082 = _2049.y - _1536;
                        float _2083 = _2049.z - _1537;
                        float _2084 = dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083));
                        float _2087 = inversesqrt(_2084);
                        float _2096 = 1.0 - (_2084 * _2049.w);
                        float _2870 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
                        float _2098 = sqrt(_2084) * uintBitsToFloat(uvec4(_2056, _2057, _2058, texelFetch(g_PointLightRenderingBuffer, int(((_2033 * 48u) + 4u) + 3u)).x)).w;
                        float _2101 = 1.39999997615814208984375 / (_2098 + 1.39999997615814208984375);
                        float _2102 = _2101 * _2101;
                        float _2105 = ((1.0 - _2102) * dot(vec3(0.0), vec3(_2087 * _2081, _2087 * _2082, _2087 * _2083))) + _2102;
                        float _2107 = (-0.0) - _1535;
                        float _2108 = (-0.0) - _1536;
                        float _2109 = (-0.0) - _1537;
                        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
                        float _2117 = dot(vec3(0.0), vec3(_2113 * _2107, _2113 * _2108, _2113 * _2109));
                        float _2881 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
                        float _2892 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
                        float _2121 = isnan(1.0) ? _2892 : (isnan(_2892) ? 1.0 : min(_2892, 1.0));
                        float _2125 = (0.5 / (((isnan(1.0) ? _2881 : (isnan(_2881) ? 1.0 : min(_2881, 1.0))) + 9.9999999392252902907785028219223e-09) + _2121)) * _2121;
                        float _2903 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
                        float _2134 = (((isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0))) * 3.1415927410125732421875) / (((_2098 * _2098) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2870 : (isnan(_2870) ? 1.0 : min(_2870, 1.0)));
                        _1933 = (_2134 * _2077.x) + _2026;
                        _1934 = (_2134 * _2077.y) + _2027;
                        _1935 = (_2134 * _2077.z) + _2028;
                        if (_2030 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2026 = _1933;
                            _2027 = _1934;
                            _2028 = _1935;
                            _2029 = _2030;
                        }
                    }
                    frontier_phi_95_pred = _1935;
                    frontier_phi_95_pred_1 = _1934;
                    frontier_phi_95_pred_2 = _1933;
                }
                _1676 = frontier_phi_95_pred;
                _1674 = frontier_phi_95_pred_1;
                _1672 = frontier_phi_95_pred_2;
                uint _1843 = _1842 + 1u;
                if (_1843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1839 = _1672;
                    _1840 = _1674;
                    _1841 = _1676;
                    _1842 = _1843;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1671 = _1672;
            _1673 = _1674;
            _1675 = _1676;
        }
        uvec4 _1679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1680 = _1679.z;
        uint _1682 = (_1680 >> 8u) & 15u;
        float _1819;
        float _1821;
        float _1823;
        if (((4294967295u << _1682) & _1581) == 0u)
        {
            _1819 = _1671;
            _1821 = _1673;
            _1823 = _1675;
        }
        else
        {
            float _1835 = inversesqrt(dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            if (_1682 < ((_1680 >> 12u) & 15u))
            {
                float _1820;
                float _1822;
                float _1824;
                float _2012 = _1671;
                float _2013 = _1673;
                float _2014 = _1675;
                uint _2015 = _1682;
                uint _2024;
                bool _2025;
                for (;;)
                {
                    _2024 = texelFetch(g_lightClassification, int((((_1575 << 5u) + (_1561 << 9u)) + (_2015 << 2u)) >> 2u)).x;
                    _2025 = _2024 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    if (_2025)
                    {
                        frontier_phi_109_pred = _2014;
                        frontier_phi_109_pred_1 = _2013;
                        frontier_phi_109_pred_2 = _2012;
                    }
                    else
                    {
                        float _2169;
                        float _2170;
                        float _2171;
                        float _2390;
                        float _2391;
                        float _2392;
                        float _2179 = _2012;
                        float _2180 = _2013;
                        float _2181 = _2014;
                        uint _2182 = _2024;
                        uint _2183;
                        uint _2193;
                        vec4 _2208;
                        float _2209;
                        vec3 _2221;
                        vec4 _2236;
                        vec4 _2251;
                        float _2297;
                        bool _2298;
                        for (;;)
                        {
                            _2193 = ((_2015 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2182));
                            _2183 = (_2182 + 4294967295u) & _2182;
                            uint _2195 = _2193 * 40u;
                            _2208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2195 + 3u)).x));
                            _2209 = _2208.w;
                            uint _2211 = (_2193 * 40u) + 8u;
                            _2221 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2211 + 2u)).x));
                            uint _2223 = (_2193 * 40u) + 16u;
                            _2236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2223 + 3u)).x));
                            uint _2238 = (_2193 * 40u) + 20u;
                            _2251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2238 + 3u)).x));
                            uint _2253 = (_2193 * 40u) + 24u;
                            vec4 _2266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2253 + 3u)).x));
                            uint _2272 = (_2193 * 40u) + 28u;
                            vec4 _2285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2272 + 3u)).x));
                            _2297 = fma(_1537, _2285.z, fma(_1536, _2285.y, _2285.x * _1535)) + _2285.w;
                            _2298 = !((fma(_1537, _2266.z, fma(_1536, _2266.y, _2266.x * _1535)) + _2266.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            if (_2298)
                            {
                                float _2332 = _2208.x - _1535;
                                float _2333 = _2208.y - _1536;
                                float _2334 = _2208.z - _1537;
                                float _2335 = dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334));
                                float _2338 = inversesqrt(_2335);
                                float _2345 = 1.0 - (_2335 / (_2209 * _2209));
                                float _2914 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
                                float _2347 = sqrt(_2335) * uintBitsToFloat(uvec4(_2301, _2302, _2303, texelFetch(g_SpotLightRenderingBuffer, int(((_2193 * 40u) + 4u) + 3u)).x)).w;
                                float _2349 = 1.39999997615814208984375 / (_2347 + 1.39999997615814208984375);
                                float _2350 = _2349 * _2349;
                                float _2353 = (fma(_1537, _2236.z, fma(_1536, _2236.y, _2236.x * _1535)) + _2236.w) / _2297;
                                float _2354 = (fma(_1537, _2251.z, fma(_1536, _2251.y, _2251.x * _1535)) + _2251.w) / _2297;
                                float _2358 = 1.0 - dot(vec2(_2353, _2354), vec2(_2353, _2354));
                                float _2925 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
                                float _2366 = dot(vec3(0.0), vec3((-0.0) - (_1535 * _1835), (-0.0) - (_1536 * _1835), (-0.0) - (_1537 * _1835)));
                                float _2936 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
                                float _2374 = ((1.0 - _2350) * dot(vec3(0.0), vec3(_2338 * _2332, _2338 * _2333, _2338 * _2334))) + _2350;
                                float _2947 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
                                float _2375 = isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0));
                                float _2379 = (0.5 / (((isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0))) + 9.9999999392252902907785028219223e-09) + _2375)) * _2375;
                                float _2958 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
                                float _2386 = ((isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0))) * (isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0)))) * (((isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0))) * 3.1415927410125732421875) / (((_2347 * _2347) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2386 * _2221.y;
                                frontier_phi_115_pred_1 = _2386 * _2221.x;
                                frontier_phi_115_pred_2 = _2386 * _2221.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                            }
                            _2391 = frontier_phi_115_pred;
                            _2390 = frontier_phi_115_pred_1;
                            _2392 = frontier_phi_115_pred_2;
                            _2169 = _2390 + _2179;
                            _2170 = _2391 + _2180;
                            _2171 = _2392 + _2181;
                            if (_2183 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2179 = _2169;
                                _2180 = _2170;
                                _2181 = _2171;
                                _2182 = _2183;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2171;
                        frontier_phi_109_pred_1 = _2170;
                        frontier_phi_109_pred_2 = _2169;
                    }
                    _1824 = frontier_phi_109_pred;
                    _1822 = frontier_phi_109_pred_1;
                    _1820 = frontier_phi_109_pred_2;
                    uint _2016 = _2015 + 1u;
                    if (_2016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2012 = _1820;
                        _2013 = _1822;
                        _2014 = _1824;
                        _2015 = _2016;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _1824;
                frontier_phi_84_85_ladder_1 = _1822;
                frontier_phi_84_85_ladder_2 = _1820;
            }
            else
            {
                frontier_phi_84_85_ladder = _1675;
                frontier_phi_84_85_ladder_1 = _1673;
                frontier_phi_84_85_ladder_2 = _1671;
            }
            _1819 = frontier_phi_84_85_ladder_2;
            _1821 = frontier_phi_84_85_ladder_1;
            _1823 = frontier_phi_84_85_ladder;
        }
        float _1828 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
        _1594 = ((_1819 * 0.039999999105930328369140625) * _1828) + _1476;
        _1596 = ((_1821 * 0.039999999105930328369140625) * _1828) + _1477;
        _1598 = ((_1823 * 0.039999999105930328369140625) * _1828) + _1478;
    }
    else
    {
        _1594 = _1476;
        _1596 = _1477;
        _1598 = _1478;
    }
    uint _1604 = _1346 + 9u;
    uint _1605 = _1604 + uint(cbMatDynParam._m0[0u].w);
    float _1620 = (cbInstanceData._m0[_1605].x * ((_621 * ((_577.x * cbMtdParam._m0[14u].x) - _508)) + _508)) + ((_1594 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _1110)) * cbPerFrame._m0[3u].x);
    float _1621 = (cbInstanceData._m0[_1605].y * ((_621 * ((_577.y * cbMtdParam._m0[14u].y) - _509)) + _509)) + ((_1596 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _1110)) * cbPerFrame._m0[3u].x);
    float _1622 = (cbInstanceData._m0[_1605].z * ((_621 * ((_577.z * cbMtdParam._m0[14u].z) - _510)) + _510)) + ((_1598 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _1110)) * cbPerFrame._m0[3u].x);
    float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    uint _1626 = _1346 + 6u;
    float _1634 = _673 / cbSceneParam._m0[86u].x;
    float _1635 = _674 / cbSceneParam._m0[86u].y;
    vec4 _1649 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1634, _1635, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1651 = _1649.x;
    float _1652 = _1649.y;
    float _1653 = _1649.z;
    float _1654 = _1649.w;
    float _1728;
    float _1730;
    float _1732;
    float _1734;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _1690 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _1691 = _1690 / _646;
        float _1702 = _1691 * _257;
        float _1703 = _258 * _1691;
        float _1704 = (-0.0) - _1703;
        float _1705 = _1691 * _259;
        float _1707 = (cbSceneParam._m0[77u].w * _1704) / _1690;
        float _1708 = _1707 + cbSceneParam._m0[79u].w;
        float _1709 = cbSceneParam._m0[79u].w - _1703;
        float _1715 = sqrt(((_1702 * _1702) + (_1703 * _1703)) + (_1705 * _1705));
        float _1718 = (1.0 - (cbSceneParam._m0[77u].w / _1690)) * _1715;
        float _1724 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1726 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1943;
        if (abs((_1704 - _1707) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1943 = ((((_1708 > 0.0) ? exp2(_1724 * _1708) : (2.0 - exp2(_1726 * _1708))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1718;
        }
        else
        {
            float _1865 = 1.0 / cbSceneParam._m0[80u].x;
            float _1866 = isnan(_1709) ? _1708 : (isnan(_1708) ? _1709 : max(_1708, _1709));
            float _1867 = isnan(_1709) ? _1708 : (isnan(_1708) ? _1709 : min(_1708, _1709));
            float _1876 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : min(_1866, 0.0));
            float _1877 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : min(_1867, 0.0));
            _1943 = ((abs(_1715 / _1704) * cbSceneParam._m0[80u].y) * ((((_1876 - _1877) * 2.0) - ((exp2(_1724 * (isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)))) - exp2(_1724 * (isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))))) * _1865)) - ((exp2(_1726 * _1876) - exp2(_1726 * _1877)) * _1865))) + (_1718 * cbSceneParam._m0[80u].z);
        }
        vec4 _1945 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1634, _1635, 1.0), 0.0);
        float _1954 = exp2((_1943 * (-1.44269502162933349609375)) * (1.0 - _1945.w));
        float _1955 = log2(_1954);
        float _1971 = log2(_1654);
        _1728 = (exp2(_1971 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1955 * cbSceneParam._m0[78u].x)) * _1945.x) / cbSceneParam._m0[78u].x)) + _1651;
        _1730 = (exp2(_1971 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1955 * cbSceneParam._m0[78u].y)) * _1945.y) / cbSceneParam._m0[78u].y)) + _1652;
        _1732 = (exp2(_1971 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1955 * cbSceneParam._m0[78u].z)) * _1945.z) / cbSceneParam._m0[78u].z)) + _1653;
        _1734 = _1954 * _1654;
    }
    else
    {
        _1728 = _1651;
        _1730 = _1652;
        _1732 = _1653;
        _1734 = _1654;
    }
    bool _1981;
    vec4 _1744;
    vec4 _1767;
    float _1769;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    bool _1787;
    for (;;)
    {
        _1744 = cbMatDynParam._m0[0u];
        float _1746 = roundEven(_1744.y);
        bool _1747 = _1746 == 3.0;
        float _1749 = log2(_1734);
        float _1756 = exp2(_1749 * cbSceneParam._m0[78u].x) * _1623;
        float _1757 = exp2(_1749 * cbSceneParam._m0[78u].y) * _1624;
        float _1758 = exp2(_1749 * cbSceneParam._m0[78u].z) * _1625;
        float _1765 = _660 + (-0.5);
        _1767 = cbMtdParam._m0[1u];
        _1769 = _1767.y * _1765;
        float _1772 = (_1746 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1773 = _1772 * (_1747 ? _1756 : (_1756 + (cbSceneParam._m0[72u].w * _1728)));
        _1774 = _1772 * (_1747 ? _1757 : (_1757 + (cbSceneParam._m0[72u].w * _1730)));
        _1775 = _1772 * (_1747 ? _1758 : (_1758 + (cbSceneParam._m0[72u].w * _1732)));
        _1776 = _1765 * 0.999000012874603271484375;
        _1787 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1787)
        {
            if ((cbInstanceData._m0[_1346 + 7u].x + _1776) < 0.5)
            {
                _1981 = true;
                break;
            }
        }
        uint _1900 = _1604 + uint(_1744.w);
        if ((cbInstanceData._m0[_1900].w < 1.0) && ((cbInstanceData._m0[_1900].w + _1776) < 0.5))
        {
            _1981 = true;
            break;
        }
        if ((_1769 + 1.0) < _1767.x)
        {
            _1981 = true;
            break;
        }
        _1981 = false;
        break;
    }
    float _2139;
    if (_1981)
    {
        discard_state = true;
        _2139 = 0.0;
    }
    else
    {
        _2139 = cbInstanceData._m0[_1626].w;
    }
    SV_Target.x = _1773;
    SV_Target.y = _1774;
    SV_Target.z = _1775;
    SV_Target.w = _2139;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1626].w;
    discard_exit();
}


