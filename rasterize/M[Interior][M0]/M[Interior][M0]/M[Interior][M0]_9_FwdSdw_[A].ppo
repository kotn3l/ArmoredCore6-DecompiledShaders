#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _399;
float _3457;
float _3458;
float _3459;
float _3460;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _332 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _339 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _348 = cbMtdParam._m0[23u].x + _263;
    float _349 = cbMtdParam._m0[23u].y + _264;
    float _350 = cbMtdParam._m0[23u].z + _265;
    float _364 = (-0.0) - dot(vec3(_348, _349, _350), vec3(_332 * _192, _332 * _193, _332 * _194));
    float _365 = (-0.0) - dot(vec3(_348, _349, _350), vec3(_339 * _206, _339 * _207, _339 * _208));
    float _366 = (-0.0) - dot(vec3(_348, _349, _350), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _370 * _366;
    float _373 = (cbMtdParam._m0[19u].w * _364) * _370;
    float _375 = (cbMtdParam._m0[20u].x * _365) * _370;
    float _378 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _379 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _397;
    float _400;
    float _402;
    if (_373 > 0.0)
    {
        float _383 = (1.0 - _378) / _373;
        _397 = _383;
        _400 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_383 * _371)) * 0.16666667163372039794921875;
        _402 = (fract((_383 * _375) + _379) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_373 < 0.0)
        {
            float _398 = ((-0.0) - _378) / _373;
            frontier_phi_3_2_ladder = (fract(_398 * _371) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _398;
            frontier_phi_3_2_ladder_2 = (fract((_398 * _375) + _379) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _399;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _397 = frontier_phi_3_2_ladder_1;
        _400 = frontier_phi_3_2_ladder;
        _402 = frontier_phi_3_2_ladder_2;
    }
    float _428;
    float _430;
    float _432;
    if (_375 > 0.0)
    {
        float _415 = (1.0 - _379) / _375;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_415 < _397)
        {
            frontier_phi_8_5_ladder = (fract(_415 * _371) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_415 * _373) + _378) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _415;
        }
        else
        {
            frontier_phi_8_5_ladder = _402;
            frontier_phi_8_5_ladder_1 = _400;
            frontier_phi_8_5_ladder_2 = _397;
        }
        _428 = frontier_phi_8_5_ladder_2;
        _430 = frontier_phi_8_5_ladder_1;
        _432 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_375 < 0.0)
        {
            float _429 = ((-0.0) - _379) / _375;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_429 < _397)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_429 * _371) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_429 * _373) + _378) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _429;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _402;
                frontier_phi_8_6_ladder_9_ladder_1 = _400;
                frontier_phi_8_6_ladder_9_ladder_2 = _397;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _402;
            frontier_phi_8_6_ladder_1 = _400;
            frontier_phi_8_6_ladder_2 = _397;
        }
        _428 = frontier_phi_8_6_ladder_2;
        _430 = frontier_phi_8_6_ladder_1;
        _432 = frontier_phi_8_6_ladder;
    }
    float _436 = (_371 > 0.0) ? (cbMtdParam._m0[16u].w / _371) : 5000.0;
    float _449;
    float _450;
    if (_436 < _428)
    {
        _449 = ((_378 + cbMtdParam._m0[17u].x) + (_436 * _373)) * 0.16666667163372039794921875;
        _450 = (((_436 * _375) + _379) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _449 = _430;
        _450 = _432;
    }
    vec4 _452 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_449, _450));
    float _457 = _452.x * cbMtdParam._m0[13u].x;
    float _458 = _452.y * cbMtdParam._m0[13u].y;
    float _459 = _452.z * cbMtdParam._m0[13u].z;
    vec4 _477 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _485 = (_477.x * 2.0) + (-1.0);
    float _487 = (_477.y * 2.0) + (-1.0);
    float _488 = dot(vec2(_485, _487), vec2(_485, _487));
    float _3469 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _493 = sqrt(1.0 - (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))));
    float _494 = _477.z * _290;
    float _497 = fma(_493, _199, fma(_487, _206, _485 * _192));
    float _500 = fma(_493, _200, fma(_487, _207, _485 * _193));
    float _503 = fma(_493, _201, fma(_487, _208, _485 * _194));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _508 = _507 * _497;
    float _509 = _507 * _500;
    float _510 = _507 * _503;
    float _3480 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _511 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3502 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3513 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _530 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _534 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _535 = _263 * _534;
    float _536 = _264 * _534;
    float _537 = _265 * _534;
    vec4 _542 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _544 = _542.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _707 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _713 = (cbMatDynParam._m0[5u].x * _707) + cbMatDynParam._m0[5u].y;
        float _3524 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _718 = (cbMatDynParam._m0[5u].z * _707) + cbMatDynParam._m0[5u].w;
        float _3535 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) - _714)) + _714) < ((_544 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _562 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _563 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _583 = fma(_510, cbSceneParam._m0[5u].z, fma(_509, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _508));
    float _586 = fma(_510, cbSceneParam._m0[6u].z, fma(_509, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _508));
    float _589 = fma(_510, cbSceneParam._m0[7u].z, fma(_509, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _508));
    uint _602 = uint(roundEven(NORMAL.w)) * 13u;
    uint _603 = _602 + 9u;
    uint _604 = _603 + uint(cbMatDynParam._m0[0u].w);
    float _610 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_604].x;
    float _611 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_604].y;
    float _612 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_604].z;
    float _3546 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    vec4 _624 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _562, cbSceneParam._m0[86u].y * _563));
    float _627 = _624.x * TEXCOORD.z;
    float _628 = dot(vec3(_508, _509, _510), vec3(_535, _536, _537));
    float _631 = _628 * 2.0;
    float _635 = (_631 * _508) - _535;
    float _636 = (_631 * _509) - _536;
    float _637 = (_631 * _510) - _537;
    float _641 = abs(dot(vec3(_535, _536, _537), vec3(_508, _509, _510)));
    float _3579 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _643 = sqrt(_511);
    float _656 = exp2((_643 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_643 * 3.0));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _752 = fma(_696, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _688));
        float _756 = fma(_696, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _688));
        float _760 = fma(_696, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _688));
        float _784 = _688 + _508;
        float _785 = _692 + _509;
        float _786 = _696 + _510;
        float _796 = fma(_786, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784)) - _752;
        float _797 = fma(_786, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784)) - _756;
        float _798 = fma(_786, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784)) - _760;
        float _802 = inversesqrt(dot(vec3(_796, _797, _798), vec3(_796, _797, _798)));
        float _815 = ((_802 * _796) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_752 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_802 * _797) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_756 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_802 * _798) / cbModelParam._m0[34u].z) + ((((((_760 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_815, _816, _817), 0.0);
        float _854 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_820.x + (-0.5));
        float _856 = _854 * (_820.y + (-0.5));
        float _857 = _854 * (_820.z + (-0.5));
        float _864 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_827.x + (-0.5));
        float _866 = _864 * (_827.y + (-0.5));
        float _867 = _864 * (_827.z + (-0.5));
        float _874 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_834.x + (-0.5));
        float _876 = _874 * (_834.y + (-0.5));
        float _877 = _874 * (_834.z + (-0.5));
        float _884 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_841.x + (-0.5));
        float _886 = _884 * (_841.y + (-0.5));
        float _887 = _884 * (_841.z + (-0.5));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = _855 * 0.5;
        float _892 = _865 * 0.5;
        float _893 = _875 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _908 = (dot(vec3(_508, _509, _510), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _918 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3627 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_920 + 1.0))) + _925) * _888;
        float _935 = _856 * 0.5;
        float _936 = _866 * 0.5;
        float _937 = _876 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_508, _509, _510), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3660 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_962 + 1.0))) + _967) * _889;
        float _977 = _857 * 0.5;
        float _978 = _867 * 0.5;
        float _979 = _877 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_508, _509, _510), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3693 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1004 + 1.0))) + _1009) * _890;
        _1026 = _857;
        _1027 = _856;
        _1028 = _855;
        _1029 = _867;
        _1030 = _866;
        _1031 = _865;
        _1032 = _877;
        _1033 = _876;
        _1034 = _875;
        _1035 = _890;
        _1036 = _889;
        _1037 = _888;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
    }
    else
    {
        _1026 = _399;
        _1027 = _399;
        _1028 = _399;
        _1029 = _399;
        _1030 = _399;
        _1031 = _399;
        _1032 = _399;
        _1033 = _399;
        _1034 = _399;
        _1035 = _399;
        _1036 = _399;
        _1037 = _399;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1069 = fma(_696, cbModelParam._m0[30u].z, fma(_692, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _688));
        float _1073 = fma(_696, cbModelParam._m0[31u].z, fma(_692, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _688));
        float _1077 = fma(_696, cbModelParam._m0[32u].z, fma(_692, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _688));
        float _1100 = _688 + _508;
        float _1101 = _692 + _509;
        float _1102 = _696 + _510;
        float _1112 = fma(_1102, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100)) - _1069;
        float _1113 = fma(_1102, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100)) - _1073;
        float _1114 = fma(_1102, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100)) - _1077;
        float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
        float _1131 = ((_1118 * _1112) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1069 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1118 * _1113) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1073 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1118 * _1114) / cbModelParam._m0[35u].z) + ((((((_1077 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        float _1168 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1135.x + (-0.5));
        float _1170 = _1168 * (_1135.y + (-0.5));
        float _1171 = _1168 * (_1135.z + (-0.5));
        float _1178 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1142.x + (-0.5));
        float _1180 = _1178 * (_1142.y + (-0.5));
        float _1181 = _1178 * (_1142.z + (-0.5));
        float _1188 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1149.x + (-0.5));
        float _1190 = _1188 * (_1149.y + (-0.5));
        float _1191 = _1188 * (_1149.z + (-0.5));
        float _1198 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1156.x + (-0.5));
        float _1200 = _1198 * (_1156.y + (-0.5));
        float _1201 = _1198 * (_1156.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_508, _509, _510), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3756 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1232 + 1.0))) + _1237) * _1202;
        float _1247 = _1170 * 0.5;
        float _1248 = _1180 * 0.5;
        float _1249 = _1190 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_508, _509, _510), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3789 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1274 + 1.0))) + _1279) * _1203;
        float _1289 = _1171 * 0.5;
        float _1290 = _1181 * 0.5;
        float _1291 = _1191 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_508, _509, _510), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3822 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1316 + 1.0))) + _1321) * _1204;
        _1338 = _1171;
        _1339 = _1170;
        _1340 = _1169;
        _1341 = _1181;
        _1342 = _1180;
        _1343 = _1179;
        _1344 = _1191;
        _1345 = _1190;
        _1346 = _1189;
        _1347 = _1204;
        _1348 = _1203;
        _1349 = _1202;
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _399;
        _1339 = _399;
        _1340 = _399;
        _1341 = _399;
        _1342 = _399;
        _1343 = _399;
        _1344 = _399;
        _1345 = _399;
        _1346 = _399;
        _1347 = _399;
        _1348 = _399;
        _1349 = _399;
        _1350 = 0.0;
        _1351 = 0.0;
        _1352 = 0.0;
    }
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1038)) + _1038;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1039)) + _1039;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1040)) + _1040;
    float _1385 = fma(_1364, cbSceneParam._m0[89u].z, fma(_1363, cbSceneParam._m0[89u].y, _1362 * cbSceneParam._m0[89u].x));
    float _1388 = fma(_1364, cbSceneParam._m0[90u].z, fma(_1363, cbSceneParam._m0[90u].y, _1362 * cbSceneParam._m0[90u].x));
    float _1391 = fma(_1364, cbSceneParam._m0[91u].z, fma(_1363, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1362));
    float _1406 = _635 * 0.5;
    float _1407 = _636 * 0.5;
    float _1408 = _637 * 0.5;
    float _1409 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1412 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1415 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1449;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1422 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1426 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1430 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1437 = dot(vec4(cbModelParam._m0[39u]), vec4(_1406, _1407, _1408, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1460;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1451 = dot(vec4(cbModelParam._m0[40u]), vec4(_1406, _1407, _1408, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1464 = (_1460 * cbModelParam._m0[1u].x) + (_1449 * (1.0 - cbModelParam._m0[1u].x));
    float _1474 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _511);
    float _1475 = isnan(_1474) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1474 : min(cbModelParam._m0[25u].z, _1474));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1524 = fma(_696, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688)) + cbModelParam._m0[13u].w;
        float _1528 = fma(_696, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688)) + cbModelParam._m0[14u].w;
        float _1532 = fma(_696, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688)) + cbModelParam._m0[15u].w;
        float _1535 = fma(_637, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635));
        float _1538 = fma(_637, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635));
        float _1541 = fma(_637, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635));
        float _1569;
        if (_1535 > 0.0)
        {
            _1569 = abs((1.0 - _1524) / _1535);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1524 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1569 = frontier_phi_29_27_ladder;
        }
        float _1740;
        if (_1538 > 0.0)
        {
            _1740 = abs((1.0 - _1528) / _1538);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1528 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1740 = frontier_phi_38_34_ladder;
        }
        float _2185;
        if (_1541 > 0.0)
        {
            _2185 = abs((1.0 - _1532) / _1541);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1532 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2185 = frontier_phi_50_45_ladder;
        }
        float _2187 = isnan(_1740) ? _1569 : (isnan(_1569) ? _1740 : min(_1569, _1740));
        float _2188 = isnan(_2185) ? _2187 : (isnan(_2187) ? _2185 : min(_2187, _2185));
        float _2192 = (_2188 * _1535) + _1524;
        float _2193 = (_2188 * _1538) + _1528;
        float _2194 = (_2188 * _1541) + _1532;
        float _2195 = _2188 * 9.9999997473787516355514526367188e-05;
        float _2197 = (-1.0) - _2195;
        float _2199 = _2195 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2194 > _2199) || ((_2194 < _2197) || ((_2193 > _2199) || ((_2193 < _2197) || ((_2192 < _2197) || (_2192 > _2199))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2194, cbModelParam._m0[9u].z, fma(_2193, cbModelParam._m0[9u].y, _2192 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2194, cbModelParam._m0[10u].z, fma(_2193, cbModelParam._m0[10u].y, _2192 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2194, cbModelParam._m0[11u].z, fma(_2193, cbModelParam._m0[11u].y, _2192 * cbModelParam._m0[11u].x))), _1475);
            frontier_phi_28_50_ladder = _2444.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2444.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2444.x * cbModelParam._m0[1u].y;
        }
        _1557 = frontier_phi_28_50_ladder_2;
        _1559 = frontier_phi_28_50_ladder_1;
        _1561 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_635, _636, _637), _1475);
        _1557 = _1545.x * cbModelParam._m0[1u].y;
        _1559 = _1545.y * cbModelParam._m0[1u].y;
        _1561 = _1545.z * cbModelParam._m0[1u].y;
    }
    float _1565 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _511);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1565 : min(cbModelParam._m0[25u].w, _1565));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1621 = fma(_696, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688)) + cbModelParam._m0[21u].w;
        float _1625 = fma(_696, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688)) + cbModelParam._m0[22u].w;
        float _1629 = fma(_696, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688)) + cbModelParam._m0[23u].w;
        float _1632 = fma(_637, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635));
        float _1635 = fma(_637, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635));
        float _1638 = fma(_637, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635));
        float _1745;
        if (_1632 > 0.0)
        {
            _1745 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1745 = frontier_phi_40_36_ladder;
        }
        float _2212;
        if (_1635 > 0.0)
        {
            _2212 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2212 = frontier_phi_52_47_ladder;
        }
        float _2573;
        if (_1638 > 0.0)
        {
            _2573 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2573 = frontier_phi_64_59_ladder;
        }
        float _2575 = isnan(_2212) ? _1745 : (isnan(_1745) ? _2212 : min(_1745, _2212));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1632) + _1621;
        float _2581 = (_2576 * _1635) + _1625;
        float _2582 = (_2576 * _1638) + _1629;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1566);
            frontier_phi_37_64_ladder = _2719.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2719.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2719.x * cbModelParam._m0[1u].z;
        }
        _1657 = frontier_phi_37_64_ladder_2;
        _1659 = frontier_phi_37_64_ladder_1;
        _1661 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_635, _636, _637), _1566);
        _1657 = _1641.x * cbModelParam._m0[1u].z;
        _1659 = _1641.y * cbModelParam._m0[1u].z;
        _1661 = _1641.z * cbModelParam._m0[1u].z;
    }
    float _1673 = ((((1.0 - _656) * ((_643 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_656 * _643)) * _627;
    float _1674 = _1673 * ((cbModelParam._m0[1u].w * (_1657 - _1557)) + _1557);
    float _1675 = _1673 * ((cbModelParam._m0[1u].w * (_1659 - _1559)) + _1559);
    float _1676 = _1673 * ((cbModelParam._m0[1u].w * (_1661 - _1561)) + _1561);
    float _1679 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, _1674 * cbSceneParam._m0[91u].x));
    float _1719 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1723 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1727 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1731 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1732 = _1719 / _1731;
    float _1733 = _1723 / _1731;
    float _1734 = _1727 / _1731;
    float _1881;
    float _1882;
    float _1883;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1761 = ((uint(_1734 > cbSceneParam._m0[59u].y) + uint(_1734 > cbSceneParam._m0[59u].x)) + uint(_1734 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1762 = _1761 + 43u;
        uint _1770 = _1761 + 44u;
        uint _1778 = _1761 + 45u;
        uint _1786 = _1761 + 46u;
        float _1797 = fma(_1731, cbSceneParam._m0[_1762].w, fma(_1727, cbSceneParam._m0[_1762].z, fma(_1723, cbSceneParam._m0[_1762].y, _1719 * cbSceneParam._m0[_1762].x)));
        float _1801 = fma(_1731, cbSceneParam._m0[_1770].w, fma(_1727, cbSceneParam._m0[_1770].z, fma(_1723, cbSceneParam._m0[_1770].y, _1719 * cbSceneParam._m0[_1770].x)));
        float _1809 = fma(_1731, cbSceneParam._m0[_1786].w, fma(_1727, cbSceneParam._m0[_1786].z, fma(_1723, cbSceneParam._m0[_1786].y, _1719 * cbSceneParam._m0[_1786].x)));
        float _1814 = cbSceneParam._m0[33u].z * _1809;
        float _1816 = cbSceneParam._m0[33u].w * _1809;
        float _1819 = fma(_1731, cbSceneParam._m0[_1778].w, fma(_1727, cbSceneParam._m0[_1778].z, fma(_1723, cbSceneParam._m0[_1778].y, _1719 * cbSceneParam._m0[_1778].x))) / _1809;
        float _1867 = (cbSceneParam._m0[33u].x - sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734))) * cbSceneParam._m0[33u].y;
        float _3948 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1874 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 + _1797) / _1809, (_1816 + _1801) / _1809), _1819), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 + _1797) / _1809, (_1801 - _1814) / _1809), _1819), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 - _1814) / _1809, (_1801 - _1816) / _1809), _1819), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 - _1816) / _1809, (_1814 + _1801) / _1809), _1819), 0.0)).x), vec4(0.25)));
        _1881 = 1.0 - (_1874 * cbSceneParam._m0[34u].x);
        _1882 = 1.0 - (_1874 * cbSceneParam._m0[34u].y);
        _1883 = 1.0 - (_1874 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1881 = 1.0;
        _1882 = 1.0;
        _1883 = 1.0;
    }
    float _1947;
    float _1949;
    float _1951;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1935 = fma(_1731, cbSceneParam._m0[63u].w, fma(_1727, cbSceneParam._m0[63u].z, fma(_1723, cbSceneParam._m0[63u].y, _1719 * cbSceneParam._m0[63u].x)));
        float _1936 = fma(_1731, cbSceneParam._m0[60u].w, fma(_1727, cbSceneParam._m0[60u].z, fma(_1723, cbSceneParam._m0[60u].y, _1719 * cbSceneParam._m0[60u].x))) / _1935;
        float _1937 = fma(_1731, cbSceneParam._m0[61u].w, fma(_1727, cbSceneParam._m0[61u].z, fma(_1723, cbSceneParam._m0[61u].y, _1719 * cbSceneParam._m0[61u].x))) / _1935;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1936 >= cbSceneParam._m0[64u].x) && (_1937 >= cbSceneParam._m0[64u].y)) && (_1936 <= cbSceneParam._m0[64u].z)) && (_1937 <= cbSceneParam._m0[64u].w))
        {
            float _2225 = fma(_1731, cbSceneParam._m0[62u].w, fma(_1727, cbSceneParam._m0[62u].z, fma(_1723, cbSceneParam._m0[62u].y, _1719 * cbSceneParam._m0[62u].x))) / _1935;
            float _2229 = isnan(cbSceneParam._m0[41u].w) ? _2225 : (isnan(_2225) ? cbSceneParam._m0[41u].w : max(_2225, cbSceneParam._m0[41u].w));
            float _2272 = (cbSceneParam._m0[33u].x - sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734))) * cbSceneParam._m0[33u].y;
            float _3964 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
            float _2279 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1936, cbSceneParam._m0[33u].w + _1937), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1936, _1937 - cbSceneParam._m0[33u].z), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1936 - cbSceneParam._m0[33u].z, _1937 - cbSceneParam._m0[33u].w), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1936 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1937), _2229), 0.0)).x), vec4(0.25)));
            float _2283 = 1.0 - (_2279 * cbSceneParam._m0[34u].x);
            float _2284 = 1.0 - (_2279 * cbSceneParam._m0[34u].y);
            float _2285 = 1.0 - (_2279 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2285) ? _1883 : (isnan(_1883) ? _2285 : min(_1883, _2285));
            frontier_phi_49_48_ladder_1 = isnan(_2284) ? _1882 : (isnan(_1882) ? _2284 : min(_1882, _2284));
            frontier_phi_49_48_ladder_2 = isnan(_2283) ? _1881 : (isnan(_1881) ? _2283 : min(_1881, _2283));
        }
        else
        {
            frontier_phi_49_48_ladder = _1883;
            frontier_phi_49_48_ladder_1 = _1882;
            frontier_phi_49_48_ladder_2 = _1881;
        }
        _1947 = frontier_phi_49_48_ladder_2;
        _1949 = frontier_phi_49_48_ladder_1;
        _1951 = frontier_phi_49_48_ladder;
    }
    else
    {
        _1947 = _1881;
        _1949 = _1882;
        _1951 = _1883;
    }
    uvec4 _1956 = floatBitsToUint(cbInstanceData._m0[_602 + 5u]);
    uint _1958 = _1956.x * 14u;
    uint _1959 = _1958 + 13u;
    float _1964 = _627 + (-1.0);
    float _1967 = (cbLight._m0[_1959].x * _1964) + 1.0;
    float _1968 = (cbLight._m0[_1959].y * _1964) + 1.0;
    uint _1969 = _1958 + 5u;
    float _1975 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1979 = _1958 + 4u;
    float _1989 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1993 = _1958 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_508, _509, _510));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_508, _509, _510));
    float _4000 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4011 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1969].x * _1975) * _2014) + (((cbLight._m0[_1979].x * _1947) * _1989) * _2012);
    float _2022 = ((_1975 * cbLight._m0[_1969].y) * _2014) + (((cbLight._m0[_1979].y * _1949) * _1989) * _2012);
    float _2023 = ((_1975 * cbLight._m0[_1969].z) * _2014) + (((cbLight._m0[_1979].z * _1951) * _1989) * _2012);
    uint _2025 = _1958 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _511) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1958].x + _535;
    float _2041 = cbLight._m0[_1958].y + _536;
    float _2042 = cbLight._m0[_1958].z + _537;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1958].xyz));
    float _4022 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _2054 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _2055 = dot(vec3(_508, _509, _510), vec3(_2047, _2048, _2049));
    float _4044 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2047, _2048, _2049));
    float _4055 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2079 = 1.0 - _2039;
    float _2090 = (0.5 / (((_2054 * ((_2053 * _2079) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2079) + _2039) * _2053))) * _2053;
    float _4066 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2106 = _1958 + 9u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _511) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_1993].x + _535;
    float _2120 = cbLight._m0[_1993].y + _536;
    float _2121 = cbLight._m0[_1993].z + _537;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1993].xyz));
    float _4077 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _2133 = dot(vec3(_508, _509, _510), vec3(_2126, _2127, _2128));
    float _4088 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2126, _2127, _2128));
    float _4099 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2118 * _2118;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2118;
    float _2165 = (0.5 / (((_2054 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2155) + _2118) * _2132))) * _2132;
    float _4110 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    float _2177 = (((_2154 * cbLight._m0[_2106].x) * _2167) * _1975) + ((((cbLight._m0[_2025].x * _1947) * _2078) * _2092) * _1989);
    float _2178 = (((_2154 * cbLight._m0[_2106].y) * _2167) * _1975) + ((((cbLight._m0[_2025].y * _1949) * _2078) * _2092) * _1989);
    float _2179 = (((_2154 * cbLight._m0[_2106].z) * _2167) * _1975) + ((((cbLight._m0[_2025].z * _1951) * _2078) * _2092) * _1989);
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_1956.y == 0u)
    {
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.x;
        uint _2309 = uint((float(_2297.y) * floor(float(uint(cbSceneParam._m0[85u].y * _563) / _2298))) + floor(float(uint(cbSceneParam._m0[85u].x * _562) / _2298)));
        float _2319 = (log2(_1734 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2320 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        uint _2323 = uint(isnan(14.0) ? _2320 : (isnan(_2320) ? 14.0 : min(_2320, 14.0)));
        uvec4 _2328 = texelFetch(g_lightClusterGridBuffer, int(((_2323 << 2u) + (_2309 << 6u)) >> 2u));
        uint _2329 = _2328.x;
        uint _2330 = _2297.z;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        if (((((1u << ((_2330 >> 4u) & 15u)) + 4294967295u) & _2329) == 0u) || ((_2330 & 240u) == 0u))
        {
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
        }
        else
        {
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            uint _2637 = 0u;
            uint _2646;
            bool _2647;
            for (;;)
            {
                _2646 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2637 << 2u)) >> 2u)).x;
                _2647 = _2646 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2647)
                {
                    frontier_phi_75_pred = _2634;
                    frontier_phi_75_pred_1 = _2636;
                    frontier_phi_75_pred_2 = _2635;
                    frontier_phi_75_pred_3 = _2633;
                    frontier_phi_75_pred_4 = _2632;
                    frontier_phi_75_pred_5 = _2631;
                }
                else
                {
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    uint _2803;
                    _2797 = _2631;
                    _2798 = _2632;
                    _2799 = _2633;
                    _2800 = _2634;
                    _2801 = _2635;
                    _2802 = _2636;
                    _2803 = _2646;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    for (;;)
                    {
                        uint _2807 = uint(findLSB(_2803)) + (_2637 << 5u);
                        uint _2804 = (_2803 + 4294967295u) & _2803;
                        uint _2809 = _2807 * 48u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2829 = (_2807 * 48u) + 4u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2848 = (_2807 * 48u) + 8u;
                        vec3 _2859 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x));
                        float _2863 = _2823.x - _1732;
                        float _2864 = _2823.y - _1733;
                        float _2865 = _2823.z - _1734;
                        float _2866 = dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865));
                        float _2869 = inversesqrt(_2866);
                        float _2870 = _2869 * _2863;
                        float _2871 = _2869 * _2864;
                        float _2872 = _2869 * _2865;
                        float _2873 = dot(vec3(_583, _586, _589), vec3(_2870, _2871, _2872));
                        float _2878 = 1.0 - (_2866 * _2823.w);
                        float _4131 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                        float _2880 = sqrt(_2866) * _2842.w;
                        float _2883 = 1.39999997615814208984375 / (_2880 + 1.39999997615814208984375);
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2873) + _2884;
                        float _2890 = _2880 * _2880;
                        float _2894 = ((isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))) * _2879) / ((_2890 * 0.699999988079071044921875) + 1.0);
                        float _2898 = (-0.0) - _1732;
                        float _2899 = (-0.0) - _1733;
                        float _2900 = (-0.0) - _1734;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2914 = exp2(log2(1.0 / ((_2890 * 3.5) + 5.0)) * 0.25);
                        float _2915 = 1.0 - _643;
                        float _2922 = sqrt(1.0 - ((1.0 - (_2915 * _2915)) * (1.0 - (_2914 * _2914))));
                        float _2923 = _2922 * _2922;
                        float _2924 = _2923 * _2923;
                        float _2925 = _2905 + _2870;
                        float _2926 = _2906 + _2871;
                        float _2927 = _2907 + _2872;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2935 = dot(vec3(_583, _586, _589), vec3(_2905, _2906, _2907));
                        float _4147 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2939 = dot(vec3(_583, _586, _589), vec3(_2931 * _2925, _2931 * _2926, _2931 * _2927));
                        float _4158 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2946 = ((_2942 * _2942) * (_2924 + (-1.0))) + 1.0;
                        float _2947 = _2883 * _2923;
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2873) + _2948;
                        float _4169 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2953 = 1.0 - _2923;
                        float _2963 = (0.5 / (((_2952 * ((_2938 * _2953) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _2953) + _2923) * _2938))) * _2952;
                        float _4180 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2974 = (((_2924 * 3.1415927410125732421875) * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) / ((_2946 * _2946) * ((_2890 * 2.1991131305694580078125) + 3.141590118408203125))) * _2879;
                        _2727 = (_2894 * _2842.x) + _2800;
                        _2728 = (_2894 * _2842.y) + _2801;
                        _2729 = (_2894 * _2842.z) + _2802;
                        _2724 = (_2974 * _2859.x) + _2797;
                        _2725 = (_2974 * _2859.y) + _2798;
                        _2726 = (_2974 * _2859.z) + _2799;
                        if (_2804 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2726;
                            _2800 = _2727;
                            _2801 = _2728;
                            _2802 = _2729;
                            _2803 = _2804;
                        }
                    }
                    frontier_phi_75_pred = _2727;
                    frontier_phi_75_pred_1 = _2729;
                    frontier_phi_75_pred_2 = _2728;
                    frontier_phi_75_pred_3 = _2726;
                    frontier_phi_75_pred_4 = _2725;
                    frontier_phi_75_pred_5 = _2724;
                }
                _2460 = frontier_phi_75_pred;
                _2464 = frontier_phi_75_pred_1;
                _2462 = frontier_phi_75_pred_2;
                _2458 = frontier_phi_75_pred_3;
                _2456 = frontier_phi_75_pred_4;
                _2454 = frontier_phi_75_pred_5;
                uint _2638 = _2637 + 1u;
                if (_2638 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2631 = _2454;
                    _2632 = _2456;
                    _2633 = _2458;
                    _2634 = _2460;
                    _2635 = _2462;
                    _2636 = _2464;
                    _2637 = _2638;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
        }
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.z;
        uint _2470 = (_2468 >> 8u) & 15u;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((4294967295u << _2470) & _2329) == 0u)
        {
            _2599 = _2453;
            _2601 = _2455;
            _2603 = _2457;
            _2605 = _2459;
            _2607 = _2461;
            _2609 = _2463;
        }
        else
        {
            float _2624 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
            float _2625 = _2624 * _1732;
            float _2626 = _2624 * _1733;
            float _2627 = _2624 * _1734;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2470 < ((_2468 >> 12u) & 15u))
            {
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2780 = _2453;
                float _2781 = _2455;
                float _2782 = _2457;
                float _2783 = _2459;
                float _2784 = _2461;
                float _2785 = _2463;
                uint _2786 = _2470;
                uint _2795;
                bool _2796;
                for (;;)
                {
                    _2795 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                    _2796 = _2795 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2796)
                    {
                        frontier_phi_86_pred = _2785;
                        frontier_phi_86_pred_1 = _2784;
                        frontier_phi_86_pred_2 = _2783;
                        frontier_phi_86_pred_3 = _2782;
                        frontier_phi_86_pred_4 = _2781;
                        frontier_phi_86_pred_5 = _2780;
                    }
                    else
                    {
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3001 = _2780;
                        float _3002 = _2781;
                        float _3003 = _2782;
                        float _3004 = _2783;
                        float _3005 = _2784;
                        float _3006 = _2785;
                        uint _3007 = _2795;
                        uint _3008;
                        vec4 _3033;
                        float _3034;
                        vec4 _3049;
                        vec3 _3061;
                        vec4 _3076;
                        vec4 _3091;
                        float _3137;
                        bool _3138;
                        for (;;)
                        {
                            uint _3018 = ((_2786 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3007));
                            _3008 = (_3007 + 4294967295u) & _3007;
                            uint _3020 = _3018 * 40u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3034 = _3033.w;
                            uint _3036 = (_3018 * 40u) + 4u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3051 = (_3018 * 40u) + 8u;
                            _3061 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x));
                            uint _3063 = (_3018 * 40u) + 16u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3078 = (_3018 * 40u) + 20u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3018 * 40u) + 24u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3112 = (_3018 * 40u) + 28u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3137 = fma(_1734, _3125.z, fma(_1733, _3125.y, _3125.x * _1732)) + _3125.w;
                            _3138 = !((fma(_1734, _3106.z, fma(_1733, _3106.y, _3106.x * _1732)) + _3106.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3138)
                            {
                                float _3165 = _3033.x - _1732;
                                float _3166 = _3033.y - _1733;
                                float _3167 = _3033.z - _1734;
                                float _3168 = dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167));
                                float _3171 = inversesqrt(_3168);
                                float _3172 = _3171 * _3165;
                                float _3173 = _3171 * _3166;
                                float _3174 = _3171 * _3167;
                                float _3178 = 1.0 - (_3168 / (_3034 * _3034));
                                float _4191 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                                float _3183 = sqrt(_3168) * _3049.w;
                                float _3185 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                                float _3186 = _3185 * _3185;
                                float _3189 = ((1.0 - _3186) * dot(vec3(_3172, _3173, _3174), vec3(_583, _586, _589))) + _3186;
                                float _3192 = _3183 * _3183;
                                float _3196 = (fma(_1734, _3076.z, fma(_1733, _3076.y, _3076.x * _1732)) + _3076.w) / _3137;
                                float _3197 = (fma(_1734, _3091.z, fma(_1733, _3091.y, _3091.x * _1732)) + _3091.w) / _3137;
                                float _3201 = 1.0 - dot(vec2(_3196, _3197), vec2(_3196, _3197));
                                float _4207 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3203 = _3202 * (((isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))) * _3179) / ((_3192 * 0.699999988079071044921875) + 1.0));
                                float _3215 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                                float _3216 = 1.0 - _643;
                                float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                                float _3224 = _3223 * _3223;
                                float _3225 = _3224 * _3224;
                                float _3226 = _3172 - _2625;
                                float _3227 = _3173 - _2626;
                                float _3228 = _3174 - _2627;
                                float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                                float _3236 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2625, (-0.0) - _2626, (-0.0) - _2627));
                                float _4218 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3240 = dot(vec3(_583, _586, _589), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                                float _4229 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3243 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                                float _3248 = _3185 * _3224;
                                float _3249 = _3248 * _3248;
                                float _3255 = ((1.0 - _3249) * dot(vec3(_583, _586, _589), vec3(_3172, _3173, _3174))) + _3249;
                                float _4240 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3257 = 1.0 - _3224;
                                float _3267 = (0.5 / (((_3256 * ((_3239 * _3257) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3224) * _3239))) * _3256;
                                float _4251 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3277 = (_3202 * _3179) * (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) / ((_3247 * _3247) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3203 * _3049.z;
                                frontier_phi_92_pred_1 = _3203 * _3049.y;
                                frontier_phi_92_pred_2 = _3203 * _3049.x;
                                frontier_phi_92_pred_3 = _3277 * _3061.z;
                                frontier_phi_92_pred_4 = _3277 * _3061.y;
                                frontier_phi_92_pred_5 = _3277 * _3061.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3286 = frontier_phi_92_pred;
                            _3285 = frontier_phi_92_pred_1;
                            _3284 = frontier_phi_92_pred_2;
                            _3283 = frontier_phi_92_pred_3;
                            _3282 = frontier_phi_92_pred_4;
                            _3281 = frontier_phi_92_pred_5;
                            _2991 = _3284 + _3004;
                            _2992 = _3285 + _3005;
                            _2993 = _3286 + _3006;
                            _2988 = _3281 + _3001;
                            _2989 = _3282 + _3002;
                            _2990 = _3283 + _3003;
                            if (_3008 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _3008;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2993;
                        frontier_phi_86_pred_1 = _2992;
                        frontier_phi_86_pred_2 = _2991;
                        frontier_phi_86_pred_3 = _2990;
                        frontier_phi_86_pred_4 = _2989;
                        frontier_phi_86_pred_5 = _2988;
                    }
                    _2610 = frontier_phi_86_pred;
                    _2608 = frontier_phi_86_pred_1;
                    _2606 = frontier_phi_86_pred_2;
                    _2604 = frontier_phi_86_pred_3;
                    _2602 = frontier_phi_86_pred_4;
                    _2600 = frontier_phi_86_pred_5;
                    uint _2787 = _2786 + 1u;
                    if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2780 = _2600;
                        _2781 = _2602;
                        _2782 = _2604;
                        _2783 = _2606;
                        _2784 = _2608;
                        _2785 = _2610;
                        _2786 = _2787;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2606;
                frontier_phi_66_67_ladder_1 = _2610;
                frontier_phi_66_67_ladder_2 = _2608;
                frontier_phi_66_67_ladder_3 = _2604;
                frontier_phi_66_67_ladder_4 = _2602;
                frontier_phi_66_67_ladder_5 = _2600;
            }
            else
            {
                frontier_phi_66_67_ladder = _2459;
                frontier_phi_66_67_ladder_1 = _2463;
                frontier_phi_66_67_ladder_2 = _2461;
                frontier_phi_66_67_ladder_3 = _2457;
                frontier_phi_66_67_ladder_4 = _2455;
                frontier_phi_66_67_ladder_5 = _2453;
            }
            _2599 = frontier_phi_66_67_ladder_5;
            _2601 = frontier_phi_66_67_ladder_4;
            _2603 = frontier_phi_66_67_ladder_3;
            _2605 = frontier_phi_66_67_ladder;
            _2607 = frontier_phi_66_67_ladder_2;
            _2609 = frontier_phi_66_67_ladder_1;
        }
        float _2614 = isnan(1.0) ? _627 : (isnan(_627) ? 1.0 : min(_627, 1.0));
        _2342 = (_2614 * _2605) + _2021;
        _2344 = (_2614 * _2607) + _2022;
        _2346 = (_2614 * _2609) + _2023;
        _2348 = ((_2599 * 0.039999999105930328369140625) * _2614) + _2177;
        _2350 = ((_2601 * 0.039999999105930328369140625) * _2614) + _2178;
        _2352 = ((_2603 * 0.039999999105930328369140625) * _2614) + _2179;
    }
    else
    {
        _2342 = _2021;
        _2344 = _2022;
        _2346 = _2023;
        _2348 = _2177;
        _2350 = _2178;
        _2352 = _2179;
    }
    uint _2358 = _603 + uint(cbMatDynParam._m0[0u].w);
    float _4267 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4278 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4289 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _2383 = (((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2342 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _627))) + ((_2348 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1464)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2358].x * (_457 - (_457 * _290)));
    float _2385 = ((cbInstanceData._m0[_2358].y * (_458 - (_458 * _290))) + ((_2350 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1464)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2344 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _627)));
    float _2387 = ((cbInstanceData._m0[_2358].z * (_459 - (_459 * _290))) + ((_2352 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1464)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2346 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _627)));
    float _2388 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2389 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2390 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    uint _2391 = _602 + 6u;
    float _2399 = _562 / cbSceneParam._m0[86u].x;
    float _2400 = _563 / cbSceneParam._m0[86u].y;
    vec4 _2414 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, (log2((isnan(cbSceneParam._m0[77u].w) ? _530 : (isnan(_530) ? cbSceneParam._m0[77u].w : min(_530, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2416 = _2414.x;
    float _2417 = _2414.y;
    float _2418 = _2414.z;
    float _2419 = _2414.w;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    if (_530 > cbSceneParam._m0[78u].w)
    {
        float _2478 = isnan(_530) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _530 : min(cbSceneParam._m0[80u].w, _530));
        float _2479 = _2478 / _530;
        float _2490 = _2479 * _263;
        float _2491 = _264 * _2479;
        float _2492 = (-0.0) - _2491;
        float _2493 = _2479 * _265;
        float _2495 = (cbSceneParam._m0[77u].w * _2492) / _2478;
        float _2496 = _2495 + cbSceneParam._m0[79u].w;
        float _2497 = cbSceneParam._m0[79u].w - _2491;
        float _2503 = sqrt(((_2490 * _2490) + (_2491 * _2491)) + (_2493 * _2493));
        float _2506 = (1.0 - (cbSceneParam._m0[77u].w / _2478)) * _2503;
        float _2511 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2513 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2737;
        if (abs((_2492 - _2495) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2737 = ((((_2496 > 0.0) ? exp2(_2511 * _2496) : (2.0 - exp2(_2513 * _2496))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2506;
        }
        else
        {
            float _2660 = 1.0 / cbSceneParam._m0[80u].x;
            float _2661 = isnan(_2497) ? _2496 : (isnan(_2496) ? _2497 : max(_2496, _2497));
            float _2662 = isnan(_2497) ? _2496 : (isnan(_2496) ? _2497 : min(_2496, _2497));
            float _2671 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : min(_2661, 0.0));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            _2737 = ((abs(_2503 / _2492) * cbSceneParam._m0[80u].y) * ((((_2671 - _2672) * 2.0) - ((exp2(_2511 * (isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0)))) - exp2(_2511 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0))))) * _2660)) - ((exp2(_2513 * _2671) - exp2(_2513 * _2672)) * _2660))) + (_2506 * cbSceneParam._m0[80u].z);
        }
        vec4 _2739 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2399, _2400, 1.0), 0.0);
        float _2748 = exp2((_2737 * (-1.44269502162933349609375)) * (1.0 - _2739.w));
        float _2749 = log2(_2748);
        float _2765 = log2(_2419);
        _2515 = (exp2(_2765 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2749 * cbSceneParam._m0[78u].x)) * _2739.x) / cbSceneParam._m0[78u].x)) + _2416;
        _2517 = (exp2(_2765 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2749 * cbSceneParam._m0[78u].y)) * _2739.y) / cbSceneParam._m0[78u].y)) + _2417;
        _2519 = (exp2(_2765 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2749 * cbSceneParam._m0[78u].z)) * _2739.z) / cbSceneParam._m0[78u].z)) + _2418;
        _2521 = _2748 * _2419;
    }
    else
    {
        _2515 = _2416;
        _2517 = _2417;
        _2519 = _2418;
        _2521 = _2419;
    }
    bool _2775;
    vec4 _2531;
    vec4 _2553;
    float _2555;
    float _2559;
    float _2560;
    float _2561;
    float _2562;
    bool _2572;
    for (;;)
    {
        _2531 = cbMatDynParam._m0[0u];
        float _2533 = roundEven(_2531.y);
        bool _2534 = _2533 == 3.0;
        float _2535 = log2(_2521);
        float _2542 = exp2(_2535 * cbSceneParam._m0[78u].x) * _2388;
        float _2543 = exp2(_2535 * cbSceneParam._m0[78u].y) * _2389;
        float _2544 = exp2(_2535 * cbSceneParam._m0[78u].z) * _2390;
        float _2551 = _544 + (-0.5);
        _2553 = cbMtdParam._m0[1u];
        _2555 = _2553.y * _2551;
        float _2558 = (_2533 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2559 = _2558 * (_2534 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2515)));
        _2560 = _2558 * (_2534 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2517)));
        _2561 = _2558 * (_2534 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2519)));
        _2562 = _2551 * 0.999000012874603271484375;
        _2572 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2572)
        {
            if ((cbInstanceData._m0[_602 + 7u].x + _2562) < 0.5)
            {
                _2775 = true;
                break;
            }
        }
        uint _2695 = _603 + uint(_2531.w);
        if ((cbInstanceData._m0[_2695].w < 1.0) && ((cbInstanceData._m0[_2695].w + _2562) < 0.5))
        {
            _2775 = true;
            break;
        }
        if ((_2555 + 1.0) < _2553.x)
        {
            _2775 = true;
            break;
        }
        _2775 = false;
        break;
    }
    float _2979;
    if (_2775)
    {
        discard_state = true;
        _2979 = 0.0;
    }
    else
    {
        _2979 = cbInstanceData._m0[_2391].w;
    }
    SV_Target.x = _2559;
    SV_Target.y = _2560;
    SV_Target.z = _2561;
    SV_Target.w = _2979;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2391].w;
    discard_exit();
}


