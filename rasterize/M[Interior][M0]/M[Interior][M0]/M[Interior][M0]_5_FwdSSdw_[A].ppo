#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1127;
float _3302;
float _3303;
float _3304;
float _3305;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    bool _378 = _356 > 0.0;
    float _380 = _378 ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = _361 + (-0.5);
    float _390 = _362 + (-0.5);
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_387 + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_390 + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _434 = (_420 - (_420 * _290)) * cbMtdParam._m0[9u].x;
    float _435 = (_421 - (_421 * _290)) * cbMtdParam._m0[9u].y;
    float _436 = cbMtdParam._m0[9u].z * (_422 - (_422 * _290));
    float _458 = (cbMtdParam._m0[21u].x * _349) * _355;
    float _460 = (cbMtdParam._m0[20u].w * _350) * _355;
    bool _461 = _458 > 0.0;
    float _466;
    if (_461)
    {
        _466 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _466 = frontier_phi_11_10_ladder;
    }
    bool _468 = _460 > 0.0;
    float _473;
    if (_468)
    {
        _473 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _473 = frontier_phi_15_14_ladder;
    }
    float _476 = _378 ? (cbMtdParam._m0[16u].z / _356) : 5000.0;
    float _477 = isnan(_473) ? _466 : (isnan(_466) ? _473 : min(_466, _473));
    float _478 = isnan(_476) ? _477 : (isnan(_477) ? _476 : min(_477, _476));
    float _482 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _486 = ((_478 * _356) + _482) / _482;
    float _491 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _493 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _509 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_478 * _458)) / _486) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_478 * _460)) / _486) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _514 = _509.x * cbMtdParam._m0[10u].x;
    float _515 = _509.y * cbMtdParam._m0[10u].y;
    float _516 = _509.z * cbMtdParam._m0[10u].z;
    float _524;
    if (_461)
    {
        _524 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _524 = frontier_phi_19_18_ladder;
    }
    float _530;
    if (_468)
    {
        _530 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _530 = frontier_phi_23_22_ladder;
    }
    float _532 = isnan(_530) ? _524 : (isnan(_524) ? _530 : min(_524, _530));
    float _533 = isnan(_476) ? _532 : (isnan(_532) ? _476 : min(_532, _476));
    float _540 = ((_533 * _356) + _482) / _482;
    vec4 _554 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_533 * _458)) / _540) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_533 * _460)) / _540) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _556 = _554.w;
    float _558 = _556 - (_556 * _290);
    vec4 _582 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _590 = (_582.x * 2.0) + (-1.0);
    float _592 = (_582.y * 2.0) + (-1.0);
    float _593 = dot(vec2(_590, _592), vec2(_590, _592));
    float _3344 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _598 = sqrt(1.0 - (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))));
    float _599 = _582.z * _290;
    float _602 = fma(_598, _199, fma(_592, _206, _590 * _192));
    float _605 = fma(_598, _200, fma(_592, _207, _590 * _193));
    float _608 = fma(_598, _201, fma(_592, _208, _590 * _194));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3355 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _616 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _3366 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3377 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3388 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _640 = _263 * _639;
    float _641 = _264 * _639;
    float _642 = _265 * _639;
    vec4 _647 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _649 = _647.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _808 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _814 = (cbMatDynParam._m0[5u].x * _808) + cbMatDynParam._m0[5u].y;
        float _3399 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _819 = (cbMatDynParam._m0[5u].z * _808) + cbMatDynParam._m0[5u].w;
        float _3410 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) - _815)) + _815) < ((_649 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _683 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _686 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _689 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    uint _702 = uint(roundEven(NORMAL.w)) * 13u;
    uint _704 = _702 + 9u;
    uint _705 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _711 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * cbInstanceData._m0[_705].x;
    float _712 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0)))) * cbInstanceData._m0[_705].y;
    float _713 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) * cbInstanceData._m0[_705].z;
    float _3421 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    vec4 _725 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _728 = _725.x * TEXCOORD.z;
    float _729 = dot(vec3(_613, _614, _615), vec3(_640, _641, _642));
    float _732 = _729 * 2.0;
    float _736 = (_732 * _613) - _640;
    float _737 = (_732 * _614) - _641;
    float _738 = (_732 * _615) - _642;
    float _742 = abs(dot(vec3(_640, _641, _642), vec3(_613, _614, _615)));
    float _3454 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _744 = sqrt(_616);
    float _757 = exp2((_744 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_744 * 3.0));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1126;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_797, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789));
        float _857 = fma(_797, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789));
        float _861 = fma(_797, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789));
        float _884 = _789 + _613;
        float _885 = _793 + _614;
        float _886 = _797 + _615;
        float _896 = fma(_886, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884)) - _853;
        float _897 = fma(_886, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884)) - _857;
        float _898 = fma(_886, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884)) - _861;
        float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
        float _915 = ((_902 * _896) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_902 * _897) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_902 * _898) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        float _954 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_920.x + (-0.5));
        float _956 = _954 * (_920.y + (-0.5));
        float _957 = _954 * (_920.z + (-0.5));
        float _964 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_927.x + (-0.5));
        float _966 = _964 * (_927.y + (-0.5));
        float _967 = _964 * (_927.z + (-0.5));
        float _974 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_934.x + (-0.5));
        float _976 = _974 * (_934.y + (-0.5));
        float _977 = _974 * (_934.z + (-0.5));
        float _984 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_941.x + (-0.5));
        float _986 = _984 * (_941.y + (-0.5));
        float _987 = _984 * (_941.z + (-0.5));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = _955 * 0.5;
        float _992 = _965 * 0.5;
        float _993 = _975 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1008 = (dot(vec3(_613, _614, _615), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1018 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3502 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1020 + 1.0))) + _1025) * _988;
        float _1035 = _956 * 0.5;
        float _1036 = _966 * 0.5;
        float _1037 = _976 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_613, _614, _615), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3535 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1062 + 1.0))) + _1067) * _989;
        float _1077 = _957 * 0.5;
        float _1078 = _967 * 0.5;
        float _1079 = _977 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_613, _614, _615), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3568 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1104 + 1.0))) + _1109) * _990;
        _1126 = _957;
        _1128 = _956;
        _1129 = _955;
        _1130 = _967;
        _1131 = _966;
        _1132 = _965;
        _1133 = _977;
        _1134 = _976;
        _1135 = _975;
        _1136 = _990;
        _1137 = _989;
        _1138 = _988;
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
    }
    else
    {
        _1126 = _1127;
        _1128 = _1127;
        _1129 = _1127;
        _1130 = _1127;
        _1131 = _1127;
        _1132 = _1127;
        _1133 = _1127;
        _1134 = _1127;
        _1135 = _1127;
        _1136 = _1127;
        _1137 = _1127;
        _1138 = _1127;
        _1139 = 0.0;
        _1140 = 0.0;
        _1141 = 0.0;
    }
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1170 = fma(_797, cbModelParam._m0[30u].z, fma(_793, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _789));
        float _1174 = fma(_797, cbModelParam._m0[31u].z, fma(_793, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _789));
        float _1178 = fma(_797, cbModelParam._m0[32u].z, fma(_793, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _789));
        float _1201 = _789 + _613;
        float _1202 = _793 + _614;
        float _1203 = _797 + _615;
        float _1213 = fma(_1203, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1201)) - _1170;
        float _1214 = fma(_1203, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1201)) - _1174;
        float _1215 = fma(_1203, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1201)) - _1178;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1170 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1174 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[35u].z) + ((((((_1178 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1269 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1236.x + (-0.5));
        float _1271 = _1269 * (_1236.y + (-0.5));
        float _1272 = _1269 * (_1236.z + (-0.5));
        float _1279 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1243.x + (-0.5));
        float _1281 = _1279 * (_1243.y + (-0.5));
        float _1282 = _1279 * (_1243.z + (-0.5));
        float _1289 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1250.x + (-0.5));
        float _1291 = _1289 * (_1250.y + (-0.5));
        float _1292 = _1289 * (_1250.z + (-0.5));
        float _1299 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1257.x + (-0.5));
        float _1301 = _1299 * (_1257.y + (-0.5));
        float _1302 = _1299 * (_1257.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_613, _614, _615), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3631 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1333 + 1.0))) + _1338) * _1303;
        float _1348 = _1271 * 0.5;
        float _1349 = _1281 * 0.5;
        float _1350 = _1291 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_613, _614, _615), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3664 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1375 + 1.0))) + _1380) * _1304;
        float _1390 = _1272 * 0.5;
        float _1391 = _1282 * 0.5;
        float _1392 = _1292 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_613, _614, _615), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3697 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1417 + 1.0))) + _1422) * _1305;
        _1439 = _1272;
        _1440 = _1271;
        _1441 = _1270;
        _1442 = _1282;
        _1443 = _1281;
        _1444 = _1280;
        _1445 = _1292;
        _1446 = _1291;
        _1447 = _1290;
        _1448 = _1305;
        _1449 = _1304;
        _1450 = _1303;
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1127;
        _1440 = _1127;
        _1441 = _1127;
        _1442 = _1127;
        _1443 = _1127;
        _1444 = _1127;
        _1445 = _1127;
        _1446 = _1127;
        _1447 = _1127;
        _1448 = _1127;
        _1449 = _1127;
        _1450 = _1127;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1139)) + _1139;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1140)) + _1140;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1141)) + _1141;
    float _1486 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1463));
    float _1507 = _736 * 0.5;
    float _1508 = _737 * 0.5;
    float _1509 = _738 * 0.5;
    float _1510 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1513 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1516 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1550;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1523 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1126, _1130, _1133, _1136));
        float _1527 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1531 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1538 = dot(vec4(cbModelParam._m0[39u]), vec4(_1507, _1508, _1509, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1561;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1552 = dot(vec4(cbModelParam._m0[40u]), vec4(_1507, _1508, _1509, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1565 = (_1561 * cbModelParam._m0[1u].x) + (_1550 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _616);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1575 : min(cbModelParam._m0[25u].z, _1575));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1624 = fma(_797, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789)) + cbModelParam._m0[13u].w;
        float _1628 = fma(_797, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789)) + cbModelParam._m0[14u].w;
        float _1632 = fma(_797, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789)) + cbModelParam._m0[15u].w;
        float _1635 = fma(_738, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736));
        float _1638 = fma(_738, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736));
        float _1641 = fma(_738, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736));
        float _1669;
        if (_1635 > 0.0)
        {
            _1669 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1669 = frontier_phi_41_39_ladder;
        }
        float _2038;
        if (_1638 > 0.0)
        {
            _2038 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2038 = frontier_phi_50_46_ladder;
        }
        float _2362;
        if (_1641 > 0.0)
        {
            _2362 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2362 = frontier_phi_64_57_ladder;
        }
        float _2364 = isnan(_2038) ? _1669 : (isnan(_1669) ? _2038 : min(_1669, _2038));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1635) + _1624;
        float _2370 = (_2365 * _1638) + _1628;
        float _2371 = (_2365 * _1641) + _1632;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2372;
        float _2375 = _2372 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2371 > _2375) || ((_2371 < _2373) || ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 < _2373) || (_2369 > _2375))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2371, cbModelParam._m0[9u].z, fma(_2370, cbModelParam._m0[9u].y, _2369 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2371, cbModelParam._m0[10u].z, fma(_2370, cbModelParam._m0[10u].y, _2369 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2371, cbModelParam._m0[11u].z, fma(_2370, cbModelParam._m0[11u].y, _2369 * cbModelParam._m0[11u].x))), _1576);
            frontier_phi_40_64_ladder = _2513.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2513.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2513.x * cbModelParam._m0[1u].y;
        }
        _1657 = frontier_phi_40_64_ladder_2;
        _1659 = frontier_phi_40_64_ladder_1;
        _1661 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_736, _737, _738), _1576);
        _1657 = _1645.x * cbModelParam._m0[1u].y;
        _1659 = _1645.y * cbModelParam._m0[1u].y;
        _1661 = _1645.z * cbModelParam._m0[1u].y;
    }
    float _1665 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _616);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1665 : min(cbModelParam._m0[25u].w, _1665));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1718 = fma(_797, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789)) + cbModelParam._m0[21u].w;
        float _1722 = fma(_797, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789)) + cbModelParam._m0[22u].w;
        float _1726 = fma(_797, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789)) + cbModelParam._m0[23u].w;
        float _1729 = fma(_738, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736));
        float _1732 = fma(_738, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736));
        float _1735 = fma(_738, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736));
        float _2043;
        if (_1729 > 0.0)
        {
            _2043 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2043 = frontier_phi_52_48_ladder;
        }
        float _2388;
        if (_1732 > 0.0)
        {
            _2388 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2388 = frontier_phi_66_59_ladder;
        }
        float _2578;
        if (_1735 > 0.0)
        {
            _2578 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2578 = frontier_phi_84_77_ladder;
        }
        float _2580 = isnan(_2388) ? _2043 : (isnan(_2043) ? _2388 : min(_2043, _2388));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1729) + _1718;
        float _2586 = (_2581 * _1732) + _1722;
        float _2587 = (_2581 * _1735) + _1726;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1666);
            frontier_phi_49_84_ladder = _2829.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2829.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2829.x * cbModelParam._m0[1u].z;
        }
        _1754 = frontier_phi_49_84_ladder_2;
        _1756 = frontier_phi_49_84_ladder_1;
        _1758 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_736, _737, _738), _1666);
        _1754 = _1738.x * cbModelParam._m0[1u].z;
        _1756 = _1738.y * cbModelParam._m0[1u].z;
        _1758 = _1738.z * cbModelParam._m0[1u].z;
    }
    float _1770 = ((((1.0 - _757) * ((_744 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_757 * _744)) * _728;
    float _1771 = _1770 * ((cbModelParam._m0[1u].w * (_1754 - _1657)) + _1657);
    float _1772 = _1770 * ((cbModelParam._m0[1u].w * (_1756 - _1659)) + _1659);
    float _1773 = _1770 * ((cbModelParam._m0[1u].w * (_1758 - _1661)) + _1661);
    float _1776 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1772, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1772, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1772, cbSceneParam._m0[91u].y, _1771 * cbSceneParam._m0[91u].x));
    vec4 _1790 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_662, _663));
    float _1792 = _1790.w;
    float _1804 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1792);
    float _1805 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1792);
    float _1806 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1792);
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_702 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1818 = _728 + (-1.0);
    float _1821 = (cbLight._m0[_1813].x * _1818) + 1.0;
    float _1822 = (cbLight._m0[_1813].y * _1818) + 1.0;
    uint _1823 = _1812 + 5u;
    float _1829 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1833 = _1812 + 4u;
    float _1842 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1846 = _1812 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_613, _614, _615));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_613, _614, _615));
    float _3833 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _3844 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1823].x * _1829) * _1867) + (((cbLight._m0[_1833].x * _1804) * _1842) * _1865);
    float _1875 = ((_1829 * cbLight._m0[_1823].y) * _1867) + (((cbLight._m0[_1833].y * _1805) * _1842) * _1865);
    float _1876 = ((_1829 * cbLight._m0[_1823].z) * _1867) + (((cbLight._m0[_1833].z * _1806) * _1842) * _1865);
    uint _1878 = _1812 + 8u;
    float _1891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _616) * 0.949999988079071044921875);
    float _1892 = _1891 * _1891;
    float _1893 = cbLight._m0[_1812].x + _640;
    float _1894 = cbLight._m0[_1812].y + _641;
    float _1895 = cbLight._m0[_1812].z + _642;
    float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
    float _1900 = _1899 * _1893;
    float _1901 = _1899 * _1894;
    float _1902 = _1899 * _1895;
    float _1903 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1812].xyz));
    float _3855 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _1907 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1908 = dot(vec3(_613, _614, _615), vec3(_1900, _1901, _1902));
    float _3877 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1912 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1900, _1901, _1902));
    float _3888 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1916 = _1892 * _1892;
    float _1920 = ((_1911 * _1911) * (_1916 + (-1.0))) + 1.0;
    float _1931 = (exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1932 = 1.0 - _1892;
    float _1943 = (0.5 / (((_1907 * ((_1906 * _1932) + _1892)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _1932) + _1892) * _1906))) * _1906;
    float _3899 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1945 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1916 / ((_1920 * _1920) * 3.141590118408203125));
    uint _1959 = _1812 + 9u;
    float _1970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _616) * 0.949999988079071044921875);
    float _1971 = _1970 * _1970;
    float _1972 = cbLight._m0[_1846].x + _640;
    float _1973 = cbLight._m0[_1846].y + _641;
    float _1974 = cbLight._m0[_1846].z + _642;
    float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
    float _1979 = _1978 * _1972;
    float _1980 = _1978 * _1973;
    float _1981 = _1978 * _1974;
    float _1982 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1846].xyz));
    float _3910 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1986 = dot(vec3(_613, _614, _615), vec3(_1979, _1980, _1981));
    float _3921 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1990 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_1979, _1980, _1981));
    float _3932 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1994 = _1971 * _1971;
    float _1998 = ((_1989 * _1989) * (_1994 + (-1.0))) + 1.0;
    float _2007 = (exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2008 = 1.0 - _1971;
    float _2018 = (0.5 / (((_1907 * ((_1985 * _2008) + _1971)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _2008) + _1971) * _1985))) * _1985;
    float _3943 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1994 / ((_1998 * _1998) * 3.141590118408203125));
    float _2030 = (((_2007 * cbLight._m0[_1959].x) * _2020) * _1829) + ((((cbLight._m0[_1878].x * _1804) * _1931) * _1945) * _1842);
    float _2031 = (((_2007 * cbLight._m0[_1959].y) * _2020) * _1829) + ((((cbLight._m0[_1878].y * _1805) * _1931) * _1945) * _1842);
    float _2032 = (((_2007 * cbLight._m0[_1959].z) * _2020) * _1829) + ((((cbLight._m0[_1878].z * _1806) * _1931) * _1945) * _1842);
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    float _2155;
    float _2157;
    if (_1810.y == 0u)
    {
        float _2087 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2088 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2087;
        float _2089 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2087;
        float _2090 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2087;
        uvec4 _2102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2103 = _2102.x;
        uint _2114 = uint((float(_2102.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _2103))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _2103)));
        float _2124 = (log2(_2090 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2125 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        uint _2128 = uint(isnan(14.0) ? _2125 : (isnan(_2125) ? 14.0 : min(_2125, 14.0)));
        uvec4 _2133 = texelFetch(g_lightClusterGridBuffer, int(((_2128 << 2u) + (_2114 << 6u)) >> 2u));
        uint _2134 = _2133.x;
        uint _2135 = _2102.z;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        if (((((1u << ((_2135 >> 4u) & 15u)) + 4294967295u) & _2134) == 0u) || ((_2135 & 240u) == 0u))
        {
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
            _2249 = 0.0;
            _2251 = 0.0;
        }
        else
        {
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2250;
            float _2252;
            float _2425 = 0.0;
            float _2426 = 0.0;
            float _2427 = 0.0;
            float _2428 = 0.0;
            float _2429 = 0.0;
            float _2430 = 0.0;
            uint _2431 = 0u;
            uint _2440;
            bool _2441;
            for (;;)
            {
                _2440 = texelFetch(g_lightClassification, int((((_2128 << 5u) + (_2114 << 9u)) + (_2431 << 2u)) >> 2u)).x;
                _2441 = _2440 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2441)
                {
                    frontier_phi_79_pred = _2430;
                    frontier_phi_79_pred_1 = _2429;
                    frontier_phi_79_pred_2 = _2428;
                    frontier_phi_79_pred_3 = _2427;
                    frontier_phi_79_pred_4 = _2426;
                    frontier_phi_79_pred_5 = _2425;
                }
                else
                {
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    uint _2627;
                    _2621 = _2425;
                    _2622 = _2426;
                    _2623 = _2427;
                    _2624 = _2428;
                    _2625 = _2429;
                    _2626 = _2430;
                    _2627 = _2440;
                    float _2522;
                    float _2523;
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    for (;;)
                    {
                        uint _2631 = uint(findLSB(_2627)) + (_2431 << 5u);
                        uint _2628 = (_2627 + 4294967295u) & _2627;
                        uint _2633 = _2631 * 48u;
                        vec4 _2647 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2633)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2633 + 3u)).x));
                        uint _2653 = (_2631 * 48u) + 4u;
                        vec4 _2666 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 3u)).x));
                        uint _2672 = (_2631 * 48u) + 8u;
                        vec3 _2683 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x));
                        float _2687 = _2647.x - _2088;
                        float _2688 = _2647.y - _2089;
                        float _2689 = _2647.z - _2090;
                        float _2690 = dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689));
                        float _2693 = inversesqrt(_2690);
                        float _2694 = _2693 * _2687;
                        float _2695 = _2693 * _2688;
                        float _2696 = _2693 * _2689;
                        float _2697 = dot(vec3(_683, _686, _689), vec3(_2694, _2695, _2696));
                        float _2702 = 1.0 - (_2690 * _2647.w);
                        float _3964 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                        float _2703 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2704 = sqrt(_2690) * _2666.w;
                        float _2707 = 1.39999997615814208984375 / (_2704 + 1.39999997615814208984375);
                        float _2708 = _2707 * _2707;
                        float _2711 = ((1.0 - _2708) * _2697) + _2708;
                        float _2714 = _2704 * _2704;
                        float _2718 = ((isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0))) * _2703) / ((_2714 * 0.699999988079071044921875) + 1.0);
                        float _2722 = (-0.0) - _2088;
                        float _2723 = (-0.0) - _2089;
                        float _2724 = (-0.0) - _2090;
                        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
                        float _2729 = _2728 * _2722;
                        float _2730 = _2728 * _2723;
                        float _2731 = _2728 * _2724;
                        float _2739 = exp2(log2(1.0 / ((_2714 * 3.5) + 5.0)) * 0.25);
                        float _2740 = 1.0 - _744;
                        float _2747 = sqrt(1.0 - ((1.0 - (_2740 * _2740)) * (1.0 - (_2739 * _2739))));
                        float _2748 = _2747 * _2747;
                        float _2749 = _2748 * _2748;
                        float _2750 = _2729 + _2694;
                        float _2751 = _2730 + _2695;
                        float _2752 = _2731 + _2696;
                        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
                        float _2760 = dot(vec3(_683, _686, _689), vec3(_2729, _2730, _2731));
                        float _3980 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2763 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2764 = dot(vec3(_683, _686, _689), vec3(_2756 * _2750, _2756 * _2751, _2756 * _2752));
                        float _3991 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2767 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2771 = ((_2767 * _2767) * (_2749 + (-1.0))) + 1.0;
                        float _2772 = _2707 * _2748;
                        float _2773 = _2772 * _2772;
                        float _2776 = ((1.0 - _2773) * _2697) + _2773;
                        float _4002 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2777 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2778 = 1.0 - _2748;
                        float _2788 = (0.5 / (((_2777 * ((_2763 * _2778) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2777 * _2778) + _2748) * _2763))) * _2777;
                        float _4013 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2799 = (((_2749 * 3.1415927410125732421875) * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) / ((_2771 * _2771) * ((_2714 * 2.1991131305694580078125) + 3.141590118408203125))) * _2703;
                        _2525 = (_2718 * _2666.x) + _2624;
                        _2526 = (_2718 * _2666.y) + _2625;
                        _2527 = (_2718 * _2666.z) + _2626;
                        _2522 = (_2799 * _2683.x) + _2621;
                        _2523 = (_2799 * _2683.y) + _2622;
                        _2524 = (_2799 * _2683.z) + _2623;
                        if (_2628 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2621 = _2522;
                            _2622 = _2523;
                            _2623 = _2524;
                            _2624 = _2525;
                            _2625 = _2526;
                            _2626 = _2527;
                            _2627 = _2628;
                        }
                    }
                    frontier_phi_79_pred = _2527;
                    frontier_phi_79_pred_1 = _2526;
                    frontier_phi_79_pred_2 = _2525;
                    frontier_phi_79_pred_3 = _2524;
                    frontier_phi_79_pred_4 = _2523;
                    frontier_phi_79_pred_5 = _2522;
                }
                _2252 = frontier_phi_79_pred;
                _2250 = frontier_phi_79_pred_1;
                _2248 = frontier_phi_79_pred_2;
                _2246 = frontier_phi_79_pred_3;
                _2244 = frontier_phi_79_pred_4;
                _2242 = frontier_phi_79_pred_5;
                uint _2432 = _2431 + 1u;
                if (_2432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2425 = _2242;
                    _2426 = _2244;
                    _2427 = _2246;
                    _2428 = _2248;
                    _2429 = _2250;
                    _2430 = _2252;
                    _2431 = _2432;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
            _2249 = _2250;
            _2251 = _2252;
        }
        uvec4 _2255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2256 = _2255.z;
        uint _2258 = (_2256 >> 8u) & 15u;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        float _2403;
        if (((4294967295u << _2258) & _2134) == 0u)
        {
            _2393 = _2241;
            _2395 = _2243;
            _2397 = _2245;
            _2399 = _2247;
            _2401 = _2249;
            _2403 = _2251;
        }
        else
        {
            float _2418 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
            float _2419 = _2418 * _2088;
            float _2420 = _2418 * _2089;
            float _2421 = _2418 * _2090;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2258 < ((_2256 >> 12u) & 15u))
            {
                float _2394;
                float _2396;
                float _2398;
                float _2400;
                float _2402;
                float _2404;
                float _2604 = _2241;
                float _2605 = _2243;
                float _2606 = _2245;
                float _2607 = _2247;
                float _2608 = _2249;
                float _2609 = _2251;
                uint _2610 = _2258;
                uint _2619;
                bool _2620;
                for (;;)
                {
                    _2619 = texelFetch(g_lightClassification, int((((_2128 << 5u) + (_2114 << 9u)) + (_2610 << 2u)) >> 2u)).x;
                    _2620 = _2619 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2620)
                    {
                        frontier_phi_93_pred = _2608;
                        frontier_phi_93_pred_1 = _2607;
                        frontier_phi_93_pred_2 = _2606;
                        frontier_phi_93_pred_3 = _2605;
                        frontier_phi_93_pred_4 = _2604;
                        frontier_phi_93_pred_5 = _2609;
                    }
                    else
                    {
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _2847 = _2604;
                        float _2848 = _2605;
                        float _2849 = _2606;
                        float _2850 = _2607;
                        float _2851 = _2608;
                        float _2852 = _2609;
                        uint _2853 = _2619;
                        uint _2854;
                        vec4 _2879;
                        float _2880;
                        vec4 _2895;
                        vec3 _2907;
                        vec4 _2922;
                        vec4 _2937;
                        float _2983;
                        bool _2984;
                        for (;;)
                        {
                            uint _2864 = ((_2610 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2853));
                            _2854 = (_2853 + 4294967295u) & _2853;
                            uint _2866 = _2864 * 40u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            _2880 = _2879.w;
                            uint _2882 = (_2864 * 40u) + 4u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2897 = (_2864 * 40u) + 8u;
                            _2907 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x));
                            uint _2909 = (_2864 * 40u) + 16u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            uint _2924 = (_2864 * 40u) + 20u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2939 = (_2864 * 40u) + 24u;
                            vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2958 = (_2864 * 40u) + 28u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            _2983 = fma(_2090, _2971.z, fma(_2089, _2971.y, _2971.x * _2088)) + _2971.w;
                            _2984 = !((fma(_2090, _2952.z, fma(_2089, _2952.y, _2952.x * _2088)) + _2952.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2984)
                            {
                                float _3011 = _2879.x - _2088;
                                float _3012 = _2879.y - _2089;
                                float _3013 = _2879.z - _2090;
                                float _3014 = dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013));
                                float _3017 = inversesqrt(_3014);
                                float _3018 = _3017 * _3011;
                                float _3019 = _3017 * _3012;
                                float _3020 = _3017 * _3013;
                                float _3024 = 1.0 - (_3014 / (_2880 * _2880));
                                float _4024 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _3029 = sqrt(_3014) * _2895.w;
                                float _3031 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                                float _3032 = _3031 * _3031;
                                float _3035 = ((1.0 - _3032) * dot(vec3(_3018, _3019, _3020), vec3(_683, _686, _689))) + _3032;
                                float _3038 = _3029 * _3029;
                                float _3042 = (fma(_2090, _2922.z, fma(_2089, _2922.y, _2922.x * _2088)) + _2922.w) / _2983;
                                float _3043 = (fma(_2090, _2937.z, fma(_2089, _2937.y, _2937.x * _2088)) + _2937.w) / _2983;
                                float _3047 = 1.0 - dot(vec2(_3042, _3043), vec2(_3042, _3043));
                                float _4040 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _3049 = _3048 * (((isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))) * _3025) / ((_3038 * 0.699999988079071044921875) + 1.0));
                                float _3061 = exp2(log2(1.0 / ((_3038 * 3.5) + 5.0)) * 0.25);
                                float _3062 = 1.0 - _744;
                                float _3069 = sqrt(1.0 - ((1.0 - (_3062 * _3062)) * (1.0 - (_3061 * _3061))));
                                float _3070 = _3069 * _3069;
                                float _3071 = _3070 * _3070;
                                float _3072 = _3018 - _2419;
                                float _3073 = _3019 - _2420;
                                float _3074 = _3020 - _2421;
                                float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                                float _3082 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2419, (-0.0) - _2420, (-0.0) - _2421));
                                float _4051 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3085 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3086 = dot(vec3(_683, _686, _689), vec3(_3078 * _3072, _3078 * _3073, _3078 * _3074));
                                float _4062 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3089 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3093 = ((_3089 * _3089) * (_3071 + (-1.0))) + 1.0;
                                float _3094 = _3031 * _3070;
                                float _3095 = _3094 * _3094;
                                float _3101 = ((1.0 - _3095) * dot(vec3(_683, _686, _689), vec3(_3018, _3019, _3020))) + _3095;
                                float _4073 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3102 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3103 = 1.0 - _3070;
                                float _3113 = (0.5 / (((_3102 * ((_3085 * _3103) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3070) * _3085))) * _3102;
                                float _4084 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3123 = (_3048 * _3025) * (((_3071 * 3.1415927410125732421875) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) / ((_3093 * _3093) * ((_3038 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3049 * _2895.z;
                                frontier_phi_99_pred_1 = _3049 * _2895.y;
                                frontier_phi_99_pred_2 = _3049 * _2895.x;
                                frontier_phi_99_pred_3 = _3123 * _2907.z;
                                frontier_phi_99_pred_4 = _3123 * _2907.y;
                                frontier_phi_99_pred_5 = _3123 * _2907.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3132 = frontier_phi_99_pred;
                            _3131 = frontier_phi_99_pred_1;
                            _3130 = frontier_phi_99_pred_2;
                            _3129 = frontier_phi_99_pred_3;
                            _3128 = frontier_phi_99_pred_4;
                            _3127 = frontier_phi_99_pred_5;
                            _2837 = _3130 + _2850;
                            _2838 = _3131 + _2851;
                            _2839 = _3132 + _2852;
                            _2834 = _3127 + _2847;
                            _2835 = _3128 + _2848;
                            _2836 = _3129 + _2849;
                            if (_2854 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2854;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2838;
                        frontier_phi_93_pred_1 = _2837;
                        frontier_phi_93_pred_2 = _2836;
                        frontier_phi_93_pred_3 = _2835;
                        frontier_phi_93_pred_4 = _2834;
                        frontier_phi_93_pred_5 = _2839;
                    }
                    _2402 = frontier_phi_93_pred;
                    _2400 = frontier_phi_93_pred_1;
                    _2398 = frontier_phi_93_pred_2;
                    _2396 = frontier_phi_93_pred_3;
                    _2394 = frontier_phi_93_pred_4;
                    _2404 = frontier_phi_93_pred_5;
                    uint _2611 = _2610 + 1u;
                    if (_2611 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2604 = _2394;
                        _2605 = _2396;
                        _2606 = _2398;
                        _2607 = _2400;
                        _2608 = _2402;
                        _2609 = _2404;
                        _2610 = _2611;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2404;
                frontier_phi_68_69_ladder_1 = _2402;
                frontier_phi_68_69_ladder_2 = _2400;
                frontier_phi_68_69_ladder_3 = _2398;
                frontier_phi_68_69_ladder_4 = _2394;
                frontier_phi_68_69_ladder_5 = _2396;
            }
            else
            {
                frontier_phi_68_69_ladder = _2251;
                frontier_phi_68_69_ladder_1 = _2249;
                frontier_phi_68_69_ladder_2 = _2247;
                frontier_phi_68_69_ladder_3 = _2245;
                frontier_phi_68_69_ladder_4 = _2241;
                frontier_phi_68_69_ladder_5 = _2243;
            }
            _2393 = frontier_phi_68_69_ladder_4;
            _2395 = frontier_phi_68_69_ladder_5;
            _2397 = frontier_phi_68_69_ladder_3;
            _2399 = frontier_phi_68_69_ladder_2;
            _2401 = frontier_phi_68_69_ladder_1;
            _2403 = frontier_phi_68_69_ladder;
        }
        float _2408 = isnan(1.0) ? _728 : (isnan(_728) ? 1.0 : min(_728, 1.0));
        _2147 = (_2408 * _2399) + _1874;
        _2149 = (_2408 * _2401) + _1875;
        _2151 = (_2408 * _2403) + _1876;
        _2153 = ((_2393 * 0.039999999105930328369140625) * _2408) + _2030;
        _2155 = ((_2395 * 0.039999999105930328369140625) * _2408) + _2031;
        _2157 = ((_2397 * 0.039999999105930328369140625) * _2408) + _2032;
    }
    else
    {
        _2147 = _1874;
        _2149 = _1875;
        _2151 = _1876;
        _2153 = _2030;
        _2155 = _2031;
        _2157 = _2032;
    }
    uint _2163 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _4100 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4111 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4122 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _2188 = (((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2147 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _728))) + ((_2153 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1565)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2163].x * ((_558 * ((_514 - _434) - (_514 * _290))) + _434));
    float _2190 = ((cbInstanceData._m0[_2163].y * ((_558 * ((_515 - _435) - (_515 * _290))) + _435)) + ((_2155 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1565)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2149 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _728)));
    float _2192 = ((cbInstanceData._m0[_2163].z * ((_558 * ((_516 - _436) - (_516 * _290))) + _436)) + ((_2157 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1565)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2151 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _728)));
    float _2193 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2194 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2195 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    uint _2196 = _702 + 6u;
    float _2204 = _662 / cbSceneParam._m0[86u].x;
    float _2205 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2219 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2204, _2205, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2221 = _2219.x;
    float _2222 = _2219.y;
    float _2223 = _2219.z;
    float _2224 = _2219.w;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2266 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2267 = _2266 / _635;
        float _2278 = _2267 * _263;
        float _2279 = _264 * _2267;
        float _2280 = (-0.0) - _2279;
        float _2281 = _2267 * _265;
        float _2283 = (cbSceneParam._m0[77u].w * _2280) / _2266;
        float _2284 = _2283 + cbSceneParam._m0[79u].w;
        float _2285 = cbSceneParam._m0[79u].w - _2279;
        float _2291 = sqrt(((_2278 * _2278) + (_2279 * _2279)) + (_2281 * _2281));
        float _2294 = (1.0 - (cbSceneParam._m0[77u].w / _2266)) * _2291;
        float _2300 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2302 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2535;
        if (abs((_2280 - _2283) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2535 = ((((_2284 > 0.0) ? exp2(_2300 * _2284) : (2.0 - exp2(_2302 * _2284))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2294;
        }
        else
        {
            float _2454 = 1.0 / cbSceneParam._m0[80u].x;
            float _2455 = isnan(_2285) ? _2284 : (isnan(_2284) ? _2285 : max(_2284, _2285));
            float _2456 = isnan(_2285) ? _2284 : (isnan(_2284) ? _2285 : min(_2284, _2285));
            float _2465 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : min(_2455, 0.0));
            float _2466 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : min(_2456, 0.0));
            _2535 = ((abs(_2291 / _2280) * cbSceneParam._m0[80u].y) * ((((_2465 - _2466) * 2.0) - ((exp2(_2300 * (isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0)))) - exp2(_2300 * (isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0))))) * _2454)) - ((exp2(_2302 * _2465) - exp2(_2302 * _2466)) * _2454))) + (_2294 * cbSceneParam._m0[80u].z);
        }
        vec4 _2537 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2204, _2205, 1.0), 0.0);
        float _2546 = exp2((_2535 * (-1.44269502162933349609375)) * (1.0 - _2537.w));
        float _2547 = log2(_2546);
        float _2563 = log2(_2224);
        _2304 = (exp2(_2563 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2547 * cbSceneParam._m0[78u].x)) * _2537.x) / cbSceneParam._m0[78u].x)) + _2221;
        _2306 = (exp2(_2563 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2547 * cbSceneParam._m0[78u].y)) * _2537.y) / cbSceneParam._m0[78u].y)) + _2222;
        _2308 = (exp2(_2563 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2547 * cbSceneParam._m0[78u].z)) * _2537.z) / cbSceneParam._m0[78u].z)) + _2223;
        _2310 = _2546 * _2224;
    }
    else
    {
        _2304 = _2221;
        _2306 = _2222;
        _2308 = _2223;
        _2310 = _2224;
    }
    bool _2573;
    vec4 _2320;
    vec4 _2342;
    float _2344;
    float _2348;
    float _2349;
    float _2350;
    float _2351;
    bool _2361;
    for (;;)
    {
        _2320 = cbMatDynParam._m0[0u];
        float _2322 = roundEven(_2320.y);
        bool _2323 = _2322 == 3.0;
        float _2324 = log2(_2310);
        float _2331 = exp2(_2324 * cbSceneParam._m0[78u].x) * _2193;
        float _2332 = exp2(_2324 * cbSceneParam._m0[78u].y) * _2194;
        float _2333 = exp2(_2324 * cbSceneParam._m0[78u].z) * _2195;
        float _2340 = _649 + (-0.5);
        _2342 = cbMtdParam._m0[1u];
        _2344 = _2342.y * _2340;
        float _2347 = (_2322 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2348 = _2347 * (_2323 ? _2331 : (_2331 + (cbSceneParam._m0[72u].w * _2304)));
        _2349 = _2347 * (_2323 ? _2332 : (_2332 + (cbSceneParam._m0[72u].w * _2306)));
        _2350 = _2347 * (_2323 ? _2333 : (_2333 + (cbSceneParam._m0[72u].w * _2308)));
        _2351 = _2340 * 0.999000012874603271484375;
        _2361 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2361)
        {
            if ((cbInstanceData._m0[_702 + 7u].x + _2351) < 0.5)
            {
                _2573 = true;
                break;
            }
        }
        uint _2489 = _704 + uint(_2320.w);
        if ((cbInstanceData._m0[_2489].w < 1.0) && ((cbInstanceData._m0[_2489].w + _2351) < 0.5))
        {
            _2573 = true;
            break;
        }
        if ((_2344 + 1.0) < _2342.x)
        {
            _2573 = true;
            break;
        }
        _2573 = false;
        break;
    }
    float _2804;
    if (_2573)
    {
        discard_state = true;
        _2804 = 0.0;
    }
    else
    {
        _2804 = cbInstanceData._m0[_2196].w;
    }
    SV_Target.x = _2348;
    SV_Target.y = _2349;
    SV_Target.z = _2350;
    SV_Target.w = _2804;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2196].w;
    discard_exit();
}


