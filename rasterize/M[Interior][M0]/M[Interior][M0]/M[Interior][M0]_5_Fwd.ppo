#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1080;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _327 = cbMtdParam._m0[22u].y + _257;
    float _328 = cbMtdParam._m0[22u].z + _258;
    float _329 = cbMtdParam._m0[22u].w + _259;
    float _343 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_186, _187, _188));
    float _344 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_200, _201, _202));
    float _345 = (-0.0) - dot(vec3(_327, _328, _329), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _349 * _345;
    float _352 = (cbMtdParam._m0[19u].x * _343) * _349;
    float _354 = (cbMtdParam._m0[18u].w * _344) * _349;
    float _355 = fract(TEXCOORD.x);
    float _356 = fract(TEXCOORD.y);
    float _362;
    if (_352 > 0.0)
    {
        _362 = (1.0 - _355) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _355) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _362 = frontier_phi_3_2_ladder;
    }
    float _370;
    if (_354 > 0.0)
    {
        _370 = (1.0 - _356) / _354;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _356) / _354;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _370 = frontier_phi_7_6_ladder;
    }
    bool _372 = _350 > 0.0;
    float _374 = _372 ? (cbMtdParam._m0[15u].x / _350) : 5000.0;
    float _375 = isnan(_370) ? _362 : (isnan(_362) ? _370 : min(_362, _370));
    float _376 = isnan(_374) ? _375 : (isnan(_375) ? _374 : min(_375, _374));
    float _380 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _381 = _355 + (-0.5);
    float _384 = _356 + (-0.5);
    float _387 = ((_376 * _350) + _380) / _380;
    vec4 _412 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_381 + (_376 * _352)) / _387) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_384 + (_376 * _354)) / _387) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _428 = (_414 - (_414 * _284)) * cbMtdParam._m0[9u].x;
    float _429 = (_415 - (_415 * _284)) * cbMtdParam._m0[9u].y;
    float _430 = cbMtdParam._m0[9u].z * (_416 - (_416 * _284));
    float _452 = (cbMtdParam._m0[21u].x * _343) * _349;
    float _454 = (cbMtdParam._m0[20u].w * _344) * _349;
    bool _455 = _452 > 0.0;
    float _460;
    if (_455)
    {
        _460 = (1.0 - _355) / _452;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_452 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _355) / _452;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _460 = frontier_phi_11_10_ladder;
    }
    bool _462 = _454 > 0.0;
    float _467;
    if (_462)
    {
        _467 = (1.0 - _356) / _454;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _356) / _454;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _467 = frontier_phi_15_14_ladder;
    }
    float _470 = _372 ? (cbMtdParam._m0[16u].z / _350) : 5000.0;
    float _471 = isnan(_467) ? _460 : (isnan(_460) ? _467 : min(_460, _467));
    float _472 = isnan(_470) ? _471 : (isnan(_471) ? _470 : min(_471, _470));
    float _476 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _480 = ((_472 * _350) + _476) / _476;
    float _485 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _487 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _503 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_381 + (_472 * _452)) / _480) + 0.5) + _485) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_384 + (_472 * _454)) / _480) + 0.5) + _487) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _508 = _503.x * cbMtdParam._m0[10u].x;
    float _509 = _503.y * cbMtdParam._m0[10u].y;
    float _510 = _503.z * cbMtdParam._m0[10u].z;
    float _518;
    if (_455)
    {
        _518 = (1.0 - _355) / _452;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_452 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _355) / _452;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _518 = frontier_phi_19_18_ladder;
    }
    float _524;
    if (_462)
    {
        _524 = (1.0 - _356) / _454;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _356) / _454;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _524 = frontier_phi_23_22_ladder;
    }
    float _526 = isnan(_524) ? _518 : (isnan(_518) ? _524 : min(_518, _524));
    float _527 = isnan(_470) ? _526 : (isnan(_526) ? _470 : min(_526, _470));
    float _534 = ((_527 * _350) + _476) / _476;
    vec4 _548 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_381 + (_527 * _452)) / _534) + 0.5) + _485) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_384 + (_527 * _454)) / _534) + 0.5) + _487) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _550 = _548.w;
    float _552 = _550 - (_550 * _284);
    vec4 _576 = texture(sampler2D(M_Interior_M0_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _584 = (_576.x * 2.0) + (-1.0);
    float _586 = (_576.y * 2.0) + (-1.0);
    float _587 = dot(vec2(_584, _586), vec2(_584, _586));
    float _3207 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _592 = sqrt(1.0 - (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))));
    float _593 = _576.z * _284;
    float _596 = fma(_592, _193, fma(_586, _200, _584 * _186));
    float _599 = fma(_592, _194, fma(_586, _201, _584 * _187));
    float _602 = fma(_592, _195, fma(_586, _202, _584 * _188));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    float _607 = _606 * _596;
    float _608 = _606 * _599;
    float _609 = _606 * _602;
    float _3218 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _610 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
    float _3229 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3240 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3251 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _629 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _633 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _634 = _257 * _633;
    float _635 = _258 * _633;
    float _636 = _259 * _633;
    float _642 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _643 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _664 = fma(_609, cbSceneParam._m0[5u].z, fma(_608, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _607));
    float _667 = fma(_609, cbSceneParam._m0[6u].z, fma(_608, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _607));
    float _670 = fma(_609, cbSceneParam._m0[7u].z, fma(_608, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _607));
    uint _683 = uint(roundEven(NORMAL.w)) * 13u;
    uint _685 = _683 + 9u;
    uint _686 = _685 + uint(cbMatDynParam._m0[0u].w);
    float _692 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0)))) * cbInstanceData._m0[_686].x;
    float _693 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0)))) * cbInstanceData._m0[_686].y;
    float _694 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)))) * cbInstanceData._m0[_686].z;
    float _3262 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _642, cbSceneParam._m0[86u].y * _643));
    float _709 = _706.x * TEXCOORD.z;
    float _710 = dot(vec3(_607, _608, _609), vec3(_634, _635, _636));
    float _713 = _710 * 2.0;
    float _717 = (_713 * _607) - _634;
    float _718 = (_713 * _608) - _635;
    float _719 = (_713 * _609) - _636;
    float _723 = abs(dot(vec3(_634, _635, _636), vec3(_607, _608, _609)));
    float _3295 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _725 = sqrt(_610);
    float _738 = exp2((_725 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_725 * 3.0));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_778, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _770));
        float _810 = fma(_778, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _770));
        float _814 = fma(_778, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _770));
        float _837 = _770 + _607;
        float _838 = _774 + _608;
        float _839 = _778 + _609;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _806;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _810;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _814;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_607, _608, _609), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3343 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_607, _608, _609), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3354 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3365 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3376 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_607, _608, _609), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3409 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1120 = fma(_778, cbModelParam._m0[30u].z, fma(_774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _770));
        float _1124 = fma(_778, cbModelParam._m0[31u].z, fma(_774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _770));
        float _1128 = fma(_778, cbModelParam._m0[32u].z, fma(_774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _770));
        float _1151 = _770 + _607;
        float _1152 = _774 + _608;
        float _1153 = _778 + _609;
        float _1163 = fma(_1153, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1151)) - _1120;
        float _1164 = fma(_1153, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1151)) - _1124;
        float _1165 = fma(_1153, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1151)) - _1128;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1120 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1124 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[35u].z) + ((((((_1128 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1219 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1186.x + (-0.5));
        float _1221 = _1219 * (_1186.y + (-0.5));
        float _1222 = _1219 * (_1186.z + (-0.5));
        float _1229 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1193.x + (-0.5));
        float _1231 = _1229 * (_1193.y + (-0.5));
        float _1232 = _1229 * (_1193.z + (-0.5));
        float _1239 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1200.x + (-0.5));
        float _1241 = _1239 * (_1200.y + (-0.5));
        float _1242 = _1239 * (_1200.z + (-0.5));
        float _1249 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1207.x + (-0.5));
        float _1251 = _1249 * (_1207.y + (-0.5));
        float _1252 = _1249 * (_1207.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_607, _608, _609), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3472 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_1283 + 1.0))) + _1288) * _1253;
        float _1298 = _1221 * 0.5;
        float _1299 = _1231 * 0.5;
        float _1300 = _1241 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_607, _608, _609), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3505 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_1325 + 1.0))) + _1330) * _1254;
        float _1340 = _1222 * 0.5;
        float _1341 = _1232 * 0.5;
        float _1342 = _1242 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_607, _608, _609), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3538 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1367 + 1.0))) + _1372) * _1255;
        _1389 = _1222;
        _1390 = _1221;
        _1391 = _1220;
        _1392 = _1232;
        _1393 = _1231;
        _1394 = _1230;
        _1395 = _1242;
        _1396 = _1241;
        _1397 = _1240;
        _1398 = _1255;
        _1399 = _1254;
        _1400 = _1253;
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1080;
        _1390 = _1080;
        _1391 = _1080;
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1092)) + _1092;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1093)) + _1093;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1094)) + _1094;
    float _1436 = fma(_1415, cbSceneParam._m0[89u].z, fma(_1414, cbSceneParam._m0[89u].y, _1413 * cbSceneParam._m0[89u].x));
    float _1439 = fma(_1415, cbSceneParam._m0[90u].z, fma(_1414, cbSceneParam._m0[90u].y, _1413 * cbSceneParam._m0[90u].x));
    float _1442 = fma(_1415, cbSceneParam._m0[91u].z, fma(_1414, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1413));
    float _1457 = _717 * 0.5;
    float _1458 = _718 * 0.5;
    float _1459 = _719 * 0.5;
    float _1460 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1463 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1466 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1500;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1473 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1477 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1481 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1488 = dot(vec4(cbModelParam._m0[39u]), vec4(_1457, _1458, _1459, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1511;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1502 = dot(vec4(cbModelParam._m0[40u]), vec4(_1457, _1458, _1459, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1515 = (_1511 * cbModelParam._m0[1u].x) + (_1500 * (1.0 - cbModelParam._m0[1u].x));
    float _1525 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _610);
    float _1526 = isnan(_1525) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1525 : min(cbModelParam._m0[25u].z, _1525));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1574 = fma(_778, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770)) + cbModelParam._m0[13u].w;
        float _1578 = fma(_778, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770)) + cbModelParam._m0[14u].w;
        float _1582 = fma(_778, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770)) + cbModelParam._m0[15u].w;
        float _1585 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1588 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1591 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1619;
        if (_1585 > 0.0)
        {
            _1619 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1619 = frontier_phi_38_36_ladder;
        }
        float _1964;
        if (_1588 > 0.0)
        {
            _1964 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1964 = frontier_phi_47_43_ladder;
        }
        float _2280;
        if (_1591 > 0.0)
        {
            _2280 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2280 = frontier_phi_61_54_ladder;
        }
        float _2282 = isnan(_1964) ? _1619 : (isnan(_1619) ? _1964 : min(_1619, _1964));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1585) + _1574;
        float _2288 = (_2283 * _1588) + _1578;
        float _2289 = (_2283 * _1591) + _1582;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2290;
        float _2293 = _2290 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2289 > _2293) || ((_2289 < _2291) || ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 < _2291) || (_2287 > _2293))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2289, cbModelParam._m0[9u].z, fma(_2288, cbModelParam._m0[9u].y, _2287 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2289, cbModelParam._m0[10u].z, fma(_2288, cbModelParam._m0[10u].y, _2287 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2289, cbModelParam._m0[11u].z, fma(_2288, cbModelParam._m0[11u].y, _2287 * cbModelParam._m0[11u].x))), _1526);
            frontier_phi_37_61_ladder = _2415.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2415.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2415.x * cbModelParam._m0[1u].y;
        }
        _1607 = frontier_phi_37_61_ladder_2;
        _1609 = frontier_phi_37_61_ladder_1;
        _1611 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1526);
        _1607 = _1595.x * cbModelParam._m0[1u].y;
        _1609 = _1595.y * cbModelParam._m0[1u].y;
        _1611 = _1595.z * cbModelParam._m0[1u].y;
    }
    float _1615 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _610);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1615 : min(cbModelParam._m0[25u].w, _1615));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1668 = fma(_778, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770)) + cbModelParam._m0[21u].w;
        float _1672 = fma(_778, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770)) + cbModelParam._m0[22u].w;
        float _1676 = fma(_778, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770)) + cbModelParam._m0[23u].w;
        float _1679 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1682 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1685 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1969;
        if (_1679 > 0.0)
        {
            _1969 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1969 = frontier_phi_49_45_ladder;
        }
        float _2306;
        if (_1682 > 0.0)
        {
            _2306 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2306 = frontier_phi_63_56_ladder;
        }
        float _2475;
        if (_1685 > 0.0)
        {
            _2475 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2475 = frontier_phi_77_72_ladder;
        }
        float _2477 = isnan(_2306) ? _1969 : (isnan(_1969) ? _2306 : min(_1969, _2306));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1679) + _1668;
        float _2483 = (_2478 * _1682) + _1672;
        float _2484 = (_2478 * _1685) + _1676;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2485;
        float _2488 = _2485 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2484 > _2488) || ((_2484 < _2486) || ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 < _2486) || (_2482 > _2488))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2484, cbModelParam._m0[17u].z, fma(_2483, cbModelParam._m0[17u].y, _2482 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2484, cbModelParam._m0[18u].z, fma(_2483, cbModelParam._m0[18u].y, _2482 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2484, cbModelParam._m0[19u].z, fma(_2483, cbModelParam._m0[19u].y, _2482 * cbModelParam._m0[19u].x))), _1616);
            frontier_phi_46_77_ladder = _2717.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2717.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2717.x * cbModelParam._m0[1u].z;
        }
        _1704 = frontier_phi_46_77_ladder_2;
        _1706 = frontier_phi_46_77_ladder_1;
        _1708 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1616);
        _1704 = _1688.x * cbModelParam._m0[1u].z;
        _1706 = _1688.y * cbModelParam._m0[1u].z;
        _1708 = _1688.z * cbModelParam._m0[1u].z;
    }
    float _1720 = ((((1.0 - _738) * ((_725 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_738 * _725)) * _709;
    float _1721 = _1720 * ((cbModelParam._m0[1u].w * (_1704 - _1607)) + _1607);
    float _1722 = _1720 * ((cbModelParam._m0[1u].w * (_1706 - _1609)) + _1609);
    float _1723 = _1720 * ((cbModelParam._m0[1u].w * (_1708 - _1611)) + _1611);
    float _1726 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, _1721 * cbSceneParam._m0[91u].x));
    uvec4 _1742 = floatBitsToUint(cbInstanceData._m0[_683 + 5u]);
    uint _1744 = _1742.x * 14u;
    uint _1745 = _1744 + 13u;
    float _1750 = _709 + (-1.0);
    float _1753 = (cbLight._m0[_1745].x * _1750) + 1.0;
    float _1754 = (cbLight._m0[_1745].y * _1750) + 1.0;
    uint _1755 = _1744 + 5u;
    float _1761 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1765 = _1744 + 4u;
    float _1771 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1775 = _1744 | 1u;
    float _1786 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_607, _608, _609));
    float _1789 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_607, _608, _609));
    float _3674 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _3685 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1794 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.3183098733425140380859375;
    float _1796 = (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.3183098733425140380859375;
    float _1803 = ((cbLight._m0[_1755].x * _1761) * _1796) + ((cbLight._m0[_1765].x * _1771) * _1794);
    float _1804 = ((_1761 * cbLight._m0[_1755].y) * _1796) + ((_1771 * cbLight._m0[_1765].y) * _1794);
    float _1805 = ((_1761 * cbLight._m0[_1755].z) * _1796) + ((_1771 * cbLight._m0[_1765].z) * _1794);
    uint _1807 = _1744 + 8u;
    float _1820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _610) * 0.949999988079071044921875);
    float _1821 = _1820 * _1820;
    float _1822 = cbLight._m0[_1744].x + _634;
    float _1823 = cbLight._m0[_1744].y + _635;
    float _1824 = cbLight._m0[_1744].z + _636;
    float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
    float _1829 = _1828 * _1822;
    float _1830 = _1828 * _1823;
    float _1831 = _1828 * _1824;
    float _1832 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1744].xyz));
    float _3696 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _1836 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _1837 = dot(vec3(_607, _608, _609), vec3(_1829, _1830, _1831));
    float _3718 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _1841 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1829, _1830, _1831));
    float _3729 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1845 = _1821 * _1821;
    float _1849 = ((_1840 * _1840) * (_1845 + (-1.0))) + 1.0;
    float _1860 = (exp2(log2(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1861 = 1.0 - _1821;
    float _1872 = (0.5 / (((_1836 * ((_1835 * _1861) + _1821)) + 9.9999999392252902907785028219223e-09) + (((_1836 * _1861) + _1821) * _1835))) * _1835;
    float _3740 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1874 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1845 / ((_1849 * _1849) * 3.141590118408203125));
    uint _1885 = _1744 + 9u;
    float _1896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1775].w)) * _610) * 0.949999988079071044921875);
    float _1897 = _1896 * _1896;
    float _1898 = cbLight._m0[_1775].x + _634;
    float _1899 = cbLight._m0[_1775].y + _635;
    float _1900 = cbLight._m0[_1775].z + _636;
    float _1904 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
    float _1905 = _1904 * _1898;
    float _1906 = _1904 * _1899;
    float _1907 = _1904 * _1900;
    float _1908 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1775].xyz));
    float _3751 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _1912 = dot(vec3(_607, _608, _609), vec3(_1905, _1906, _1907));
    float _3762 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1916 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_1905, _1906, _1907));
    float _3773 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1920 = _1897 * _1897;
    float _1924 = ((_1915 * _1915) * (_1920 + (-1.0))) + 1.0;
    float _1933 = (exp2(log2(1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1934 = 1.0 - _1897;
    float _1944 = (0.5 / (((_1836 * ((_1911 * _1934) + _1897)) + 9.9999999392252902907785028219223e-09) + (((_1836 * _1934) + _1897) * _1911))) * _1911;
    float _3784 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1946 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1920 / ((_1924 * _1924) * 3.141590118408203125));
    float _1956 = (((_1933 * cbLight._m0[_1885].x) * _1946) * _1761) + (((_1860 * cbLight._m0[_1807].x) * _1874) * _1771);
    float _1957 = (((_1933 * cbLight._m0[_1885].y) * _1946) * _1761) + (((_1860 * cbLight._m0[_1807].y) * _1874) * _1771);
    float _1958 = (((_1933 * cbLight._m0[_1885].z) * _1946) * _1761) + (((_1860 * cbLight._m0[_1807].z) * _1874) * _1771);
    float _2073;
    float _2075;
    float _2077;
    float _2079;
    float _2081;
    float _2083;
    if (_1742.y == 0u)
    {
        float _2013 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2014 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2013;
        float _2015 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2013;
        float _2016 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2013;
        uvec4 _2028 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2029 = _2028.x;
        uint _2040 = uint((float(_2028.y) * floor(float(uint(cbSceneParam._m0[85u].y * _643) / _2029))) + floor(float(uint(cbSceneParam._m0[85u].x * _642) / _2029)));
        float _2050 = (log2(_2016 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2051 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        uint _2054 = uint(isnan(14.0) ? _2051 : (isnan(_2051) ? 14.0 : min(_2051, 14.0)));
        uvec4 _2059 = texelFetch(g_lightClusterGridBuffer, int(((_2054 << 2u) + (_2040 << 6u)) >> 2u));
        uint _2060 = _2059.x;
        uint _2061 = _2028.z;
        float _2167;
        float _2169;
        float _2171;
        float _2173;
        float _2175;
        float _2177;
        if (((((1u << ((_2061 >> 4u) & 15u)) + 4294967295u) & _2060) == 0u) || ((_2061 & 240u) == 0u))
        {
            _2167 = 0.0;
            _2169 = 0.0;
            _2171 = 0.0;
            _2173 = 0.0;
            _2175 = 0.0;
            _2177 = 0.0;
        }
        else
        {
            float _2168;
            float _2170;
            float _2172;
            float _2174;
            float _2176;
            float _2178;
            float _2343 = 0.0;
            float _2344 = 0.0;
            float _2345 = 0.0;
            float _2346 = 0.0;
            float _2347 = 0.0;
            float _2348 = 0.0;
            uint _2349 = 0u;
            uint _2358;
            bool _2359;
            for (;;)
            {
                _2358 = texelFetch(g_lightClassification, int((((_2054 << 5u) + (_2040 << 9u)) + (_2349 << 2u)) >> 2u)).x;
                _2359 = _2358 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2359)
                {
                    frontier_phi_74_pred = _2346;
                    frontier_phi_74_pred_1 = _2345;
                    frontier_phi_74_pred_2 = _2344;
                    frontier_phi_74_pred_3 = _2343;
                    frontier_phi_74_pred_4 = _2347;
                    frontier_phi_74_pred_5 = _2348;
                }
                else
                {
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    uint _2524;
                    _2518 = _2343;
                    _2519 = _2344;
                    _2520 = _2345;
                    _2521 = _2346;
                    _2522 = _2347;
                    _2523 = _2348;
                    _2524 = _2358;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    for (;;)
                    {
                        uint _2528 = uint(findLSB(_2524)) + (_2349 << 5u);
                        uint _2525 = (_2524 + 4294967295u) & _2524;
                        uint _2530 = _2528 * 48u;
                        vec4 _2544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2530)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 3u)).x));
                        uint _2550 = (_2528 * 48u) + 4u;
                        vec4 _2563 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2550)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 3u)).x));
                        uint _2569 = (_2528 * 48u) + 8u;
                        vec3 _2580 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2569)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 2u)).x));
                        float _2584 = _2544.x - _2014;
                        float _2585 = _2544.y - _2015;
                        float _2586 = _2544.z - _2016;
                        float _2587 = dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586));
                        float _2590 = inversesqrt(_2587);
                        float _2591 = _2590 * _2584;
                        float _2592 = _2590 * _2585;
                        float _2593 = _2590 * _2586;
                        float _2594 = dot(vec3(_664, _667, _670), vec3(_2591, _2592, _2593));
                        float _2599 = 1.0 - (_2587 * _2544.w);
                        float _3805 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
                        float _2600 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                        float _2601 = sqrt(_2587) * _2563.w;
                        float _2604 = 1.39999997615814208984375 / (_2601 + 1.39999997615814208984375);
                        float _2605 = _2604 * _2604;
                        float _2608 = ((1.0 - _2605) * _2594) + _2605;
                        float _2611 = _2601 * _2601;
                        float _2615 = ((isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0))) * _2600) / ((_2611 * 0.699999988079071044921875) + 1.0);
                        float _2619 = (-0.0) - _2014;
                        float _2620 = (-0.0) - _2015;
                        float _2621 = (-0.0) - _2016;
                        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
                        float _2626 = _2625 * _2619;
                        float _2627 = _2625 * _2620;
                        float _2628 = _2625 * _2621;
                        float _2636 = exp2(log2(1.0 / ((_2611 * 3.5) + 5.0)) * 0.25);
                        float _2637 = 1.0 - _725;
                        float _2644 = sqrt(1.0 - ((1.0 - (_2637 * _2637)) * (1.0 - (_2636 * _2636))));
                        float _2645 = _2644 * _2644;
                        float _2646 = _2645 * _2645;
                        float _2647 = _2626 + _2591;
                        float _2648 = _2627 + _2592;
                        float _2649 = _2628 + _2593;
                        float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
                        float _2657 = dot(vec3(_664, _667, _670), vec3(_2626, _2627, _2628));
                        float _3821 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2660 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
                        float _2661 = dot(vec3(_664, _667, _670), vec3(_2653 * _2647, _2653 * _2648, _2653 * _2649));
                        float _3832 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
                        float _2664 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
                        float _2668 = ((_2664 * _2664) * (_2646 + (-1.0))) + 1.0;
                        float _2669 = _2604 * _2645;
                        float _2670 = _2669 * _2669;
                        float _2673 = ((1.0 - _2670) * _2594) + _2670;
                        float _3843 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2674 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
                        float _2675 = 1.0 - _2645;
                        float _2685 = (0.5 / (((_2674 * ((_2660 * _2675) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2674 * _2675) + _2645) * _2660))) * _2674;
                        float _3854 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2696 = (((_2646 * 3.1415927410125732421875) * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) / ((_2668 * _2668) * ((_2611 * 2.1991131305694580078125) + 3.141590118408203125))) * _2600;
                        _2427 = (_2615 * _2563.x) + _2521;
                        _2428 = (_2615 * _2563.y) + _2522;
                        _2429 = (_2615 * _2563.z) + _2523;
                        _2424 = (_2696 * _2580.x) + _2518;
                        _2425 = (_2696 * _2580.y) + _2519;
                        _2426 = (_2696 * _2580.z) + _2520;
                        if (_2525 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2518 = _2424;
                            _2519 = _2425;
                            _2520 = _2426;
                            _2521 = _2427;
                            _2522 = _2428;
                            _2523 = _2429;
                            _2524 = _2525;
                        }
                    }
                    frontier_phi_74_pred = _2427;
                    frontier_phi_74_pred_1 = _2426;
                    frontier_phi_74_pred_2 = _2425;
                    frontier_phi_74_pred_3 = _2424;
                    frontier_phi_74_pred_4 = _2428;
                    frontier_phi_74_pred_5 = _2429;
                }
                _2174 = frontier_phi_74_pred;
                _2172 = frontier_phi_74_pred_1;
                _2170 = frontier_phi_74_pred_2;
                _2168 = frontier_phi_74_pred_3;
                _2176 = frontier_phi_74_pred_4;
                _2178 = frontier_phi_74_pred_5;
                uint _2350 = _2349 + 1u;
                if (_2350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2343 = _2168;
                    _2344 = _2170;
                    _2345 = _2172;
                    _2346 = _2174;
                    _2347 = _2176;
                    _2348 = _2178;
                    _2349 = _2350;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2167 = _2168;
            _2169 = _2170;
            _2171 = _2172;
            _2173 = _2174;
            _2175 = _2176;
            _2177 = _2178;
        }
        uvec4 _2181 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2182 = _2181.z;
        uint _2184 = (_2182 >> 8u) & 15u;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        if (((4294967295u << _2184) & _2060) == 0u)
        {
            _2311 = _2167;
            _2313 = _2169;
            _2315 = _2171;
            _2317 = _2173;
            _2319 = _2175;
            _2321 = _2177;
        }
        else
        {
            float _2336 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
            float _2337 = _2336 * _2014;
            float _2338 = _2336 * _2015;
            float _2339 = _2336 * _2016;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2184 < ((_2182 >> 12u) & 15u))
            {
                float _2312;
                float _2314;
                float _2316;
                float _2318;
                float _2320;
                float _2322;
                float _2501 = _2167;
                float _2502 = _2169;
                float _2503 = _2171;
                float _2504 = _2173;
                float _2505 = _2175;
                float _2506 = _2177;
                uint _2507 = _2184;
                uint _2516;
                bool _2517;
                for (;;)
                {
                    _2516 = texelFetch(g_lightClassification, int((((_2054 << 5u) + (_2040 << 9u)) + (_2507 << 2u)) >> 2u)).x;
                    _2517 = _2516 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2517)
                    {
                        frontier_phi_83_pred = _2504;
                        frontier_phi_83_pred_1 = _2503;
                        frontier_phi_83_pred_2 = _2502;
                        frontier_phi_83_pred_3 = _2501;
                        frontier_phi_83_pred_4 = _2506;
                        frontier_phi_83_pred_5 = _2505;
                    }
                    else
                    {
                        float _2722;
                        float _2723;
                        float _2724;
                        float _2725;
                        float _2726;
                        float _2727;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _2735 = _2501;
                        float _2736 = _2502;
                        float _2737 = _2503;
                        float _2738 = _2504;
                        float _2739 = _2505;
                        float _2740 = _2506;
                        uint _2741 = _2516;
                        uint _2742;
                        vec4 _2767;
                        float _2768;
                        vec4 _2783;
                        vec3 _2795;
                        vec4 _2810;
                        vec4 _2825;
                        float _2871;
                        bool _2872;
                        for (;;)
                        {
                            uint _2752 = ((_2507 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2741));
                            _2742 = (_2741 + 4294967295u) & _2741;
                            uint _2754 = _2752 * 40u;
                            _2767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 3u)).x));
                            _2768 = _2767.w;
                            uint _2770 = (_2752 * 40u) + 4u;
                            _2783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 3u)).x));
                            uint _2785 = (_2752 * 40u) + 8u;
                            _2795 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x));
                            uint _2797 = (_2752 * 40u) + 16u;
                            _2810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 3u)).x));
                            uint _2812 = (_2752 * 40u) + 20u;
                            _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            uint _2827 = (_2752 * 40u) + 24u;
                            vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2846 = (_2752 * 40u) + 28u;
                            vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            _2871 = fma(_2016, _2859.z, fma(_2015, _2859.y, _2859.x * _2014)) + _2859.w;
                            _2872 = !((fma(_2016, _2840.z, fma(_2015, _2840.y, _2840.x * _2014)) + _2840.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2872)
                            {
                                float _2899 = _2767.x - _2014;
                                float _2900 = _2767.y - _2015;
                                float _2901 = _2767.z - _2016;
                                float _2902 = dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901));
                                float _2905 = inversesqrt(_2902);
                                float _2906 = _2905 * _2899;
                                float _2907 = _2905 * _2900;
                                float _2908 = _2905 * _2901;
                                float _2912 = 1.0 - (_2902 / (_2768 * _2768));
                                float _3865 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2913 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                                float _2917 = sqrt(_2902) * _2783.w;
                                float _2919 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                                float _2920 = _2919 * _2919;
                                float _2923 = ((1.0 - _2920) * dot(vec3(_2906, _2907, _2908), vec3(_664, _667, _670))) + _2920;
                                float _2926 = _2917 * _2917;
                                float _2930 = (fma(_2016, _2810.z, fma(_2015, _2810.y, _2810.x * _2014)) + _2810.w) / _2871;
                                float _2931 = (fma(_2016, _2825.z, fma(_2015, _2825.y, _2825.x * _2014)) + _2825.w) / _2871;
                                float _2935 = 1.0 - dot(vec2(_2930, _2931), vec2(_2930, _2931));
                                float _3881 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                                float _2936 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
                                float _2937 = _2936 * (((isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))) * _2913) / ((_2926 * 0.699999988079071044921875) + 1.0));
                                float _2949 = exp2(log2(1.0 / ((_2926 * 3.5) + 5.0)) * 0.25);
                                float _2950 = 1.0 - _725;
                                float _2957 = sqrt(1.0 - ((1.0 - (_2950 * _2950)) * (1.0 - (_2949 * _2949))));
                                float _2958 = _2957 * _2957;
                                float _2959 = _2958 * _2958;
                                float _2960 = _2906 - _2337;
                                float _2961 = _2907 - _2338;
                                float _2962 = _2908 - _2339;
                                float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                                float _2970 = dot(vec3(_664, _667, _670), vec3((-0.0) - _2337, (-0.0) - _2338, (-0.0) - _2339));
                                float _3892 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2973 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                                float _2974 = dot(vec3(_664, _667, _670), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                                float _3903 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2977 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                                float _2981 = ((_2977 * _2977) * (_2959 + (-1.0))) + 1.0;
                                float _2982 = _2919 * _2958;
                                float _2983 = _2982 * _2982;
                                float _2989 = ((1.0 - _2983) * dot(vec3(_664, _667, _670), vec3(_2906, _2907, _2908))) + _2983;
                                float _3914 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2990 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                                float _2991 = 1.0 - _2958;
                                float _3001 = (0.5 / (((_2990 * ((_2973 * _2991) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2958) * _2973))) * _2990;
                                float _3925 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3011 = (_2936 * _2913) * (((_2959 * 3.1415927410125732421875) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) / ((_2981 * _2981) * ((_2926 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2937 * _2783.x;
                                frontier_phi_89_pred_1 = _3011 * _2795.z;
                                frontier_phi_89_pred_2 = _3011 * _2795.y;
                                frontier_phi_89_pred_3 = _3011 * _2795.x;
                                frontier_phi_89_pred_4 = _2937 * _2783.z;
                                frontier_phi_89_pred_5 = _2937 * _2783.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3018 = frontier_phi_89_pred;
                            _3017 = frontier_phi_89_pred_1;
                            _3016 = frontier_phi_89_pred_2;
                            _3015 = frontier_phi_89_pred_3;
                            _3020 = frontier_phi_89_pred_4;
                            _3019 = frontier_phi_89_pred_5;
                            _2725 = _3018 + _2738;
                            _2726 = _3019 + _2739;
                            _2727 = _3020 + _2740;
                            _2722 = _3015 + _2735;
                            _2723 = _3016 + _2736;
                            _2724 = _3017 + _2737;
                            if (_2742 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2735 = _2722;
                                _2736 = _2723;
                                _2737 = _2724;
                                _2738 = _2725;
                                _2739 = _2726;
                                _2740 = _2727;
                                _2741 = _2742;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2725;
                        frontier_phi_83_pred_1 = _2724;
                        frontier_phi_83_pred_2 = _2723;
                        frontier_phi_83_pred_3 = _2722;
                        frontier_phi_83_pred_4 = _2727;
                        frontier_phi_83_pred_5 = _2726;
                    }
                    _2318 = frontier_phi_83_pred;
                    _2316 = frontier_phi_83_pred_1;
                    _2314 = frontier_phi_83_pred_2;
                    _2312 = frontier_phi_83_pred_3;
                    _2322 = frontier_phi_83_pred_4;
                    _2320 = frontier_phi_83_pred_5;
                    uint _2508 = _2507 + 1u;
                    if (_2508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2501 = _2312;
                        _2502 = _2314;
                        _2503 = _2316;
                        _2504 = _2318;
                        _2505 = _2320;
                        _2506 = _2322;
                        _2507 = _2508;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2322;
                frontier_phi_65_66_ladder_1 = _2320;
                frontier_phi_65_66_ladder_2 = _2316;
                frontier_phi_65_66_ladder_3 = _2314;
                frontier_phi_65_66_ladder_4 = _2318;
                frontier_phi_65_66_ladder_5 = _2312;
            }
            else
            {
                frontier_phi_65_66_ladder = _2177;
                frontier_phi_65_66_ladder_1 = _2175;
                frontier_phi_65_66_ladder_2 = _2171;
                frontier_phi_65_66_ladder_3 = _2169;
                frontier_phi_65_66_ladder_4 = _2173;
                frontier_phi_65_66_ladder_5 = _2167;
            }
            _2311 = frontier_phi_65_66_ladder_5;
            _2313 = frontier_phi_65_66_ladder_3;
            _2315 = frontier_phi_65_66_ladder_2;
            _2317 = frontier_phi_65_66_ladder_4;
            _2319 = frontier_phi_65_66_ladder_1;
            _2321 = frontier_phi_65_66_ladder;
        }
        float _2326 = isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0));
        _2073 = (_2326 * _2317) + _1803;
        _2075 = (_2326 * _2319) + _1804;
        _2077 = (_2326 * _2321) + _1805;
        _2079 = ((_2311 * 0.039999999105930328369140625) * _2326) + _1956;
        _2081 = ((_2313 * 0.039999999105930328369140625) * _2326) + _1957;
        _2083 = ((_2315 * 0.039999999105930328369140625) * _2326) + _1958;
    }
    else
    {
        _2073 = _1803;
        _2075 = _1804;
        _2077 = _1805;
        _2079 = _1956;
        _2081 = _1957;
        _2083 = _1958;
    }
    uint _2089 = _685 + uint(cbMatDynParam._m0[0u].w);
    float _3941 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3952 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3963 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _2114 = (((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_2073 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _709))) + ((_2079 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1515)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2089].x * ((_552 * ((_508 - _428) - (_508 * _284))) + _428));
    float _2116 = ((cbInstanceData._m0[_2089].y * ((_552 * ((_509 - _429) - (_509 * _284))) + _429)) + ((_2081 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1515)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2075 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _709)));
    float _2118 = ((cbInstanceData._m0[_2089].z * ((_552 * ((_510 - _430) - (_510 * _284))) + _430)) + ((_2083 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1515)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_2077 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _709)));
    uint _2122 = _683 + 6u;
    float _2130 = _642 / cbSceneParam._m0[86u].x;
    float _2131 = _643 / cbSceneParam._m0[86u].y;
    vec4 _2145 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2130, _2131, (log2((isnan(cbSceneParam._m0[77u].w) ? _629 : (isnan(_629) ? cbSceneParam._m0[77u].w : min(_629, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2147 = _2145.x;
    float _2148 = _2145.y;
    float _2149 = _2145.z;
    float _2150 = _2145.w;
    float _2230;
    float _2232;
    float _2234;
    float _2236;
    if (_629 > cbSceneParam._m0[78u].w)
    {
        float _2192 = isnan(_629) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _629 : min(cbSceneParam._m0[80u].w, _629));
        float _2193 = _2192 / _629;
        float _2204 = _2193 * _257;
        float _2205 = _258 * _2193;
        float _2206 = (-0.0) - _2205;
        float _2207 = _2193 * _259;
        float _2209 = (cbSceneParam._m0[77u].w * _2206) / _2192;
        float _2210 = _2209 + cbSceneParam._m0[79u].w;
        float _2211 = cbSceneParam._m0[79u].w - _2205;
        float _2217 = sqrt(((_2204 * _2204) + (_2205 * _2205)) + (_2207 * _2207));
        float _2220 = (1.0 - (cbSceneParam._m0[77u].w / _2192)) * _2217;
        float _2226 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2228 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2437;
        if (abs((_2206 - _2209) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2437 = ((((_2210 > 0.0) ? exp2(_2226 * _2210) : (2.0 - exp2(_2228 * _2210))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2220;
        }
        else
        {
            float _2372 = 1.0 / cbSceneParam._m0[80u].x;
            float _2373 = isnan(_2211) ? _2210 : (isnan(_2210) ? _2211 : max(_2210, _2211));
            float _2374 = isnan(_2211) ? _2210 : (isnan(_2210) ? _2211 : min(_2210, _2211));
            float _2383 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : min(_2373, 0.0));
            float _2384 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : min(_2374, 0.0));
            _2437 = ((abs(_2217 / _2206) * cbSceneParam._m0[80u].y) * ((((_2383 - _2384) * 2.0) - ((exp2(_2226 * (isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0)))) - exp2(_2226 * (isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0))))) * _2372)) - ((exp2(_2228 * _2383) - exp2(_2228 * _2384)) * _2372))) + (_2220 * cbSceneParam._m0[80u].z);
        }
        vec4 _2439 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2130, _2131, 1.0), 0.0);
        float _2448 = exp2((_2437 * (-1.44269502162933349609375)) * (1.0 - _2439.w));
        float _2449 = log2(_2448);
        float _2465 = log2(_2150);
        _2230 = (exp2(_2465 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].x)) * _2439.x) / cbSceneParam._m0[78u].x)) + _2147;
        _2232 = (exp2(_2465 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].y)) * _2439.y) / cbSceneParam._m0[78u].y)) + _2148;
        _2234 = (exp2(_2465 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].z)) * _2439.z) / cbSceneParam._m0[78u].z)) + _2149;
        _2236 = _2448 * _2150;
    }
    else
    {
        _2230 = _2147;
        _2232 = _2148;
        _2234 = _2149;
        _2236 = _2150;
    }
    float _2248 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2249 = _2248 == 3.0;
    float _2250 = log2(_2236);
    float _2257 = exp2(_2250 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0)));
    float _2258 = exp2(_2250 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0)));
    float _2259 = exp2(_2250 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0)));
    float _2268 = (_2248 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2268 * (_2249 ? _2257 : (_2257 + (cbSceneParam._m0[72u].w * _2230)));
    SV_Target.y = _2268 * (_2249 ? _2258 : (_2258 + (cbSceneParam._m0[72u].w * _2232)));
    SV_Target.z = _2268 * (_2249 ? _2259 : (_2259 + (cbSceneParam._m0[72u].w * _2234)));
    SV_Target.w = cbInstanceData._m0[_2122].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2122].w;
}


